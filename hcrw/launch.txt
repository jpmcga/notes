/sbin/launchd:
(__TEXT,__text) section
100001200:	48 85 ff	testq	%rdi, %rdi
100001203:	74 06	je	0x10000120b
100001205:	48 89 f8	movq	%rdi, %rax
100001208:	31 d2	xorl	%edx, %edx
10000120a:	c3	retq
10000120b:	55	pushq	%rbp
10000120c:	48 89 e5	movq	%rsp, %rbp
10000120f:	e8 31 da 03 00	callq	0x10003ec45
100001214:	85 ff	testl	%edi, %edi
100001216:	74 05	je	0x10000121d
100001218:	31 c0	xorl	%eax, %eax
10000121a:	89 fa	movl	%edi, %edx
10000121c:	c3	retq
10000121d:	55	pushq	%rbp
10000121e:	48 89 e5	movq	%rsp, %rbp
100001221:	e8 31 da 03 00	callq	0x10003ec57
100001226:	55	pushq	%rbp
100001227:	48 89 e5	movq	%rsp, %rbp
10000122a:	41 57	pushq	%r15
10000122c:	41 56	pushq	%r14
10000122e:	53	pushq	%rbx
10000122f:	50	pushq	%rax
100001230:	49 89 f6	movq	%rsi, %r14
100001233:	41 89 ff	movl	%edi, %r15d
100001236:	89 f8	movl	%edi, %eax
100001238:	48 8d 0c 80	leaq	(%rax,%rax,4), %rcx
10000123c:	48 8d 3c c8	leaq	(%rax,%rcx,8), %rdi
100001240:	48 83 c7 20	addq	$32, %rdi
100001244:	e8 9c c2 00 00	callq	0x10000d4e5
100001249:	48 89 c3	movq	%rax, %rbx
10000124c:	4c 89 f7	movq	%r14, %rdi
10000124f:	e8 d0 04 04 00	callq	0x100041724 ## symbol stub for: __Block_copy
100001254:	48 89 43 08	movq	%rax, 8(%rbx)
100001258:	44 89 7b 10	movl	%r15d, 16(%rbx)
10000125c:	48 89 d8	movq	%rbx, %rax
10000125f:	48 83 c4 08	addq	$8, %rsp
100001263:	5b	popq	%rbx
100001264:	41 5e	popq	%r14
100001266:	41 5f	popq	%r15
100001268:	5d	popq	%rbp
100001269:	c3	retq
10000126a:	55	pushq	%rbp
10000126b:	48 89 e5	movq	%rsp, %rbp
10000126e:	53	pushq	%rbx
10000126f:	50	pushq	%rax
100001270:	48 89 fb	movq	%rdi, %rbx
100001273:	83 7f 18 00	cmpl	$0, 24(%rdi)
100001277:	74 27	je	0x1000012a0
100001279:	48 89 df	movq	%rbx, %rdi
10000127c:	e8 6c 00 00 00	callq	0x1000012ed
100001281:	83 7b 18 00	cmpl	$0, 24(%rbx)
100001285:	75 f2	jne	0x100001279
100001287:	eb 17	jmp	0x1000012a0
100001289:	83 7e 10 00	cmpl	$0, 16(%rsi)
10000128d:	75 30	jne	0x1000012bf
10000128f:	48 83 7e 18 00	cmpq	$0, 24(%rsi)
100001294:	74 2e	je	0x1000012c4
100001296:	48 8b 7b 08	movq	8(%rbx), %rdi
10000129a:	48 89 da	movq	%rbx, %rdx
10000129d:	ff 57 10	callq	*16(%rdi)
1000012a0:	48 8b 33	movq	(%rbx), %rsi
1000012a3:	48 85 f6	testq	%rsi, %rsi
1000012a6:	75 e1	jne	0x100001289
1000012a8:	48 8b 7b 08	movq	8(%rbx), %rdi
1000012ac:	e8 85 04 04 00	callq	0x100041736 ## symbol stub for: __Block_release
1000012b1:	48 89 df	movq	%rbx, %rdi
1000012b4:	48 83 c4 08	addq	$8, %rsp
1000012b8:	5b	popq	%rbx
1000012b9:	5d	popq	%rbp
1000012ba:	e9 71 07 04 00	jmp	0x100041a30 ## symbol stub for: _free
1000012bf:	e8 ba d9 03 00	callq	0x10003ec7e
1000012c4:	e8 a0 d9 03 00	callq	0x10003ec69
1000012c9:	55	pushq	%rbp
1000012ca:	48 89 e5	movq	%rsp, %rbp
1000012cd:	53	pushq	%rbx
1000012ce:	50	pushq	%rax
1000012cf:	83 7f 18 00	cmpl	$0, 24(%rdi)
1000012d3:	74 11	je	0x1000012e6
1000012d5:	48 89 fb	movq	%rdi, %rbx
1000012d8:	48 89 df	movq	%rbx, %rdi
1000012db:	e8 0d 00 00 00	callq	0x1000012ed
1000012e0:	83 7b 18 00	cmpl	$0, 24(%rbx)
1000012e4:	75 f2	jne	0x1000012d8
1000012e6:	48 83 c4 08	addq	$8, %rsp
1000012ea:	5b	popq	%rbx
1000012eb:	5d	popq	%rbp
1000012ec:	c3	retq
1000012ed:	55	pushq	%rbp
1000012ee:	48 89 e5	movq	%rsp, %rbp
1000012f1:	41 56	pushq	%r14
1000012f3:	53	pushq	%rbx
1000012f4:	83 7f 18 00	cmpl	$0, 24(%rdi)
1000012f8:	74 60	je	0x10000135a
1000012fa:	48 89 fb	movq	%rdi, %rbx
1000012fd:	8b 47 14	movl	20(%rdi), %eax
100001300:	48 8d 0c 80	leaq	(%rax,%rax,4), %rcx
100001304:	48 8d 0c c8	leaq	(%rax,%rcx,8), %rcx
100001308:	48 8b 74 0f 1c	movq	28(%rdi,%rcx), %rsi
10000130d:	8b 46 10	movl	16(%rsi), %eax
100001310:	85 c0	testl	%eax, %eax
100001312:	74 4b	je	0x10000135f
100001314:	4c 8d 34 0b	leaq	(%rbx,%rcx), %r14
100001318:	49 83 c6 1c	addq	$28, %r14
10000131c:	ff c8	decl	%eax
10000131e:	89 46 10	movl	%eax, 16(%rsi)
100001321:	75 11	jne	0x100001334
100001323:	48 83 7e 18 00	cmpq	$0, 24(%rsi)
100001328:	75 0a	jne	0x100001334
10000132a:	48 8b 7b 08	movq	8(%rbx), %rdi
10000132e:	48 89 da	movq	%rbx, %rdx
100001331:	ff 57 10	callq	*16(%rdi)
100001334:	0f 57 c0	xorps	%xmm0, %xmm0
100001337:	41 0f 11 46 19	movups	%xmm0, 25(%r14)
10000133c:	41 0f 11 46 10	movups	%xmm0, 16(%r14)
100001341:	41 0f 11 06	movups	%xmm0, (%r14)
100001345:	ff 4b 18	decl	24(%rbx)
100001348:	8b 43 14	movl	20(%rbx), %eax
10000134b:	ff c0	incl	%eax
10000134d:	31 d2	xorl	%edx, %edx
10000134f:	f7 73 10	divl	16(%rbx)
100001352:	89 53 14	movl	%edx, 20(%rbx)
100001355:	5b	popq	%rbx
100001356:	41 5e	popq	%r14
100001358:	5d	popq	%rbp
100001359:	c3	retq
10000135a:	e8 34 d9 03 00	callq	0x10003ec93
10000135f:	e8 44 d9 03 00	callq	0x10003eca8
100001364:	55	pushq	%rbp
100001365:	48 89 e5	movq	%rsp, %rbp
100001368:	8b 47 18	movl	24(%rdi), %eax
10000136b:	5d	popq	%rbp
10000136c:	c3	retq
10000136d:	55	pushq	%rbp
10000136e:	48 89 e5	movq	%rsp, %rbp
100001371:	39 77 18	cmpl	%esi, 24(%rdi)
100001374:	72 1b	jb	0x100001391
100001376:	03 77 14	addl	20(%rdi), %esi
100001379:	89 f0	movl	%esi, %eax
10000137b:	31 d2	xorl	%edx, %edx
10000137d:	f7 77 10	divl	16(%rdi)
100001380:	48 8d 04 92	leaq	(%rdx,%rdx,4), %rax
100001384:	48 8d 04 c2	leaq	(%rdx,%rax,8), %rax
100001388:	48 01 f8	addq	%rdi, %rax
10000138b:	48 83 c0 1c	addq	$28, %rax
10000138f:	5d	popq	%rbp
100001390:	c3	retq
100001391:	e8 27 d9 03 00	callq	0x10003ecbd
100001396:	55	pushq	%rbp
100001397:	48 89 e5	movq	%rsp, %rbp
10000139a:	41 57	pushq	%r15
10000139c:	41 56	pushq	%r14
10000139e:	41 54	pushq	%r12
1000013a0:	53	pushq	%rbx
1000013a1:	49 89 d6	movq	%rdx, %r14
1000013a4:	49 89 f4	movq	%rsi, %r12
1000013a7:	49 89 ff	movq	%rdi, %r15
1000013aa:	48 89 f7	movq	%rsi, %rdi
1000013ad:	e8 a4 0a 04 00	callq	0x100041e56 ## symbol stub for: _strlen
1000013b2:	48 8d 78 20	leaq	32(%rax), %rdi
1000013b6:	31 d2	xorl	%edx, %edx
1000013b8:	48 ff c7	incq	%rdi
1000013bb:	0f 94 c2	sete	%dl
1000013be:	48 89 d1	movq	%rdx, %rcx
1000013c1:	48 f7 d9	negq	%rcx
1000013c4:	48 31 ca	xorq	%rcx, %rdx
1000013c7:	0f 95 c2	setne	%dl
1000013ca:	48 83 c0 20	addq	$32, %rax
1000013ce:	72 5c	jb	0x10000142c
1000013d0:	84 d2	testb	%dl, %dl
1000013d2:	75 58	jne	0x10000142c
1000013d4:	48 85 c9	testq	%rcx, %rcx
1000013d7:	78 53	js	0x10000142c
1000013d9:	e8 07 c1 00 00	callq	0x10000d4e5
1000013de:	48 89 c3	movq	%rax, %rbx
1000013e1:	4c 89 e7	movq	%r12, %rdi
1000013e4:	e8 6d 0a 04 00	callq	0x100041e56 ## symbol stub for: _strlen
1000013e9:	31 d2	xorl	%edx, %edx
1000013eb:	48 ff c0	incq	%rax
1000013ee:	0f 94 c2	sete	%dl
1000013f1:	48 89 d1	movq	%rdx, %rcx
1000013f4:	48 f7 d9	negq	%rcx
1000013f7:	48 31 ca	xorq	%rcx, %rdx
1000013fa:	75 30	jne	0x10000142c
1000013fc:	48 85 c9	testq	%rcx, %rcx
1000013ff:	78 2b	js	0x10000142c
100001401:	48 89 df	movq	%rbx, %rdi
100001404:	48 83 c7 20	addq	$32, %rdi
100001408:	4c 89 e6	movq	%r12, %rsi
10000140b:	48 89 c2	movq	%rax, %rdx
10000140e:	e8 bb 07 04 00	callq	0x100041bce ## symbol stub for: _memcpy
100001413:	4c 89 73 08	movq	%r14, 8(%rbx)
100001417:	49 8b 07	movq	(%r15), %rax
10000141a:	48 89 03	movq	%rax, (%rbx)
10000141d:	49 89 1f	movq	%rbx, (%r15)
100001420:	48 89 d8	movq	%rbx, %rax
100001423:	5b	popq	%rbx
100001424:	41 5c	popq	%r12
100001426:	41 5e	popq	%r14
100001428:	41 5f	popq	%r15
10000142a:	5d	popq	%rbp
10000142b:	c3	retq
10000142c:	0f 0b	ud2
10000142e:	55	pushq	%rbp
10000142f:	48 89 e5	movq	%rsp, %rbp
100001432:	48 8b 06	movq	(%rsi), %rax
100001435:	48 39 f8	cmpq	%rdi, %rax
100001438:	74 08	je	0x100001442
10000143a:	48 89 c6	movq	%rax, %rsi
10000143d:	48 8b 00	movq	(%rax), %rax
100001440:	eb f3	jmp	0x100001435
100001442:	48 8b 07	movq	(%rdi), %rax
100001445:	48 89 06	movq	%rax, (%rsi)
100001448:	5d	popq	%rbp
100001449:	e9 e2 05 04 00	jmp	0x100041a30 ## symbol stub for: _free
10000144e:	55	pushq	%rbp
10000144f:	48 89 e5	movq	%rsp, %rbp
100001452:	48 83 7f 18 00	cmpq	$0, 24(%rdi)
100001457:	75 0b	jne	0x100001464
100001459:	48 85 d2	testq	%rdx, %rdx
10000145c:	74 0b	je	0x100001469
10000145e:	48 89 57 18	movq	%rdx, 24(%rdi)
100001462:	5d	popq	%rbp
100001463:	c3	retq
100001464:	e8 7e d8 03 00	callq	0x10003ece7
100001469:	e8 64 d8 03 00	callq	0x10003ecd2
10000146e:	55	pushq	%rbp
10000146f:	48 89 e5	movq	%rsp, %rbp
100001472:	41 57	pushq	%r15
100001474:	41 56	pushq	%r14
100001476:	41 55	pushq	%r13
100001478:	41 54	pushq	%r12
10000147a:	53	pushq	%rbx
10000147b:	50	pushq	%rax
10000147c:	48 83 7f 18 00	cmpq	$0, 24(%rdi)
100001481:	0f 84 8e 00 00 00	je	0x100001515
100001487:	41 89 d6	movl	%edx, %r14d
10000148a:	48 89 f3	movq	%rsi, %rbx
10000148d:	49 89 ff	movq	%rdi, %r15
100001490:	8b 7e 10	movl	16(%rsi), %edi
100001493:	8b 46 18	movl	24(%rsi), %eax
100001496:	39 f8	cmpl	%edi, %eax
100001498:	75 20	jne	0x1000014ba
10000149a:	48 89 df	movq	%rbx, %rdi
10000149d:	4d 89 cc	movq	%r9, %r12
1000014a0:	4d 89 c5	movq	%r8, %r13
1000014a3:	89 4d d4	movl	%ecx, -44(%rbp)
1000014a6:	e8 42 fe ff ff	callq	0x1000012ed
1000014ab:	8b 4d d4	movl	-44(%rbp), %ecx
1000014ae:	4d 89 e8	movq	%r13, %r8
1000014b1:	4d 89 e1	movq	%r12, %r9
1000014b4:	8b 7b 10	movl	16(%rbx), %edi
1000014b7:	8b 43 18	movl	24(%rbx), %eax
1000014ba:	39 f8	cmpl	%edi, %eax
1000014bc:	73 5c	jae	0x10000151a
1000014be:	03 43 14	addl	20(%rbx), %eax
1000014c1:	48 8b 75 10	movq	16(%rbp), %rsi
1000014c5:	31 d2	xorl	%edx, %edx
1000014c7:	f7 f7	divl	%edi
1000014c9:	48 8d 04 92	leaq	(%rdx,%rdx,4), %rax
1000014cd:	48 8d 04 c2	leaq	(%rdx,%rax,8), %rax
1000014d1:	4c 89 7c 03 1c	movq	%r15, 28(%rbx,%rax)
1000014d6:	49 8b 57 18	movq	24(%r15), %rdx
1000014da:	48 89 54 03 24	movq	%rdx, 36(%rbx,%rax)
1000014df:	44 89 74 03 34	movl	%r14d, 52(%rbx,%rax)
1000014e4:	89 4c 03 38	movl	%ecx, 56(%rbx,%rax)
1000014e8:	4c 89 44 03 2c	movq	%r8, 44(%rbx,%rax)
1000014ed:	44 88 4c 03 3c	movb	%r9b, 60(%rbx,%rax)
1000014f2:	48 89 74 03 3d	movq	%rsi, 61(%rbx,%rax)
1000014f7:	41 ff 47 10	incl	16(%r15)
1000014fb:	49 c7 47 18 00 00 00 00	movq	$0, 24(%r15)
100001503:	ff 43 18	incl	24(%rbx)
100001506:	48 83 c4 08	addq	$8, %rsp
10000150a:	5b	popq	%rbx
10000150b:	41 5c	popq	%r12
10000150d:	41 5d	popq	%r13
10000150f:	41 5e	popq	%r14
100001511:	41 5f	popq	%r15
100001513:	5d	popq	%rbp
100001514:	c3	retq
100001515:	e8 e2 d7 03 00	callq	0x10003ecfc
10000151a:	e8 f2 d7 03 00	callq	0x10003ed11
10000151f:	48 85 ff	testq	%rdi, %rdi
100001522:	74 06	je	0x10000152a
100001524:	48 89 f8	movq	%rdi, %rax
100001527:	31 d2	xorl	%edx, %edx
100001529:	c3	retq
10000152a:	55	pushq	%rbp
10000152b:	48 89 e5	movq	%rsp, %rbp
10000152e:	e8 f3 d7 03 00	callq	0x10003ed26
100001533:	85 ff	testl	%edi, %edi
100001535:	74 05	je	0x10000153c
100001537:	31 c0	xorl	%eax, %eax
100001539:	89 fa	movl	%edi, %edx
10000153b:	c3	retq
10000153c:	55	pushq	%rbp
10000153d:	48 89 e5	movq	%rsp, %rbp
100001540:	e8 f3 d7 03 00	callq	0x10003ed38
100001545:	55	pushq	%rbp
100001546:	48 89 e5	movq	%rsp, %rbp
100001549:	c6 05 40 17 06 00 00	movb	$0, 399168(%rip)
100001550:	5d	popq	%rbp
100001551:	c3	retq
100001552:	55	pushq	%rbp
100001553:	48 89 e5	movq	%rsp, %rbp
100001556:	53	pushq	%rbx
100001557:	50	pushq	%rax
100001558:	80 3d 31 17 06 00 00	cmpb	$0, 399153(%rip)
10000155f:	75 27	jne	0x100001588
100001561:	48 89 fb	movq	%rdi, %rbx
100001564:	48 8d 3d 25 1f 04 00	leaq	270117(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
10000156b:	e8 24 07 04 00	callq	0x100041c94 ## symbol stub for: _os_variant_has_internal_diagnostics
100001570:	84 c0	testb	%al, %al
100001572:	b8 fa 00 00 00	movl	$250, %eax
100001577:	bf e8 03 00 00	movl	$1000, %edi
10000157c:	0f 45 f8	cmovnel	%eax, %edi
10000157f:	e8 66 02 04 00	callq	0x1000417ea ## symbol stub for: _arc4random_uniform
100001584:	85 c0	testl	%eax, %eax
100001586:	74 07	je	0x10000158f
100001588:	48 83 c4 08	addq	$8, %rsp
10000158c:	5b	popq	%rbx
10000158d:	5d	popq	%rbp
10000158e:	c3	retq
10000158f:	c6 05 fa 16 06 00 01	movb	$1, 399098(%rip)
100001596:	80 8b 14 05 00 00 80	orb	$-128, 1300(%rbx)
10000159d:	48 8d 35 7a 1e 04 00	leaq	269946(%rip), %rsi ## literal pool for: "MallocProbGuardViaLaunchd"
1000015a4:	48 8d 15 8d 1e 04 00	leaq	269965(%rip), %rdx ## literal pool for: "1"
1000015ab:	48 89 df	movq	%rbx, %rdi
1000015ae:	b9 01 00 00 00	movl	$1, %ecx
1000015b3:	e8 af 1a 00 00	callq	0x100003067
1000015b8:	8b 8b 3c 03 00 00	movl	828(%rbx), %ecx
1000015be:	8b 83 40 03 00 00	movl	832(%rbx), %eax
1000015c4:	85 c9	testl	%ecx, %ecx
1000015c6:	7e 0c	jle	0x1000015d4
1000015c8:	81 c1 00 00 20 00	addl	$2097152, %ecx
1000015ce:	89 8b 3c 03 00 00	movl	%ecx, 828(%rbx)
1000015d4:	85 c0	testl	%eax, %eax
1000015d6:	7e 0b	jle	0x1000015e3
1000015d8:	05 00 00 20 00	addl	$2097152, %eax
1000015dd:	89 83 40 03 00 00	movl	%eax, 832(%rbx)
1000015e3:	48 8d 15 50 1e 04 00	leaq	269904(%rip), %rdx ## literal pool for: "Enabling Probabilistic Guard Malloc"
1000015ea:	48 89 df	movq	%rbx, %rdi
1000015ed:	be 05 00 00 00	movl	$5, %esi
1000015f2:	31 c0	xorl	%eax, %eax
1000015f4:	48 83 c4 08	addq	$8, %rsp
1000015f8:	5b	popq	%rbx
1000015f9:	5d	popq	%rbp
1000015fa:	e9 bb 49 01 00	jmp	0x100015fba
1000015ff:	55	pushq	%rbp
100001600:	48 89 e5	movq	%rsp, %rbp
100001603:	41 57	pushq	%r15
100001605:	41 56	pushq	%r14
100001607:	53	pushq	%rbx
100001608:	50	pushq	%rax
100001609:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
100001610:	48 85 c0	testq	%rax, %rax
100001613:	78 0b	js	0x100001620
100001615:	48 83 c4 08	addq	$8, %rsp
100001619:	5b	popq	%rbx
10000161a:	41 5e	popq	%r14
10000161c:	41 5f	popq	%r15
10000161e:	5d	popq	%rbp
10000161f:	c3	retq
100001620:	80 3d 69 16 06 00 00	cmpb	$0, 398953(%rip)
100001627:	0f 84 cc 00 00 00	je	0x1000016f9
10000162d:	49 89 fe	movq	%rdi, %r14
100001630:	0f b6 8f 15 05 00 00	movzbl	1301(%rdi), %ecx
100001637:	c6 05 52 16 06 00 00	movb	$0, 398930(%rip)
10000163e:	48 0f ba f0 3f	btrq	$63, %rax
100001643:	48 89 87 0d 05 00 00	movq	%rax, 1293(%rdi)
10000164a:	88 8f 15 05 00 00	movb	%cl, 1301(%rdi)
100001650:	48 8b 9f 80 03 00 00	movq	896(%rdi), %rbx
100001657:	48 85 db	testq	%rbx, %rbx
10000165a:	74 24	je	0x100001680
10000165c:	4c 8d 3d bb 1d 04 00	leaq	269755(%rip), %r15 ## literal pool for: "MallocProbGuardViaLaunchd"
100001663:	48 8d 7b 18	leaq	24(%rbx), %rdi
100001667:	ba 19 00 00 00	movl	$25, %edx
10000166c:	4c 89 fe	movq	%r15, %rsi
10000166f:	e8 e8 07 04 00	callq	0x100041e5c ## symbol stub for: _strncmp
100001674:	85 c0	testl	%eax, %eax
100001676:	74 20	je	0x100001698
100001678:	48 8b 1b	movq	(%rbx), %rbx
10000167b:	48 85 db	testq	%rbx, %rbx
10000167e:	75 e3	jne	0x100001663
100001680:	49 81 c6 18 05 00 00	addq	$1304, %r14
100001687:	48 8d 3d 18 1e 04 00	leaq	269848(%rip), %rdi ## literal pool for: "Failed to find Probabilistic Guard Malloc env var for enrolled process: %s"
10000168e:	4c 89 f6	movq	%r14, %rsi
100001691:	31 c0	xorl	%eax, %eax
100001693:	e8 7a 2d 03 00	callq	0x100034412
100001698:	4c 89 f7	movq	%r14, %rdi
10000169b:	48 89 de	movq	%rbx, %rsi
10000169e:	e8 72 19 00 00	callq	0x100003015
1000016a3:	41 8b 8e 3c 03 00 00	movl	828(%r14), %ecx
1000016aa:	41 8b 86 40 03 00 00	movl	832(%r14), %eax
1000016b1:	81 f9 01 00 20 00	cmpl	$2097153, %ecx
1000016b7:	7c 0d	jl	0x1000016c6
1000016b9:	81 c1 00 00 e0 ff	addl	$4292870144, %ecx
1000016bf:	41 89 8e 3c 03 00 00	movl	%ecx, 828(%r14)
1000016c6:	3d 01 00 20 00	cmpl	$2097153, %eax
1000016cb:	7c 0c	jl	0x1000016d9
1000016cd:	05 00 00 e0 ff	addl	$4292870144, %eax
1000016d2:	41 89 86 40 03 00 00	movl	%eax, 832(%r14)
1000016d9:	48 8d 15 7e 1d 04 00	leaq	269694(%rip), %rdx ## literal pool for: "Probabilistic Guard Malloc-enabled process exited"
1000016e0:	4c 89 f7	movq	%r14, %rdi
1000016e3:	be 05 00 00 00	movl	$5, %esi
1000016e8:	31 c0	xorl	%eax, %eax
1000016ea:	48 83 c4 08	addq	$8, %rsp
1000016ee:	5b	popq	%rbx
1000016ef:	41 5e	popq	%r14
1000016f1:	41 5f	popq	%r15
1000016f3:	5d	popq	%rbp
1000016f4:	e9 c1 48 01 00	jmp	0x100015fba
1000016f9:	e8 4c d6 03 00	callq	0x10003ed4a
1000016fe:	90	nop
1000016ff:	90	nop
100001700:	48 85 ff	testq	%rdi, %rdi
100001703:	74 06	je	0x10000170b
100001705:	48 89 f8	movq	%rdi, %rax
100001708:	31 d2	xorl	%edx, %edx
10000170a:	c3	retq
10000170b:	55	pushq	%rbp
10000170c:	48 89 e5	movq	%rsp, %rbp
10000170f:	e8 4c d6 03 00	callq	0x10003ed60
100001714:	85 ff	testl	%edi, %edi
100001716:	74 05	je	0x10000171d
100001718:	31 c0	xorl	%eax, %eax
10000171a:	89 fa	movl	%edi, %edx
10000171c:	c3	retq
10000171d:	55	pushq	%rbp
10000171e:	48 89 e5	movq	%rsp, %rbp
100001721:	e8 4c d6 03 00	callq	0x10003ed72
100001726:	55	pushq	%rbp
100001727:	48 89 e5	movq	%rsp, %rbp
10000172a:	53	pushq	%rbx
10000172b:	50	pushq	%rax
10000172c:	48 83 3d 64 15 06 00 00	cmpq	$0, 398692(%rip)
100001734:	75 78	jne	0x1000017ae
100001736:	83 3d 63 15 06 00 00	cmpl	$0, 398691(%rip)
10000173d:	75 74	jne	0x1000017b3
10000173f:	48 89 f0	movq	%rsi, %rax
100001742:	c7 05 54 15 06 00 01 00 00 00	movl	$1, 398676(%rip)
10000174c:	48 8d 5d f0	leaq	-16(%rbp), %rbx
100001750:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100001757:	48 8d 3d 93 1d 04 00	leaq	269715(%rip), %rdi ## literal pool for: "hw.osenvironment"
10000175e:	48 89 de	movq	%rbx, %rsi
100001761:	ff d0	callq	*%rax
100001763:	48 8b 13	movq	(%rbx), %rdx
100001766:	48 85 c0	testq	%rax, %rax
100001769:	74 34	je	0x10000179f
10000176b:	48 85 d2	testq	%rdx, %rdx
10000176e:	74 2f	je	0x10000179f
100001770:	80 3a 00	cmpb	$0, (%rdx)
100001773:	74 2a	je	0x10000179f
100001775:	48 8d 35 86 1d 04 00	leaq	269702(%rip), %rsi ## literal pool for: "boot-mode set by sysctl: %s"
10000177c:	bf 05 00 01 00	movl	$65541, %edi
100001781:	31 c0	xorl	%eax, %eax
100001783:	e8 40 3e 03 00	callq	0x1000355c8
100001788:	48 8b 7d f0	movq	-16(%rbp), %rdi
10000178c:	e8 27 00 00 00	callq	0x1000017b8
100001791:	c7 05 05 15 06 00 02 00 00 00	movl	$2, 398597(%rip)
10000179b:	48 8b 55 f0	movq	-16(%rbp), %rdx
10000179f:	48 89 d7	movq	%rdx, %rdi
1000017a2:	e8 89 02 04 00	callq	0x100041a30 ## symbol stub for: _free
1000017a7:	48 83 c4 08	addq	$8, %rsp
1000017ab:	5b	popq	%rbx
1000017ac:	5d	popq	%rbp
1000017ad:	c3	retq
1000017ae:	e8 e6 d5 03 00	callq	0x10003ed99
1000017b3:	e8 cc d5 03 00	callq	0x10003ed84
1000017b8:	55	pushq	%rbp
1000017b9:	48 89 e5	movq	%rsp, %rbp
1000017bc:	53	pushq	%rbx
1000017bd:	50	pushq	%rax
1000017be:	48 85 ff	testq	%rdi, %rdi
1000017c1:	74 77	je	0x10000183a
1000017c3:	48 89 fb	movq	%rdi, %rbx
1000017c6:	8b 05 d4 14 06 00	movl	398548(%rip), %eax
1000017cc:	83 f8 02	cmpl	$2, %eax
1000017cf:	72 1f	jb	0x1000017f0
1000017d1:	74 3f	je	0x100001812
1000017d3:	83 f8 03	cmpl	$3, %eax
1000017d6:	75 33	jne	0x10000180b
1000017d8:	48 8b 35 b9 14 06 00	movq	398521(%rip), %rsi
1000017df:	48 8d 3d d0 1d 04 00	leaq	269776(%rip), %rdi ## literal pool for: "Cannot set boot-mode after it has been committed: (%s, %s)"
1000017e6:	48 89 da	movq	%rbx, %rdx
1000017e9:	31 c0	xorl	%eax, %eax
1000017eb:	e8 22 2c 03 00	callq	0x100034412
1000017f0:	48 8b 3d a1 14 06 00	movq	398497(%rip), %rdi
1000017f7:	e8 34 02 04 00	callq	0x100041a30 ## symbol stub for: _free
1000017fc:	48 89 df	movq	%rbx, %rdi
1000017ff:	e8 de d7 00 00	callq	0x10000efe2
100001804:	48 89 05 8d 14 06 00	movq	%rax, 398477(%rip)
10000180b:	48 83 c4 08	addq	$8, %rsp
10000180f:	5b	popq	%rbx
100001810:	5d	popq	%rbp
100001811:	c3	retq
100001812:	48 8b 15 7f 14 06 00	movq	398463(%rip), %rdx
100001819:	48 85 d2	testq	%rdx, %rdx
10000181c:	74 21	je	0x10000183f
10000181e:	48 8d 35 cc 1d 04 00	leaq	269772(%rip), %rsi ## literal pool for: "boot-mode forced to (%s) skipping set: %s"
100001825:	bf 05 00 01 00	movl	$65541, %edi
10000182a:	48 89 d9	movq	%rbx, %rcx
10000182d:	31 c0	xorl	%eax, %eax
10000182f:	48 83 c4 08	addq	$8, %rsp
100001833:	5b	popq	%rbx
100001834:	5d	popq	%rbp
100001835:	e9 8e 3d 03 00	jmp	0x1000355c8
10000183a:	e8 6f d5 03 00	callq	0x10003edae
10000183f:	e8 7f d5 03 00	callq	0x10003edc3
100001844:	55	pushq	%rbp
100001845:	48 89 e5	movq	%rsp, %rbp
100001848:	89 fe	movl	%edi, %esi
10000184a:	83 ff 06	cmpl	$6, %edi
10000184d:	77 46	ja	0x100001895
10000184f:	48 8d 05 f7 1c 04 00	leaq	269559(%rip), %rax ## literal pool for: "fvunlock"
100001856:	89 f1	movl	%esi, %ecx
100001858:	48 8d 15 55 00 00 00	leaq	85(%rip), %rdx
10000185f:	48 63 0c 8a	movslq	(%rdx,%rcx,4), %rcx
100001863:	48 01 d1	addq	%rdx, %rcx
100001866:	ff e1	jmpq	*%rcx
100001868:	48 8d 05 e7 1c 04 00	leaq	269543(%rip), %rax ## literal pool for: "_autounlock"
10000186f:	eb 22	jmp	0x100001893
100001871:	48 8d 05 ea 1c 04 00	leaq	269546(%rip), %rax ## literal pool for: "migration"
100001878:	eb 19	jmp	0x100001893
10000187a:	48 8d 05 eb 1c 04 00	leaq	269547(%rip), %rax ## literal pool for: "recoveryos"
100001881:	eb 10	jmp	0x100001893
100001883:	48 8d 05 ed 1c 04 00	leaq	269549(%rip), %rax ## literal pool for: "diagnostics"
10000188a:	eb 07	jmp	0x100001893
10000188c:	48 8d 05 f0 1c 04 00	leaq	269552(%rip), %rax ## literal pool for: "eacs"
100001893:	5d	popq	%rbp
100001894:	c3	retq
100001895:	48 8d 3d ec 1c 04 00	leaq	269548(%rip), %rdi ## literal pool for: "Unknown boot-mode: %d"
10000189c:	31 c0	xorl	%eax, %eax
10000189e:	e8 6f 2b 03 00	callq	0x100034412
1000018a3:	48 8d 3d 74 1c 04 00	leaq	269428(%rip), %rdi ## literal pool for: "can't ask for the string for 'none' boot mode!"
1000018aa:	31 c0	xorl	%eax, %eax
1000018ac:	e8 61 2b 03 00	callq	0x100034412
1000018b1:	0f 1f 00	nopl	(%rax)
1000018b4:	ef	outl	%eax, %dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdf #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000018bb:	ff b4 ff ff ff bd ff	pushq	-4325377(%rdi,%rdi,8)
	.byte 0xff #bad opcode
1000018c3:	ff c6	incl	%esi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000018c7:	ff cf	decl	%edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000018cc:	d8 ff	fdivr	%st(7), %st
	.byte 0xff #bad opcode
1000018cf:	ff 55 48	callq	*72(%rbp)
1000018d2:	89 e5	movl	%esp, %ebp
1000018d4:	e8 6b ff ff ff	callq	0x100001844
1000018d9:	48 89 c7	movq	%rax, %rdi
1000018dc:	5d	popq	%rbp
1000018dd:	e9 d6 fe ff ff	jmp	0x1000017b8
1000018e2:	55	pushq	%rbp
1000018e3:	48 89 e5	movq	%rsp, %rbp
1000018e6:	83 3d b3 13 06 00 03	cmpl	$3, 398259(%rip)
1000018ed:	74 25	je	0x100001914
1000018ef:	c7 05 a7 13 06 00 03 00 00 00	movl	$3, 398247(%rip)
1000018f9:	48 8b 15 98 13 06 00	movq	398232(%rip), %rdx
100001900:	48 8d 35 97 1c 04 00	leaq	269463(%rip), %rsi ## literal pool for: "boot-mode committed: %s"
100001907:	bf 05 00 01 00	movl	$65541, %edi
10000190c:	31 c0	xorl	%eax, %eax
10000190e:	5d	popq	%rbp
10000190f:	e9 b4 3c 03 00	jmp	0x1000355c8
100001914:	e8 bf d4 03 00	callq	0x10003edd8
100001919:	55	pushq	%rbp
10000191a:	48 89 e5	movq	%rsp, %rbp
10000191d:	83 3d 7c 13 06 00 03	cmpl	$3, 398204(%rip)
100001924:	75 09	jne	0x10000192f
100001926:	48 8b 05 6b 13 06 00	movq	398187(%rip), %rax
10000192d:	5d	popq	%rbp
10000192e:	c3	retq
10000192f:	e8 b9 d4 03 00	callq	0x10003eded
100001934:	90	nop
100001935:	55	pushq	%rbp
100001936:	48 89 e5	movq	%rsp, %rbp
100001939:	83 3d 60 13 06 00 02	cmpl	$2, 398176(%rip)
100001940:	0f 94 c0	sete	%al
100001943:	5d	popq	%rbp
100001944:	c3	retq
100001945:	55	pushq	%rbp
100001946:	48 89 e5	movq	%rsp, %rbp
100001949:	48 85 ff	testq	%rdi, %rdi
10000194c:	74 28	je	0x100001976
10000194e:	83 3d 4b 13 06 00 03	cmpl	$3, 398155(%rip)
100001955:	75 24	jne	0x10000197b
100001957:	48 89 fe	movq	%rdi, %rsi
10000195a:	48 8b 3d 37 13 06 00	movq	398135(%rip), %rdi
100001961:	48 85 ff	testq	%rdi, %rdi
100001964:	74 0c	je	0x100001972
100001966:	e8 b5 04 04 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000196b:	85 c0	testl	%eax, %eax
10000196d:	0f 94 c0	sete	%al
100001970:	eb 02	jmp	0x100001974
100001972:	31 c0	xorl	%eax, %eax
100001974:	5d	popq	%rbp
100001975:	c3	retq
100001976:	e8 87 d4 03 00	callq	0x10003ee02
10000197b:	e8 97 d4 03 00	callq	0x10003ee17
100001980:	55	pushq	%rbp
100001981:	48 89 e5	movq	%rsp, %rbp
100001984:	bf 24 00 00 00	movl	$36, %edi
100001989:	e8 57 bb 00 00	callq	0x10000d4e5
10000198e:	0f 57 c0	xorps	%xmm0, %xmm0
100001991:	0f 11 00	movups	%xmm0, (%rax)
100001994:	0f 11 40 10	movups	%xmm0, 16(%rax)
100001998:	c7 40 20 00 00 00 00	movl	$0, 32(%rax)
10000199f:	5d	popq	%rbp
1000019a0:	c3	retq
1000019a1:	55	pushq	%rbp
1000019a2:	48 89 e5	movq	%rsp, %rbp
1000019a5:	0f 57 c0	xorps	%xmm0, %xmm0
1000019a8:	0f 11 47 10	movups	%xmm0, 16(%rdi)
1000019ac:	0f 11 07	movups	%xmm0, (%rdi)
1000019af:	c7 47 20 00 00 00 00	movl	$0, 32(%rdi)
1000019b6:	5d	popq	%rbp
1000019b7:	c3	retq
1000019b8:	55	pushq	%rbp
1000019b9:	48 89 e5	movq	%rsp, %rbp
1000019bc:	be 24 00 00 00	movl	$36, %esi
1000019c1:	5d	popq	%rbp
1000019c2:	e9 f4 d5 00 00	jmp	0x10000efbb
1000019c7:	55	pushq	%rbp
1000019c8:	48 89 e5	movq	%rsp, %rbp
1000019cb:	8b 47 20	movl	32(%rdi), %eax
1000019ce:	48 83 f8 04	cmpq	$4, %rax
1000019d2:	73 0f	jae	0x1000019e3
1000019d4:	89 34 87	movl	%esi, (%rdi,%rax,4)
1000019d7:	8b 47 20	movl	32(%rdi), %eax
1000019da:	89 54 87 10	movl	%edx, 16(%rdi,%rax,4)
1000019de:	ff 47 20	incl	32(%rdi)
1000019e1:	5d	popq	%rbp
1000019e2:	c3	retq
1000019e3:	31 ff	xorl	%edi, %edi
1000019e5:	e8 b8 fd 03 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000019ea:	eb f5	jmp	0x1000019e1
1000019ec:	55	pushq	%rbp
1000019ed:	48 89 e5	movq	%rsp, %rbp
1000019f0:	8b 47 20	movl	32(%rdi), %eax
1000019f3:	5d	popq	%rbp
1000019f4:	c3	retq
1000019f5:	55	pushq	%rbp
1000019f6:	48 89 e5	movq	%rsp, %rbp
1000019f9:	39 77 20	cmpl	%esi, 32(%rdi)
1000019fc:	76 07	jbe	0x100001a05
1000019fe:	89 f0	movl	%esi, %eax
100001a00:	8b 04 87	movl	(%rdi,%rax,4), %eax
100001a03:	5d	popq	%rbp
100001a04:	c3	retq
100001a05:	e8 22 d4 03 00	callq	0x10003ee2c
100001a0a:	55	pushq	%rbp
100001a0b:	48 89 e5	movq	%rsp, %rbp
100001a0e:	39 77 20	cmpl	%esi, 32(%rdi)
100001a11:	76 08	jbe	0x100001a1b
100001a13:	89 f0	movl	%esi, %eax
100001a15:	8b 44 87 10	movl	16(%rdi,%rax,4), %eax
100001a19:	5d	popq	%rbp
100001a1a:	c3	retq
100001a1b:	e8 21 d4 03 00	callq	0x10003ee41
100001a20:	55	pushq	%rbp
100001a21:	48 89 e5	movq	%rsp, %rbp
100001a24:	41 57	pushq	%r15
100001a26:	41 56	pushq	%r14
100001a28:	41 55	pushq	%r13
100001a2a:	41 54	pushq	%r12
100001a2c:	53	pushq	%rbx
100001a2d:	50	pushq	%rax
100001a2e:	48 89 f8	movq	%rdi, %rax
100001a31:	48 09 f0	orq	%rsi, %rax
100001a34:	41 0f 94 c6	sete	%r14b
100001a38:	48 85 ff	testq	%rdi, %rdi
100001a3b:	74 63	je	0x100001aa0
100001a3d:	49 89 f7	movq	%rsi, %r15
100001a40:	48 85 f6	testq	%rsi, %rsi
100001a43:	74 5b	je	0x100001aa0
100001a45:	49 89 fc	movq	%rdi, %r12
100001a48:	8b 47 20	movl	32(%rdi), %eax
100001a4b:	41 3b 47 20	cmpl	32(%r15), %eax
100001a4f:	75 4c	jne	0x100001a9d
100001a51:	41 b6 01	movb	$1, %r14b
100001a54:	85 c0	testl	%eax, %eax
100001a56:	74 48	je	0x100001aa0
100001a58:	31 db	xorl	%ebx, %ebx
100001a5a:	4c 89 e7	movq	%r12, %rdi
100001a5d:	89 de	movl	%ebx, %esi
100001a5f:	e8 91 ff ff ff	callq	0x1000019f5
100001a64:	41 89 c5	movl	%eax, %r13d
100001a67:	4c 89 ff	movq	%r15, %rdi
100001a6a:	89 de	movl	%ebx, %esi
100001a6c:	e8 84 ff ff ff	callq	0x1000019f5
100001a71:	41 39 c5	cmpl	%eax, %r13d
100001a74:	75 27	jne	0x100001a9d
100001a76:	4c 89 e7	movq	%r12, %rdi
100001a79:	89 de	movl	%ebx, %esi
100001a7b:	e8 8a ff ff ff	callq	0x100001a0a
100001a80:	41 89 c5	movl	%eax, %r13d
100001a83:	4c 89 ff	movq	%r15, %rdi
100001a86:	89 de	movl	%ebx, %esi
100001a88:	e8 7d ff ff ff	callq	0x100001a0a
100001a8d:	41 39 c5	cmpl	%eax, %r13d
100001a90:	75 0b	jne	0x100001a9d
100001a92:	ff c3	incl	%ebx
100001a94:	41 3b 5c 24 20	cmpl	32(%r12), %ebx
100001a99:	72 bf	jb	0x100001a5a
100001a9b:	eb 03	jmp	0x100001aa0
100001a9d:	45 31 f6	xorl	%r14d, %r14d
100001aa0:	44 89 f0	movl	%r14d, %eax
100001aa3:	48 83 c4 08	addq	$8, %rsp
100001aa7:	5b	popq	%rbx
100001aa8:	41 5c	popq	%r12
100001aaa:	41 5d	popq	%r13
100001aac:	41 5e	popq	%r14
100001aae:	41 5f	popq	%r15
100001ab0:	5d	popq	%rbp
100001ab1:	c3	retq
100001ab2:	48 85 ff	testq	%rdi, %rdi
100001ab5:	0f 84 bf 00 00 00	je	0x100001b7a
100001abb:	55	pushq	%rbp
100001abc:	48 89 e5	movq	%rsp, %rbp
100001abf:	41 57	pushq	%r15
100001ac1:	41 56	pushq	%r14
100001ac3:	41 55	pushq	%r13
100001ac5:	41 54	pushq	%r12
100001ac7:	53	pushq	%rbx
100001ac8:	50	pushq	%rax
100001ac9:	49 89 fd	movq	%rdi, %r13
100001acc:	bf 80 00 00 00	movl	$128, %edi
100001ad1:	e8 8b a5 00 00	callq	0x10000c061
100001ad6:	49 89 c6	movq	%rax, %r14
100001ad9:	41 8b 55 20	movl	32(%r13), %edx
100001add:	48 8d 35 3e 1b 04 00	leaq	269118(%rip), %rsi ## literal pool for: "%d: ["
100001ae4:	48 89 c7	movq	%rax, %rdi
100001ae7:	31 c0	xorl	%eax, %eax
100001ae9:	e8 e2 a5 00 00	callq	0x10000c0d0
100001aee:	41 83 7d 20 00	cmpl	$0, 32(%r13)
100001af3:	74 4f	je	0x100001b44
100001af5:	4c 8d 3d 2f 1b 04 00	leaq	269103(%rip), %r15 ## literal pool for: "%d.%d"
100001afc:	31 db	xorl	%ebx, %ebx
100001afe:	85 db	testl	%ebx, %ebx
100001b00:	74 11	je	0x100001b13
100001b02:	4c 89 f7	movq	%r14, %rdi
100001b05:	48 8d 35 1c 1b 04 00	leaq	269084(%rip), %rsi ## literal pool for: ", "
100001b0c:	31 c0	xorl	%eax, %eax
100001b0e:	e8 bd a5 00 00	callq	0x10000c0d0
100001b13:	4c 89 ef	movq	%r13, %rdi
100001b16:	89 de	movl	%ebx, %esi
100001b18:	e8 d8 fe ff ff	callq	0x1000019f5
100001b1d:	41 89 c4	movl	%eax, %r12d
100001b20:	4c 89 ef	movq	%r13, %rdi
100001b23:	89 de	movl	%ebx, %esi
100001b25:	e8 e0 fe ff ff	callq	0x100001a0a
100001b2a:	4c 89 f7	movq	%r14, %rdi
100001b2d:	4c 89 fe	movq	%r15, %rsi
100001b30:	44 89 e2	movl	%r12d, %edx
100001b33:	89 c1	movl	%eax, %ecx
100001b35:	31 c0	xorl	%eax, %eax
100001b37:	e8 94 a5 00 00	callq	0x10000c0d0
100001b3c:	ff c3	incl	%ebx
100001b3e:	41 3b 5d 20	cmpl	32(%r13), %ebx
100001b42:	72 ba	jb	0x100001afe
100001b44:	48 8d 35 e6 1a 04 00	leaq	269030(%rip), %rsi ## literal pool for: "]"
100001b4b:	4c 89 f7	movq	%r14, %rdi
100001b4e:	31 c0	xorl	%eax, %eax
100001b50:	e8 7b a5 00 00	callq	0x10000c0d0
100001b55:	4c 89 f7	movq	%r14, %rdi
100001b58:	e8 47 a5 00 00	callq	0x10000c0a4
100001b5d:	48 89 c3	movq	%rax, %rbx
100001b60:	4c 89 f7	movq	%r14, %rdi
100001b63:	e8 49 a5 00 00	callq	0x10000c0b1
100001b68:	48 89 d8	movq	%rbx, %rax
100001b6b:	48 83 c4 08	addq	$8, %rsp
100001b6f:	5b	popq	%rbx
100001b70:	41 5c	popq	%r12
100001b72:	41 5d	popq	%r13
100001b74:	41 5e	popq	%r14
100001b76:	41 5f	popq	%r15
100001b78:	5d	popq	%rbp
100001b79:	c3	retq
100001b7a:	48 8d 3d 9a 1a 04 00	leaq	268954(%rip), %rdi ## literal pool for: "(null)"
100001b81:	e9 5c d4 00 00	jmp	0x10000efe2
100001b86:	48 85 ff	testq	%rdi, %rdi
100001b89:	74 06	je	0x100001b91
100001b8b:	48 89 f8	movq	%rdi, %rax
100001b8e:	31 d2	xorl	%edx, %edx
100001b90:	c3	retq
100001b91:	55	pushq	%rbp
100001b92:	48 89 e5	movq	%rsp, %rbp
100001b95:	e8 bc d2 03 00	callq	0x10003ee56
100001b9a:	85 ff	testl	%edi, %edi
100001b9c:	74 05	je	0x100001ba3
100001b9e:	31 c0	xorl	%eax, %eax
100001ba0:	89 fa	movl	%edi, %edx
100001ba2:	c3	retq
100001ba3:	55	pushq	%rbp
100001ba4:	48 89 e5	movq	%rsp, %rbp
100001ba7:	e8 bc d2 03 00	callq	0x10003ee68
100001bac:	48 85 ff	testq	%rdi, %rdi
100001baf:	74 06	je	0x100001bb7
100001bb1:	48 89 f8	movq	%rdi, %rax
100001bb4:	31 d2	xorl	%edx, %edx
100001bb6:	c3	retq
100001bb7:	55	pushq	%rbp
100001bb8:	48 89 e5	movq	%rsp, %rbp
100001bbb:	e8 ba d2 03 00	callq	0x10003ee7a
100001bc0:	85 ff	testl	%edi, %edi
100001bc2:	74 05	je	0x100001bc9
100001bc4:	31 c0	xorl	%eax, %eax
100001bc6:	89 fa	movl	%edi, %edx
100001bc8:	c3	retq
100001bc9:	55	pushq	%rbp
100001bca:	48 89 e5	movq	%rsp, %rbp
100001bcd:	e8 ba d2 03 00	callq	0x10003ee8c
100001bd2:	55	pushq	%rbp
100001bd3:	48 89 e5	movq	%rsp, %rbp
100001bd6:	41 57	pushq	%r15
100001bd8:	41 56	pushq	%r14
100001bda:	41 55	pushq	%r13
100001bdc:	41 54	pushq	%r12
100001bde:	53	pushq	%rbx
100001bdf:	48 83 ec 68	subq	$104, %rsp
100001be3:	48 89 55 88	movq	%rdx, -120(%rbp)
100001be7:	4c 8b b7 e8 00 00 00	movq	232(%rdi), %r14
100001bee:	45 31 ff	xorl	%r15d, %r15d
100001bf1:	4c 89 7d 98	movq	%r15, -104(%rbp)
100001bf5:	4c 89 7d 90	movq	%r15, -112(%rbp)
100001bf9:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100001c03:	48 89 45 b8	movq	%rax, -72(%rbp)
100001c07:	8b 87 d0 04 00 00	movl	1232(%rdi), %eax
100001c0d:	48 89 7d c0	movq	%rdi, -64(%rbp)
100001c11:	8b 97 04 05 00 00	movl	1284(%rdi), %edx
100001c17:	31 db	xorl	%ebx, %ebx
100001c19:	85 c0	testl	%eax, %eax
100001c1b:	0f 95 c1	setne	%cl
100001c1e:	ff c2	incl	%edx
100001c20:	83 fa 02	cmpl	$2, %edx
100001c23:	48 89 75 80	movq	%rsi, -128(%rbp)
100001c27:	73 04	jae	0x100001c2d
100001c29:	88 cb	movb	%cl, %bl
100001c2b:	eb 0c	jmp	0x100001c39
100001c2d:	83 f8 01	cmpl	$1, %eax
100001c30:	bb 01 00 00 00	movl	$1, %ebx
100001c35:	48 83 db ff	sbbq	$-1, %rbx
100001c39:	48 8b 45 c0	movq	-64(%rbp), %rax
100001c3d:	48 8b b0 18 03 00 00	movq	792(%rax), %rsi
100001c44:	48 85 f6	testq	%rsi, %rsi
100001c47:	74 43	je	0x100001c8c
100001c49:	4c 89 f7	movq	%r14, %rdi
100001c4c:	e8 b1 2e 02 00	callq	0x100024b02
100001c51:	48 85 c0	testq	%rax, %rax
100001c54:	74 15	je	0x100001c6b
100001c56:	48 89 c7	movq	%rax, %rdi
100001c59:	be 01 00 00 00	movl	$1, %esi
100001c5e:	e8 01 8f 03 00	callq	0x10003ab64
100001c63:	41 89 c7	movl	%eax, %r15d
100001c66:	48 ff c3	incq	%rbx
100001c69:	eb 21	jmp	0x100001c8c
100001c6b:	48 8b 7d c0	movq	-64(%rbp), %rdi
100001c6f:	48 8b 8f 18 03 00 00	movq	792(%rdi), %rcx
100001c76:	48 8d 15 b6 19 04 00	leaq	268726(%rip), %rdx ## literal pool for: "Could not find exception endpoint for service: %s"
100001c7d:	45 31 ff	xorl	%r15d, %r15d
100001c80:	be 03 00 00 00	movl	$3, %esi
100001c85:	31 c0	xorl	%eax, %eax
100001c87:	e8 2e 43 01 00	callq	0x100015fba
100001c8c:	48 8d 75 90	leaq	-112(%rbp), %rsi
100001c90:	48 8d 55 98	leaq	-104(%rbp), %rdx
100001c94:	48 8d 4d b8	leaq	-72(%rbp), %rcx
100001c98:	4c 89 f7	movq	%r14, %rdi
100001c9b:	49 89 d8	movq	%rbx, %r8
100001c9e:	e8 42 9f 02 00	callq	0x10002bbe5
100001ca3:	48 8b 5d c0	movq	-64(%rbp), %rbx
100001ca7:	8b 93 d0 04 00 00	movl	1232(%rbx), %edx
100001cad:	85 d2	testl	%edx, %edx
100001caf:	74 27	je	0x100001cd8
100001cb1:	48 8b 7d 90	movq	-112(%rbp), %rdi
100001cb5:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100001cbc:	e8 af 02 04 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
100001cc1:	48 8b 45 98	movq	-104(%rbp), %rax
100001cc5:	48 8b 4d b8	movq	-72(%rbp), %rcx
100001cc9:	48 8d 51 01	leaq	1(%rcx), %rdx
100001ccd:	48 89 55 b8	movq	%rdx, -72(%rbp)
100001cd1:	c7 04 88 81 00 00 00	movl	$129, (%rax,%rcx,4)
100001cd8:	8b 93 04 05 00 00	movl	1284(%rbx), %edx
100001cde:	8d 42 01	leal	1(%rdx), %eax
100001ce1:	83 f8 02	cmpl	$2, %eax
100001ce4:	72 27	jb	0x100001d0d
100001ce6:	48 8b 7d 90	movq	-112(%rbp), %rdi
100001cea:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100001cf1:	e8 7a 02 04 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
100001cf6:	48 8b 45 98	movq	-104(%rbp), %rax
100001cfa:	48 8b 4d b8	movq	-72(%rbp), %rcx
100001cfe:	48 8d 51 01	leaq	1(%rcx), %rdx
100001d02:	48 89 55 b8	movq	%rdx, -72(%rbp)
100001d06:	c7 04 88 82 00 00 00	movl	$130, (%rax,%rcx,4)
100001d0d:	4c 89 b5 78 ff ff ff	movq	%r14, -136(%rbp)
100001d14:	45 85 ff	testl	%r15d, %r15d
100001d17:	74 2c	je	0x100001d45
100001d19:	48 8b 7d 90	movq	-112(%rbp), %rdi
100001d1d:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100001d24:	44 89 fa	movl	%r15d, %edx
100001d27:	e8 44 02 04 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
100001d2c:	48 8b 45 98	movq	-104(%rbp), %rax
100001d30:	48 8b 4d b8	movq	-72(%rbp), %rcx
100001d34:	4c 8d 71 01	leaq	1(%rcx), %r14
100001d38:	4c 89 75 b8	movq	%r14, -72(%rbp)
100001d3c:	c7 04 88 80 00 00 00	movl	$128, (%rax,%rcx,4)
100001d43:	eb 04	jmp	0x100001d49
100001d45:	4c 8b 75 b8	movq	-72(%rbp), %r14
100001d49:	49 c1 e6 02	shlq	$2, %r14
100001d4d:	4c 03 b3 50 02 00 00	addq	592(%rbx), %r14
100001d54:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001d58:	48 8d 05 09 0b 06 00	leaq	396041(%rip), %rax
100001d5f:	48 8b 18	movq	(%rax), %rbx
100001d62:	48 85 db	testq	%rbx, %rbx
100001d65:	74 1b	je	0x100001d82
100001d67:	48 8d 7b 18	leaq	24(%rbx), %rdi
100001d6b:	e8 e6 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001d70:	49 01 c6	addq	%rax, %r14
100001d73:	49 ff c6	incq	%r14
100001d76:	48 8b 1b	movq	(%rbx), %rbx
100001d79:	48 85 db	testq	%rbx, %rbx
100001d7c:	75 e9	jne	0x100001d67
100001d7e:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001d82:	48 8d 05 df 0a 06 00	leaq	395999(%rip), %rax
100001d89:	48 8b 58 08	movq	8(%rax), %rbx
100001d8d:	48 85 db	testq	%rbx, %rbx
100001d90:	74 1b	je	0x100001dad
100001d92:	48 8d 7b 18	leaq	24(%rbx), %rdi
100001d96:	e8 bb 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001d9b:	49 01 c6	addq	%rax, %r14
100001d9e:	49 ff c6	incq	%r14
100001da1:	48 8b 1b	movq	(%rbx), %rbx
100001da4:	48 85 db	testq	%rbx, %rbx
100001da7:	75 e9	jne	0x100001d92
100001da9:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001dad:	48 8b 45 c0	movq	-64(%rbp), %rax
100001db1:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
100001db8:	48 8b 58 50	movq	80(%rax), %rbx
100001dbc:	48 85 db	testq	%rbx, %rbx
100001dbf:	74 1b	je	0x100001ddc
100001dc1:	48 8d 7b 18	leaq	24(%rbx), %rdi
100001dc5:	e8 8c 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001dca:	49 01 c6	addq	%rax, %r14
100001dcd:	49 ff c6	incq	%r14
100001dd0:	48 8b 1b	movq	(%rbx), %rbx
100001dd3:	48 85 db	testq	%rbx, %rbx
100001dd6:	75 e9	jne	0x100001dc1
100001dd8:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001ddc:	48 8b 5d c0	movq	-64(%rbp), %rbx
100001de0:	f6 83 ea 04 00 00 04	testb	$4, 1258(%rbx)
100001de7:	0f 84 67 01 00 00	je	0x100001f54
100001ded:	4c 8b a3 a8 04 00 00	movq	1192(%rbx), %r12
100001df4:	4d 85 e4	testq	%r12, %r12
100001df7:	74 21	je	0x100001e1a
100001df9:	48 8b bb 58 02 00 00	movq	600(%rbx), %rdi
100001e00:	e8 51 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001e05:	49 89 c7	movq	%rax, %r15
100001e08:	4c 89 e7	movq	%r12, %rdi
100001e0b:	e8 46 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001e10:	4d 29 fe	subq	%r15, %r14
100001e13:	49 01 c6	addq	%rax, %r14
100001e16:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001e1a:	4c 8b bb b0 04 00 00	movq	1200(%rbx), %r15
100001e21:	4d 85 ff	testq	%r15, %r15
100001e24:	0f 84 92 00 00 00	je	0x100001ebc
100001e2a:	44 8b a3 a4 01 00 00	movl	420(%rbx), %r12d
100001e31:	4d 85 e4	testq	%r12, %r12
100001e34:	74 29	je	0x100001e5f
100001e36:	4c 8b ab a8 01 00 00	movq	424(%rbx), %r13
100001e3d:	31 db	xorl	%ebx, %ebx
100001e3f:	49 8b 7c dd 00	movq	(%r13,%rbx,8), %rdi
100001e44:	e8 0d 00 04 00	callq	0x100041e56 ## symbol stub for: _strlen
100001e49:	48 f7 d0	notq	%rax
100001e4c:	49 01 c6	addq	%rax, %r14
100001e4f:	48 ff c3	incq	%rbx
100001e52:	49 39 dc	cmpq	%rbx, %r12
100001e55:	75 e8	jne	0x100001e3f
100001e57:	4c 89 75 a0	movq	%r14, -96(%rbp)
100001e5b:	48 8b 5d c0	movq	-64(%rbp), %rbx
100001e5f:	4c 89 ff	movq	%r15, %rdi
100001e62:	e8 e5 00 04 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100001e67:	48 85 c0	testq	%rax, %rax
100001e6a:	74 50	je	0x100001ebc
100001e6c:	4c 8b 7d a0	movq	-96(%rbp), %r15
100001e70:	49 89 dc	movq	%rbx, %r12
100001e73:	31 db	xorl	%ebx, %ebx
100001e75:	49 8b bc 24 b0 04 00 00	movq	1200(%r12), %rdi
100001e7d:	48 89 de	movq	%rbx, %rsi
100001e80:	e8 cd 00 04 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100001e85:	48 85 c0	testq	%rax, %rax
100001e88:	74 12	je	0x100001e9c
100001e8a:	48 89 c7	movq	%rax, %rdi
100001e8d:	e8 c4 ff 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100001e92:	4d 8d 3c 06	leaq	(%r14,%rax), %r15
100001e96:	49 ff c7	incq	%r15
100001e99:	4d 89 fe	movq	%r15, %r14
100001e9c:	48 ff c3	incq	%rbx
100001e9f:	4c 8b 65 c0	movq	-64(%rbp), %r12
100001ea3:	49 8b bc 24 b0 04 00 00	movq	1200(%r12), %rdi
100001eab:	e8 9c 00 04 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100001eb0:	48 39 c3	cmpq	%rax, %rbx
100001eb3:	72 c0	jb	0x100001e75
100001eb5:	4c 89 7d a0	movq	%r15, -96(%rbp)
100001eb9:	4c 89 e3	movq	%r12, %rbx
100001ebc:	48 89 d8	movq	%rbx, %rax
100001ebf:	48 8b 9b b8 04 00 00	movq	1208(%rbx), %rbx
100001ec6:	48 85 db	testq	%rbx, %rbx
100001ec9:	74 2d	je	0x100001ef8
100001ecb:	48 8b b8 b0 01 00 00	movq	432(%rax), %rdi
100001ed2:	48 85 ff	testq	%rdi, %rdi
100001ed5:	74 0b	je	0x100001ee2
100001ed7:	e8 7a ff 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100001edc:	48 f7 d0	notq	%rax
100001edf:	49 01 c6	addq	%rax, %r14
100001ee2:	48 89 df	movq	%rbx, %rdi
100001ee5:	e8 6c ff 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100001eea:	4c 01 f0	addq	%r14, %rax
100001eed:	48 ff c0	incq	%rax
100001ef0:	48 89 45 a0	movq	%rax, -96(%rbp)
100001ef4:	48 8b 45 c0	movq	-64(%rbp), %rax
100001ef8:	48 8b b8 c0 04 00 00	movq	1216(%rax), %rdi
100001eff:	48 85 ff	testq	%rdi, %rdi
100001f02:	48 89 c3	movq	%rax, %rbx
100001f05:	74 10	je	0x100001f17
100001f07:	48 8d 15 b7 0c 00 00	leaq	3255(%rip), %rdx
100001f0e:	48 8d 75 a0	leaq	-96(%rbp), %rsi
100001f12:	e8 ef 00 04 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100001f17:	48 8b bb c8 04 00 00	movq	1224(%rbx), %rdi
100001f1e:	48 85 ff	testq	%rdi, %rdi
100001f21:	74 2d	je	0x100001f50
100001f23:	48 8b 83 28 03 00 00	movq	808(%rbx), %rax
100001f2a:	48 85 c0	testq	%rax, %rax
100001f2d:	74 13	je	0x100001f42
100001f2f:	48 89 c7	movq	%rax, %rdi
100001f32:	e8 99 cf 00 00	callq	0x10000eed0
100001f37:	48 29 45 a0	subq	%rax, -96(%rbp)
100001f3b:	48 8b bb c8 04 00 00	movq	1224(%rbx), %rdi
100001f42:	e8 89 cf 00 00	callq	0x10000eed0
100001f47:	49 89 c6	movq	%rax, %r14
100001f4a:	4c 03 75 a0	addq	-96(%rbp), %r14
100001f4e:	eb 04	jmp	0x100001f54
100001f50:	4c 8b 75 a0	movq	-96(%rbp), %r14
100001f54:	48 8b 83 90 02 00 00	movq	656(%rbx), %rax
100001f5b:	48 85 c0	testq	%rax, %rax
100001f5e:	74 09	je	0x100001f69
100001f60:	49 83 c6 14	addq	$20, %r14
100001f64:	48 8b 00	movq	(%rax), %rax
100001f67:	eb f2	jmp	0x100001f5b
100001f69:	4c 89 f7	movq	%r14, %rdi
100001f6c:	e8 74 b5 00 00	callq	0x10000d4e5
100001f71:	49 89 c5	movq	%rax, %r13
100001f74:	44 89 30	movl	%r14d, (%rax)
100001f77:	31 c0	xorl	%eax, %eax
100001f79:	89 45 d4	movl	%eax, -44(%rbp)
100001f7c:	49 8d 8e 34 ff ff ff	leaq	-204(%r14), %rcx
100001f83:	48 89 4d c8	movq	%rcx, -56(%rbp)
100001f87:	41 89 45 04	movl	%eax, 4(%r13)
100001f8b:	48 8b 8b a8 04 00 00	movq	1192(%rbx), %rcx
100001f92:	48 85 c9	testq	%rcx, %rcx
100001f95:	75 07	jne	0x100001f9e
100001f97:	48 8b 8b 58 02 00 00	movq	600(%rbx), %rcx
100001f9e:	48 8d 75 d4	leaq	-44(%rbp), %rsi
100001fa2:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100001fa6:	4c 89 ef	movq	%r13, %rdi
100001fa9:	e8 df ce 00 00	callq	0x10000ee8d
100001fae:	48 8b 8b 60 02 00 00	movq	608(%rbx), %rcx
100001fb5:	48 85 c9	testq	%rcx, %rcx
100001fb8:	74 16	je	0x100001fd0
100001fba:	48 8d 75 d4	leaq	-44(%rbp), %rsi
100001fbe:	8b 06	movl	(%rsi), %eax
100001fc0:	41 89 45 08	movl	%eax, 8(%r13)
100001fc4:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100001fc8:	4c 89 ef	movq	%r13, %rdi
100001fcb:	e8 bd ce 00 00	callq	0x10000ee8d
100001fd0:	48 8b 8b 68 02 00 00	movq	616(%rbx), %rcx
100001fd7:	48 85 c9	testq	%rcx, %rcx
100001fda:	74 16	je	0x100001ff2
100001fdc:	48 8d 75 d4	leaq	-44(%rbp), %rsi
100001fe0:	8b 06	movl	(%rsi), %eax
100001fe2:	41 89 45 0c	movl	%eax, 12(%r13)
100001fe6:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100001fea:	4c 89 ef	movq	%r13, %rdi
100001fed:	e8 9b ce 00 00	callq	0x10000ee8d
100001ff2:	48 8b bb b0 04 00 00	movq	1200(%rbx), %rdi
100001ff9:	48 85 ff	testq	%rdi, %rdi
100001ffc:	74 59	je	0x100002057
100001ffe:	e8 49 ff 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100002003:	41 89 45 10	movl	%eax, 16(%r13)
100002007:	85 c0	testl	%eax, %eax
100002009:	0f 84 9d 00 00 00	je	0x1000020ac
10000200f:	4c 8d 7d d4	leaq	-44(%rbp), %r15
100002013:	41 8b 07	movl	(%r15), %eax
100002016:	41 89 45 14	movl	%eax, 20(%r13)
10000201a:	31 db	xorl	%ebx, %ebx
10000201c:	4c 8d 65 c8	leaq	-56(%rbp), %r12
100002020:	48 8b 45 c0	movq	-64(%rbp), %rax
100002024:	48 8b b8 b0 04 00 00	movq	1200(%rax), %rdi
10000202b:	48 89 de	movq	%rbx, %rsi
10000202e:	e8 1f ff 03 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100002033:	48 85 c0	testq	%rax, %rax
100002036:	74 11	je	0x100002049
100002038:	4c 89 ef	movq	%r13, %rdi
10000203b:	4c 89 fe	movq	%r15, %rsi
10000203e:	4c 89 e2	movq	%r12, %rdx
100002041:	48 89 c1	movq	%rax, %rcx
100002044:	e8 44 ce 00 00	callq	0x10000ee8d
100002049:	48 ff c3	incq	%rbx
10000204c:	41 8b 45 10	movl	16(%r13), %eax
100002050:	48 39 c3	cmpq	%rax, %rbx
100002053:	72 cb	jb	0x100002020
100002055:	eb 55	jmp	0x1000020ac
100002057:	8b 83 a4 01 00 00	movl	420(%rbx), %eax
10000205d:	85 c0	testl	%eax, %eax
10000205f:	74 43	je	0x1000020a4
100002061:	41 89 45 10	movl	%eax, 16(%r13)
100002065:	48 8d 45 d4	leaq	-44(%rbp), %rax
100002069:	8b 00	movl	(%rax), %eax
10000206b:	41 89 45 14	movl	%eax, 20(%r13)
10000206f:	31 db	xorl	%ebx, %ebx
100002071:	4c 8d 65 c8	leaq	-56(%rbp), %r12
100002075:	4c 8b 7d c0	movq	-64(%rbp), %r15
100002079:	49 8b 87 a8 01 00 00	movq	424(%r15), %rax
100002080:	48 8b 0c d8	movq	(%rax,%rbx,8), %rcx
100002084:	4c 89 ef	movq	%r13, %rdi
100002087:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000208b:	4c 89 e2	movq	%r12, %rdx
10000208e:	e8 fa cd 00 00	callq	0x10000ee8d
100002093:	48 ff c3	incq	%rbx
100002096:	41 8b 87 a4 01 00 00	movl	420(%r15), %eax
10000209d:	48 39 c3	cmpq	%rax, %rbx
1000020a0:	72 d7	jb	0x100002079
1000020a2:	eb 08	jmp	0x1000020ac
1000020a4:	41 c7 45 10 00 00 00 00	movl	$0, 16(%r13)
1000020ac:	48 8b 4d c0	movq	-64(%rbp), %rcx
1000020b0:	66 83 b9 88 03 00 00 00	cmpw	$0, 904(%rcx)
1000020b8:	0f 84 65 01 00 00	je	0x100002223
1000020be:	8b 45 d4	movl	-44(%rbp), %eax
1000020c1:	41 89 45 1c	movl	%eax, 28(%r13)
1000020c5:	48 8b b9 c0 04 00 00	movq	1216(%rcx), %rdi
1000020cc:	48 85 ff	testq	%rdi, %rdi
1000020cf:	74 23	je	0x1000020f4
1000020d1:	48 8d 75 a0	leaq	-96(%rbp), %rsi
1000020d5:	4c 89 2e	movq	%r13, (%rsi)
1000020d8:	48 8d 45 d4	leaq	-44(%rbp), %rax
1000020dc:	48 89 46 08	movq	%rax, 8(%rsi)
1000020e0:	48 8d 45 c8	leaq	-56(%rbp), %rax
1000020e4:	48 89 46 10	movq	%rax, 16(%rsi)
1000020e8:	48 8d 15 53 0a 00 00	leaq	2643(%rip), %rdx
1000020ef:	e8 12 ff 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
1000020f4:	48 8d 05 6d 07 06 00	leaq	395117(%rip), %rax
1000020fb:	48 8b 18	movq	(%rax), %rbx
1000020fe:	48 85 db	testq	%rbx, %rbx
100002101:	74 26	je	0x100002129
100002103:	4c 8d 7d d4	leaq	-44(%rbp), %r15
100002107:	4c 8d 65 c8	leaq	-56(%rbp), %r12
10000210b:	48 8d 4b 18	leaq	24(%rbx), %rcx
10000210f:	4c 89 ef	movq	%r13, %rdi
100002112:	4c 89 fe	movq	%r15, %rsi
100002115:	4c 89 e2	movq	%r12, %rdx
100002118:	e8 70 cd 00 00	callq	0x10000ee8d
10000211d:	41 ff 45 18	incl	24(%r13)
100002121:	48 8b 1b	movq	(%rbx), %rbx
100002124:	48 85 db	testq	%rbx, %rbx
100002127:	75 e2	jne	0x10000210b
100002129:	48 8b 45 c0	movq	-64(%rbp), %rax
10000212d:	48 8b 98 80 03 00 00	movq	896(%rax), %rbx
100002134:	48 85 db	testq	%rbx, %rbx
100002137:	74 26	je	0x10000215f
100002139:	4c 8d 7d d4	leaq	-44(%rbp), %r15
10000213d:	4c 8d 65 c8	leaq	-56(%rbp), %r12
100002141:	48 8d 4b 18	leaq	24(%rbx), %rcx
100002145:	4c 89 ef	movq	%r13, %rdi
100002148:	4c 89 fe	movq	%r15, %rsi
10000214b:	4c 89 e2	movq	%r12, %rdx
10000214e:	e8 3a cd 00 00	callq	0x10000ee8d
100002153:	41 ff 45 18	incl	24(%r13)
100002157:	48 8b 1b	movq	(%rbx), %rbx
10000215a:	48 85 db	testq	%rbx, %rbx
10000215d:	75 e2	jne	0x100002141
10000215f:	48 8b 45 c0	movq	-64(%rbp), %rax
100002163:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
10000216a:	48 8b 58 50	movq	80(%rax), %rbx
10000216e:	48 85 db	testq	%rbx, %rbx
100002171:	74 26	je	0x100002199
100002173:	4c 8d 7d d4	leaq	-44(%rbp), %r15
100002177:	4c 8d 65 c8	leaq	-56(%rbp), %r12
10000217b:	48 8d 4b 18	leaq	24(%rbx), %rcx
10000217f:	4c 89 ef	movq	%r13, %rdi
100002182:	4c 89 fe	movq	%r15, %rsi
100002185:	4c 89 e2	movq	%r12, %rdx
100002188:	e8 00 cd 00 00	callq	0x10000ee8d
10000218d:	41 ff 45 18	incl	24(%r13)
100002191:	48 8b 1b	movq	(%rbx), %rbx
100002194:	48 85 db	testq	%rbx, %rbx
100002197:	75 e2	jne	0x10000217b
100002199:	48 8d 05 c8 06 06 00	leaq	394952(%rip), %rax
1000021a0:	48 8b 58 08	movq	8(%rax), %rbx
1000021a4:	48 85 db	testq	%rbx, %rbx
1000021a7:	74 26	je	0x1000021cf
1000021a9:	4c 8d 7d d4	leaq	-44(%rbp), %r15
1000021ad:	4c 8d 65 c8	leaq	-56(%rbp), %r12
1000021b1:	48 8d 4b 18	leaq	24(%rbx), %rcx
1000021b5:	4c 89 ef	movq	%r13, %rdi
1000021b8:	4c 89 fe	movq	%r15, %rsi
1000021bb:	4c 89 e2	movq	%r12, %rdx
1000021be:	e8 ca cc 00 00	callq	0x10000ee8d
1000021c3:	41 ff 45 18	incl	24(%r13)
1000021c7:	48 8b 1b	movq	(%rbx), %rbx
1000021ca:	48 85 db	testq	%rbx, %rbx
1000021cd:	75 e2	jne	0x1000021b1
1000021cf:	48 8b 5d c0	movq	-64(%rbp), %rbx
1000021d3:	48 8b b3 c8 04 00 00	movq	1224(%rbx), %rsi
1000021da:	48 85 f6	testq	%rsi, %rsi
1000021dd:	75 10	jne	0x1000021ef
1000021df:	48 8b b3 28 03 00 00	movq	808(%rbx), %rsi
1000021e6:	48 85 f6	testq	%rsi, %rsi
1000021e9:	0f 84 24 09 00 00	je	0x100002b13
1000021ef:	48 8d 55 d4	leaq	-44(%rbp), %rdx
1000021f3:	48 8d 4d c8	leaq	-56(%rbp), %rcx
1000021f7:	4c 89 ef	movq	%r13, %rdi
1000021fa:	e8 e2 cc 00 00	callq	0x10000eee1
1000021ff:	48 8b 8b c0 02 00 00	movq	704(%rbx), %rcx
100002206:	48 85 c9	testq	%rcx, %rcx
100002209:	74 68	je	0x100002273
10000220b:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000220f:	8b 06	movl	(%rsi), %eax
100002211:	41 89 45 28	movl	%eax, 40(%r13)
100002215:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100002219:	4c 89 ef	movq	%r13, %rdi
10000221c:	e8 6c cc 00 00	callq	0x10000ee8d
100002221:	eb 58	jmp	0x10000227b
100002223:	48 8b 81 e8 00 00 00	movq	232(%rcx), %rax
10000222a:	48 83 78 50 00	cmpq	$0, 80(%rax)
10000222f:	0f 85 89 fe ff ff	jne	0x1000020be
100002235:	48 8d 05 2c 06 06 00	leaq	394796(%rip), %rax
10000223c:	48 83 78 08 00	cmpq	$0, 8(%rax)
100002241:	0f 85 77 fe ff ff	jne	0x1000020be
100002247:	48 8d 05 1a 06 06 00	leaq	394778(%rip), %rax
10000224e:	48 83 38 00	cmpq	$0, (%rax)
100002252:	0f 85 66 fe ff ff	jne	0x1000020be
100002258:	48 83 b9 c0 04 00 00 00	cmpq	$0, 1216(%rcx)
100002260:	0f 85 58 fe ff ff	jne	0x1000020be
100002266:	41 c7 45 1c 00 00 00 00	movl	$0, 28(%r13)
10000226e:	e9 5c ff ff ff	jmp	0x1000021cf
100002273:	41 c7 45 28 00 00 00 00	movl	$0, 40(%r13)
10000227b:	48 8b 8b c8 02 00 00	movq	712(%rbx), %rcx
100002282:	48 85 c9	testq	%rcx, %rcx
100002285:	74 18	je	0x10000229f
100002287:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000228b:	8b 06	movl	(%rsi), %eax
10000228d:	41 89 45 2c	movl	%eax, 44(%r13)
100002291:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100002295:	4c 89 ef	movq	%r13, %rdi
100002298:	e8 f0 cb 00 00	callq	0x10000ee8d
10000229d:	eb 08	jmp	0x1000022a7
10000229f:	41 c7 45 2c 00 00 00 00	movl	$0, 44(%r13)
1000022a7:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000022ae:	44 8a 67 58	movb	88(%rdi), %r12b
1000022b2:	41 f6 c4 01	testb	$1, %r12b
1000022b6:	74 09	je	0x1000022c1
1000022b8:	0f b7 47 38	movzwl	56(%rdi), %eax
1000022bc:	66 41 89 45 3c	movw	%ax, 60(%r13)
1000022c1:	48 8b 83 0d 05 00 00	movq	1293(%rbx), %rax
1000022c8:	48 0f ba e0 24	btq	$36, %rax
1000022cd:	72 06	jb	0x1000022d5
1000022cf:	41 80 e4 01	andb	$1, %r12b
1000022d3:	eb 0f	jmp	0x1000022e4
1000022d5:	0f b7 8b d0 02 00 00	movzwl	720(%rbx), %ecx
1000022dc:	66 41 89 4d 3c	movw	%cx, 60(%r13)
1000022e1:	41 b4 01	movb	$1, %r12b
1000022e4:	8b 4f 30	movl	48(%rdi), %ecx
1000022e7:	41 89 4d 30	movl	%ecx, 48(%r13)
1000022eb:	0f b6 57 58	movzbl	88(%rdi), %edx
1000022ef:	41 8b b5 c4 00 00 00	movl	196(%r13), %esi
1000022f6:	41 8b 8d c8 00 00 00	movl	200(%r13), %ecx
1000022fd:	41 88 8d c8 00 00 00	movb	%cl, 200(%r13)
100002304:	48 c1 e1 20	shlq	$32, %rcx
100002308:	48 09 f1	orq	%rsi, %rcx
10000230b:	83 e2 02	andl	$2, %edx
10000230e:	48 c1 e2 18	shlq	$24, %rdx
100002312:	48 81 e1 ff ff ff fd	andq	$-33554433, %rcx
100002319:	48 09 d1	orq	%rdx, %rcx
10000231c:	41 89 8d c4 00 00 00	movl	%ecx, 196(%r13)
100002323:	48 0f ba e0 35	btq	$53, %rax
100002328:	73 28	jae	0x100002352
10000232a:	48 89 c8	movq	%rcx, %rax
10000232d:	48 0d 00 00 00 20	orq	$536870912, %rax
100002333:	48 c1 e9 20	shrq	$32, %rcx
100002337:	41 88 8d c8 00 00 00	movb	%cl, 200(%r13)
10000233e:	41 89 85 c4 00 00 00	movl	%eax, 196(%r13)
100002345:	8b 83 f8 04 00 00	movl	1272(%rbx), %eax
10000234b:	41 89 85 ac 00 00 00	movl	%eax, 172(%r13)
100002352:	8b 83 94 03 00 00	movl	916(%rbx), %eax
100002358:	85 c0	testl	%eax, %eax
10000235a:	74 04	je	0x100002360
10000235c:	41 89 45 30	movl	%eax, 48(%r13)
100002360:	e8 f7 8d 02 00	callq	0x10002b15c
100002365:	49 89 c7	movq	%rax, %r15
100002368:	48 8b 8b 0d 05 00 00	movq	1293(%rbx), %rcx
10000236f:	f6 c1 02	testb	$2, %cl
100002372:	75 0d	jne	0x100002381
100002374:	b8 ff ff ff ff	movl	$4294967295, %eax
100002379:	0f ba e1 0e	btl	$14, %ecx
10000237d:	73 17	jae	0x100002396
10000237f:	eb 4c	jmp	0x1000023cd
100002381:	0f ba e1 1d	btl	$29, %ecx
100002385:	72 1b	jb	0x1000023a2
100002387:	0f ba e1 1e	btl	$30, %ecx
10000238b:	72 09	jb	0x100002396
10000238d:	4c 3b 3d fc 5c 05 00	cmpq	351484(%rip), %r15
100002394:	74 32	je	0x1000023c8
100002396:	48 8b 83 e8 00 00 00	movq	232(%rbx), %rax
10000239d:	8b 40 34	movl	52(%rax), %eax
1000023a0:	eb 2b	jmp	0x1000023cd
1000023a2:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000023a9:	e8 60 90 02 00	callq	0x10002b40e
1000023ae:	85 c0	testl	%eax, %eax
1000023b0:	75 1b	jne	0x1000023cd
1000023b2:	48 8d 15 ac 12 04 00	leaq	266924(%rip), %rdx ## literal pool for: "GUI session does not exist for service to join. It will be spawned without access to the GUI."
1000023b9:	48 89 df	movq	%rbx, %rdi
1000023bc:	be 03 00 00 00	movl	$3, %esi
1000023c1:	31 c0	xorl	%eax, %eax
1000023c3:	e8 f2 3b 01 00	callq	0x100015fba
1000023c8:	b8 ff ff ff ff	movl	$4294967295, %eax
1000023cd:	41 89 45 34	movl	%eax, 52(%r13)
1000023d1:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000023d8:	e8 b0 90 02 00	callq	0x10002b48d
1000023dd:	48 3b 05 dc 5d 05 00	cmpq	351708(%rip), %rax ## literal pool symbol address: _setpgid
1000023e4:	75 08	jne	0x1000023ee
1000023e6:	41 80 8d c6 00 00 00 01	orb	$1, 198(%r13)
1000023ee:	4c 3b 3d 9b 5c 05 00	cmpq	351387(%rip), %r15
1000023f5:	75 10	jne	0x100002407
1000023f7:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000023fe:	e8 63 8d 02 00	callq	0x10002b166
100002403:	41 89 45 38	movl	%eax, 56(%r13)
100002407:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
10000240e:	e8 49 8d 02 00	callq	0x10002b15c
100002413:	48 3b 05 76 5c 05 00	cmpq	351350(%rip), %rax
10000241a:	75 10	jne	0x10000242c
10000241c:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
100002423:	e8 3e 8d 02 00	callq	0x10002b166
100002428:	49 89 45 40	movq	%rax, 64(%r13)
10000242c:	48 8b 8b b8 04 00 00	movq	1208(%rbx), %rcx
100002433:	48 85 c9	testq	%rcx, %rcx
100002436:	75 10	jne	0x100002448
100002438:	48 8b 8b b0 01 00 00	movq	432(%rbx), %rcx
10000243f:	48 85 c9	testq	%rcx, %rcx
100002442:	0f 84 d8 06 00 00	je	0x100002b20
100002448:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000244c:	8b 06	movl	(%rsi), %eax
10000244e:	41 89 45 4c	movl	%eax, 76(%r13)
100002452:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100002456:	4c 89 ef	movq	%r13, %rdi
100002459:	e8 2f ca 00 00	callq	0x10000ee8d
10000245e:	48 8b 8b b8 01 00 00	movq	440(%rbx), %rcx
100002465:	48 85 c9	testq	%rcx, %rcx
100002468:	74 18	je	0x100002482
10000246a:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000246e:	8b 06	movl	(%rsi), %eax
100002470:	41 89 45 50	movl	%eax, 80(%r13)
100002474:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100002478:	4c 89 ef	movq	%r13, %rdi
10000247b:	e8 0d ca 00 00	callq	0x10000ee8d
100002480:	eb 08	jmp	0x10000248a
100002482:	41 c7 45 50 00 00 00 00	movl	$0, 80(%r13)
10000248a:	48 8b 8b c0 01 00 00	movq	448(%rbx), %rcx
100002491:	48 85 c9	testq	%rcx, %rcx
100002494:	74 18	je	0x1000024ae
100002496:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000249a:	8b 06	movl	(%rsi), %eax
10000249c:	41 89 45 54	movl	%eax, 84(%r13)
1000024a0:	48 8d 55 c8	leaq	-56(%rbp), %rdx
1000024a4:	4c 89 ef	movq	%r13, %rdi
1000024a7:	e8 e1 c9 00 00	callq	0x10000ee8d
1000024ac:	eb 08	jmp	0x1000024b6
1000024ae:	41 c7 45 54 00 00 00 00	movl	$0, 84(%r13)
1000024b6:	48 8b 8b c8 01 00 00	movq	456(%rbx), %rcx
1000024bd:	48 85 c9	testq	%rcx, %rcx
1000024c0:	74 18	je	0x1000024da
1000024c2:	48 8d 75 d4	leaq	-44(%rbp), %rsi
1000024c6:	8b 06	movl	(%rsi), %eax
1000024c8:	41 89 45 58	movl	%eax, 88(%r13)
1000024cc:	48 8d 55 c8	leaq	-56(%rbp), %rdx
1000024d0:	4c 89 ef	movq	%r13, %rdi
1000024d3:	e8 b5 c9 00 00	callq	0x10000ee8d
1000024d8:	eb 08	jmp	0x1000024e2
1000024da:	41 c7 45 58 00 00 00 00	movl	$0, 88(%r13)
1000024e2:	48 8b 8b d0 01 00 00	movq	464(%rbx), %rcx
1000024e9:	48 85 c9	testq	%rcx, %rcx
1000024ec:	74 18	je	0x100002506
1000024ee:	48 8d 75 d4	leaq	-44(%rbp), %rsi
1000024f2:	8b 06	movl	(%rsi), %eax
1000024f4:	41 89 45 5c	movl	%eax, 92(%r13)
1000024f8:	48 8d 55 c8	leaq	-56(%rbp), %rdx
1000024fc:	4c 89 ef	movq	%r13, %rdi
1000024ff:	e8 89 c9 00 00	callq	0x10000ee8d
100002504:	eb 08	jmp	0x10000250e
100002506:	41 c7 45 5c 00 00 00 00	movl	$0, 92(%r13)
10000250e:	48 8b 8b d8 01 00 00	movq	472(%rbx), %rcx
100002515:	48 85 c9	testq	%rcx, %rcx
100002518:	74 18	je	0x100002532
10000251a:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10000251e:	8b 06	movl	(%rsi), %eax
100002520:	41 89 45 60	movl	%eax, 96(%r13)
100002524:	48 8d 55 c8	leaq	-56(%rbp), %rdx
100002528:	4c 89 ef	movq	%r13, %rdi
10000252b:	e8 5d c9 00 00	callq	0x10000ee8d
100002530:	eb 08	jmp	0x10000253a
100002532:	41 c7 45 60 00 00 00 00	movl	$0, 96(%r13)
10000253a:	44 0f b6 83 15 05 00 00	movzbl	1301(%rbx), %r8d
100002542:	4c 8b 8b 0d 05 00 00	movq	1293(%rbx), %r9
100002549:	41 8b 85 c4 00 00 00	movl	196(%r13), %eax
100002550:	41 0f b6 8d c8 00 00 00	movzbl	200(%r13), %ecx
100002558:	41 88 8d c8 00 00 00	movb	%cl, 200(%r13)
10000255f:	48 c1 e1 20	shlq	$32, %rcx
100002563:	48 09 c1	orq	%rax, %rcx
100002566:	4c 89 c8	movq	%r9, %rax
100002569:	48 c1 e8 12	shrq	$18, %rax
10000256d:	25 00 40 00 00	andl	$16384, %eax
100002572:	48 81 e1 ff bf ff ff	andq	$-16385, %rcx
100002579:	48 09 c1	orq	%rax, %rcx
10000257c:	41 89 8d c4 00 00 00	movl	%ecx, 196(%r13)
100002583:	48 8b 8b e0 01 00 00	movq	480(%rbx), %rcx
10000258a:	48 85 c9	testq	%rcx, %rcx
10000258d:	74 27	je	0x1000025b6
10000258f:	48 8d 75 d4	leaq	-44(%rbp), %rsi
100002593:	8b 06	movl	(%rsi), %eax
100002595:	41 89 45 64	movl	%eax, 100(%r13)
100002599:	48 8d 55 c8	leaq	-56(%rbp), %rdx
10000259d:	4c 89 ef	movq	%r13, %rdi
1000025a0:	e8 e8 c8 00 00	callq	0x10000ee8d
1000025a5:	4c 8b 8b 0d 05 00 00	movq	1293(%rbx), %r9
1000025ac:	44 0f b6 83 15 05 00 00	movzbl	1301(%rbx), %r8d
1000025b4:	eb 08	jmp	0x1000025be
1000025b6:	41 c7 45 64 00 00 00 00	movl	$0, 100(%r13)
1000025be:	49 0f ba e1 2a	btq	$42, %r9
1000025c3:	73 12	jae	0x1000025d7
1000025c5:	8b 83 90 03 00 00	movl	912(%rbx), %eax
1000025cb:	41 89 45 48	movl	%eax, 72(%r13)
1000025cf:	41 80 8d c6 00 00 00 80	orb	$-128, 198(%r13)
1000025d7:	8b 83 20 03 00 00	movl	800(%rbx), %eax
1000025dd:	41 89 45 6c	movl	%eax, 108(%r13)
1000025e1:	8b 83 24 03 00 00	movl	804(%rbx), %eax
1000025e7:	41 89 45 70	movl	%eax, 112(%r13)
1000025eb:	0f bf 83 e8 04 00 00	movswl	1256(%rbx), %eax
1000025f2:	85 c0	testl	%eax, %eax
1000025f4:	75 06	jne	0x1000025fc
1000025f6:	8b 83 34 03 00 00	movl	820(%rbx), %eax
1000025fc:	41 89 45 74	movl	%eax, 116(%r13)
100002600:	8b 83 e0 04 00 00	movl	1248(%rbx), %eax
100002606:	85 c0	testl	%eax, %eax
100002608:	79 06	jns	0x100002610
10000260a:	8b 83 38 03 00 00	movl	824(%rbx), %eax
100002610:	41 89 45 78	movl	%eax, 120(%r13)
100002614:	8b 83 e4 04 00 00	movl	1252(%rbx), %eax
10000261a:	85 c0	testl	%eax, %eax
10000261c:	74 06	je	0x100002624
10000261e:	41 89 45 7c	movl	%eax, 124(%r13)
100002622:	eb 10	jmp	0x100002634
100002624:	8b 83 3c 03 00 00	movl	828(%rbx), %eax
10000262a:	41 89 45 7c	movl	%eax, 124(%r13)
10000262e:	8b 83 40 03 00 00	movl	832(%rbx), %eax
100002634:	41 89 85 80 00 00 00	movl	%eax, 128(%r13)
10000263b:	8b 83 44 03 00 00	movl	836(%rbx), %eax
100002641:	85 c0	testl	%eax, %eax
100002643:	78 07	js	0x10000264c
100002645:	41 89 85 84 00 00 00	movl	%eax, 132(%r13)
10000264c:	48 8b 83 48 03 00 00	movq	840(%rbx), %rax
100002653:	49 89 85 88 00 00 00	movq	%rax, 136(%r13)
10000265a:	0f 10 83 50 03 00 00	movups	848(%rbx), %xmm0
100002661:	41 0f 11 85 90 00 00 00	movups	%xmm0, 144(%r13)
100002669:	41 8b 85 c4 00 00 00	movl	196(%r13), %eax
100002670:	41 8b 8d c8 00 00 00	movl	200(%r13), %ecx
100002677:	41 88 8d c8 00 00 00	movb	%cl, 200(%r13)
10000267e:	48 c1 e1 20	shlq	$32, %rcx
100002682:	48 09 c1	orq	%rax, %rcx
100002685:	4c 89 c8	movq	%r9, %rax
100002688:	48 c1 e8 19	shrq	$25, %rax
10000268c:	48 ba ff ff ff ff fe ff ff ff	movabsq	$-4294967297, %rdx
100002696:	48 81 c2 00 00 00 40	addq	$1073741824, %rdx
10000269d:	48 21 ca	andq	%rcx, %rdx
1000026a0:	25 00 00 00 c0	andl	$3221225472, %eax
1000026a5:	48 09 d0	orq	%rdx, %rax
1000026a8:	41 89 85 c4 00 00 00	movl	%eax, 196(%r13)
1000026af:	8b 8b 8c 03 00 00	movl	908(%rbx), %ecx
1000026b5:	8a 93 8a 03 00 00	movb	906(%rbx), %dl
1000026bb:	85 c9	testl	%ecx, %ecx
1000026bd:	75 04	jne	0x1000026c3
1000026bf:	84 d2	testb	%dl, %dl
1000026c1:	74 2a	je	0x1000026ed
1000026c3:	48 89 c6	movq	%rax, %rsi
1000026c6:	48 81 ce 00 00 00 04	orq	$67108864, %rsi
1000026cd:	48 c1 e8 20	shrq	$32, %rax
1000026d1:	41 88 85 c8 00 00 00	movb	%al, 200(%r13)
1000026d8:	41 89 b5 c4 00 00 00	movl	%esi, 196(%r13)
1000026df:	41 89 8d b8 00 00 00	movl	%ecx, 184(%r13)
1000026e6:	41 88 95 bc 00 00 00	movb	%dl, 188(%r13)
1000026ed:	8b 83 30 03 00 00	movl	816(%rbx), %eax
1000026f3:	41 89 85 a0 00 00 00	movl	%eax, 160(%r13)
1000026fa:	48 8b 8b 90 02 00 00	movq	656(%rbx), %rcx
100002701:	48 85 c9	testq	%rcx, %rcx
100002704:	0f 84 b1 00 00 00	je	0x1000027bb
10000270a:	31 c0	xorl	%eax, %eax
10000270c:	48 89 ca	movq	%rcx, %rdx
10000270f:	48 8b 12	movq	(%rdx), %rdx
100002712:	48 ff c8	decq	%rax
100002715:	48 85 d2	testq	%rdx, %rdx
100002718:	75 f5	jne	0x10000270f
10000271a:	48 85 c0	testq	%rax, %rax
10000271d:	0f 84 98 00 00 00	je	0x1000027bb
100002723:	f7 d8	negl	%eax
100002725:	41 89 85 a4 00 00 00	movl	%eax, 164(%r13)
10000272c:	8b 75 d4	movl	-44(%rbp), %esi
10000272f:	41 89 b5 a8 00 00 00	movl	%esi, 168(%r13)
100002736:	48 85 c9	testq	%rcx, %rcx
100002739:	0f 84 87 00 00 00	je	0x1000027c6
10000273f:	8b 55 d4	movl	-44(%rbp), %edx
100002742:	48 8b 45 c8	movq	-56(%rbp), %rax
100002746:	0f 28 05 33 0b 04 00	movaps	265011(%rip), %xmm0
10000274d:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100002751:	c7 45 b0 aa aa aa aa	movl	$2863311530, -80(%rbp)
100002758:	0f 10 49 10	movups	16(%rcx), %xmm1
10000275c:	0f 29 4d a0	movaps	%xmm1, -96(%rbp)
100002760:	0f b7 79 20	movzwl	32(%rcx), %edi
100002764:	66 89 7d b0	movw	%di, -80(%rbp)
100002768:	8a 59 22	movb	34(%rcx), %bl
10000276b:	88 5d b2	movb	%bl, -78(%rbp)
10000276e:	8a 59 23	movb	35(%rcx), %bl
100002771:	88 5d b3	movb	%bl, -77(%rbp)
100002774:	89 f6	movl	%esi, %esi
100002776:	0f 28 4d a0	movaps	-96(%rbp), %xmm1
10000277a:	42 0f 11 8c 2e c9 00 00 00	movups	%xmm1, 201(%rsi,%r13)
100002783:	8b 7d b0	movl	-80(%rbp), %edi
100002786:	42 89 bc 2e d9 00 00 00	movl	%edi, 217(%rsi,%r13)
10000278e:	83 c2 14	addl	$20, %edx
100002791:	48 83 c0 ec	addq	$-20, %rax
100002795:	48 8b 09	movq	(%rcx), %rcx
100002798:	89 d6	movl	%edx, %esi
10000279a:	48 85 c9	testq	%rcx, %rcx
10000279d:	75 ae	jne	0x10000274d
10000279f:	89 55 d4	movl	%edx, -44(%rbp)
1000027a2:	48 89 45 c8	movq	%rax, -56(%rbp)
1000027a6:	48 8b 5d c0	movq	-64(%rbp), %rbx
1000027aa:	4c 8b 8b 0d 05 00 00	movq	1293(%rbx), %r9
1000027b1:	44 0f b6 83 15 05 00 00	movzbl	1301(%rbx), %r8d
1000027b9:	eb 0b	jmp	0x1000027c6
1000027bb:	49 c7 85 a4 00 00 00 00 00 00 00	movq	$0, 164(%r13)
1000027c6:	b0 01	movb	$1, %al
1000027c8:	41 0f ba e1 0b	btl	$11, %r9d
1000027cd:	72 08	jb	0x1000027d7
1000027cf:	8a 83 ea 04 00 00	movb	1258(%rbx), %al
1000027d5:	24 01	andb	$1, %al
1000027d7:	41 88 45 68	movb	%al, 104(%r13)
1000027db:	48 8b 45 b8	movq	-72(%rbp), %rax
1000027df:	41 89 85 b4 00 00 00	movl	%eax, 180(%r13)
1000027e6:	48 85 c0	testq	%rax, %rax
1000027e9:	74 43	je	0x10000282e
1000027eb:	8b 4d d4	movl	-44(%rbp), %ecx
1000027ee:	41 89 8d b0 00 00 00	movl	%ecx, 176(%r13)
1000027f5:	48 8b 5d 98	movq	-104(%rbp), %rbx
1000027f9:	4c 8b 55 c8	movq	-56(%rbp), %r10
1000027fd:	4c 8d 1c 85 00 00 00 00	leaq	(,%rax,4), %r11
100002805:	49 f7 db	negq	%r11
100002808:	31 d2	xorl	%edx, %edx
10000280a:	8b 34 93	movl	(%rbx,%rdx,4), %esi
10000280d:	89 cf	movl	%ecx, %edi
10000280f:	42 89 b4 2f c9 00 00 00	movl	%esi, 201(%rdi,%r13)
100002817:	83 c1 04	addl	$4, %ecx
10000281a:	89 4d d4	movl	%ecx, -44(%rbp)
10000281d:	48 ff c2	incq	%rdx
100002820:	48 39 d0	cmpq	%rdx, %rax
100002823:	75 e5	jne	0x10000280a
100002825:	4d 01 d3	addq	%r10, %r11
100002828:	4c 89 5d c8	movq	%r11, -56(%rbp)
10000282c:	eb 0b	jmp	0x100002839
10000282e:	41 c7 85 b0 00 00 00 00 00 00 00	movl	$0, 176(%r13)
100002839:	41 0f b6 f8	movzbl	%r8b, %edi
10000283d:	49 89 fa	movq	%rdi, %r10
100002840:	4d 0f a4 ca 34	shldq	$52, %r9, %r10
100002845:	4d 89 cf	movq	%r9, %r15
100002848:	49 c1 ef 0c	shrq	$12, %r15
10000284c:	41 8b b5 c4 00 00 00	movl	196(%r13), %esi
100002853:	45 8b 85 c8 00 00 00	movl	200(%r13), %r8d
10000285a:	4c 89 c0	movq	%r8, %rax
10000285d:	48 c1 e0 20	shlq	$32, %rax
100002861:	48 09 f0	orq	%rsi, %rax
100002864:	48 25 00 c4 ff ef	andq	$-268450816, %rax
10000286a:	44 89 ca	movl	%r9d, %edx
10000286d:	c1 e2 04	shll	$4, %edx
100002870:	83 e2 20	andl	$32, %edx
100002873:	48 89 fb	movq	%rdi, %rbx
100002876:	4c 0f a4 cb 3e	shldq	$62, %r9, %rbx
10000287b:	89 de	movl	%ebx, %esi
10000287d:	83 e6 40	andl	$64, %esi
100002880:	4c 0f a4 cf 26	shldq	$38, %r9, %rdi
100002885:	4d 89 cb	movq	%r9, %r11
100002888:	49 c1 eb 02	shrq	$2, %r11
10000288c:	81 e7 00 00 00 10	andl	$268435456, %edi
100002892:	44 89 d1	movl	%r10d, %ecx
100002895:	83 e1 03	andl	$3, %ecx
100002898:	48 09 d1	orq	%rdx, %rcx
10000289b:	48 09 f1	orq	%rsi, %rcx
10000289e:	48 09 f9	orq	%rdi, %rcx
1000028a1:	48 09 c1	orq	%rax, %rcx
1000028a4:	31 c0	xorl	%eax, %eax
1000028a6:	48 8b 75 c0	movq	-64(%rbp), %rsi
1000028aa:	83 be cc 03 00 00 0b	cmpl	$11, 972(%rsi)
1000028b1:	0f 94 c0	sete	%al
1000028b4:	48 c1 e0 07	shlq	$7, %rax
1000028b8:	48 09 c8	orq	%rcx, %rax
1000028bb:	0f b7 8e 64 01 00 00	movzwl	356(%rsi), %ecx
1000028c2:	83 e1 20	andl	$32, %ecx
1000028c5:	41 81 e2 00 02 00 00	andl	$512, %r10d
1000028cc:	89 da	movl	%ebx, %edx
1000028ce:	83 e2 04	andl	$4, %edx
1000028d1:	4c 09 d2	orq	%r10, %rdx
1000028d4:	83 e3 08	andl	$8, %ebx
1000028d7:	48 09 d3	orq	%rdx, %rbx
1000028da:	48 8d 0c cb	leaq	(%rbx,%rcx,8), %rcx
1000028de:	48 89 f3	movq	%rsi, %rbx
1000028e1:	48 09 c1	orq	%rax, %rcx
1000028e4:	8a 86 fc 04 00 00	movb	1276(%rsi), %al
1000028ea:	41 88 85 bd 00 00 00	movb	%al, 189(%r13)
1000028f1:	42 8d 04 8d 00 00 00 00	leal	(,%r9,4), %eax
1000028f9:	25 00 08 00 00	andl	$2048, %eax
1000028fe:	48 09 c8	orq	%rcx, %rax
100002901:	48 8d 0d cd fe 05 00	leaq	392909(%rip), %rcx
100002908:	0f b6 09	movzbl	(%rcx), %ecx
10000290b:	48 c1 e1 0c	shlq	$12, %rcx
10000290f:	41 81 e7 00 20 00 00	andl	$8192, %r15d
100002916:	49 09 cf	orq	%rcx, %r15
100002919:	49 09 c7	orq	%rax, %r15
10000291c:	41 83 e3 10	andl	$16, %r11d
100002920:	4d 09 fb	orq	%r15, %r11
100002923:	45 88 85 c8 00 00 00	movb	%r8b, 200(%r13)
10000292a:	45 89 9d c4 00 00 00	movl	%r11d, 196(%r13)
100002931:	48 89 f7	movq	%rsi, %rdi
100002934:	e8 8c 48 01 00	callq	0x1000171c5
100002939:	85 c0	testl	%eax, %eax
10000293b:	74 15	je	0x100002952
10000293d:	48 89 df	movq	%rbx, %rdi
100002940:	e8 80 48 01 00	callq	0x1000171c5
100002945:	83 f8 ff	cmpl	$-1, %eax
100002948:	74 08	je	0x100002952
10000294a:	41 80 8d c5 00 00 00 04	orb	$4, 197(%r13)
100002952:	44 0f b6 83 15 05 00 00	movzbl	1301(%rbx), %r8d
10000295a:	48 8b 83 0d 05 00 00	movq	1293(%rbx), %rax
100002961:	0f ba e0 1a	btl	$26, %eax
100002965:	72 20	jb	0x100002987
100002967:	f6 83 ea 04 00 00 10	testb	$16, 1258(%rbx)
10000296e:	75 17	jne	0x100002987
100002970:	41 8b 95 c4 00 00 00	movl	196(%r13), %edx
100002977:	41 8b b5 c8 00 00 00	movl	200(%r13), %esi
10000297e:	48 c1 e6 20	shlq	$32, %rsi
100002982:	48 09 d6	orq	%rdx, %rsi
100002985:	eb 2a	jmp	0x1000029b1
100002987:	41 8b 95 c4 00 00 00	movl	196(%r13), %edx
10000298e:	41 8b b5 c8 00 00 00	movl	200(%r13), %esi
100002995:	41 88 b5 c8 00 00 00	movb	%sil, 200(%r13)
10000299c:	48 c1 e6 20	shlq	$32, %rsi
1000029a0:	48 09 d6	orq	%rdx, %rsi
1000029a3:	48 81 ce 00 00 40 00	orq	$4194304, %rsi
1000029aa:	41 89 b5 c4 00 00 00	movl	%esi, 196(%r13)
1000029b1:	49 bf ff ff ff ff fe 00 00 00	movabsq	$1095216660479, %r15
1000029bb:	48 bf ff ff ff ff ff 00 00 00	movabsq	$1099511627775, %rdi
1000029c5:	48 21 c7	andq	%rax, %rdi
1000029c8:	48 89 fa	movq	%rdi, %rdx
1000029cb:	48 c1 ea 12	shrq	$18, %rdx
1000029cf:	81 e2 00 80 00 00	andl	$32768, %edx
1000029d5:	48 89 f3	movq	%rsi, %rbx
1000029d8:	48 81 e3 ff 7f eb f7	andq	$-135561217, %rbx
1000029df:	41 0f b6 cc	movzbl	%r12b, %ecx
1000029e3:	48 c1 e1 12	shlq	$18, %rcx
1000029e7:	48 09 d1	orq	%rdx, %rcx
1000029ea:	48 c1 ef 0a	shrq	$10, %rdi
1000029ee:	81 e7 00 00 00 08	andl	$134217728, %edi
1000029f4:	48 09 cf	orq	%rcx, %rdi
1000029f7:	48 89 c2	movq	%rax, %rdx
1000029fa:	48 c1 ea 29	shrq	$41, %rdx
1000029fe:	81 e2 00 00 10 00	andl	$1048576, %edx
100002a04:	48 09 fa	orq	%rdi, %rdx
100002a07:	48 09 da	orq	%rbx, %rdx
100002a0a:	48 c1 ee 20	shrq	$32, %rsi
100002a0e:	41 88 b5 c8 00 00 00	movb	%sil, 200(%r13)
100002a15:	41 89 95 c4 00 00 00	movl	%edx, 196(%r13)
100002a1c:	48 0f ba e0 3b	btq	$59, %rax
100002a21:	72 28	jb	0x100002a4b
100002a23:	be 00 00 00 c0	movl	$3221225472, %esi
100002a28:	41 0f b6 c8	movzbl	%r8b, %ecx
100002a2c:	48 0f a4 c1 2f	shldq	$47, %rax, %rcx
100002a31:	48 c1 e8 1a	shrq	$26, %rax
100002a35:	48 81 c6 00 00 00 40	addq	$1073741824, %rsi
100002a3c:	48 21 c6	andq	%rax, %rsi
100002a3f:	4c 21 fa	andq	%r15, %rdx
100002a42:	48 09 f2	orq	%rsi, %rdx
100002a45:	48 8b 5d c0	movq	-64(%rbp), %rbx
100002a49:	eb 52	jmp	0x100002a9d
100002a4b:	48 0f ba e0 3a	btq	$58, %rax
100002a50:	48 8b 5d c0	movq	-64(%rbp), %rbx
100002a54:	72 06	jb	0x100002a5c
100002a56:	41 0f b6 c8	movzbl	%r8b, %ecx
100002a5a:	eb 39	jmp	0x100002a95
100002a5c:	48 8d 15 60 0c 04 00	leaq	265312(%rip), %rdx ## literal pool for: "Conflicting request: resliding disabled, but requesting a shared cache reslide. No reslide will be performed."
100002a63:	48 89 df	movq	%rbx, %rdi
100002a66:	be 03 00 00 00	movl	$3, %esi
100002a6b:	31 c0	xorl	%eax, %eax
100002a6d:	e8 48 35 01 00	callq	0x100015fba
100002a72:	41 8b 85 c4 00 00 00	movl	196(%r13), %eax
100002a79:	41 8b 95 c8 00 00 00	movl	200(%r13), %edx
100002a80:	48 c1 e2 20	shlq	$32, %rdx
100002a84:	48 09 c2	orq	%rax, %rdx
100002a87:	48 8b 83 0d 05 00 00	movq	1293(%rbx), %rax
100002a8e:	0f b6 8b 15 05 00 00	movzbl	1301(%rbx), %ecx
100002a95:	48 0f a4 c1 2f	shldq	$47, %rax, %rcx
100002a9a:	4c 21 fa	andq	%r15, %rdx
100002a9d:	81 e1 00 00 20 00	andl	$2097152, %ecx
100002aa3:	48 89 d0	movq	%rdx, %rax
100002aa6:	48 25 ff ff df ff	andq	$-2097153, %rax
100002aac:	48 09 c8	orq	%rcx, %rax
100002aaf:	48 c1 ea 20	shrq	$32, %rdx
100002ab3:	41 88 95 c8 00 00 00	movb	%dl, 200(%r13)
100002aba:	41 89 85 c4 00 00 00	movl	%eax, 196(%r13)
100002ac1:	8b 83 08 05 00 00	movl	1288(%rbx), %eax
100002ac7:	41 89 85 c0 00 00 00	movl	%eax, 192(%r13)
100002ace:	48 8b 55 c8	movq	-56(%rbp), %rdx
100002ad2:	8b 75 d4	movl	-44(%rbp), %esi
100002ad5:	48 85 d2	testq	%rdx, %rdx
100002ad8:	75 53	jne	0x100002b2d
100002ada:	48 8d 86 cc 00 00 00	leaq	204(%rsi), %rax
100002ae1:	4c 39 f0	cmpq	%r14, %rax
100002ae4:	75 47	jne	0x100002b2d
100002ae6:	48 8b 7d 98	movq	-104(%rbp), %rdi
100002aea:	e8 41 ef 03 00	callq	0x100041a30 ## symbol stub for: _free
100002aef:	48 8b 45 88	movq	-120(%rbp), %rax
100002af3:	4c 89 28	movq	%r13, (%rax)
100002af6:	48 8b 45 90	movq	-112(%rbp), %rax
100002afa:	48 8b 4d 80	movq	-128(%rbp), %rcx
100002afe:	48 89 01	movq	%rax, (%rcx)
100002b01:	4c 89 f0	movq	%r14, %rax
100002b04:	48 83 c4 68	addq	$104, %rsp
100002b08:	5b	popq	%rbx
100002b09:	41 5c	popq	%r12
100002b0b:	41 5d	popq	%r13
100002b0d:	41 5e	popq	%r14
100002b0f:	41 5f	popq	%r15
100002b11:	5d	popq	%rbp
100002b12:	c3	retq
100002b13:	41 c7 45 24 00 00 00 00	movl	$0, 36(%r13)
100002b1b:	e9 df f6 ff ff	jmp	0x1000021ff
100002b20:	41 c7 45 4c 00 00 00 00	movl	$0, 76(%r13)
100002b28:	e9 31 f9 ff ff	jmp	0x10000245e
100002b2d:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100002b34:	48 8d 3d f6 0b 04 00	leaq	265206(%rip), %rdi ## literal pool for: "failed to marshall spawnattrs: offset = %u, left = %lu, expected = %lu"
100002b3b:	31 c0	xorl	%eax, %eax
100002b3d:	e8 d0 18 03 00	callq	0x100034412
100002b42:	55	pushq	%rbp
100002b43:	48 89 e5	movq	%rsp, %rbp
100002b46:	41 57	pushq	%r15
100002b48:	41 56	pushq	%r14
100002b4a:	41 55	pushq	%r13
100002b4c:	41 54	pushq	%r12
100002b4e:	53	pushq	%rbx
100002b4f:	50	pushq	%rax
100002b50:	48 89 f3	movq	%rsi, %rbx
100002b53:	49 89 fd	movq	%rdi, %r13
100002b56:	4c 8b 22	movq	(%rdx), %r12
100002b59:	4c 8b 72 08	movq	8(%rdx), %r14
100002b5d:	4c 8b 7a 10	movq	16(%rdx), %r15
100002b61:	48 89 f7	movq	%rsi, %rdi
100002b64:	e8 5d f5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100002b69:	48 3b 05 b8 55 05 00	cmpq	349624(%rip), %rax ## literal pool symbol address: __xpc_type_string
100002b70:	75 44	jne	0x100002bb6
100002b72:	4c 89 e7	movq	%r12, %rdi
100002b75:	4c 89 f6	movq	%r14, %rsi
100002b78:	4c 89 fa	movq	%r15, %rdx
100002b7b:	4c 89 e9	movq	%r13, %rcx
100002b7e:	e8 ca c2 00 00	callq	0x10000ee4d
100002b83:	48 8d 0d ee 0b 04 00	leaq	265198(%rip), %rcx ## literal pool for: "="
100002b8a:	4c 89 e7	movq	%r12, %rdi
100002b8d:	4c 89 f6	movq	%r14, %rsi
100002b90:	4c 89 fa	movq	%r15, %rdx
100002b93:	e8 b5 c2 00 00	callq	0x10000ee4d
100002b98:	48 89 df	movq	%rbx, %rdi
100002b9b:	e8 86 f5 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100002ba0:	4c 89 e7	movq	%r12, %rdi
100002ba3:	4c 89 f6	movq	%r14, %rsi
100002ba6:	4c 89 fa	movq	%r15, %rdx
100002ba9:	48 89 c1	movq	%rax, %rcx
100002bac:	e8 dc c2 00 00	callq	0x10000ee8d
100002bb1:	41 ff 44 24 18	incl	24(%r12)
100002bb6:	48 83 c4 08	addq	$8, %rsp
100002bba:	5b	popq	%rbx
100002bbb:	41 5c	popq	%r12
100002bbd:	41 5d	popq	%r13
100002bbf:	41 5e	popq	%r14
100002bc1:	41 5f	popq	%r15
100002bc3:	5d	popq	%rbp
100002bc4:	c3	retq
100002bc5:	55	pushq	%rbp
100002bc6:	48 89 e5	movq	%rsp, %rbp
100002bc9:	41 57	pushq	%r15
100002bcb:	41 56	pushq	%r14
100002bcd:	53	pushq	%rbx
100002bce:	50	pushq	%rax
100002bcf:	49 89 d6	movq	%rdx, %r14
100002bd2:	48 89 f3	movq	%rsi, %rbx
100002bd5:	49 89 ff	movq	%rdi, %r15
100002bd8:	48 89 f7	movq	%rsi, %rdi
100002bdb:	e8 e6 f4 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100002be0:	48 3b 05 41 55 05 00	cmpq	349505(%rip), %rax ## literal pool symbol address: __xpc_type_string
100002be7:	75 23	jne	0x100002c0c
100002be9:	4c 89 ff	movq	%r15, %rdi
100002bec:	e8 65 f2 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100002bf1:	49 89 c7	movq	%rax, %r15
100002bf4:	48 89 df	movq	%rbx, %rdi
100002bf7:	e8 24 f5 03 00	callq	0x100042120 ## symbol stub for: _xpc_string_get_length
100002bfc:	49 8b 0e	movq	(%r14), %rcx
100002bff:	4c 01 f8	addq	%r15, %rax
100002c02:	48 01 c8	addq	%rcx, %rax
100002c05:	48 83 c0 02	addq	$2, %rax
100002c09:	49 89 06	movq	%rax, (%r14)
100002c0c:	48 83 c4 08	addq	$8, %rsp
100002c10:	5b	popq	%rbx
100002c11:	41 5e	popq	%r14
100002c13:	41 5f	popq	%r15
100002c15:	5d	popq	%rbp
100002c16:	c3	retq
100002c17:	90	nop
100002c18:	48 85 ff	testq	%rdi, %rdi
100002c1b:	74 06	je	0x100002c23
100002c1d:	48 89 f8	movq	%rdi, %rax
100002c20:	31 d2	xorl	%edx, %edx
100002c22:	c3	retq
100002c23:	55	pushq	%rbp
100002c24:	48 89 e5	movq	%rsp, %rbp
100002c27:	e8 72 c2 03 00	callq	0x10003ee9e
100002c2c:	85 ff	testl	%edi, %edi
100002c2e:	74 05	je	0x100002c35
100002c30:	31 c0	xorl	%eax, %eax
100002c32:	89 fa	movl	%edi, %edx
100002c34:	c3	retq
100002c35:	55	pushq	%rbp
100002c36:	48 89 e5	movq	%rsp, %rbp
100002c39:	e8 72 c2 03 00	callq	0x10003eeb0
100002c3e:	55	pushq	%rbp
100002c3f:	48 89 e5	movq	%rsp, %rbp
100002c42:	41 56	pushq	%r14
100002c44:	53	pushq	%rbx
100002c45:	80 bf a0 01 00 00 00	cmpb	$0, 416(%rdi)
100002c4c:	0f 85 27 03 00 00	jne	0x100002f79
100002c52:	49 89 fe	movq	%rdi, %r14
100002c55:	48 83 7f 08 ff	cmpq	$-1, 8(%rdi)
100002c5a:	0f 85 07 03 00 00	jne	0x100002f67
100002c60:	49 83 7e 10 ff	cmpq	$-1, 16(%r14)
100002c65:	0f 85 fc 02 00 00	jne	0x100002f67
100002c6b:	49 83 7e 18 ff	cmpq	$-1, 24(%r14)
100002c70:	0f 85 fa 02 00 00	jne	0x100002f70
100002c76:	49 83 7e 20 ff	cmpq	$-1, 32(%r14)
100002c7b:	0f 85 ef 02 00 00	jne	0x100002f70
100002c81:	49 83 be f8 01 00 00 00	cmpq	$0, 504(%r14)
100002c89:	0f 85 f8 02 00 00	jne	0x100002f87
100002c8f:	49 83 be 00 03 00 00 00	cmpq	$0, 768(%r14)
100002c97:	0f 85 aa 02 00 00	jne	0x100002f47
100002c9d:	49 83 be 10 03 00 00 00	cmpq	$0, 784(%r14)
100002ca5:	0f 85 a1 02 00 00	jne	0x100002f4c
100002cab:	49 83 7e 78 00	cmpq	$0, 120(%r14)
100002cb0:	0f 85 9b 02 00 00	jne	0x100002f51
100002cb6:	49 83 be 80 00 00 00 00	cmpq	$0, 128(%r14)
100002cbe:	0f 85 92 02 00 00	jne	0x100002f56
100002cc4:	49 8b be 0d 05 00 00	movq	1293(%r14), %rdi
100002ccb:	48 85 ff	testq	%rdi, %rdi
100002cce:	0f 88 87 02 00 00	js	0x100002f5b
100002cd4:	49 8b be 38 02 00 00	movq	568(%r14), %rdi
100002cdb:	49 8d 86 18 05 00 00	leaq	1304(%r14), %rax
100002ce2:	48 39 c7	cmpq	%rax, %rdi
100002ce5:	74 05	je	0x100002cec
100002ce7:	e8 44 ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002cec:	49 8b be 40 02 00 00	movq	576(%r14), %rdi
100002cf3:	e8 38 ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002cf8:	49 8b be 48 02 00 00	movq	584(%r14), %rdi
100002cff:	e8 2c ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d04:	49 8b be 68 01 00 00	movq	360(%r14), %rdi
100002d0b:	e8 20 ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d10:	49 8b be 58 02 00 00	movq	600(%r14), %rdi
100002d17:	e8 14 ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d1c:	49 8b be 60 02 00 00	movq	608(%r14), %rdi
100002d23:	e8 08 ed 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d28:	49 8b be 68 02 00 00	movq	616(%r14), %rdi
100002d2f:	e8 fc ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d34:	49 8b be a8 01 00 00	movq	424(%r14), %rdi
100002d3b:	e8 f0 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d40:	49 8b be b0 01 00 00	movq	432(%r14), %rdi
100002d47:	e8 e4 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d4c:	49 8b be 18 03 00 00	movq	792(%r14), %rdi
100002d53:	e8 d8 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d58:	49 8b be d0 01 00 00	movq	464(%r14), %rdi
100002d5f:	e8 cc ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d64:	49 8b be d8 01 00 00	movq	472(%r14), %rdi
100002d6b:	e8 c0 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d70:	49 8b be e0 01 00 00	movq	480(%r14), %rdi
100002d77:	e8 b4 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d7c:	49 8b be b8 01 00 00	movq	440(%r14), %rdi
100002d83:	e8 a8 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d88:	49 8b be c0 01 00 00	movq	448(%r14), %rdi
100002d8f:	e8 9c ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002d94:	49 8b be c8 01 00 00	movq	456(%r14), %rdi
100002d9b:	e8 90 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002da0:	49 8b be c0 02 00 00	movq	704(%r14), %rdi
100002da7:	e8 84 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002dac:	49 8b be c8 02 00 00	movq	712(%r14), %rdi
100002db3:	e8 78 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002db8:	49 8b be 28 03 00 00	movq	808(%r14), %rdi
100002dbf:	e8 6c ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002dc4:	49 8b be 20 01 00 00	movq	288(%r14), %rdi
100002dcb:	e8 60 ec 03 00	callq	0x100041a30 ## symbol stub for: _free
100002dd0:	49 8b be 60 03 00 00	movq	864(%r14), %rdi
100002dd7:	48 85 ff	testq	%rdi, %rdi
100002dda:	74 05	je	0x100002de1
100002ddc:	e8 56 2e 01 00	callq	0x100015c37
100002de1:	49 8b be 70 02 00 00	movq	624(%r14), %rdi
100002de8:	48 85 ff	testq	%rdi, %rdi
100002deb:	74 05	je	0x100002df2
100002ded:	e8 0a f3 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002df2:	49 8b be 78 02 00 00	movq	632(%r14), %rdi
100002df9:	48 85 ff	testq	%rdi, %rdi
100002dfc:	74 05	je	0x100002e03
100002dfe:	e8 f9 f2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002e03:	49 8b be 80 02 00 00	movq	640(%r14), %rdi
100002e0a:	48 85 ff	testq	%rdi, %rdi
100002e0d:	74 05	je	0x100002e14
100002e0f:	e8 e8 f2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002e14:	49 8b be e8 01 00 00	movq	488(%r14), %rdi
100002e1b:	48 85 ff	testq	%rdi, %rdi
100002e1e:	74 05	je	0x100002e25
100002e20:	e8 d7 f2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002e25:	49 8b be f0 01 00 00	movq	496(%r14), %rdi
100002e2c:	48 85 ff	testq	%rdi, %rdi
100002e2f:	74 05	je	0x100002e36
100002e31:	e8 c6 f2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002e36:	49 83 be b0 02 00 00 00	cmpq	$0, 688(%r14)
100002e3e:	74 08	je	0x100002e48
100002e40:	4c 89 f7	movq	%r14, %rdi
100002e43:	e8 57 01 00 00	callq	0x100002f9f
100002e48:	49 8b be b8 02 00 00	movq	696(%r14), %rdi
100002e4f:	48 85 ff	testq	%rdi, %rdi
100002e52:	74 29	je	0x100002e7d
100002e54:	48 89 fe	movq	%rdi, %rsi
100002e57:	e8 1a eb 03 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100002e5c:	49 8b be b8 02 00 00	movq	696(%r14), %rdi
100002e63:	e8 14 eb 03 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100002e68:	49 c7 86 b8 02 00 00 00 00 00 00	movq	$0, 696(%r14)
100002e73:	eb 08	jmp	0x100002e7d
100002e75:	4c 89 f7	movq	%r14, %rdi
100002e78:	e8 98 01 00 00	callq	0x100003015
100002e7d:	49 8b b6 80 03 00 00	movq	896(%r14), %rsi
100002e84:	48 85 f6	testq	%rsi, %rsi
100002e87:	75 ec	jne	0x100002e75
100002e89:	eb 30	jmp	0x100002ebb
100002e8b:	48 8b 03	movq	(%rbx), %rax
100002e8e:	48 85 c0	testq	%rax, %rax
100002e91:	74 08	je	0x100002e9b
100002e93:	48 8b 4b 08	movq	8(%rbx), %rcx
100002e97:	48 89 48 08	movq	%rcx, 8(%rax)
100002e9b:	48 8b 4b 08	movq	8(%rbx), %rcx
100002e9f:	48 89 01	movq	%rax, (%rcx)
100002ea2:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100002ea6:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
100002eaa:	48 8b 7b 20	movq	32(%rbx), %rdi
100002eae:	e8 7d eb 03 00	callq	0x100041a30 ## symbol stub for: _free
100002eb3:	48 89 df	movq	%rbx, %rdi
100002eb6:	e8 75 eb 03 00	callq	0x100041a30 ## symbol stub for: _free
100002ebb:	49 8b 9e 88 02 00 00	movq	648(%r14), %rbx
100002ec2:	48 85 db	testq	%rbx, %rbx
100002ec5:	75 c4	jne	0x100002e8b
100002ec7:	eb 1c	jmp	0x100002ee5
100002ec9:	48 8b 07	movq	(%rdi), %rax
100002ecc:	48 85 c0	testq	%rax, %rax
100002ecf:	74 08	je	0x100002ed9
100002ed1:	48 8b 4f 08	movq	8(%rdi), %rcx
100002ed5:	48 89 48 08	movq	%rcx, 8(%rax)
100002ed9:	48 8b 4f 08	movq	8(%rdi), %rcx
100002edd:	48 89 01	movq	%rax, (%rcx)
100002ee0:	e8 4b eb 03 00	callq	0x100041a30 ## symbol stub for: _free
100002ee5:	49 8b be 90 02 00 00	movq	656(%r14), %rdi
100002eec:	48 85 ff	testq	%rdi, %rdi
100002eef:	75 d8	jne	0x100002ec9
100002ef1:	49 8b be f0 04 00 00	movq	1264(%r14), %rdi
100002ef8:	48 85 ff	testq	%rdi, %rdi
100002efb:	74 05	je	0x100002f02
100002efd:	e8 fa f1 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002f02:	49 8b be a8 03 00 00	movq	936(%r14), %rdi
100002f09:	48 85 ff	testq	%rdi, %rdi
100002f0c:	74 05	je	0x100002f13
100002f0e:	e8 e9 f1 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100002f13:	41 8b b6 04 05 00 00	movl	1284(%r14), %esi
100002f1a:	8d 46 01	leal	1(%rsi), %eax
100002f1d:	83 f8 02	cmpl	$2, %eax
100002f20:	72 19	jb	0x100002f3b
100002f22:	48 8b 05 7f 52 05 00	movq	348799(%rip), %rax ## literal pool symbol address: _mach_task_self_
100002f29:	8b 38	movl	(%rax), %edi
100002f2b:	31 d2	xorl	%edx, %edx
100002f2d:	b9 ff ff ff ff	movl	$4294967295, %ecx
100002f32:	e8 4f ec 03 00	callq	0x100041b86 ## symbol stub for: _mach_port_mod_refs
100002f37:	85 c0	testl	%eax, %eax
100002f39:	75 25	jne	0x100002f60
100002f3b:	4c 89 f7	movq	%r14, %rdi
100002f3e:	5b	popq	%rbx
100002f3f:	41 5e	popq	%r14
100002f41:	5d	popq	%rbp
100002f42:	e9 7f fa 02 00	jmp	0x1000329c6
100002f47:	e8 e5 bf 03 00	callq	0x10003ef31
100002f4c:	e8 cb bf 03 00	callq	0x10003ef1c
100002f51:	e8 b1 bf 03 00	callq	0x10003ef07
100002f56:	e8 97 bf 03 00	callq	0x10003eef2
100002f5b:	e8 78 bf 03 00	callq	0x10003eed8
100002f60:	89 c7	movl	%eax, %edi
100002f62:	e8 5b bf 03 00	callq	0x10003eec2
100002f67:	48 8d 3d 2b 08 04 00	leaq	264235(%rip), %rdi ## literal pool for: "service disposal while still in list"
100002f6e:	eb 10	jmp	0x100002f80
100002f70:	48 8d 3d 47 08 04 00	leaq	264263(%rip), %rdi ## literal pool for: "service disposal while in parent instance list"
100002f77:	eb 07	jmp	0x100002f80
100002f79:	48 8d 3d fa 07 04 00	leaq	264186(%rip), %rdi ## literal pool for: "deallocation of active service"
100002f80:	31 c0	xorl	%eax, %eax
100002f82:	e8 8b 14 03 00	callq	0x100034412
100002f87:	49 81 c6 18 05 00 00	addq	$1304, %r14
100002f8e:	48 8d 3d 58 08 04 00	leaq	264280(%rip), %rdi ## literal pool for: "Service: %s has leaked pended requests"
100002f95:	4c 89 f6	movq	%r14, %rsi
100002f98:	31 c0	xorl	%eax, %eax
100002f9a:	e8 73 14 03 00	callq	0x100034412
100002f9f:	55	pushq	%rbp
100002fa0:	48 89 e5	movq	%rsp, %rbp
100002fa3:	53	pushq	%rbx
100002fa4:	50	pushq	%rax
100002fa5:	48 89 fb	movq	%rdi, %rbx
100002fa8:	48 8b bf b0 02 00 00	movq	688(%rdi), %rdi
100002faf:	48 85 ff	testq	%rdi, %rdi
100002fb2:	74 26	je	0x100002fda
100002fb4:	48 89 fe	movq	%rdi, %rsi
100002fb7:	e8 ba e9 03 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100002fbc:	48 8b bb b0 02 00 00	movq	688(%rbx), %rdi
100002fc3:	e8 b4 e9 03 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100002fc8:	48 c7 83 b0 02 00 00 00 00 00 00	movq	$0, 688(%rbx)
100002fd3:	48 83 c4 08	addq	$8, %rsp
100002fd7:	5b	popq	%rbx
100002fd8:	5d	popq	%rbp
100002fd9:	c3	retq
100002fda:	e8 67 bf 03 00	callq	0x10003ef46
100002fdf:	55	pushq	%rbp
100002fe0:	48 89 e5	movq	%rsp, %rbp
100002fe3:	53	pushq	%rbx
100002fe4:	50	pushq	%rax
100002fe5:	48 89 fb	movq	%rdi, %rbx
100002fe8:	48 8b bf b8 02 00 00	movq	696(%rdi), %rdi
100002fef:	48 89 fe	movq	%rdi, %rsi
100002ff2:	e8 7f e9 03 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100002ff7:	48 8b bb b8 02 00 00	movq	696(%rbx), %rdi
100002ffe:	e8 79 e9 03 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100003003:	48 c7 83 b8 02 00 00 00 00 00 00	movq	$0, 696(%rbx)
10000300e:	48 83 c4 08	addq	$8, %rsp
100003012:	5b	popq	%rbx
100003013:	5d	popq	%rbp
100003014:	c3	retq
100003015:	55	pushq	%rbp
100003016:	48 89 e5	movq	%rsp, %rbp
100003019:	41 56	pushq	%r14
10000301b:	53	pushq	%rbx
10000301c:	48 89 f3	movq	%rsi, %rbx
10000301f:	49 89 fe	movq	%rdi, %r14
100003022:	66 ff 8f 88 03 00 00	decw	904(%rdi)
100003029:	48 8d 7e 18	leaq	24(%rsi), %rdi
10000302d:	e8 24 ee 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100003032:	48 f7 d0	notq	%rax
100003035:	49 01 86 50 02 00 00	addq	%rax, 592(%r14)
10000303c:	48 8b 03	movq	(%rbx), %rax
10000303f:	48 85 c0	testq	%rax, %rax
100003042:	74 08	je	0x10000304c
100003044:	48 8b 4b 08	movq	8(%rbx), %rcx
100003048:	48 89 48 08	movq	%rcx, 8(%rax)
10000304c:	48 8b 4b 08	movq	8(%rbx), %rcx
100003050:	48 89 01	movq	%rax, (%rcx)
100003053:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100003057:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
10000305b:	48 89 df	movq	%rbx, %rdi
10000305e:	5b	popq	%rbx
10000305f:	41 5e	popq	%r14
100003061:	5d	popq	%rbp
100003062:	e9 0b fb 00 00	jmp	0x100012b72
100003067:	55	pushq	%rbp
100003068:	48 89 e5	movq	%rsp, %rbp
10000306b:	41 56	pushq	%r14
10000306d:	53	pushq	%rbx
10000306e:	48 83 ec 10	subq	$16, %rsp
100003072:	49 89 f6	movq	%rsi, %r14
100003075:	48 89 fb	movq	%rdi, %rbx
100003078:	48 8d 45 e0	leaq	-32(%rbp), %rax
10000307c:	48 c7 00 00 00 00 00	movq	$0, (%rax)
100003083:	4c 8d 45 ef	leaq	-17(%rbp), %r8
100003087:	41 c6 00 00	movb	$0, (%r8)
10000308b:	48 89 f7	movq	%rsi, %rdi
10000308e:	48 89 d6	movq	%rdx, %rsi
100003091:	48 89 c2	movq	%rax, %rdx
100003094:	e8 e7 f8 00 00	callq	0x100012980
100003099:	48 85 c0	testq	%rax, %rax
10000309c:	74 3d	je	0x1000030db
10000309e:	48 8d 8b 80 03 00 00	leaq	896(%rbx), %rcx
1000030a5:	48 8b 93 80 03 00 00	movq	896(%rbx), %rdx
1000030ac:	48 89 10	movq	%rdx, (%rax)
1000030af:	48 85 d2	testq	%rdx, %rdx
1000030b2:	74 04	je	0x1000030b8
1000030b4:	48 89 42 08	movq	%rax, 8(%rdx)
1000030b8:	48 89 83 80 03 00 00	movq	%rax, 896(%rbx)
1000030bf:	48 89 48 08	movq	%rcx, 8(%rax)
1000030c3:	66 ff 83 88 03 00 00	incw	904(%rbx)
1000030ca:	48 8b 4d e0	movq	-32(%rbp), %rcx
1000030ce:	48 01 8b 50 02 00 00	addq	%rcx, 592(%rbx)
1000030d5:	48 89 58 10	movq	%rbx, 16(%rax)
1000030d9:	eb 1f	jmp	0x1000030fa
1000030db:	80 7d ef 00	cmpb	$0, -17(%rbp)
1000030df:	74 19	je	0x1000030fa
1000030e1:	48 8d 15 2c 07 04 00	leaq	263980(%rip), %rdx ## literal pool for: "Service tried to set environment variable with reserved name: %s"
1000030e8:	48 89 df	movq	%rbx, %rdi
1000030eb:	be 03 00 00 00	movl	$3, %esi
1000030f0:	4c 89 f1	movq	%r14, %rcx
1000030f3:	31 c0	xorl	%eax, %eax
1000030f5:	e8 c0 2e 01 00	callq	0x100015fba
1000030fa:	48 83 c4 10	addq	$16, %rsp
1000030fe:	5b	popq	%rbx
1000030ff:	41 5e	popq	%r14
100003101:	5d	popq	%rbp
100003102:	c3	retq
100003103:	55	pushq	%rbp
100003104:	48 89 e5	movq	%rsp, %rbp
100003107:	41 56	pushq	%r14
100003109:	53	pushq	%rbx
10000310a:	48 89 f3	movq	%rsi, %rbx
10000310d:	49 89 fe	movq	%rdi, %r14
100003110:	48 8d 35 3e 07 04 00	leaq	263998(%rip), %rsi ## literal pool for: "Interactive"
100003117:	48 89 df	movq	%rbx, %rdi
10000311a:	e8 01 ed 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000311f:	85 c0	testl	%eax, %eax
100003121:	0f 84 c7 00 00 00	je	0x1000031ee
100003127:	48 8d 35 33 07 04 00	leaq	263987(%rip), %rsi ## literal pool for: "Adaptive"
10000312e:	48 89 df	movq	%rbx, %rdi
100003131:	e8 ea ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100003136:	85 c0	testl	%eax, %eax
100003138:	0f 84 bd 00 00 00	je	0x1000031fb
10000313e:	48 8d 35 25 07 04 00	leaq	263973(%rip), %rsi ## literal pool for: "Standard"
100003145:	48 89 df	movq	%rbx, %rdi
100003148:	e8 d3 ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000314d:	85 c0	testl	%eax, %eax
10000314f:	0f 84 b3 00 00 00	je	0x100003208
100003155:	48 8d 35 17 07 04 00	leaq	263959(%rip), %rsi ## literal pool for: "Background"
10000315c:	48 89 df	movq	%rbx, %rdi
10000315f:	e8 bc ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100003164:	85 c0	testl	%eax, %eax
100003166:	0f 84 a9 00 00 00	je	0x100003215
10000316c:	48 8d 35 0b 07 04 00	leaq	263947(%rip), %rsi ## literal pool for: "SystemApp"
100003173:	48 89 df	movq	%rbx, %rdi
100003176:	e8 a5 ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000317b:	85 c0	testl	%eax, %eax
10000317d:	0f 84 9f 00 00 00	je	0x100003222
100003183:	48 8d 35 fe 06 04 00	leaq	263934(%rip), %rsi ## literal pool for: "App"
10000318a:	48 89 df	movq	%rbx, %rdi
10000318d:	e8 8e ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100003192:	85 c0	testl	%eax, %eax
100003194:	0f 84 9d 00 00 00	je	0x100003237
10000319a:	48 8d 35 eb 06 04 00	leaq	263915(%rip), %rsi ## literal pool for: "_AdaptiveUtility"
1000031a1:	48 89 df	movq	%rbx, %rdi
1000031a4:	e8 77 ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000031a9:	85 c0	testl	%eax, %eax
1000031ab:	0f 84 9b 00 00 00	je	0x10000324c
1000031b1:	48 8d 35 e5 06 04 00	leaq	263909(%rip), %rsi ## literal pool for: "Driver"
1000031b8:	48 89 df	movq	%rbx, %rdi
1000031bb:	e8 60 ec 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000031c0:	85 c0	testl	%eax, %eax
1000031c2:	0f 84 9c 00 00 00	je	0x100003264
1000031c8:	48 8d 15 d5 06 04 00	leaq	263893(%rip), %rdx ## literal pool for: "Unknown ProcessType: %s"
1000031cf:	4c 89 f7	movq	%r14, %rdi
1000031d2:	be 04 00 00 00	movl	$4, %esi
1000031d7:	48 89 d9	movq	%rbx, %rcx
1000031da:	31 c0	xorl	%eax, %eax
1000031dc:	e8 d9 2d 01 00	callq	0x100015fba
1000031e1:	41 80 8e 0d 05 00 00 01	orb	$1, 1293(%r14)
1000031e9:	e9 81 00 00 00	jmp	0x10000326f
1000031ee:	41 c7 86 20 03 00 00 00 04 00 00	movl	$1024, 800(%r14)
1000031f9:	eb 74	jmp	0x10000326f
1000031fb:	41 c7 86 20 03 00 00 00 06 00 00	movl	$1536, 800(%r14)
100003206:	eb 67	jmp	0x10000326f
100003208:	41 c7 86 20 03 00 00 00 03 00 00	movl	$768, 800(%r14)
100003213:	eb 5a	jmp	0x10000326f
100003215:	41 c7 86 20 03 00 00 00 05 00 00	movl	$1280, 800(%r14)
100003220:	eb 4d	jmp	0x10000326f
100003222:	41 c7 86 20 03 00 00 00 01 00 00	movl	$256, 800(%r14)
10000322d:	41 80 8e 0e 05 00 00 30	orb	$48, 1294(%r14)
100003235:	eb 38	jmp	0x10000326f
100003237:	41 c7 86 20 03 00 00 00 01 00 00	movl	$256, 800(%r14)
100003242:	41 80 8e 0e 05 00 00 10	orb	$16, 1294(%r14)
10000324a:	eb 23	jmp	0x10000326f
10000324c:	41 c7 86 20 03 00 00 00 06 00 00	movl	$1536, 800(%r14)
100003257:	41 c7 86 30 03 00 00 11 00 00 00	movl	$17, 816(%r14)
100003262:	eb 0b	jmp	0x10000326f
100003264:	41 c7 86 20 03 00 00 00 07 00 00	movl	$1792, 800(%r14)
10000326f:	5b	popq	%rbx
100003270:	41 5e	popq	%r14
100003272:	5d	popq	%rbp
100003273:	c3	retq
100003274:	55	pushq	%rbp
100003275:	48 89 e5	movq	%rsp, %rbp
100003278:	41 56	pushq	%r14
10000327a:	53	pushq	%rbx
10000327b:	49 89 f6	movq	%rsi, %r14
10000327e:	48 89 fb	movq	%rdi, %rbx
100003281:	48 8b bf 28 03 00 00	movq	808(%rdi), %rdi
100003288:	48 85 ff	testq	%rdi, %rdi
10000328b:	74 18	je	0x1000032a5
10000328d:	e8 3e bc 00 00	callq	0x10000eed0
100003292:	48 29 83 50 02 00 00	subq	%rax, 592(%rbx)
100003299:	48 8b bb 28 03 00 00	movq	808(%rbx), %rdi
1000032a0:	e8 8b e7 03 00	callq	0x100041a30 ## symbol stub for: _free
1000032a5:	4c 89 f7	movq	%r14, %rdi
1000032a8:	e8 0b e7 ff ff	callq	0x1000019b8
1000032ad:	48 89 83 28 03 00 00	movq	%rax, 808(%rbx)
1000032b4:	4c 89 f7	movq	%r14, %rdi
1000032b7:	e8 14 bc 00 00	callq	0x10000eed0
1000032bc:	48 01 83 50 02 00 00	addq	%rax, 592(%rbx)
1000032c3:	5b	popq	%rbx
1000032c4:	41 5e	popq	%r14
1000032c6:	5d	popq	%rbp
1000032c7:	c3	retq
1000032c8:	55	pushq	%rbp
1000032c9:	48 89 e5	movq	%rsp, %rbp
1000032cc:	41 57	pushq	%r15
1000032ce:	41 56	pushq	%r14
1000032d0:	53	pushq	%rbx
1000032d1:	50	pushq	%rax
1000032d2:	48 89 fb	movq	%rdi, %rbx
1000032d5:	8b b7 18 01 00 00	movl	280(%rdi), %esi
1000032db:	85 f6	testl	%esi, %esi
1000032dd:	0f 85 8a 00 00 00	jne	0x10000336d
1000032e3:	48 0f ba a3 0d 05 00 00 2c	btq	$44, 1293(%rbx)
1000032ec:	72 05	jb	0x1000032f3
1000032ee:	45 31 ff	xorl	%r15d, %r15d
1000032f1:	eb 6c	jmp	0x10000335f
1000032f3:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000032fa:	4c 8d bb 18 05 00 00	leaq	1304(%rbx), %r15
100003301:	4c 89 fe	movq	%r15, %rsi
100003304:	e8 5c b2 00 00	callq	0x10000e565
100003309:	49 89 c6	movq	%rax, %r14
10000330c:	4c 8b 8b 30 02 00 00	movq	560(%rbx), %r9
100003313:	48 8b 15 b6 4d 05 00	movq	347574(%rip), %rdx ## literal pool symbol address: __xpc_bool_true
10000331a:	48 89 df	movq	%rbx, %rdi
10000331d:	4c 89 fe	movq	%r15, %rsi
100003320:	31 c9	xorl	%ecx, %ecx
100003322:	49 89 c0	movq	%rax, %r8
100003325:	ff 93 18 02 00 00	callq	*536(%rbx)
10000332b:	49 89 c7	movq	%rax, %r15
10000332e:	48 85 c0	testq	%rax, %rax
100003331:	75 1d	jne	0x100003350
100003333:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
10000333a:	48 8d 15 bd 05 04 00	leaq	263613(%rip), %rdx ## literal pool for: "Failed to create the implicit endpoint"
100003341:	4c 89 f7	movq	%r14, %rdi
100003344:	be 03 00 00 00	movl	$3, %esi
100003349:	31 c0	xorl	%eax, %eax
10000334b:	e8 f5 b2 00 00	callq	0x10000e645
100003350:	4c 89 f7	movq	%r14, %rdi
100003353:	e8 bd b2 00 00	callq	0x10000e615
100003358:	80 a3 12 05 00 00 ef	andb	$-17, 1298(%rbx)
10000335f:	4c 89 f8	movq	%r15, %rax
100003362:	48 83 c4 08	addq	$8, %rsp
100003366:	5b	popq	%rbx
100003367:	41 5e	popq	%r14
100003369:	41 5f	popq	%r15
10000336b:	5d	popq	%rbp
10000336c:	c3	retq
10000336d:	48 81 c3 18 05 00 00	addq	$1304, %rbx
100003374:	48 8d 3d 41 05 04 00	leaq	263489(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10000337b:	48 89 da	movq	%rbx, %rdx
10000337e:	31 c0	xorl	%eax, %eax
100003380:	e8 8d 10 03 00	callq	0x100034412
100003385:	90	nop
100003386:	90	nop
100003387:	90	nop
100003388:	55	pushq	%rbp
100003389:	48 89 e5	movq	%rsp, %rbp
10000338c:	41 57	pushq	%r15
10000338e:	41 56	pushq	%r14
100003390:	41 55	pushq	%r13
100003392:	41 54	pushq	%r12
100003394:	53	pushq	%rbx
100003395:	48 81 ec 78 04 00 00	subq	$1144, %rsp
10000339c:	4c 89 8d 90 fb ff ff	movq	%r9, -1136(%rbp)
1000033a3:	4d 89 c7	movq	%r8, %r15
1000033a6:	48 89 cb	movq	%rcx, %rbx
1000033a9:	49 89 d5	movq	%rdx, %r13
1000033ac:	49 89 f6	movq	%rsi, %r14
1000033af:	49 89 fc	movq	%rdi, %r12
1000033b2:	48 8b 05 6f 4c 05 00	movq	347247(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000033b9:	48 8b 00	movq	(%rax), %rax
1000033bc:	48 89 45 d0	movq	%rax, -48(%rbp)
1000033c0:	48 89 f7	movq	%rsi, %rdi
1000033c3:	e8 fe ec 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000033c8:	48 3b 05 31 4d 05 00	cmpq	347441(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000033cf:	74 27	je	0x1000033f8
1000033d1:	48 8d 15 a1 07 04 00	leaq	264097(%rip), %rdx ## literal pool for: "Root node of launchd.plist is not a dictionary."
1000033d8:	31 db	xorl	%ebx, %ebx
1000033da:	4c 89 e7	movq	%r12, %rdi
1000033dd:	be 03 00 00 00	movl	$3, %esi
1000033e2:	31 c0	xorl	%eax, %eax
1000033e4:	e8 40 d0 01 00	callq	0x100020429
1000033e9:	48 8b 45 10	movq	16(%rbp), %rax
1000033ed:	c7 00 6d 00 00 00	movl	$109, (%rax)
1000033f3:	e9 88 04 00 00	jmp	0x100003880
1000033f8:	48 89 9d 98 fb ff ff	movq	%rbx, -1128(%rbp)
1000033ff:	4c 89 a5 b0 fb ff ff	movq	%r12, -1104(%rbp)
100003406:	4c 89 bd 68 fb ff ff	movq	%r15, -1176(%rbp)
10000340d:	48 8d 35 c0 05 04 00	leaq	263616(%rip), %rsi ## literal pool for: "Label"
100003414:	4c 89 f7	movq	%r14, %rdi
100003417:	e8 3e ec 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000341c:	48 85 c0	testq	%rax, %rax
10000341f:	0f 84 b2 01 00 00	je	0x1000035d7
100003425:	48 8b 9d b0 fb ff ff	movq	-1104(%rbp), %rbx
10000342c:	48 89 df	movq	%rbx, %rdi
10000342f:	48 89 c6	movq	%rax, %rsi
100003432:	e8 2e b1 00 00	callq	0x10000e565
100003437:	49 89 c7	movq	%rax, %r15
10000343a:	48 8d 35 93 05 04 00	leaq	263571(%rip), %rsi ## literal pool for: "Label"
100003441:	4c 89 f7	movq	%r14, %rdi
100003444:	e8 11 ec 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003449:	48 85 c0	testq	%rax, %rax
10000344c:	0f 84 b0 01 00 00	je	0x100003602
100003452:	4c 89 bd b8 fb ff ff	movq	%r15, -1096(%rbp)
100003459:	49 89 c4	movq	%rax, %r12
10000345c:	48 8d 35 be 12 04 00	leaq	266942(%rip), %rsi ## literal pool for: "Disabled"
100003463:	4c 89 f7	movq	%r14, %rdi
100003466:	e8 cb eb 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10000346b:	41 89 c7	movl	%eax, %r15d
10000346e:	48 8d 35 b5 12 04 00	leaq	266933(%rip), %rsi ## literal pool for: "ForceEnableHack"
100003475:	4c 89 f7	movq	%r14, %rdi
100003478:	e8 b9 eb 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10000347d:	88 85 c0 fb ff ff	movb	%al, -1088(%rbp)
100003483:	48 89 df	movq	%rbx, %rdi
100003486:	4c 89 a5 a0 fb ff ff	movq	%r12, -1120(%rbp)
10000348d:	4c 89 e6	movq	%r12, %rsi
100003490:	e8 68 7e 02 00	callq	0x10002b2fd
100003495:	49 89 c4	movq	%rax, %r12
100003498:	48 8d 35 9b 12 04 00	leaq	266907(%rip), %rsi ## literal pool for: "_Protected"
10000349f:	4c 89 b5 a8 fb ff ff	movq	%r14, -1112(%rbp)
1000034a6:	4c 89 f7	movq	%r14, %rdi
1000034a9:	e8 88 eb 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000034ae:	88 85 cf fb ff ff	movb	%al, -1073(%rbp)
1000034b4:	84 c0	testb	%al, %al
1000034b6:	74 19	je	0x1000034d1
1000034b8:	be 1a 00 00 00	movl	$26, %esi
1000034bd:	48 8b bd 98 fb ff ff	movq	-1128(%rbp), %rdi
1000034c4:	e8 ed 84 00 00	callq	0x10000b9b6
1000034c9:	84 c0	testb	%al, %al
1000034cb:	0f 84 58 01 00 00	je	0x100003629
1000034d1:	4c 89 ad 88 fb ff ff	movq	%r13, -1144(%rbp)
1000034d8:	31 c0	xorl	%eax, %eax
1000034da:	4c 3b 25 ef 4b 05 00	cmpq	347119(%rip), %r12 ## literal pool symbol address: __xpc_bool_true
1000034e1:	0f 94 c0	sete	%al
1000034e4:	4d 85 e4	testq	%r12, %r12
1000034e7:	44 88 bd 80 fb ff ff	movb	%r15b, -1152(%rbp)
1000034ee:	41 0f b6 df	movzbl	%r15b, %ebx
1000034f2:	0f 44 c3	cmovel	%ebx, %eax
1000034f5:	48 8b 95 90 fb ff ff	movq	-1136(%rbp), %rdx
1000034fc:	f6 c2 20	testb	$32, %dl
1000034ff:	41 0f 94 c5	sete	%r13b
100003503:	41 20 c5	andb	%al, %r13b
100003506:	41 89 d7	movl	%edx, %r15d
100003509:	41 83 e7 02	andl	$2, %r15d
10000350d:	41 d1 ef	shrl	%r15d
100003510:	44 0a bd c0 fb ff ff	orb	-1088(%rbp), %r15b
100003517:	4c 8d 35 72 f1 05 00	leaq	389490(%rip), %r14
10000351e:	41 8a 0e	movb	(%r14), %cl
100003521:	31 c0	xorl	%eax, %eax
100003523:	84 c9	testb	%cl, %cl
100003525:	74 1c	je	0x100003543
100003527:	81 e2 00 01 00 00	andl	$256, %edx
10000352d:	48 85 d2	testq	%rdx, %rdx
100003530:	74 11	je	0x100003543
100003532:	48 8b bd a0 fb ff ff	movq	-1120(%rbp), %rdi
100003539:	e8 e5 98 03 00	callq	0x10003ce23
10000353e:	34 01	xorb	$1, %al
100003540:	41 8a 0e	movb	(%r14), %cl
100003543:	80 bd cf fb ff ff 00	cmpb	$0, -1073(%rbp)
10000354a:	0f b6 c0	movzbl	%al, %eax
10000354d:	ba 01 00 00 00	movl	$1, %edx
100003552:	0f 44 d0	cmovel	%eax, %edx
100003555:	84 c9	testb	%cl, %cl
100003557:	0f 44 d0	cmovel	%eax, %edx
10000355a:	84 d2	testb	%dl, %dl
10000355c:	41 0f 94 c6	sete	%r14b
100003560:	45 20 fe	andb	%r15b, %r14b
100003563:	41 0f b6 c5	movzbl	%r13b, %eax
100003567:	84 d2	testb	%dl, %dl
100003569:	0f 44 d8	cmovel	%eax, %ebx
10000356c:	0f 84 e5 00 00 00	je	0x100003657
100003572:	4d 85 e4	testq	%r12, %r12
100003575:	4c 8b ad b8 fb ff ff	movq	-1096(%rbp), %r13
10000357c:	4c 8b bd b0 fb ff ff	movq	-1104(%rbp), %r15
100003583:	0f 84 dc 00 00 00	je	0x100003665
100003589:	4c 89 ff	movq	%r15, %rdi
10000358c:	48 8b b5 a0 fb ff ff	movq	-1120(%rbp), %rsi
100003593:	e8 cf 7d 02 00	callq	0x10002b367
100003598:	4c 3b 25 31 4b 05 00	cmpq	346929(%rip), %r12 ## literal pool symbol address: __xpc_bool_true
10000359f:	48 8d 05 f9 11 04 00	leaq	266745(%rip), %rax ## literal pool for: "enabled"
1000035a6:	48 8d 0d fa 11 04 00	leaq	266746(%rip), %rcx ## literal pool for: "disabled"
1000035ad:	48 0f 44 c8	cmoveq	%rax, %rcx
1000035b1:	48 8d 15 b8 11 04 00	leaq	266680(%rip), %rdx ## literal pool for: "Ignoring %s state due to rootless restrictions"
1000035b8:	45 31 f6	xorl	%r14d, %r14d
1000035bb:	4c 89 ef	movq	%r13, %rdi
1000035be:	be 03 00 00 00	movl	$3, %esi
1000035c3:	31 c0	xorl	%eax, %eax
1000035c5:	e8 7b b0 00 00	callq	0x10000e645
1000035ca:	8a 85 80 fb ff ff	movb	-1152(%rbp), %al
1000035d0:	89 c3	movl	%eax, %ebx
1000035d2:	e9 8e 00 00 00	jmp	0x100003665
1000035d7:	48 8d 15 cb 05 04 00	leaq	263627(%rip), %rdx ## literal pool for: "Service plist does not specify a label."
1000035de:	31 db	xorl	%ebx, %ebx
1000035e0:	48 8b bd b0 fb ff ff	movq	-1104(%rbp), %rdi
1000035e7:	be 03 00 00 00	movl	$3, %esi
1000035ec:	31 c0	xorl	%eax, %eax
1000035ee:	e8 36 ce 01 00	callq	0x100020429
1000035f3:	48 8b 45 10	movq	16(%rbp), %rax
1000035f7:	c7 00 6e 00 00 00	movl	$110, (%rax)
1000035fd:	e9 7e 02 00 00	jmp	0x100003880
100003602:	48 8d 15 a0 05 04 00	leaq	263584(%rip), %rdx ## literal pool for: "Service plist does not specify a label."
100003609:	31 db	xorl	%ebx, %ebx
10000360b:	4c 89 ff	movq	%r15, %rdi
10000360e:	be 03 00 00 00	movl	$3, %esi
100003613:	31 c0	xorl	%eax, %eax
100003615:	e8 2b b0 00 00	callq	0x10000e645
10000361a:	48 8b 45 10	movq	16(%rbp), %rax
10000361e:	c7 00 6e 00 00 00	movl	$110, (%rax)
100003624:	e9 4f 02 00 00	jmp	0x100003878
100003629:	48 8d 15 15 11 04 00	leaq	266517(%rip), %rdx ## literal pool for: "Setting _Protected requires an entitlement"
100003630:	31 db	xorl	%ebx, %ebx
100003632:	4c 8b bd b8 fb ff ff	movq	-1096(%rbp), %r15
100003639:	4c 89 ff	movq	%r15, %rdi
10000363c:	be 03 00 00 00	movl	$3, %esi
100003641:	31 c0	xorl	%eax, %eax
100003643:	e8 fd af 00 00	callq	0x10000e645
100003648:	48 8b 45 10	movq	16(%rbp), %rax
10000364c:	c7 00 90 00 00 00	movl	$144, (%rax)
100003652:	e9 21 02 00 00	jmp	0x100003878
100003657:	4c 8b ad b8 fb ff ff	movq	-1096(%rbp), %r13
10000365e:	4c 8b bd b0 fb ff ff	movq	-1104(%rbp), %r15
100003665:	84 db	testb	%bl, %bl
100003667:	74 14	je	0x10000367d
100003669:	45 84 f6	testb	%r14b, %r14b
10000366c:	75 0f	jne	0x10000367d
10000366e:	48 8b 45 10	movq	16(%rbp), %rax
100003672:	c7 00 77 00 00 00	movl	$119, (%rax)
100003678:	e9 f6 01 00 00	jmp	0x100003873
10000367d:	45 84 f6	testb	%r14b, %r14b
100003680:	74 14	je	0x100003696
100003682:	4c 89 ff	movq	%r15, %rdi
100003685:	48 8b b5 a0 fb ff ff	movq	-1120(%rbp), %rsi
10000368c:	ba 02 00 00 00	movl	$2, %edx
100003691:	e8 15 0d 02 00	callq	0x1000243ab
100003696:	48 8d 35 13 11 04 00	leaq	266515(%rip), %rsi ## literal pool for: "LimitLoadToSessionType"
10000369d:	4c 8b a5 a8 fb ff ff	movq	-1112(%rbp), %r12
1000036a4:	4c 89 e7	movq	%r12, %rdi
1000036a7:	e8 c0 e9 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000036ac:	f6 85 90 fb ff ff 08	testb	$8, -1136(%rbp)
1000036b3:	4c 8b 75 10	movq	16(%rbp), %r14
1000036b7:	0f 85 97 00 00 00	jne	0x100003754
1000036bd:	49 89 c7	movq	%rax, %r15
1000036c0:	48 85 c0	testq	%rax, %rax
1000036c3:	74 6c	je	0x100003731
1000036c5:	4c 89 ff	movq	%r15, %rdi
1000036c8:	e8 f9 e9 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000036cd:	48 3b 05 54 4a 05 00	cmpq	346708(%rip), %rax ## literal pool symbol address: __xpc_type_string
1000036d4:	74 5f	je	0x100003735
1000036d6:	4c 89 ff	movq	%r15, %rdi
1000036d9:	e8 e8 e9 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000036de:	48 3b 05 f3 49 05 00	cmpq	346611(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000036e5:	0f 85 2d 01 00 00	jne	0x100003818
1000036eb:	4c 89 ff	movq	%r15, %rdi
1000036ee:	e8 59 e8 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000036f3:	48 85 c0	testq	%rax, %rax
1000036f6:	0f 84 1c 01 00 00	je	0x100003818
1000036fc:	31 db	xorl	%ebx, %ebx
1000036fe:	4c 89 ff	movq	%r15, %rdi
100003701:	48 89 de	movq	%rbx, %rsi
100003704:	e8 49 e8 03 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100003709:	48 8b bd b0 fb ff ff	movq	-1104(%rbp), %rdi
100003710:	48 89 c6	movq	%rax, %rsi
100003713:	e8 65 7a 02 00	callq	0x10002b17d
100003718:	84 c0	testb	%al, %al
10000371a:	75 38	jne	0x100003754
10000371c:	48 ff c3	incq	%rbx
10000371f:	4c 89 ff	movq	%r15, %rdi
100003722:	e8 25 e8 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100003727:	48 39 c3	cmpq	%rax, %rbx
10000372a:	72 d2	jb	0x1000036fe
10000372c:	e9 e7 00 00 00	jmp	0x100003818
100003731:	31 f6	xorl	%esi, %esi
100003733:	eb 0b	jmp	0x100003740
100003735:	4c 89 ff	movq	%r15, %rdi
100003738:	e8 e9 e9 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10000373d:	48 89 c6	movq	%rax, %rsi
100003740:	48 8b bd b0 fb ff ff	movq	-1104(%rbp), %rdi
100003747:	e8 31 7a 02 00	callq	0x10002b17d
10000374c:	84 c0	testb	%al, %al
10000374e:	0f 84 c4 00 00 00	je	0x100003818
100003754:	48 8d 35 6c 10 04 00	leaq	266348(%rip), %rsi ## literal pool for: "LimitLoadToHardware"
10000375b:	4c 89 e7	movq	%r12, %rdi
10000375e:	e8 09 e9 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003763:	48 85 c0	testq	%rax, %rax
100003766:	74 20	je	0x100003788
100003768:	48 89 c3	movq	%rax, %rbx
10000376b:	48 89 c7	movq	%rax, %rdi
10000376e:	e8 53 e9 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100003773:	48 3b 05 86 49 05 00	cmpq	346502(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000377a:	75 0c	jne	0x100003788
10000377c:	48 89 df	movq	%rbx, %rdi
10000377f:	e8 ec 32 00 00	callq	0x100006a70
100003784:	84 c0	testb	%al, %al
100003786:	74 34	je	0x1000037bc
100003788:	48 8d 35 4c 10 04 00	leaq	266316(%rip), %rsi ## literal pool for: "LimitLoadFromHardware"
10000378f:	4c 89 e7	movq	%r12, %rdi
100003792:	e8 d5 e8 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003797:	48 85 c0	testq	%rax, %rax
10000379a:	74 2c	je	0x1000037c8
10000379c:	48 89 c3	movq	%rax, %rbx
10000379f:	48 89 c7	movq	%rax, %rdi
1000037a2:	e8 1f e9 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000037a7:	48 3b 05 52 49 05 00	cmpq	346450(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000037ae:	75 18	jne	0x1000037c8
1000037b0:	48 89 df	movq	%rbx, %rdi
1000037b3:	e8 b8 32 00 00	callq	0x100006a70
1000037b8:	84 c0	testb	%al, %al
1000037ba:	74 0c	je	0x1000037c8
1000037bc:	41 c7 06 8a 00 00 00	movl	$138, (%r14)
1000037c3:	e9 ab 00 00 00	jmp	0x100003873
1000037c8:	48 8d 35 22 10 04 00	leaq	266274(%rip), %rsi ## literal pool for: "_LimitLoadToVariant"
1000037cf:	4c 89 e7	movq	%r12, %rdi
1000037d2:	e8 95 e8 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000037d7:	48 85 c0	testq	%rax, %rax
1000037da:	74 10	je	0x1000037ec
1000037dc:	48 89 c7	movq	%rax, %rdi
1000037df:	e8 0e 33 00 00	callq	0x100006af2
1000037e4:	84 c0	testb	%al, %al
1000037e6:	0f 84 80 00 00 00	je	0x10000386c
1000037ec:	48 8d 35 12 10 04 00	leaq	266258(%rip), %rsi ## literal pool for: "_LimitLoadFromVariant"
1000037f3:	4c 89 e7	movq	%r12, %rdi
1000037f6:	e8 71 e8 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000037fb:	48 85 c0	testq	%rax, %rax
1000037fe:	4d 89 ef	movq	%r13, %r15
100003801:	74 1e	je	0x100003821
100003803:	48 89 c7	movq	%rax, %rdi
100003806:	e8 e7 32 00 00	callq	0x100006af2
10000380b:	84 c0	testb	%al, %al
10000380d:	74 12	je	0x100003821
10000380f:	41 c7 06 9e 00 00 00	movl	$158, (%r14)
100003816:	eb 50	jmp	0x100003868
100003818:	41 c7 06 86 00 00 00	movl	$134, (%r14)
10000381f:	eb 52	jmp	0x100003873
100003821:	48 8d 35 f3 0f 04 00	leaq	266227(%rip), %rsi ## literal pool for: "_LimitLoadToBootMode"
100003828:	4c 89 e7	movq	%r12, %rdi
10000382b:	e8 3c e8 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003830:	48 85 c0	testq	%rax, %rax
100003833:	74 0c	je	0x100003841
100003835:	48 89 c7	movq	%rax, %rdi
100003838:	e8 5a 33 00 00	callq	0x100006b97
10000383d:	84 c0	testb	%al, %al
10000383f:	74 20	je	0x100003861
100003841:	48 8d 35 e8 0f 04 00	leaq	266216(%rip), %rsi ## literal pool for: "_LimitLoadFromBootMode"
100003848:	4c 89 e7	movq	%r12, %rdi
10000384b:	e8 1c e8 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003850:	48 85 c0	testq	%rax, %rax
100003853:	74 54	je	0x1000038a9
100003855:	48 89 c7	movq	%rax, %rdi
100003858:	e8 3a 33 00 00	callq	0x100006b97
10000385d:	84 c0	testb	%al, %al
10000385f:	74 48	je	0x1000038a9
100003861:	41 c7 06 98 00 00 00	movl	$152, (%r14)
100003868:	31 db	xorl	%ebx, %ebx
10000386a:	eb 0c	jmp	0x100003878
10000386c:	41 c7 06 9e 00 00 00	movl	$158, (%r14)
100003873:	31 db	xorl	%ebx, %ebx
100003875:	4d 89 ef	movq	%r13, %r15
100003878:	4c 89 ff	movq	%r15, %rdi
10000387b:	e8 95 ad 00 00	callq	0x10000e615
100003880:	48 8b 05 a1 47 05 00	movq	346017(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003887:	48 8b 00	movq	(%rax), %rax
10000388a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000388e:	0f 85 a5 08 00 00	jne	0x100004139
100003894:	48 89 d8	movq	%rbx, %rax
100003897:	48 81 c4 78 04 00 00	addq	$1144, %rsp
10000389e:	5b	popq	%rbx
10000389f:	41 5c	popq	%r12
1000038a1:	41 5d	popq	%r13
1000038a3:	41 5e	popq	%r14
1000038a5:	41 5f	popq	%r15
1000038a7:	5d	popq	%rbp
1000038a8:	c3	retq
1000038a9:	48 8d 35 97 0f 04 00	leaq	266135(%rip), %rsi ## literal pool for: "_LimitLoadToDeviceTree"
1000038b0:	4c 89 e7	movq	%r12, %rdi
1000038b3:	e8 b4 e7 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000038b8:	48 85 c0	testq	%rax, %rax
1000038bb:	74 21	je	0x1000038de
1000038bd:	48 8d 15 9a 0f 04 00	leaq	266138(%rip), %rdx ## literal pool for: "Service specifies _LimitLoadToDeviceTree which does not make sense for this launchd instance"
1000038c4:	31 db	xorl	%ebx, %ebx
1000038c6:	4c 89 ff	movq	%r15, %rdi
1000038c9:	be 03 00 00 00	movl	$3, %esi
1000038ce:	31 c0	xorl	%eax, %eax
1000038d0:	e8 70 ad 00 00	callq	0x10000e645
1000038d5:	41 c7 06 8a 00 00 00	movl	$138, (%r14)
1000038dc:	eb 9a	jmp	0x100003878
1000038de:	48 8d 35 d6 0f 04 00	leaq	266198(%rip), %rsi ## literal pool for: "_LimitLoadFromDeviceTree"
1000038e5:	4c 89 e7	movq	%r12, %rdi
1000038e8:	e8 7f e7 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000038ed:	48 85 c0	testq	%rax, %rax
1000038f0:	74 16	je	0x100003908
1000038f2:	48 8d 15 db 0f 04 00	leaq	266203(%rip), %rdx ## literal pool for: "Service specifies _LimitLoadFromDeviceTree which does not make sense for this launchd instance"
1000038f9:	4c 89 ff	movq	%r15, %rdi
1000038fc:	be 03 00 00 00	movl	$3, %esi
100003901:	31 c0	xorl	%eax, %eax
100003903:	e8 3d ad 00 00	callq	0x10000e645
100003908:	48 8d 05 dc ee 05 00	leaq	388828(%rip), %rax
10000390f:	80 38 00	cmpb	$0, (%rax)
100003912:	48 8b 9d b0 fb ff ff	movq	-1104(%rbp), %rbx
100003919:	74 17	je	0x100003932
10000391b:	48 8d 35 11 10 04 00	leaq	266257(%rip), %rsi ## literal pool for: "DisabledInSafeBoot"
100003922:	4c 89 e7	movq	%r12, %rdi
100003925:	e8 0c e7 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10000392a:	84 c0	testb	%al, %al
10000392c:	0f 85 88 00 00 00	jne	0x1000039ba
100003932:	48 8d 05 31 ee 05 00	leaq	388657(%rip), %rax
100003939:	80 38 00	cmpb	$0, (%rax)
10000393c:	74 13	je	0x100003951
10000393e:	48 8d 35 01 10 04 00	leaq	266241(%rip), %rsi ## literal pool for: "MinimalBootProfile"
100003945:	4c 89 e7	movq	%r12, %rdi
100003948:	e8 e9 e6 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10000394d:	84 c0	testb	%al, %al
10000394f:	74 69	je	0x1000039ba
100003951:	48 89 df	movq	%rbx, %rdi
100003954:	48 8b b5 a0 fb ff ff	movq	-1120(%rbp), %rsi
10000395b:	e8 c1 08 02 00	callq	0x100024221
100003960:	48 85 c0	testq	%rax, %rax
100003963:	74 61	je	0x1000039c6
100003965:	4c 8b b8 68 01 00 00	movq	360(%rax), %r15
10000396c:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100003973:	4c 89 fe	movq	%r15, %rsi
100003976:	e8 b1 e4 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000397b:	85 c0	testl	%eax, %eax
10000397d:	74 74	je	0x1000039f3
10000397f:	41 be 11 00 00 00	movl	$17, %r14d
100003985:	41 80 3f 2f	cmpb	$47, (%r15)
100003989:	75 6e	jne	0x1000039f9
10000398b:	4c 8b 8d 88 fb ff ff	movq	-1144(%rbp), %r9
100003992:	41 80 39 2f	cmpb	$47, (%r9)
100003996:	75 61	jne	0x1000039f9
100003998:	48 8d 15 ba 0f 04 00	leaq	266170(%rip), %rdx ## literal pool for: "Attempt to re-bootstrap service from different path, will use existing: service = %s, existing = %s, conflicting = %s"
10000399f:	48 89 df	movq	%rbx, %rdi
1000039a2:	be 04 00 00 00	movl	$4, %esi
1000039a7:	48 8b 8d a0 fb ff ff	movq	-1120(%rbp), %rcx
1000039ae:	4d 89 f8	movq	%r15, %r8
1000039b1:	31 c0	xorl	%eax, %eax
1000039b3:	e8 71 ca 01 00	callq	0x100020429
1000039b8:	eb 3f	jmp	0x1000039f9
1000039ba:	41 c7 06 98 00 00 00	movl	$152, (%r14)
1000039c1:	e9 ad fe ff ff	jmp	0x100003873
1000039c6:	48 89 df	movq	%rbx, %rdi
1000039c9:	e8 59 7a 02 00	callq	0x10002b427
1000039ce:	48 85 c0	testq	%rax, %rax
1000039d1:	74 32	je	0x100003a05
1000039d3:	48 89 c7	movq	%rax, %rdi
1000039d6:	48 8b b5 a0 fb ff ff	movq	-1120(%rbp), %rsi
1000039dd:	e8 3f 08 02 00	callq	0x100024221
1000039e2:	48 85 c0	testq	%rax, %rax
1000039e5:	74 1e	je	0x100003a05
1000039e7:	41 c7 06 11 00 00 00	movl	$17, (%r14)
1000039ee:	e9 80 fe ff ff	jmp	0x100003873
1000039f3:	41 be 25 00 00 00	movl	$37, %r14d
1000039f9:	48 8b 45 10	movq	16(%rbp), %rax
1000039fd:	44 89 30	movl	%r14d, (%rax)
100003a00:	e9 6e fe ff ff	jmp	0x100003873
100003a05:	48 8d 35 c8 ff 03 00	leaq	262088(%rip), %rsi ## literal pool for: "Label"
100003a0c:	4c 89 e7	movq	%r12, %rdi
100003a0f:	e8 46 e6 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003a14:	48 85 c0	testq	%rax, %rax
100003a17:	0f 84 21 07 00 00	je	0x10000413e
100003a1d:	49 89 c7	movq	%rax, %r15
100003a20:	48 8d 35 fe fe 03 00	leaq	261886(%rip), %rsi ## literal pool for: "Program"
100003a27:	4c 89 e7	movq	%r12, %rdi
100003a2a:	e8 2b e6 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003a2f:	48 89 c3	movq	%rax, %rbx
100003a32:	48 85 c0	testq	%rax, %rax
100003a35:	0f 84 c9 00 00 00	je	0x100003b04
100003a3b:	80 3b 2f	cmpb	$47, (%rbx)
100003a3e:	74 17	je	0x100003a57
100003a40:	48 8d 35 12 10 04 00	leaq	266258(%rip), %rsi ## literal pool for: "ResolveProgramIdentifier"
100003a47:	4c 89 e7	movq	%r12, %rdi
100003a4a:	e8 e7 e5 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100003a4f:	84 c0	testb	%al, %al
100003a51:	0f 84 e5 00 00 00	je	0x100003b3c
100003a57:	48 8d 35 cf fe 03 00	leaq	261839(%rip), %rsi ## literal pool for: "ProgramArguments"
100003a5e:	4c 89 e7	movq	%r12, %rdi
100003a61:	e8 06 e6 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003a66:	48 89 85 78 fb ff ff	movq	%rax, -1160(%rbp)
100003a6d:	4c 89 e7	movq	%r12, %rdi
100003a70:	48 89 9d 80 fb ff ff	movq	%rbx, -1152(%rbp)
100003a77:	48 89 9d c0 fb ff ff	movq	%rbx, -1088(%rbp)
100003a7e:	4c 89 bd 70 fb ff ff	movq	%r15, -1168(%rbp)
100003a85:	48 8d 35 b5 10 04 00	leaq	266421(%rip), %rsi ## literal pool for: "_AdjustProgramPath"
100003a8c:	e8 a5 e5 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100003a91:	84 c0	testb	%al, %al
100003a93:	0f 84 56 01 00 00	je	0x100003bef
100003a99:	48 8d 35 b4 10 04 00	leaq	266420(%rip), %rsi ## literal pool for: "/System/Library/PrivateFrameworks/MobileDevice.framework/Versions/A/Resources/usbmuxd"
100003aa0:	48 8b bd c0 fb ff ff	movq	-1088(%rbp), %rdi
100003aa7:	e8 80 e3 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100003aac:	85 c0	testl	%eax, %eax
100003aae:	0f 84 af 00 00 00	je	0x100003b63
100003ab4:	48 8d 35 70 11 04 00	leaq	266608(%rip), %rsi ## literal pool for: "/System/Library/PrivateFrameworks/MobileDevice.framework/Resources/MobileDeviceUpdater.app/Contents/MacOS/MobileDeviceUpdater"
100003abb:	48 8b bd c0 fb ff ff	movq	-1088(%rbp), %rdi
100003ac2:	e8 65 e3 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100003ac7:	85 c0	testl	%eax, %eax
100003ac9:	0f 84 ee 00 00 00	je	0x100003bbd
100003acf:	48 8d 35 5f 12 04 00	leaq	266847(%rip), %rsi ## literal pool for: "/usr/libexec/rpmuxd"
100003ad6:	48 8b bd c0 fb ff ff	movq	-1088(%rbp), %rdi
100003add:	e8 4a e3 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100003ae2:	85 c0	testl	%eax, %eax
100003ae4:	4c 8b ad b8 fb ff ff	movq	-1096(%rbp), %r13
100003aeb:	4c 8b bd 98 fb ff ff	movq	-1128(%rbp), %r15
100003af2:	0f 85 fe 00 00 00	jne	0x100003bf6
100003af8:	48 8d 05 4a 12 04 00	leaq	266826(%rip), %rax ## literal pool for: "/Library/Apple/usr/libexec/rpmuxd"
100003aff:	e9 c0 00 00 00	jmp	0x100003bc4
100003b04:	48 89 9d 80 fb ff ff	movq	%rbx, -1152(%rbp)
100003b0b:	48 8d 35 1b fe 03 00	leaq	261659(%rip), %rsi ## literal pool for: "ProgramArguments"
100003b12:	4c 89 e7	movq	%r12, %rdi
100003b15:	e8 52 e5 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003b1a:	48 85 c0	testq	%rax, %rax
100003b1d:	74 14	je	0x100003b33
100003b1f:	48 89 c3	movq	%rax, %rbx
100003b22:	48 89 c7	movq	%rax, %rdi
100003b25:	e8 9c e5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100003b2a:	48 3b 05 a7 45 05 00	cmpq	345511(%rip), %rax ## literal pool symbol address: __xpc_type_array
100003b31:	74 39	je	0x100003b6c
100003b33:	48 8d 15 65 0f 04 00	leaq	266085(%rip), %rdx ## literal pool for: "Service specifies neither Program nor ProgramArguments."
100003b3a:	eb 07	jmp	0x100003b43
100003b3c:	48 8d 15 2f 0f 04 00	leaq	266031(%rip), %rdx ## literal pool for: "Service specifies non-absolute Program path."
100003b43:	31 db	xorl	%ebx, %ebx
100003b45:	4d 89 ef	movq	%r13, %r15
100003b48:	4c 89 ef	movq	%r13, %rdi
100003b4b:	be 03 00 00 00	movl	$3, %esi
100003b50:	31 c0	xorl	%eax, %eax
100003b52:	e8 ee aa 00 00	callq	0x10000e645
100003b57:	41 c7 06 6f 00 00 00	movl	$111, (%r14)
100003b5e:	e9 15 fd ff ff	jmp	0x100003878
100003b63:	48 8d 05 40 10 04 00	leaq	266304(%rip), %rax ## literal pool for: "/Library/Apple/System/Library/PrivateFrameworks/MobileDevice.framework/Versions/A/Resources/usbmuxd"
100003b6a:	eb 58	jmp	0x100003bc4
100003b6c:	48 89 9d 78 fb ff ff	movq	%rbx, -1160(%rbp)
100003b73:	48 89 df	movq	%rbx, %rdi
100003b76:	e8 d1 e3 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100003b7b:	48 85 c0	testq	%rax, %rax
100003b7e:	0f 84 eb 03 00 00	je	0x100003f6f
100003b84:	48 8b bd 78 fb ff ff	movq	-1160(%rbp), %rdi
100003b8b:	31 f6	xorl	%esi, %esi
100003b8d:	e8 c0 e3 03 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100003b92:	48 89 85 c0 fb ff ff	movq	%rax, -1088(%rbp)
100003b99:	48 85 c0	testq	%rax, %rax
100003b9c:	4c 8b ad b8 fb ff ff	movq	-1096(%rbp), %r13
100003ba3:	4c 8b 75 10	movq	16(%rbp), %r14
100003ba7:	48 8b bd a8 fb ff ff	movq	-1112(%rbp), %rdi
100003bae:	0f 85 ca fe ff ff	jne	0x100003a7e
100003bb4:	48 8d 15 55 0f 04 00	leaq	266069(%rip), %rdx ## literal pool for: "Service does not specify a valid argument array."
100003bbb:	eb 86	jmp	0x100003b43
100003bbd:	48 8d 05 e5 10 04 00	leaq	266469(%rip), %rax ## literal pool for: "/Library/Apple/System/Library/PrivateFrameworks/MobileDevice.framework/Resources/MobileDeviceUpdater.app/Contents/MacOS/MobileDeviceUpdater"
100003bc4:	48 89 85 c0 fb ff ff	movq	%rax, -1088(%rbp)
100003bcb:	48 8d 15 3c 10 04 00	leaq	266300(%rip), %rdx ## literal pool for: "Adjusting Program path to %s"
100003bd2:	48 8b bd b8 fb ff ff	movq	-1096(%rbp), %rdi
100003bd9:	49 89 fd	movq	%rdi, %r13
100003bdc:	be 06 00 00 00	movl	$6, %esi
100003be1:	48 8b 8d c0 fb ff ff	movq	-1088(%rbp), %rcx
100003be8:	31 c0	xorl	%eax, %eax
100003bea:	e8 56 aa 00 00	callq	0x10000e645
100003bef:	4c 8b bd 98 fb ff ff	movq	-1128(%rbp), %r15
100003bf6:	48 8d 35 a0 fd 03 00	leaq	261536(%rip), %rsi ## literal pool for: "ProcessType"
100003bfd:	48 8b 9d a8 fb ff ff	movq	-1112(%rbp), %rbx
100003c04:	48 89 df	movq	%rbx, %rdi
100003c07:	e8 60 e4 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100003c0c:	48 85 c0	testq	%rax, %rax
100003c0f:	74 12	je	0x100003c23
100003c11:	48 8d 35 53 11 04 00	leaq	266579(%rip), %rsi ## literal pool for: "POSIXSpawnType"
100003c18:	48 89 df	movq	%rbx, %rdi
100003c1b:	48 89 c2	movq	%rax, %rdx
100003c1e:	e8 8b e4 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100003c23:	48 8d 35 41 11 04 00	leaq	266561(%rip), %rsi ## literal pool for: "POSIXSpawnType"
100003c2a:	48 89 df	movq	%rbx, %rdi
100003c2d:	e8 28 e4 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003c32:	48 8d 35 64 fc 03 00	leaq	261220(%rip), %rsi ## literal pool for: "Driver"
100003c39:	48 89 c7	movq	%rax, %rdi
100003c3c:	e8 f2 b6 00 00	callq	0x10000f333
100003c41:	84 c0	testb	%al, %al
100003c43:	74 15	je	0x100003c5a
100003c45:	be 18 00 00 00	movl	$24, %esi
100003c4a:	4c 89 ff	movq	%r15, %rdi
100003c4d:	e8 64 7d 00 00	callq	0x10000b9b6
100003c52:	84 c0	testb	%al, %al
100003c54:	0f 84 2e 02 00 00	je	0x100003e88
100003c5a:	0f ba a5 90 fb ff ff 09	btl	$9, -1136(%rbp)
100003c62:	72 43	jb	0x100003ca7
100003c64:	48 8d 35 47 11 04 00	leaq	266567(%rip), %rsi ## literal pool for: "_JetsamPropertiesIdentifier"
100003c6b:	48 8b bd a8 fb ff ff	movq	-1112(%rbp), %rdi
100003c72:	e8 e3 e3 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003c77:	48 85 c0	testq	%rax, %rax
100003c7a:	74 2b	je	0x100003ca7
100003c7c:	48 8d 15 4b 11 04 00	leaq	266571(%rip), %rdx ## literal pool for: "Ignoring _JetsamPropertiesIdentifier on a service which isn't submitted"
100003c83:	4c 89 ef	movq	%r13, %rdi
100003c86:	be 03 00 00 00	movl	$3, %esi
100003c8b:	31 c0	xorl	%eax, %eax
100003c8d:	e8 b3 a9 00 00	callq	0x10000e645
100003c92:	48 8d 35 19 11 04 00	leaq	266521(%rip), %rsi ## literal pool for: "_JetsamPropertiesIdentifier"
100003c99:	48 8b bd a8 fb ff ff	movq	-1112(%rbp), %rdi
100003ca0:	31 d2	xorl	%edx, %edx
100003ca2:	e8 07 e4 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100003ca7:	4c 8b a5 a8 fb ff ff	movq	-1112(%rbp), %r12
100003cae:	4c 89 e7	movq	%r12, %rdi
100003cb1:	e8 20 71 00 00	callq	0x10000add6
100003cb6:	49 89 c6	movq	%rax, %r14
100003cb9:	48 89 c7	movq	%rax, %rdi
100003cbc:	4c 89 eb	movq	%r13, %rbx
100003cbf:	4c 89 ee	movq	%r13, %rsi
100003cc2:	e8 72 6a 00 00	callq	0x10000a739
100003cc7:	4c 89 e7	movq	%r12, %rdi
100003cca:	4c 89 f6	movq	%r14, %rsi
100003ccd:	4c 89 ea	movq	%r13, %rdx
100003cd0:	31 c9	xorl	%ecx, %ecx
100003cd2:	e8 f8 22 00 00	callq	0x100005fcf
100003cd7:	48 83 ec 08	subq	$8, %rsp
100003cdb:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100003ce2:	4c 89 fe	movq	%r15, %rsi
100003ce5:	48 8b 95 70 fb ff ff	movq	-1168(%rbp), %rdx
100003cec:	48 8b 8d c0 fb ff ff	movq	-1088(%rbp), %rcx
100003cf3:	4c 8b 85 78 fb ff ff	movq	-1160(%rbp), %r8
100003cfa:	4c 8b 8d 68 fb ff ff	movq	-1176(%rbp), %r9
100003d01:	41 55	pushq	%r13
100003d03:	ff 75 10	pushq	16(%rbp)
100003d06:	ff b5 90 fb ff ff	pushq	-1136(%rbp)
100003d0c:	e8 0d 1c 00 00	callq	0x10000591e
100003d11:	48 83 c4 20	addq	$32, %rsp
100003d15:	48 85 c0	testq	%rax, %rax
100003d18:	0f 84 5d 01 00 00	je	0x100003e7b
100003d1e:	48 89 c3	movq	%rax, %rbx
100003d21:	48 b8 ff ff ff fd ff 7f ff ff	movabsq	$-140737521909761, %rax
100003d2b:	48 23 83 0d 05 00 00	andq	1293(%rbx), %rax
100003d32:	48 83 bd 80 fb ff ff 00	cmpq	$0, -1152(%rbp)
100003d3a:	48 b9 00 00 00 02 00 80 00 00	movabsq	$140737521909760, %rcx
100003d44:	48 ba 00 00 00 00 00 80 00 00	movabsq	$140737488355328, %rdx
100003d4e:	48 0f 44 d1	cmoveq	%rcx, %rdx
100003d52:	48 09 c2	orq	%rax, %rdx
100003d55:	48 89 93 0d 05 00 00	movq	%rdx, 1293(%rbx)
100003d5c:	48 89 df	movq	%rbx, %rdi
100003d5f:	be 01 00 00 00	movl	$1, %esi
100003d64:	4c 89 ea	movq	%r13, %rdx
100003d67:	31 c9	xorl	%ecx, %ecx
100003d69:	e8 1a eb 00 00	callq	0x100012888
100003d6e:	49 89 c7	movq	%rax, %r15
100003d71:	48 8d 15 7d 30 00 00	leaq	12413(%rip), %rdx
100003d78:	48 8b bd a8 fb ff ff	movq	-1112(%rbp), %rdi
100003d7f:	48 89 c6	movq	%rax, %rsi
100003d82:	e8 7f e2 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100003d87:	4c 89 ff	movq	%r15, %rdi
100003d8a:	e8 9d eb 00 00	callq	0x10001292c
100003d8f:	48 89 df	movq	%rbx, %rdi
100003d92:	4c 89 f6	movq	%r14, %rsi
100003d95:	4c 89 ea	movq	%r13, %rdx
100003d98:	e8 dc 6a 00 00	callq	0x10000a879
100003d9d:	48 89 df	movq	%rbx, %rdi
100003da0:	4c 89 f6	movq	%r14, %rsi
100003da3:	e8 94 6d 00 00	callq	0x10000ab3c
100003da8:	4c 89 f7	movq	%r14, %rdi
100003dab:	e8 4c e3 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100003db0:	0f b6 83 15 05 00 00	movzbl	1301(%rbx), %eax
100003db7:	48 8b 8b 0d 05 00 00	movq	1293(%rbx), %rcx
100003dbe:	48 0f ba e1 23	btq	$35, %rcx
100003dc3:	73 1c	jae	0x100003de1
100003dc5:	48 83 bb c0 02 00 00 00	cmpq	$0, 704(%rbx)
100003dcd:	75 12	jne	0x100003de1
100003dcf:	48 0f ba f1 23	btrq	$35, %rcx
100003dd4:	48 89 8b 0d 05 00 00	movq	%rcx, 1293(%rbx)
100003ddb:	88 83 15 05 00 00	movb	%al, 1301(%rbx)
100003de1:	48 ba 00 00 08 00 00 20 00 00	movabsq	$35184372613120, %rdx
100003deb:	48 85 d1	testq	%rdx, %rcx
100003dee:	75 0f	jne	0x100003dff
100003df0:	48 8b 95 90 fb ff ff	movq	-1136(%rbp), %rdx
100003df7:	83 e2 10	andl	$16, %edx
100003dfa:	48 85 d2	testq	%rdx, %rdx
100003dfd:	74 14	je	0x100003e13
100003dff:	48 81 c9 00 00 80 00	orq	$8388608, %rcx
100003e06:	48 89 8b 0d 05 00 00	movq	%rcx, 1293(%rbx)
100003e0d:	88 83 15 05 00 00	movb	%al, 1301(%rbx)
100003e13:	0f ba e1 0c	btl	$12, %ecx
100003e17:	73 13	jae	0x100003e2c
100003e19:	83 bb 24 03 00 00 00	cmpl	$0, 804(%rbx)
100003e20:	75 0a	jne	0x100003e2c
100003e22:	c7 83 24 03 00 00 02 00 00 00	movl	$2, 804(%rbx)
100003e2c:	81 bb 20 03 00 00 00 07 00 00	cmpl	$1792, 800(%rbx)
100003e36:	75 12	jne	0x100003e4a
100003e38:	48 0f ba e9 3e	btsq	$62, %rcx
100003e3d:	48 89 8b 0d 05 00 00	movq	%rcx, 1293(%rbx)
100003e44:	88 83 15 05 00 00	movb	%al, 1301(%rbx)
100003e4a:	48 89 df	movq	%rbx, %rdi
100003e4d:	48 8b b5 b0 fb ff ff	movq	-1104(%rbp), %rsi
100003e54:	48 8b 95 b8 fb ff ff	movq	-1096(%rbp), %rdx
100003e5b:	e8 62 0d 00 00	callq	0x100004bc2
100003e60:	48 8b 4d 10	movq	16(%rbp), %rcx
100003e64:	89 01	movl	%eax, (%rcx)
100003e66:	85 c0	testl	%eax, %eax
100003e68:	74 42	je	0x100003eac
100003e6a:	48 89 df	movq	%rbx, %rdi
100003e6d:	31 f6	xorl	%esi, %esi
100003e6f:	e8 dd ea 00 00	callq	0x100012951
100003e74:	31 db	xorl	%ebx, %ebx
100003e76:	e9 b2 02 00 00	jmp	0x10000412d
100003e7b:	4c 89 f7	movq	%r14, %rdi
100003e7e:	e8 79 e2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100003e83:	e9 eb f9 ff ff	jmp	0x100003873
100003e88:	41 8b 4f 14	movl	20(%r15), %ecx
100003e8c:	48 8d 15 e7 0e 04 00	leaq	265959(%rip), %rdx ## literal pool for: "Service (pid %d) does not have spawn driver entitlement"
100003e93:	31 db	xorl	%ebx, %ebx
100003e95:	4d 89 ef	movq	%r13, %r15
100003e98:	4c 89 ef	movq	%r13, %rdi
100003e9b:	be 03 00 00 00	movl	$3, %esi
100003ea0:	31 c0	xorl	%eax, %eax
100003ea2:	e8 9e a7 00 00	callq	0x10000e645
100003ea7:	e9 9c f7 ff ff	jmp	0x100003648
100003eac:	4c 8b 8b 58 02 00 00	movq	600(%rbx), %r9
100003eb3:	48 89 df	movq	%rbx, %rdi
100003eb6:	48 8b b5 b0 fb ff ff	movq	-1104(%rbp), %rsi
100003ebd:	48 8b 95 88 fb ff ff	movq	-1144(%rbp), %rdx
100003ec4:	48 8b 8d 98 fb ff ff	movq	-1128(%rbp), %rcx
100003ecb:	4c 8b 85 a0 fb ff ff	movq	-1120(%rbp), %r8
100003ed2:	e8 6f 11 00 00	callq	0x100005046
100003ed7:	48 0f ba a3 0d 05 00 00 21	btq	$33, 1293(%rbx)
100003ee0:	0f 83 e1 01 00 00	jae	0x1000040c7
100003ee6:	48 8b bd b0 fb ff ff	movq	-1104(%rbp), %rdi
100003eed:	e8 c9 75 02 00	callq	0x10002b4bb
100003ef2:	48 85 c0	testq	%rax, %rax
100003ef5:	0f 84 a2 00 00 00	je	0x100003f9d
100003efb:	49 89 c6	movq	%rax, %r14
100003efe:	48 8b b3 58 02 00 00	movq	600(%rbx), %rsi
100003f05:	48 89 c7	movq	%rax, %rdi
100003f08:	e8 4d e1 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100003f0d:	4c 8b a3 60 02 00 00	movq	608(%rbx), %r12
100003f14:	48 85 c0	testq	%rax, %rax
100003f17:	0f 84 9b 00 00 00	je	0x100003fb8
100003f1d:	49 89 c7	movq	%rax, %r15
100003f20:	4d 85 e4	testq	%r12, %r12
100003f23:	74 1a	je	0x100003f3f
100003f25:	4c 89 e7	movq	%r12, %rdi
100003f28:	e8 29 df 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100003f2d:	48 f7 d0	notq	%rax
100003f30:	48 01 83 50 02 00 00	addq	%rax, 592(%rbx)
100003f37:	4c 89 e7	movq	%r12, %rdi
100003f3a:	e8 f1 da 03 00	callq	0x100041a30 ## symbol stub for: _free
100003f3f:	4c 89 ff	movq	%r15, %rdi
100003f42:	e8 9b b0 00 00	callq	0x10000efe2
100003f47:	48 89 83 60 02 00 00	movq	%rax, 608(%rbx)
100003f4e:	4c 89 ff	movq	%r15, %rdi
100003f51:	e8 00 df 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100003f56:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100003f5d:	48 01 c8	addq	%rcx, %rax
100003f60:	48 ff c0	incq	%rax
100003f63:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100003f6a:	e9 8c 00 00 00	jmp	0x100003ffb
100003f6f:	48 8d 15 61 0b 04 00	leaq	265057(%rip), %rdx ## literal pool for: "Service specifies no Program and empty ProgramArguments."
100003f76:	31 db	xorl	%ebx, %ebx
100003f78:	4c 8b bd b8 fb ff ff	movq	-1096(%rbp), %r15
100003f7f:	4c 89 ff	movq	%r15, %rdi
100003f82:	be 03 00 00 00	movl	$3, %esi
100003f87:	31 c0	xorl	%eax, %eax
100003f89:	e8 b7 a6 00 00	callq	0x10000e645
100003f8e:	48 8b 45 10	movq	16(%rbp), %rax
100003f92:	c7 00 6f 00 00 00	movl	$111, (%rax)
100003f98:	e9 db f8 ff ff	jmp	0x100003878
100003f9d:	48 8d 15 68 0a 04 00	leaq	264808(%rip), %rdx ## literal pool for: "LoginItem bootstrapped into domain with no bundle identifier mappings."
100003fa4:	48 89 df	movq	%rbx, %rdi
100003fa7:	be 04 00 00 00	movl	$4, %esi
100003fac:	31 c0	xorl	%eax, %eax
100003fae:	e8 07 20 01 00	callq	0x100015fba
100003fb3:	e9 0f 01 00 00	jmp	0x1000040c7
100003fb8:	4d 85 e4	testq	%r12, %r12
100003fbb:	74 28	je	0x100003fe5
100003fbd:	48 8b b3 58 02 00 00	movq	600(%rbx), %rsi
100003fc4:	4c 89 f7	movq	%r14, %rdi
100003fc7:	4c 89 e2	movq	%r12, %rdx
100003fca:	e8 cd e0 03 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100003fcf:	48 8d 35 f9 09 04 00	leaq	264697(%rip), %rsi ## literal pool for: "_dirty"
100003fd6:	4c 89 f7	movq	%r14, %rdi
100003fd9:	ba 01 00 00 00	movl	$1, %edx
100003fde:	e8 95 e0 03 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100003fe3:	eb 16	jmp	0x100003ffb
100003fe5:	48 8d 15 ea 09 04 00	leaq	264682(%rip), %rdx ## literal pool for: "LoginItem has no parent bundle identifier."
100003fec:	48 89 df	movq	%rbx, %rdi
100003fef:	be 04 00 00 00	movl	$4, %esi
100003ff4:	31 c0	xorl	%eax, %eax
100003ff6:	e8 bf 1f 01 00	callq	0x100015fba
100003ffb:	4c 8d bd d0 fb ff ff	leaq	-1072(%rbp), %r15
100004002:	ba 00 04 00 00	movl	$1024, %edx
100004007:	4c 89 ff	movq	%r15, %rdi
10000400a:	be aa 00 00 00	movl	$170, %esi
10000400f:	e8 c6 db 03 00	callq	0x100041bda ## symbol stub for: _memset
100004014:	48 8b 8b 58 02 00 00	movq	600(%rbx), %rcx
10000401b:	48 8d 15 df 09 04 00	leaq	264671(%rip), %rdx ## literal pool for: "version.%s"
100004022:	be 00 04 00 00	movl	$1024, %esi
100004027:	4c 89 ff	movq	%r15, %rdi
10000402a:	31 c0	xorl	%eax, %eax
10000402c:	e8 d1 dd 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100004031:	4c 89 f7	movq	%r14, %rdi
100004034:	4c 89 fe	movq	%r15, %rsi
100004037:	e8 1e e0 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000403c:	4c 8b a3 68 02 00 00	movq	616(%rbx), %r12
100004043:	48 85 c0	testq	%rax, %rax
100004046:	74 4f	je	0x100004097
100004048:	49 89 c7	movq	%rax, %r15
10000404b:	4d 85 e4	testq	%r12, %r12
10000404e:	74 1a	je	0x10000406a
100004050:	4c 89 e7	movq	%r12, %rdi
100004053:	e8 fe dd 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100004058:	48 f7 d0	notq	%rax
10000405b:	48 01 83 50 02 00 00	addq	%rax, 592(%rbx)
100004062:	4c 89 e7	movq	%r12, %rdi
100004065:	e8 c6 d9 03 00	callq	0x100041a30 ## symbol stub for: _free
10000406a:	4c 89 ff	movq	%r15, %rdi
10000406d:	e8 70 af 00 00	callq	0x10000efe2
100004072:	48 89 83 68 02 00 00	movq	%rax, 616(%rbx)
100004079:	4c 89 ff	movq	%r15, %rdi
10000407c:	e8 d5 dd 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100004081:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100004088:	48 01 c8	addq	%rcx, %rax
10000408b:	48 ff c0	incq	%rax
10000408e:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100004095:	eb 2b	jmp	0x1000040c2
100004097:	4d 85 e4	testq	%r12, %r12
10000409a:	74 26	je	0x1000040c2
10000409c:	48 8d b5 d0 fb ff ff	leaq	-1072(%rbp), %rsi
1000040a3:	4c 89 f7	movq	%r14, %rdi
1000040a6:	4c 89 e2	movq	%r12, %rdx
1000040a9:	e8 ee df 03 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
1000040ae:	48 8d 35 1a 09 04 00	leaq	264474(%rip), %rsi ## literal pool for: "_dirty"
1000040b5:	4c 89 f7	movq	%r14, %rdi
1000040b8:	ba 01 00 00 00	movl	$1, %edx
1000040bd:	e8 b6 df 03 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
1000040c2:	e8 79 90 03 00	callq	0x10003d140
1000040c7:	81 bb 20 03 00 00 00 03 00 00	cmpl	$768, 800(%rbx)
1000040d1:	75 16	jne	0x1000040e9
1000040d3:	48 8d 05 12 e7 05 00	leaq	386834(%rip), %rax
1000040da:	80 38 00	cmpb	$0, (%rax)
1000040dd:	75 0a	jne	0x1000040e9
1000040df:	c7 83 30 03 00 00 11 00 00 00	movl	$17, 816(%rbx)
1000040e9:	48 8d 05 c7 e6 05 00	leaq	386759(%rip), %rax
1000040f0:	80 38 00	cmpb	$0, (%rax)
1000040f3:	74 12	je	0x100004107
1000040f5:	48 c7 83 3c 03 00 00 ff ff ff ff	movq	$-1, 828(%rbx)
100004100:	80 a3 34 03 00 00 f3	andb	$-13, 820(%rbx)
100004107:	0f b6 85 cf fb ff ff	movzbl	-1073(%rbp), %eax
10000410e:	48 c1 e0 34	shlq	$52, %rax
100004112:	48 b9 ff ff ff ff ff ff ef ff	movabsq	$-4503599627370497, %rcx
10000411c:	48 23 8b 0d 05 00 00	andq	1293(%rbx), %rcx
100004123:	48 09 c1	orq	%rax, %rcx
100004126:	48 89 8b 0d 05 00 00	movq	%rcx, 1293(%rbx)
10000412d:	4c 8b bd b8 fb ff ff	movq	-1096(%rbp), %r15
100004134:	e9 3f f7 ff ff	jmp	0x100003878
100004139:	e8 34 d6 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000413e:	e8 18 ae 03 00	callq	0x10003ef5b
100004143:	55	pushq	%rbp
100004144:	48 89 e5	movq	%rsp, %rbp
100004147:	66 83 bf 0d 05 00 00 00	cmpw	$0, 1293(%rdi)
10000414f:	78 0c	js	0x10000415d
100004151:	80 bf 0c 05 00 00 00	cmpb	$0, 1292(%rdi)
100004158:	0f 95 c0	setne	%al
10000415b:	eb 02	jmp	0x10000415f
10000415d:	b0 01	movb	$1, %al
10000415f:	5d	popq	%rbp
100004160:	c3	retq
100004161:	55	pushq	%rbp
100004162:	48 89 e5	movq	%rsp, %rbp
100004165:	41 57	pushq	%r15
100004167:	41 56	pushq	%r14
100004169:	41 55	pushq	%r13
10000416b:	41 54	pushq	%r12
10000416d:	53	pushq	%rbx
10000416e:	48 81 ec 88 01 00 00	subq	$392, %rsp
100004175:	4c 8b 65 10	movq	16(%rbp), %r12
100004179:	48 8b 05 a8 3e 05 00	movq	343720(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100004180:	48 8b 00	movq	(%rax), %rax
100004183:	48 89 45 d0	movq	%rax, -48(%rbp)
100004187:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10000418e:	0f ba e0 13	btl	$19, %eax
100004192:	72 29	jb	0x1000041bd
100004194:	41 89 d7	movl	%edx, %r15d
100004197:	48 89 fb	movq	%rdi, %rbx
10000419a:	48 89 c7	movq	%rax, %rdi
10000419d:	48 f7 d7	notq	%rdi
1000041a0:	48 ba 00 10 00 00 00 00 02 00	movabsq	$562949953425408, %rdx
1000041aa:	48 85 d7	testq	%rdx, %rdi
1000041ad:	74 0e	je	0x1000041bd
1000041af:	84 c0	testb	%al, %al
1000041b1:	78 0a	js	0x1000041bd
1000041b3:	48 83 bb 80 00 00 00 00	cmpq	$0, 128(%rbx)
1000041bb:	74 34	je	0x1000041f1
1000041bd:	41 c7 04 24 88 00 00 00	movl	$136, (%r12)
1000041c5:	45 31 ed	xorl	%r13d, %r13d
1000041c8:	48 8b 05 59 3e 05 00	movq	343641(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000041cf:	48 8b 00	movq	(%rax), %rax
1000041d2:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000041d6:	0f 85 d3 09 00 00	jne	0x100004baf
1000041dc:	4c 89 e8	movq	%r13, %rax
1000041df:	48 81 c4 88 01 00 00	addq	$392, %rsp
1000041e6:	5b	popq	%rbx
1000041e7:	41 5c	popq	%r12
1000041e9:	41 5d	popq	%r13
1000041eb:	41 5e	popq	%r14
1000041ed:	41 5f	popq	%r15
1000041ef:	5d	popq	%rbp
1000041f0:	c3	retq
1000041f1:	4d 89 cd	movq	%r9, %r13
1000041f4:	4d 89 c6	movq	%r8, %r14
1000041f7:	66 85 c0	testw	%ax, %ax
1000041fa:	78 0d	js	0x100004209
1000041fc:	80 bb 0c 05 00 00 00	cmpb	$0, 1292(%rbx)
100004203:	0f 84 91 01 00 00	je	0x10000439a
100004209:	0f ba e0 10	btl	$16, %eax
10000420d:	0f 82 87 01 00 00	jb	0x10000439a
100004213:	f6 83 64 01 00 00 20	testb	$32, 356(%rbx)
10000421a:	0f 85 7a 01 00 00	jne	0x10000439a
100004220:	48 89 8d 50 fe ff ff	movq	%rcx, -432(%rbp)
100004227:	48 0f ba e0 2c	btq	$44, %rax
10000422c:	0f 82 82 09 00 00	jb	0x100004bb4
100004232:	8b bb 04 05 00 00	movl	1284(%rbx), %edi
100004238:	8d 47 01	leal	1(%rdi), %eax
10000423b:	83 f8 02	cmpl	$2, %eax
10000423e:	48 89 9d 68 fe ff ff	movq	%rbx, -408(%rbp)
100004245:	0f 83 35 01 00 00	jae	0x100004380
10000424b:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100004255:	48 8d 8d 70 ff ff ff	leaq	-144(%rbp), %rcx
10000425c:	48 89 41 1d	movq	%rax, 29(%rcx)
100004260:	0f 28 05 19 f0 03 00	movaps	258073(%rip), %xmm0
100004267:	0f 29 41 10	movaps	%xmm0, 16(%rcx)
10000426b:	0f 29 01	movaps	%xmm0, (%rcx)
10000426e:	48 89 b5 58 fe ff ff	movq	%rsi, -424(%rbp)
100004275:	48 89 f7	movq	%rsi, %rdi
100004278:	48 89 ce	movq	%rcx, %rsi
10000427b:	e8 7e dc 03 00	callq	0x100041efe ## symbol stub for: _uuid_unparse
100004280:	48 8d 85 70 fe ff ff	leaq	-400(%rbp), %rax
100004287:	0f 28 05 f2 ef 03 00	movaps	258034(%rip), %xmm0
10000428e:	0f 29 80 f0 00 00 00	movaps	%xmm0, 240(%rax)
100004295:	0f 29 80 e0 00 00 00	movaps	%xmm0, 224(%rax)
10000429c:	0f 29 80 d0 00 00 00	movaps	%xmm0, 208(%rax)
1000042a3:	0f 29 80 c0 00 00 00	movaps	%xmm0, 192(%rax)
1000042aa:	0f 29 80 b0 00 00 00	movaps	%xmm0, 176(%rax)
1000042b1:	0f 29 80 a0 00 00 00	movaps	%xmm0, 160(%rax)
1000042b8:	0f 29 80 90 00 00 00	movaps	%xmm0, 144(%rax)
1000042bf:	0f 29 80 80 00 00 00	movaps	%xmm0, 128(%rax)
1000042c6:	0f 29 40 70	movaps	%xmm0, 112(%rax)
1000042ca:	0f 29 40 60	movaps	%xmm0, 96(%rax)
1000042ce:	0f 29 40 50	movaps	%xmm0, 80(%rax)
1000042d2:	0f 29 40 40	movaps	%xmm0, 64(%rax)
1000042d6:	0f 29 40 30	movaps	%xmm0, 48(%rax)
1000042da:	0f 29 40 20	movaps	%xmm0, 32(%rax)
1000042de:	0f 29 40 10	movaps	%xmm0, 16(%rax)
1000042e2:	0f 29 00	movaps	%xmm0, (%rax)
1000042e5:	48 89 c7	movq	%rax, %rdi
1000042e8:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
1000042ef:	48 8d 15 30 f7 03 00	leaq	259888(%rip), %rdx ## literal pool for: "%s.%s"
1000042f6:	be 00 01 00 00	movl	$256, %esi
1000042fb:	4c 8d 85 70 ff ff ff	leaq	-144(%rbp), %r8
100004302:	31 c0	xorl	%eax, %eax
100004304:	e8 f9 da 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100004309:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
100004310:	48 8d b5 70 fe ff ff	leaq	-400(%rbp), %rsi
100004317:	e8 49 a2 00 00	callq	0x10000e565
10000431c:	48 89 85 60 fe ff ff	movq	%rax, -416(%rbp)
100004323:	83 bb a4 01 00 00 00	cmpl	$0, 420(%rbx)
10000432a:	74 7b	je	0x1000043a7
10000432c:	31 ff	xorl	%edi, %edi
10000432e:	31 f6	xorl	%esi, %esi
100004330:	e8 0b dc 03 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100004335:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000433c:	48 89 c3	movq	%rax, %rbx
10000433f:	83 b9 a4 01 00 00 00	cmpl	$0, 420(%rcx)
100004346:	74 64	je	0x1000043ac
100004348:	45 31 e4	xorl	%r12d, %r12d
10000434b:	48 8b 81 a8 01 00 00	movq	424(%rcx), %rax
100004352:	4a 8b 14 e0	movq	(%rax,%r12,8), %rdx
100004356:	48 89 df	movq	%rbx, %rdi
100004359:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100004360:	e8 11 dc 03 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
100004365:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000436c:	49 ff c4	incq	%r12
10000436f:	8b 81 a4 01 00 00	movl	420(%rcx), %eax
100004375:	49 39 c4	cmpq	%rax, %r12
100004378:	72 d1	jb	0x10000434b
10000437a:	4c 8b 65 10	movq	16(%rbp), %r12
10000437e:	eb 2c	jmp	0x1000043ac
100004380:	48 89 f3	movq	%rsi, %rbx
100004383:	e8 95 59 00 00	callq	0x100009d1d
100004388:	48 89 de	movq	%rbx, %rsi
10000438b:	48 8b 9d 68 fe ff ff	movq	-408(%rbp), %rbx
100004392:	85 c0	testl	%eax, %eax
100004394:	0f 84 b1 fe ff ff	je	0x10000424b
10000439a:	41 c7 04 24 89 00 00 00	movl	$137, (%r12)
1000043a2:	e9 1e fe ff ff	jmp	0x1000041c5
1000043a7:	48 89 d9	movq	%rbx, %rcx
1000043aa:	31 db	xorl	%ebx, %ebx
1000043ac:	48 8b b9 68 01 00 00	movq	360(%rcx), %rdi
1000043b3:	48 8b 89 58 02 00 00	movq	600(%rcx), %rcx
1000043ba:	49 83 cd 04	orq	$4, %r13
1000043be:	48 83 ec 08	subq	$8, %rsp
1000043c2:	48 8d 95 70 fe ff ff	leaq	-400(%rbp), %rdx
1000043c9:	48 8b b5 50 fe ff ff	movq	-432(%rbp), %rsi
1000043d0:	49 89 d8	movq	%rbx, %r8
1000043d3:	4d 89 f1	movq	%r14, %r9
1000043d6:	4c 8b b5 60 fe ff ff	movq	-416(%rbp), %r14
1000043dd:	41 56	pushq	%r14
1000043df:	41 54	pushq	%r12
1000043e1:	41 55	pushq	%r13
1000043e3:	e8 36 15 00 00	callq	0x10000591e
1000043e8:	48 83 c4 20	addq	$32, %rsp
1000043ec:	49 89 c5	movq	%rax, %r13
1000043ef:	48 85 db	testq	%rbx, %rbx
1000043f2:	74 08	je	0x1000043fc
1000043f4:	48 89 df	movq	%rbx, %rdi
1000043f7:	e8 00 dd 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000043fc:	4d 85 ed	testq	%r13, %r13
1000043ff:	0f 84 9a 07 00 00	je	0x100004b9f
100004405:	41 83 ff ff	cmpl	$-1, %r15d
100004409:	74 70	je	0x10000447b
10000440b:	48 8b 85 68 fe ff ff	movq	-408(%rbp), %rax
100004412:	48 8b b0 b8 01 00 00	movq	440(%rax), %rsi
100004419:	48 8b 90 c0 01 00 00	movq	448(%rax), %rdx
100004420:	48 8b 88 c8 01 00 00	movq	456(%rax), %rcx
100004427:	4c 89 ef	movq	%r13, %rdi
10000442a:	45 89 f8	movl	%r15d, %r8d
10000442d:	e8 cb 30 01 00	callq	0x1000174fd
100004432:	85 c0	testl	%eax, %eax
100004434:	74 45	je	0x10000447b
100004436:	89 c3	movl	%eax, %ebx
100004438:	41 89 04 24	movl	%eax, (%r12)
10000443c:	89 c7	movl	%eax, %edi
10000443e:	e8 fb d9 03 00	callq	0x100041e3e ## symbol stub for: _strerror
100004443:	48 8d 15 87 f7 03 00	leaq	259975(%rip), %rdx ## literal pool for: "Could not set up nowait inetd service: %d: %s"
10000444a:	48 8b bd 68 fe ff ff	movq	-408(%rbp), %rdi
100004451:	be 03 00 00 00	movl	$3, %esi
100004456:	89 d9	movl	%ebx, %ecx
100004458:	49 89 c0	movq	%rax, %r8
10000445b:	31 c0	xorl	%eax, %eax
10000445d:	e8 58 1b 01 00	callq	0x100015fba
100004462:	4c 89 ef	movq	%r13, %rdi
100004465:	31 f6	xorl	%esi, %esi
100004467:	e8 e5 e4 00 00	callq	0x100012951
10000446c:	45 31 ed	xorl	%r13d, %r13d
10000446f:	4c 8b b5 60 fe ff ff	movq	-416(%rbp), %r14
100004476:	e9 27 07 00 00	jmp	0x100004ba2
10000447b:	48 83 bd 50 fe ff ff 00	cmpq	$0, -432(%rbp)
100004483:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000448a:	75 1e	jne	0x1000044aa
10000448c:	0f 10 81 70 01 00 00	movups	368(%rcx), %xmm0
100004493:	0f 10 89 80 01 00 00	movups	384(%rcx), %xmm1
10000449a:	41 0f 11 8d 80 01 00 00	movups	%xmm1, 384(%r13)
1000044a2:	41 0f 11 85 70 01 00 00	movups	%xmm0, 368(%r13)
1000044aa:	48 8b b9 38 02 00 00	movq	568(%rcx), %rdi
1000044b1:	48 85 ff	testq	%rdi, %rdi
1000044b4:	74 13	je	0x1000044c9
1000044b6:	e8 27 ab 00 00	callq	0x10000efe2
1000044bb:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
1000044c2:	49 89 85 38 02 00 00	movq	%rax, 568(%r13)
1000044c9:	48 8b b9 b0 01 00 00	movq	432(%rcx), %rdi
1000044d0:	48 85 ff	testq	%rdi, %rdi
1000044d3:	74 13	je	0x1000044e8
1000044d5:	e8 08 ab 00 00	callq	0x10000efe2
1000044da:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
1000044e1:	49 89 85 b0 01 00 00	movq	%rax, 432(%r13)
1000044e8:	48 8b b9 18 03 00 00	movq	792(%rcx), %rdi
1000044ef:	48 85 ff	testq	%rdi, %rdi
1000044f2:	74 13	je	0x100004507
1000044f4:	e8 e9 aa 00 00	callq	0x10000efe2
1000044f9:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
100004500:	49 89 85 18 03 00 00	movq	%rax, 792(%r13)
100004507:	48 8b b9 b8 01 00 00	movq	440(%rcx), %rdi
10000450e:	48 85 ff	testq	%rdi, %rdi
100004511:	74 13	je	0x100004526
100004513:	e8 ca aa 00 00	callq	0x10000efe2
100004518:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000451f:	49 89 85 b8 01 00 00	movq	%rax, 440(%r13)
100004526:	48 8b b9 c0 01 00 00	movq	448(%rcx), %rdi
10000452d:	48 85 ff	testq	%rdi, %rdi
100004530:	74 13	je	0x100004545
100004532:	e8 ab aa 00 00	callq	0x10000efe2
100004537:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000453e:	49 89 85 c0 01 00 00	movq	%rax, 448(%r13)
100004545:	48 8b b9 c8 01 00 00	movq	456(%rcx), %rdi
10000454c:	48 85 ff	testq	%rdi, %rdi
10000454f:	74 13	je	0x100004564
100004551:	e8 8c aa 00 00	callq	0x10000efe2
100004556:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000455d:	49 89 85 c8 01 00 00	movq	%rax, 456(%r13)
100004564:	48 8b b9 d8 01 00 00	movq	472(%rcx), %rdi
10000456b:	48 85 ff	testq	%rdi, %rdi
10000456e:	74 13	je	0x100004583
100004570:	e8 6d aa 00 00	callq	0x10000efe2
100004575:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000457c:	49 89 85 d8 01 00 00	movq	%rax, 472(%r13)
100004583:	48 8b b9 d0 01 00 00	movq	464(%rcx), %rdi
10000458a:	48 85 ff	testq	%rdi, %rdi
10000458d:	74 16	je	0x1000045a5
10000458f:	e8 c2 d8 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100004594:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000459b:	48 f7 d0	notq	%rax
10000459e:	49 01 85 50 02 00 00	addq	%rax, 592(%r13)
1000045a5:	48 8b b9 e0 01 00 00	movq	480(%rcx), %rdi
1000045ac:	48 85 ff	testq	%rdi, %rdi
1000045af:	74 0c	je	0x1000045bd
1000045b1:	e8 2c aa 00 00	callq	0x10000efe2
1000045b6:	49 89 85 e0 01 00 00	movq	%rax, 480(%r13)
1000045bd:	49 8d bd 90 01 00 00	leaq	400(%r13), %rdi
1000045c4:	48 8b b5 58 fe ff ff	movq	-424(%rbp), %rsi
1000045cb:	e8 22 d9 03 00	callq	0x100041ef2 ## symbol stub for: _uuid_copy
1000045d0:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
1000045d7:	48 8b b9 c0 02 00 00	movq	704(%rcx), %rdi
1000045de:	48 85 ff	testq	%rdi, %rdi
1000045e1:	74 13	je	0x1000045f6
1000045e3:	e8 fa a9 00 00	callq	0x10000efe2
1000045e8:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
1000045ef:	49 89 85 c0 02 00 00	movq	%rax, 704(%r13)
1000045f6:	48 8b b9 c8 02 00 00	movq	712(%rcx), %rdi
1000045fd:	48 85 ff	testq	%rdi, %rdi
100004600:	74 13	je	0x100004615
100004602:	e8 db a9 00 00	callq	0x10000efe2
100004607:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
10000460e:	49 89 85 c8 02 00 00	movq	%rax, 712(%r13)
100004615:	8b 81 20 03 00 00	movl	800(%rcx), %eax
10000461b:	41 89 85 20 03 00 00	movl	%eax, 800(%r13)
100004622:	8b 81 24 03 00 00	movl	804(%rcx), %eax
100004628:	41 89 85 24 03 00 00	movl	%eax, 804(%r13)
10000462f:	0f 10 81 34 03 00 00	movups	820(%rcx), %xmm0
100004636:	41 0f 11 85 34 03 00 00	movups	%xmm0, 820(%r13)
10000463e:	8b 81 44 03 00 00	movl	836(%rcx), %eax
100004644:	41 89 85 44 03 00 00	movl	%eax, 836(%r13)
10000464b:	48 8b 81 48 03 00 00	movq	840(%rcx), %rax
100004652:	49 89 85 48 03 00 00	movq	%rax, 840(%r13)
100004659:	0f 10 81 50 03 00 00	movups	848(%rcx), %xmm0
100004660:	41 0f 11 85 50 03 00 00	movups	%xmm0, 848(%r13)
100004668:	41 80 8d 13 05 00 00 01	orb	$1, 1299(%r13)
100004670:	8a 81 8a 03 00 00	movb	906(%rcx), %al
100004676:	41 88 85 8a 03 00 00	movb	%al, 906(%r13)
10000467d:	8b 81 8c 03 00 00	movl	908(%rcx), %eax
100004683:	41 89 85 8c 03 00 00	movl	%eax, 908(%r13)
10000468a:	48 8b b9 28 03 00 00	movq	808(%rcx), %rdi
100004691:	48 85 ff	testq	%rdi, %rdi
100004694:	74 13	je	0x1000046a9
100004696:	e8 1d d3 ff ff	callq	0x1000019b8
10000469b:	48 8b 8d 68 fe ff ff	movq	-408(%rbp), %rcx
1000046a2:	49 89 85 28 03 00 00	movq	%rax, 808(%r13)
1000046a9:	8b 81 30 03 00 00	movl	816(%rcx), %eax
1000046af:	41 89 85 30 03 00 00	movl	%eax, 816(%r13)
1000046b6:	8b 81 90 03 00 00	movl	912(%rcx), %eax
1000046bc:	41 89 85 90 03 00 00	movl	%eax, 912(%r13)
1000046c3:	48 8b 99 80 03 00 00	movq	896(%rcx), %rbx
1000046ca:	48 85 db	testq	%rbx, %rbx
1000046cd:	74 56	je	0x100004725
1000046cf:	4d 89 ef	movq	%r13, %r15
1000046d2:	49 81 c7 80 03 00 00	addq	$896, %r15
1000046d9:	4c 8d 75 a0	leaq	-96(%rbp), %r14
1000046dd:	48 c7 45 a0 00 00 00 00	movq	$0, -96(%rbp)
1000046e5:	48 89 df	movq	%rbx, %rdi
1000046e8:	4c 89 f6	movq	%r14, %rsi
1000046eb:	e8 63 e3 00 00	callq	0x100012a53
1000046f0:	49 8b 0f	movq	(%r15), %rcx
1000046f3:	48 89 08	movq	%rcx, (%rax)
1000046f6:	48 85 c9	testq	%rcx, %rcx
1000046f9:	74 04	je	0x1000046ff
1000046fb:	48 89 41 08	movq	%rax, 8(%rcx)
1000046ff:	49 89 85 80 03 00 00	movq	%rax, 896(%r13)
100004706:	4c 89 78 08	movq	%r15, 8(%rax)
10000470a:	66 41 ff 85 88 03 00 00	incw	904(%r13)
100004712:	48 8b 45 a0	movq	-96(%rbp), %rax
100004716:	49 01 85 50 02 00 00	addq	%rax, 592(%r13)
10000471d:	48 8b 1b	movq	(%rbx), %rbx
100004720:	48 85 db	testq	%rbx, %rbx
100004723:	75 b8	jne	0x1000046dd
100004725:	48 8b 95 68 fe ff ff	movq	-408(%rbp), %rdx
10000472c:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004733:	83 e1 01	andl	$1, %ecx
100004736:	49 8b 85 0d 05 00 00	movq	1293(%r13), %rax
10000473d:	48 83 e0 fe	andq	$-2, %rax
100004741:	48 09 c8	orq	%rcx, %rax
100004744:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
10000474b:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004752:	83 e1 02	andl	$2, %ecx
100004755:	48 83 e0 fd	andq	$-3, %rax
100004759:	48 09 c8	orq	%rcx, %rax
10000475c:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004763:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
10000476a:	83 e1 04	andl	$4, %ecx
10000476d:	48 83 e0 fb	andq	$-5, %rax
100004771:	48 09 c8	orq	%rcx, %rax
100004774:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
10000477b:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004782:	83 e1 10	andl	$16, %ecx
100004785:	48 83 e0 ef	andq	$-17, %rax
100004789:	48 09 c8	orq	%rcx, %rax
10000478c:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004793:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
10000479a:	83 e1 20	andl	$32, %ecx
10000479d:	48 83 e0 df	andq	$-33, %rax
1000047a1:	48 09 c8	orq	%rcx, %rax
1000047a4:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000047ab:	8a 8a fc 04 00 00	movb	1276(%rdx), %cl
1000047b1:	41 88 8d fc 04 00 00	movb	%cl, 1276(%r13)
1000047b8:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
1000047bf:	83 e1 40	andl	$64, %ecx
1000047c2:	48 83 e0 bf	andq	$-65, %rax
1000047c6:	48 09 c8	orq	%rcx, %rax
1000047c9:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000047d0:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
1000047d7:	81 e1 00 01 00 00	andl	$256, %ecx
1000047dd:	48 25 ff fe ff ff	andq	$-257, %rax
1000047e3:	48 09 c8	orq	%rcx, %rax
1000047e6:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000047ed:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
1000047f4:	81 e1 00 02 00 00	andl	$512, %ecx
1000047fa:	48 25 ff fd ff ff	andq	$-513, %rax
100004800:	48 09 c8	orq	%rcx, %rax
100004803:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
10000480a:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004811:	81 e1 00 04 00 00	andl	$1024, %ecx
100004817:	48 25 ff fb ff ff	andq	$-1025, %rax
10000481d:	48 09 c8	orq	%rcx, %rax
100004820:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004827:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
10000482e:	81 e1 00 40 00 00	andl	$16384, %ecx
100004834:	48 25 ff bf ff ff	andq	$-16385, %rax
10000483a:	48 09 c8	orq	%rcx, %rax
10000483d:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004844:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
10000484b:	81 e1 00 00 02 00	andl	$131072, %ecx
100004851:	48 25 ff ff fd ff	andq	$-131073, %rax
100004857:	48 09 c8	orq	%rcx, %rax
10000485a:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004861:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004868:	81 e1 00 00 00 01	andl	$16777216, %ecx
10000486e:	48 25 ff ff ff fe	andq	$-16777217, %rax
100004874:	48 09 c8	orq	%rcx, %rax
100004877:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
10000487e:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
100004885:	81 e1 00 00 00 02	andl	$33554432, %ecx
10000488b:	48 25 ff ff ff fd	andq	$-33554433, %rax
100004891:	48 09 c8	orq	%rcx, %rax
100004894:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
10000489b:	48 b9 00 00 00 00 00 00 00 20	movabsq	$2305843009213693952, %rcx
1000048a5:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
1000048ac:	48 0f ba f0 3d	btrq	$61, %rax
1000048b1:	48 09 c8	orq	%rcx, %rax
1000048b4:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000048bb:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
1000048c2:	81 e1 00 00 00 20	andl	$536870912, %ecx
1000048c8:	48 25 ff ff ff df	andq	$-536870913, %rax
1000048ce:	48 09 c8	orq	%rcx, %rax
1000048d1:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000048d8:	48 8b 8a 0d 05 00 00	movq	1293(%rdx), %rcx
1000048df:	81 e1 00 00 00 40	andl	$1073741824, %ecx
1000048e5:	48 25 ff ff ff bf	andq	$-1073741825, %rax
1000048eb:	48 09 c8	orq	%rcx, %rax
1000048ee:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000048f5:	48 b9 00 00 00 00 01 00 00 00	movabsq	$__mh_execute_header, %rcx
1000048ff:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004906:	48 0f ba f0 20	btrq	$32, %rax
10000490b:	48 09 c8	orq	%rcx, %rax
10000490e:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004915:	48 b9 00 00 00 00 04 00 00 00	movabsq	$17179869184, %rcx
10000491f:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004926:	48 0f ba f0 22	btrq	$34, %rax
10000492b:	48 09 c8	orq	%rcx, %rax
10000492e:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004935:	0f 10 82 70 03 00 00	movups	880(%rdx), %xmm0
10000493c:	41 0f 11 85 70 03 00 00	movups	%xmm0, 880(%r13)
100004944:	48 b9 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rcx
10000494e:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004955:	48 0f ba f0 25	btrq	$37, %rax
10000495a:	48 09 c8	orq	%rcx, %rax
10000495d:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004964:	48 b9 00 00 00 00 00 00 00 04	movabsq	$288230376151711744, %rcx
10000496e:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004975:	48 0f ba f0 3a	btrq	$58, %rax
10000497a:	48 09 c8	orq	%rcx, %rax
10000497d:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004984:	48 b9 00 00 00 00 00 00 00 08	movabsq	$576460752303423488, %rcx
10000498e:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004995:	48 0f ba f0 3b	btrq	$59, %rax
10000499a:	48 09 c8	orq	%rcx, %rax
10000499d:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000049a4:	48 b9 00 00 00 00 40 00 00 00	movabsq	$274877906944, %rcx
1000049ae:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
1000049b5:	48 0f ba f0 26	btrq	$38, %rax
1000049ba:	48 09 c8	orq	%rcx, %rax
1000049bd:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000049c4:	48 b9 00 00 00 00 00 04 00 00	movabsq	$4398046511104, %rcx
1000049ce:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
1000049d5:	48 0f ba f0 2a	btrq	$42, %rax
1000049da:	48 09 c8	orq	%rcx, %rax
1000049dd:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
1000049e4:	48 b9 00 00 00 00 00 00 04 00	movabsq	$1125899906842624, %rcx
1000049ee:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
1000049f5:	48 0f ba f0 32	btrq	$50, %rax
1000049fa:	48 09 c8	orq	%rcx, %rax
1000049fd:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004a04:	48 b9 00 00 00 00 00 00 08 00	movabsq	$2251799813685248, %rcx
100004a0e:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004a15:	48 0f ba f0 33	btrq	$51, %rax
100004a1a:	48 09 c8	orq	%rcx, %rax
100004a1d:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004a24:	8b 8a f8 04 00 00	movl	1272(%rdx), %ecx
100004a2a:	41 89 8d f8 04 00 00	movl	%ecx, 1272(%r13)
100004a31:	48 b9 00 00 00 00 00 00 20 00	movabsq	$9007199254740992, %rcx
100004a3b:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004a42:	48 0f ba f0 35	btrq	$53, %rax
100004a47:	48 09 c8	orq	%rcx, %rax
100004a4a:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004a51:	48 b9 00 00 00 00 00 00 40 00	movabsq	$18014398509481984, %rcx
100004a5b:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004a62:	48 0f ba f0 36	btrq	$54, %rax
100004a67:	48 09 c8	orq	%rcx, %rax
100004a6a:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004a71:	48 b9 00 00 00 00 00 00 80 00	movabsq	$36028797018963968, %rcx
100004a7b:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004a82:	48 0f ba f0 37	btrq	$55, %rax
100004a87:	48 09 c8	orq	%rcx, %rax
100004a8a:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004a91:	48 b9 00 00 00 00 00 00 00 01	movabsq	$72057594037927936, %rcx
100004a9b:	48 23 8a 0d 05 00 00	andq	1293(%rdx), %rcx
100004aa2:	48 0f ba f0 38	btrq	$56, %rax
100004aa7:	48 09 c8	orq	%rcx, %rax
100004aaa:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004ab1:	8b 82 04 05 00 00	movl	1284(%rdx), %eax
100004ab7:	41 89 85 04 05 00 00	movl	%eax, 1284(%r13)
100004abe:	48 8b ba 80 02 00 00	movq	640(%rdx), %rdi
100004ac5:	48 85 ff	testq	%rdi, %rdi
100004ac8:	74 13	je	0x100004add
100004aca:	e8 33 d6 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100004acf:	48 8b 95 68 fe ff ff	movq	-408(%rbp), %rdx
100004ad6:	49 89 85 80 02 00 00	movq	%rax, 640(%r13)
100004add:	48 8b ba e8 01 00 00	movq	488(%rdx), %rdi
100004ae4:	48 85 ff	testq	%rdi, %rdi
100004ae7:	74 34	je	0x100004b1d
100004ae9:	80 ba 0c 05 00 00 02	cmpb	$2, 1292(%rdx)
100004af0:	75 0e	jne	0x100004b00
100004af2:	e8 0b d6 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100004af7:	49 89 85 e8 01 00 00	movq	%rax, 488(%r13)
100004afe:	eb 16	jmp	0x100004b16
100004b00:	48 8d 15 f8 f0 03 00	leaq	258296(%rip), %rdx ## literal pool for: "Service instances do not support XPC events."
100004b07:	4c 89 ef	movq	%r13, %rdi
100004b0a:	be 04 00 00 00	movl	$4, %esi
100004b0f:	31 c0	xorl	%eax, %eax
100004b11:	e8 a4 14 01 00	callq	0x100015fba
100004b16:	48 8b 95 68 fe ff ff	movq	-408(%rbp), %rdx
100004b1d:	48 8b 82 50 02 00 00	movq	592(%rdx), %rax
100004b24:	49 89 85 50 02 00 00	movq	%rax, 592(%r13)
100004b2b:	48 8d 5d a0	leaq	-96(%rbp), %rbx
100004b2f:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100004b39:	48 89 43 1d	movq	%rax, 29(%rbx)
100004b3d:	0f 28 05 3c e7 03 00	movaps	255804(%rip), %xmm0
100004b44:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100004b48:	0f 29 03	movaps	%xmm0, (%rbx)
100004b4b:	48 8b bd 58 fe ff ff	movq	-424(%rbp), %rdi
100004b52:	48 89 de	movq	%rbx, %rsi
100004b55:	49 89 d6	movq	%rdx, %r14
100004b58:	e8 a1 d3 03 00	callq	0x100041efe ## symbol stub for: _uuid_unparse
100004b5d:	48 8d 35 c8 f0 03 00	leaq	258248(%rip), %rsi ## literal pool for: "LaunchInstanceID"
100004b64:	4c 89 ef	movq	%r13, %rdi
100004b67:	48 89 da	movq	%rbx, %rdx
100004b6a:	b9 01 00 00 00	movl	$1, %ecx
100004b6f:	e8 f3 e4 ff ff	callq	0x100003067
100004b74:	49 8b b6 e8 00 00 00	movq	232(%r14), %rsi
100004b7b:	4c 89 ef	movq	%r13, %rdi
100004b7e:	4c 8b b5 60 fe ff ff	movq	-416(%rbp), %r14
100004b85:	4c 89 f2	movq	%r14, %rdx
100004b88:	e8 35 00 00 00	callq	0x100004bc2
100004b8d:	41 89 04 24	movl	%eax, (%r12)
100004b91:	85 c0	testl	%eax, %eax
100004b93:	74 0d	je	0x100004ba2
100004b95:	4c 89 ef	movq	%r13, %rdi
100004b98:	31 f6	xorl	%esi, %esi
100004b9a:	e8 b2 dd 00 00	callq	0x100012951
100004b9f:	45 31 ed	xorl	%r13d, %r13d
100004ba2:	4c 89 f7	movq	%r14, %rdi
100004ba5:	e8 6b 9a 00 00	callq	0x10000e615
100004baa:	e9 19 f6 ff ff	jmp	0x1000041c8
100004baf:	e8 be cb 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100004bb4:	48 8d 3d 34 ee 03 00	leaq	257588(%rip), %rdi ## literal pool for: "multiple-instance service has no initialized endpoints"
100004bbb:	31 c0	xorl	%eax, %eax
100004bbd:	e8 50 f8 02 00	callq	0x100034412
100004bc2:	55	pushq	%rbp
100004bc3:	48 89 e5	movq	%rsp, %rbp
100004bc6:	41 57	pushq	%r15
100004bc8:	41 56	pushq	%r14
100004bca:	41 55	pushq	%r13
100004bcc:	41 54	pushq	%r12
100004bce:	53	pushq	%rbx
100004bcf:	48 83 ec 28	subq	$40, %rsp
100004bd3:	49 89 d7	movq	%rdx, %r15
100004bd6:	49 89 f6	movq	%rsi, %r14
100004bd9:	49 89 fd	movq	%rdi, %r13
100004bdc:	48 89 f7	movq	%rsi, %rdi
100004bdf:	e8 74 72 02 00	callq	0x10002be58
100004be4:	bb 7c 00 00 00	movl	$124, %ebx
100004be9:	84 c0	testb	%al, %al
100004beb:	0f 85 3d 04 00 00	jne	0x10000502e
100004bf1:	4c 89 f7	movq	%r14, %rdi
100004bf4:	e8 63 65 02 00	callq	0x10002b15c
100004bf9:	49 89 c4	movq	%rax, %r12
100004bfc:	49 8b b5 0d 05 00 00	movq	1293(%r13), %rsi
100004c03:	48 0f ba e6 22	btq	$34, %rsi
100004c08:	73 37	jae	0x100004c41
100004c0a:	4c 3b 25 7f 34 05 00	cmpq	341119(%rip), %r12
100004c11:	74 2e	je	0x100004c41
100004c13:	48 8d 15 77 f1 03 00	leaq	258423(%rip), %rdx ## literal pool for: "_AbandonCoalition is only available to Application services."
100004c1a:	4c 89 ff	movq	%r15, %rdi
100004c1d:	be 03 00 00 00	movl	$3, %esi
100004c22:	31 c0	xorl	%eax, %eax
100004c24:	e8 1c 9a 00 00	callq	0x10000e645
100004c29:	48 be ff ff ff ff fb ff ff ff	movabsq	$-17179869185, %rsi
100004c33:	49 23 b5 0d 05 00 00	andq	1293(%r13), %rsi
100004c3a:	49 89 b5 0d 05 00 00	movq	%rsi, 1293(%r13)
100004c41:	0f ba e6 1d	btl	$29, %esi
100004c45:	73 34	jae	0x100004c7b
100004c47:	4c 3b 25 52 34 05 00	cmpq	341074(%rip), %r12
100004c4e:	74 2b	je	0x100004c7b
100004c50:	48 8d 15 77 f1 03 00	leaq	258423(%rip), %rdx ## literal pool for: "_JoinGUISession is only available to User services."
100004c57:	4c 89 ff	movq	%r15, %rdi
100004c5a:	be 03 00 00 00	movl	$3, %esi
100004c5f:	31 c0	xorl	%eax, %eax
100004c61:	e8 df 99 00 00	callq	0x10000e645
100004c66:	48 c7 c6 ff ff ff df	movq	$-536870913, %rsi
100004c6d:	49 23 b5 0d 05 00 00	andq	1293(%r13), %rsi
100004c74:	49 89 b5 0d 05 00 00	movq	%rsi, 1293(%r13)
100004c7b:	0f ba e6 1e	btl	$30, %esi
100004c7f:	73 34	jae	0x100004cb5
100004c81:	4c 3b 25 08 34 05 00	cmpq	341000(%rip), %r12
100004c88:	74 2b	je	0x100004cb5
100004c8a:	48 8d 15 71 f1 03 00	leaq	258417(%rip), %rdx ## literal pool for: "JoinExistingSession is only available to Application services."
100004c91:	4c 89 ff	movq	%r15, %rdi
100004c94:	be 03 00 00 00	movl	$3, %esi
100004c99:	31 c0	xorl	%eax, %eax
100004c9b:	e8 a5 99 00 00	callq	0x10000e645
100004ca0:	48 c7 c6 ff ff ff bf	movq	$-1073741825, %rsi
100004ca7:	49 23 b5 0d 05 00 00	andq	1293(%r13), %rsi
100004cae:	49 89 b5 0d 05 00 00	movq	%rsi, 1293(%r13)
100004cb5:	48 0f ba e6 32	btq	$50, %rsi
100004cba:	73 37	jae	0x100004cf3
100004cbc:	4c 3b 25 d5 33 05 00	cmpq	340949(%rip), %r12
100004cc3:	74 2e	je	0x100004cf3
100004cc5:	48 8d 15 75 f1 03 00	leaq	258421(%rip), %rdx ## literal pool for: "DisallowAllLookups is not supported for non-System services."
100004ccc:	4c 89 ff	movq	%r15, %rdi
100004ccf:	be 03 00 00 00	movl	$3, %esi
100004cd4:	31 c0	xorl	%eax, %eax
100004cd6:	e8 6a 99 00 00	callq	0x10000e645
100004cdb:	48 be ff ff ff ff ff ff fb ff	movabsq	$-1125899906842625, %rsi
100004ce5:	49 23 b5 0d 05 00 00	andq	1293(%r13), %rsi
100004cec:	49 89 b5 0d 05 00 00	movq	%rsi, 1293(%r13)
100004cf3:	48 c1 ee 3c	shrq	$60, %rsi
100004cf7:	83 e6 01	andl	$1, %esi
100004cfa:	4c 89 f7	movq	%r14, %rdi
100004cfd:	e8 4b 74 02 00	callq	0x10002c14d
100004d02:	84 c0	testb	%al, %al
100004d04:	0f 85 b7 00 00 00	jne	0x100004dc1
100004d0a:	49 83 bd c0 02 00 00 00	cmpq	$0, 704(%r13)
100004d12:	74 61	je	0x100004d75
100004d14:	41 f6 85 0d 05 00 00 02	testb	$2, 1293(%r13)
100004d1c:	48 8d 05 68 f1 03 00	leaq	258408(%rip), %rax ## literal pool for: "UserName"
100004d23:	48 8d 0d 54 f1 03 00	leaq	258388(%rip), %rcx ## literal pool for: "_RoleAccount"
100004d2a:	48 0f 44 c8	cmoveq	%rax, %rcx
100004d2e:	48 8d 15 5f f1 03 00	leaq	258399(%rip), %rdx ## literal pool for: "%s is not supported by the domain, ignoring."
100004d35:	4c 89 ff	movq	%r15, %rdi
100004d38:	be 03 00 00 00	movl	$3, %esi
100004d3d:	31 c0	xorl	%eax, %eax
100004d3f:	e8 01 99 00 00	callq	0x10000e645
100004d44:	49 8b 9d c0 02 00 00	movq	704(%r13), %rbx
100004d4b:	48 85 db	testq	%rbx, %rbx
100004d4e:	74 25	je	0x100004d75
100004d50:	48 89 df	movq	%rbx, %rdi
100004d53:	e8 fe d0 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100004d58:	48 f7 d0	notq	%rax
100004d5b:	49 01 85 50 02 00 00	addq	%rax, 592(%r13)
100004d62:	48 89 df	movq	%rbx, %rdi
100004d65:	e8 c6 cc 03 00	callq	0x100041a30 ## symbol stub for: _free
100004d6a:	49 c7 85 c0 02 00 00 00 00 00 00	movq	$0, 704(%r13)
100004d75:	49 83 bd c8 02 00 00 00	cmpq	$0, 712(%r13)
100004d7d:	74 42	je	0x100004dc1
100004d7f:	48 8d 15 3b f1 03 00	leaq	258363(%rip), %rdx ## literal pool for: "GroupName is not supported by the domain, ignoring."
100004d86:	4c 89 ff	movq	%r15, %rdi
100004d89:	be 03 00 00 00	movl	$3, %esi
100004d8e:	31 c0	xorl	%eax, %eax
100004d90:	e8 b0 98 00 00	callq	0x10000e645
100004d95:	49 8b 9d c8 02 00 00	movq	712(%r13), %rbx
100004d9c:	48 89 df	movq	%rbx, %rdi
100004d9f:	e8 b2 d0 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100004da4:	48 f7 d0	notq	%rax
100004da7:	49 01 85 50 02 00 00	addq	%rax, 592(%r13)
100004dae:	48 89 df	movq	%rbx, %rdi
100004db1:	e8 7a cc 03 00	callq	0x100041a30 ## symbol stub for: _free
100004db6:	49 c7 85 c8 02 00 00 00 00 00 00	movq	$0, 712(%r13)
100004dc1:	49 8b 85 0d 05 00 00	movq	1293(%r13), %rax
100004dc8:	48 0f ba e0 35	btq	$53, %rax
100004dcd:	73 33	jae	0x100004e02
100004dcf:	48 b9 00 00 00 00 40 00 02 00	movabsq	$563224831328256, %rcx
100004dd9:	48 85 c8	testq	%rcx, %rax
100004ddc:	0f 84 44 01 00 00	je	0x100004f26
100004de2:	49 8d bd 70 01 00 00	leaq	368(%r13), %rdi
100004de9:	be 0f 00 00 00	movl	$15, %esi
100004dee:	e8 c3 6b 00 00	callq	0x10000b9b6
100004df3:	84 c0	testb	%al, %al
100004df5:	0f 84 34 01 00 00	je	0x100004f2f
100004dfb:	49 8b 85 0d 05 00 00	movq	1293(%r13), %rax
100004e02:	41 0f b6 8d 15 05 00 00	movzbl	1301(%r13), %ecx
100004e0a:	48 89 c7	movq	%rax, %rdi
100004e0d:	48 81 e7 00 00 00 08	andq	$134217728, %rdi
100004e14:	0f 85 25 02 00 00	jne	0x10000503f
100004e1a:	48 0d 00 00 00 08	orq	$134217728, %rax
100004e20:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100004e27:	41 88 8d 15 05 00 00	movb	%cl, 1301(%r13)
100004e2e:	4d 89 b5 e8 00 00 00	movq	%r14, 232(%r13)
100004e35:	49 8b b5 30 02 00 00	movq	560(%r13), %rsi
100004e3c:	4c 89 ef	movq	%r13, %rdi
100004e3f:	41 ff 95 28 02 00 00	callq	*552(%r13)
100004e46:	49 8b 9d e8 00 00 00	movq	232(%r13), %rbx
100004e4d:	48 83 c3 28	addq	$40, %rbx
100004e51:	4d 8d b5 18 05 00 00	leaq	1304(%r13), %r14
100004e58:	48 8b 1b	movq	(%rbx), %rbx
100004e5b:	48 85 db	testq	%rbx, %rbx
100004e5e:	74 4a	je	0x100004eaa
100004e60:	48 8b 73 10	movq	16(%rbx), %rsi
100004e64:	4c 89 f7	movq	%r14, %rdi
100004e67:	e8 c0 cf 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100004e6c:	85 c0	testl	%eax, %eax
100004e6e:	75 e8	jne	0x100004e58
100004e70:	48 8d 05 f9 d8 05 00	leaq	383225(%rip), %rax
100004e77:	8b 38	movl	(%rax), %edi
100004e79:	48 8b 73 18	movq	24(%rbx), %rsi
100004e7d:	e8 b2 50 03 00	callq	0x100039f34
100004e82:	48 8b 7b 18	movq	24(%rbx), %rdi
100004e86:	e8 71 d2 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100004e8b:	48 8b 03	movq	(%rbx), %rax
100004e8e:	48 85 c0	testq	%rax, %rax
100004e91:	74 08	je	0x100004e9b
100004e93:	48 8b 4b 08	movq	8(%rbx), %rcx
100004e97:	48 89 48 08	movq	%rcx, 8(%rax)
100004e9b:	48 8b 4b 08	movq	8(%rbx), %rcx
100004e9f:	48 89 01	movq	%rax, (%rcx)
100004ea2:	48 89 df	movq	%rbx, %rdi
100004ea5:	e8 86 cb 03 00	callq	0x100041a30 ## symbol stub for: _free
100004eaa:	49 8b 85 0d 05 00 00	movq	1293(%r13), %rax
100004eb1:	85 c0	testl	%eax, %eax
100004eb3:	79 1b	jns	0x100004ed0
100004eb5:	4c 89 2d 4c d8 05 00	movq	%r13, 383052(%rip)
100004ebc:	48 8d 0d a5 d8 05 00	leaq	383141(%rip), %rcx
100004ec3:	80 39 00	cmpb	$0, (%rcx)
100004ec6:	74 08	je	0x100004ed0
100004ec8:	41 80 8d ea 04 00 00 01	orb	$1, 1258(%r13)
100004ed0:	48 0f ba e0 2e	btq	$46, %rax
100004ed5:	73 1b	jae	0x100004ef2
100004ed7:	4c 89 2d 32 d8 05 00	movq	%r13, 383026(%rip)
100004ede:	48 8d 05 83 d8 05 00	leaq	383107(%rip), %rax
100004ee5:	80 38 00	cmpb	$0, (%rax)
100004ee8:	74 08	je	0x100004ef2
100004eea:	41 80 8d ea 04 00 00 01	orb	$1, 1258(%r13)
100004ef2:	49 8b bd e8 01 00 00	movq	488(%r13), %rdi
100004ef9:	48 85 ff	testq	%rdi, %rdi
100004efc:	0f 84 88 00 00 00	je	0x100004f8a
100004f02:	48 8d 05 d8 d8 05 00	leaq	383192(%rip), %rax
100004f09:	80 38 00	cmpb	$0, (%rax)
100004f0c:	74 41	je	0x100004f4f
100004f0e:	48 8d 15 41 f0 03 00	leaq	258113(%rip), %rdx ## literal pool for: "Operating in pure on-demand mode. Ignoring events"
100004f15:	4c 89 ef	movq	%r13, %rdi
100004f18:	be 05 00 00 00	movl	$5, %esi
100004f1d:	31 c0	xorl	%eax, %eax
100004f1f:	e8 96 10 01 00	callq	0x100015fba
100004f24:	eb 38	jmp	0x100004f5e
100004f26:	48 8d 15 c8 ef 03 00	leaq	257992(%rip), %rdx ## literal pool for: "persona can only be set on submitted jobs and extensions"
100004f2d:	eb 07	jmp	0x100004f36
100004f2f:	48 8d 15 f8 ef 03 00	leaq	258040(%rip), %rdx ## literal pool for: "setting persona requires an entitlement"
100004f36:	4c 89 ff	movq	%r15, %rdi
100004f39:	be 03 00 00 00	movl	$3, %esi
100004f3e:	31 c0	xorl	%eax, %eax
100004f40:	e8 00 97 00 00	callq	0x10000e645
100004f45:	bb 90 00 00 00	movl	$144, %ebx
100004f4a:	e9 df 00 00 00	jmp	0x10000502e
100004f4f:	48 8d 15 52 0f 00 00	leaq	3922(%rip), %rdx
100004f56:	4c 89 ee	movq	%r13, %rsi
100004f59:	e8 a8 d0 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100004f5e:	66 41 83 bd 0d 05 00 00 00	cmpw	$0, 1293(%r13)
100004f67:	78 21	js	0x100004f8a
100004f69:	41 80 bd 0c 05 00 00 00	cmpb	$0, 1292(%r13)
100004f71:	75 17	jne	0x100004f8a
100004f73:	49 8b bd e8 01 00 00	movq	488(%r13), %rdi
100004f7a:	e8 7d d1 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100004f7f:	49 c7 85 e8 01 00 00 00 00 00 00	movq	$0, 488(%r13)
100004f8a:	49 8b bd f0 01 00 00	movq	496(%r13), %rdi
100004f91:	31 db	xorl	%ebx, %ebx
100004f93:	48 85 ff	testq	%rdi, %rdi
100004f96:	0f 84 92 00 00 00	je	0x10000502e
100004f9c:	48 8b 05 75 30 05 00	movq	340085(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100004fa3:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100004fa7:	48 89 06	movq	%rax, (%rsi)
100004faa:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100004fb2:	48 8d 05 9e 0e 00 00	leaq	3742(%rip), %rax
100004fb9:	48 89 46 10	movq	%rax, 16(%rsi)
100004fbd:	48 8d 05 2c 32 05 00	leaq	340524(%rip), %rax
100004fc4:	48 89 46 18	movq	%rax, 24(%rsi)
100004fc8:	4c 89 6e 20	movq	%r13, 32(%rsi)
100004fcc:	e8 2f d0 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100004fd1:	49 8b bd f0 01 00 00	movq	496(%r13), %rdi
100004fd8:	e8 1f d1 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100004fdd:	49 c7 85 f0 01 00 00 00 00 00 00	movq	$0, 496(%r13)
100004fe8:	bf 30 00 00 00	movl	$48, %edi
100004fed:	e8 f3 84 00 00	callq	0x10000d4e5
100004ff2:	48 8d 0d e9 0d 01 00	leaq	69097(%rip), %rcx
100004ff9:	48 89 48 10	movq	%rcx, 16(%rax)
100004ffd:	c6 40 28 01	movb	$1, 40(%rax)
100005001:	48 8d 0d 79 ed 03 00	leaq	257401(%rip), %rcx ## literal pool for: "provides events"
100005008:	48 89 48 18	movq	%rcx, 24(%rax)
10000500c:	49 8b 8d 88 02 00 00	movq	648(%r13), %rcx
100005013:	49 81 c5 88 02 00 00	addq	$648, %r13
10000501a:	48 89 08	movq	%rcx, (%rax)
10000501d:	48 85 c9	testq	%rcx, %rcx
100005020:	74 04	je	0x100005026
100005022:	48 89 41 08	movq	%rax, 8(%rcx)
100005026:	49 89 45 00	movq	%rax, (%r13)
10000502a:	4c 89 68 08	movq	%r13, 8(%rax)
10000502e:	89 d8	movl	%ebx, %eax
100005030:	48 83 c4 28	addq	$40, %rsp
100005034:	5b	popq	%rbx
100005035:	41 5c	popq	%r12
100005037:	41 5d	popq	%r13
100005039:	41 5e	popq	%r14
10000503b:	41 5f	popq	%r15
10000503d:	5d	popq	%rbp
10000503e:	c3	retq
10000503f:	31 f6	xorl	%esi, %esi
100005041:	e8 2a 9f 03 00	callq	0x10003ef70
100005046:	55	pushq	%rbp
100005047:	48 89 e5	movq	%rsp, %rbp
10000504a:	41 57	pushq	%r15
10000504c:	41 56	pushq	%r14
10000504e:	41 55	pushq	%r13
100005050:	41 54	pushq	%r12
100005052:	53	pushq	%rbx
100005053:	48 83 ec 18	subq	$24, %rsp
100005057:	4c 89 4d c0	movq	%r9, -64(%rbp)
10000505b:	4d 89 c4	movq	%r8, %r12
10000505e:	48 89 4d c8	movq	%rcx, -56(%rbp)
100005062:	49 89 d5	movq	%rdx, %r13
100005065:	49 89 f6	movq	%rsi, %r14
100005068:	48 89 fb	movq	%rdi, %rbx
10000506b:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100005075:	48 89 45 d0	movq	%rax, -48(%rbp)
100005079:	49 bf 00 00 00 00 40 00 00 00	movabsq	$274877906944, %r15
100005083:	4c 23 bf 0d 05 00 00	andq	1293(%rdi), %r15
10000508a:	48 89 f7	movq	%rsi, %rdi
10000508d:	e8 ca 60 02 00	callq	0x10002b15c
100005092:	48 3b 05 f7 2f 05 00	cmpq	339959(%rip), %rax
100005099:	74 47	je	0x1000050e2
10000509b:	4d 85 ff	testq	%r15, %r15
10000509e:	75 42	jne	0x1000050e2
1000050a0:	48 8d 75 d0	leaq	-48(%rbp), %rsi
1000050a4:	4c 89 f7	movq	%r14, %rdi
1000050a7:	e8 1e 0c 01 00	callq	0x100015cca
1000050ac:	85 c0	testl	%eax, %eax
1000050ae:	75 32	jne	0x1000050e2
1000050b0:	48 83 3d 88 30 05 00 00	cmpq	$0, 340104(%rip) ## literal pool symbol address: _bootstrap_port
1000050b8:	74 28	je	0x1000050e2
1000050ba:	48 8b b3 0d 05 00 00	movq	1293(%rbx), %rsi
1000050c1:	48 c1 ee 15	shrq	$21, %rsi
1000050c5:	81 e6 00 10 00 00	andl	$4096, %esi
1000050cb:	48 8b 7d d0	movq	-48(%rbp), %rdi
1000050cf:	4c 89 e2	movq	%r12, %rdx
1000050d2:	4c 89 e9	movq	%r13, %rcx
1000050d5:	4c 8b 45 c0	movq	-64(%rbp), %r8
1000050d9:	4c 8b 4d c8	movq	-56(%rbp), %r9
1000050dd:	e8 0c c9 03 00	callq	0x1000419ee ## symbol stub for: _dz_notify_launchd_load
1000050e2:	48 83 c4 18	addq	$24, %rsp
1000050e6:	5b	popq	%rbx
1000050e7:	41 5c	popq	%r12
1000050e9:	41 5d	popq	%r13
1000050eb:	41 5e	popq	%r14
1000050ed:	41 5f	popq	%r15
1000050ef:	5d	popq	%rbp
1000050f0:	c3	retq
1000050f1:	55	pushq	%rbp
1000050f2:	48 89 e5	movq	%rsp, %rbp
1000050f5:	41 57	pushq	%r15
1000050f7:	41 56	pushq	%r14
1000050f9:	53	pushq	%rbx
1000050fa:	48 83 ec 18	subq	$24, %rsp
1000050fe:	49 89 f6	movq	%rsi, %r14
100005101:	41 89 ff	movl	%edi, %r15d
100005104:	48 8d 75 e4	leaq	-28(%rbp), %rsi
100005108:	c7 06 00 00 00 00	movl	$0, (%rsi)
10000510e:	48 8d 55 d8	leaq	-40(%rbp), %rdx
100005112:	48 c7 02 01 00 00 00	movq	$1, (%rdx)
100005119:	e8 fc c9 03 00	callq	0x100041b1a ## symbol stub for: _kpersona_find_by_type
10000511e:	83 f8 01	cmpl	$1, %eax
100005121:	75 0c	jne	0x10000512f
100005123:	48 83 7d d8 01	cmpq	$1, -40(%rbp)
100005128:	75 05	jne	0x10000512f
10000512a:	8b 5d e4	movl	-28(%rbp), %ebx
10000512d:	eb 1e	jmp	0x10000514d
10000512f:	48 8d 15 f6 e8 03 00	leaq	256246(%rip), %rdx ## literal pool for: "Unable to find persona with type %d: kpersona_find returned %d"
100005136:	31 db	xorl	%ebx, %ebx
100005138:	4c 89 f7	movq	%r14, %rdi
10000513b:	be 03 00 00 00	movl	$3, %esi
100005140:	44 89 f9	movl	%r15d, %ecx
100005143:	41 89 c0	movl	%eax, %r8d
100005146:	31 c0	xorl	%eax, %eax
100005148:	e8 f8 94 00 00	callq	0x10000e645
10000514d:	89 d8	movl	%ebx, %eax
10000514f:	48 83 c4 18	addq	$24, %rsp
100005153:	5b	popq	%rbx
100005154:	41 5e	popq	%r14
100005156:	41 5f	popq	%r15
100005158:	5d	popq	%rbp
100005159:	c3	retq
10000515a:	55	pushq	%rbp
10000515b:	48 89 e5	movq	%rsp, %rbp
10000515e:	41 57	pushq	%r15
100005160:	41 56	pushq	%r14
100005162:	53	pushq	%rbx
100005163:	50	pushq	%rax
100005164:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10000516b:	0f ba e0 1c	btl	$28, %eax
10000516f:	0f 82 dd 00 00 00	jb	0x100005252
100005175:	49 89 fe	movq	%rdi, %r14
100005178:	0f b6 8f 15 05 00 00	movzbl	1301(%rdi), %ecx
10000517f:	48 89 c2	movq	%rax, %rdx
100005182:	48 81 ca 00 00 00 10	orq	$268435456, %rdx
100005189:	48 89 97 0d 05 00 00	movq	%rdx, 1293(%rdi)
100005190:	88 8f 15 05 00 00	movb	%cl, 1301(%rdi)
100005196:	0f ba e0 1b	btl	$27, %eax
10000519a:	0f 83 bb 00 00 00	jae	0x10000525b
1000051a0:	85 c0	testl	%eax, %eax
1000051a2:	79 0b	jns	0x1000051af
1000051a4:	48 c7 05 59 d5 05 00 00 00 00 00	movq	$0, 382297(%rip)
1000051af:	48 0f ba e0 2e	btq	$46, %rax
1000051b4:	73 0b	jae	0x1000051c1
1000051b6:	48 c7 05 4f d5 05 00 00 00 00 00	movq	$0, 382287(%rip)
1000051c1:	49 8b 5e 78	movq	120(%r14), %rbx
1000051c5:	48 85 db	testq	%rbx, %rbx
1000051c8:	74 1e	je	0x1000051e8
1000051ca:	4c 8b 7b 08	movq	8(%rbx), %r15
1000051ce:	48 89 df	movq	%rbx, %rdi
1000051d1:	e8 c7 ce 02 00	callq	0x10003209d
1000051d6:	48 89 df	movq	%rbx, %rdi
1000051d9:	31 f6	xorl	%esi, %esi
1000051db:	e8 71 d7 00 00	callq	0x100012951
1000051e0:	4c 89 fb	movq	%r15, %rbx
1000051e3:	4d 85 ff	testq	%r15, %r15
1000051e6:	75 e2	jne	0x1000051ca
1000051e8:	49 8b 9e 80 00 00 00	movq	128(%r14), %rbx
1000051ef:	48 85 db	testq	%rbx, %rbx
1000051f2:	74 1e	je	0x100005212
1000051f4:	4c 8b 7b 08	movq	8(%rbx), %r15
1000051f8:	48 89 df	movq	%rbx, %rdi
1000051fb:	e8 5f c9 02 00	callq	0x100031b5f
100005200:	48 89 df	movq	%rbx, %rdi
100005203:	31 f6	xorl	%esi, %esi
100005205:	e8 47 d7 00 00	callq	0x100012951
10000520a:	4c 89 fb	movq	%r15, %rbx
10000520d:	4d 85 ff	testq	%r15, %r15
100005210:	75 e2	jne	0x1000051f4
100005212:	49 8b 86 68 03 00 00	movq	872(%r14), %rax
100005219:	48 85 c0	testq	%rax, %rax
10000521c:	74 0e	je	0x10000522c
10000521e:	4c 39 70 08	cmpq	%r14, 8(%rax)
100005222:	75 29	jne	0x10000524d
100005224:	48 c7 40 08 00 00 00 00	movq	$0, 8(%rax)
10000522c:	4c 89 f7	movq	%r14, %rdi
10000522f:	e8 48 90 01 00	callq	0x10001e27c
100005234:	4c 89 f7	movq	%r14, %rdi
100005237:	be 09 00 00 00	movl	$9, %esi
10000523c:	31 d2	xorl	%edx, %edx
10000523e:	48 83 c4 08	addq	$8, %rsp
100005242:	5b	popq	%rbx
100005243:	41 5e	popq	%r14
100005245:	41 5f	popq	%r15
100005247:	5d	popq	%rbp
100005248:	e9 5e 0c 01 00	jmp	0x100015eab
10000524d:	e8 3e 9d 03 00	callq	0x10003ef90
100005252:	48 8d 3d 12 e8 03 00	leaq	256018(%rip), %rdi ## literal pool for: "attempted to petrify a service twice"
100005259:	eb 07	jmp	0x100005262
10000525b:	48 8d 3d 2e e8 03 00	leaq	256046(%rip), %rdi ## literal pool for: "attempted to petrify a service that hasn't been animated"
100005262:	31 c0	xorl	%eax, %eax
100005264:	e8 a9 f1 02 00	callq	0x100034412
100005269:	55	pushq	%rbp
10000526a:	48 89 e5	movq	%rsp, %rbp
10000526d:	41 57	pushq	%r15
10000526f:	41 56	pushq	%r14
100005271:	41 55	pushq	%r13
100005273:	41 54	pushq	%r12
100005275:	53	pushq	%rbx
100005276:	48 83 ec 68	subq	$104, %rsp
10000527a:	4c 89 4d a0	movq	%r9, -96(%rbp)
10000527e:	4c 89 45 a8	movq	%r8, -88(%rbp)
100005282:	48 89 cb	movq	%rcx, %rbx
100005285:	48 89 55 b0	movq	%rdx, -80(%rbp)
100005289:	49 89 f6	movq	%rsi, %r14
10000528c:	49 89 ff	movq	%rdi, %r15
10000528f:	4c 8b 65 10	movq	16(%rbp), %r12
100005293:	48 89 f7	movq	%rsi, %rdi
100005296:	be 02 00 00 00	movl	$2, %esi
10000529b:	e8 24 cd 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
1000052a0:	48 85 c0	testq	%rax, %rax
1000052a3:	0f 84 ee 00 00 00	je	0x100005397
1000052a9:	49 89 c5	movq	%rax, %r13
1000052ac:	4c 89 f7	movq	%r14, %rdi
1000052af:	e8 04 cd 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
1000052b4:	48 85 c0	testq	%rax, %rax
1000052b7:	0f 84 fd 00 00 00	je	0x1000053ba
1000052bd:	48 89 5d 88	movq	%rbx, -120(%rbp)
1000052c1:	48 8d 35 76 e6 03 00	leaq	255606(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
1000052c8:	48 89 c7	movq	%rax, %rdi
1000052cb:	e8 8a cd 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000052d0:	48 85 c0	testq	%rax, %rax
1000052d3:	0f 84 07 01 00 00	je	0x1000053e0
1000052d9:	48 89 c3	movq	%rax, %rbx
1000052dc:	4c 89 ff	movq	%r15, %rdi
1000052df:	48 89 c6	movq	%rax, %rsi
1000052e2:	e8 7e 92 00 00	callq	0x10000e565
1000052e7:	48 89 45 d0	movq	%rax, -48(%rbp)
1000052eb:	4c 89 f7	movq	%r14, %rdi
1000052ee:	be 02 00 00 00	movl	$2, %esi
1000052f3:	e8 cc cc 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
1000052f8:	48 85 c0	testq	%rax, %rax
1000052fb:	0f 84 0e 06 00 00	je	0x10000590f
100005301:	48 89 45 b8	movq	%rax, -72(%rbp)
100005305:	48 89 9d 70 ff ff ff	movq	%rbx, -144(%rbp)
10000530c:	4c 89 f7	movq	%r14, %rdi
10000530f:	e8 a4 cc 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
100005314:	48 85 c0	testq	%rax, %rax
100005317:	0f 84 f7 05 00 00	je	0x100005914
10000531d:	49 89 c4	movq	%rax, %r12
100005320:	48 8d 35 17 e6 03 00	leaq	255511(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
100005327:	48 89 c7	movq	%rax, %rdi
10000532a:	e8 2b cd 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000532f:	48 85 c0	testq	%rax, %rax
100005332:	0f 84 e1 05 00 00	je	0x100005919
100005338:	48 89 c3	movq	%rax, %rbx
10000533b:	48 8d 35 a4 ec 03 00	leaq	257188(%rip), %rsi ## literal pool for: "CFBundlePackageType"
100005342:	4c 89 e7	movq	%r12, %rdi
100005345:	e8 10 cd 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000534a:	48 85 c0	testq	%rax, %rax
10000534d:	74 17	je	0x100005366
10000534f:	48 8d 35 a4 ec 03 00	leaq	257188(%rip), %rsi ## literal pool for: "XPC!"
100005356:	48 89 c7	movq	%rax, %rdi
100005359:	e8 ce ca 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000535e:	85 c0	testl	%eax, %eax
100005360:	0f 84 b1 00 00 00	je	0x100005417
100005366:	48 8d 15 92 ec 03 00	leaq	257170(%rip), %rdx ## literal pool for: "Bundle is not of type \"XPC!\""
10000536d:	48 8b 5d d0	movq	-48(%rbp), %rbx
100005371:	48 89 df	movq	%rbx, %rdi
100005374:	be 03 00 00 00	movl	$3, %esi
100005379:	31 c0	xorl	%eax, %eax
10000537b:	e8 c5 92 00 00	callq	0x10000e645
100005380:	48 8b 45 10	movq	16(%rbp), %rax
100005384:	c7 00 6b 00 00 00	movl	$107, (%rax)
10000538a:	48 89 df	movq	%rbx, %rdi
10000538d:	e8 83 92 00 00	callq	0x10000e615
100005392:	45 31 e4	xorl	%r12d, %r12d
100005395:	eb 6e	jmp	0x100005405
100005397:	41 c7 04 24 6b 00 00 00	movl	$107, (%r12)
10000539f:	48 8d 15 23 e7 03 00	leaq	255779(%rip), %rdx ## literal pool for: "Could not get path for service bundle."
1000053a6:	45 31 e4	xorl	%r12d, %r12d
1000053a9:	4c 89 ff	movq	%r15, %rdi
1000053ac:	be 03 00 00 00	movl	$3, %esi
1000053b1:	31 c0	xorl	%eax, %eax
1000053b3:	e8 71 b0 01 00	callq	0x100020429
1000053b8:	eb 4b	jmp	0x100005405
1000053ba:	41 c7 04 24 6b 00 00 00	movl	$107, (%r12)
1000053c2:	48 8d 15 27 e7 03 00	leaq	255783(%rip), %rdx ## literal pool for: "Could not get Info.plist for bundle at %s"
1000053c9:	45 31 e4	xorl	%r12d, %r12d
1000053cc:	4c 89 ff	movq	%r15, %rdi
1000053cf:	be 03 00 00 00	movl	$3, %esi
1000053d4:	4c 89 e9	movq	%r13, %rcx
1000053d7:	31 c0	xorl	%eax, %eax
1000053d9:	e8 4b b0 01 00	callq	0x100020429
1000053de:	eb 25	jmp	0x100005405
1000053e0:	48 8d 15 33 e7 03 00	leaq	255795(%rip), %rdx ## literal pool for: "Bundle Info.plist at %s does not have a CFBundleIdentifier"
1000053e7:	4c 89 e3	movq	%r12, %rbx
1000053ea:	45 31 e4	xorl	%r12d, %r12d
1000053ed:	4c 89 ff	movq	%r15, %rdi
1000053f0:	be 03 00 00 00	movl	$3, %esi
1000053f5:	4c 89 e9	movq	%r13, %rcx
1000053f8:	31 c0	xorl	%eax, %eax
1000053fa:	e8 2a b0 01 00	callq	0x100020429
1000053ff:	c7 03 6b 00 00 00	movl	$107, (%rbx)
100005405:	4c 89 e0	movq	%r12, %rax
100005408:	48 83 c4 68	addq	$104, %rsp
10000540c:	5b	popq	%rbx
10000540d:	41 5c	popq	%r12
10000540f:	41 5d	popq	%r13
100005411:	41 5e	popq	%r14
100005413:	41 5f	popq	%r15
100005415:	5d	popq	%rbp
100005416:	c3	retq
100005417:	48 8d 35 fe eb 03 00	leaq	257022(%rip), %rsi ## literal pool for: "CFBundleVersion"
10000541e:	4c 89 e7	movq	%r12, %rdi
100005421:	e8 34 cc 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100005426:	48 85 c0	testq	%rax, %rax
100005429:	48 8d 0d fc eb 03 00	leaq	257020(%rip), %rcx ## literal pool for: "1.0.0"
100005430:	48 0f 45 c8	cmovneq	%rax, %rcx
100005434:	48 89 8d 78 ff ff ff	movq	%rcx, -136(%rbp)
10000543b:	4c 89 f7	movq	%r14, %rdi
10000543e:	e8 6f cb 03 00	callq	0x100041fb2 ## symbol stub for: _xpc_bundle_get_executable_path
100005443:	48 85 c0	testq	%rax, %rax
100005446:	74 4b	je	0x100005493
100005448:	48 89 45 80	movq	%rax, -128(%rbp)
10000544c:	49 89 de	movq	%rbx, %r14
10000544f:	48 8d 35 f5 eb 03 00	leaq	257013(%rip), %rsi ## literal pool for: "XPCService"
100005456:	4c 89 e7	movq	%r12, %rdi
100005459:	e8 0e cc 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000545e:	48 85 c0	testq	%rax, %rax
100005461:	74 3c	je	0x10000549f
100005463:	48 89 c3	movq	%rax, %rbx
100005466:	48 89 c7	movq	%rax, %rdi
100005469:	e8 58 cc 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000546e:	48 3b 05 6b 2c 05 00	cmpq	339051(%rip), %rax ## literal pool symbol address: __xpc_type_bool
100005475:	75 34	jne	0x1000054ab
100005477:	48 3b 1d 4a 2c 05 00	cmpq	339018(%rip), %rbx ## literal pool symbol address: __xpc_bool_false
10000547e:	75 2b	jne	0x1000054ab
100005480:	48 8b 45 10	movq	16(%rbp), %rax
100005484:	c7 00 6b 00 00 00	movl	$107, (%rax)
10000548a:	48 8b 5d d0	movq	-48(%rbp), %rbx
10000548e:	e9 f7 fe ff ff	jmp	0x10000538a
100005493:	48 8d 15 98 eb 03 00	leaq	256920(%rip), %rdx ## literal pool for: "Bundle has no executable"
10000549a:	e9 ce fe ff ff	jmp	0x10000536d
10000549f:	48 8d 15 b0 eb 03 00	leaq	256944(%rip), %rdx ## literal pool for: "XPC Service Info.plist is missing XPCService dictionary"
1000054a6:	e9 c2 fe ff ff	jmp	0x10000536d
1000054ab:	48 89 df	movq	%rbx, %rdi
1000054ae:	e8 13 cc 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000054b3:	48 3b 05 46 2c 05 00	cmpq	339014(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000054ba:	74 0c	je	0x1000054c8
1000054bc:	48 8d 15 cb eb 03 00	leaq	256971(%rip), %rdx ## literal pool for: "XPCService must be dictionary"
1000054c3:	e9 a5 fe ff ff	jmp	0x10000536d
1000054c8:	f6 45 a0 40	testb	$64, -96(%rbp)
1000054cc:	75 23	jne	0x1000054f1
1000054ce:	4c 89 f7	movq	%r14, %rdi
1000054d1:	4c 89 75 90	movq	%r14, -112(%rbp)
1000054d5:	48 89 de	movq	%rbx, %rsi
1000054d8:	e8 0f 5c 00 00	callq	0x10000b0ec
1000054dd:	48 89 c1	movq	%rax, %rcx
1000054e0:	31 c0	xorl	%eax, %eax
1000054e2:	48 89 45 c0	movq	%rax, -64(%rbp)
1000054e6:	31 c0	xorl	%eax, %eax
1000054e8:	48 89 45 98	movq	%rax, -104(%rbp)
1000054ec:	e9 86 00 00 00	jmp	0x100005577
1000054f1:	48 8d 35 b4 eb 03 00	leaq	256948(%rip), %rsi ## literal pool for: "NSExtension"
1000054f8:	4c 89 e7	movq	%r12, %rdi
1000054fb:	e8 48 cb 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
100005500:	48 85 c0	testq	%rax, %rax
100005503:	74 46	je	0x10000554b
100005505:	48 8d 35 ac eb 03 00	leaq	256940(%rip), %rsi ## literal pool for: "NSExtensionPointIdentifier"
10000550c:	48 89 c7	movq	%rax, %rdi
10000550f:	e8 46 cb 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100005514:	48 85 c0	testq	%rax, %rax
100005517:	74 32	je	0x10000554b
100005519:	48 8b 7d 88	movq	-120(%rbp), %rdi
10000551d:	48 85 ff	testq	%rdi, %rdi
100005520:	48 89 45 c0	movq	%rax, -64(%rbp)
100005524:	74 31	je	0x100005557
100005526:	48 8d 35 1e eb 03 00	leaq	256798(%rip), %rsi ## literal pool for: "XPCService"
10000552d:	e8 3a cb 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100005532:	48 85 c0	testq	%rax, %rax
100005535:	74 24	je	0x10000555b
100005537:	48 8d 35 ef e3 03 00	leaq	254959(%rip), %rsi ## literal pool for: "ProgramArguments"
10000553e:	48 89 c7	movq	%rax, %rdi
100005541:	e8 26 cb 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100005546:	48 89 c1	movq	%rax, %rcx
100005549:	eb 12	jmp	0x10000555d
10000554b:	48 8d 15 81 eb 03 00	leaq	256897(%rip), %rdx ## literal pool for: "App Extension Info.plist is missing NSExtentionPointIdentifier"
100005552:	e9 16 fe ff ff	jmp	0x10000536d
100005557:	31 c9	xorl	%ecx, %ecx
100005559:	eb 06	jmp	0x100005561
10000555b:	31 c9	xorl	%ecx, %ecx
10000555d:	48 8b 45 c0	movq	-64(%rbp), %rax
100005561:	48 89 4d 98	movq	%rcx, -104(%rbp)
100005565:	48 89 c7	movq	%rax, %rdi
100005568:	48 89 de	movq	%rbx, %rsi
10000556b:	e8 3f 5b 00 00	callq	0x10000b0af
100005570:	48 89 c1	movq	%rax, %rcx
100005573:	4c 89 75 90	movq	%r14, -112(%rbp)
100005577:	49 89 ce	movq	%rcx, %r14
10000557a:	48 89 cf	movq	%rcx, %rdi
10000557d:	4c 8b 65 d0	movq	-48(%rbp), %r12
100005581:	4c 89 e6	movq	%r12, %rsi
100005584:	e8 b0 51 00 00	callq	0x10000a739
100005589:	48 89 5d c8	movq	%rbx, -56(%rbp)
10000558d:	48 89 df	movq	%rbx, %rdi
100005590:	4c 89 f6	movq	%r14, %rsi
100005593:	4c 89 e2	movq	%r12, %rdx
100005596:	b9 01 00 00 00	movl	$1, %ecx
10000559b:	e8 2f 0a 00 00	callq	0x100005fcf
1000055a0:	48 83 ec 08	subq	$8, %rsp
1000055a4:	48 8b 7d b8	movq	-72(%rbp), %rdi
1000055a8:	48 8b 75 b0	movq	-80(%rbp), %rsi
1000055ac:	4c 89 e3	movq	%r12, %rbx
1000055af:	48 8b 55 90	movq	-112(%rbp), %rdx
1000055b3:	48 8b 4d 80	movq	-128(%rbp), %rcx
1000055b7:	4c 8b 45 98	movq	-104(%rbp), %r8
1000055bb:	4c 8b 4d a8	movq	-88(%rbp), %r9
1000055bf:	41 54	pushq	%r12
1000055c1:	ff 75 10	pushq	16(%rbp)
1000055c4:	ff 75 a0	pushq	-96(%rbp)
1000055c7:	e8 52 03 00 00	callq	0x10000591e
1000055cc:	48 83 c4 20	addq	$32, %rsp
1000055d0:	48 85 c0	testq	%rax, %rax
1000055d3:	0f 84 7d 02 00 00	je	0x100005856
1000055d9:	49 89 c4	movq	%rax, %r12
1000055dc:	4c 89 75 a8	movq	%r14, -88(%rbp)
1000055e0:	48 b8 02 00 00 00 00 10 00 00	movabsq	$17592186044418, %rax
1000055ea:	49 09 84 24 0d 05 00 00	orq	%rax, 1293(%r12)
1000055f2:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000055f6:	e8 07 cb 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000055fb:	49 89 84 24 78 02 00 00	movq	%rax, 632(%r12)
100005603:	4c 89 e7	movq	%r12, %rdi
100005606:	be 01 00 00 00	movl	$1, %esi
10000560b:	48 89 da	movq	%rbx, %rdx
10000560e:	31 c9	xorl	%ecx, %ecx
100005610:	e8 73 d2 00 00	callq	0x100012888
100005615:	49 89 c6	movq	%rax, %r14
100005618:	48 8d 15 61 0b 00 00	leaq	2913(%rip), %rdx
10000561f:	48 8b 7d c8	movq	-56(%rbp), %rdi
100005623:	48 89 c6	movq	%rax, %rsi
100005626:	e8 db c9 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10000562b:	4c 89 f7	movq	%r14, %rdi
10000562e:	e8 f9 d2 00 00	callq	0x10001292c
100005633:	31 db	xorl	%ebx, %ebx
100005635:	49 0f ba a4 24 0d 05 00 00 26	btq	$38, 1293(%r12)
10000563f:	0f 93 c3	setae	%bl
100005642:	83 cb 02	orl	$2, %ebx
100005645:	c1 e3 09	shll	$9, %ebx
100005648:	48 8d 35 4a ee 03 00	leaq	257610(%rip), %rsi ## literal pool for: "RunLoopType"
10000564f:	48 8b 7d c8	movq	-56(%rbp), %rdi
100005653:	e8 02 ca 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100005658:	48 85 c0	testq	%rax, %rax
10000565b:	74 4e	je	0x1000056ab
10000565d:	49 89 c6	movq	%rax, %r14
100005660:	48 8d 35 8c f0 03 00	leaq	258188(%rip), %rsi ## literal pool for: "_UIApplicationMain"
100005667:	48 89 c7	movq	%rax, %rdi
10000566a:	e8 bd c7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000566f:	89 45 b0	movl	%eax, -80(%rbp)
100005672:	48 8d 35 8d f0 03 00	leaq	258189(%rip), %rsi ## literal pool for: "_NSApplicationMain"
100005679:	4c 89 f7	movq	%r14, %rdi
10000567c:	e8 ab c7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100005681:	89 45 b8	movl	%eax, -72(%rbp)
100005684:	48 8d 35 8e f0 03 00	leaq	258190(%rip), %rsi ## literal pool for: "_WebKit"
10000568b:	4c 89 f7	movq	%r14, %rdi
10000568e:	e8 99 c7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100005693:	83 7d b0 00	cmpl	$0, -80(%rbp)
100005697:	b9 00 01 00 00	movl	$256, %ecx
10000569c:	0f 44 d9	cmovel	%ecx, %ebx
10000569f:	83 7d b8 00	cmpl	$0, -72(%rbp)
1000056a3:	0f 44 d9	cmovel	%ecx, %ebx
1000056a6:	85 c0	testl	%eax, %eax
1000056a8:	0f 44 d9	cmovel	%ecx, %ebx
1000056ab:	41 89 9c 24 20 03 00 00	movl	%ebx, 800(%r12)
1000056b3:	48 8d 35 1e ee 03 00	leaq	257566(%rip), %rsi ## literal pool for: "_ProcessType"
1000056ba:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000056be:	e8 97 c9 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000056c3:	48 85 c0	testq	%rax, %rax
1000056c6:	74 0b	je	0x1000056d3
1000056c8:	4c 89 e7	movq	%r12, %rdi
1000056cb:	48 89 c6	movq	%rax, %rsi
1000056ce:	e8 30 da ff ff	callq	0x100003103
1000056d3:	41 81 bc 24 20 03 00 00 00 01 00 00	cmpl	$256, 800(%r12)
1000056df:	48 8b 5d 88	movq	-120(%rbp), %rbx
1000056e3:	75 0c	jne	0x1000056f1
1000056e5:	41 c7 84 24 24 03 00 00 02 00 00 00	movl	$2, 804(%r12)
1000056f1:	4c 89 e7	movq	%r12, %rdi
1000056f4:	4c 8b 75 a8	movq	-88(%rbp), %r14
1000056f8:	4c 89 f6	movq	%r14, %rsi
1000056fb:	48 8b 55 d0	movq	-48(%rbp), %rdx
1000056ff:	e8 75 51 00 00	callq	0x10000a879
100005704:	4c 89 e7	movq	%r12, %rdi
100005707:	4c 89 f6	movq	%r14, %rsi
10000570a:	e8 2d 54 00 00	callq	0x10000ab3c
10000570f:	4c 89 f7	movq	%r14, %rdi
100005712:	e8 e5 c9 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100005717:	f6 45 a0 40	testb	$64, -96(%rbp)
10000571b:	74 65	je	0x100005782
10000571d:	48 8b 7d c0	movq	-64(%rbp), %rdi
100005721:	48 85 ff	testq	%rdi, %rdi
100005724:	74 0d	je	0x100005733
100005726:	e8 b7 98 00 00	callq	0x10000efe2
10000572b:	49 89 84 24 48 02 00 00	movq	%rax, 584(%r12)
100005733:	41 80 8c 24 11 05 00 00 04	orb	$4, 1297(%r12)
10000573c:	48 85 db	testq	%rbx, %rbx
10000573f:	74 41	je	0x100005782
100005741:	48 8d 35 03 e9 03 00	leaq	256259(%rip), %rsi ## literal pool for: "XPCService"
100005748:	48 89 df	movq	%rbx, %rdi
10000574b:	e8 1c c9 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100005750:	48 85 c0	testq	%rax, %rax
100005753:	74 2d	je	0x100005782
100005755:	48 8d 35 4d e2 03 00	leaq	254541(%rip), %rsi ## literal pool for: "PersonaEnterprise"
10000575c:	48 89 c7	movq	%rax, %rdi
10000575f:	e8 08 c9 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100005764:	48 85 c0	testq	%rax, %rax
100005767:	74 19	je	0x100005782
100005769:	48 89 c7	movq	%rax, %rdi
10000576c:	e8 61 c9 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100005771:	41 89 84 24 f8 04 00 00	movl	%eax, 1272(%r12)
100005779:	41 80 8c 24 13 05 00 00 20	orb	$32, 1299(%r12)
100005782:	48 8d 35 89 e9 03 00	leaq	256393(%rip), %rsi ## literal pool for: "_OmitSandboxParameters"
100005789:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000578d:	e8 a4 c8 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100005792:	31 c9	xorl	%ecx, %ecx
100005794:	84 c0	testb	%al, %al
100005796:	0f 94 c1	sete	%cl
100005799:	48 c1 e1 20	shlq	$32, %rcx
10000579d:	48 b8 ff ff ff ff fe ff ff ff	movabsq	$-4294967297, %rax
1000057a7:	49 23 84 24 0d 05 00 00	andq	1293(%r12), %rax
1000057af:	48 09 c8	orq	%rcx, %rax
1000057b2:	49 89 84 24 0d 05 00 00	movq	%rax, 1293(%r12)
1000057ba:	4c 89 e0	movq	%r12, %rax
1000057bd:	48 05 18 05 00 00	addq	$1304, %rax
1000057c3:	49 89 84 24 38 02 00 00	movq	%rax, 568(%r12)
1000057cb:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
1000057d2:	e8 0b 98 00 00	callq	0x10000efe2
1000057d7:	49 89 84 24 40 02 00 00	movq	%rax, 576(%r12)
1000057df:	41 0f b6 84 24 15 05 00 00	movzbl	1301(%r12), %eax
1000057e8:	49 8b 8c 24 0d 05 00 00	movq	1293(%r12), %rcx
1000057f0:	48 89 ca	movq	%rcx, %rdx
1000057f3:	48 0f ba ea 28	btsq	$40, %rdx
1000057f8:	49 89 94 24 0d 05 00 00	movq	%rdx, 1293(%r12)
100005800:	41 81 bc 24 20 03 00 00 00 07 00 00	cmpl	$1792, 800(%r12)
10000580c:	75 1d	jne	0x10000582b
10000580e:	48 ba 00 00 00 00 00 01 00 40	movabsq	$4611687117939015680, %rdx
100005818:	48 09 d1	orq	%rdx, %rcx
10000581b:	49 89 8c 24 0d 05 00 00	movq	%rcx, 1293(%r12)
100005823:	41 88 84 24 15 05 00 00	movb	%al, 1301(%r12)
10000582b:	4c 89 e7	movq	%r12, %rdi
10000582e:	4c 89 fe	movq	%r15, %rsi
100005831:	48 8b 5d d0	movq	-48(%rbp), %rbx
100005835:	48 89 da	movq	%rbx, %rdx
100005838:	e8 85 f3 ff ff	callq	0x100004bc2
10000583d:	48 8b 4d 10	movq	16(%rbp), %rcx
100005841:	89 01	movl	%eax, (%rcx)
100005843:	85 c0	testl	%eax, %eax
100005845:	74 1c	je	0x100005863
100005847:	4c 89 e7	movq	%r12, %rdi
10000584a:	31 f6	xorl	%esi, %esi
10000584c:	e8 00 d1 00 00	callq	0x100012951
100005851:	e9 34 fb ff ff	jmp	0x10000538a
100005856:	4c 89 f7	movq	%r14, %rdi
100005859:	e8 9e c8 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000585e:	e9 27 fb ff ff	jmp	0x10000538a
100005863:	4d 8b 8c 24 58 02 00 00	movq	600(%r12), %r9
10000586b:	4c 89 e7	movq	%r12, %rdi
10000586e:	4c 89 fe	movq	%r15, %rsi
100005871:	4c 89 ea	movq	%r13, %rdx
100005874:	31 c9	xorl	%ecx, %ecx
100005876:	4c 8b 85 70 ff ff ff	movq	-144(%rbp), %r8
10000587d:	e8 c4 f7 ff ff	callq	0x100005046
100005882:	49 83 bc 24 e8 01 00 00 00	cmpq	$0, 488(%r12)
10000588b:	74 2f	je	0x1000058bc
10000588d:	48 8d 15 c1 e2 03 00	leaq	254657(%rip), %rdx ## literal pool for: "Ignoring launch events for a bundle"
100005894:	48 89 df	movq	%rbx, %rdi
100005897:	be 04 00 00 00	movl	$4, %esi
10000589c:	31 c0	xorl	%eax, %eax
10000589e:	e8 a2 8d 00 00	callq	0x10000e645
1000058a3:	49 8b bc 24 e8 01 00 00	movq	488(%r12), %rdi
1000058ab:	e8 4c c8 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000058b0:	49 c7 84 24 e8 01 00 00 00 00 00 00	movq	$0, 488(%r12)
1000058bc:	48 89 df	movq	%rbx, %rdi
1000058bf:	e8 51 8d 00 00	callq	0x10000e615
1000058c4:	49 0f ba a4 24 0d 05 00 00 26	btq	$38, 1293(%r12)
1000058ce:	0f 93 c0	setae	%al
1000058d1:	48 8d 0d e0 ce 05 00	leaq	380640(%rip), %rcx
1000058d8:	80 39 00	cmpb	$0, (%rcx)
1000058db:	0f 94 c1	sete	%cl
1000058de:	08 c1	orb	%al, %cl
1000058e0:	80 f9 01	cmpb	$1, %cl
1000058e3:	75 10	jne	0x1000058f5
1000058e5:	48 8d 05 cb ce 05 00	leaq	380619(%rip), %rax
1000058ec:	80 38 00	cmpb	$0, (%rax)
1000058ef:	0f 84 10 fb ff ff	je	0x100005405
1000058f5:	49 c7 84 24 3c 03 00 00 ff ff ff ff	movq	$-1, 828(%r12)
100005901:	41 80 a4 24 34 03 00 00 f3	andb	$-13, 820(%r12)
10000590a:	e9 f6 fa ff ff	jmp	0x100005405
10000590f:	e8 91 96 03 00	callq	0x10003efa5
100005914:	e8 a1 96 03 00	callq	0x10003efba
100005919:	e8 b1 96 03 00	callq	0x10003efcf
10000591e:	55	pushq	%rbp
10000591f:	48 89 e5	movq	%rsp, %rbp
100005922:	41 57	pushq	%r15
100005924:	41 56	pushq	%r14
100005926:	41 55	pushq	%r13
100005928:	41 54	pushq	%r12
10000592a:	53	pushq	%rbx
10000592b:	48 83 ec 48	subq	$72, %rsp
10000592f:	4c 89 4d 98	movq	%r9, -104(%rbp)
100005933:	4d 89 c6	movq	%r8, %r14
100005936:	49 89 cc	movq	%rcx, %r12
100005939:	48 89 d3	movq	%rdx, %rbx
10000593c:	49 89 f7	movq	%rsi, %r15
10000593f:	48 89 7d a0	movq	%rdi, -96(%rbp)
100005943:	4c 8b 6d 18	movq	24(%rbp), %r13
100005947:	48 8d 35 ef e2 03 00	leaq	254703(%rip), %rsi ## literal pool for: "shell"
10000594e:	48 89 d7	movq	%rdx, %rdi
100005951:	e8 d6 c4 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100005956:	85 c0	testl	%eax, %eax
100005958:	74 41	je	0x10000599b
10000595a:	4d 85 f6	testq	%r14, %r14
10000595d:	74 4b	je	0x1000059aa
10000595f:	4c 8b 6d 20	movq	32(%rbp), %r13
100005963:	4c 89 f7	movq	%r14, %rdi
100005966:	e8 5b c7 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000596b:	48 3b 05 66 27 05 00	cmpq	337766(%rip), %rax ## literal pool symbol address: __xpc_type_array
100005972:	74 4b	je	0x1000059bf
100005974:	48 8d 15 c8 e2 03 00	leaq	254664(%rip), %rdx ## literal pool for: "ProgramArguments is not an array."
10000597b:	31 db	xorl	%ebx, %ebx
10000597d:	4c 89 ef	movq	%r13, %rdi
100005980:	be 03 00 00 00	movl	$3, %esi
100005985:	31 c0	xorl	%eax, %eax
100005987:	e8 b9 8c 00 00	callq	0x10000e645
10000598c:	48 8b 45 18	movq	24(%rbp), %rax
100005990:	c7 00 6f 00 00 00	movl	$111, (%rax)
100005996:	e9 96 04 00 00	jmp	0x100005e31
10000599b:	41 c7 45 00 8c 00 00 00	movl	$140, (%r13)
1000059a3:	31 db	xorl	%ebx, %ebx
1000059a5:	e9 87 04 00 00	jmp	0x100005e31
1000059aa:	4c 89 65 b0	movq	%r12, -80(%rbp)
1000059ae:	31 c0	xorl	%eax, %eax
1000059b0:	48 89 45 c0	movq	%rax, -64(%rbp)
1000059b4:	45 31 e4	xorl	%r12d, %r12d
1000059b7:	45 31 f6	xorl	%r14d, %r14d
1000059ba:	e9 4e 01 00 00	jmp	0x100005b0d
1000059bf:	4c 89 7d b8	movq	%r15, -72(%rbp)
1000059c3:	4c 89 65 b0	movq	%r12, -80(%rbp)
1000059c7:	48 89 5d d0	movq	%rbx, -48(%rbp)
1000059cb:	4c 89 f7	movq	%r14, %rdi
1000059ce:	e8 79 c5 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000059d3:	48 85 c0	testq	%rax, %rax
1000059d6:	74 4c	je	0x100005a24
1000059d8:	45 31 ff	xorl	%r15d, %r15d
1000059db:	4c 8b 2d 46 27 05 00	movq	337734(%rip), %r13 ## literal pool symbol address: __xpc_type_string
1000059e2:	45 31 e4	xorl	%r12d, %r12d
1000059e5:	4c 89 f7	movq	%r14, %rdi
1000059e8:	4c 89 fe	movq	%r15, %rsi
1000059eb:	e8 6e c5 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
1000059f0:	48 89 c3	movq	%rax, %rbx
1000059f3:	48 89 c7	movq	%rax, %rdi
1000059f6:	e8 cb c6 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000059fb:	4c 39 e8	cmpq	%r13, %rax
1000059fe:	0f 85 3f 04 00 00	jne	0x100005e43
100005a04:	48 89 df	movq	%rbx, %rdi
100005a07:	e8 14 c7 03 00	callq	0x100042120 ## symbol stub for: _xpc_string_get_length
100005a0c:	49 01 c4	addq	%rax, %r12
100005a0f:	49 ff c4	incq	%r12
100005a12:	49 ff c7	incq	%r15
100005a15:	4c 89 f7	movq	%r14, %rdi
100005a18:	e8 2f c5 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100005a1d:	49 39 c7	cmpq	%rax, %r15
100005a20:	72 c3	jb	0x1000059e5
100005a22:	eb 03	jmp	0x100005a27
100005a24:	45 31 e4	xorl	%r12d, %r12d
100005a27:	4c 89 75 90	movq	%r14, -112(%rbp)
100005a2b:	4c 89 f7	movq	%r14, %rdi
100005a2e:	e8 19 c5 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100005a33:	49 89 c6	movq	%rax, %r14
100005a36:	44 89 f0	movl	%r14d, %eax
100005a39:	48 ff c0	incq	%rax
100005a3c:	48 89 c7	movq	%rax, %rdi
100005a3f:	48 c1 e7 1f	shlq	$31, %rdi
100005a43:	48 c1 ff 1f	sarq	$31, %rdi
100005a47:	48 39 c7	cmpq	%rax, %rdi
100005a4a:	4c 8b 7d b8	movq	-72(%rbp), %r15
100005a4e:	0f 85 01 04 00 00	jne	0x100005e55
100005a54:	48 85 ff	testq	%rdi, %rdi
100005a57:	0f 88 f8 03 00 00	js	0x100005e55
100005a5d:	48 b8 ff ff ff ff 01 00 00 00	movabsq	$8589934591, %rax
100005a67:	48 21 c7	andq	%rax, %rdi
100005a6a:	48 c1 e7 03	shlq	$3, %rdi
100005a6e:	4c 01 e7	addq	%r12, %rdi
100005a71:	48 8b 5d d0	movq	-48(%rbp), %rbx
100005a75:	0f 82 da 03 00 00	jb	0x100005e55
100005a7b:	e8 65 7a 00 00	callq	0x10000d4e5
100005a80:	ba ff ff ff ff	movl	$4294967295, %edx
100005a85:	4c 21 f2	andq	%r14, %rdx
100005a88:	48 89 45 c0	movq	%rax, -64(%rbp)
100005a8c:	74 7f	je	0x100005b0d
100005a8e:	4c 89 65 a8	movq	%r12, -88(%rbp)
100005a92:	4c 89 75 c8	movq	%r14, -56(%rbp)
100005a96:	4a 8d 0c f5 08 00 00 00	leaq	8(,%r14,8), %rcx
100005a9e:	49 bd f8 ff ff ff 07 00 00 00	movabsq	$34359738360, %r13
100005aa8:	49 21 cd	andq	%rcx, %r13
100005aab:	49 01 c5	addq	%rax, %r13
100005aae:	45 31 f6	xorl	%r14d, %r14d
100005ab1:	48 8b 7d 90	movq	-112(%rbp), %rdi
100005ab5:	4c 89 f6	movq	%r14, %rsi
100005ab8:	49 89 d4	movq	%rdx, %r12
100005abb:	e8 9e c4 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100005ac0:	48 89 c3	movq	%rax, %rbx
100005ac3:	48 89 c7	movq	%rax, %rdi
100005ac6:	e8 5b c6 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100005acb:	49 89 c7	movq	%rax, %r15
100005ace:	48 89 df	movq	%rbx, %rdi
100005ad1:	e8 4a c6 03 00	callq	0x100042120 ## symbol stub for: _xpc_string_get_length
100005ad6:	48 89 c3	movq	%rax, %rbx
100005ad9:	48 8b 45 c0	movq	-64(%rbp), %rax
100005add:	4e 89 2c f0	movq	%r13, (%rax,%r14,8)
100005ae1:	4c 89 ef	movq	%r13, %rdi
100005ae4:	4c 89 fe	movq	%r15, %rsi
100005ae7:	e8 46 c3 03 00	callq	0x100041e32 ## symbol stub for: _strcpy
100005aec:	4c 89 e2	movq	%r12, %rdx
100005aef:	49 01 dd	addq	%rbx, %r13
100005af2:	49 ff c5	incq	%r13
100005af5:	49 ff c6	incq	%r14
100005af8:	4d 39 f4	cmpq	%r14, %r12
100005afb:	75 b4	jne	0x100005ab1
100005afd:	48 8b 5d d0	movq	-48(%rbp), %rbx
100005b01:	4c 8b 7d b8	movq	-72(%rbp), %r15
100005b05:	4c 8b 75 c8	movq	-56(%rbp), %r14
100005b09:	4c 8b 65 a8	movq	-88(%rbp), %r12
100005b0d:	4c 89 75 c8	movq	%r14, -56(%rbp)
100005b11:	48 89 5d d0	movq	%rbx, -48(%rbp)
100005b15:	48 89 df	movq	%rbx, %rdi
100005b18:	e8 39 c3 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100005b1d:	48 8d 78 01	leaq	1(%rax), %rdi
100005b21:	e8 5b d3 00 00	callq	0x100012e81
100005b26:	48 89 c3	movq	%rax, %rbx
100005b29:	48 8b 7d a0	movq	-96(%rbp), %rdi
100005b2d:	e8 06 c3 03 00	callq	0x100041e38 ## symbol stub for: _strdup
100005b32:	48 89 83 68 01 00 00	movq	%rax, 360(%rbx)
100005b39:	4d 85 ff	testq	%r15, %r15
100005b3c:	74 19	je	0x100005b57
100005b3e:	f3 41 0f 6f 07	movdqu	(%r15), %xmm0
100005b43:	41 0f 10 4f 10	movups	16(%r15), %xmm1
100005b48:	0f 11 8b 80 01 00 00	movups	%xmm1, 384(%rbx)
100005b4f:	f3 0f 7f 83 70 01 00 00	movdqu	%xmm0, 368(%rbx)
100005b57:	45 31 ed	xorl	%r13d, %r13d
100005b5a:	44 88 ab a0 01 00 00	movb	%r13b, 416(%rbx)
100005b61:	4c 8b 75 b0	movq	-80(%rbp), %r14
100005b65:	4c 89 f7	movq	%r14, %rdi
100005b68:	e8 e9 c2 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100005b6d:	4c 01 e0	addq	%r12, %rax
100005b70:	48 05 cd 00 00 00	addq	$205, %rax
100005b76:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100005b7d:	4c 89 f7	movq	%r14, %rdi
100005b80:	e8 5d 94 00 00	callq	0x10000efe2
100005b85:	48 89 83 58 02 00 00	movq	%rax, 600(%rbx)
100005b8c:	48 8b 45 c8	movq	-56(%rbp), %rax
100005b90:	89 83 a4 01 00 00	movl	%eax, 420(%rbx)
100005b96:	48 8b 45 c0	movq	-64(%rbp), %rax
100005b9a:	48 89 83 a8 01 00 00	movq	%rax, 424(%rbx)
100005ba1:	c7 83 e4 02 00 00 0a 00 00 00	movl	$10, 740(%rbx)
100005bab:	48 8d 05 a6 ca 05 00	leaq	379558(%rip), %rax
100005bb2:	8b 00	movl	(%rax), %eax
100005bb4:	89 83 e0 02 00 00	movl	%eax, 736(%rbx)
100005bba:	4c 89 ab a0 04 00 00	movq	%r13, 1184(%rbx)
100005bc1:	66 0f ef c0	pxor	%xmm0, %xmm0
100005bc5:	f3 0f 7f 83 90 04 00 00	movdqu	%xmm0, 1168(%rbx)
100005bcd:	f3 0f 7f 83 80 04 00 00	movdqu	%xmm0, 1152(%rbx)
100005bd5:	f3 0f 7f 83 70 04 00 00	movdqu	%xmm0, 1136(%rbx)
100005bdd:	f3 0f 7f 83 60 04 00 00	movdqu	%xmm0, 1120(%rbx)
100005be5:	f3 0f 7f 83 50 04 00 00	movdqu	%xmm0, 1104(%rbx)
100005bed:	f3 0f 7f 83 40 04 00 00	movdqu	%xmm0, 1088(%rbx)
100005bf5:	f3 0f 7f 83 30 04 00 00	movdqu	%xmm0, 1072(%rbx)
100005bfd:	f3 0f 7f 83 20 04 00 00	movdqu	%xmm0, 1056(%rbx)
100005c05:	f3 0f 7f 83 10 04 00 00	movdqu	%xmm0, 1040(%rbx)
100005c0d:	f3 0f 7f 83 00 04 00 00	movdqu	%xmm0, 1024(%rbx)
100005c15:	f3 0f 7f 83 f0 03 00 00	movdqu	%xmm0, 1008(%rbx)
100005c1d:	c7 83 f8 02 00 00 05 00 00 00	movl	$5, 760(%rbx)
100005c27:	48 8d 05 32 ca 05 00	leaq	379442(%rip), %rax
100005c2e:	8b 00	movl	(%rax), %eax
100005c30:	89 83 fc 02 00 00	movl	%eax, 764(%rbx)
100005c36:	48 c7 83 20 03 00 00 00 03 00 00	movq	$768, 800(%rbx)
100005c41:	c7 83 38 03 00 00 03 00 00 00	movl	$3, 824(%rbx)
100005c4b:	66 c7 83 e8 04 00 00 00 00	movw	$0, 1256(%rbx)
100005c54:	b8 ff ff ff ff	movl	$4294967295, %eax
100005c59:	48 89 83 e0 04 00 00	movq	%rax, 1248(%rbx)
100005c60:	49 c7 c4 ff ff ff ff	movq	$-1, %r12
100005c67:	4c 89 a3 3c 03 00 00	movq	%r12, 828(%rbx)
100005c6e:	44 88 ab 8a 03 00 00	movb	%r13b, 906(%rbx)
100005c75:	c7 83 8c 03 00 00 00 00 00 00	movl	$0, 908(%rbx)
100005c7f:	4c 89 ab 30 03 00 00	movq	%r13, 816(%rbx)
100005c86:	48 8b 4d 98	movq	-104(%rbp), %rcx
100005c8a:	48 8b 01	movq	(%rcx), %rax
100005c8d:	48 89 83 00 02 00 00	movq	%rax, 512(%rbx)
100005c94:	48 8b 41 18	movq	24(%rcx), %rax
100005c98:	48 89 83 18 02 00 00	movq	%rax, 536(%rbx)
100005c9f:	48 8b 41 20	movq	32(%rcx), %rax
100005ca3:	48 89 83 20 02 00 00	movq	%rax, 544(%rbx)
100005caa:	48 8b 41 28	movq	40(%rcx), %rax
100005cae:	48 89 83 28 02 00 00	movq	%rax, 552(%rbx)
100005cb5:	48 8b 41 08	movq	8(%rcx), %rax
100005cb9:	48 89 83 08 02 00 00	movq	%rax, 520(%rbx)
100005cc0:	48 8b 41 10	movq	16(%rcx), %rax
100005cc4:	48 89 83 10 02 00 00	movq	%rax, 528(%rbx)
100005ccb:	48 8b 41 30	movq	48(%rcx), %rax
100005ccf:	48 89 83 30 02 00 00	movq	%rax, 560(%rbx)
100005cd6:	4c 8d bb 18 05 00 00	leaq	1304(%rbx), %r15
100005cdd:	4c 89 ff	movq	%r15, %rdi
100005ce0:	4c 8b 75 d0	movq	-48(%rbp), %r14
100005ce4:	4c 89 f6	movq	%r14, %rsi
100005ce7:	e8 46 c1 03 00	callq	0x100041e32 ## symbol stub for: _strcpy
100005cec:	4c 89 a3 98 02 00 00	movq	%r12, 664(%rbx)
100005cf3:	c7 83 a0 02 00 00 ff ff ff ff	movl	$4294967295, 672(%rbx)
100005cfd:	48 c7 c0 ff fc fb ff	movq	$-262913, %rax
100005d04:	48 23 83 0d 05 00 00	andq	1293(%rbx), %rax
100005d0b:	48 0d 00 00 04 00	orq	$262144, %rax
100005d11:	48 89 83 0d 05 00 00	movq	%rax, 1293(%rbx)
100005d18:	48 8d 35 73 df 03 00	leaq	253811(%rip), %rsi ## literal pool for: "com.apple."
100005d1f:	4c 89 f7	movq	%r14, %rdi
100005d22:	e8 87 95 00 00	callq	0x10000f2ae
100005d27:	0f b6 c0	movzbl	%al, %eax
100005d2a:	48 c1 e0 39	shlq	$57, %rax
100005d2e:	48 b9 ff ff ff ff ff ff ff fd	movabsq	$-144115188075855873, %rcx
100005d38:	48 23 8b 0d 05 00 00	andq	1293(%rbx), %rcx
100005d3f:	48 09 c1	orq	%rax, %rcx
100005d42:	48 89 8b 0d 05 00 00	movq	%rcx, 1293(%rbx)
100005d49:	66 c7 83 b0 03 00 00 64 00	movw	$100, 944(%rbx)
100005d52:	48 89 d8	movq	%rbx, %rax
100005d55:	48 05 b8 00 00 00	addq	$184, %rax
100005d5b:	4c 89 ab b8 00 00 00	movq	%r13, 184(%rbx)
100005d62:	48 89 83 c0 00 00 00	movq	%rax, 192(%rbx)
100005d69:	8b 83 d0 00 00 00	movl	208(%rbx), %eax
100005d6f:	89 83 e0 00 00 00	movl	%eax, 224(%rbx)
100005d75:	48 8b 83 c8 00 00 00	movq	200(%rbx), %rax
100005d7c:	48 89 83 d8 00 00 00	movq	%rax, 216(%rbx)
100005d83:	c7 83 d0 00 00 00 37 0a 00 00	movl	$2615, 208(%rbx)
100005d8d:	48 8d 05 09 df 03 00	leaq	253705(%rip), %rax ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/service_create.c"
100005d94:	48 89 83 c8 00 00 00	movq	%rax, 200(%rbx)
100005d9b:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100005d9f:	f3 0f 7f 43 08	movdqu	%xmm0, 8(%rbx)
100005da4:	f3 0f 7f 43 18	movdqu	%xmm0, 24(%rbx)
100005da9:	4c 8b 65 10	movq	16(%rbp), %r12
100005dad:	41 f6 c4 04	testb	$4, %r12b
100005db1:	75 17	jne	0x100005dca
100005db3:	48 8d 35 7b df 03 00	leaq	253819(%rip), %rsi ## literal pool for: "XPC_SERVICE_NAME"
100005dba:	48 89 df	movq	%rbx, %rdi
100005dbd:	4c 89 f2	movq	%r14, %rdx
100005dc0:	b9 01 00 00 00	movl	$1, %ecx
100005dc5:	e8 9d d2 ff ff	callq	0x100003067
100005dca:	41 0f ba e4 08	btl	$8, %r12d
100005dcf:	73 07	jae	0x100005dd8
100005dd1:	80 8b 13 05 00 00 08	orb	$8, 1299(%rbx)
100005dd8:	41 0f ba e4 09	btl	$9, %r12d
100005ddd:	73 07	jae	0x100005de6
100005ddf:	80 8b 13 05 00 00 02	orb	$2, 1299(%rbx)
100005de6:	41 f6 c4 40	testb	$64, %r12b
100005dea:	74 07	je	0x100005df3
100005dec:	80 8b 11 05 00 00 40	orb	$64, 1297(%rbx)
100005df3:	48 8d 35 4c df 03 00	leaq	253772(%rip), %rsi ## literal pool for: "com.apple.WindowServer"
100005dfa:	4c 89 ff	movq	%r15, %rdi
100005dfd:	e8 2a c0 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100005e02:	85 c0	testl	%eax, %eax
100005e04:	75 07	jne	0x100005e0d
100005e06:	80 8b 10 05 00 00 80	orb	$-128, 1296(%rbx)
100005e0d:	48 8d 35 49 df 03 00	leaq	253769(%rip), %rsi ## literal pool for: "com.apple.loginwindow"
100005e14:	4c 89 ff	movq	%r15, %rdi
100005e17:	e8 10 c0 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100005e1c:	85 c0	testl	%eax, %eax
100005e1e:	75 07	jne	0x100005e27
100005e20:	80 8b 12 05 00 00 40	orb	$64, 1298(%rbx)
100005e27:	c7 83 04 05 00 00 00 00 00 00	movl	$0, 1284(%rbx)
100005e31:	48 89 d8	movq	%rbx, %rax
100005e34:	48 83 c4 48	addq	$72, %rsp
100005e38:	5b	popq	%rbx
100005e39:	41 5c	popq	%r12
100005e3b:	41 5d	popq	%r13
100005e3d:	41 5e	popq	%r14
100005e3f:	41 5f	popq	%r15
100005e41:	5d	popq	%rbp
100005e42:	c3	retq
100005e43:	48 8d 15 1b de 03 00	leaq	253467(%rip), %rdx ## literal pool for: "ProgramArguments is not an array of strings."
100005e4a:	31 db	xorl	%ebx, %ebx
100005e4c:	48 8b 7d 20	movq	32(%rbp), %rdi
100005e50:	e9 2b fb ff ff	jmp	0x100005980
100005e55:	0f 0b	ud2
100005e57:	55	pushq	%rbp
100005e58:	48 89 e5	movq	%rsp, %rbp
100005e5b:	41 57	pushq	%r15
100005e5d:	41 56	pushq	%r14
100005e5f:	53	pushq	%rbx
100005e60:	50	pushq	%rax
100005e61:	48 89 d3	movq	%rdx, %rbx
100005e64:	49 89 f6	movq	%rsi, %r14
100005e67:	49 89 ff	movq	%rdi, %r15
100005e6a:	48 89 d7	movq	%rdx, %rdi
100005e6d:	e8 54 c2 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100005e72:	48 3b 05 b7 22 05 00	cmpq	336567(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
100005e79:	75 28	jne	0x100005ea3
100005e7b:	4d 8b 7f 20	movq	32(%r15), %r15
100005e7f:	48 89 df	movq	%rbx, %rdi
100005e82:	e8 b1 c2 03 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
100005e87:	4c 89 ff	movq	%r15, %rdi
100005e8a:	4c 89 f6	movq	%r14, %rsi
100005e8d:	89 c2	movl	%eax, %edx
100005e8f:	31 c9	xorl	%ecx, %ecx
100005e91:	e8 2e b8 02 00	callq	0x1000316c4
100005e96:	b0 01	movb	$1, %al
100005e98:	48 83 c4 08	addq	$8, %rsp
100005e9c:	5b	popq	%rbx
100005e9d:	41 5e	popq	%r14
100005e9f:	41 5f	popq	%r15
100005ea1:	5d	popq	%rbp
100005ea2:	c3	retq
100005ea3:	e8 3c 91 03 00	callq	0x10003efe4
100005ea8:	55	pushq	%rbp
100005ea9:	48 89 e5	movq	%rsp, %rbp
100005eac:	41 57	pushq	%r15
100005eae:	41 56	pushq	%r14
100005eb0:	53	pushq	%rbx
100005eb1:	48 83 ec 38	subq	$56, %rsp
100005eb5:	49 89 d7	movq	%rdx, %r15
100005eb8:	48 89 f3	movq	%rsi, %rbx
100005ebb:	49 89 fe	movq	%rdi, %r14
100005ebe:	48 89 f7	movq	%rsi, %rdi
100005ec1:	e8 00 c2 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100005ec6:	48 3b 05 33 22 05 00	cmpq	336435(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100005ecd:	74 36	je	0x100005f05
100005ecf:	48 89 df	movq	%rbx, %rdi
100005ed2:	e8 ef c1 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100005ed7:	48 89 c7	movq	%rax, %rdi
100005eda:	e8 4d c2 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100005edf:	48 8d 15 a2 e0 03 00	leaq	254114(%rip), %rdx ## literal pool for: "Invalid type for event stream (stream/type): %s/%s"
100005ee6:	4c 89 ff	movq	%r15, %rdi
100005ee9:	be 03 00 00 00	movl	$3, %esi
100005eee:	4c 89 f1	movq	%r14, %rcx
100005ef1:	49 89 c0	movq	%rax, %r8
100005ef4:	31 c0	xorl	%eax, %eax
100005ef6:	e8 bf 00 01 00	callq	0x100015fba
100005efb:	41 80 8f 0d 05 00 00 01	orb	$1, 1293(%r15)
100005f03:	eb 3c	jmp	0x100005f41
100005f05:	48 8b 05 0c 21 05 00	movq	336140(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100005f0c:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100005f10:	48 89 06	movq	%rax, (%rsi)
100005f13:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100005f1b:	48 8d 05 2a 00 00 00	leaq	42(%rip), %rax
100005f22:	48 89 46 10	movq	%rax, 16(%rsi)
100005f26:	48 8d 05 e3 22 05 00	leaq	336611(%rip), %rax
100005f2d:	48 89 46 18	movq	%rax, 24(%rsi)
100005f31:	4c 89 7e 20	movq	%r15, 32(%rsi)
100005f35:	4c 89 76 28	movq	%r14, 40(%rsi)
100005f39:	48 89 df	movq	%rbx, %rdi
100005f3c:	e8 bf c0 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100005f41:	48 83 c4 38	addq	$56, %rsp
100005f45:	5b	popq	%rbx
100005f46:	41 5e	popq	%r14
100005f48:	41 5f	popq	%r15
100005f4a:	5d	popq	%rbp
100005f4b:	c3	retq
100005f4c:	55	pushq	%rbp
100005f4d:	48 89 e5	movq	%rsp, %rbp
100005f50:	41 57	pushq	%r15
100005f52:	41 56	pushq	%r14
100005f54:	41 54	pushq	%r12
100005f56:	53	pushq	%rbx
100005f57:	48 89 d3	movq	%rdx, %rbx
100005f5a:	49 89 f6	movq	%rsi, %r14
100005f5d:	49 89 fc	movq	%rdi, %r12
100005f60:	48 89 d7	movq	%rdx, %rdi
100005f63:	e8 5e c1 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100005f68:	4d 8b 7c 24 20	movq	32(%r12), %r15
100005f6d:	48 3b 05 8c 21 05 00	cmpq	336268(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100005f74:	74 3b	je	0x100005fb1
100005f76:	48 89 df	movq	%rbx, %rdi
100005f79:	e8 48 c1 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100005f7e:	48 89 c7	movq	%rax, %rdi
100005f81:	e8 a6 c1 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100005f86:	48 8d 15 2e e0 03 00	leaq	253998(%rip), %rdx ## literal pool for: "Invalid type for event (event/type): %s/%s"
100005f8d:	4c 89 ff	movq	%r15, %rdi
100005f90:	be 03 00 00 00	movl	$3, %esi
100005f95:	4c 89 f1	movq	%r14, %rcx
100005f98:	49 89 c0	movq	%rax, %r8
100005f9b:	31 c0	xorl	%eax, %eax
100005f9d:	e8 18 00 01 00	callq	0x100015fba
100005fa2:	49 8b 44 24 20	movq	32(%r12), %rax
100005fa7:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
100005faf:	eb 13	jmp	0x100005fc4
100005fb1:	49 8b 74 24 28	movq	40(%r12), %rsi
100005fb6:	4c 89 ff	movq	%r15, %rdi
100005fb9:	4c 89 f2	movq	%r14, %rdx
100005fbc:	48 89 d9	movq	%rbx, %rcx
100005fbf:	e8 a3 be 02 00	callq	0x100031e67
100005fc4:	b0 01	movb	$1, %al
100005fc6:	5b	popq	%rbx
100005fc7:	41 5c	popq	%r12
100005fc9:	41 5e	popq	%r14
100005fcb:	41 5f	popq	%r15
100005fcd:	5d	popq	%rbp
100005fce:	c3	retq
100005fcf:	55	pushq	%rbp
100005fd0:	48 89 e5	movq	%rsp, %rbp
100005fd3:	41 57	pushq	%r15
100005fd5:	41 56	pushq	%r14
100005fd7:	41 55	pushq	%r13
100005fd9:	41 54	pushq	%r12
100005fdb:	53	pushq	%rbx
100005fdc:	48 83 ec 18	subq	$24, %rsp
100005fe0:	41 89 cc	movl	%ecx, %r12d
100005fe3:	48 89 55 c8	movq	%rdx, -56(%rbp)
100005fe7:	48 89 f3	movq	%rsi, %rbx
100005fea:	49 89 ff	movq	%rdi, %r15
100005fed:	48 8d 35 35 e1 03 00	leaq	254261(%rip), %rsi ## literal pool for: "EnablePressuredExit"
100005ff4:	48 89 df	movq	%rbx, %rdi
100005ff7:	e8 70 c0 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100005ffc:	49 89 c6	movq	%rax, %r14
100005fff:	48 8d 35 37 e1 03 00	leaq	254263(%rip), %rsi ## literal pool for: "EnableTransactions"
100006006:	48 89 df	movq	%rbx, %rdi
100006009:	e8 5e c0 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000600e:	49 89 c5	movq	%rax, %r13
100006011:	48 8d 35 38 e1 03 00	leaq	254264(%rip), %rsi ## literal pool for: "KeepAlive"
100006018:	4c 89 ff	movq	%r15, %rdi
10000601b:	e8 16 c0 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100006020:	84 c0	testb	%al, %al
100006022:	44 89 65 d4	movl	%r12d, -44(%rbp)
100006026:	74 19	je	0x100006041
100006028:	41 bf 01 00 00 00	movl	$1, %r15d
10000602e:	45 84 e4	testb	%r12b, %r12b
100006031:	74 68	je	0x10000609b
100006033:	48 8d 3d 20 e1 03 00	leaq	254240(%rip), %rdi ## literal pool for: "XPC bundles can't have KeepAlive, they can't even set it as a plist key, how did we get here?"
10000603a:	31 c0	xorl	%eax, %eax
10000603c:	e8 d1 e3 02 00	callq	0x100034412
100006041:	4d 85 f6	testq	%r14, %r14
100006044:	74 20	je	0x100006066
100006046:	4c 89 f7	movq	%r14, %rdi
100006049:	e8 46 bf 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10000604e:	45 31 ff	xorl	%r15d, %r15d
100006051:	84 c0	testb	%al, %al
100006053:	74 46	je	0x10000609b
100006055:	c7 45 d0 03 00 00 00	movl	$3, -48(%rbp)
10000605c:	b0 01	movb	$1, %al
10000605e:	89 45 d4	movl	%eax, -44(%rbp)
100006061:	41 b4 01	movb	$1, %r12b
100006064:	eb 60	jmp	0x1000060c6
100006066:	4d 85 ed	testq	%r13, %r13
100006069:	74 12	je	0x10000607d
10000606b:	4c 89 ef	movq	%r13, %rdi
10000606e:	e8 21 bf 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100006073:	41 bf 02 00 00 00	movl	$2, %r15d
100006079:	84 c0	testb	%al, %al
10000607b:	74 23	je	0x1000060a0
10000607d:	41 bf 04 00 00 00	movl	$4, %r15d
100006083:	80 7d d4 00	cmpb	$0, -44(%rbp)
100006087:	74 12	je	0x10000609b
100006089:	c7 45 d0 03 00 00 00	movl	$3, -48(%rbp)
100006090:	41 b7 01	movb	$1, %r15b
100006093:	41 b6 01	movb	$1, %r14b
100006096:	e9 82 00 00 00	jmp	0x10000611d
10000609b:	4d 85 ed	testq	%r13, %r13
10000609e:	74 14	je	0x1000060b4
1000060a0:	4c 89 ef	movq	%r13, %rdi
1000060a3:	e8 ec be 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
1000060a8:	89 45 d4	movl	%eax, -44(%rbp)
1000060ab:	c7 45 d0 00 00 00 00	movl	$0, -48(%rbp)
1000060b2:	eb 0a	jmp	0x1000060be
1000060b4:	0f b6 45 d4	movzbl	-44(%rbp), %eax
1000060b8:	83 c8 04	orl	$4, %eax
1000060bb:	89 45 d0	movl	%eax, -48(%rbp)
1000060be:	45 31 e4	xorl	%r12d, %r12d
1000060c1:	4d 85 f6	testq	%r14, %r14
1000060c4:	74 33	je	0x1000060f9
1000060c6:	4c 89 f7	movq	%r14, %rdi
1000060c9:	e8 c6 be 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
1000060ce:	41 83 ff 01	cmpl	$1, %r15d
1000060d2:	75 25	jne	0x1000060f9
1000060d4:	45 89 e6	movl	%r12d, %r14d
1000060d7:	44 30 f0	xorb	%r14b, %al
1000060da:	74 1d	je	0x1000060f9
1000060dc:	48 8d 15 d5 e0 03 00	leaq	254165(%rip), %rdx ## literal pool for: "EnablePressuredExit is not compatible with KeepAlive=true. Ignoring EnablePressuredExit."
1000060e3:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000060e7:	be 03 00 00 00	movl	$3, %esi
1000060ec:	31 c0	xorl	%eax, %eax
1000060ee:	e8 52 85 00 00	callq	0x10000e645
1000060f3:	44 8b 7d d4	movl	-44(%rbp), %r15d
1000060f7:	eb 24	jmp	0x10000611d
1000060f9:	41 83 ff 02	cmpl	$2, %r15d
1000060fd:	75 17	jne	0x100006116
1000060ff:	48 8d 15 0b e1 03 00	leaq	254219(%rip), %rdx ## literal pool for: "Assuming EnablePressuredExit=false given EnableTransactions=false."
100006106:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000610a:	be 04 00 00 00	movl	$4, %esi
10000610f:	31 c0	xorl	%eax, %eax
100006111:	e8 2f 85 00 00	callq	0x10000e645
100006116:	44 8b 7d d4	movl	-44(%rbp), %r15d
10000611a:	45 89 e6	movl	%r12d, %r14d
10000611d:	4d 85 ed	testq	%r13, %r13
100006120:	74 2a	je	0x10000614c
100006122:	4c 89 ef	movq	%r13, %rdi
100006125:	e8 6a be 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10000612a:	41 38 c7	cmpb	%al, %r15b
10000612d:	74 1d	je	0x10000614c
10000612f:	83 7d d0 03	cmpl	$3, -48(%rbp)
100006133:	75 17	jne	0x10000614c
100006135:	48 8d 15 18 e1 03 00	leaq	254232(%rip), %rdx ## literal pool for: "Service sets EnableTransactions=false and EnablePressuredExit=true, which makes no sense. Enabling Transactions."
10000613c:	48 8b 7d c8	movq	-56(%rbp), %rdi
100006140:	be 03 00 00 00	movl	$3, %esi
100006145:	31 c0	xorl	%eax, %eax
100006147:	e8 f9 84 00 00	callq	0x10000e645
10000614c:	41 0f b6 d6	movzbl	%r14b, %edx
100006150:	48 8d 35 d2 df 03 00	leaq	253906(%rip), %rsi ## literal pool for: "EnablePressuredExit"
100006157:	48 89 df	movq	%rbx, %rdi
10000615a:	e8 19 bf 03 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10000615f:	41 0f b6 d7	movzbl	%r15b, %edx
100006163:	48 8d 35 d3 df 03 00	leaq	253907(%rip), %rsi ## literal pool for: "EnableTransactions"
10000616a:	48 89 df	movq	%rbx, %rdi
10000616d:	48 83 c4 18	addq	$24, %rsp
100006171:	5b	popq	%rbx
100006172:	41 5c	popq	%r12
100006174:	41 5d	popq	%r13
100006176:	41 5e	popq	%r14
100006178:	41 5f	popq	%r15
10000617a:	5d	popq	%rbp
10000617b:	e9 f8 be 03 00	jmp	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100006180:	55	pushq	%rbp
100006181:	48 89 e5	movq	%rsp, %rbp
100006184:	41 57	pushq	%r15
100006186:	41 56	pushq	%r14
100006188:	41 54	pushq	%r12
10000618a:	53	pushq	%rbx
10000618b:	48 83 ec 60	subq	$96, %rsp
10000618f:	48 89 f3	movq	%rsi, %rbx
100006192:	49 89 ff	movq	%rdi, %r15
100006195:	4c 8b 32	movq	(%rdx), %r14
100006198:	4c 8b 62 08	movq	8(%rdx), %r12
10000619c:	48 89 f7	movq	%rsi, %rdi
10000619f:	e8 22 bf 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000061a4:	48 3b 05 35 1f 05 00	cmpq	335669(%rip), %rax ## literal pool symbol address: __xpc_type_bool
1000061ab:	74 7e	je	0x10000622b
1000061ad:	48 3b 05 5c 1f 05 00	cmpq	335708(%rip), %rax ## literal pool symbol address: __xpc_type_int64
1000061b4:	0f 84 b5 00 00 00	je	0x10000626f
1000061ba:	48 3b 05 47 1f 05 00	cmpq	335687(%rip), %rax ## literal pool symbol address: __xpc_type_double
1000061c1:	0f 84 3b 01 00 00	je	0x100006302
1000061c7:	48 3b 05 22 1f 05 00	cmpq	335650(%rip), %rax ## literal pool symbol address: __xpc_type_data
1000061ce:	0f 84 34 02 00 00	je	0x100006408
1000061d4:	48 3b 05 4d 1f 05 00	cmpq	335693(%rip), %rax ## literal pool symbol address: __xpc_type_string
1000061db:	0f 84 78 02 00 00	je	0x100006459
1000061e1:	48 3b 05 f0 1e 05 00	cmpq	335600(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000061e8:	0f 84 9f 02 00 00	je	0x10000648d
1000061ee:	48 3b 05 0b 1f 05 00	cmpq	335627(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000061f5:	0f 84 0f 03 00 00	je	0x10000650a
1000061fb:	48 89 c7	movq	%rax, %rdi
1000061fe:	e8 29 bf 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100006203:	48 8d 15 bb e0 03 00	leaq	254139(%rip), %rdx ## literal pool for: "Invalid type for service dictionary (key/type): %s/%s"
10000620a:	4c 89 f7	movq	%r14, %rdi
10000620d:	be 03 00 00 00	movl	$3, %esi
100006212:	4c 89 f9	movq	%r15, %rcx
100006215:	49 89 c0	movq	%rax, %r8
100006218:	31 c0	xorl	%eax, %eax
10000621a:	48 83 c4 60	addq	$96, %rsp
10000621e:	5b	popq	%rbx
10000621f:	41 5c	popq	%r12
100006221:	41 5e	popq	%r14
100006223:	41 5f	popq	%r15
100006225:	5d	popq	%rbp
100006226:	e9 8f fd 00 00	jmp	0x100015fba
10000622b:	48 89 df	movq	%rbx, %rdi
10000622e:	e8 61 bd 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100006233:	89 c3	movl	%eax, %ebx
100006235:	41 0f be 07	movsbl	(%r15), %eax
100006239:	83 f8 6a	cmpl	$106, %eax
10000623c:	74 0e	je	0x10000624c
10000623e:	83 f8 5f	cmpl	$95, %eax
100006241:	0f 84 09 01 00 00	je	0x100006350
100006247:	83 f8 4a	cmpl	$74, %eax
10000624a:	75 17	jne	0x100006263
10000624c:	48 8d 35 a8 e0 03 00	leaq	254120(%rip), %rsi ## literal pool for: "JoinExistingSession"
100006253:	4c 89 ff	movq	%r15, %rdi
100006256:	e8 d1 bb 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000625b:	85 c0	testl	%eax, %eax
10000625d:	0f 84 e3 01 00 00	je	0x100006446
100006263:	48 8d 15 ff e0 03 00	leaq	254207(%rip), %rdx ## literal pool for: "Unknown key for Boolean: %s"
10000626a:	e9 b0 01 00 00	jmp	0x10000641f
10000626f:	48 89 df	movq	%rbx, %rdi
100006272:	e8 5b be 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100006277:	48 89 c3	movq	%rax, %rbx
10000627a:	41 0f be 07	movsbl	(%r15), %eax
10000627e:	83 f8 50	cmpl	$80, %eax
100006281:	0f 84 8f 00 00 00	je	0x100006316
100006287:	83 f8 70	cmpl	$112, %eax
10000628a:	0f 84 86 00 00 00	je	0x100006316
100006290:	83 f8 5f	cmpl	$95, %eax
100006293:	0f 85 ab 00 00 00	jne	0x100006344
100006299:	48 8d 35 e5 e0 03 00	leaq	254181(%rip), %rsi ## literal pool for: "_VoluntaryExitTimeOut"
1000062a0:	4c 89 ff	movq	%r15, %rdi
1000062a3:	e8 78 bb 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000062a8:	85 c0	testl	%eax, %eax
1000062aa:	0f 84 a3 02 00 00	je	0x100006553
1000062b0:	48 8d 35 e4 e0 03 00	leaq	254180(%rip), %rsi ## literal pool for: "_LaunchWatchdogTimeOut"
1000062b7:	4c 89 ff	movq	%r15, %rdi
1000062ba:	e8 61 bb 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000062bf:	85 c0	testl	%eax, %eax
1000062c1:	0f 84 ff 02 00 00	je	0x1000065c6
1000062c7:	48 8d 35 e4 e0 03 00	leaq	254180(%rip), %rsi ## literal pool for: "_ThrottleInterval"
1000062ce:	4c 89 ff	movq	%r15, %rdi
1000062d1:	e8 4a bb 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000062d6:	85 c0	testl	%eax, %eax
1000062d8:	75 6a	jne	0x100006344
1000062da:	48 85 db	testq	%rbx, %rbx
1000062dd:	0f 88 54 04 00 00	js	0x100006737
1000062e3:	48 b8 00 00 00 00 01 00 00 00	movabsq	$__mh_execute_header, %rax
1000062ed:	48 39 c3	cmpq	%rax, %rbx
1000062f0:	0f 8c 8b 04 00 00	jl	0x100006781
1000062f6:	48 8d 15 e4 e0 03 00	leaq	254180(%rip), %rdx ## literal pool for: "%s is too large. Ignoring."
1000062fd:	e9 3c 04 00 00	jmp	0x10000673e
100006302:	48 89 df	movq	%rbx, %rdi
100006305:	e8 aa bd 03 00	callq	0x1000420b4 ## symbol stub for: _xpc_double_get_value
10000630a:	48 8d 15 54 e1 03 00	leaq	254292(%rip), %rdx ## literal pool for: "Unknown key for double: %s"
100006311:	e9 09 01 00 00	jmp	0x10000641f
100006316:	48 8d 35 8c d6 03 00	leaq	251532(%rip), %rsi ## literal pool for: "PersonaEnterprise"
10000631d:	4c 89 ff	movq	%r15, %rdi
100006320:	e8 fb ba 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100006325:	85 c0	testl	%eax, %eax
100006327:	0f 84 0c 01 00 00	je	0x100006439
10000632d:	48 8d 35 0c e1 03 00	leaq	254220(%rip), %rsi ## literal pool for: "Platform"
100006334:	4c 89 ff	movq	%r15, %rdi
100006337:	e8 e4 ba 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000633c:	85 c0	testl	%eax, %eax
10000633e:	0f 84 a3 01 00 00	je	0x1000064e7
100006344:	48 8d 15 fe e0 03 00	leaq	254206(%rip), %rdx ## literal pool for: "Unknown key for integer: %s"
10000634b:	e9 cf 00 00 00	jmp	0x10000641f
100006350:	48 8d 35 b8 df 03 00	leaq	253880(%rip), %rsi ## literal pool for: "_MultipleInstances"
100006357:	4c 89 ff	movq	%r15, %rdi
10000635a:	e8 cd ba 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000635f:	85 c0	testl	%eax, %eax
100006361:	0f 84 74 01 00 00	je	0x1000064db
100006367:	48 8d 35 b4 df 03 00	leaq	253876(%rip), %rsi ## literal pool for: "_JoinGUISession"
10000636e:	4c 89 ff	movq	%r15, %rdi
100006371:	e8 b6 ba 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100006376:	85 c0	testl	%eax, %eax
100006378:	0f 84 e1 01 00 00	je	0x10000655f
10000637e:	48 8d 35 ad df 03 00	leaq	253869(%rip), %rsi ## literal pool for: "_AbandonCoalition"
100006385:	4c 89 ff	movq	%r15, %rdi
100006388:	e8 9f ba 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000638d:	85 c0	testl	%eax, %eax
10000638f:	0f 84 3d 02 00 00	je	0x1000065d2
100006395:	48 8d 35 76 dd 03 00	leaq	253302(%rip), %rsi ## literal pool for: "_OmitSandboxParameters"
10000639c:	4c 89 ff	movq	%r15, %rdi
10000639f:	e8 88 ba 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000063a4:	85 c0	testl	%eax, %eax
1000063a6:	0f 84 8d 00 00 00	je	0x100006439
1000063ac:	48 8d 35 91 df 03 00	leaq	253841(%rip), %rsi ## literal pool for: "_HighBitsASLR"
1000063b3:	4c 89 ff	movq	%r15, %rdi
1000063b6:	e8 65 ba 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000063bb:	85 c0	testl	%eax, %eax
1000063bd:	0f 84 09 03 00 00	je	0x1000066cc
1000063c3:	48 8d 35 88 df 03 00	leaq	253832(%rip), %rsi ## literal pool for: "_ExponentialThrottling"
1000063ca:	4c 89 ff	movq	%r15, %rdi
1000063cd:	e8 4e ba 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000063d2:	85 c0	testl	%eax, %eax
1000063d4:	0f 85 89 fe ff ff	jne	0x100006263
1000063da:	0f b6 c3	movzbl	%bl, %eax
1000063dd:	48 b9 ff ff ff ff ff ff ff fd	movabsq	$-144115188075855873, %rcx
1000063e7:	49 23 8e 0d 05 00 00	andq	1293(%r14), %rcx
1000063ee:	48 c1 e0 39	shlq	$57, %rax
1000063f2:	48 09 c1	orq	%rax, %rcx
1000063f5:	49 89 8e 0d 05 00 00	movq	%rcx, 1293(%r14)
1000063fc:	66 41 c7 86 b0 03 00 00 03 00	movw	$3, 944(%r14)
100006406:	eb 31	jmp	0x100006439
100006408:	48 89 df	movq	%rbx, %rdi
10000640b:	e8 de bb 03 00	callq	0x100041fee ## symbol stub for: _xpc_data_get_bytes_ptr
100006410:	48 89 df	movq	%rbx, %rdi
100006413:	e8 dc bb 03 00	callq	0x100041ff4 ## symbol stub for: _xpc_data_get_length
100006418:	48 8d 15 61 e0 03 00	leaq	254049(%rip), %rdx ## literal pool for: "Unknown key for data: %s"
10000641f:	4c 89 f7	movq	%r14, %rdi
100006422:	be 04 00 00 00	movl	$4, %esi
100006427:	4c 89 f9	movq	%r15, %rcx
10000642a:	31 c0	xorl	%eax, %eax
10000642c:	e8 89 fb 00 00	callq	0x100015fba
100006431:	41 80 8e 0d 05 00 00 01	orb	$1, 1293(%r14)
100006439:	48 83 c4 60	addq	$96, %rsp
10000643d:	5b	popq	%rbx
10000643e:	41 5c	popq	%r12
100006440:	41 5e	popq	%r14
100006442:	41 5f	popq	%r15
100006444:	5d	popq	%rbp
100006445:	c3	retq
100006446:	0f b6 c3	movzbl	%bl, %eax
100006449:	48 c1 e0 1e	shlq	$30, %rax
10000644d:	48 c7 c1 ff ff ff bf	movq	$-1073741825, %rcx
100006454:	e9 84 02 00 00	jmp	0x1000066dd
100006459:	48 89 df	movq	%rbx, %rdi
10000645c:	e8 c5 bc 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100006461:	48 89 c3	movq	%rax, %rbx
100006464:	41 0f be 07	movsbl	(%r15), %eax
100006468:	83 f8 5e	cmpl	$94, %eax
10000646b:	0f 8e 82 00 00 00	jle	0x1000064f3
100006471:	83 f8 5f	cmpl	$95, %eax
100006474:	0f 84 91 01 00 00	je	0x10000660b
10000647a:	83 f8 72	cmpl	$114, %eax
10000647d:	0f 84 ef 00 00 00	je	0x100006572
100006483:	83 f8 73	cmpl	$115, %eax
100006486:	74 79	je	0x100006501
100006488:	e9 fc 00 00 00	jmp	0x100006589
10000648d:	41 0f be 3f	movsbl	(%r15), %edi
100006491:	e8 e8 b2 03 00	callq	0x10004177e ## symbol stub for: ___tolower
100006496:	83 f8 70	cmpl	$112, %eax
100006499:	0f 84 49 01 00 00	je	0x1000065e8
10000649f:	83 f8 5f	cmpl	$95, %eax
1000064a2:	0f 85 57 01 00 00	jne	0x1000065ff
1000064a8:	48 8d 35 7b e0 03 00	leaq	254075(%rip), %rsi ## literal pool for: "_AdditionalServices"
1000064af:	4c 89 ff	movq	%r15, %rdi
1000064b2:	e8 75 b9 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000064b7:	85 c0	testl	%eax, %eax
1000064b9:	0f 84 34 02 00 00	je	0x1000066f3
1000064bf:	48 8d 35 78 e0 03 00	leaq	254072(%rip), %rsi ## literal pool for: "_AllowedClients"
1000064c6:	4c 89 ff	movq	%r15, %rdi
1000064c9:	e8 5e b9 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000064ce:	85 c0	testl	%eax, %eax
1000064d0:	0f 85 29 01 00 00	jne	0x1000065ff
1000064d6:	e9 5e ff ff ff	jmp	0x100006439
1000064db:	41 88 9e 0c 05 00 00	movb	%bl, 1292(%r14)
1000064e2:	e9 52 ff ff ff	jmp	0x100006439
1000064e7:	41 89 9e 08 05 00 00	movl	%ebx, 1288(%r14)
1000064ee:	e9 46 ff ff ff	jmp	0x100006439
1000064f3:	83 f8 52	cmpl	$82, %eax
1000064f6:	74 7a	je	0x100006572
1000064f8:	83 f8 53	cmpl	$83, %eax
1000064fb:	0f 85 88 00 00 00	jne	0x100006589
100006501:	48 8d 35 9d df 03 00	leaq	253853(%rip), %rsi ## literal pool for: "ServiceType"
100006508:	eb 6f	jmp	0x100006579
10000650a:	41 0f be 3f	movsbl	(%r15), %edi
10000650e:	e8 6b b2 03 00	callq	0x10004177e ## symbol stub for: ___tolower
100006513:	83 f8 5f	cmpl	$95, %eax
100006516:	0f 84 48 01 00 00	je	0x100006664
10000651c:	83 f8 65	cmpl	$101, %eax
10000651f:	0f 85 9b 01 00 00	jne	0x1000066c0
100006525:	48 8d 35 25 d4 03 00	leaq	250917(%rip), %rsi ## literal pool for: "EnvironmentVariables"
10000652c:	4c 89 ff	movq	%r15, %rdi
10000652f:	e8 f8 b8 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100006534:	85 c0	testl	%eax, %eax
100006536:	0f 85 84 01 00 00	jne	0x1000066c0
10000653c:	48 8d 15 fe 03 00 00	leaq	1022(%rip), %rdx
100006543:	48 89 df	movq	%rbx, %rdi
100006546:	4c 89 f6	movq	%r14, %rsi
100006549:	e8 b8 ba 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10000654e:	e9 e6 fe ff ff	jmp	0x100006439
100006553:	41 89 9e f8 02 00 00	movl	%ebx, 760(%r14)
10000655a:	e9 da fe ff ff	jmp	0x100006439
10000655f:	0f b6 c3	movzbl	%bl, %eax
100006562:	48 c1 e0 1d	shlq	$29, %rax
100006566:	48 c7 c1 ff ff ff df	movq	$-536870913, %rcx
10000656d:	e9 6b 01 00 00	jmp	0x1000066dd
100006572:	48 8d 35 20 df 03 00	leaq	253728(%rip), %rsi ## literal pool for: "RunLoopType"
100006579:	4c 89 ff	movq	%r15, %rdi
10000657c:	e8 ab b8 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100006581:	85 c0	testl	%eax, %eax
100006583:	0f 84 b0 fe ff ff	je	0x100006439
100006589:	48 8d 15 7f df 03 00	leaq	253823(%rip), %rdx ## literal pool for: "Unknown key for string: %s"
100006590:	31 db	xorl	%ebx, %ebx
100006592:	4c 89 f7	movq	%r14, %rdi
100006595:	be 04 00 00 00	movl	$4, %esi
10000659a:	4c 89 f9	movq	%r15, %rcx
10000659d:	31 c0	xorl	%eax, %eax
10000659f:	e8 16 fa 00 00	callq	0x100015fba
1000065a4:	b8 01 00 00 00	movl	$1, %eax
1000065a9:	41 0f b6 8e 15 05 00 00	movzbl	1301(%r14), %ecx
1000065b1:	09 cb	orl	%ecx, %ebx
1000065b3:	49 09 86 0d 05 00 00	orq	%rax, 1293(%r14)
1000065ba:	41 88 9e 15 05 00 00	movb	%bl, 1301(%r14)
1000065c1:	e9 73 fe ff ff	jmp	0x100006439
1000065c6:	41 89 9e fc 02 00 00	movl	%ebx, 764(%r14)
1000065cd:	e9 67 fe ff ff	jmp	0x100006439
1000065d2:	0f b6 c3	movzbl	%bl, %eax
1000065d5:	48 c1 e0 22	shlq	$34, %rax
1000065d9:	48 b9 ff ff ff ff fb ff ff ff	movabsq	$-17179869185, %rcx
1000065e3:	e9 f5 00 00 00	jmp	0x1000066dd
1000065e8:	48 8d 35 3e d3 03 00	leaq	250686(%rip), %rsi ## literal pool for: "ProgramArguments"
1000065ef:	4c 89 ff	movq	%r15, %rdi
1000065f2:	e8 3c 8d 00 00	callq	0x10000f333
1000065f7:	84 c0	testb	%al, %al
1000065f9:	0f 85 3a fe ff ff	jne	0x100006439
1000065ff:	48 8d 15 48 df 03 00	leaq	253768(%rip), %rdx ## literal pool for: "Unknown key for array: %s"
100006606:	e9 14 fe ff ff	jmp	0x10000641f
10000660b:	48 8d 35 6c d8 03 00	leaq	252012(%rip), %rsi ## literal pool for: "_RoleAccount"
100006612:	4c 89 ff	movq	%r15, %rdi
100006615:	e8 06 b8 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000661a:	85 c0	testl	%eax, %eax
10000661c:	0f 84 f2 00 00 00	je	0x100006714
100006622:	48 8d 35 8d de 03 00	leaq	253581(%rip), %rsi ## literal pool for: "_SandboxProfile"
100006629:	4c 89 ff	movq	%r15, %rdi
10000662c:	e8 ef b7 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100006631:	85 c0	testl	%eax, %eax
100006633:	0f 84 5d 01 00 00	je	0x100006796
100006639:	48 8d 35 86 de 03 00	leaq	253574(%rip), %rsi ## literal pool for: "_SandboxContainer"
100006640:	4c 89 ff	movq	%r15, %rdi
100006643:	e8 d8 b7 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100006648:	85 c0	testl	%eax, %eax
10000664a:	0f 84 9c 01 00 00	je	0x1000067ec
100006650:	48 8d 35 81 de 03 00	leaq	253569(%rip), %rsi ## literal pool for: "_ProcessType"
100006657:	4c 89 ff	movq	%r15, %rdi
10000665a:	e8 c1 b7 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000665f:	e9 1d ff ff ff	jmp	0x100006581
100006664:	48 8d 35 4d df 03 00	leaq	253773(%rip), %rsi ## literal pool for: "_LaunchEvents"
10000666b:	4c 89 ff	movq	%r15, %rdi
10000666e:	e8 b9 b7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100006673:	85 c0	testl	%eax, %eax
100006675:	0f 84 e1 00 00 00	je	0x10000675c
10000667b:	48 8d 35 a8 de 03 00	leaq	253608(%rip), %rsi ## literal pool for: "_AdditionalServices"
100006682:	4c 89 ff	movq	%r15, %rdi
100006685:	e8 a2 b7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000668a:	85 c0	testl	%eax, %eax
10000668c:	0f 84 0d 01 00 00	je	0x10000679f
100006692:	48 8d 35 d0 df 03 00	leaq	253904(%rip), %rsi ## literal pool for: "_AdditionalSubServices"
100006699:	4c 89 ff	movq	%r15, %rdi
10000669c:	e8 8b b7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000066a1:	85 c0	testl	%eax, %eax
1000066a3:	0f 84 9d 01 00 00	je	0x100006846
1000066a9:	48 8d 35 d0 df 03 00	leaq	253904(%rip), %rsi ## literal pool for: "_AdditionalProperties"
1000066b0:	4c 89 ff	movq	%r15, %rdi
1000066b3:	e8 68 b7 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000066b8:	85 c0	testl	%eax, %eax
1000066ba:	0f 84 ed 01 00 00	je	0x1000068ad
1000066c0:	48 8d 15 cf df 03 00	leaq	253903(%rip), %rdx ## literal pool for: "Unknown key for dictionary: %s"
1000066c7:	e9 53 fd ff ff	jmp	0x10000641f
1000066cc:	0f b6 c3	movzbl	%bl, %eax
1000066cf:	48 c1 e0 25	shlq	$37, %rax
1000066d3:	48 b9 ff ff ff ff df ff ff ff	movabsq	$-137438953473, %rcx
1000066dd:	49 23 8e 0d 05 00 00	andq	1293(%r14), %rcx
1000066e4:	48 09 c1	orq	%rax, %rcx
1000066e7:	49 89 8e 0d 05 00 00	movq	%rcx, 1293(%r14)
1000066ee:	e9 46 fd ff ff	jmp	0x100006439
1000066f3:	48 8b 15 d6 19 05 00	movq	334294(%rip), %rdx ## literal pool symbol address: __xpc_bool_true
1000066fa:	4c 89 f7	movq	%r14, %rdi
1000066fd:	4c 89 fe	movq	%r15, %rsi
100006700:	4c 89 e1	movq	%r12, %rcx
100006703:	48 83 c4 60	addq	$96, %rsp
100006707:	5b	popq	%rbx
100006708:	41 5c	popq	%r12
10000670a:	41 5e	popq	%r14
10000670c:	41 5f	popq	%r15
10000670e:	5d	popq	%rbp
10000670f:	e9 ad 01 00 00	jmp	0x1000068c1
100006714:	48 8d 35 96 dd 03 00	leaq	253334(%rip), %rsi ## literal pool for: "root"
10000671b:	48 89 df	movq	%rbx, %rdi
10000671e:	e8 09 b7 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100006723:	85 c0	testl	%eax, %eax
100006725:	0f 84 0f 01 00 00	je	0x10000683a
10000672b:	4d 8d a6 c0 02 00 00	leaq	704(%r14), %r12
100006732:	e9 bc 00 00 00	jmp	0x1000067f3
100006737:	48 8d 15 86 dc 03 00	leaq	253062(%rip), %rdx ## literal pool for: "%s less than zero. Ignoring."
10000673e:	4c 89 f7	movq	%r14, %rdi
100006741:	be 04 00 00 00	movl	$4, %esi
100006746:	4c 89 f9	movq	%r15, %rcx
100006749:	31 c0	xorl	%eax, %eax
10000674b:	48 83 c4 60	addq	$96, %rsp
10000674f:	5b	popq	%rbx
100006750:	41 5c	popq	%r12
100006752:	41 5e	popq	%r14
100006754:	41 5f	popq	%r15
100006756:	5d	popq	%rbp
100006757:	e9 5e f8 00 00	jmp	0x100015fba
10000675c:	48 8d 15 63 de 03 00	leaq	253539(%rip), %rdx ## literal pool for: "The %s key is not yet implemented. %s"
100006763:	4c 8d 05 82 de 03 00	leaq	253570(%rip), %r8 ## literal pool for: "If you rely on this key, please file a bug."
10000676a:	4c 89 f7	movq	%r14, %rdi
10000676d:	be 03 00 00 00	movl	$3, %esi
100006772:	4c 89 f9	movq	%r15, %rcx
100006775:	31 c0	xorl	%eax, %eax
100006777:	e8 3e f8 00 00	callq	0x100015fba
10000677c:	e9 b8 fc ff ff	jmp	0x100006439
100006781:	48 85 db	testq	%rbx, %rbx
100006784:	0f 84 fd 00 00 00	je	0x100006887
10000678a:	41 89 9e e4 02 00 00	movl	%ebx, 740(%r14)
100006791:	e9 a3 fc ff ff	jmp	0x100006439
100006796:	4d 8d a6 d8 01 00 00	leaq	472(%r14), %r12
10000679d:	eb 54	jmp	0x1000067f3
10000679f:	48 8d 15 72 de 03 00	leaq	253554(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
1000067a6:	4c 8d 05 91 de 03 00	leaq	253585(%rip), %r8 ## literal pool for: "Please use _AdditionalSubServices instead."
1000067ad:	4c 89 f7	movq	%r14, %rdi
1000067b0:	be 03 00 00 00	movl	$3, %esi
1000067b5:	4c 89 f9	movq	%r15, %rcx
1000067b8:	31 c0	xorl	%eax, %eax
1000067ba:	e8 fb f7 00 00	callq	0x100015fba
1000067bf:	48 8b 05 52 18 05 00	movq	333906(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000067c6:	48 8d 75 80	leaq	-128(%rbp), %rsi
1000067ca:	48 89 06	movq	%rax, (%rsi)
1000067cd:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
1000067d5:	48 8d 05 de 01 00 00	leaq	478(%rip), %rax
1000067dc:	48 89 46 10	movq	%rax, 16(%rsi)
1000067e0:	48 8d 05 49 1a 05 00	leaq	334409(%rip), %rax
1000067e7:	e9 82 00 00 00	jmp	0x10000686e
1000067ec:	4d 8d a6 d0 01 00 00	leaq	464(%r14), %r12
1000067f3:	48 89 df	movq	%rbx, %rdi
1000067f6:	e8 5b b6 03 00	callq	0x100041e56 ## symbol stub for: _strlen
1000067fb:	49 8b 8e 50 02 00 00	movq	592(%r14), %rcx
100006802:	48 01 c8	addq	%rcx, %rax
100006805:	48 ff c0	incq	%rax
100006808:	49 89 86 50 02 00 00	movq	%rax, 592(%r14)
10000680f:	48 89 df	movq	%rbx, %rdi
100006812:	e8 09 88 00 00	callq	0x10000f020
100006817:	49 89 04 24	movq	%rax, (%r12)
10000681b:	48 85 c0	testq	%rax, %rax
10000681e:	0f 85 15 fc ff ff	jne	0x100006439
100006824:	48 8d 15 ba dc 03 00	leaq	253114(%rip), %rdx ## literal pool for: "Could not set string argument for key: %s"
10000682b:	31 db	xorl	%ebx, %ebx
10000682d:	4c 89 f7	movq	%r14, %rdi
100006830:	be 03 00 00 00	movl	$3, %esi
100006835:	e9 60 fd ff ff	jmp	0x10000659a
10000683a:	b8 00 00 20 00	movl	$2097152, %eax
10000683f:	31 db	xorl	%ebx, %ebx
100006841:	e9 63 fd ff ff	jmp	0x1000065a9
100006846:	48 8b 05 cb 17 05 00	movq	333771(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000684d:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100006851:	48 89 06	movq	%rax, (%rsi)
100006854:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000685c:	48 8d 05 6f 01 00 00	leaq	367(%rip), %rax
100006863:	48 89 46 10	movq	%rax, 16(%rsi)
100006867:	48 8d 05 e2 19 05 00	leaq	334306(%rip), %rax
10000686e:	48 89 46 18	movq	%rax, 24(%rsi)
100006872:	4c 89 76 20	movq	%r14, 32(%rsi)
100006876:	4c 89 66 28	movq	%r12, 40(%rsi)
10000687a:	48 89 df	movq	%rbx, %rdi
10000687d:	e8 7e b7 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100006882:	e9 b2 fb ff ff	jmp	0x100006439
100006887:	48 8d 15 6e db 03 00	leaq	252782(%rip), %rdx ## literal pool for: "_ThrottleInterval set to zero. You're not that important. Ignoring."
10000688e:	4c 89 f7	movq	%r14, %rdi
100006891:	be 03 00 00 00	movl	$3, %esi
100006896:	31 c0	xorl	%eax, %eax
100006898:	e8 1d f7 00 00	callq	0x100015fba
10000689d:	41 c7 86 e4 02 00 00 01 00 00 00	movl	$1, 740(%r14)
1000068a8:	e9 8c fb ff ff	jmp	0x100006439
1000068ad:	48 89 df	movq	%rbx, %rdi
1000068b0:	e8 4d b8 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000068b5:	49 89 86 80 02 00 00	movq	%rax, 640(%r14)
1000068bc:	e9 78 fb ff ff	jmp	0x100006439
1000068c1:	55	pushq	%rbp
1000068c2:	48 89 e5	movq	%rsp, %rbp
1000068c5:	41 57	pushq	%r15
1000068c7:	41 56	pushq	%r14
1000068c9:	41 54	pushq	%r12
1000068cb:	53	pushq	%rbx
1000068cc:	49 89 ce	movq	%rcx, %r14
1000068cf:	49 89 d4	movq	%rdx, %r12
1000068d2:	49 89 f7	movq	%rsi, %r15
1000068d5:	48 89 fb	movq	%rdi, %rbx
1000068d8:	48 0f ba a7 0d 05 00 00 2c	btq	$44, 1293(%rdi)
1000068e1:	73 13	jae	0x1000068f6
1000068e3:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
1000068ea:	4c 89 ff	movq	%r15, %rdi
1000068ed:	e8 3a b5 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000068f2:	85 c0	testl	%eax, %eax
1000068f4:	74 22	je	0x100006918
1000068f6:	4c 8b 8b 30 02 00 00	movq	560(%rbx), %r9
1000068fd:	48 89 df	movq	%rbx, %rdi
100006900:	4c 89 fe	movq	%r15, %rsi
100006903:	4c 89 e2	movq	%r12, %rdx
100006906:	31 c9	xorl	%ecx, %ecx
100006908:	4d 89 f0	movq	%r14, %r8
10000690b:	ff 93 18 02 00 00	callq	*536(%rbx)
100006911:	48 85 c0	testq	%rax, %rax
100006914:	75 22	jne	0x100006938
100006916:	eb 19	jmp	0x100006931
100006918:	48 8d 15 49 dc 03 00	leaq	253001(%rip), %rdx ## literal pool for: "MachService endpoint name specified was same as implicitly created endpoint: %s"
10000691f:	4c 89 f7	movq	%r14, %rdi
100006922:	be 04 00 00 00	movl	$4, %esi
100006927:	4c 89 f9	movq	%r15, %rcx
10000692a:	31 c0	xorl	%eax, %eax
10000692c:	e8 14 7d 00 00	callq	0x10000e645
100006931:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
100006938:	5b	popq	%rbx
100006939:	41 5c	popq	%r12
10000693b:	41 5e	popq	%r14
10000693d:	41 5f	popq	%r15
10000693f:	5d	popq	%rbp
100006940:	c3	retq
100006941:	55	pushq	%rbp
100006942:	48 89 e5	movq	%rsp, %rbp
100006945:	41 57	pushq	%r15
100006947:	41 56	pushq	%r14
100006949:	53	pushq	%rbx
10000694a:	50	pushq	%rax
10000694b:	49 89 d7	movq	%rdx, %r15
10000694e:	48 89 f3	movq	%rsi, %rbx
100006951:	49 89 fe	movq	%rdi, %r14
100006954:	48 89 f7	movq	%rsi, %rdi
100006957:	e8 6a b7 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000695c:	48 89 df	movq	%rbx, %rdi
10000695f:	48 3b 05 c2 17 05 00	cmpq	333762(%rip), %rax ## literal pool symbol address: __xpc_type_string
100006966:	74 33	je	0x10000699b
100006968:	e8 59 b7 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000696d:	48 89 c7	movq	%rax, %rdi
100006970:	e8 b7 b7 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100006975:	48 8d 15 39 dd 03 00	leaq	253241(%rip), %rdx ## literal pool for: "Invalid type for environment variable value (env/type): %s/%s"
10000697c:	4c 89 ff	movq	%r15, %rdi
10000697f:	be 03 00 00 00	movl	$3, %esi
100006984:	4c 89 f1	movq	%r14, %rcx
100006987:	49 89 c0	movq	%rax, %r8
10000698a:	31 c0	xorl	%eax, %eax
10000698c:	48 83 c4 08	addq	$8, %rsp
100006990:	5b	popq	%rbx
100006991:	41 5e	popq	%r14
100006993:	41 5f	popq	%r15
100006995:	5d	popq	%rbp
100006996:	e9 1f f6 00 00	jmp	0x100015fba
10000699b:	e8 86 b7 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000069a0:	4c 89 ff	movq	%r15, %rdi
1000069a3:	4c 89 f6	movq	%r14, %rsi
1000069a6:	48 89 c2	movq	%rax, %rdx
1000069a9:	31 c9	xorl	%ecx, %ecx
1000069ab:	48 83 c4 08	addq	$8, %rsp
1000069af:	5b	popq	%rbx
1000069b0:	41 5e	popq	%r14
1000069b2:	41 5f	popq	%r15
1000069b4:	5d	popq	%rbp
1000069b5:	e9 ad c6 ff ff	jmp	0x100003067
1000069ba:	55	pushq	%rbp
1000069bb:	48 89 e5	movq	%rsp, %rbp
1000069be:	48 8b 47 20	movq	32(%rdi), %rax
1000069c2:	48 8b 4f 28	movq	40(%rdi), %rcx
1000069c6:	48 89 c7	movq	%rax, %rdi
1000069c9:	e8 f3 fe ff ff	callq	0x1000068c1
1000069ce:	b0 01	movb	$1, %al
1000069d0:	5d	popq	%rbp
1000069d1:	c3	retq
1000069d2:	55	pushq	%rbp
1000069d3:	48 89 e5	movq	%rsp, %rbp
1000069d6:	41 57	pushq	%r15
1000069d8:	41 56	pushq	%r14
1000069da:	41 54	pushq	%r12
1000069dc:	53	pushq	%rbx
1000069dd:	48 81 ec 10 02 00 00	subq	$528, %rsp
1000069e4:	49 89 d6	movq	%rdx, %r14
1000069e7:	49 89 f7	movq	%rsi, %r15
1000069ea:	48 89 fb	movq	%rdi, %rbx
1000069ed:	48 8b 05 34 16 05 00	movq	333364(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000069f4:	48 8b 00	movq	(%rax), %rax
1000069f7:	48 89 45 d8	movq	%rax, -40(%rbp)
1000069fb:	4c 8d a5 d0 fd ff ff	leaq	-560(%rbp), %r12
100006a02:	ba 00 02 00 00	movl	$512, %edx
100006a07:	4c 89 e7	movq	%r12, %rdi
100006a0a:	be aa 00 00 00	movl	$170, %esi
100006a0f:	e8 c6 b1 03 00	callq	0x100041bda ## symbol stub for: _memset
100006a14:	b9 18 05 00 00	movl	$1304, %ecx
100006a19:	48 03 4b 20	addq	32(%rbx), %rcx
100006a1d:	48 8d 15 02 d0 03 00	leaq	249858(%rip), %rdx ## literal pool for: "%s.%s"
100006a24:	be 00 02 00 00	movl	$512, %esi
100006a29:	4c 89 e7	movq	%r12, %rdi
100006a2c:	4d 89 f8	movq	%r15, %r8
100006a2f:	31 c0	xorl	%eax, %eax
100006a31:	e8 cc b3 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100006a36:	48 8b 7b 20	movq	32(%rbx), %rdi
100006a3a:	48 8b 4b 28	movq	40(%rbx), %rcx
100006a3e:	4c 89 e6	movq	%r12, %rsi
100006a41:	4c 89 f2	movq	%r14, %rdx
100006a44:	e8 78 fe ff ff	callq	0x1000068c1
100006a49:	48 8b 05 d8 15 05 00	movq	333272(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100006a50:	48 8b 00	movq	(%rax), %rax
100006a53:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100006a57:	75 12	jne	0x100006a6b
100006a59:	b0 01	movb	$1, %al
100006a5b:	48 81 c4 10 02 00 00	addq	$528, %rsp
100006a62:	5b	popq	%rbx
100006a63:	41 5c	popq	%r12
100006a65:	41 5e	popq	%r14
100006a67:	41 5f	popq	%r15
100006a69:	5d	popq	%rbp
100006a6a:	c3	retq
100006a6b:	e8 02 ad 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100006a70:	55	pushq	%rbp
100006a71:	48 89 e5	movq	%rsp, %rbp
100006a74:	41 56	pushq	%r14
100006a76:	53	pushq	%rbx
100006a77:	48 83 ec 50	subq	$80, %rsp
100006a7b:	48 8d 5d d0	leaq	-48(%rbp), %rbx
100006a7f:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100006a86:	48 89 5b 08	movq	%rbx, 8(%rbx)
100006a8a:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
100006a94:	48 89 43 10	movq	%rax, 16(%rbx)
100006a98:	c6 43 18 00	movb	$0, 24(%rbx)
100006a9c:	48 8b 05 75 15 05 00	movq	333173(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100006aa3:	48 8d 75 a8	leaq	-88(%rbp), %rsi
100006aa7:	48 89 06	movq	%rax, (%rsi)
100006aaa:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
100006ab2:	48 8d 05 7c 01 00 00	leaq	380(%rip), %rax
100006ab9:	48 89 46 10	movq	%rax, 16(%rsi)
100006abd:	48 8d 05 ac 17 05 00	leaq	333740(%rip), %rax
100006ac4:	48 89 46 18	movq	%rax, 24(%rsi)
100006ac8:	48 89 5e 20	movq	%rbx, 32(%rsi)
100006acc:	e8 2f b5 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100006ad1:	48 8b 43 08	movq	8(%rbx), %rax
100006ad5:	44 8a 70 18	movb	24(%rax), %r14b
100006ad9:	48 89 df	movq	%rbx, %rdi
100006adc:	be 08 00 00 00	movl	$8, %esi
100006ae1:	e8 4a ac 03 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
100006ae6:	44 89 f0	movl	%r14d, %eax
100006ae9:	48 83 c4 50	addq	$80, %rsp
100006aed:	5b	popq	%rbx
100006aee:	41 5e	popq	%r14
100006af0:	5d	popq	%rbp
100006af1:	c3	retq
100006af2:	55	pushq	%rbp
100006af3:	48 89 e5	movq	%rsp, %rbp
100006af6:	41 57	pushq	%r15
100006af8:	41 56	pushq	%r14
100006afa:	41 54	pushq	%r12
100006afc:	53	pushq	%rbx
100006afd:	49 89 fe	movq	%rdi, %r14
100006b00:	e8 c1 b5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006b05:	4c 89 f7	movq	%r14, %rdi
100006b08:	48 3b 05 c9 15 05 00	cmpq	333257(%rip), %rax ## literal pool symbol address: __xpc_type_array
100006b0f:	74 2d	je	0x100006b3e
100006b11:	e8 b0 b5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006b16:	48 3b 05 0b 16 05 00	cmpq	333323(%rip), %rax ## literal pool symbol address: __xpc_type_string
100006b1d:	75 69	jne	0x100006b88
100006b1f:	4c 89 f7	movq	%r14, %rdi
100006b22:	e8 ff b5 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100006b27:	48 8d 3d 62 c9 03 00	leaq	248162(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
100006b2e:	48 89 c6	movq	%rax, %rsi
100006b31:	5b	popq	%rbx
100006b32:	41 5c	popq	%r12
100006b34:	41 5e	popq	%r14
100006b36:	41 5f	popq	%r15
100006b38:	5d	popq	%rbp
100006b39:	e9 4a b1 03 00	jmp	0x100041c88 ## symbol stub for: _os_variant_check
100006b3e:	e8 09 b4 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006b43:	48 85 c0	testq	%rax, %rax
100006b46:	74 40	je	0x100006b88
100006b48:	31 db	xorl	%ebx, %ebx
100006b4a:	4c 8b 25 d7 15 05 00	movq	333271(%rip), %r12 ## literal pool symbol address: __xpc_type_string
100006b51:	4c 89 f7	movq	%r14, %rdi
100006b54:	48 89 de	movq	%rbx, %rsi
100006b57:	e8 02 b4 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100006b5c:	49 89 c7	movq	%rax, %r15
100006b5f:	48 89 c7	movq	%rax, %rdi
100006b62:	e8 5f b5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006b67:	4c 39 e0	cmpq	%r12, %rax
100006b6a:	75 0c	jne	0x100006b78
100006b6c:	4c 89 ff	movq	%r15, %rdi
100006b6f:	e8 7e ff ff ff	callq	0x100006af2
100006b74:	84 c0	testb	%al, %al
100006b76:	75 1b	jne	0x100006b93
100006b78:	48 ff c3	incq	%rbx
100006b7b:	4c 89 f7	movq	%r14, %rdi
100006b7e:	e8 c9 b3 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006b83:	48 39 c3	cmpq	%rax, %rbx
100006b86:	72 c9	jb	0x100006b51
100006b88:	31 c0	xorl	%eax, %eax
100006b8a:	5b	popq	%rbx
100006b8b:	41 5c	popq	%r12
100006b8d:	41 5e	popq	%r14
100006b8f:	41 5f	popq	%r15
100006b91:	5d	popq	%rbp
100006b92:	c3	retq
100006b93:	b0 01	movb	$1, %al
100006b95:	eb f3	jmp	0x100006b8a
100006b97:	55	pushq	%rbp
100006b98:	48 89 e5	movq	%rsp, %rbp
100006b9b:	41 57	pushq	%r15
100006b9d:	41 56	pushq	%r14
100006b9f:	41 54	pushq	%r12
100006ba1:	53	pushq	%rbx
100006ba2:	49 89 fe	movq	%rdi, %r14
100006ba5:	e8 1c b5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006baa:	4c 89 f7	movq	%r14, %rdi
100006bad:	48 3b 05 24 15 05 00	cmpq	333092(%rip), %rax ## literal pool symbol address: __xpc_type_array
100006bb4:	74 26	je	0x100006bdc
100006bb6:	e8 0b b5 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006bbb:	48 3b 05 66 15 05 00	cmpq	333158(%rip), %rax ## literal pool symbol address: __xpc_type_string
100006bc2:	75 62	jne	0x100006c26
100006bc4:	4c 89 f7	movq	%r14, %rdi
100006bc7:	e8 5a b5 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100006bcc:	48 89 c7	movq	%rax, %rdi
100006bcf:	5b	popq	%rbx
100006bd0:	41 5c	popq	%r12
100006bd2:	41 5e	popq	%r14
100006bd4:	41 5f	popq	%r15
100006bd6:	5d	popq	%rbp
100006bd7:	e9 69 ad ff ff	jmp	0x100001945
100006bdc:	e8 6b b3 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006be1:	48 85 c0	testq	%rax, %rax
100006be4:	74 40	je	0x100006c26
100006be6:	31 db	xorl	%ebx, %ebx
100006be8:	4c 8b 25 39 15 05 00	movq	333113(%rip), %r12 ## literal pool symbol address: __xpc_type_string
100006bef:	4c 89 f7	movq	%r14, %rdi
100006bf2:	48 89 de	movq	%rbx, %rsi
100006bf5:	e8 64 b3 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100006bfa:	49 89 c7	movq	%rax, %r15
100006bfd:	48 89 c7	movq	%rax, %rdi
100006c00:	e8 c1 b4 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006c05:	4c 39 e0	cmpq	%r12, %rax
100006c08:	75 0c	jne	0x100006c16
100006c0a:	4c 89 ff	movq	%r15, %rdi
100006c0d:	e8 85 ff ff ff	callq	0x100006b97
100006c12:	84 c0	testb	%al, %al
100006c14:	75 1b	jne	0x100006c31
100006c16:	48 ff c3	incq	%rbx
100006c19:	4c 89 f7	movq	%r14, %rdi
100006c1c:	e8 2b b3 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006c21:	48 39 c3	cmpq	%rax, %rbx
100006c24:	72 c9	jb	0x100006bef
100006c26:	31 c0	xorl	%eax, %eax
100006c28:	5b	popq	%rbx
100006c29:	41 5c	popq	%r12
100006c2b:	41 5e	popq	%r14
100006c2d:	41 5f	popq	%r15
100006c2f:	5d	popq	%rbp
100006c30:	c3	retq
100006c31:	b0 01	movb	$1, %al
100006c33:	eb f3	jmp	0x100006c28
100006c35:	55	pushq	%rbp
100006c36:	48 89 e5	movq	%rsp, %rbp
100006c39:	41 57	pushq	%r15
100006c3b:	41 56	pushq	%r14
100006c3d:	41 55	pushq	%r13
100006c3f:	41 54	pushq	%r12
100006c41:	53	pushq	%rbx
100006c42:	48 81 ec 88 00 00 00	subq	$136, %rsp
100006c49:	49 89 d4	movq	%rdx, %r12
100006c4c:	48 89 f1	movq	%rsi, %rcx
100006c4f:	49 89 fe	movq	%rdi, %r14
100006c52:	48 8b 05 cf 13 05 00	movq	332751(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100006c59:	48 8b 00	movq	(%rax), %rax
100006c5c:	48 89 45 d0	movq	%rax, -48(%rbp)
100006c60:	0f 28 05 19 c6 03 00	movaps	247321(%rip), %xmm0
100006c67:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100006c6e:	0f 29 47 70	movaps	%xmm0, 112(%rdi)
100006c72:	0f 29 47 60	movaps	%xmm0, 96(%rdi)
100006c76:	0f 29 47 50	movaps	%xmm0, 80(%rdi)
100006c7a:	0f 29 47 40	movaps	%xmm0, 64(%rdi)
100006c7e:	0f 29 47 30	movaps	%xmm0, 48(%rdi)
100006c82:	0f 29 47 20	movaps	%xmm0, 32(%rdi)
100006c86:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
100006c8a:	0f 29 07	movaps	%xmm0, (%rdi)
100006c8d:	48 8d 15 bf dd 03 00	leaq	253375(%rip), %rdx ## literal pool for: "hw.%s"
100006c94:	be 80 00 00 00	movl	$128, %esi
100006c99:	31 c0	xorl	%eax, %eax
100006c9b:	e8 62 b1 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100006ca0:	4c 89 e7	movq	%r12, %rdi
100006ca3:	e8 1e b4 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006ca8:	48 3b 05 29 14 05 00	cmpq	332841(%rip), %rax ## literal pool symbol address: __xpc_type_array
100006caf:	74 27	je	0x100006cd8
100006cb1:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100006cb8:	4c 89 e6	movq	%r12, %rsi
100006cbb:	e8 85 00 00 00	callq	0x100006d45
100006cc0:	41 b7 01	movb	$1, %r15b
100006cc3:	84 c0	testb	%al, %al
100006cc5:	74 54	je	0x100006d1b
100006cc7:	49 8b 46 20	movq	32(%r14), %rax
100006ccb:	48 8b 40 08	movq	8(%rax), %rax
100006ccf:	c6 40 18 01	movb	$1, 24(%rax)
100006cd3:	45 31 ff	xorl	%r15d, %r15d
100006cd6:	eb 43	jmp	0x100006d1b
100006cd8:	4c 89 e7	movq	%r12, %rdi
100006cdb:	e8 6c b2 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006ce0:	41 b7 01	movb	$1, %r15b
100006ce3:	48 85 c0	testq	%rax, %rax
100006ce6:	74 33	je	0x100006d1b
100006ce8:	31 db	xorl	%ebx, %ebx
100006cea:	4c 8d ad 50 ff ff ff	leaq	-176(%rbp), %r13
100006cf1:	4c 89 e7	movq	%r12, %rdi
100006cf4:	48 89 de	movq	%rbx, %rsi
100006cf7:	e8 62 b2 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100006cfc:	4c 89 ef	movq	%r13, %rdi
100006cff:	48 89 c6	movq	%rax, %rsi
100006d02:	e8 3e 00 00 00	callq	0x100006d45
100006d07:	84 c0	testb	%al, %al
100006d09:	75 bc	jne	0x100006cc7
100006d0b:	48 ff c3	incq	%rbx
100006d0e:	4c 89 e7	movq	%r12, %rdi
100006d11:	e8 36 b2 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100006d16:	48 39 c3	cmpq	%rax, %rbx
100006d19:	72 d6	jb	0x100006cf1
100006d1b:	48 8b 05 06 13 05 00	movq	332550(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100006d22:	48 8b 00	movq	(%rax), %rax
100006d25:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100006d29:	75 15	jne	0x100006d40
100006d2b:	44 89 f8	movl	%r15d, %eax
100006d2e:	48 81 c4 88 00 00 00	addq	$136, %rsp
100006d35:	5b	popq	%rbx
100006d36:	41 5c	popq	%r12
100006d38:	41 5d	popq	%r13
100006d3a:	41 5e	popq	%r14
100006d3c:	41 5f	popq	%r15
100006d3e:	5d	popq	%rbp
100006d3f:	c3	retq
100006d40:	e8 2d aa 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100006d45:	55	pushq	%rbp
100006d46:	48 89 e5	movq	%rsp, %rbp
100006d49:	41 57	pushq	%r15
100006d4b:	41 56	pushq	%r14
100006d4d:	53	pushq	%rbx
100006d4e:	50	pushq	%rax
100006d4f:	48 89 f3	movq	%rsi, %rbx
100006d52:	49 89 fe	movq	%rdi, %r14
100006d55:	48 89 f7	movq	%rsi, %rdi
100006d58:	e8 69 b3 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006d5d:	48 3b 05 c4 13 05 00	cmpq	332740(%rip), %rax ## literal pool symbol address: __xpc_type_string
100006d64:	74 3a	je	0x100006da0
100006d66:	48 89 df	movq	%rbx, %rdi
100006d69:	e8 58 b3 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100006d6e:	48 3b 05 9b 13 05 00	cmpq	332699(%rip), %rax ## literal pool symbol address: __xpc_type_int64
100006d75:	75 6d	jne	0x100006de4
100006d77:	48 8d 75 e0	leaq	-32(%rbp), %rsi
100006d7b:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
100006d82:	4c 89 f7	movq	%r14, %rdi
100006d85:	e8 bd dc 02 00	callq	0x100034a47
100006d8a:	48 85 c0	testq	%rax, %rax
100006d8d:	74 55	je	0x100006de4
100006d8f:	48 89 df	movq	%rbx, %rdi
100006d92:	e8 3b b3 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100006d97:	48 3b 45 e0	cmpq	-32(%rbp), %rax
100006d9b:	0f 94 c3	sete	%bl
100006d9e:	eb 46	jmp	0x100006de6
100006da0:	48 8d 75 e0	leaq	-32(%rbp), %rsi
100006da4:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
100006dab:	4c 89 f7	movq	%r14, %rdi
100006dae:	e8 12 db 02 00	callq	0x1000348c5
100006db3:	48 85 c0	testq	%rax, %rax
100006db6:	74 2c	je	0x100006de4
100006db8:	49 89 c6	movq	%rax, %r14
100006dbb:	48 89 df	movq	%rbx, %rdi
100006dbe:	e8 63 b3 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100006dc3:	4c 8b 7d e0	movq	-32(%rbp), %r15
100006dc7:	48 89 c7	movq	%rax, %rdi
100006dca:	4c 89 fe	movq	%r15, %rsi
100006dcd:	4c 89 f2	movq	%r14, %rdx
100006dd0:	e8 87 b0 03 00	callq	0x100041e5c ## symbol stub for: _strncmp
100006dd5:	85 c0	testl	%eax, %eax
100006dd7:	0f 94 c3	sete	%bl
100006dda:	4c 89 ff	movq	%r15, %rdi
100006ddd:	e8 4e ac 03 00	callq	0x100041a30 ## symbol stub for: _free
100006de2:	eb 02	jmp	0x100006de6
100006de4:	31 db	xorl	%ebx, %ebx
100006de6:	89 d8	movl	%ebx, %eax
100006de8:	48 83 c4 08	addq	$8, %rsp
100006dec:	5b	popq	%rbx
100006ded:	41 5e	popq	%r14
100006def:	41 5f	popq	%r15
100006df1:	5d	popq	%rbp
100006df2:	c3	retq
100006df3:	90	nop
100006df4:	90	nop
100006df5:	55	pushq	%rbp
100006df6:	48 89 e5	movq	%rsp, %rbp
100006df9:	41 57	pushq	%r15
100006dfb:	41 56	pushq	%r14
100006dfd:	41 55	pushq	%r13
100006dff:	41 54	pushq	%r12
100006e01:	53	pushq	%rbx
100006e02:	48 83 ec 28	subq	$40, %rsp
100006e06:	48 89 f1	movq	%rsi, %rcx
100006e09:	48 89 f8	movq	%rdi, %rax
100006e0c:	48 8b 1a	movq	(%rdx), %rbx
100006e0f:	4c 8b 42 08	movq	8(%rdx), %r8
100006e13:	48 8b 3d 8e be 05 00	movq	376462(%rip), %rdi
100006e1a:	48 85 ff	testq	%rdi, %rdi
100006e1d:	0f 85 e3 0c 00 00	jne	0x100007b06
100006e23:	48 8d 3d ec df 03 00	leaq	253932(%rip), %rdi ## literal pool for: "plist"
100006e2a:	48 89 4d c0	movq	%rcx, -64(%rbp)
100006e2e:	4c 89 45 c8	movq	%r8, -56(%rbp)
100006e32:	48 89 45 d0	movq	%rax, -48(%rbp)
100006e36:	e8 eb 31 00 00	callq	0x10000a026
100006e3b:	48 89 05 66 be 05 00	movq	%rax, 376422(%rip)
100006e42:	48 8d 35 d3 df 03 00	leaq	253907(%rip), %rsi ## literal pool for: "AbandonProcessGroup"
100006e49:	48 8d 15 70 14 05 00	leaq	332912(%rip), %rdx
100006e50:	48 89 c7	movq	%rax, %rdi
100006e53:	e8 6e 32 00 00	callq	0x10000a0c6
100006e58:	48 8b 3d 49 be 05 00	movq	376393(%rip), %rdi
100006e5f:	48 8d 35 2a e6 03 00	leaq	255530(%rip), %rsi ## literal pool for: "AuxilliaryBootstrapper"
100006e66:	48 8d 15 93 14 05 00	leaq	332947(%rip), %rdx
100006e6d:	e8 54 32 00 00	callq	0x10000a0c6
100006e72:	48 8b 3d 2f be 05 00	movq	376367(%rip), %rdi
100006e79:	48 8d 35 27 e6 03 00	leaq	255527(%rip), %rsi ## literal pool for: "BootShell"
100006e80:	48 8d 15 b9 14 05 00	leaq	332985(%rip), %rdx
100006e87:	e8 3a 32 00 00	callq	0x10000a0c6
100006e8c:	48 8b 3d 15 be 05 00	movq	376341(%rip), %rdi
100006e93:	48 8d 35 99 da 03 00	leaq	252569(%rip), %rsi ## literal pool for: "DisabledInSafeBoot"
100006e9a:	48 8d 15 df 14 05 00	leaq	333023(%rip), %rdx
100006ea1:	e8 20 32 00 00	callq	0x10000a0c6
100006ea6:	48 8b 3d fb bd 05 00	movq	376315(%rip), %rdi
100006ead:	48 8d 35 9c d2 03 00	leaq	250524(%rip), %rsi ## literal pool for: "KeepAlive"
100006eb4:	48 8d 15 05 15 05 00	leaq	333061(%rip), %rdx
100006ebb:	e8 06 32 00 00	callq	0x10000a0c6
100006ec0:	48 8b 3d e1 bd 05 00	movq	376289(%rip), %rdi
100006ec7:	48 8d 35 33 e6 03 00	leaq	255539(%rip), %rsi ## literal pool for: "OnDemand"
100006ece:	48 8d 15 2b 15 05 00	leaq	333099(%rip), %rdx
100006ed5:	e8 ec 31 00 00	callq	0x10000a0c6
100006eda:	48 8b 3d c7 bd 05 00	movq	376263(%rip), %rdi
100006ee1:	48 8d 35 79 e6 03 00	leaq	255609(%rip), %rsi ## literal pool for: "Debug"
100006ee8:	48 8d 15 51 15 05 00	leaq	333137(%rip), %rdx
100006eef:	e8 d2 31 00 00	callq	0x10000a0c6
100006ef4:	48 8b 3d ad bd 05 00	movq	376237(%rip), %rdi
100006efb:	48 8d 35 1f d8 03 00	leaq	251935(%rip), %rsi ## literal pool for: "Disabled"
100006f02:	e8 99 33 00 00	callq	0x10000a2a0
100006f07:	48 8b 3d 9a bd 05 00	movq	376218(%rip), %rdi
100006f0e:	48 8d 35 64 e6 03 00	leaq	255588(%rip), %rsi ## literal pool for: "DisableASLR"
100006f15:	48 8d 15 64 15 05 00	leaq	333156(%rip), %rdx
100006f1c:	e8 a5 31 00 00	callq	0x10000a0c6
100006f21:	48 8b 3d 80 bd 05 00	movq	376192(%rip), %rdi
100006f28:	48 8d 35 56 e6 03 00	leaq	255574(%rip), %rsi ## literal pool for: "DisallowAllLookups"
100006f2f:	48 8d 15 8a 15 05 00	leaq	333194(%rip), %rdx
100006f36:	e8 8b 31 00 00	callq	0x10000a0c6
100006f3b:	48 8b 3d 66 bd 05 00	movq	376166(%rip), %rdi
100006f42:	48 8d 35 4f e6 03 00	leaq	255567(%rip), %rsi ## literal pool for: "DrainMessagesOnFailedInit"
100006f49:	48 8d 15 b0 15 05 00	leaq	333232(%rip), %rdx
100006f50:	e8 71 31 00 00	callq	0x10000a0c6
100006f55:	48 8b 3d 4c bd 05 00	movq	376140(%rip), %rdi
100006f5c:	48 8d 35 4f e6 03 00	leaq	255567(%rip), %rsi ## literal pool for: "DisableReslide"
100006f63:	48 8d 15 d6 15 05 00	leaq	333270(%rip), %rdx
100006f6a:	e8 57 31 00 00	callq	0x10000a0c6
100006f6f:	48 8b 3d 32 bd 05 00	movq	376114(%rip), %rdi
100006f76:	48 8d 35 44 e6 03 00	leaq	255556(%rip), %rsi ## literal pool for: "HopefullyExitsLast"
100006f7d:	48 8d 15 fc 15 05 00	leaq	333308(%rip), %rdx
100006f84:	e8 3d 31 00 00	callq	0x10000a0c6
100006f89:	48 8b 3d 18 bd 05 00	movq	376088(%rip), %rdi
100006f90:	48 8d 35 3d e6 03 00	leaq	255549(%rip), %rsi ## literal pool for: "SessionCreate"
100006f97:	48 8d 15 22 16 05 00	leaq	333346(%rip), %rdx
100006f9e:	e8 23 31 00 00	callq	0x10000a0c6
100006fa3:	48 8b 3d fe bc 05 00	movq	376062(%rip), %rdi
100006faa:	48 8d 35 31 e6 03 00	leaq	255537(%rip), %rsi ## literal pool for: "StartOnMount"
100006fb1:	48 8d 15 48 16 05 00	leaq	333384(%rip), %rdx
100006fb8:	e8 09 31 00 00	callq	0x10000a0c6
100006fbd:	48 8b 3d e4 bc 05 00	movq	376036(%rip), %rdi
100006fc4:	48 8d 35 24 e6 03 00	leaq	255524(%rip), %rsi ## literal pool for: "ServiceIPC"
100006fcb:	48 8d 15 6e 16 05 00	leaq	333422(%rip), %rdx
100006fd2:	e8 ef 30 00 00	callq	0x10000a0c6
100006fd7:	48 8b 3d ca bc 05 00	movq	376010(%rip), %rdi
100006fde:	48 8d 35 15 e6 03 00	leaq	255509(%rip), %rsi ## literal pool for: "ShutdownMonitor"
100006fe5:	48 8d 15 94 16 05 00	leaq	333460(%rip), %rdx
100006fec:	e8 d5 30 00 00	callq	0x10000a0c6
100006ff1:	48 8b 3d b0 bc 05 00	movq	375984(%rip), %rdi
100006ff8:	48 8d 35 0b e6 03 00	leaq	255499(%rip), %rsi ## literal pool for: "LowPriorityIO"
100006fff:	48 8d 15 ba 16 05 00	leaq	333498(%rip), %rdx
100007006:	e8 bb 30 00 00	callq	0x10000a0c6
10000700b:	48 8b 3d 96 bc 05 00	movq	375958(%rip), %rdi
100007012:	48 8d 35 ff e5 03 00	leaq	255487(%rip), %rsi ## literal pool for: "LowPriorityBackgroundIO"
100007019:	48 8d 15 e0 16 05 00	leaq	333536(%rip), %rdx
100007020:	e8 a1 30 00 00	callq	0x10000a0c6
100007025:	48 8b 3d 7c bc 05 00	movq	375932(%rip), %rdi
10000702c:	48 8d 35 fd e5 03 00	leaq	255485(%rip), %rsi ## literal pool for: "LegacyTimers"
100007033:	48 8d 15 06 17 05 00	leaq	333574(%rip), %rdx
10000703a:	e8 87 30 00 00	callq	0x10000a0c6
10000703f:	48 8b 3d 62 bc 05 00	movq	375906(%rip), %rdi
100007046:	48 8d 35 f0 e5 03 00	leaq	255472(%rip), %rsi ## literal pool for: "LaunchOnlyOnce"
10000704d:	48 8d 15 2c 17 05 00	leaq	333612(%rip), %rdx
100007054:	e8 6d 30 00 00	callq	0x10000a0c6
100007059:	48 8b 3d 48 bc 05 00	movq	375880(%rip), %rdi
100007060:	4c 8d 3d e5 e5 03 00	leaq	255461(%rip), %r15 ## literal pool for: "MachExceptionHandler"
100007067:	48 8d 15 52 17 05 00	leaq	333650(%rip), %rdx
10000706e:	4c 89 fe	movq	%r15, %rsi
100007071:	e8 50 30 00 00	callq	0x10000a0c6
100007076:	48 8b 3d 2b bc 05 00	movq	375851(%rip), %rdi
10000707d:	4c 8d 35 dd e5 03 00	leaq	255453(%rip), %r14 ## literal pool for: "MultipleInstances"
100007084:	48 8d 15 75 17 05 00	leaq	333685(%rip), %rdx
10000708b:	4c 89 f6	movq	%r14, %rsi
10000708e:	e8 33 30 00 00	callq	0x10000a0c6
100007093:	48 8b 3d 0e bc 05 00	movq	375822(%rip), %rdi
10000709a:	48 8d 35 1a c9 03 00	leaq	248090(%rip), %rsi ## literal pool for: "MaterializeDatalessFiles"
1000070a1:	48 8d 15 98 17 05 00	leaq	333720(%rip), %rdx
1000070a8:	e8 19 30 00 00	callq	0x10000a0c6
1000070ad:	48 8b 3d f4 bb 05 00	movq	375796(%rip), %rdi
1000070b4:	48 8d 35 8b d8 03 00	leaq	252043(%rip), %rsi ## literal pool for: "MinimalBootProfile"
1000070bb:	e8 e0 31 00 00	callq	0x10000a2a0
1000070c0:	48 8b 3d e1 bb 05 00	movq	375777(%rip), %rdi
1000070c7:	48 8d 35 a5 e5 03 00	leaq	255397(%rip), %rsi ## literal pool for: "InitGroups"
1000070ce:	48 8d 15 ab 17 05 00	leaq	333739(%rip), %rdx
1000070d5:	e8 ec 2f 00 00	callq	0x10000a0c6
1000070da:	48 8b 3d c7 bb 05 00	movq	375751(%rip), %rdi
1000070e1:	48 8d 35 96 e5 03 00	leaq	255382(%rip), %rsi ## literal pool for: "IgnoreProcessGroupAtShutdown"
1000070e8:	48 8d 15 d1 17 05 00	leaq	333777(%rip), %rdx
1000070ef:	e8 d2 2f 00 00	callq	0x10000a0c6
1000070f4:	48 8b 3d ad bb 05 00	movq	375725(%rip), %rdi
1000070fb:	48 8d 35 99 e5 03 00	leaq	255385(%rip), %rsi ## literal pool for: "RunAtLoad"
100007102:	48 8d 15 f7 17 05 00	leaq	333815(%rip), %rdx
100007109:	e8 b8 2f 00 00	callq	0x10000a0c6
10000710e:	48 8b 3d 93 bb 05 00	movq	375699(%rip), %rdi
100007115:	48 8d 35 3d d9 03 00	leaq	252221(%rip), %rsi ## literal pool for: "ResolveProgramIdentifier"
10000711c:	48 8d 15 1d 18 05 00	leaq	333853(%rip), %rdx
100007123:	e8 9e 2f 00 00	callq	0x10000a0c6
100007128:	48 8b 3d 79 bb 05 00	movq	375673(%rip), %rdi
10000712f:	48 8d 35 6f e5 03 00	leaq	255343(%rip), %rsi ## literal pool for: "ReslideSharedCache"
100007136:	48 8d 15 43 18 05 00	leaq	333891(%rip), %rdx
10000713d:	e8 84 2f 00 00	callq	0x10000a0c6
100007142:	48 8b 3d 5f bb 05 00	movq	375647(%rip), %rdi
100007149:	48 8d 35 68 e5 03 00	leaq	255336(%rip), %rsi ## literal pool for: "EnableGlobbing"
100007150:	48 8d 15 69 18 05 00	leaq	333929(%rip), %rdx
100007157:	e8 6a 2f 00 00	callq	0x10000a0c6
10000715c:	48 8b 3d 45 bb 05 00	movq	375621(%rip), %rdi
100007163:	48 8d 35 d3 cf 03 00	leaq	249811(%rip), %rsi ## literal pool for: "EnableTransactions"
10000716a:	48 8d 15 8f 18 05 00	leaq	333967(%rip), %rdx
100007171:	e8 50 2f 00 00	callq	0x10000a0c6
100007176:	48 8b 3d 2b bb 05 00	movq	375595(%rip), %rdi
10000717d:	48 8d 35 43 e5 03 00	leaq	255299(%rip), %rsi ## literal pool for: "EnterKernelDebuggerBeforeKill"
100007184:	48 8d 15 b5 18 05 00	leaq	334005(%rip), %rdx
10000718b:	e8 36 2f 00 00	callq	0x10000a0c6
100007190:	48 8b 3d 11 bb 05 00	movq	375569(%rip), %rdi
100007197:	48 8d 35 47 e5 03 00	leaq	255303(%rip), %rsi ## literal pool for: "EmbeddedHomeScreen"
10000719e:	48 8d 15 db 18 05 00	leaq	334043(%rip), %rdx
1000071a5:	e8 1c 2f 00 00	callq	0x10000a0c6
1000071aa:	48 8b 3d f7 ba 05 00	movq	375543(%rip), %rdi
1000071b1:	48 8d 35 40 e5 03 00	leaq	255296(%rip), %rsi ## literal pool for: "EventMonitor"
1000071b8:	48 8d 15 01 19 05 00	leaq	334081(%rip), %rdx
1000071bf:	e8 02 2f 00 00	callq	0x10000a0c6
1000071c4:	48 8b 3d dd ba 05 00	movq	375517(%rip), %rdi
1000071cb:	48 8d 35 57 cf 03 00	leaq	249687(%rip), %rsi ## literal pool for: "EnablePressuredExit"
1000071d2:	48 8d 15 27 19 05 00	leaq	334119(%rip), %rdx
1000071d9:	e8 e8 2e 00 00	callq	0x10000a0c6
1000071de:	48 8b 3d c3 ba 05 00	movq	375491(%rip), %rdi
1000071e5:	48 8d 35 19 e5 03 00	leaq	255257(%rip), %rsi ## literal pool for: "ExecuteAllowed"
1000071ec:	e8 af 30 00 00	callq	0x10000a2a0
1000071f1:	48 8b 3d b0 ba 05 00	movq	375472(%rip), %rdi
1000071f8:	48 8d 35 8e c7 03 00	leaq	247694(%rip), %rsi ## literal pool for: "WaitForDebugger"
1000071ff:	48 8d 15 3a 19 05 00	leaq	334138(%rip), %rdx
100007206:	e8 bb 2e 00 00	callq	0x10000a0c6
10000720b:	48 8b 3d 96 ba 05 00	movq	375446(%rip), %rdi
100007212:	48 8d 35 11 d5 03 00	leaq	251153(%rip), %rsi ## literal pool for: "ForceEnableHack"
100007219:	e8 82 30 00 00	callq	0x10000a2a0
10000721e:	48 8b 3d 83 ba 05 00	movq	375427(%rip), %rdi
100007225:	48 8d 35 e8 e4 03 00	leaq	255208(%rip), %rsi ## literal pool for: "NSBuiltWithThreadSanitizer"
10000722c:	48 8d 15 4d 19 05 00	leaq	334157(%rip), %rdx
100007233:	e8 8e 2e 00 00	callq	0x10000a0c6
100007238:	48 8b 3d 69 ba 05 00	movq	375401(%rip), %rdi
10000723f:	48 8d 35 e9 e4 03 00	leaq	255209(%rip), %rsi ## literal pool for: "_NullBootstrapPort"
100007246:	48 8d 15 73 19 05 00	leaq	334195(%rip), %rdx
10000724d:	e8 74 2e 00 00	callq	0x10000a0c6
100007252:	48 8b 3d 4f ba 05 00	movq	375375(%rip), %rdi
100007259:	48 8d 35 da d4 03 00	leaq	251098(%rip), %rsi ## literal pool for: "_Protected"
100007260:	e8 3b 30 00 00	callq	0x10000a2a0
100007265:	48 8b 3d 3c ba 05 00	movq	375356(%rip), %rdi
10000726c:	48 8d 35 df d0 03 00	leaq	250079(%rip), %rsi ## literal pool for: "_ExponentialThrottling"
100007273:	48 8d 15 86 19 05 00	leaq	334214(%rip), %rdx
10000727a:	e8 47 2e 00 00	callq	0x10000a0c6
10000727f:	48 8b 3d 22 ba 05 00	movq	375330(%rip), %rdi
100007286:	48 8d 35 b5 e4 03 00	leaq	255157(%rip), %rsi ## literal pool for: "__Proxyless"
10000728d:	e8 0e 30 00 00	callq	0x10000a2a0
100007292:	48 8b 3d 0f ba 05 00	movq	375311(%rip), %rdi
100007299:	48 8d 35 ae e4 03 00	leaq	255150(%rip), %rsi ## literal pool for: "_DisablePointerAuth"
1000072a0:	48 8d 15 99 19 05 00	leaq	334233(%rip), %rdx
1000072a7:	e8 1a 2e 00 00	callq	0x10000a0c6
1000072ac:	48 8b 3d f5 b9 05 00	movq	375285(%rip), %rdi
1000072b3:	48 8d 35 d9 e4 03 00	leaq	255193(%rip), %rsi ## literal pool for: "ExitTimeOut"
1000072ba:	48 8d 15 bf 19 05 00	leaq	334271(%rip), %rdx
1000072c1:	e8 a6 2e 00 00	callq	0x10000a16c
1000072c6:	48 8b 3d db b9 05 00	movq	375259(%rip), %rdi
1000072cd:	48 8d 35 97 eb 03 00	leaq	256919(%rip), %rsi ## literal pool for: "EmbeddedMainThreadPriority"
1000072d4:	48 8d 15 e5 19 05 00	leaq	334309(%rip), %rdx
1000072db:	e8 8c 2e 00 00	callq	0x10000a16c
1000072e0:	48 8b 3d c1 b9 05 00	movq	375233(%rip), %rdi
1000072e7:	48 8d 35 98 eb 03 00	leaq	256920(%rip), %rsi ## literal pool for: "CPUMonitorPercentage"
1000072ee:	48 8d 15 0b 1a 05 00	leaq	334347(%rip), %rdx
1000072f5:	e8 72 2e 00 00	callq	0x10000a16c
1000072fa:	48 8b 3d a7 b9 05 00	movq	375207(%rip), %rdi
100007301:	48 8d 35 93 eb 03 00	leaq	256915(%rip), %rsi ## literal pool for: "CPUMonitorInterval"
100007308:	48 8d 15 31 1a 05 00	leaq	334385(%rip), %rdx
10000730f:	e8 58 2e 00 00	callq	0x10000a16c
100007314:	48 8b 3d 8d b9 05 00	movq	375181(%rip), %rdi
10000731b:	48 8d 35 87 c6 03 00	leaq	247431(%rip), %rsi ## literal pool for: "PersonaEnterprise"
100007322:	48 8d 15 57 1a 05 00	leaq	334423(%rip), %rdx
100007329:	e8 3e 2e 00 00	callq	0x10000a16c
10000732e:	48 8b 3d 73 b9 05 00	movq	375155(%rip), %rdi
100007335:	48 8d 35 04 d1 03 00	leaq	250116(%rip), %rsi ## literal pool for: "Platform"
10000733c:	48 8d 15 7d 1a 05 00	leaq	334461(%rip), %rdx
100007343:	e8 24 2e 00 00	callq	0x10000a16c
100007348:	48 8b 3d 59 b9 05 00	movq	375129(%rip), %rdi
10000734f:	48 8d 35 58 eb 03 00	leaq	256856(%rip), %rsi ## literal pool for: "JetsamPriority"
100007356:	48 8d 15 a3 1a 05 00	leaq	334499(%rip), %rdx
10000735d:	e8 0a 2e 00 00	callq	0x10000a16c
100007362:	48 8b 3d 3f b9 05 00	movq	375103(%rip), %rdi
100007369:	48 8d 35 72 eb 03 00	leaq	256882(%rip), %rsi ## literal pool for: "JetsamMemoryLimit"
100007370:	48 8d 15 c9 1a 05 00	leaq	334537(%rip), %rdx
100007377:	e8 f0 2d 00 00	callq	0x10000a16c
10000737c:	48 8b 3d 25 b9 05 00	movq	375077(%rip), %rdi
100007383:	48 8d 35 b7 eb 03 00	leaq	256951(%rip), %rsi ## literal pool for: "Nice"
10000738a:	48 8d 15 ef 1a 05 00	leaq	334575(%rip), %rdx
100007391:	e8 d6 2d 00 00	callq	0x10000a16c
100007396:	48 8b 3d 0b b9 05 00	movq	375051(%rip), %rdi
10000739d:	48 8d 35 a2 eb 03 00	leaq	256930(%rip), %rsi ## literal pool for: "TimeOut"
1000073a4:	48 8d 15 15 1b 05 00	leaq	334613(%rip), %rdx
1000073ab:	e8 bc 2d 00 00	callq	0x10000a16c
1000073b0:	48 8b 3d f1 b8 05 00	movq	375025(%rip), %rdi
1000073b7:	48 8d 35 ae eb 03 00	leaq	256942(%rip), %rsi ## literal pool for: "ThrottleInterval"
1000073be:	48 8d 15 3b 1b 05 00	leaq	334651(%rip), %rdx
1000073c5:	e8 a2 2d 00 00	callq	0x10000a16c
1000073ca:	48 8b 3d d7 b8 05 00	movq	374999(%rip), %rdi
1000073d1:	48 89 5d b8	movq	%rbx, -72(%rbp)
1000073d5:	48 8d 1d e4 eb 03 00	leaq	256996(%rip), %rbx ## literal pool for: "Umask"
1000073dc:	48 8d 15 5d 1b 05 00	leaq	334685(%rip), %rdx
1000073e3:	48 89 de	movq	%rbx, %rsi
1000073e6:	e8 81 2d 00 00	callq	0x10000a16c
1000073eb:	48 8b 3d b6 b8 05 00	movq	374966(%rip), %rdi
1000073f2:	48 8d 15 87 1b 05 00	leaq	334727(%rip), %rdx
1000073f9:	48 89 de	movq	%rbx, %rsi
1000073fc:	e8 a8 2d 00 00	callq	0x10000a1a9
100007401:	48 8b 3d a0 b8 05 00	movq	374944(%rip), %rdi
100007408:	48 8d 35 17 f2 03 00	leaq	258583(%rip), %rsi ## literal pool for: "StartInterval"
10000740f:	48 8d 15 aa 1b 05 00	leaq	334762(%rip), %rdx
100007416:	e8 51 2d 00 00	callq	0x10000a16c
10000741b:	48 8b 3d 86 b8 05 00	movq	374918(%rip), %rdi
100007422:	48 8d 35 0b f2 03 00	leaq	258571(%rip), %rsi ## literal pool for: "SandboxFlags"
100007429:	48 8d 15 d0 1b 05 00	leaq	334800(%rip), %rdx
100007430:	e8 37 2d 00 00	callq	0x10000a16c
100007435:	48 8b 3d 6c b8 05 00	movq	374892(%rip), %rdi
10000743c:	48 8d 35 fe f1 03 00	leaq	258558(%rip), %rsi ## literal pool for: "ActiveHardMemoryLimit"
100007443:	e8 58 2e 00 00	callq	0x10000a2a0
100007448:	48 8b 3d 59 b8 05 00	movq	374873(%rip), %rdi
10000744f:	48 8d 35 01 f2 03 00	leaq	258561(%rip), %rsi ## literal pool for: "ActiveSoftMemoryLimit"
100007456:	e8 45 2e 00 00	callq	0x10000a2a0
10000745b:	48 8b 3d 46 b8 05 00	movq	374854(%rip), %rdi
100007462:	48 8d 35 04 f2 03 00	leaq	258564(%rip), %rsi ## literal pool for: "InactiveHardMemoryLimit"
100007469:	e8 32 2e 00 00	callq	0x10000a2a0
10000746e:	48 8b 3d 33 b8 05 00	movq	374835(%rip), %rdi
100007475:	48 8d 35 09 f2 03 00	leaq	258569(%rip), %rsi ## literal pool for: "InactiveSoftMemoryLimit"
10000747c:	e8 1f 2e 00 00	callq	0x10000a2a0
100007481:	48 8b 3d 20 b8 05 00	movq	374816(%rip), %rdi
100007488:	48 8d 35 0e f2 03 00	leaq	258574(%rip), %rsi ## literal pool for: "InitialTaskRole"
10000748f:	48 8d 15 aa 1b 05 00	leaq	334762(%rip), %rdx
100007496:	e8 d1 2c 00 00	callq	0x10000a16c
10000749b:	48 8b 3d 06 b8 05 00	movq	374790(%rip), %rdi
1000074a2:	48 8d 35 95 c4 03 00	leaq	246933(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
1000074a9:	48 8d 15 d0 1b 05 00	leaq	334800(%rip), %rdx
1000074b0:	e8 f4 2c 00 00	callq	0x10000a1a9
1000074b5:	48 8b 3d ec b7 05 00	movq	374764(%rip), %rdi
1000074bc:	48 8d 35 ea f1 03 00	leaq	258538(%rip), %rsi ## literal pool for: "ContainingBundleID"
1000074c3:	48 8d 15 f6 1b 05 00	leaq	334838(%rip), %rdx
1000074ca:	e8 da 2c 00 00	callq	0x10000a1a9
1000074cf:	48 8b 3d d2 b7 05 00	movq	374738(%rip), %rdi
1000074d6:	48 8d 35 e3 f1 03 00	leaq	258531(%rip), %rsi ## literal pool for: "ContainingBundleVersion"
1000074dd:	48 8d 15 1c 1c 05 00	leaq	334876(%rip), %rdx
1000074e4:	e8 c0 2c 00 00	callq	0x10000a1a9
1000074e9:	48 8b 3d b8 b7 05 00	movq	374712(%rip), %rdi
1000074f0:	48 8d 15 49 1c 05 00	leaq	334921(%rip), %rdx
1000074f7:	4c 89 fe	movq	%r15, %rsi
1000074fa:	e8 aa 2c 00 00	callq	0x10000a1a9
1000074ff:	48 8b 3d a2 b7 05 00	movq	374690(%rip), %rdi
100007506:	48 8d 15 73 1c 05 00	leaq	334963(%rip), %rdx
10000750d:	4c 89 f6	movq	%r14, %rsi
100007510:	e8 94 2c 00 00	callq	0x10000a1a9
100007515:	48 8b 3d 8c b7 05 00	movq	374668(%rip), %rdi
10000751c:	48 8d 35 02 c4 03 00	leaq	246786(%rip), %rsi ## literal pool for: "Program"
100007523:	e8 78 2d 00 00	callq	0x10000a2a0
100007528:	48 8b 3d 79 b7 05 00	movq	374649(%rip), %rdi
10000752f:	48 8d 35 35 d8 03 00	leaq	251957(%rip), %rsi ## literal pool for: "POSIXSpawnType"
100007536:	48 8d 1d 83 1c 05 00	leaq	334979(%rip), %rbx
10000753d:	48 89 da	movq	%rbx, %rdx
100007540:	e8 64 2c 00 00	callq	0x10000a1a9
100007545:	48 8b 3d 5c b7 05 00	movq	374620(%rip), %rdi
10000754c:	48 8d 35 4a c4 03 00	leaq	246858(%rip), %rsi ## literal pool for: "ProcessType"
100007553:	48 89 da	movq	%rbx, %rdx
100007556:	e8 4e 2c 00 00	callq	0x10000a1a9
10000755b:	48 8b 3d 46 b7 05 00	movq	374598(%rip), %rdi
100007562:	48 8d 35 6f f1 03 00	leaq	258415(%rip), %rsi ## literal pool for: "PublishesEvents"
100007569:	48 8d 15 90 1c 05 00	leaq	334992(%rip), %rdx
100007570:	e8 34 2c 00 00	callq	0x10000a1a9
100007575:	48 8b 3d 2c b7 05 00	movq	374572(%rip), %rdi
10000757c:	48 8d 35 51 c4 03 00	leaq	246865(%rip), %rsi ## literal pool for: "Label"
100007583:	e8 18 2d 00 00	callq	0x10000a2a0
100007588:	48 8b 3d 19 b7 05 00	movq	374553(%rip), %rdi
10000758f:	48 8d 35 52 f1 03 00	leaq	258386(%rip), %rsi ## literal pool for: "LimitLoadToHosts"
100007596:	48 8d 15 a3 1c 05 00	leaq	335011(%rip), %rdx
10000759d:	e8 07 2c 00 00	callq	0x10000a1a9
1000075a2:	48 8b 3d ff b6 05 00	movq	374527(%rip), %rdi
1000075a9:	48 8d 35 49 f1 03 00	leaq	258377(%rip), %rsi ## literal pool for: "LimitLoadFromHosts"
1000075b0:	48 8d 15 c9 1c 05 00	leaq	335049(%rip), %rdx
1000075b7:	e8 ed 2b 00 00	callq	0x10000a1a9
1000075bc:	48 8b 3d e5 b6 05 00	movq	374501(%rip), %rdi
1000075c3:	48 8d 1d e6 d1 03 00	leaq	250342(%rip), %rbx ## literal pool for: "LimitLoadToSessionType"
1000075ca:	48 89 de	movq	%rbx, %rsi
1000075cd:	e8 ce 2c 00 00	callq	0x10000a2a0
1000075d2:	48 8b 3d cf b6 05 00	movq	374479(%rip), %rdi
1000075d9:	48 8d 35 2c f1 03 00	leaq	258348(%rip), %rsi ## literal pool for: "LoginWindowUserName"
1000075e0:	48 8d 15 d9 1c 05 00	leaq	335065(%rip), %rdx
1000075e7:	e8 bd 2b 00 00	callq	0x10000a1a9
1000075ec:	48 8b 3d b5 b6 05 00	movq	374453(%rip), %rdi
1000075f3:	48 8d 35 26 f1 03 00	leaq	258342(%rip), %rsi ## literal pool for: "RootDirectory"
1000075fa:	48 8d 15 ff 1c 05 00	leaq	335103(%rip), %rdx
100007601:	e8 a3 2b 00 00	callq	0x10000a1a9
100007606:	48 8b 3d 9b b6 05 00	movq	374427(%rip), %rdi
10000760d:	48 8d 35 52 c3 03 00	leaq	246610(%rip), %rsi ## literal pool for: "WorkingDirectory"
100007614:	48 8d 15 25 1d 05 00	leaq	335141(%rip), %rdx
10000761b:	e8 89 2b 00 00	callq	0x10000a1a9
100007620:	48 8b 3d 81 b6 05 00	movq	374401(%rip), %rdi
100007627:	48 8d 35 5d c8 03 00	leaq	247901(%rip), %rsi ## literal pool for: "UserName"
10000762e:	48 8d 15 4b 1d 05 00	leaq	335179(%rip), %rdx
100007635:	e8 6f 2b 00 00	callq	0x10000a1a9
10000763a:	48 8b 3d 67 b6 05 00	movq	374375(%rip), %rdi
100007641:	48 8d 35 e6 f0 03 00	leaq	258278(%rip), %rsi ## literal pool for: "GroupName"
100007648:	48 8d 15 71 1d 05 00	leaq	335217(%rip), %rdx
10000764f:	e8 55 2b 00 00	callq	0x10000a1a9
100007654:	48 8b 3d 4d b6 05 00	movq	374349(%rip), %rdi
10000765b:	48 8d 35 dc f0 03 00	leaq	258268(%rip), %rsi ## literal pool for: "StandardOutPath"
100007662:	48 8d 15 97 1d 05 00	leaq	335255(%rip), %rdx
100007669:	e8 3b 2b 00 00	callq	0x10000a1a9
10000766e:	48 8b 3d 33 b6 05 00	movq	374323(%rip), %rdi
100007675:	48 8d 35 d2 f0 03 00	leaq	258258(%rip), %rsi ## literal pool for: "StandardErrorPath"
10000767c:	48 8d 15 bd 1d 05 00	leaq	335293(%rip), %rdx
100007683:	e8 21 2b 00 00	callq	0x10000a1a9
100007688:	48 8b 3d 19 b6 05 00	movq	374297(%rip), %rdi
10000768f:	48 8d 35 ca f0 03 00	leaq	258250(%rip), %rsi ## literal pool for: "StandardInPath"
100007696:	48 8d 15 e3 1d 05 00	leaq	335331(%rip), %rdx
10000769d:	e8 07 2b 00 00	callq	0x10000a1a9
1000076a2:	48 8b 3d ff b5 05 00	movq	374271(%rip), %rdi
1000076a9:	48 8d 35 bf f0 03 00	leaq	258239(%rip), %rsi ## literal pool for: "SandboxProfile"
1000076b0:	48 8d 15 09 1e 05 00	leaq	335369(%rip), %rdx
1000076b7:	e8 ed 2a 00 00	callq	0x10000a1a9
1000076bc:	48 8b 3d e5 b5 05 00	movq	374245(%rip), %rdi
1000076c3:	48 8d 35 b4 f0 03 00	leaq	258228(%rip), %rsi ## literal pool for: "SandboxContainer"
1000076ca:	48 8d 15 2f 1e 05 00	leaq	335407(%rip), %rdx
1000076d1:	e8 d3 2a 00 00	callq	0x10000a1a9
1000076d6:	48 8b 3d cb b5 05 00	movq	374219(%rip), %rdi
1000076dd:	48 8d 35 63 d1 03 00	leaq	250211(%rip), %rsi ## literal pool for: "_LimitLoadToDeviceTree"
1000076e4:	e8 b7 2b 00 00	callq	0x10000a2a0
1000076e9:	48 8b 3d b8 b5 05 00	movq	374200(%rip), %rdi
1000076f0:	48 8d 35 c4 d1 03 00	leaq	250308(%rip), %rsi ## literal pool for: "_LimitLoadFromDeviceTree"
1000076f7:	e8 a4 2b 00 00	callq	0x10000a2a0
1000076fc:	48 8b 3d a5 b5 05 00	movq	374181(%rip), %rdi
100007703:	4c 8d 35 e7 d0 03 00	leaq	250087(%rip), %r14 ## literal pool for: "_LimitLoadToVariant"
10000770a:	4c 89 f6	movq	%r14, %rsi
10000770d:	e8 8e 2b 00 00	callq	0x10000a2a0
100007712:	48 8b 3d 8f b5 05 00	movq	374159(%rip), %rdi
100007719:	4c 8d 3d e5 d0 03 00	leaq	250085(%rip), %r15 ## literal pool for: "_LimitLoadFromVariant"
100007720:	4c 89 fe	movq	%r15, %rsi
100007723:	e8 78 2b 00 00	callq	0x10000a2a0
100007728:	48 8b 3d 79 b5 05 00	movq	374137(%rip), %rdi
10000772f:	48 8d 35 59 f0 03 00	leaq	258137(%rip), %rsi ## literal pool for: "_ResourceCoalition"
100007736:	48 8d 15 03 1e 05 00	leaq	335363(%rip), %rdx
10000773d:	e8 67 2a 00 00	callq	0x10000a1a9
100007742:	48 8b 3d 5f b5 05 00	movq	374111(%rip), %rdi
100007749:	4c 8d 2d cb d0 03 00	leaq	250059(%rip), %r13 ## literal pool for: "_LimitLoadToBootMode"
100007750:	4c 89 ee	movq	%r13, %rsi
100007753:	e8 48 2b 00 00	callq	0x10000a2a0
100007758:	48 8b 3d 49 b5 05 00	movq	374089(%rip), %rdi
10000775f:	4c 8d 25 ca d0 03 00	leaq	250058(%rip), %r12 ## literal pool for: "_LimitLoadFromBootMode"
100007766:	4c 89 e6	movq	%r12, %rsi
100007769:	e8 32 2b 00 00	callq	0x10000a2a0
10000776e:	48 8b 3d 33 b5 05 00	movq	374067(%rip), %rdi
100007775:	48 8d 35 26 f0 03 00	leaq	258086(%rip), %rsi ## literal pool for: "_ManagedBy"
10000777c:	48 8d 15 fd 1d 05 00	leaq	335357(%rip), %rdx
100007783:	e8 21 2a 00 00	callq	0x10000a1a9
100007788:	48 8b 3d 19 b5 05 00	movq	374041(%rip), %rdi
10000778f:	48 8d 35 17 f0 03 00	leaq	258071(%rip), %rsi ## literal pool for: "_SubsystemRoot"
100007796:	48 8d 15 23 1e 05 00	leaq	335395(%rip), %rdx
10000779d:	e8 07 2a 00 00	callq	0x10000a1a9
1000077a2:	48 8b 3d ff b4 05 00	movq	374015(%rip), %rdi
1000077a9:	48 8d 35 7d c1 03 00	leaq	246141(%rip), %rsi ## literal pool for: "ProgramArguments"
1000077b0:	e8 eb 2a 00 00	callq	0x10000a2a0
1000077b5:	48 8b 3d ec b4 05 00	movq	373996(%rip), %rdi
1000077bc:	48 8d 15 3d 1e 05 00	leaq	335421(%rip), %rdx
1000077c3:	48 8d 35 0e ef 03 00	leaq	257806(%rip), %rsi ## literal pool for: "PublishesEvents"
1000077ca:	e8 17 2a 00 00	callq	0x10000a1e6
1000077cf:	48 8b 3d d2 b4 05 00	movq	373970(%rip), %rdi
1000077d6:	48 8d 15 83 1e 05 00	leaq	335491(%rip), %rdx
1000077dd:	48 8d 35 04 ef 03 00	leaq	257796(%rip), %rsi ## literal pool for: "LimitLoadToHosts"
1000077e4:	e8 fd 29 00 00	callq	0x10000a1e6
1000077e9:	48 8b 3d b8 b4 05 00	movq	373944(%rip), %rdi
1000077f0:	48 8d 15 a9 1e 05 00	leaq	335529(%rip), %rdx
1000077f7:	48 8d 35 fb ee 03 00	leaq	257787(%rip), %rsi ## literal pool for: "LimitLoadFromHosts"
1000077fe:	e8 e3 29 00 00	callq	0x10000a1e6
100007803:	48 8b 3d 9e b4 05 00	movq	373918(%rip), %rdi
10000780a:	48 89 de	movq	%rbx, %rsi
10000780d:	e8 8e 2a 00 00	callq	0x10000a2a0
100007812:	48 8b 3d 8f b4 05 00	movq	373903(%rip), %rdi
100007819:	48 8d 35 57 c1 03 00	leaq	246103(%rip), %rsi ## literal pool for: "BinaryOrderPreference"
100007820:	48 8d 15 b9 1e 05 00	leaq	335545(%rip), %rdx
100007827:	e8 ba 29 00 00	callq	0x10000a1e6
10000782c:	48 8b 3d 75 b4 05 00	movq	373877(%rip), %rdi
100007833:	48 8d 1d 2d f6 03 00	leaq	259629(%rip), %rbx ## literal pool for: "StartCalendarInterval"
10000783a:	48 8d 15 df 1e 05 00	leaq	335583(%rip), %rdx
100007841:	48 89 de	movq	%rbx, %rsi
100007844:	e8 9d 29 00 00	callq	0x10000a1e6
100007849:	48 8b 3d 58 b4 05 00	movq	373848(%rip), %rdi
100007850:	48 8d 35 26 f6 03 00	leaq	259622(%rip), %rsi ## literal pool for: "QueueDirectories"
100007857:	48 8d 15 02 1f 05 00	leaq	335618(%rip), %rdx
10000785e:	e8 83 29 00 00	callq	0x10000a1e6
100007863:	48 8b 3d 3e b4 05 00	movq	373822(%rip), %rdi
10000786a:	48 8d 35 5c f6 03 00	leaq	259676(%rip), %rsi ## literal pool for: "HomeRelativeQueueDirectories"
100007871:	48 8d 15 28 1f 05 00	leaq	335656(%rip), %rdx
100007878:	e8 69 29 00 00	callq	0x10000a1e6
10000787d:	48 8b 3d 24 b4 05 00	movq	373796(%rip), %rdi
100007884:	48 8d 35 5f f6 03 00	leaq	259679(%rip), %rsi ## literal pool for: "WatchPaths"
10000788b:	48 8d 15 4e 1f 05 00	leaq	335694(%rip), %rdx
100007892:	e8 4f 29 00 00	callq	0x10000a1e6
100007897:	48 8b 3d 0a b4 05 00	movq	373770(%rip), %rdi
10000789e:	48 8d 35 a2 cf 03 00	leaq	249762(%rip), %rsi ## literal pool for: "_LimitLoadToDeviceTree"
1000078a5:	e8 f6 29 00 00	callq	0x10000a2a0
1000078aa:	48 8b 3d f7 b3 05 00	movq	373751(%rip), %rdi
1000078b1:	48 8d 35 03 d0 03 00	leaq	249859(%rip), %rsi ## literal pool for: "_LimitLoadFromDeviceTree"
1000078b8:	e8 e3 29 00 00	callq	0x10000a2a0
1000078bd:	48 8b 3d e4 b3 05 00	movq	373732(%rip), %rdi
1000078c4:	4c 89 f6	movq	%r14, %rsi
1000078c7:	e8 d4 29 00 00	callq	0x10000a2a0
1000078cc:	48 8b 3d d5 b3 05 00	movq	373717(%rip), %rdi
1000078d3:	4c 89 fe	movq	%r15, %rsi
1000078d6:	e8 c5 29 00 00	callq	0x10000a2a0
1000078db:	48 8b 3d c6 b3 05 00	movq	373702(%rip), %rdi
1000078e2:	4c 89 ee	movq	%r13, %rsi
1000078e5:	e8 b6 29 00 00	callq	0x10000a2a0
1000078ea:	48 8b 3d b7 b3 05 00	movq	373687(%rip), %rdi
1000078f1:	4c 89 e6	movq	%r12, %rsi
1000078f4:	e8 a7 29 00 00	callq	0x10000a2a0
1000078f9:	48 8b 3d a8 b3 05 00	movq	373672(%rip), %rdi
100007900:	48 8d 35 0b f6 03 00	leaq	259595(%rip), %rsi ## literal pool for: "Policies"
100007907:	48 8d 15 12 1f 05 00	leaq	335634(%rip), %rdx
10000790e:	e8 10 29 00 00	callq	0x10000a223
100007913:	48 8b 3d 8e b3 05 00	movq	373646(%rip), %rdi
10000791a:	48 8d 15 3f 1f 05 00	leaq	335679(%rip), %rdx
100007921:	48 8d 35 b0 ed 03 00	leaq	257456(%rip), %rsi ## literal pool for: "PublishesEvents"
100007928:	e8 f6 28 00 00	callq	0x10000a223
10000792d:	48 8b 3d 74 b3 05 00	movq	373620(%rip), %rdi
100007934:	48 8d 15 85 1f 05 00	leaq	335749(%rip), %rdx
10000793b:	48 8d 35 0e c8 03 00	leaq	247822(%rip), %rsi ## literal pool for: "KeepAlive"
100007942:	e8 dc 28 00 00	callq	0x10000a223
100007947:	48 8b 3d 5a b3 05 00	movq	373594(%rip), %rdi
10000794e:	48 8d 35 06 f6 03 00	leaq	259590(%rip), %rsi ## literal pool for: "inetdCompatibility"
100007955:	48 8d 15 c4 1f 05 00	leaq	335812(%rip), %rdx
10000795c:	e8 c2 28 00 00	callq	0x10000a223
100007961:	48 8b 3d 40 b3 05 00	movq	373568(%rip), %rdi
100007968:	48 8d 35 ff f5 03 00	leaq	259583(%rip), %rsi ## literal pool for: "JetsamProperties"
10000796f:	48 8d 15 ea 1f 05 00	leaq	335850(%rip), %rdx
100007976:	e8 a8 28 00 00	callq	0x10000a223
10000797b:	48 8b 3d 26 b3 05 00	movq	373542(%rip), %rdi
100007982:	48 8d 35 c8 bf 03 00	leaq	245704(%rip), %rsi ## literal pool for: "EnvironmentVariables"
100007989:	48 8d 15 10 20 05 00	leaq	335888(%rip), %rdx
100007990:	e8 8e 28 00 00	callq	0x10000a223
100007995:	48 8b 3d 0c b3 05 00	movq	373516(%rip), %rdi
10000799c:	48 8d 35 dc f5 03 00	leaq	259548(%rip), %rsi ## literal pool for: "UserEnvironmentVariables"
1000079a3:	48 8d 15 36 20 05 00	leaq	335926(%rip), %rdx
1000079aa:	e8 74 28 00 00	callq	0x10000a223
1000079af:	48 8b 3d f2 b2 05 00	movq	373490(%rip), %rdi
1000079b6:	48 8d 35 db f5 03 00	leaq	259547(%rip), %rsi ## literal pool for: "Sockets"
1000079bd:	48 8d 15 5c 20 05 00	leaq	335964(%rip), %rdx
1000079c4:	e8 5a 28 00 00	callq	0x10000a223
1000079c9:	48 8b 3d d8 b2 05 00	movq	373464(%rip), %rdi
1000079d0:	48 8d 15 a9 20 05 00	leaq	336041(%rip), %rdx
1000079d7:	48 89 de	movq	%rbx, %rsi
1000079da:	48 8b 5d b8	movq	-72(%rbp), %rbx
1000079de:	e8 40 28 00 00	callq	0x10000a223
1000079e3:	48 8b 3d be b2 05 00	movq	373438(%rip), %rdi
1000079ea:	48 8d 35 af f5 03 00	leaq	259503(%rip), %rsi ## literal pool for: "SoftResourceLimits"
1000079f1:	48 8d 15 c8 20 05 00	leaq	336072(%rip), %rdx
1000079f8:	e8 26 28 00 00	callq	0x10000a223
1000079fd:	48 8b 3d a4 b2 05 00	movq	373412(%rip), %rdi
100007a04:	48 8d 15 f5 20 05 00	leaq	336117(%rip), %rdx
100007a0b:	48 8d 35 22 ec 03 00	leaq	257058(%rip), %rsi ## literal pool for: "SandboxFlags"
100007a12:	e8 0c 28 00 00	callq	0x10000a223
100007a17:	48 8b 3d 8a b2 05 00	movq	373386(%rip), %rdi
100007a1e:	48 8d 35 8e f5 03 00	leaq	259470(%rip), %rsi ## literal pool for: "HardResourceLimits"
100007a25:	48 8d 15 14 21 05 00	leaq	336148(%rip), %rdx
100007a2c:	e8 f2 27 00 00	callq	0x10000a223
100007a31:	48 8b 3d 70 b2 05 00	movq	373360(%rip), %rdi
100007a38:	48 8d 35 87 f5 03 00	leaq	259463(%rip), %rsi ## literal pool for: "MachServices"
100007a3f:	48 8d 15 3a 21 05 00	leaq	336186(%rip), %rdx
100007a46:	e8 d8 27 00 00	callq	0x10000a223
100007a4b:	48 8b 3d 56 b2 05 00	movq	373334(%rip), %rdi
100007a52:	48 8d 35 7a f5 03 00	leaq	259450(%rip), %rsi ## literal pool for: "LaunchEvents"
100007a59:	48 8d 15 80 21 05 00	leaq	336256(%rip), %rdx
100007a60:	e8 be 27 00 00	callq	0x10000a223
100007a65:	48 8b 3d 3c b2 05 00	movq	373308(%rip), %rdi
100007a6c:	48 8d 35 54 cd 03 00	leaq	249172(%rip), %rsi ## literal pool for: "LimitLoadToHardware"
100007a73:	e8 28 28 00 00	callq	0x10000a2a0
100007a78:	48 8b 3d 29 b2 05 00	movq	373289(%rip), %rdi
100007a7f:	48 8d 35 55 cd 03 00	leaq	249173(%rip), %rsi ## literal pool for: "LimitLoadFromHardware"
100007a86:	e8 15 28 00 00	callq	0x10000a2a0
100007a8b:	48 8b 3d 16 b2 05 00	movq	373270(%rip), %rdi
100007a92:	48 8d 35 47 f5 03 00	leaq	259399(%rip), %rsi ## literal pool for: "Datastores"
100007a99:	48 8d 15 a0 21 05 00	leaq	336288(%rip), %rdx
100007aa0:	e8 7e 27 00 00	callq	0x10000a223
100007aa5:	48 8b 3d fc b1 05 00	movq	373244(%rip), %rdi
100007aac:	48 8d 35 e2 f5 03 00	leaq	259554(%rip), %rsi ## literal pool for: "RemoteServices"
100007ab3:	48 8d 15 e6 21 05 00	leaq	336358(%rip), %rdx
100007aba:	e8 64 27 00 00	callq	0x10000a223
100007abf:	48 8b 3d e2 b1 05 00	movq	373218(%rip), %rdi
100007ac6:	48 8d 35 b3 cb 03 00	leaq	248755(%rip), %rsi ## literal pool for: "_AdditionalProperties"
100007acd:	48 8d 15 2c 22 05 00	leaq	336428(%rip), %rdx
100007ad4:	e8 4a 27 00 00	callq	0x10000a223
100007ad9:	48 8b 3d c8 b1 05 00	movq	373192(%rip), %rdi
100007ae0:	48 8d 35 29 f6 03 00	leaq	259625(%rip), %rsi ## literal pool for: "_DextCheckInPort"
100007ae7:	48 8d 15 52 22 05 00	leaq	336466(%rip), %rdx
100007aee:	e8 6d 27 00 00	callq	0x10000a260
100007af3:	48 8b 45 d0	movq	-48(%rbp), %rax
100007af7:	4c 8b 45 c8	movq	-56(%rbp), %r8
100007afb:	48 8b 4d c0	movq	-64(%rbp), %rcx
100007aff:	48 8b 3d a2 b1 05 00	movq	373154(%rip), %rdi
100007b06:	48 89 de	movq	%rbx, %rsi
100007b09:	48 89 c2	movq	%rax, %rdx
100007b0c:	e8 9d 28 00 00	callq	0x10000a3ae
100007b11:	84 c0	testb	%al, %al
100007b13:	75 07	jne	0x100007b1c
100007b15:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
100007b1c:	48 83 c4 28	addq	$40, %rsp
100007b20:	5b	popq	%rbx
100007b21:	41 5c	popq	%r12
100007b23:	41 5d	popq	%r13
100007b25:	41 5e	popq	%r14
100007b27:	41 5f	popq	%r15
100007b29:	5d	popq	%rbp
100007b2a:	c3	retq
100007b2b:	55	pushq	%rbp
100007b2c:	48 89 e5	movq	%rsp, %rbp
100007b2f:	89 d0	movl	%edx, %eax
100007b31:	48 c1 e0 11	shlq	$17, %rax
100007b35:	48 c7 c1 ff ff fd ff	movq	$-131073, %rcx
100007b3c:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007b43:	48 09 c1	orq	%rax, %rcx
100007b46:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007b4d:	5d	popq	%rbp
100007b4e:	c3	retq
100007b4f:	55	pushq	%rbp
100007b50:	48 89 e5	movq	%rsp, %rbp
100007b53:	5d	popq	%rbp
100007b54:	c3	retq
100007b55:	55	pushq	%rbp
100007b56:	48 89 e5	movq	%rsp, %rbp
100007b59:	48 c1 e2 2d	shlq	$45, %rdx
100007b5d:	48 b8 ff ff ff ff ff df ff ff	movabsq	$-35184372088833, %rax
100007b67:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007b6e:	48 09 d0	orq	%rdx, %rax
100007b71:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007b78:	5d	popq	%rbp
100007b79:	c3	retq
100007b7a:	55	pushq	%rbp
100007b7b:	48 89 e5	movq	%rsp, %rbp
100007b7e:	5d	popq	%rbp
100007b7f:	c3	retq
100007b80:	85 d2	testl	%edx, %edx
100007b82:	74 2c	je	0x100007bb0
100007b84:	55	pushq	%rbp
100007b85:	48 89 e5	movq	%rsp, %rbp
100007b88:	53	pushq	%rbx
100007b89:	50	pushq	%rax
100007b8a:	48 89 f3	movq	%rsi, %rbx
100007b8d:	48 8d 15 1d d9 03 00	leaq	252189(%rip), %rdx ## literal pool for: "This service is defined to be constantly running and is inherently inefficient."
100007b94:	48 89 f7	movq	%rsi, %rdi
100007b97:	be 05 00 00 00	movl	$5, %esi
100007b9c:	31 c0	xorl	%eax, %eax
100007b9e:	e8 17 e4 00 00	callq	0x100015fba
100007ba3:	80 8b 0d 05 00 00 04	orb	$4, 1293(%rbx)
100007baa:	48 83 c4 08	addq	$8, %rsp
100007bae:	5b	popq	%rbx
100007baf:	5d	popq	%rbp
100007bb0:	c3	retq
100007bb1:	55	pushq	%rbp
100007bb2:	48 89 e5	movq	%rsp, %rbp
100007bb5:	53	pushq	%rbx
100007bb6:	50	pushq	%rax
100007bb7:	48 89 f3	movq	%rsi, %rbx
100007bba:	85 d2	testl	%edx, %edx
100007bbc:	74 1c	je	0x100007bda
100007bbe:	48 8d 15 45 d9 03 00	leaq	252229(%rip), %rdx ## literal pool for: "This key does not do anything: OnDemand"
100007bc5:	48 89 df	movq	%rbx, %rdi
100007bc8:	be 05 00 00 00	movl	$5, %esi
100007bcd:	31 c0	xorl	%eax, %eax
100007bcf:	48 83 c4 08	addq	$8, %rsp
100007bd3:	5b	popq	%rbx
100007bd4:	5d	popq	%rbp
100007bd5:	e9 e0 e3 00 00	jmp	0x100015fba
100007bda:	48 8d 15 51 d9 03 00	leaq	252241(%rip), %rdx ## literal pool for: "Please switch away from OnDemand to KeepAlive."
100007be1:	48 89 df	movq	%rbx, %rdi
100007be4:	be 05 00 00 00	movl	$5, %esi
100007be9:	31 c0	xorl	%eax, %eax
100007beb:	e8 ca e3 00 00	callq	0x100015fba
100007bf0:	80 8b 0d 05 00 00 04	orb	$4, 1293(%rbx)
100007bf7:	48 83 c4 08	addq	$8, %rsp
100007bfb:	5b	popq	%rbx
100007bfc:	5d	popq	%rbp
100007bfd:	c3	retq
100007bfe:	55	pushq	%rbp
100007bff:	48 89 e5	movq	%rsp, %rbp
100007c02:	48 89 f7	movq	%rsi, %rdi
100007c05:	48 8d 15 0c ca 03 00	leaq	248332(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007c0c:	48 8d 0d 4e d9 03 00	leaq	252238(%rip), %rcx ## literal pool for: "Debug"
100007c13:	4c 8d 05 4d d9 03 00	leaq	252237(%rip), %r8 ## literal pool for: "Please remove it."
100007c1a:	be 03 00 00 00	movl	$3, %esi
100007c1f:	31 c0	xorl	%eax, %eax
100007c21:	5d	popq	%rbp
100007c22:	e9 93 e3 00 00	jmp	0x100015fba
100007c27:	55	pushq	%rbp
100007c28:	48 89 e5	movq	%rsp, %rbp
100007c2b:	48 89 f7	movq	%rsi, %rdi
100007c2e:	48 8d 15 e3 c9 03 00	leaq	248291(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007c35:	48 8d 0d 3d d9 03 00	leaq	252221(%rip), %rcx ## literal pool for: "DisableASLR"
100007c3c:	4c 8d 05 24 d9 03 00	leaq	252196(%rip), %r8 ## literal pool for: "Please remove it."
100007c43:	be 03 00 00 00	movl	$3, %esi
100007c48:	31 c0	xorl	%eax, %eax
100007c4a:	5d	popq	%rbp
100007c4b:	e9 6a e3 00 00	jmp	0x100015fba
100007c50:	55	pushq	%rbp
100007c51:	48 89 e5	movq	%rsp, %rbp
100007c54:	48 c1 e2 32	shlq	$50, %rdx
100007c58:	48 b8 ff ff ff ff ff ff fb ff	movabsq	$-1125899906842625, %rax
100007c62:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007c69:	48 09 d0	orq	%rdx, %rax
100007c6c:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007c73:	5d	popq	%rbp
100007c74:	c3	retq
100007c75:	55	pushq	%rbp
100007c76:	48 89 e5	movq	%rsp, %rbp
100007c79:	48 c1 e2 28	shlq	$40, %rdx
100007c7d:	48 b8 ff ff ff ff ff fe ff ff	movabsq	$-1099511627777, %rax
100007c87:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007c8e:	48 09 d0	orq	%rdx, %rax
100007c91:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007c98:	5d	popq	%rbp
100007c99:	c3	retq
100007c9a:	55	pushq	%rbp
100007c9b:	48 89 e5	movq	%rsp, %rbp
100007c9e:	48 c1 e2 3b	shlq	$59, %rdx
100007ca2:	48 b8 ff ff ff ff ff ff ff f7	movabsq	$-576460752303423489, %rax
100007cac:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007cb3:	48 09 d0	orq	%rdx, %rax
100007cb6:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007cbd:	5d	popq	%rbp
100007cbe:	c3	retq
100007cbf:	55	pushq	%rbp
100007cc0:	48 89 e5	movq	%rsp, %rbp
100007cc3:	48 89 f7	movq	%rsi, %rdi
100007cc6:	48 8d 15 4b c9 03 00	leaq	248139(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007ccd:	48 8d 0d ed d8 03 00	leaq	252141(%rip), %rcx ## literal pool for: "HopefullyExitsLast"
100007cd4:	4c 8d 05 8c d8 03 00	leaq	252044(%rip), %r8 ## literal pool for: "Please remove it."
100007cdb:	be 03 00 00 00	movl	$3, %esi
100007ce0:	31 c0	xorl	%eax, %eax
100007ce2:	5d	popq	%rbp
100007ce3:	e9 d2 e2 00 00	jmp	0x100015fba
100007ce8:	55	pushq	%rbp
100007ce9:	48 89 e5	movq	%rsp, %rbp
100007cec:	89 d0	movl	%edx, %eax
100007cee:	48 c1 e0 0e	shlq	$14, %rax
100007cf2:	48 c7 c1 ff bf ff ff	movq	$-16385, %rcx
100007cf9:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007d00:	48 09 c1	orq	%rax, %rcx
100007d03:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007d0a:	5d	popq	%rbp
100007d0b:	c3	retq
100007d0c:	55	pushq	%rbp
100007d0d:	48 89 e5	movq	%rsp, %rbp
100007d10:	48 c1 e2 2b	shlq	$43, %rdx
100007d14:	48 b8 ff ff ff ff ff f7 ff ff	movabsq	$-8796093022209, %rax
100007d1e:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007d25:	48 09 d0	orq	%rdx, %rax
100007d28:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007d2f:	5d	popq	%rbp
100007d30:	c3	retq
100007d31:	55	pushq	%rbp
100007d32:	48 89 e5	movq	%rsp, %rbp
100007d35:	48 89 f7	movq	%rsi, %rdi
100007d38:	48 8d 15 d9 c8 03 00	leaq	248025(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007d3f:	48 8d 0d a9 d8 03 00	leaq	252073(%rip), %rcx ## literal pool for: "ServiceIPC"
100007d46:	4c 8d 05 1a d8 03 00	leaq	251930(%rip), %r8 ## literal pool for: "Please remove it."
100007d4d:	be 03 00 00 00	movl	$3, %esi
100007d52:	31 c0	xorl	%eax, %eax
100007d54:	5d	popq	%rbp
100007d55:	e9 60 e2 00 00	jmp	0x100015fba
100007d5a:	55	pushq	%rbp
100007d5b:	48 89 e5	movq	%rsp, %rbp
100007d5e:	48 89 f7	movq	%rsi, %rdi
100007d61:	48 8d 15 b0 c8 03 00	leaq	247984(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007d68:	48 8d 0d 8b d8 03 00	leaq	252043(%rip), %rcx ## literal pool for: "ShutdownMonitor"
100007d6f:	4c 8d 05 f1 d7 03 00	leaq	251889(%rip), %r8 ## literal pool for: "Please remove it."
100007d76:	be 03 00 00 00	movl	$3, %esi
100007d7b:	31 c0	xorl	%eax, %eax
100007d7d:	5d	popq	%rbp
100007d7e:	e9 37 e2 00 00	jmp	0x100015fba
100007d83:	55	pushq	%rbp
100007d84:	48 89 e5	movq	%rsp, %rbp
100007d87:	48 8b 86 0d 05 00 00	movq	1293(%rsi), %rax
100007d8e:	89 d1	movl	%edx, %ecx
100007d90:	48 c1 e1 04	shlq	$4, %rcx
100007d94:	48 83 e0 ef	andq	$-17, %rax
100007d98:	48 09 c8	orq	%rcx, %rax
100007d9b:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007da2:	5d	popq	%rbp
100007da3:	c3	retq
100007da4:	55	pushq	%rbp
100007da5:	48 89 e5	movq	%rsp, %rbp
100007da8:	48 8b 86 0d 05 00 00	movq	1293(%rsi), %rax
100007daf:	89 d1	movl	%edx, %ecx
100007db1:	48 c1 e1 05	shlq	$5, %rcx
100007db5:	48 83 e0 df	andq	$-33, %rax
100007db9:	48 09 c8	orq	%rcx, %rax
100007dbc:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007dc3:	5d	popq	%rbp
100007dc4:	c3	retq
100007dc5:	55	pushq	%rbp
100007dc6:	48 89 e5	movq	%rsp, %rbp
100007dc9:	48 8b 86 0d 05 00 00	movq	1293(%rsi), %rax
100007dd0:	89 d1	movl	%edx, %ecx
100007dd2:	48 c1 e1 06	shlq	$6, %rcx
100007dd6:	48 83 e0 bf	andq	$-65, %rax
100007dda:	48 09 c8	orq	%rcx, %rax
100007ddd:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007de4:	5d	popq	%rbp
100007de5:	c3	retq
100007de6:	55	pushq	%rbp
100007de7:	48 89 e5	movq	%rsp, %rbp
100007dea:	89 d0	movl	%edx, %eax
100007dec:	48 c1 e0 16	shlq	$22, %rax
100007df0:	48 c7 c1 ff ff bf ff	movq	$-4194305, %rcx
100007df7:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007dfe:	48 09 c1	orq	%rax, %rcx
100007e01:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007e08:	5d	popq	%rbp
100007e09:	c3	retq
100007e0a:	55	pushq	%rbp
100007e0b:	48 89 e5	movq	%rsp, %rbp
100007e0e:	89 d0	movl	%edx, %eax
100007e10:	48 c1 e0 07	shlq	$7, %rax
100007e14:	48 c7 c1 7f ff ff ff	movq	$-129, %rcx
100007e1b:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007e22:	48 09 c1	orq	%rax, %rcx
100007e25:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007e2c:	5d	popq	%rbp
100007e2d:	c3	retq
100007e2e:	55	pushq	%rbp
100007e2f:	48 89 e5	movq	%rsp, %rbp
100007e32:	88 96 0c 05 00 00	movb	%dl, 1292(%rsi)
100007e38:	5d	popq	%rbp
100007e39:	c3	retq
100007e3a:	55	pushq	%rbp
100007e3b:	48 89 e5	movq	%rsp, %rbp
100007e3e:	fe c2	incb	%dl
100007e40:	88 96 fc 04 00 00	movb	%dl, 1276(%rsi)
100007e46:	5d	popq	%rbp
100007e47:	c3	retq
100007e48:	55	pushq	%rbp
100007e49:	48 89 e5	movq	%rsp, %rbp
100007e4c:	31 c0	xorl	%eax, %eax
100007e4e:	85 d2	testl	%edx, %edx
100007e50:	0f 94 c0	sete	%al
100007e53:	48 c1 e0 23	shlq	$35, %rax
100007e57:	48 b9 ff ff ff ff f7 ff ff ff	movabsq	$-34359738369, %rcx
100007e61:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007e68:	48 09 c1	orq	%rax, %rcx
100007e6b:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007e72:	5d	popq	%rbp
100007e73:	c3	retq
100007e74:	55	pushq	%rbp
100007e75:	48 89 e5	movq	%rsp, %rbp
100007e78:	48 89 f7	movq	%rsi, %rdi
100007e7b:	48 8d 15 44 c7 03 00	leaq	247620(%rip), %rdx ## literal pool for: "The %s key is not yet implemented. %s"
100007e82:	48 8d 0d f5 d7 03 00	leaq	251893(%rip), %rcx ## literal pool for: "IgnoreProcessGroupAtShutdown"
100007e89:	4c 8d 05 5c c7 03 00	leaq	247644(%rip), %r8 ## literal pool for: "If you rely on this key, please file a bug."
100007e90:	be 03 00 00 00	movl	$3, %esi
100007e95:	31 c0	xorl	%eax, %eax
100007e97:	5d	popq	%rbp
100007e98:	e9 1d e1 00 00	jmp	0x100015fba
100007e9d:	55	pushq	%rbp
100007e9e:	48 89 e5	movq	%rsp, %rbp
100007ea1:	48 8b 86 0d 05 00 00	movq	1293(%rsi), %rax
100007ea8:	89 d1	movl	%edx, %ecx
100007eaa:	48 83 e0 f7	andq	$-9, %rax
100007eae:	48 8d 04 c8	leaq	(%rax,%rcx,8), %rax
100007eb2:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007eb9:	5d	popq	%rbp
100007eba:	c3	retq
100007ebb:	55	pushq	%rbp
100007ebc:	48 89 e5	movq	%rsp, %rbp
100007ebf:	48 c1 e2 21	shlq	$33, %rdx
100007ec3:	48 b8 ff ff ff ff fd ff ff ff	movabsq	$-8589934593, %rax
100007ecd:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007ed4:	48 09 d0	orq	%rdx, %rax
100007ed7:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007ede:	5d	popq	%rbp
100007edf:	c3	retq
100007ee0:	55	pushq	%rbp
100007ee1:	48 89 e5	movq	%rsp, %rbp
100007ee4:	48 c1 e2 3a	shlq	$58, %rdx
100007ee8:	48 b8 ff ff ff ff ff ff ff fb	movabsq	$-288230376151711745, %rax
100007ef2:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007ef9:	48 09 d0	orq	%rdx, %rax
100007efc:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007f03:	5d	popq	%rbp
100007f04:	c3	retq
100007f05:	55	pushq	%rbp
100007f06:	48 89 e5	movq	%rsp, %rbp
100007f09:	48 89 f7	movq	%rsi, %rdi
100007f0c:	48 8d 15 05 c7 03 00	leaq	247557(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100007f13:	48 8d 0d 9e d7 03 00	leaq	251806(%rip), %rcx ## literal pool for: "EnableGlobbing"
100007f1a:	4c 8d 05 46 d6 03 00	leaq	251462(%rip), %r8 ## literal pool for: "Please remove it."
100007f21:	be 03 00 00 00	movl	$3, %esi
100007f26:	31 c0	xorl	%eax, %eax
100007f28:	5d	popq	%rbp
100007f29:	e9 8c e0 00 00	jmp	0x100015fba
100007f2e:	55	pushq	%rbp
100007f2f:	48 89 e5	movq	%rsp, %rbp
100007f32:	5d	popq	%rbp
100007f33:	c3	retq
100007f34:	55	pushq	%rbp
100007f35:	48 89 e5	movq	%rsp, %rbp
100007f38:	89 d0	movl	%edx, %eax
100007f3a:	48 c1 e0 0a	shlq	$10, %rax
100007f3e:	48 c7 c1 ff fb ff ff	movq	$-1025, %rcx
100007f45:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007f4c:	48 09 c1	orq	%rax, %rcx
100007f4f:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007f56:	5d	popq	%rbp
100007f57:	c3	retq
100007f58:	55	pushq	%rbp
100007f59:	48 89 e5	movq	%rsp, %rbp
100007f5c:	5d	popq	%rbp
100007f5d:	c3	retq
100007f5e:	55	pushq	%rbp
100007f5f:	48 89 e5	movq	%rsp, %rbp
100007f62:	89 d0	movl	%edx, %eax
100007f64:	48 c1 e0 13	shlq	$19, %rax
100007f68:	48 c7 c1 ff ff f7 ff	movq	$-524289, %rcx
100007f6f:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007f76:	48 09 c1	orq	%rax, %rcx
100007f79:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007f80:	5d	popq	%rbp
100007f81:	c3	retq
100007f82:	55	pushq	%rbp
100007f83:	48 89 e5	movq	%rsp, %rbp
100007f86:	5d	popq	%rbp
100007f87:	c3	retq
100007f88:	55	pushq	%rbp
100007f89:	48 89 e5	movq	%rsp, %rbp
100007f8c:	89 d0	movl	%edx, %eax
100007f8e:	48 c1 e0 0b	shlq	$11, %rax
100007f92:	48 c7 c1 ff f7 ff ff	movq	$-2049, %rcx
100007f99:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
100007fa0:	48 09 c1	orq	%rax, %rcx
100007fa3:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
100007faa:	5d	popq	%rbp
100007fab:	c3	retq
100007fac:	55	pushq	%rbp
100007fad:	48 89 e5	movq	%rsp, %rbp
100007fb0:	48 c1 e2 37	shlq	$55, %rdx
100007fb4:	48 b8 ff ff ff ff ff ff 7f ff	movabsq	$-36028797018963969, %rax
100007fbe:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007fc5:	48 09 d0	orq	%rdx, %rax
100007fc8:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007fcf:	5d	popq	%rbp
100007fd0:	c3	retq
100007fd1:	55	pushq	%rbp
100007fd2:	48 89 e5	movq	%rsp, %rbp
100007fd5:	48 c1 e2 38	shlq	$56, %rdx
100007fd9:	48 b8 ff ff ff ff ff ff ff fe	movabsq	$-72057594037927937, %rax
100007fe3:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
100007fea:	48 09 d0	orq	%rdx, %rax
100007fed:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100007ff4:	5d	popq	%rbp
100007ff5:	c3	retq
100007ff6:	55	pushq	%rbp
100007ff7:	48 89 e5	movq	%rsp, %rbp
100007ffa:	48 b8 ff ff ff ff ff ff ff fd	movabsq	$-144115188075855873, %rax
100008004:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
10000800b:	48 c1 e2 39	shlq	$57, %rdx
10000800f:	48 09 d0	orq	%rdx, %rax
100008012:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100008019:	66 c7 86 b0 03 00 00 03 00	movw	$3, 944(%rsi)
100008022:	5d	popq	%rbp
100008023:	c3	retq
100008024:	55	pushq	%rbp
100008025:	48 89 e5	movq	%rsp, %rbp
100008028:	48 8b 86 0d 05 00 00	movq	1293(%rsi), %rax
10000802f:	48 0f ba e0 31	btq	$49, %rax
100008034:	72 1e	jb	0x100008054
100008036:	48 8d 15 25 d7 03 00	leaq	251685(%rip), %rdx ## literal pool for: "%s not permitted to be set on non-submitted jobs"
10000803d:	48 8d 0d 0a d7 03 00	leaq	251658(%rip), %rcx ## literal pool for: "_DisablePointerAuth"
100008044:	48 89 f7	movq	%rsi, %rdi
100008047:	be 03 00 00 00	movl	$3, %esi
10000804c:	31 c0	xorl	%eax, %eax
10000804e:	5d	popq	%rbp
10000804f:	e9 66 df 00 00	jmp	0x100015fba
100008054:	0f b6 8e 15 05 00 00	movzbl	1301(%rsi), %ecx
10000805b:	0f b6 d2	movzbl	%dl, %edx
10000805e:	48 c1 e2 3d	shlq	$61, %rdx
100008062:	48 0f ba f0 3d	btrq	$61, %rax
100008067:	48 09 d0	orq	%rdx, %rax
10000806a:	88 8e 15 05 00 00	movb	%cl, 1301(%rsi)
100008070:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
100008077:	5d	popq	%rbp
100008078:	c3	retq
100008079:	55	pushq	%rbp
10000807a:	48 89 e5	movq	%rsp, %rbp
10000807d:	41 57	pushq	%r15
10000807f:	41 56	pushq	%r14
100008081:	41 54	pushq	%r12
100008083:	53	pushq	%rbx
100008084:	49 89 f6	movq	%rsi, %r14
100008087:	48 85 d2	testq	%rdx, %rdx
10000808a:	78 16	js	0x1000080a2
10000808c:	48 89 d3	movq	%rdx, %rbx
10000808f:	b8 00 00 00 80	movl	$2147483648, %eax
100008094:	48 39 c2	cmpq	%rax, %rdx
100008097:	7c 2e	jl	0x1000080c7
100008099:	48 8d 15 41 c3 03 00	leaq	246593(%rip), %rdx ## literal pool for: "%s is too large. Ignoring."
1000080a0:	eb 07	jmp	0x1000080a9
1000080a2:	48 8d 15 1b c3 03 00	leaq	246555(%rip), %rdx ## literal pool for: "%s less than zero. Ignoring."
1000080a9:	48 8d 0d e3 d6 03 00	leaq	251619(%rip), %rcx ## literal pool for: "ExitTimeOut"
1000080b0:	4c 89 f7	movq	%r14, %rdi
1000080b3:	be 04 00 00 00	movl	$4, %esi
1000080b8:	31 c0	xorl	%eax, %eax
1000080ba:	5b	popq	%rbx
1000080bb:	41 5c	popq	%r12
1000080bd:	41 5e	popq	%r14
1000080bf:	41 5f	popq	%r15
1000080c1:	5d	popq	%rbp
1000080c2:	e9 f3 de 00 00	jmp	0x100015fba
1000080c7:	4c 8d 25 96 a5 05 00	leaq	370070(%rip), %r12
1000080ce:	41 8b 04 24	movl	(%r12), %eax
1000080d2:	85 c0	testl	%eax, %eax
1000080d4:	74 33	je	0x100008109
1000080d6:	48 8d 0d 7f a5 05 00	leaq	370047(%rip), %rcx
1000080dd:	8b 09	movl	(%rcx), %ecx
1000080df:	44 8d 3c 0b	leal	(%rbx,%rcx), %r15d
1000080e3:	41 83 c7 02	addl	$2, %r15d
1000080e7:	41 39 c7	cmpl	%eax, %r15d
1000080ea:	7e 1d	jle	0x100008109
1000080ec:	48 8d 15 0c dd 03 00	leaq	253196(%rip), %rdx ## literal pool for: "Service has increased maximum shutdown time to %d seconds. This will create a poor experience for the user."
1000080f3:	4c 89 f7	movq	%r14, %rdi
1000080f6:	be 04 00 00 00	movl	$4, %esi
1000080fb:	44 89 f9	movl	%r15d, %ecx
1000080fe:	31 c0	xorl	%eax, %eax
100008100:	e8 b5 de 00 00	callq	0x100015fba
100008105:	45 89 3c 24	movl	%r15d, (%r12)
100008109:	41 89 9e e0 02 00 00	movl	%ebx, 736(%r14)
100008110:	5b	popq	%rbx
100008111:	41 5c	popq	%r12
100008113:	41 5e	popq	%r14
100008115:	41 5f	popq	%r15
100008117:	5d	popq	%rbp
100008118:	c3	retq
100008119:	55	pushq	%rbp
10000811a:	48 89 e5	movq	%rsp, %rbp
10000811d:	5d	popq	%rbp
10000811e:	c3	retq
10000811f:	55	pushq	%rbp
100008120:	48 89 e5	movq	%rsp, %rbp
100008123:	5d	popq	%rbp
100008124:	c3	retq
100008125:	55	pushq	%rbp
100008126:	48 89 e5	movq	%rsp, %rbp
100008129:	5d	popq	%rbp
10000812a:	c3	retq
10000812b:	55	pushq	%rbp
10000812c:	48 89 e5	movq	%rsp, %rbp
10000812f:	89 96 f8 04 00 00	movl	%edx, 1272(%rsi)
100008135:	80 8e 13 05 00 00 20	orb	$32, 1299(%rsi)
10000813c:	5d	popq	%rbp
10000813d:	c3	retq
10000813e:	55	pushq	%rbp
10000813f:	48 89 e5	movq	%rsp, %rbp
100008142:	89 96 08 05 00 00	movl	%edx, 1288(%rsi)
100008148:	5d	popq	%rbp
100008149:	c3	retq
10000814a:	55	pushq	%rbp
10000814b:	48 89 e5	movq	%rsp, %rbp
10000814e:	48 89 f7	movq	%rsi, %rdi
100008151:	48 8d 15 c0 c4 03 00	leaq	246976(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100008158:	48 8d 0d 4f dd 03 00	leaq	253263(%rip), %rcx ## literal pool for: "JetsamPriority"
10000815f:	4c 8d 05 57 dd 03 00	leaq	253271(%rip), %r8 ## literal pool for: "Please use JetsamProperties instead."
100008166:	be 03 00 00 00	movl	$3, %esi
10000816b:	31 c0	xorl	%eax, %eax
10000816d:	5d	popq	%rbp
10000816e:	e9 47 de 00 00	jmp	0x100015fba
100008173:	55	pushq	%rbp
100008174:	48 89 e5	movq	%rsp, %rbp
100008177:	48 89 f7	movq	%rsi, %rdi
10000817a:	48 8d 15 97 c4 03 00	leaq	246935(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100008181:	48 8d 0d 5a dd 03 00	leaq	253274(%rip), %rcx ## literal pool for: "JetsamMemoryLimit"
100008188:	4c 8d 05 65 dd 03 00	leaq	253285(%rip), %r8 ## literal pool for: "The key is ignored, please switch to (Active|Inactive)(Soft|Hard)MemoryLimit"
10000818f:	be 03 00 00 00	movl	$3, %esi
100008194:	31 c0	xorl	%eax, %eax
100008196:	5d	popq	%rbp
100008197:	e9 1e de 00 00	jmp	0x100015fba
10000819c:	55	pushq	%rbp
10000819d:	48 89 e5	movq	%rsp, %rbp
1000081a0:	89 96 90 03 00 00	movl	%edx, 912(%rsi)
1000081a6:	80 8e 12 05 00 00 04	orb	$4, 1298(%rsi)
1000081ad:	5d	popq	%rbp
1000081ae:	c3	retq
1000081af:	55	pushq	%rbp
1000081b0:	48 89 e5	movq	%rsp, %rbp
1000081b3:	48 89 f7	movq	%rsi, %rdi
1000081b6:	48 8d 15 5b c4 03 00	leaq	246875(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
1000081bd:	48 8d 0d 82 dd 03 00	leaq	253314(%rip), %rcx ## literal pool for: "TimeOut"
1000081c4:	4c 8d 05 83 dd 03 00	leaq	253315(%rip), %r8 ## literal pool for: "It never did anything anyway."
1000081cb:	be 03 00 00 00	movl	$3, %esi
1000081d0:	31 c0	xorl	%eax, %eax
1000081d2:	5d	popq	%rbp
1000081d3:	e9 e2 dd 00 00	jmp	0x100015fba
1000081d8:	55	pushq	%rbp
1000081d9:	48 89 e5	movq	%rsp, %rbp
1000081dc:	53	pushq	%rbx
1000081dd:	50	pushq	%rax
1000081de:	48 89 f3	movq	%rsi, %rbx
1000081e1:	48 85 d2	testq	%rdx, %rdx
1000081e4:	78 18	js	0x1000081fe
1000081e6:	48 b8 00 00 00 00 01 00 00 00	movabsq	$__mh_execute_header, %rax
1000081f0:	48 39 c2	cmpq	%rax, %rdx
1000081f3:	7c 2c	jl	0x100008221
1000081f5:	48 8d 15 e5 c1 03 00	leaq	246245(%rip), %rdx ## literal pool for: "%s is too large. Ignoring."
1000081fc:	eb 07	jmp	0x100008205
1000081fe:	48 8d 15 bf c1 03 00	leaq	246207(%rip), %rdx ## literal pool for: "%s less than zero. Ignoring."
100008205:	48 8d 0d 60 dd 03 00	leaq	253280(%rip), %rcx ## literal pool for: "ThrottleInterval"
10000820c:	48 89 df	movq	%rbx, %rdi
10000820f:	be 04 00 00 00	movl	$4, %esi
100008214:	31 c0	xorl	%eax, %eax
100008216:	48 83 c4 08	addq	$8, %rsp
10000821a:	5b	popq	%rbx
10000821b:	5d	popq	%rbp
10000821c:	e9 99 dd 00 00	jmp	0x100015fba
100008221:	48 85 d2	testq	%rdx, %rdx
100008224:	74 08	je	0x10000822e
100008226:	89 93 e4 02 00 00	movl	%edx, 740(%rbx)
10000822c:	eb 20	jmp	0x10000824e
10000822e:	48 8d 15 48 dd 03 00	leaq	253256(%rip), %rdx ## literal pool for: "ThrottleInterval set to zero. You're not that important. Ignoring."
100008235:	48 89 df	movq	%rbx, %rdi
100008238:	be 03 00 00 00	movl	$3, %esi
10000823d:	31 c0	xorl	%eax, %eax
10000823f:	e8 76 dd 00 00	callq	0x100015fba
100008244:	c7 83 e4 02 00 00 01 00 00 00	movl	$1, 740(%rbx)
10000824e:	48 83 c4 08	addq	$8, %rsp
100008252:	5b	popq	%rbx
100008253:	5d	popq	%rbp
100008254:	c3	retq
100008255:	55	pushq	%rbp
100008256:	48 89 e5	movq	%rsp, %rbp
100008259:	80 8e 11 05 00 00 10	orb	$16, 1297(%rsi)
100008260:	66 89 96 d0 02 00 00	movw	%dx, 720(%rsi)
100008267:	5d	popq	%rbp
100008268:	c3	retq
100008269:	55	pushq	%rbp
10000826a:	48 89 e5	movq	%rsp, %rbp
10000826d:	53	pushq	%rbx
10000826e:	50	pushq	%rax
10000826f:	48 89 d7	movq	%rdx, %rdi
100008272:	48 89 f3	movq	%rsi, %rbx
100008275:	31 f6	xorl	%esi, %esi
100008277:	31 d2	xorl	%edx, %edx
100008279:	e8 0e 9c 03 00	callq	0x100041e8c ## symbol stub for: _strtoul
10000827e:	80 8b 11 05 00 00 10	orb	$16, 1297(%rbx)
100008285:	66 89 83 d0 02 00 00	movw	%ax, 720(%rbx)
10000828c:	48 83 c4 08	addq	$8, %rsp
100008290:	5b	popq	%rbx
100008291:	5d	popq	%rbp
100008292:	c3	retq
100008293:	55	pushq	%rbp
100008294:	48 89 e5	movq	%rsp, %rbp
100008297:	89 96 08 03 00 00	movl	%edx, 776(%rsi)
10000829d:	5d	popq	%rbp
10000829e:	c3	retq
10000829f:	55	pushq	%rbp
1000082a0:	48 89 e5	movq	%rsp, %rbp
1000082a3:	48 89 f7	movq	%rsi, %rdi
1000082a6:	48 8d 15 6b c3 03 00	leaq	246635(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
1000082ad:	48 8d 0d 80 e3 03 00	leaq	254848(%rip), %rcx ## literal pool for: "SandboxFlags"
1000082b4:	4c 8d 05 ac d2 03 00	leaq	250540(%rip), %r8 ## literal pool for: "Please remove it."
1000082bb:	be 03 00 00 00	movl	$3, %esi
1000082c0:	31 c0	xorl	%eax, %eax
1000082c2:	5d	popq	%rbp
1000082c3:	e9 f2 dc 00 00	jmp	0x100015fba
1000082c8:	55	pushq	%rbp
1000082c9:	48 89 e5	movq	%rsp, %rbp
1000082cc:	89 96 24 03 00 00	movl	%edx, 804(%rsi)
1000082d2:	5d	popq	%rbp
1000082d3:	c3	retq
1000082d4:	55	pushq	%rbp
1000082d5:	48 89 e5	movq	%rsp, %rbp
1000082d8:	53	pushq	%rbx
1000082d9:	50	pushq	%rax
1000082da:	48 89 d7	movq	%rdx, %rdi
1000082dd:	48 89 f3	movq	%rsi, %rbx
1000082e0:	e8 fd 6c 00 00	callq	0x10000efe2
1000082e5:	48 89 83 38 02 00 00	movq	%rax, 568(%rbx)
1000082ec:	48 83 c4 08	addq	$8, %rsp
1000082f0:	5b	popq	%rbx
1000082f1:	5d	popq	%rbp
1000082f2:	c3	retq
1000082f3:	55	pushq	%rbp
1000082f4:	48 89 e5	movq	%rsp, %rbp
1000082f7:	41 56	pushq	%r14
1000082f9:	53	pushq	%rbx
1000082fa:	49 89 d6	movq	%rdx, %r14
1000082fd:	48 89 f3	movq	%rsi, %rbx
100008300:	48 89 d7	movq	%rdx, %rdi
100008303:	e8 da 6c 00 00	callq	0x10000efe2
100008308:	48 89 83 60 02 00 00	movq	%rax, 608(%rbx)
10000830f:	4c 89 f7	movq	%r14, %rdi
100008312:	e8 3f 9b 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008317:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
10000831e:	48 01 c8	addq	%rcx, %rax
100008321:	48 ff c0	incq	%rax
100008324:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
10000832b:	5b	popq	%rbx
10000832c:	41 5e	popq	%r14
10000832e:	5d	popq	%rbp
10000832f:	c3	retq
100008330:	55	pushq	%rbp
100008331:	48 89 e5	movq	%rsp, %rbp
100008334:	41 56	pushq	%r14
100008336:	53	pushq	%rbx
100008337:	49 89 d6	movq	%rdx, %r14
10000833a:	48 89 f3	movq	%rsi, %rbx
10000833d:	48 89 d7	movq	%rdx, %rdi
100008340:	e8 9d 6c 00 00	callq	0x10000efe2
100008345:	48 89 83 68 02 00 00	movq	%rax, 616(%rbx)
10000834c:	4c 89 f7	movq	%r14, %rdi
10000834f:	e8 02 9b 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008354:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
10000835b:	48 01 c8	addq	%rcx, %rax
10000835e:	48 ff c0	incq	%rax
100008361:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100008368:	5b	popq	%rbx
100008369:	41 5e	popq	%r14
10000836b:	5d	popq	%rbp
10000836c:	c3	retq
10000836d:	55	pushq	%rbp
10000836e:	48 89 e5	movq	%rsp, %rbp
100008371:	53	pushq	%rbx
100008372:	50	pushq	%rax
100008373:	48 89 d7	movq	%rdx, %rdi
100008376:	48 89 f3	movq	%rsi, %rbx
100008379:	e8 64 6c 00 00	callq	0x10000efe2
10000837e:	48 89 83 18 03 00 00	movq	%rax, 792(%rbx)
100008385:	48 83 c4 08	addq	$8, %rsp
100008389:	5b	popq	%rbx
10000838a:	5d	popq	%rbp
10000838b:	c3	retq
10000838c:	55	pushq	%rbp
10000838d:	48 89 e5	movq	%rsp, %rbp
100008390:	41 57	pushq	%r15
100008392:	41 56	pushq	%r14
100008394:	53	pushq	%rbx
100008395:	50	pushq	%rax
100008396:	49 89 ce	movq	%rcx, %r14
100008399:	48 89 d3	movq	%rdx, %rbx
10000839c:	49 89 f7	movq	%rsi, %r15
10000839f:	48 8d 35 7b ed 03 00	leaq	257403(%rip), %rsi ## literal pool for: "Managed"
1000083a6:	48 89 d7	movq	%rdx, %rdi
1000083a9:	e8 85 6f 00 00	callq	0x10000f333
1000083ae:	84 c0	testb	%al, %al
1000083b0:	74 1f	je	0x1000083d1
1000083b2:	41 c6 87 0c 05 00 00 02	movb	$2, 1292(%r15)
1000083ba:	4c 89 ff	movq	%r15, %rdi
1000083bd:	be 0f 00 00 00	movl	$15, %esi
1000083c2:	48 83 c4 08	addq	$8, %rsp
1000083c6:	5b	popq	%rbx
1000083c7:	41 5e	popq	%r14
1000083c9:	41 5f	popq	%r15
1000083cb:	5d	popq	%rbp
1000083cc:	e9 07 5e 01 00	jmp	0x10001e1d8
1000083d1:	48 8d 15 51 ed 03 00	leaq	257361(%rip), %rdx ## literal pool for: "Invalid value for MultipleInstances '%s'"
1000083d8:	4c 89 f7	movq	%r14, %rdi
1000083db:	be 03 00 00 00	movl	$3, %esi
1000083e0:	48 89 d9	movq	%rbx, %rcx
1000083e3:	31 c0	xorl	%eax, %eax
1000083e5:	48 83 c4 08	addq	$8, %rsp
1000083e9:	5b	popq	%rbx
1000083ea:	41 5e	popq	%r14
1000083ec:	41 5f	popq	%r15
1000083ee:	5d	popq	%rbp
1000083ef:	e9 51 62 00 00	jmp	0x10000e645
1000083f4:	55	pushq	%rbp
1000083f5:	48 89 e5	movq	%rsp, %rbp
1000083f8:	48 89 f7	movq	%rsi, %rdi
1000083fb:	48 89 d6	movq	%rdx, %rsi
1000083fe:	5d	popq	%rbp
1000083ff:	e9 ff ac ff ff	jmp	0x100003103
100008404:	55	pushq	%rbp
100008405:	48 89 e5	movq	%rsp, %rbp
100008408:	41 57	pushq	%r15
10000840a:	41 56	pushq	%r14
10000840c:	53	pushq	%rbx
10000840d:	50	pushq	%rax
10000840e:	49 89 ce	movq	%rcx, %r14
100008411:	49 89 d7	movq	%rdx, %r15
100008414:	48 89 f3	movq	%rsi, %rbx
100008417:	bf 01 00 00 00	movl	$1, %edi
10000841c:	e8 6d 9b 03 00	callq	0x100041f8e ## symbol stub for: _xpc_bool_create
100008421:	48 89 df	movq	%rbx, %rdi
100008424:	4c 89 fe	movq	%r15, %rsi
100008427:	48 89 c2	movq	%rax, %rdx
10000842a:	4c 89 f1	movq	%r14, %rcx
10000842d:	48 83 c4 08	addq	$8, %rsp
100008431:	5b	popq	%rbx
100008432:	41 5e	popq	%r14
100008434:	41 5f	popq	%r15
100008436:	5d	popq	%rbp
100008437:	e9 00 00 00 00	jmp	0x10000843c
10000843c:	55	pushq	%rbp
10000843d:	48 89 e5	movq	%rsp, %rbp
100008440:	41 57	pushq	%r15
100008442:	41 56	pushq	%r14
100008444:	41 55	pushq	%r13
100008446:	41 54	pushq	%r12
100008448:	53	pushq	%rbx
100008449:	48 83 ec 58	subq	$88, %rsp
10000844d:	49 89 cc	movq	%rcx, %r12
100008450:	48 89 d3	movq	%rdx, %rbx
100008453:	49 89 f6	movq	%rsi, %r14
100008456:	49 89 ff	movq	%rdi, %r15
100008459:	48 83 bf f0 01 00 00 00	cmpq	$0, 496(%rdi)
100008461:	75 12	jne	0x100008475
100008463:	31 ff	xorl	%edi, %edi
100008465:	31 f6	xorl	%esi, %esi
100008467:	31 d2	xorl	%edx, %edx
100008469:	e8 a4 9b 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000846e:	49 89 87 f0 01 00 00	movq	%rax, 496(%r15)
100008475:	48 89 df	movq	%rbx, %rdi
100008478:	e8 49 9c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000847d:	48 3b 05 5c fc 04 00	cmpq	326748(%rip), %rax ## literal pool symbol address: __xpc_type_bool
100008484:	0f 84 a0 00 00 00	je	0x10000852a
10000848a:	48 89 df	movq	%rbx, %rdi
10000848d:	e8 34 9c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008492:	48 3b 05 67 fc 04 00	cmpq	326759(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100008499:	0f 85 b6 00 00 00	jne	0x100008555
10000849f:	4c 8d 6d b8	leaq	-72(%rbp), %r13
1000084a3:	49 c7 45 00 00 00 00 00	movq	$0, (%r13)
1000084ab:	4d 89 6d 08	movq	%r13, 8(%r13)
1000084af:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
1000084b9:	49 89 45 10	movq	%rax, 16(%r13)
1000084bd:	41 c7 45 18 00 00 00 00	movl	$0, 24(%r13)
1000084c5:	48 8b 05 4c fb 04 00	movq	326476(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000084cc:	48 8d 75 80	leaq	-128(%rbp), %rsi
1000084d0:	48 89 06	movq	%rax, (%rsi)
1000084d3:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
1000084db:	48 8d 05 6b 14 00 00	leaq	5227(%rip), %rax
1000084e2:	48 89 46 10	movq	%rax, 16(%rsi)
1000084e6:	48 8d 05 73 18 05 00	leaq	333939(%rip), %rax
1000084ed:	48 89 46 18	movq	%rax, 24(%rsi)
1000084f1:	4c 89 6e 20	movq	%r13, 32(%rsi)
1000084f5:	4c 89 66 28	movq	%r12, 40(%rsi)
1000084f9:	4c 89 7e 30	movq	%r15, 48(%rsi)
1000084fd:	48 89 df	movq	%rbx, %rdi
100008500:	e8 fb 9a 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100008505:	49 8b bf f0 01 00 00	movq	496(%r15), %rdi
10000850c:	49 8b 45 08	movq	8(%r13), %rax
100008510:	8b 50 18	movl	24(%rax), %edx
100008513:	4c 89 f6	movq	%r14, %rsi
100008516:	e8 87 9b 03 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10000851b:	4c 89 ef	movq	%r13, %rdi
10000851e:	be 08 00 00 00	movl	$8, %esi
100008523:	e8 08 92 03 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
100008528:	eb 2b	jmp	0x100008555
10000852a:	48 89 df	movq	%rbx, %rdi
10000852d:	e8 62 9a 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100008532:	84 c0	testb	%al, %al
100008534:	74 1f	je	0x100008555
100008536:	49 8b bf f0 01 00 00	movq	496(%r15), %rdi
10000853d:	4c 89 f6	movq	%r14, %rsi
100008540:	31 d2	xorl	%edx, %edx
100008542:	48 83 c4 58	addq	$88, %rsp
100008546:	5b	popq	%rbx
100008547:	41 5c	popq	%r12
100008549:	41 5d	popq	%r13
10000854b:	41 5e	popq	%r14
10000854d:	41 5f	popq	%r15
10000854f:	5d	popq	%rbp
100008550:	e9 4d 9b 03 00	jmp	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100008555:	48 83 c4 58	addq	$88, %rsp
100008559:	5b	popq	%rbx
10000855a:	41 5c	popq	%r12
10000855c:	41 5d	popq	%r13
10000855e:	41 5e	popq	%r14
100008560:	41 5f	popq	%r15
100008562:	5d	popq	%rbp
100008563:	c3	retq
100008564:	55	pushq	%rbp
100008565:	48 89 e5	movq	%rsp, %rbp
100008568:	48 89 f7	movq	%rsi, %rdi
10000856b:	48 8d 15 a6 c0 03 00	leaq	245926(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100008572:	48 8d 0d 6f e1 03 00	leaq	254319(%rip), %rcx ## literal pool for: "LimitLoadToHosts"
100008579:	4c 8d 05 e7 cf 03 00	leaq	249831(%rip), %r8 ## literal pool for: "Please remove it."
100008580:	be 03 00 00 00	movl	$3, %esi
100008585:	31 c0	xorl	%eax, %eax
100008587:	5d	popq	%rbp
100008588:	e9 2d da 00 00	jmp	0x100015fba
10000858d:	55	pushq	%rbp
10000858e:	48 89 e5	movq	%rsp, %rbp
100008591:	48 89 f7	movq	%rsi, %rdi
100008594:	48 8d 15 7d c0 03 00	leaq	245885(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
10000859b:	48 8d 0d 57 e1 03 00	leaq	254295(%rip), %rcx ## literal pool for: "LimitLoadFromHosts"
1000085a2:	4c 8d 05 be cf 03 00	leaq	249790(%rip), %r8 ## literal pool for: "Please remove it."
1000085a9:	be 03 00 00 00	movl	$3, %esi
1000085ae:	31 c0	xorl	%eax, %eax
1000085b0:	5d	popq	%rbp
1000085b1:	e9 04 da 00 00	jmp	0x100015fba
1000085b6:	55	pushq	%rbp
1000085b7:	48 89 e5	movq	%rsp, %rbp
1000085ba:	41 56	pushq	%r14
1000085bc:	53	pushq	%rbx
1000085bd:	49 89 d6	movq	%rdx, %r14
1000085c0:	48 89 f3	movq	%rsi, %rbx
1000085c3:	48 89 d7	movq	%rdx, %rdi
1000085c6:	e8 17 6a 00 00	callq	0x10000efe2
1000085cb:	48 89 83 c0 02 00 00	movq	%rax, 704(%rbx)
1000085d2:	4c 89 f7	movq	%r14, %rdi
1000085d5:	e8 7c 98 03 00	callq	0x100041e56 ## symbol stub for: _strlen
1000085da:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
1000085e1:	48 01 c8	addq	%rcx, %rax
1000085e4:	48 ff c0	incq	%rax
1000085e7:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
1000085ee:	80 8b 14 05 00 00 10	orb	$16, 1300(%rbx)
1000085f5:	5b	popq	%rbx
1000085f6:	41 5e	popq	%r14
1000085f8:	5d	popq	%rbp
1000085f9:	c3	retq
1000085fa:	55	pushq	%rbp
1000085fb:	48 89 e5	movq	%rsp, %rbp
1000085fe:	48 89 f7	movq	%rsi, %rdi
100008601:	48 8d 15 be bf 03 00	leaq	245694(%rip), %rdx ## literal pool for: "The %s key is not yet implemented. %s"
100008608:	48 8d 0d 11 e1 03 00	leaq	254225(%rip), %rcx ## literal pool for: "RootDirectory"
10000860f:	4c 8d 05 d6 bf 03 00	leaq	245718(%rip), %r8 ## literal pool for: "If you rely on this key, please file a bug."
100008616:	be 03 00 00 00	movl	$3, %esi
10000861b:	31 c0	xorl	%eax, %eax
10000861d:	5d	popq	%rbp
10000861e:	e9 97 d9 00 00	jmp	0x100015fba
100008623:	55	pushq	%rbp
100008624:	48 89 e5	movq	%rsp, %rbp
100008627:	53	pushq	%rbx
100008628:	50	pushq	%rax
100008629:	48 89 d7	movq	%rdx, %rdi
10000862c:	48 89 f3	movq	%rsi, %rbx
10000862f:	e8 ae 69 00 00	callq	0x10000efe2
100008634:	48 89 83 b0 01 00 00	movq	%rax, 432(%rbx)
10000863b:	48 89 c7	movq	%rax, %rdi
10000863e:	e8 13 98 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008643:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
10000864a:	48 01 c8	addq	%rcx, %rax
10000864d:	48 ff c0	incq	%rax
100008650:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100008657:	48 83 c4 08	addq	$8, %rsp
10000865b:	5b	popq	%rbx
10000865c:	5d	popq	%rbp
10000865d:	c3	retq
10000865e:	55	pushq	%rbp
10000865f:	48 89 e5	movq	%rsp, %rbp
100008662:	41 56	pushq	%r14
100008664:	53	pushq	%rbx
100008665:	48 89 d3	movq	%rdx, %rbx
100008668:	49 89 f6	movq	%rsi, %r14
10000866b:	48 8d 35 3f be 03 00	leaq	245311(%rip), %rsi ## literal pool for: "root"
100008672:	48 89 d7	movq	%rdx, %rdi
100008675:	e8 b2 97 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000867a:	85 c0	testl	%eax, %eax
10000867c:	74 2b	je	0x1000086a9
10000867e:	48 89 df	movq	%rbx, %rdi
100008681:	e8 5c 69 00 00	callq	0x10000efe2
100008686:	49 89 86 c0 02 00 00	movq	%rax, 704(%r14)
10000868d:	48 89 df	movq	%rbx, %rdi
100008690:	e8 c1 97 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008695:	49 8b 8e 50 02 00 00	movq	592(%r14), %rcx
10000869c:	48 01 c8	addq	%rcx, %rax
10000869f:	48 ff c0	incq	%rax
1000086a2:	49 89 86 50 02 00 00	movq	%rax, 592(%r14)
1000086a9:	5b	popq	%rbx
1000086aa:	41 5e	popq	%r14
1000086ac:	5d	popq	%rbp
1000086ad:	c3	retq
1000086ae:	55	pushq	%rbp
1000086af:	48 89 e5	movq	%rsp, %rbp
1000086b2:	41 56	pushq	%r14
1000086b4:	53	pushq	%rbx
1000086b5:	48 89 d3	movq	%rdx, %rbx
1000086b8:	49 89 f6	movq	%rsi, %r14
1000086bb:	48 8d 35 76 e0 03 00	leaq	254070(%rip), %rsi ## literal pool for: "wheel"
1000086c2:	48 89 d7	movq	%rdx, %rdi
1000086c5:	e8 62 97 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000086ca:	85 c0	testl	%eax, %eax
1000086cc:	74 2b	je	0x1000086f9
1000086ce:	48 89 df	movq	%rbx, %rdi
1000086d1:	e8 0c 69 00 00	callq	0x10000efe2
1000086d6:	49 89 86 c8 02 00 00	movq	%rax, 712(%r14)
1000086dd:	48 89 df	movq	%rbx, %rdi
1000086e0:	e8 71 97 03 00	callq	0x100041e56 ## symbol stub for: _strlen
1000086e5:	49 8b 8e 50 02 00 00	movq	592(%r14), %rcx
1000086ec:	48 01 c8	addq	%rcx, %rax
1000086ef:	48 ff c0	incq	%rax
1000086f2:	49 89 86 50 02 00 00	movq	%rax, 592(%r14)
1000086f9:	5b	popq	%rbx
1000086fa:	41 5e	popq	%r14
1000086fc:	5d	popq	%rbp
1000086fd:	c3	retq
1000086fe:	55	pushq	%rbp
1000086ff:	48 89 e5	movq	%rsp, %rbp
100008702:	53	pushq	%rbx
100008703:	50	pushq	%rax
100008704:	48 89 d7	movq	%rdx, %rdi
100008707:	48 89 f3	movq	%rsi, %rbx
10000870a:	e8 d3 68 00 00	callq	0x10000efe2
10000870f:	48 89 83 c0 01 00 00	movq	%rax, 448(%rbx)
100008716:	48 89 c7	movq	%rax, %rdi
100008719:	e8 38 97 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000871e:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100008725:	48 01 c8	addq	%rcx, %rax
100008728:	48 ff c0	incq	%rax
10000872b:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100008732:	48 83 c4 08	addq	$8, %rsp
100008736:	5b	popq	%rbx
100008737:	5d	popq	%rbp
100008738:	c3	retq
100008739:	55	pushq	%rbp
10000873a:	48 89 e5	movq	%rsp, %rbp
10000873d:	53	pushq	%rbx
10000873e:	50	pushq	%rax
10000873f:	48 89 d7	movq	%rdx, %rdi
100008742:	48 89 f3	movq	%rsi, %rbx
100008745:	e8 98 68 00 00	callq	0x10000efe2
10000874a:	48 89 83 c8 01 00 00	movq	%rax, 456(%rbx)
100008751:	48 89 c7	movq	%rax, %rdi
100008754:	e8 fd 96 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008759:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100008760:	48 01 c8	addq	%rcx, %rax
100008763:	48 ff c0	incq	%rax
100008766:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
10000876d:	48 83 c4 08	addq	$8, %rsp
100008771:	5b	popq	%rbx
100008772:	5d	popq	%rbp
100008773:	c3	retq
100008774:	55	pushq	%rbp
100008775:	48 89 e5	movq	%rsp, %rbp
100008778:	53	pushq	%rbx
100008779:	50	pushq	%rax
10000877a:	48 89 d7	movq	%rdx, %rdi
10000877d:	48 89 f3	movq	%rsi, %rbx
100008780:	e8 5d 68 00 00	callq	0x10000efe2
100008785:	48 89 83 b8 01 00 00	movq	%rax, 440(%rbx)
10000878c:	48 89 c7	movq	%rax, %rdi
10000878f:	e8 c2 96 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008794:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
10000879b:	48 01 c8	addq	%rcx, %rax
10000879e:	48 ff c0	incq	%rax
1000087a1:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
1000087a8:	48 83 c4 08	addq	$8, %rsp
1000087ac:	5b	popq	%rbx
1000087ad:	5d	popq	%rbp
1000087ae:	c3	retq
1000087af:	55	pushq	%rbp
1000087b0:	48 89 e5	movq	%rsp, %rbp
1000087b3:	41 56	pushq	%r14
1000087b5:	53	pushq	%rbx
1000087b6:	49 89 d6	movq	%rdx, %r14
1000087b9:	48 89 f3	movq	%rsi, %rbx
1000087bc:	48 89 d7	movq	%rdx, %rdi
1000087bf:	e8 1e 68 00 00	callq	0x10000efe2
1000087c4:	48 89 83 d8 01 00 00	movq	%rax, 472(%rbx)
1000087cb:	4c 89 f7	movq	%r14, %rdi
1000087ce:	e8 83 96 03 00	callq	0x100041e56 ## symbol stub for: _strlen
1000087d3:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
1000087da:	48 01 c8	addq	%rcx, %rax
1000087dd:	48 ff c0	incq	%rax
1000087e0:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
1000087e7:	5b	popq	%rbx
1000087e8:	41 5e	popq	%r14
1000087ea:	5d	popq	%rbp
1000087eb:	c3	retq
1000087ec:	55	pushq	%rbp
1000087ed:	48 89 e5	movq	%rsp, %rbp
1000087f0:	41 56	pushq	%r14
1000087f2:	53	pushq	%rbx
1000087f3:	49 89 d6	movq	%rdx, %r14
1000087f6:	48 89 f3	movq	%rsi, %rbx
1000087f9:	48 89 d7	movq	%rdx, %rdi
1000087fc:	e8 e1 67 00 00	callq	0x10000efe2
100008801:	48 89 83 d0 01 00 00	movq	%rax, 464(%rbx)
100008808:	4c 89 f7	movq	%r14, %rdi
10000880b:	e8 46 96 03 00	callq	0x100041e56 ## symbol stub for: _strlen
100008810:	48 8b 8b 50 02 00 00	movq	592(%rbx), %rcx
100008817:	48 01 c8	addq	%rcx, %rax
10000881a:	48 ff c0	incq	%rax
10000881d:	48 89 83 50 02 00 00	movq	%rax, 592(%rbx)
100008824:	5b	popq	%rbx
100008825:	41 5e	popq	%r14
100008827:	5d	popq	%rbp
100008828:	c3	retq
100008829:	55	pushq	%rbp
10000882a:	48 89 e5	movq	%rsp, %rbp
10000882d:	53	pushq	%rbx
10000882e:	50	pushq	%rax
10000882f:	48 89 d7	movq	%rdx, %rdi
100008832:	48 89 f3	movq	%rsi, %rbx
100008835:	e8 a8 67 00 00	callq	0x10000efe2
10000883a:	48 89 83 20 01 00 00	movq	%rax, 288(%rbx)
100008841:	48 83 c4 08	addq	$8, %rsp
100008845:	5b	popq	%rbx
100008846:	5d	popq	%rbp
100008847:	c3	retq
100008848:	55	pushq	%rbp
100008849:	48 89 e5	movq	%rsp, %rbp
10000884c:	48 89 f7	movq	%rsi, %rdi
10000884f:	48 89 d6	movq	%rdx, %rsi
100008852:	5d	popq	%rbp
100008853:	e9 fc af 02 00	jmp	0x100033854
100008858:	55	pushq	%rbp
100008859:	48 89 e5	movq	%rsp, %rbp
10000885c:	41 56	pushq	%r14
10000885e:	53	pushq	%rbx
10000885f:	48 89 d3	movq	%rdx, %rbx
100008862:	49 89 f6	movq	%rsi, %r14
100008865:	48 89 d7	movq	%rdx, %rdi
100008868:	e8 e9 95 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000886d:	80 7c 18 ff 2f	cmpb	$47, -1(%rax,%rbx)
100008872:	75 0a	jne	0x10000887e
100008874:	48 89 df	movq	%rbx, %rdi
100008877:	e8 66 67 00 00	callq	0x10000efe2
10000887c:	eb 11	jmp	0x10000888f
10000887e:	48 8d 3d 37 df 03 00	leaq	253751(%rip), %rdi ## literal pool for: "%s/"
100008885:	48 89 de	movq	%rbx, %rsi
100008888:	31 c0	xorl	%eax, %eax
10000888a:	e8 a6 68 00 00	callq	0x10000f135
10000888f:	49 89 86 e0 01 00 00	movq	%rax, 480(%r14)
100008896:	48 89 c7	movq	%rax, %rdi
100008899:	e8 b8 95 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000889e:	49 8b 8e 50 02 00 00	movq	592(%r14), %rcx
1000088a5:	48 01 c8	addq	%rcx, %rax
1000088a8:	48 ff c0	incq	%rax
1000088ab:	49 89 86 50 02 00 00	movq	%rax, 592(%r14)
1000088b2:	5b	popq	%rbx
1000088b3:	41 5e	popq	%r14
1000088b5:	5d	popq	%rbp
1000088b6:	c3	retq
1000088b7:	55	pushq	%rbp
1000088b8:	48 89 e5	movq	%rsp, %rbp
1000088bb:	48 83 ec 30	subq	$48, %rsp
1000088bf:	48 89 d7	movq	%rdx, %rdi
1000088c2:	48 8b 15 4f f7 04 00	movq	325455(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
1000088c9:	48 8d 45 d0	leaq	-48(%rbp), %rax
1000088cd:	48 89 10	movq	%rdx, (%rax)
1000088d0:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
1000088d8:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
1000088df:	48 89 50 10	movq	%rdx, 16(%rax)
1000088e3:	48 8d 15 36 0d 05 00	leaq	331062(%rip), %rdx
1000088ea:	48 89 50 18	movq	%rdx, 24(%rax)
1000088ee:	48 89 70 20	movq	%rsi, 32(%rax)
1000088f2:	48 89 48 28	movq	%rcx, 40(%rax)
1000088f6:	48 89 c6	movq	%rax, %rsi
1000088f9:	e8 36 96 03 00	callq	0x100041f34 ## symbol stub for: _xpc_array_apply
1000088fe:	48 83 c4 30	addq	$48, %rsp
100008902:	5d	popq	%rbp
100008903:	c3	retq
100008904:	55	pushq	%rbp
100008905:	48 89 e5	movq	%rsp, %rbp
100008908:	41 57	pushq	%r15
10000890a:	41 56	pushq	%r14
10000890c:	53	pushq	%rbx
10000890d:	50	pushq	%rax
10000890e:	48 89 d3	movq	%rdx, %rbx
100008911:	49 89 fe	movq	%rdi, %r14
100008914:	48 89 d7	movq	%rdx, %rdi
100008917:	e8 aa 97 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000891c:	48 3b 05 05 f8 04 00	cmpq	325637(%rip), %rax ## literal pool symbol address: __xpc_type_string
100008923:	74 3b	je	0x100008960
100008925:	4d 8b 7e 28	movq	40(%r14), %r15
100008929:	48 89 df	movq	%rbx, %rdi
10000892c:	e8 95 97 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008931:	48 89 c7	movq	%rax, %rdi
100008934:	e8 f3 97 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100008939:	48 8d 15 e1 e4 03 00	leaq	255201(%rip), %rdx ## literal pool for: "Invalid item type %s in PublishesEvents, expected string"
100008940:	4c 89 ff	movq	%r15, %rdi
100008943:	be 03 00 00 00	movl	$3, %esi
100008948:	48 89 c1	movq	%rax, %rcx
10000894b:	31 c0	xorl	%eax, %eax
10000894d:	e8 f3 5c 00 00	callq	0x10000e645
100008952:	49 8b 46 20	movq	32(%r14), %rax
100008956:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
10000895e:	eb 2b	jmp	0x10000898b
100008960:	4d 8b 7e 20	movq	32(%r14), %r15
100008964:	48 89 df	movq	%rbx, %rdi
100008967:	e8 ba 97 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10000896c:	48 89 c3	movq	%rax, %rbx
10000896f:	bf 01 00 00 00	movl	$1, %edi
100008974:	e8 15 96 03 00	callq	0x100041f8e ## symbol stub for: _xpc_bool_create
100008979:	49 8b 4e 28	movq	40(%r14), %rcx
10000897d:	4c 89 ff	movq	%r15, %rdi
100008980:	48 89 de	movq	%rbx, %rsi
100008983:	48 89 c2	movq	%rax, %rdx
100008986:	e8 b1 fa ff ff	callq	0x10000843c
10000898b:	b0 01	movb	$1, %al
10000898d:	48 83 c4 08	addq	$8, %rsp
100008991:	5b	popq	%rbx
100008992:	41 5e	popq	%r14
100008994:	41 5f	popq	%r15
100008996:	5d	popq	%rbp
100008997:	c3	retq
100008998:	55	pushq	%rbp
100008999:	48 89 e5	movq	%rsp, %rbp
10000899c:	48 89 f7	movq	%rsi, %rdi
10000899f:	48 8d 15 72 bc 03 00	leaq	244850(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
1000089a6:	48 8d 0d 3b dd 03 00	leaq	253243(%rip), %rcx ## literal pool for: "LimitLoadToHosts"
1000089ad:	4c 8d 05 b3 cb 03 00	leaq	248755(%rip), %r8 ## literal pool for: "Please remove it."
1000089b4:	be 03 00 00 00	movl	$3, %esi
1000089b9:	31 c0	xorl	%eax, %eax
1000089bb:	5d	popq	%rbp
1000089bc:	e9 f9 d5 00 00	jmp	0x100015fba
1000089c1:	55	pushq	%rbp
1000089c2:	48 89 e5	movq	%rsp, %rbp
1000089c5:	48 89 f7	movq	%rsi, %rdi
1000089c8:	48 8d 15 49 bc 03 00	leaq	244809(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
1000089cf:	48 8d 0d 23 dd 03 00	leaq	253219(%rip), %rcx ## literal pool for: "LimitLoadFromHosts"
1000089d6:	4c 8d 05 8a cb 03 00	leaq	248714(%rip), %r8 ## literal pool for: "Please remove it."
1000089dd:	be 03 00 00 00	movl	$3, %esi
1000089e2:	31 c0	xorl	%eax, %eax
1000089e4:	5d	popq	%rbp
1000089e5:	e9 d0 d5 00 00	jmp	0x100015fba
1000089ea:	55	pushq	%rbp
1000089eb:	48 89 e5	movq	%rsp, %rbp
1000089ee:	41 57	pushq	%r15
1000089f0:	41 56	pushq	%r14
1000089f2:	41 55	pushq	%r13
1000089f4:	41 54	pushq	%r12
1000089f6:	53	pushq	%rbx
1000089f7:	48 83 ec 48	subq	$72, %rsp
1000089fb:	48 89 cb	movq	%rcx, %rbx
1000089fe:	49 89 d6	movq	%rdx, %r14
100008a01:	48 89 75 c0	movq	%rsi, -64(%rbp)
100008a05:	0f 28 05 74 a8 03 00	movaps	239732(%rip), %xmm0
100008a0c:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100008a10:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
100008a14:	0f 29 07	movaps	%xmm0, (%rdi)
100008a17:	c7 47 20 aa aa aa aa	movl	$2863311530, 32(%rdi)
100008a1e:	e8 7e 8f ff ff	callq	0x1000019a1
100008a23:	4c 89 f7	movq	%r14, %rdi
100008a26:	e8 21 95 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100008a2b:	48 85 c0	testq	%rax, %rax
100008a2e:	0f 84 58 01 00 00	je	0x100008b8c
100008a34:	4c 8b 3d d5 f6 04 00	movq	325333(%rip), %r15 ## literal pool symbol address: __xpc_type_int64
100008a3b:	45 31 ed	xorl	%r13d, %r13d
100008a3e:	48 89 5d d0	movq	%rbx, -48(%rbp)
100008a42:	4c 89 f7	movq	%r14, %rdi
100008a45:	4c 89 ee	movq	%r13, %rsi
100008a48:	e8 11 95 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100008a4d:	49 89 c4	movq	%rax, %r12
100008a50:	48 89 c7	movq	%rax, %rdi
100008a53:	e8 6e 96 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008a58:	4c 39 f8	cmpq	%r15, %rax
100008a5b:	74 3f	je	0x100008a9c
100008a5d:	4c 89 e7	movq	%r12, %rdi
100008a60:	e8 61 96 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008a65:	48 3b 05 94 f6 04 00	cmpq	325268(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100008a6c:	74 4b	je	0x100008ab9
100008a6e:	4c 89 e7	movq	%r12, %rdi
100008a71:	e8 50 96 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008a76:	48 89 c7	movq	%rax, %rdi
100008a79:	e8 ae 96 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100008a7e:	48 89 df	movq	%rbx, %rdi
100008a81:	be 03 00 00 00	movl	$3, %esi
100008a86:	48 8d 15 47 e7 03 00	leaq	255815(%rip), %rdx ## literal pool for: "Invalid CPU type value type specified: %s"
100008a8d:	48 89 c1	movq	%rax, %rcx
100008a90:	31 c0	xorl	%eax, %eax
100008a92:	e8 ae 5b 00 00	callq	0x10000e645
100008a97:	e9 b5 00 00 00	jmp	0x100008b51
100008a9c:	4c 89 e7	movq	%r12, %rdi
100008a9f:	e8 2e 96 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100008aa4:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100008aa8:	89 c6	movl	%eax, %esi
100008aaa:	ba ff ff ff ff	movl	$4294967295, %edx
100008aaf:	e8 13 8f ff ff	callq	0x1000019c7
100008ab4:	e9 98 00 00 00	jmp	0x100008b51
100008ab9:	4c 89 e7	movq	%r12, %rdi
100008abc:	48 8d 35 3b e7 03 00	leaq	255803(%rip), %rsi ## literal pool for: "CPUType"
100008ac3:	e8 a4 95 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100008ac8:	48 85 c0	testq	%rax, %rax
100008acb:	74 25	je	0x100008af2
100008acd:	48 89 c3	movq	%rax, %rbx
100008ad0:	48 89 c7	movq	%rax, %rdi
100008ad3:	e8 ee 95 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008ad8:	4c 39 f8	cmpq	%r15, %rax
100008adb:	74 2a	je	0x100008b07
100008add:	48 8b 5d d0	movq	-48(%rbp), %rbx
100008ae1:	48 89 df	movq	%rbx, %rdi
100008ae4:	be 03 00 00 00	movl	$3, %esi
100008ae9:	48 8d 15 26 e7 03 00	leaq	255782(%rip), %rdx ## literal pool for: "Wrong CPUType type - expecting int64"
100008af0:	eb 58	jmp	0x100008b4a
100008af2:	48 8b 5d d0	movq	-48(%rbp), %rbx
100008af6:	48 89 df	movq	%rbx, %rdi
100008af9:	be 03 00 00 00	movl	$3, %esi
100008afe:	48 8d 15 01 e7 03 00	leaq	255745(%rip), %rdx ## literal pool for: "Missing CPUType"
100008b05:	eb 43	jmp	0x100008b4a
100008b07:	48 89 df	movq	%rbx, %rdi
100008b0a:	e8 c3 95 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100008b0f:	48 89 45 c8	movq	%rax, -56(%rbp)
100008b13:	4c 89 e7	movq	%r12, %rdi
100008b16:	48 8d 35 1e e7 03 00	leaq	255774(%rip), %rsi ## literal pool for: "CPUSubtype"
100008b1d:	e8 4a 95 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100008b22:	48 85 c0	testq	%rax, %rax
100008b25:	74 40	je	0x100008b67
100008b27:	48 89 c3	movq	%rax, %rbx
100008b2a:	48 89 c7	movq	%rax, %rdi
100008b2d:	e8 94 95 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008b32:	4c 39 f8	cmpq	%r15, %rax
100008b35:	74 37	je	0x100008b6e
100008b37:	48 8b 5d d0	movq	-48(%rbp), %rbx
100008b3b:	48 89 df	movq	%rbx, %rdi
100008b3e:	be 03 00 00 00	movl	$3, %esi
100008b43:	48 8d 15 fc e6 03 00	leaq	255740(%rip), %rdx ## literal pool for: "Wrong CPUSubtype type - expecting int64"
100008b4a:	31 c0	xorl	%eax, %eax
100008b4c:	e8 f4 5a 00 00	callq	0x10000e645
100008b51:	49 ff c5	incq	%r13
100008b54:	4c 89 f7	movq	%r14, %rdi
100008b57:	e8 f0 93 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100008b5c:	49 39 c5	cmpq	%rax, %r13
100008b5f:	0f 82 dd fe ff ff	jb	0x100008a42
100008b65:	eb 25	jmp	0x100008b8c
100008b67:	ba ff ff ff ff	movl	$4294967295, %edx
100008b6c:	eb 0b	jmp	0x100008b79
100008b6e:	48 89 df	movq	%rbx, %rdi
100008b71:	e8 5c 95 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100008b76:	48 89 c2	movq	%rax, %rdx
100008b79:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100008b7d:	48 8b 75 c8	movq	-56(%rbp), %rsi
100008b81:	e8 41 8e ff ff	callq	0x1000019c7
100008b86:	48 8b 5d d0	movq	-48(%rbp), %rbx
100008b8a:	eb c5	jmp	0x100008b51
100008b8c:	48 8d 75 90	leaq	-112(%rbp), %rsi
100008b90:	48 8b 7d c0	movq	-64(%rbp), %rdi
100008b94:	e8 db a6 ff ff	callq	0x100003274
100008b99:	48 83 c4 48	addq	$72, %rsp
100008b9d:	5b	popq	%rbx
100008b9e:	41 5c	popq	%r12
100008ba0:	41 5d	popq	%r13
100008ba2:	41 5e	popq	%r14
100008ba4:	41 5f	popq	%r15
100008ba6:	5d	popq	%rbp
100008ba7:	c3	retq
100008ba8:	55	pushq	%rbp
100008ba9:	48 89 e5	movq	%rsp, %rbp
100008bac:	41 57	pushq	%r15
100008bae:	41 56	pushq	%r14
100008bb0:	53	pushq	%rbx
100008bb1:	50	pushq	%rax
100008bb2:	49 89 d7	movq	%rdx, %r15
100008bb5:	49 89 f6	movq	%rsi, %r14
100008bb8:	48 89 d7	movq	%rdx, %rdi
100008bbb:	e8 8c 93 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100008bc0:	48 85 c0	testq	%rax, %rax
100008bc3:	74 28	je	0x100008bed
100008bc5:	31 db	xorl	%ebx, %ebx
100008bc7:	4c 89 ff	movq	%r15, %rdi
100008bca:	48 89 de	movq	%rbx, %rsi
100008bcd:	e8 8c 93 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100008bd2:	4c 89 f7	movq	%r14, %rdi
100008bd5:	48 89 c6	movq	%rax, %rsi
100008bd8:	e8 1b 00 00 00	callq	0x100008bf8
100008bdd:	48 ff c3	incq	%rbx
100008be0:	4c 89 ff	movq	%r15, %rdi
100008be3:	e8 64 93 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100008be8:	48 39 c3	cmpq	%rax, %rbx
100008beb:	72 da	jb	0x100008bc7
100008bed:	48 83 c4 08	addq	$8, %rsp
100008bf1:	5b	popq	%rbx
100008bf2:	41 5e	popq	%r14
100008bf4:	41 5f	popq	%r15
100008bf6:	5d	popq	%rbp
100008bf7:	c3	retq
100008bf8:	55	pushq	%rbp
100008bf9:	48 89 e5	movq	%rsp, %rbp
100008bfc:	41 57	pushq	%r15
100008bfe:	41 56	pushq	%r14
100008c00:	53	pushq	%rbx
100008c01:	48 81 ec 08 04 00 00	subq	$1032, %rsp
100008c08:	49 89 f6	movq	%rsi, %r14
100008c0b:	48 89 fb	movq	%rdi, %rbx
100008c0e:	48 8b 05 13 f4 04 00	movq	324627(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008c15:	48 8b 00	movq	(%rax), %rax
100008c18:	48 89 45 e0	movq	%rax, -32(%rbp)
100008c1c:	4c 8d bd e0 fb ff ff	leaq	-1056(%rbp), %r15
100008c23:	ba 00 04 00 00	movl	$1024, %edx
100008c28:	4c 89 ff	movq	%r15, %rdi
100008c2b:	be aa 00 00 00	movl	$170, %esi
100008c30:	e8 a5 8f 03 00	callq	0x100041bda ## symbol stub for: _memset
100008c35:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
100008c3c:	4c 8b 05 75 94 05 00	movq	365685(%rip), %r8
100008c43:	49 8d 40 01	leaq	1(%r8), %rax
100008c47:	48 89 05 6a 94 05 00	movq	%rax, 365674(%rip)
100008c4e:	48 8d 15 19 e6 03 00	leaq	255513(%rip), %rdx ## literal pool for: "%s.%llu"
100008c55:	be 00 04 00 00	movl	$1024, %esi
100008c5a:	4c 89 ff	movq	%r15, %rdi
100008c5d:	31 c0	xorl	%eax, %eax
100008c5f:	e8 9e 91 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100008c64:	48 8d 35 0b e6 03 00	leaq	255499(%rip), %rsi ## literal pool for: "com.apple.launchd.calendarinterval"
100008c6b:	48 89 df	movq	%rbx, %rdi
100008c6e:	4c 89 fa	movq	%r15, %rdx
100008c71:	4c 89 f1	movq	%r14, %rcx
100008c74:	e8 7e 00 00 00	callq	0x100008cf7
100008c79:	48 8b 05 a8 f3 04 00	movq	324520(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008c80:	48 8b 00	movq	(%rax), %rax
100008c83:	48 3b 45 e0	cmpq	-32(%rbp), %rax
100008c87:	75 0e	jne	0x100008c97
100008c89:	48 81 c4 08 04 00 00	addq	$1032, %rsp
100008c90:	5b	popq	%rbx
100008c91:	41 5e	popq	%r14
100008c93:	41 5f	popq	%r15
100008c95:	5d	popq	%rbp
100008c96:	c3	retq
100008c97:	e8 d6 8a 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100008c9c:	55	pushq	%rbp
100008c9d:	48 89 e5	movq	%rsp, %rbp
100008ca0:	41 57	pushq	%r15
100008ca2:	41 56	pushq	%r14
100008ca4:	53	pushq	%rbx
100008ca5:	50	pushq	%rax
100008ca6:	49 89 d7	movq	%rdx, %r15
100008ca9:	49 89 f6	movq	%rsi, %r14
100008cac:	31 ff	xorl	%edi, %edi
100008cae:	31 f6	xorl	%esi, %esi
100008cb0:	31 d2	xorl	%edx, %edx
100008cb2:	e8 5b 93 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100008cb7:	48 89 c3	movq	%rax, %rbx
100008cba:	48 8d 35 bc e1 03 00	leaq	254396(%rip), %rsi ## literal pool for: "QueueDirectories"
100008cc1:	48 89 c7	movq	%rax, %rdi
100008cc4:	4c 89 fa	movq	%r15, %rdx
100008cc7:	e8 e2 93 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100008ccc:	48 8d 35 bb e1 03 00	leaq	254395(%rip), %rsi ## literal pool for: "com.apple.fsevents.matching"
100008cd3:	48 8d 15 d0 e1 03 00	leaq	254416(%rip), %rdx ## literal pool for: "com.apple.launchd.QueueDirectories"
100008cda:	4c 89 f7	movq	%r14, %rdi
100008cdd:	48 89 d9	movq	%rbx, %rcx
100008ce0:	e8 12 00 00 00	callq	0x100008cf7
100008ce5:	48 89 df	movq	%rbx, %rdi
100008ce8:	48 83 c4 08	addq	$8, %rsp
100008cec:	5b	popq	%rbx
100008ced:	41 5e	popq	%r14
100008cef:	41 5f	popq	%r15
100008cf1:	5d	popq	%rbp
100008cf2:	e9 05 94 03 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100008cf7:	55	pushq	%rbp
100008cf8:	48 89 e5	movq	%rsp, %rbp
100008cfb:	41 57	pushq	%r15
100008cfd:	41 56	pushq	%r14
100008cff:	41 55	pushq	%r13
100008d01:	41 54	pushq	%r12
100008d03:	53	pushq	%rbx
100008d04:	50	pushq	%rax
100008d05:	49 89 ce	movq	%rcx, %r14
100008d08:	49 89 d7	movq	%rdx, %r15
100008d0b:	49 89 f4	movq	%rsi, %r12
100008d0e:	49 89 fd	movq	%rdi, %r13
100008d11:	48 8b bf e8 01 00 00	movq	488(%rdi), %rdi
100008d18:	48 85 ff	testq	%rdi, %rdi
100008d1b:	75 15	jne	0x100008d32
100008d1d:	31 ff	xorl	%edi, %edi
100008d1f:	31 f6	xorl	%esi, %esi
100008d21:	31 d2	xorl	%edx, %edx
100008d23:	e8 ea 92 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100008d28:	48 89 c7	movq	%rax, %rdi
100008d2b:	49 89 85 e8 01 00 00	movq	%rax, 488(%r13)
100008d32:	4c 89 e6	movq	%r12, %rsi
100008d35:	e8 32 93 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100008d3a:	48 89 c3	movq	%rax, %rbx
100008d3d:	48 85 c0	testq	%rax, %rax
100008d40:	75 28	jne	0x100008d6a
100008d42:	31 ff	xorl	%edi, %edi
100008d44:	31 f6	xorl	%esi, %esi
100008d46:	31 d2	xorl	%edx, %edx
100008d48:	e8 c5 92 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100008d4d:	48 89 c3	movq	%rax, %rbx
100008d50:	49 8b bd e8 01 00 00	movq	488(%r13), %rdi
100008d57:	4c 89 e6	movq	%r12, %rsi
100008d5a:	48 89 c2	movq	%rax, %rdx
100008d5d:	e8 4c 93 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100008d62:	48 89 df	movq	%rbx, %rdi
100008d65:	e8 92 93 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100008d6a:	48 89 df	movq	%rbx, %rdi
100008d6d:	4c 89 fe	movq	%r15, %rsi
100008d70:	4c 89 f2	movq	%r14, %rdx
100008d73:	48 83 c4 08	addq	$8, %rsp
100008d77:	5b	popq	%rbx
100008d78:	41 5c	popq	%r12
100008d7a:	41 5d	popq	%r13
100008d7c:	41 5e	popq	%r14
100008d7e:	41 5f	popq	%r15
100008d80:	5d	popq	%rbp
100008d81:	e9 28 93 03 00	jmp	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100008d86:	55	pushq	%rbp
100008d87:	48 89 e5	movq	%rsp, %rbp
100008d8a:	5d	popq	%rbp
100008d8b:	c3	retq
100008d8c:	55	pushq	%rbp
100008d8d:	48 89 e5	movq	%rsp, %rbp
100008d90:	41 57	pushq	%r15
100008d92:	41 56	pushq	%r14
100008d94:	53	pushq	%rbx
100008d95:	50	pushq	%rax
100008d96:	49 89 d7	movq	%rdx, %r15
100008d99:	49 89 f6	movq	%rsi, %r14
100008d9c:	31 ff	xorl	%edi, %edi
100008d9e:	31 f6	xorl	%esi, %esi
100008da0:	31 d2	xorl	%edx, %edx
100008da2:	e8 6b 92 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100008da7:	48 89 c3	movq	%rax, %rbx
100008daa:	48 8d 35 39 e1 03 00	leaq	254265(%rip), %rsi ## literal pool for: "WatchPaths"
100008db1:	48 89 c7	movq	%rax, %rdi
100008db4:	4c 89 fa	movq	%r15, %rdx
100008db7:	e8 f2 92 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100008dbc:	48 8d 35 cb e0 03 00	leaq	254155(%rip), %rsi ## literal pool for: "com.apple.fsevents.matching"
100008dc3:	48 8d 15 2b e1 03 00	leaq	254251(%rip), %rdx ## literal pool for: "com.apple.launchd.WatchPaths"
100008dca:	4c 89 f7	movq	%r14, %rdi
100008dcd:	48 89 d9	movq	%rbx, %rcx
100008dd0:	e8 22 ff ff ff	callq	0x100008cf7
100008dd5:	48 89 df	movq	%rbx, %rdi
100008dd8:	48 83 c4 08	addq	$8, %rsp
100008ddc:	5b	popq	%rbx
100008ddd:	41 5e	popq	%r14
100008ddf:	41 5f	popq	%r15
100008de1:	5d	popq	%rbp
100008de2:	e9 15 93 03 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100008de7:	55	pushq	%rbp
100008de8:	48 89 e5	movq	%rsp, %rbp
100008deb:	48 89 f7	movq	%rsi, %rdi
100008dee:	48 8d 15 23 b8 03 00	leaq	243747(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100008df5:	48 8d 0d 16 e1 03 00	leaq	254230(%rip), %rcx ## literal pool for: "Policies"
100008dfc:	4c 8d 05 64 c7 03 00	leaq	247652(%rip), %r8 ## literal pool for: "Please remove it."
100008e03:	be 03 00 00 00	movl	$3, %esi
100008e08:	31 c0	xorl	%eax, %eax
100008e0a:	5d	popq	%rbp
100008e0b:	e9 aa d1 00 00	jmp	0x100015fba
100008e10:	55	pushq	%rbp
100008e11:	48 89 e5	movq	%rsp, %rbp
100008e14:	48 83 ec 30	subq	$48, %rsp
100008e18:	48 89 d7	movq	%rdx, %rdi
100008e1b:	48 8b 15 f6 f1 04 00	movq	324086(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100008e22:	48 8d 45 d0	leaq	-48(%rbp), %rax
100008e26:	48 89 10	movq	%rdx, (%rax)
100008e29:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
100008e31:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
100008e38:	48 89 50 10	movq	%rdx, 16(%rax)
100008e3c:	48 8d 15 3d 0a 05 00	leaq	330301(%rip), %rdx
100008e43:	48 89 50 18	movq	%rdx, 24(%rax)
100008e47:	48 89 70 20	movq	%rsi, 32(%rax)
100008e4b:	48 89 48 28	movq	%rcx, 40(%rax)
100008e4f:	48 89 c6	movq	%rax, %rsi
100008e52:	e8 a9 91 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100008e57:	48 83 c4 30	addq	$48, %rsp
100008e5b:	5d	popq	%rbp
100008e5c:	c3	retq
100008e5d:	55	pushq	%rbp
100008e5e:	48 89 e5	movq	%rsp, %rbp
100008e61:	41 57	pushq	%r15
100008e63:	41 56	pushq	%r14
100008e65:	53	pushq	%rbx
100008e66:	50	pushq	%rax
100008e67:	48 89 d3	movq	%rdx, %rbx
100008e6a:	49 89 f6	movq	%rsi, %r14
100008e6d:	49 89 ff	movq	%rdi, %r15
100008e70:	48 89 d7	movq	%rdx, %rdi
100008e73:	e8 4e 92 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008e78:	48 3b 05 81 f2 04 00	cmpq	324225(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100008e7f:	74 39	je	0x100008eba
100008e81:	48 89 df	movq	%rbx, %rdi
100008e84:	e8 3d 92 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008e89:	48 3b 05 50 f2 04 00	cmpq	324176(%rip), %rax ## literal pool symbol address: __xpc_type_bool
100008e90:	74 28	je	0x100008eba
100008e92:	49 8b 7f 28	movq	40(%r15), %rdi
100008e96:	48 8d 15 7e e0 03 00	leaq	254078(%rip), %rdx ## literal pool for: "Invalid item %s in PublishesEvents, expected dictionary or bool"
100008e9d:	be 03 00 00 00	movl	$3, %esi
100008ea2:	4c 89 f1	movq	%r14, %rcx
100008ea5:	31 c0	xorl	%eax, %eax
100008ea7:	e8 99 57 00 00	callq	0x10000e645
100008eac:	49 8b 47 20	movq	32(%r15), %rax
100008eb0:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
100008eb8:	eb 13	jmp	0x100008ecd
100008eba:	49 8b 7f 20	movq	32(%r15), %rdi
100008ebe:	49 8b 4f 28	movq	40(%r15), %rcx
100008ec2:	4c 89 f6	movq	%r14, %rsi
100008ec5:	48 89 da	movq	%rbx, %rdx
100008ec8:	e8 6f f5 ff ff	callq	0x10000843c
100008ecd:	b0 01	movb	$1, %al
100008ecf:	48 83 c4 08	addq	$8, %rsp
100008ed3:	5b	popq	%rbx
100008ed4:	41 5e	popq	%r14
100008ed6:	41 5f	popq	%r15
100008ed8:	5d	popq	%rbp
100008ed9:	c3	retq
100008eda:	55	pushq	%rbp
100008edb:	48 89 e5	movq	%rsp, %rbp
100008ede:	48 83 ec 30	subq	$48, %rsp
100008ee2:	48 89 d7	movq	%rdx, %rdi
100008ee5:	48 8b 15 2c f1 04 00	movq	323884(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100008eec:	48 8d 45 d0	leaq	-48(%rbp), %rax
100008ef0:	48 89 10	movq	%rdx, (%rax)
100008ef3:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
100008efb:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
100008f02:	48 89 50 10	movq	%rdx, 16(%rax)
100008f06:	48 8d 15 d3 09 05 00	leaq	330195(%rip), %rdx
100008f0d:	48 89 50 18	movq	%rdx, 24(%rax)
100008f11:	48 89 70 20	movq	%rsi, 32(%rax)
100008f15:	48 89 48 28	movq	%rcx, 40(%rax)
100008f19:	48 89 c6	movq	%rax, %rsi
100008f1c:	e8 df 90 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100008f21:	48 83 c4 30	addq	$48, %rsp
100008f25:	5d	popq	%rbp
100008f26:	c3	retq
100008f27:	55	pushq	%rbp
100008f28:	48 89 e5	movq	%rsp, %rbp
100008f2b:	41 57	pushq	%r15
100008f2d:	41 56	pushq	%r14
100008f2f:	41 54	pushq	%r12
100008f31:	53	pushq	%rbx
100008f32:	49 89 d4	movq	%rdx, %r12
100008f35:	48 89 f3	movq	%rsi, %rbx
100008f38:	4c 8b 77 20	movq	32(%rdi), %r14
100008f3c:	4c 8b 7f 28	movq	40(%rdi), %r15
100008f40:	0f be 3e	movsbl	(%rsi), %edi
100008f43:	e8 36 88 03 00	callq	0x10004177e ## symbol stub for: ___tolower
100008f48:	8d 48 98	leal	-104(%rax), %ecx
100008f4b:	83 f9 0b	cmpl	$11, %ecx
100008f4e:	77 2c	ja	0x100008f7c
100008f50:	48 8d 05 95 02 00 00	leaq	661(%rip), %rax
100008f57:	48 63 0c 88	movslq	(%rax,%rcx,4), %rcx
100008f5b:	48 01 c1	addq	%rax, %rcx
100008f5e:	ff e1	jmpq	*%rcx
100008f60:	48 8d 35 7d e3 03 00	leaq	254845(%rip), %rsi ## literal pool for: "HomeRelativePathState"
100008f67:	48 89 df	movq	%rbx, %rdi
100008f6a:	e8 bd 8e 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100008f6f:	85 c0	testl	%eax, %eax
100008f71:	0f 85 bb 01 00 00	jne	0x100009132
100008f77:	e9 d7 01 00 00	jmp	0x100009153
100008f7c:	83 f8 63	cmpl	$99, %eax
100008f7f:	0f 84 9a 01 00 00	je	0x10000911f
100008f85:	83 f8 61	cmpl	$97, %eax
100008f88:	0f 85 a4 01 00 00	jne	0x100009132
100008f8e:	48 8d 35 04 e3 03 00	leaq	254724(%rip), %rsi ## literal pool for: "AfterInitialDemand"
100008f95:	48 89 df	movq	%rbx, %rdi
100008f98:	e8 83 8e 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100008f9d:	85 c0	testl	%eax, %eax
100008f9f:	0f 85 8d 01 00 00	jne	0x100009132
100008fa5:	4c 89 e7	movq	%r12, %rdi
100008fa8:	e8 19 91 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100008fad:	48 3b 05 2c f1 04 00	cmpq	323884(%rip), %rax ## literal pool symbol address: __xpc_type_bool
100008fb4:	0f 85 d7 01 00 00	jne	0x100009191
100008fba:	31 c0	xorl	%eax, %eax
100008fbc:	4d 85 e4	testq	%r12, %r12
100008fbf:	0f 95 c0	setne	%al
100008fc2:	48 c1 e0 18	shlq	$24, %rax
100008fc6:	48 c7 c1 ff ff ff fe	movq	$-16777217, %rcx
100008fcd:	49 23 8e 0d 05 00 00	andq	1293(%r14), %rcx
100008fd4:	48 09 c1	orq	%rax, %rcx
100008fd7:	49 89 8e 0d 05 00 00	movq	%rcx, 1293(%r14)
100008fde:	e9 70 01 00 00	jmp	0x100009153
100008fe3:	48 8d 35 10 e3 03 00	leaq	254736(%rip), %rsi ## literal pool for: "NetworkState"
100008fea:	48 89 df	movq	%rbx, %rdi
100008fed:	e8 2e 8e 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100008ff2:	85 c0	testl	%eax, %eax
100008ff4:	0f 85 38 01 00 00	jne	0x100009132
100008ffa:	e9 5f 01 00 00	jmp	0x10000915e
100008fff:	48 8d 35 01 e3 03 00	leaq	254721(%rip), %rsi ## literal pool for: "OtherJobActive"
100009006:	48 89 df	movq	%rbx, %rdi
100009009:	e8 12 8e 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000900e:	85 c0	testl	%eax, %eax
100009010:	0f 84 48 01 00 00	je	0x10000915e
100009016:	48 8d 35 f9 e2 03 00	leaq	254713(%rip), %rsi ## literal pool for: "OtherJobEnabled"
10000901d:	48 89 df	movq	%rbx, %rdi
100009020:	e8 fb 8d 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100009025:	85 c0	testl	%eax, %eax
100009027:	0f 85 05 01 00 00	jne	0x100009132
10000902d:	4c 89 e7	movq	%r12, %rdi
100009030:	e8 91 90 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009035:	48 3b 05 c4 f0 04 00	cmpq	323780(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000903c:	0f 85 4f 01 00 00	jne	0x100009191
100009042:	48 8d 15 c5 09 00 00	leaq	2501(%rip), %rdx
100009049:	4c 89 e7	movq	%r12, %rdi
10000904c:	4c 89 f6	movq	%r14, %rsi
10000904f:	e8 b2 8f 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100009054:	e9 fa 00 00 00	jmp	0x100009153
100009059:	48 8d 35 c6 e2 03 00	leaq	254662(%rip), %rsi ## literal pool for: "PathState"
100009060:	48 89 df	movq	%rbx, %rdi
100009063:	e8 c4 8d 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
100009068:	85 c0	testl	%eax, %eax
10000906a:	0f 85 c2 00 00 00	jne	0x100009132
100009070:	4c 89 e7	movq	%r12, %rdi
100009073:	e8 4e 90 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009078:	48 3b 05 81 f0 04 00	cmpq	323713(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000907f:	0f 85 0c 01 00 00	jne	0x100009191
100009085:	31 ff	xorl	%edi, %edi
100009087:	31 f6	xorl	%esi, %esi
100009089:	31 d2	xorl	%edx, %edx
10000908b:	e8 82 8f 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100009090:	48 89 c3	movq	%rax, %rbx
100009093:	48 8d 35 8c e2 03 00	leaq	254604(%rip), %rsi ## literal pool for: "PathState"
10000909a:	48 89 c7	movq	%rax, %rdi
10000909d:	4c 89 e2	movq	%r12, %rdx
1000090a0:	e8 09 90 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000090a5:	48 8d 35 e2 dd 03 00	leaq	253410(%rip), %rsi ## literal pool for: "com.apple.fsevents.matching"
1000090ac:	48 8d 15 7d e2 03 00	leaq	254589(%rip), %rdx ## literal pool for: "com.apple.launchd.PathState"
1000090b3:	4c 89 f7	movq	%r14, %rdi
1000090b6:	48 89 d9	movq	%rbx, %rcx
1000090b9:	e8 39 fc ff ff	callq	0x100008cf7
1000090be:	48 89 df	movq	%rbx, %rdi
1000090c1:	e8 36 90 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000090c6:	e9 88 00 00 00	jmp	0x100009153
1000090cb:	48 8d 35 7a e2 03 00	leaq	254586(%rip), %rsi ## literal pool for: "SuccessfulExit"
1000090d2:	48 89 df	movq	%rbx, %rdi
1000090d5:	e8 52 8d 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000090da:	85 c0	testl	%eax, %eax
1000090dc:	75 54	jne	0x100009132
1000090de:	4c 89 e7	movq	%r12, %rdi
1000090e1:	e8 e0 8f 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000090e6:	48 3b 05 f3 ef 04 00	cmpq	323571(%rip), %rax ## literal pool symbol address: __xpc_type_bool
1000090ed:	0f 85 9e 00 00 00	jne	0x100009191
1000090f3:	bf 30 00 00 00	movl	$48, %edi
1000090f8:	e8 e8 43 00 00	callq	0x10000d4e5
1000090fd:	48 8d 0d 58 cc 00 00	leaq	52312(%rip), %rcx
100009104:	4c 3b 25 c5 ef 04 00	cmpq	323525(%rip), %r12 ## literal pool symbol address: __xpc_bool_true
10000910b:	48 89 48 10	movq	%rcx, 16(%rax)
10000910f:	0f 94 40 28	sete	40(%rax)
100009113:	48 8d 0d 41 e2 03 00	leaq	254529(%rip), %rcx ## literal pool for: "successful exit"
10000911a:	e9 a2 00 00 00	jmp	0x1000091c1
10000911f:	48 8d 35 aa e1 03 00	leaq	254378(%rip), %rsi ## literal pool for: "Crashed"
100009126:	48 89 df	movq	%rbx, %rdi
100009129:	e8 f2 8c 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000912e:	85 c0	testl	%eax, %eax
100009130:	74 4e	je	0x100009180
100009132:	48 8d 15 32 e2 03 00	leaq	254514(%rip), %rdx ## literal pool for: "Unknown key for KeepAlive: %s"
100009139:	4c 89 ff	movq	%r15, %rdi
10000913c:	be 03 00 00 00	movl	$3, %esi
100009141:	48 89 d9	movq	%rbx, %rcx
100009144:	31 c0	xorl	%eax, %eax
100009146:	e8 fa 54 00 00	callq	0x10000e645
10000914b:	41 80 8e 0d 05 00 00 01	orb	$1, 1293(%r14)
100009153:	b0 01	movb	$1, %al
100009155:	5b	popq	%rbx
100009156:	41 5c	popq	%r12
100009158:	41 5e	popq	%r14
10000915a:	41 5f	popq	%r15
10000915c:	5d	popq	%rbp
10000915d:	c3	retq
10000915e:	48 8d 15 b3 b4 03 00	leaq	242867(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
100009165:	4c 8d 05 fb c3 03 00	leaq	246779(%rip), %r8 ## literal pool for: "Please remove it."
10000916c:	4c 89 f7	movq	%r14, %rdi
10000916f:	be 03 00 00 00	movl	$3, %esi
100009174:	48 89 d9	movq	%rbx, %rcx
100009177:	31 c0	xorl	%eax, %eax
100009179:	e8 3c ce 00 00	callq	0x100015fba
10000917e:	eb d3	jmp	0x100009153
100009180:	4c 89 e7	movq	%r12, %rdi
100009183:	e8 3e 8f 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009188:	48 3b 05 51 ef 04 00	cmpq	323409(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10000918f:	74 09	je	0x10000919a
100009191:	48 8d 15 14 e1 03 00	leaq	254228(%rip), %rdx ## literal pool for: "Improper type for KeepAlive key: %s"
100009198:	eb 9f	jmp	0x100009139
10000919a:	bf 30 00 00 00	movl	$48, %edi
10000919f:	e8 41 43 00 00	callq	0x10000d4e5
1000091a4:	48 8d 0d 70 cb 00 00	leaq	52080(%rip), %rcx
1000091ab:	4c 3b 25 1e ef 04 00	cmpq	323358(%rip), %r12 ## literal pool symbol address: __xpc_bool_true
1000091b2:	48 89 48 10	movq	%rcx, 16(%rax)
1000091b6:	0f 94 40 28	sete	40(%rax)
1000091ba:	48 8d 0d 17 e1 03 00	leaq	254231(%rip), %rcx ## literal pool for: "after crash"
1000091c1:	48 89 48 18	movq	%rcx, 24(%rax)
1000091c5:	49 8b 8e 88 02 00 00	movq	648(%r14), %rcx
1000091cc:	49 81 c6 88 02 00 00	addq	$648, %r14
1000091d3:	48 89 08	movq	%rcx, (%rax)
1000091d6:	48 85 c9	testq	%rcx, %rcx
1000091d9:	74 04	je	0x1000091df
1000091db:	48 89 41 08	movq	%rax, 8(%rcx)
1000091df:	49 89 06	movq	%rax, (%r14)
1000091e2:	4c 89 70 08	movq	%r14, 8(%rax)
1000091e6:	e9 68 ff ff ff	jmp	0x100009153
1000091eb:	90	nop
1000091ec:	74 fd	je	0x1000091eb
	.byte 0xff #bad opcode
1000091ef:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
1000091f3:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
1000091f7:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
1000091fb:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
1000091ff:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
100009203:	ff f7	pushq	%rdi
100009205:	fd	std
	.byte 0xff #bad opcode
100009207:	ff 13	callq	*(%rbx)
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10000920b:	ff 6d fe	ljmpl	*-2(%rbp)
	.byte 0xff #bad opcode
10000920f:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
100009213:	ff 46 ff	incl	-1(%rsi)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdf #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10000921b:	ff 55 48	callq	*72(%rbp)
10000921e:	89 e5	movl	%esp, %ebp
100009220:	48 89 d7	movq	%rdx, %rdi
100009223:	48 81 8e 0d 05 00 00 00 80 02 00	orq	$163840, 1293(%rsi)
10000922e:	48 8d 15 06 00 00 00	leaq	6(%rip), %rdx
100009235:	5d	popq	%rbp
100009236:	e9 cb 8d 03 00	jmp	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10000923b:	55	pushq	%rbp
10000923c:	48 89 e5	movq	%rsp, %rbp
10000923f:	41 57	pushq	%r15
100009241:	41 56	pushq	%r14
100009243:	53	pushq	%rbx
100009244:	50	pushq	%rax
100009245:	49 89 d6	movq	%rdx, %r14
100009248:	49 89 f7	movq	%rsi, %r15
10000924b:	48 89 fb	movq	%rdi, %rbx
10000924e:	48 8d 35 7d e1 03 00	leaq	254333(%rip), %rsi ## literal pool for: "Wait"
100009255:	e8 c6 8b 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000925a:	85 c0	testl	%eax, %eax
10000925c:	74 24	je	0x100009282
10000925e:	48 8d 35 72 e1 03 00	leaq	254322(%rip), %rsi ## literal pool for: "Instances"
100009265:	48 89 df	movq	%rbx, %rdi
100009268:	e8 b3 8b 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000926d:	85 c0	testl	%eax, %eax
10000926f:	75 38	jne	0x1000092a9
100009271:	4c 89 ff	movq	%r15, %rdi
100009274:	e8 59 8e 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100009279:	41 89 86 fc 00 00 00	movl	%eax, 252(%r14)
100009280:	eb 27	jmp	0x1000092a9
100009282:	4c 89 ff	movq	%r15, %rdi
100009285:	e8 0a 8d 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10000928a:	0f b6 c0	movzbl	%al, %eax
10000928d:	48 c1 e0 10	shlq	$16, %rax
100009291:	48 c7 c1 ff ff fe ff	movq	$-65537, %rcx
100009298:	49 23 8e 0d 05 00 00	andq	1293(%r14), %rcx
10000929f:	48 09 c1	orq	%rax, %rcx
1000092a2:	49 89 8e 0d 05 00 00	movq	%rcx, 1293(%r14)
1000092a9:	48 83 c4 08	addq	$8, %rsp
1000092ad:	5b	popq	%rbx
1000092ae:	41 5e	popq	%r14
1000092b0:	41 5f	popq	%r15
1000092b2:	5d	popq	%rbp
1000092b3:	c3	retq
1000092b4:	55	pushq	%rbp
1000092b5:	48 89 e5	movq	%rsp, %rbp
1000092b8:	5d	popq	%rbp
1000092b9:	c3	retq
1000092ba:	55	pushq	%rbp
1000092bb:	48 89 e5	movq	%rsp, %rbp
1000092be:	48 89 d7	movq	%rdx, %rdi
1000092c1:	48 8d 15 79 d6 ff ff	leaq	-10631(%rip), %rdx
1000092c8:	5d	popq	%rbp
1000092c9:	e9 38 8d 03 00	jmp	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
1000092ce:	55	pushq	%rbp
1000092cf:	48 89 e5	movq	%rsp, %rbp
1000092d2:	48 89 f7	movq	%rsi, %rdi
1000092d5:	48 8d 15 ea b2 03 00	leaq	242410(%rip), %rdx ## literal pool for: "The %s key is not yet implemented. %s"
1000092dc:	48 8d 0d 9c dc 03 00	leaq	253084(%rip), %rcx ## literal pool for: "UserEnvironmentVariables"
1000092e3:	4c 8d 05 02 b3 03 00	leaq	242434(%rip), %r8 ## literal pool for: "If you rely on this key, please file a bug."
1000092ea:	be 03 00 00 00	movl	$3, %esi
1000092ef:	31 c0	xorl	%eax, %eax
1000092f1:	5d	popq	%rbp
1000092f2:	e9 c3 cc 00 00	jmp	0x100015fba
1000092f7:	55	pushq	%rbp
1000092f8:	48 89 e5	movq	%rsp, %rbp
1000092fb:	48 83 ec 30	subq	$48, %rsp
1000092ff:	48 89 d7	movq	%rdx, %rdi
100009302:	48 8b 15 0f ed 04 00	movq	322831(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100009309:	48 8d 45 d0	leaq	-48(%rbp), %rax
10000930d:	48 89 10	movq	%rdx, (%rax)
100009310:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
100009318:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
10000931f:	48 89 50 10	movq	%rdx, 16(%rax)
100009323:	48 8d 15 16 07 05 00	leaq	329494(%rip), %rdx
10000932a:	48 89 50 18	movq	%rdx, 24(%rax)
10000932e:	48 89 70 20	movq	%rsi, 32(%rax)
100009332:	48 89 48 28	movq	%rcx, 40(%rax)
100009336:	48 89 c6	movq	%rax, %rsi
100009339:	e8 c2 8c 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
10000933e:	48 83 c4 30	addq	$48, %rsp
100009342:	5d	popq	%rbp
100009343:	c3	retq
100009344:	55	pushq	%rbp
100009345:	48 89 e5	movq	%rsp, %rbp
100009348:	41 57	pushq	%r15
10000934a:	41 56	pushq	%r14
10000934c:	41 55	pushq	%r13
10000934e:	41 54	pushq	%r12
100009350:	53	pushq	%rbx
100009351:	50	pushq	%rax
100009352:	49 89 d7	movq	%rdx, %r15
100009355:	49 89 f6	movq	%rsi, %r14
100009358:	48 8b 5f 20	movq	32(%rdi), %rbx
10000935c:	4c 8b 67 28	movq	40(%rdi), %r12
100009360:	48 89 d7	movq	%rdx, %rdi
100009363:	e8 5e 8d 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009368:	48 3b 05 91 ed 04 00	cmpq	322961(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000936f:	74 2c	je	0x10000939d
100009371:	4c 89 ff	movq	%r15, %rdi
100009374:	e8 4d 8d 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009379:	48 3b 05 58 ed 04 00	cmpq	322904(%rip), %rax ## literal pool symbol address: __xpc_type_array
100009380:	74 49	je	0x1000093cb
100009382:	48 8d 15 87 e0 03 00	leaq	254087(%rip), %rdx ## literal pool for: "Socket entry is not a dictionary or array. Skipping: %s"
100009389:	48 89 df	movq	%rbx, %rdi
10000938c:	be 03 00 00 00	movl	$3, %esi
100009391:	4c 89 f1	movq	%r14, %rcx
100009394:	31 c0	xorl	%eax, %eax
100009396:	e8 1f cc 00 00	callq	0x100015fba
10000939b:	eb 22	jmp	0x1000093bf
10000939d:	4c 8b 83 30 02 00 00	movq	560(%rbx), %r8
1000093a4:	48 89 df	movq	%rbx, %rdi
1000093a7:	4c 89 f6	movq	%r14, %rsi
1000093aa:	4c 89 fa	movq	%r15, %rdx
1000093ad:	4c 89 e1	movq	%r12, %rcx
1000093b0:	ff 93 20 02 00 00	callq	*544(%rbx)
1000093b6:	48 85 c0	testq	%rax, %rax
1000093b9:	0f 85 90 00 00 00	jne	0x10000944f
1000093bf:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
1000093c6:	e9 84 00 00 00	jmp	0x10000944f
1000093cb:	4c 89 65 d0	movq	%r12, -48(%rbp)
1000093cf:	4c 89 ff	movq	%r15, %rdi
1000093d2:	e8 75 8b 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000093d7:	48 85 c0	testq	%rax, %rax
1000093da:	74 73	je	0x10000944f
1000093dc:	45 31 ed	xorl	%r13d, %r13d
1000093df:	4c 89 ff	movq	%r15, %rdi
1000093e2:	4c 89 ee	movq	%r13, %rsi
1000093e5:	e8 74 8b 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
1000093ea:	49 89 c4	movq	%rax, %r12
1000093ed:	48 89 c7	movq	%rax, %rdi
1000093f0:	e8 d1 8c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000093f5:	48 3b 05 04 ed 04 00	cmpq	322820(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000093fc:	74 22	je	0x100009420
1000093fe:	48 89 df	movq	%rbx, %rdi
100009401:	be 03 00 00 00	movl	$3, %esi
100009406:	48 8d 15 d4 df 03 00	leaq	253908(%rip), %rdx ## literal pool for: "Socket entry is not a dictionary. Skipping: %s"
10000940d:	4c 89 f1	movq	%r14, %rcx
100009410:	31 c0	xorl	%eax, %eax
100009412:	e8 a3 cb 00 00	callq	0x100015fba
100009417:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
10000941e:	eb 1f	jmp	0x10000943f
100009420:	4c 8b 83 30 02 00 00	movq	560(%rbx), %r8
100009427:	48 89 df	movq	%rbx, %rdi
10000942a:	4c 89 f6	movq	%r14, %rsi
10000942d:	4c 89 e2	movq	%r12, %rdx
100009430:	48 8b 4d d0	movq	-48(%rbp), %rcx
100009434:	ff 93 20 02 00 00	callq	*544(%rbx)
10000943a:	48 85 c0	testq	%rax, %rax
10000943d:	74 d8	je	0x100009417
10000943f:	49 ff c5	incq	%r13
100009442:	4c 89 ff	movq	%r15, %rdi
100009445:	e8 02 8b 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10000944a:	49 39 c5	cmpq	%rax, %r13
10000944d:	72 90	jb	0x1000093df
10000944f:	b0 01	movb	$1, %al
100009451:	48 83 c4 08	addq	$8, %rsp
100009455:	5b	popq	%rbx
100009456:	41 5c	popq	%r12
100009458:	41 5d	popq	%r13
10000945a:	41 5e	popq	%r14
10000945c:	41 5f	popq	%r15
10000945e:	5d	popq	%rbp
10000945f:	c3	retq
100009460:	55	pushq	%rbp
100009461:	48 89 e5	movq	%rsp, %rbp
100009464:	48 89 f7	movq	%rsi, %rdi
100009467:	48 89 d6	movq	%rdx, %rsi
10000946a:	5d	popq	%rbp
10000946b:	e9 88 f7 ff ff	jmp	0x100008bf8
100009470:	55	pushq	%rbp
100009471:	48 89 e5	movq	%rsp, %rbp
100009474:	48 89 d7	movq	%rdx, %rdi
100009477:	48 8d 15 06 00 00 00	leaq	6(%rip), %rdx
10000947e:	5d	popq	%rbp
10000947f:	e9 82 8b 03 00	jmp	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100009484:	55	pushq	%rbp
100009485:	48 89 e5	movq	%rsp, %rbp
100009488:	41 57	pushq	%r15
10000948a:	41 56	pushq	%r14
10000948c:	41 55	pushq	%r13
10000948e:	41 54	pushq	%r12
100009490:	53	pushq	%rbx
100009491:	50	pushq	%rax
100009492:	49 89 d7	movq	%rdx, %r15
100009495:	49 89 f6	movq	%rsi, %r14
100009498:	49 89 fc	movq	%rdi, %r12
10000949b:	48 89 f7	movq	%rsi, %rdi
10000949e:	e8 23 8c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000094a3:	48 3b 05 66 ec 04 00	cmpq	322662(%rip), %rax ## literal pool symbol address: __xpc_type_int64
1000094aa:	0f 85 a1 00 00 00	jne	0x100009551
1000094b0:	4c 89 f7	movq	%r14, %rdi
1000094b3:	e8 1a 8c 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
1000094b8:	49 89 c6	movq	%rax, %r14
1000094bb:	bb 08 00 00 00	movl	$8, %ebx
1000094c0:	4c 8d 2d c9 08 05 00	leaq	329929(%rip), %r13
1000094c7:	4a 8b 7c 2b f8	movq	-8(%rbx,%r13), %rdi
1000094cc:	4c 89 e6	movq	%r12, %rsi
1000094cf:	e8 4c 89 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000094d4:	85 c0	testl	%eax, %eax
1000094d6:	74 0f	je	0x1000094e7
1000094d8:	48 83 c3 10	addq	$16, %rbx
1000094dc:	48 81 fb 98 00 00 00	cmpq	$152, %rbx
1000094e3:	75 e2	jne	0x1000094c7
1000094e5:	eb 6a	jmp	0x100009551
1000094e7:	42 0f b7 1c 2b	movzwl	(%rbx,%r13), %ebx
1000094ec:	4d 8b a7 0d 05 00 00	movq	1293(%r15), %r12
1000094f3:	49 8b 87 90 02 00 00	movq	656(%r15), %rax
1000094fa:	48 85 c0	testq	%rax, %rax
1000094fd:	74 0b	je	0x10000950a
1000094ff:	66 39 58 20	cmpw	%bx, 32(%rax)
100009503:	74 30	je	0x100009535
100009505:	48 8b 00	movq	(%rax), %rax
100009508:	eb f0	jmp	0x1000094fa
10000950a:	49 81 c7 90 02 00 00	addq	$656, %r15
100009511:	bf 28 00 00 00	movl	$40, %edi
100009516:	e8 ca 3f 00 00	callq	0x10000d4e5
10000951b:	66 89 58 20	movw	%bx, 32(%rax)
10000951f:	49 8b 0f	movq	(%r15), %rcx
100009522:	48 89 08	movq	%rcx, (%rax)
100009525:	48 85 c9	testq	%rcx, %rcx
100009528:	74 04	je	0x10000952e
10000952a:	48 89 41 08	movq	%rax, 8(%rcx)
10000952e:	49 89 07	movq	%rax, (%r15)
100009531:	4c 89 78 08	movq	%r15, 8(%rax)
100009535:	49 0f ba e4 27	btq	$39, %r12
10000953a:	72 0a	jb	0x100009546
10000953c:	c6 40 23 01	movb	$1, 35(%rax)
100009540:	48 83 c0 10	addq	$16, %rax
100009544:	eb 08	jmp	0x10000954e
100009546:	c6 40 22 01	movb	$1, 34(%rax)
10000954a:	48 83 c0 18	addq	$24, %rax
10000954e:	4c 89 30	movq	%r14, (%rax)
100009551:	48 83 c4 08	addq	$8, %rsp
100009555:	5b	popq	%rbx
100009556:	41 5c	popq	%r12
100009558:	41 5d	popq	%r13
10000955a:	41 5e	popq	%r14
10000955c:	41 5f	popq	%r15
10000955e:	5d	popq	%rbp
10000955f:	c3	retq
100009560:	55	pushq	%rbp
100009561:	48 89 e5	movq	%rsp, %rbp
100009564:	48 89 f7	movq	%rsi, %rdi
100009567:	48 8d 15 aa b0 03 00	leaq	241834(%rip), %rdx ## literal pool for: "The %s key is no longer respected. %s"
10000956e:	48 8d 0d bf d0 03 00	leaq	250047(%rip), %rcx ## literal pool for: "SandboxFlags"
100009575:	4c 8d 05 eb bf 03 00	leaq	245739(%rip), %r8 ## literal pool for: "Please remove it."
10000957c:	be 03 00 00 00	movl	$3, %esi
100009581:	31 c0	xorl	%eax, %eax
100009583:	5d	popq	%rbp
100009584:	e9 31 ca 00 00	jmp	0x100015fba
100009589:	55	pushq	%rbp
10000958a:	48 89 e5	movq	%rsp, %rbp
10000958d:	53	pushq	%rbx
10000958e:	50	pushq	%rax
10000958f:	48 89 d7	movq	%rdx, %rdi
100009592:	48 89 f3	movq	%rsi, %rbx
100009595:	80 8e 11 05 00 00 80	orb	$-128, 1297(%rsi)
10000959c:	48 8d 15 e1 fe ff ff	leaq	-287(%rip), %rdx
1000095a3:	e8 5e 8a 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
1000095a8:	80 a3 11 05 00 00 7f	andb	$127, 1297(%rbx)
1000095af:	48 83 c4 08	addq	$8, %rsp
1000095b3:	5b	popq	%rbx
1000095b4:	5d	popq	%rbp
1000095b5:	c3	retq
1000095b6:	55	pushq	%rbp
1000095b7:	48 89 e5	movq	%rsp, %rbp
1000095ba:	48 83 ec 30	subq	$48, %rsp
1000095be:	48 89 d7	movq	%rdx, %rdi
1000095c1:	48 8b 15 50 ea 04 00	movq	322128(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
1000095c8:	48 8d 45 d0	leaq	-48(%rbp), %rax
1000095cc:	48 89 10	movq	%rdx, (%rax)
1000095cf:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
1000095d7:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
1000095de:	48 89 50 10	movq	%rdx, 16(%rax)
1000095e2:	48 8d 15 b7 05 05 00	leaq	329143(%rip), %rdx
1000095e9:	48 89 50 18	movq	%rdx, 24(%rax)
1000095ed:	48 89 70 20	movq	%rsi, 32(%rax)
1000095f1:	48 89 48 28	movq	%rcx, 40(%rax)
1000095f5:	48 89 c6	movq	%rax, %rsi
1000095f8:	e8 03 8a 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
1000095fd:	48 83 c4 30	addq	$48, %rsp
100009601:	5d	popq	%rbp
100009602:	c3	retq
100009603:	55	pushq	%rbp
100009604:	48 89 e5	movq	%rsp, %rbp
100009607:	48 8b 47 20	movq	32(%rdi), %rax
10000960b:	48 8b 4f 28	movq	40(%rdi), %rcx
10000960f:	48 89 c7	movq	%rax, %rdi
100009612:	e8 aa d2 ff ff	callq	0x1000068c1
100009617:	b0 01	movb	$1, %al
100009619:	5d	popq	%rbp
10000961a:	c3	retq
10000961b:	55	pushq	%rbp
10000961c:	48 89 e5	movq	%rsp, %rbp
10000961f:	48 83 ec 30	subq	$48, %rsp
100009623:	48 89 d7	movq	%rdx, %rdi
100009626:	48 8b 15 eb e9 04 00	movq	322027(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
10000962d:	48 8d 45 d0	leaq	-48(%rbp), %rax
100009631:	48 89 10	movq	%rdx, (%rax)
100009634:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
10000963c:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
100009643:	48 89 50 10	movq	%rdx, 16(%rax)
100009647:	48 8d 15 b2 05 05 00	leaq	329138(%rip), %rdx
10000964e:	48 89 50 18	movq	%rdx, 24(%rax)
100009652:	48 89 70 20	movq	%rsi, 32(%rax)
100009656:	48 89 48 28	movq	%rcx, 40(%rax)
10000965a:	48 89 c6	movq	%rax, %rsi
10000965d:	e8 9e 89 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100009662:	48 83 c4 30	addq	$48, %rsp
100009666:	5d	popq	%rbp
100009667:	c3	retq
100009668:	55	pushq	%rbp
100009669:	48 89 e5	movq	%rsp, %rbp
10000966c:	41 57	pushq	%r15
10000966e:	41 56	pushq	%r14
100009670:	41 54	pushq	%r12
100009672:	53	pushq	%rbx
100009673:	48 83 ec 40	subq	$64, %rsp
100009677:	48 89 d3	movq	%rdx, %rbx
10000967a:	49 89 f6	movq	%rsi, %r14
10000967d:	4c 8b 67 20	movq	32(%rdi), %r12
100009681:	4c 8b 7f 28	movq	40(%rdi), %r15
100009685:	48 89 d7	movq	%rdx, %rdi
100009688:	e8 39 8a 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000968d:	48 3b 05 6c ea 04 00	cmpq	322156(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100009694:	74 37	je	0x1000096cd
100009696:	48 89 df	movq	%rbx, %rdi
100009699:	e8 28 8a 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000969e:	48 89 c7	movq	%rax, %rdi
1000096a1:	e8 86 8a 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
1000096a6:	48 8d 15 f3 dd 03 00	leaq	253427(%rip), %rdx ## literal pool for: "Invalid type for a LaunchEvent stream, should be a dictionary (stream/type): %s/%s"
1000096ad:	4c 89 ff	movq	%r15, %rdi
1000096b0:	be 03 00 00 00	movl	$3, %esi
1000096b5:	4c 89 f1	movq	%r14, %rcx
1000096b8:	49 89 c0	movq	%rax, %r8
1000096bb:	31 c0	xorl	%eax, %eax
1000096bd:	e8 83 4f 00 00	callq	0x10000e645
1000096c2:	41 80 8c 24 0d 05 00 00 01	orb	$1, 1293(%r12)
1000096cb:	eb 44	jmp	0x100009711
1000096cd:	48 8b 05 44 e9 04 00	movq	321860(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000096d4:	48 8d 75 a0	leaq	-96(%rbp), %rsi
1000096d8:	48 89 06	movq	%rax, (%rsi)
1000096db:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
1000096e3:	48 8d 05 ce 03 00 00	leaq	974(%rip), %rax
1000096ea:	48 89 46 10	movq	%rax, 16(%rsi)
1000096ee:	48 8d 05 2b 07 05 00	leaq	329515(%rip), %rax
1000096f5:	48 89 46 18	movq	%rax, 24(%rsi)
1000096f9:	48 89 5e 20	movq	%rbx, 32(%rsi)
1000096fd:	4c 89 7e 28	movq	%r15, 40(%rsi)
100009701:	4c 89 76 30	movq	%r14, 48(%rsi)
100009705:	4c 89 66 38	movq	%r12, 56(%rsi)
100009709:	48 89 df	movq	%rbx, %rdi
10000970c:	e8 ef 88 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100009711:	b0 01	movb	$1, %al
100009713:	48 83 c4 40	addq	$64, %rsp
100009717:	5b	popq	%rbx
100009718:	41 5c	popq	%r12
10000971a:	41 5e	popq	%r14
10000971c:	41 5f	popq	%r15
10000971e:	5d	popq	%rbp
10000971f:	c3	retq
100009720:	55	pushq	%rbp
100009721:	48 89 e5	movq	%rsp, %rbp
100009724:	48 83 ec 30	subq	$48, %rsp
100009728:	48 89 d7	movq	%rdx, %rdi
10000972b:	48 8b 15 e6 e8 04 00	movq	321766(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100009732:	48 8d 45 d0	leaq	-48(%rbp), %rax
100009736:	48 89 10	movq	%rdx, (%rax)
100009739:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
100009741:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
100009748:	48 89 50 10	movq	%rdx, 16(%rax)
10000974c:	48 8d 15 0d 05 05 00	leaq	328973(%rip), %rdx
100009753:	48 89 50 18	movq	%rdx, 24(%rax)
100009757:	48 89 48 20	movq	%rcx, 32(%rax)
10000975b:	48 89 70 28	movq	%rsi, 40(%rax)
10000975f:	48 89 c6	movq	%rax, %rsi
100009762:	e8 99 88 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100009767:	48 83 c4 30	addq	$48, %rsp
10000976b:	5d	popq	%rbp
10000976c:	c3	retq
10000976d:	55	pushq	%rbp
10000976e:	48 89 e5	movq	%rsp, %rbp
100009771:	41 57	pushq	%r15
100009773:	41 56	pushq	%r14
100009775:	41 54	pushq	%r12
100009777:	53	pushq	%rbx
100009778:	48 89 d3	movq	%rdx, %rbx
10000977b:	49 89 f6	movq	%rsi, %r14
10000977e:	49 89 ff	movq	%rdi, %r15
100009781:	48 89 d7	movq	%rdx, %rdi
100009784:	e8 3d 89 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009789:	48 3b 05 70 e9 04 00	cmpq	321904(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100009790:	74 3e	je	0x1000097d0
100009792:	4d 8b 67 20	movq	32(%r15), %r12
100009796:	48 89 df	movq	%rbx, %rdi
100009799:	e8 28 89 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000979e:	48 89 c7	movq	%rax, %rdi
1000097a1:	e8 86 89 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
1000097a6:	48 8d 15 3e d8 03 00	leaq	251966(%rip), %rdx ## literal pool for: "Invalid type for a Datastores entry, should be a dictionary (key/type): %s/%s"
1000097ad:	4c 89 e7	movq	%r12, %rdi
1000097b0:	be 03 00 00 00	movl	$3, %esi
1000097b5:	4c 89 f1	movq	%r14, %rcx
1000097b8:	49 89 c0	movq	%rax, %r8
1000097bb:	31 c0	xorl	%eax, %eax
1000097bd:	e8 83 4e 00 00	callq	0x10000e645
1000097c2:	49 8b 47 28	movq	40(%r15), %rax
1000097c6:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
1000097ce:	eb 2a	jmp	0x1000097fa
1000097d0:	48 8d 35 62 d8 03 00	leaq	252002(%rip), %rsi ## literal pool for: "SizeLimit"
1000097d7:	48 89 df	movq	%rbx, %rdi
1000097da:	e8 6f 88 03 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
1000097df:	48 85 c0	testq	%rax, %rax
1000097e2:	74 21	je	0x100009805
1000097e4:	49 8b 7f 28	movq	40(%r15), %rdi
1000097e8:	48 8d 35 85 d8 03 00	leaq	252037(%rip), %rsi ## literal pool for: "com.apple.xpc.datastores.publish"
1000097ef:	4c 89 f2	movq	%r14, %rdx
1000097f2:	48 89 d9	movq	%rbx, %rcx
1000097f5:	e8 fd f4 ff ff	callq	0x100008cf7
1000097fa:	b0 01	movb	$1, %al
1000097fc:	5b	popq	%rbx
1000097fd:	41 5c	popq	%r12
1000097ff:	41 5e	popq	%r14
100009801:	41 5f	popq	%r15
100009803:	5d	popq	%rbp
100009804:	c3	retq
100009805:	49 8b 7f 20	movq	32(%r15), %rdi
100009809:	48 8d 15 33 d8 03 00	leaq	251955(%rip), %rdx ## literal pool for: "Size limit for Datastore entry not specified: %s"
100009810:	be 03 00 00 00	movl	$3, %esi
100009815:	4c 89 f1	movq	%r14, %rcx
100009818:	31 c0	xorl	%eax, %eax
10000981a:	e8 26 4e 00 00	callq	0x10000e645
10000981f:	eb a1	jmp	0x1000097c2
100009821:	55	pushq	%rbp
100009822:	48 89 e5	movq	%rsp, %rbp
100009825:	48 83 ec 30	subq	$48, %rsp
100009829:	48 89 d7	movq	%rdx, %rdi
10000982c:	48 8b 15 e5 e7 04 00	movq	321509(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100009833:	48 8d 45 d0	leaq	-48(%rbp), %rax
100009837:	48 89 10	movq	%rdx, (%rax)
10000983a:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
100009842:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
100009849:	48 89 50 10	movq	%rdx, 16(%rax)
10000984d:	48 8d 15 6c 04 05 00	leaq	328812(%rip), %rdx
100009854:	48 89 50 18	movq	%rdx, 24(%rax)
100009858:	48 89 48 20	movq	%rcx, 32(%rax)
10000985c:	48 89 70 28	movq	%rsi, 40(%rax)
100009860:	48 89 c6	movq	%rax, %rsi
100009863:	e8 98 87 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100009868:	48 83 c4 30	addq	$48, %rsp
10000986c:	5d	popq	%rbp
10000986d:	c3	retq
10000986e:	55	pushq	%rbp
10000986f:	48 89 e5	movq	%rsp, %rbp
100009872:	41 57	pushq	%r15
100009874:	41 56	pushq	%r14
100009876:	41 54	pushq	%r12
100009878:	53	pushq	%rbx
100009879:	48 89 d3	movq	%rdx, %rbx
10000987c:	49 89 f6	movq	%rsi, %r14
10000987f:	49 89 ff	movq	%rdi, %r15
100009882:	48 89 d7	movq	%rdx, %rdi
100009885:	e8 3c 88 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000988a:	48 3b 05 6f e8 04 00	cmpq	321647(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100009891:	74 3e	je	0x1000098d1
100009893:	4d 8b 67 20	movq	32(%r15), %r12
100009897:	48 89 df	movq	%rbx, %rdi
10000989a:	e8 27 88 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000989f:	48 89 c7	movq	%rax, %rdi
1000098a2:	e8 85 88 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
1000098a7:	48 8d 15 f6 d7 03 00	leaq	251894(%rip), %rdx ## literal pool for: "Invalid type for a RemoteServices entry, should be a dictionary (key/type): %s/%s"
1000098ae:	4c 89 e7	movq	%r12, %rdi
1000098b1:	be 03 00 00 00	movl	$3, %esi
1000098b6:	4c 89 f1	movq	%r14, %rcx
1000098b9:	49 89 c0	movq	%rax, %r8
1000098bc:	31 c0	xorl	%eax, %eax
1000098be:	e8 82 4d 00 00	callq	0x10000e645
1000098c3:	49 8b 47 28	movq	40(%r15), %rax
1000098c7:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
1000098cf:	eb 16	jmp	0x1000098e7
1000098d1:	49 8b 7f 28	movq	40(%r15), %rdi
1000098d5:	48 8d 35 1a d8 03 00	leaq	251930(%rip), %rsi ## literal pool for: "com.apple.remoted.service"
1000098dc:	4c 89 f2	movq	%r14, %rdx
1000098df:	48 89 d9	movq	%rbx, %rcx
1000098e2:	e8 10 f4 ff ff	callq	0x100008cf7
1000098e7:	b0 01	movb	$1, %al
1000098e9:	5b	popq	%rbx
1000098ea:	41 5c	popq	%r12
1000098ec:	41 5e	popq	%r14
1000098ee:	41 5f	popq	%r15
1000098f0:	5d	popq	%rbp
1000098f1:	c3	retq
1000098f2:	55	pushq	%rbp
1000098f3:	48 89 e5	movq	%rsp, %rbp
1000098f6:	53	pushq	%rbx
1000098f7:	50	pushq	%rax
1000098f8:	48 89 d7	movq	%rdx, %rdi
1000098fb:	48 89 f3	movq	%rsi, %rbx
1000098fe:	e8 ff 87 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100009903:	48 89 83 80 02 00 00	movq	%rax, 640(%rbx)
10000990a:	48 83 c4 08	addq	$8, %rsp
10000990e:	5b	popq	%rbx
10000990f:	5d	popq	%rbp
100009910:	c3	retq
100009911:	55	pushq	%rbp
100009912:	48 89 e5	movq	%rsp, %rbp
100009915:	41 56	pushq	%r14
100009917:	53	pushq	%rbx
100009918:	48 89 d3	movq	%rdx, %rbx
10000991b:	49 89 f6	movq	%rsi, %r14
10000991e:	48 89 d7	movq	%rdx, %rdi
100009921:	e8 a0 87 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009926:	48 3b 05 eb e7 04 00	cmpq	321515(%rip), %rax ## literal pool symbol address: __xpc_type_mach_send
10000992d:	75 14	jne	0x100009943
10000992f:	48 89 df	movq	%rbx, %rdi
100009932:	e8 a1 87 03 00	callq	0x1000420d8 ## symbol stub for: _xpc_mach_send_copy_right
100009937:	41 89 86 04 05 00 00	movl	%eax, 1284(%r14)
10000993e:	5b	popq	%rbx
10000993f:	41 5e	popq	%r14
100009941:	5d	popq	%rbp
100009942:	c3	retq
100009943:	4c 89 f7	movq	%r14, %rdi
100009946:	e8 ae 56 03 00	callq	0x10003eff9
10000994b:	eb f1	jmp	0x10000993e
10000994d:	55	pushq	%rbp
10000994e:	48 89 e5	movq	%rsp, %rbp
100009951:	41 57	pushq	%r15
100009953:	41 56	pushq	%r14
100009955:	53	pushq	%rbx
100009956:	50	pushq	%rax
100009957:	48 89 d3	movq	%rdx, %rbx
10000995a:	49 89 f7	movq	%rsi, %r15
10000995d:	49 89 fe	movq	%rdi, %r14
100009960:	48 89 d7	movq	%rdx, %rdi
100009963:	e8 5e 87 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009968:	48 3b 05 71 e7 04 00	cmpq	321393(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10000996f:	74 33	je	0x1000099a4
100009971:	49 8b 7e 28	movq	40(%r14), %rdi
100009975:	48 8d 15 1c d8 03 00	leaq	251932(%rip), %rdx ## literal pool for: "Invalid type for PublishesEvents property %s, expected bool"
10000997c:	be 03 00 00 00	movl	$3, %esi
100009981:	4c 89 f9	movq	%r15, %rcx
100009984:	31 c0	xorl	%eax, %eax
100009986:	e8 ba 4c 00 00	callq	0x10000e645
10000998b:	49 8b 46 30	movq	48(%r14), %rax
10000998f:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
100009997:	b0 01	movb	$1, %al
100009999:	48 83 c4 08	addq	$8, %rsp
10000999d:	5b	popq	%rbx
10000999e:	41 5e	popq	%r14
1000099a0:	41 5f	popq	%r15
1000099a2:	5d	popq	%rbp
1000099a3:	c3	retq
1000099a4:	48 8d 35 a7 d7 03 00	leaq	251815(%rip), %rsi ## literal pool for: "DomainInternal"
1000099ab:	4c 89 ff	movq	%r15, %rdi
1000099ae:	e8 a3 59 00 00	callq	0x10000f356
1000099b3:	84 c0	testb	%al, %al
1000099b5:	74 1a	je	0x1000099d1
1000099b7:	48 89 df	movq	%rbx, %rdi
1000099ba:	e8 d5 85 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
1000099bf:	84 c0	testb	%al, %al
1000099c1:	74 d4	je	0x100009997
1000099c3:	49 8b 46 20	movq	32(%r14), %rax
1000099c7:	48 8b 40 08	movq	8(%rax), %rax
1000099cb:	83 48 18 01	orl	$1, 24(%rax)
1000099cf:	eb c6	jmp	0x100009997
1000099d1:	48 8d 35 89 d7 03 00	leaq	251785(%rip), %rsi ## literal pool for: "RequireTrusted"
1000099d8:	4c 89 ff	movq	%r15, %rdi
1000099db:	e8 76 59 00 00	callq	0x10000f356
1000099e0:	84 c0	testb	%al, %al
1000099e2:	74 1a	je	0x1000099fe
1000099e4:	48 89 df	movq	%rbx, %rdi
1000099e7:	e8 a8 85 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
1000099ec:	84 c0	testb	%al, %al
1000099ee:	74 a7	je	0x100009997
1000099f0:	49 8b 46 20	movq	32(%r14), %rax
1000099f4:	48 8b 40 08	movq	8(%rax), %rax
1000099f8:	83 48 18 02	orl	$2, 24(%rax)
1000099fc:	eb 99	jmp	0x100009997
1000099fe:	49 8b 7e 28	movq	40(%r14), %rdi
100009a02:	48 8d 15 67 d7 03 00	leaq	251751(%rip), %rdx ## literal pool for: "Unknown property %s for PublishesEvents"
100009a09:	e9 6e ff ff ff	jmp	0x10000997c
100009a0e:	55	pushq	%rbp
100009a0f:	48 89 e5	movq	%rsp, %rbp
100009a12:	41 57	pushq	%r15
100009a14:	41 56	pushq	%r14
100009a16:	41 54	pushq	%r12
100009a18:	53	pushq	%rbx
100009a19:	49 89 d7	movq	%rdx, %r15
100009a1c:	49 89 f4	movq	%rsi, %r12
100009a1f:	49 89 fe	movq	%rdi, %r14
100009a22:	48 89 f7	movq	%rsi, %rdi
100009a25:	e8 9c 86 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009a2a:	48 3b 05 af e6 04 00	cmpq	321199(%rip), %rax ## literal pool symbol address: __xpc_type_bool
100009a31:	74 21	je	0x100009a54
100009a33:	48 8d 15 4f d9 03 00	leaq	252239(%rip), %rdx ## literal pool for: "Unknown type for OtherJobEnabled value for key: %s"
100009a3a:	4c 89 ff	movq	%r15, %rdi
100009a3d:	be 03 00 00 00	movl	$3, %esi
100009a42:	4c 89 f1	movq	%r14, %rcx
100009a45:	31 c0	xorl	%eax, %eax
100009a47:	5b	popq	%rbx
100009a48:	41 5c	popq	%r12
100009a4a:	41 5e	popq	%r14
100009a4c:	41 5f	popq	%r15
100009a4e:	5d	popq	%rbp
100009a4f:	e9 66 c5 00 00	jmp	0x100015fba
100009a54:	bf 30 00 00 00	movl	$48, %edi
100009a59:	e8 87 3a 00 00	callq	0x10000d4e5
100009a5e:	48 89 c3	movq	%rax, %rbx
100009a61:	48 8d 05 d4 c3 00 00	leaq	50132(%rip), %rax
100009a68:	4c 3b 25 61 e6 04 00	cmpq	321121(%rip), %r12 ## literal pool symbol address: __xpc_bool_true
100009a6f:	48 89 43 10	movq	%rax, 16(%rbx)
100009a73:	0f 94 43 28	sete	40(%rbx)
100009a77:	48 8d 05 3e d9 03 00	leaq	252222(%rip), %rax ## literal pool for: "other service enabled"
100009a7e:	48 89 43 18	movq	%rax, 24(%rbx)
100009a82:	4c 89 f7	movq	%r14, %rdi
100009a85:	e8 58 55 00 00	callq	0x10000efe2
100009a8a:	48 89 43 20	movq	%rax, 32(%rbx)
100009a8e:	49 8b 87 88 02 00 00	movq	648(%r15), %rax
100009a95:	49 81 c7 88 02 00 00	addq	$648, %r15
100009a9c:	48 89 03	movq	%rax, (%rbx)
100009a9f:	48 85 c0	testq	%rax, %rax
100009aa2:	74 04	je	0x100009aa8
100009aa4:	48 89 58 08	movq	%rbx, 8(%rax)
100009aa8:	49 89 1f	movq	%rbx, (%r15)
100009aab:	4c 89 7b 08	movq	%r15, 8(%rbx)
100009aaf:	5b	popq	%rbx
100009ab0:	41 5c	popq	%r12
100009ab2:	41 5e	popq	%r14
100009ab4:	41 5f	popq	%r15
100009ab6:	5d	popq	%rbp
100009ab7:	c3	retq
100009ab8:	55	pushq	%rbp
100009ab9:	48 89 e5	movq	%rsp, %rbp
100009abc:	41 57	pushq	%r15
100009abe:	41 56	pushq	%r14
100009ac0:	41 55	pushq	%r13
100009ac2:	41 54	pushq	%r12
100009ac4:	53	pushq	%rbx
100009ac5:	50	pushq	%rax
100009ac6:	49 89 d7	movq	%rdx, %r15
100009ac9:	49 89 f6	movq	%rsi, %r14
100009acc:	48 89 fb	movq	%rdi, %rbx
100009acf:	48 8b 7f 20	movq	32(%rdi), %rdi
100009ad3:	e8 ee 85 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009ad8:	48 3b 05 21 e6 04 00	cmpq	321057(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100009adf:	74 45	je	0x100009b26
100009ae1:	4c 8b 63 28	movq	40(%rbx), %r12
100009ae5:	4c 8b 6b 30	movq	48(%rbx), %r13
100009ae9:	4c 89 ff	movq	%r15, %rdi
100009aec:	e8 d5 85 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100009af1:	48 89 c7	movq	%rax, %rdi
100009af4:	e8 33 86 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100009af9:	48 8d 15 f3 d9 03 00	leaq	252403(%rip), %rdx ## literal pool for: "Invalid type for a LaunchEvent (stream/name/type): %s/%s/%s"
100009b00:	4c 89 e7	movq	%r12, %rdi
100009b03:	be 03 00 00 00	movl	$3, %esi
100009b08:	4c 89 e9	movq	%r13, %rcx
100009b0b:	4d 89 f0	movq	%r14, %r8
100009b0e:	49 89 c1	movq	%rax, %r9
100009b11:	31 c0	xorl	%eax, %eax
100009b13:	e8 2d 4b 00 00	callq	0x10000e645
100009b18:	48 8b 43 38	movq	56(%rbx), %rax
100009b1c:	48 83 88 0d 05 00 00 01	orq	$1, 1293(%rax)
100009b24:	eb 13	jmp	0x100009b39
100009b26:	48 8b 73 30	movq	48(%rbx), %rsi
100009b2a:	48 8b 7b 38	movq	56(%rbx), %rdi
100009b2e:	4c 89 f2	movq	%r14, %rdx
100009b31:	4c 89 f9	movq	%r15, %rcx
100009b34:	e8 be f1 ff ff	callq	0x100008cf7
100009b39:	b0 01	movb	$1, %al
100009b3b:	48 83 c4 08	addq	$8, %rsp
100009b3f:	5b	popq	%rbx
100009b40:	41 5c	popq	%r12
100009b42:	41 5d	popq	%r13
100009b44:	41 5e	popq	%r14
100009b46:	41 5f	popq	%r15
100009b48:	5d	popq	%rbp
100009b49:	c3	retq
100009b4a:	55	pushq	%rbp
100009b4b:	48 89 e5	movq	%rsp, %rbp
100009b4e:	53	pushq	%rbx
100009b4f:	50	pushq	%rax
100009b50:	48 89 fb	movq	%rdi, %rbx
100009b53:	e8 e0 7f 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
100009b58:	48 29 d8	subq	%rbx, %rax
100009b5b:	48 89 c7	movq	%rax, %rdi
100009b5e:	48 83 c4 08	addq	$8, %rsp
100009b62:	5b	popq	%rbx
100009b63:	5d	popq	%rbp
100009b64:	e9 00 00 00 00	jmp	0x100009b69
100009b69:	55	pushq	%rbp
100009b6a:	48 89 e5	movq	%rsp, %rbp
100009b6d:	53	pushq	%rbx
100009b6e:	50	pushq	%rax
100009b6f:	48 89 fb	movq	%rdi, %rbx
100009b72:	48 83 3d 36 91 05 00 ff	cmpq	$-1, 364854(%rip)
100009b7a:	75 34	jne	0x100009bb0
100009b7c:	8b 05 36 91 05 00	movl	364854(%rip), %eax
100009b82:	8b 0d 34 91 05 00	movl	364852(%rip), %ecx
100009b88:	39 c8	cmpl	%ecx, %eax
100009b8a:	74 1a	je	0x100009ba6
100009b8c:	89 c0	movl	%eax, %eax
100009b8e:	48 f7 e3	mulq	%rbx
100009b91:	89 c9	movl	%ecx, %ecx
100009b93:	48 89 c7	movq	%rax, %rdi
100009b96:	48 89 d6	movq	%rdx, %rsi
100009b99:	48 89 ca	movq	%rcx, %rdx
100009b9c:	31 c9	xorl	%ecx, %ecx
100009b9e:	e8 e1 7b 03 00	callq	0x100041784 ## symbol stub for: ___udivti3
100009ba3:	48 89 c3	movq	%rax, %rbx
100009ba6:	48 89 d8	movq	%rbx, %rax
100009ba9:	48 83 c4 08	addq	$8, %rsp
100009bad:	5b	popq	%rbx
100009bae:	5d	popq	%rbp
100009baf:	c3	retq
100009bb0:	48 8d 3d f9 90 05 00	leaq	364793(%rip), %rdi
100009bb7:	48 8d 15 25 04 00 00	leaq	1061(%rip), %rdx
100009bbe:	31 f6	xorl	%esi, %esi
100009bc0:	e8 7b 7d 03 00	callq	0x100041940 ## symbol stub for: _dispatch_once_f
100009bc5:	eb b5	jmp	0x100009b7c
100009bc7:	55	pushq	%rbp
100009bc8:	48 89 e5	movq	%rsp, %rbp
100009bcb:	5d	popq	%rbp
100009bcc:	e9 98 ff ff ff	jmp	0x100009b69
100009bd1:	55	pushq	%rbp
100009bd2:	48 89 e5	movq	%rsp, %rbp
100009bd5:	41 57	pushq	%r15
100009bd7:	41 56	pushq	%r14
100009bd9:	41 55	pushq	%r13
100009bdb:	41 54	pushq	%r12
100009bdd:	53	pushq	%rbx
100009bde:	50	pushq	%rax
100009bdf:	49 89 d6	movq	%rdx, %r14
100009be2:	49 89 f7	movq	%rsi, %r15
100009be5:	49 89 fc	movq	%rdi, %r12
100009be8:	4c 8b 2d b9 e5 04 00	movq	320953(%rip), %r13 ## literal pool symbol address: _mach_task_self_
100009bef:	41 8b 7d 00	movl	(%r13), %edi
100009bf3:	4c 89 e6	movq	%r12, %rsi
100009bf6:	4c 89 fa	movq	%r15, %rdx
100009bf9:	4c 89 f1	movq	%r14, %rcx
100009bfc:	e8 61 7f 03 00	callq	0x100041b62 ## symbol stub for: _mach_port_construct
100009c01:	89 c3	movl	%eax, %ebx
100009c03:	83 f8 06	cmpl	$6, %eax
100009c06:	74 05	je	0x100009c0d
100009c08:	83 fb 03	cmpl	$3, %ebx
100009c0b:	75 09	jne	0x100009c16
100009c0d:	e8 94 53 00 00	callq	0x10000efa6
100009c12:	85 c0	testl	%eax, %eax
100009c14:	75 d9	jne	0x100009bef
100009c16:	89 d8	movl	%ebx, %eax
100009c18:	48 83 c4 08	addq	$8, %rsp
100009c1c:	5b	popq	%rbx
100009c1d:	41 5c	popq	%r12
100009c1f:	41 5d	popq	%r13
100009c21:	41 5e	popq	%r14
100009c23:	41 5f	popq	%r15
100009c25:	5d	popq	%rbp
100009c26:	c3	retq
100009c27:	55	pushq	%rbp
100009c28:	48 89 e5	movq	%rsp, %rbp
100009c2b:	48 83 ec 10	subq	$16, %rsp
100009c2f:	48 8d 55 fc	leaq	-4(%rbp), %rdx
100009c33:	c7 02 00 00 00 00	movl	$0, (%rdx)
100009c39:	e8 93 ff ff ff	callq	0x100009bd1
100009c3e:	85 c0	testl	%eax, %eax
100009c40:	75 09	jne	0x100009c4b
100009c42:	8b 45 fc	movl	-4(%rbp), %eax
100009c45:	48 83 c4 10	addq	$16, %rsp
100009c49:	5d	popq	%rbp
100009c4a:	c3	retq
100009c4b:	89 c7	movl	%eax, %edi
100009c4d:	e8 cf 53 03 00	callq	0x10003f021
100009c52:	55	pushq	%rbp
100009c53:	48 89 e5	movq	%rsp, %rbp
100009c56:	48 83 ec 20	subq	$32, %rsp
100009c5a:	48 8d 45 e8	leaq	-24(%rbp), %rax
100009c5e:	89 38	movl	%edi, (%rax)
100009c60:	89 70 04	movl	%esi, 4(%rax)
100009c63:	0f 57 c0	xorps	%xmm0, %xmm0
100009c66:	0f 11 40 08	movups	%xmm0, 8(%rax)
100009c6a:	48 89 c7	movq	%rax, %rdi
100009c6d:	48 89 d6	movq	%rdx, %rsi
100009c70:	e8 b2 ff ff ff	callq	0x100009c27
100009c75:	48 83 c4 20	addq	$32, %rsp
100009c79:	5d	popq	%rbp
100009c7a:	c3	retq
100009c7b:	55	pushq	%rbp
100009c7c:	48 89 e5	movq	%rsp, %rbp
100009c7f:	48 89 f2	movq	%rsi, %rdx
100009c82:	89 fe	movl	%edi, %esi
100009c84:	48 8b 05 1d e5 04 00	movq	320797(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009c8b:	8b 38	movl	(%rax), %edi
100009c8d:	5d	popq	%rbp
100009c8e:	e9 0b 7f 03 00	jmp	0x100041b9e ## symbol stub for: _mach_port_unguard
100009c93:	55	pushq	%rbp
100009c94:	48 89 e5	movq	%rsp, %rbp
100009c97:	48 83 ec 10	subq	$16, %rsp
100009c9b:	89 f8	movl	%edi, %eax
100009c9d:	48 8d 4d f8	leaq	-8(%rbp), %rcx
100009ca1:	48 89 31	movq	%rsi, (%rcx)
100009ca4:	48 8b 15 fd e4 04 00	movq	320765(%rip), %rdx ## literal pool symbol address: _mach_task_self_
100009cab:	8b 3a	movl	(%rdx), %edi
100009cad:	89 c6	movl	%eax, %esi
100009caf:	ba 08 00 00 00	movl	$8, %edx
100009cb4:	41 b8 02 00 00 00	movl	$2, %r8d
100009cba:	e8 9d 7e 03 00	callq	0x100041b5c ## symbol stub for: _mach_port_assert_attributes
100009cbf:	85 c0	testl	%eax, %eax
100009cc1:	75 06	jne	0x100009cc9
100009cc3:	48 83 c4 10	addq	$16, %rsp
100009cc7:	5d	popq	%rbp
100009cc8:	c3	retq
100009cc9:	89 c7	movl	%eax, %edi
100009ccb:	e8 6f 53 03 00	callq	0x10003f03f
100009cd0:	55	pushq	%rbp
100009cd1:	48 89 e5	movq	%rsp, %rbp
100009cd4:	89 fa	movl	%edi, %edx
100009cd6:	48 8b 05 cb e4 04 00	movq	320715(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009cdd:	8b 38	movl	(%rax), %edi
100009cdf:	89 d6	movl	%edx, %esi
100009ce1:	b9 14 00 00 00	movl	$20, %ecx
100009ce6:	5d	popq	%rbp
100009ce7:	e9 8e 7e 03 00	jmp	0x100041b7a ## symbol stub for: _mach_port_insert_right
100009cec:	55	pushq	%rbp
100009ced:	48 89 e5	movq	%rsp, %rbp
100009cf0:	48 83 ec 10	subq	$16, %rsp
100009cf4:	48 89 f1	movq	%rsi, %rcx
100009cf7:	89 fe	movl	%edi, %esi
100009cf9:	4c 8d 45 fc	leaq	-4(%rbp), %r8
100009cfd:	41 c7 00 00 00 00 00	movl	$0, (%r8)
100009d04:	48 8b 05 9d e4 04 00	movq	320669(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009d0b:	8b 38	movl	(%rax), %edi
100009d0d:	ba 15 00 00 00	movl	$21, %edx
100009d12:	e8 5d 7e 03 00	callq	0x100041b74 ## symbol stub for: _mach_port_extract_right
100009d17:	48 83 c4 10	addq	$16, %rsp
100009d1b:	5d	popq	%rbp
100009d1c:	c3	retq
100009d1d:	55	pushq	%rbp
100009d1e:	48 89 e5	movq	%rsp, %rbp
100009d21:	89 fe	movl	%edi, %esi
100009d23:	48 8b 05 7e e4 04 00	movq	320638(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009d2a:	8b 38	movl	(%rax), %edi
100009d2c:	31 d2	xorl	%edx, %edx
100009d2e:	b9 01 00 00 00	movl	$1, %ecx
100009d33:	5d	popq	%rbp
100009d34:	e9 4d 7e 03 00	jmp	0x100041b86 ## symbol stub for: _mach_port_mod_refs
100009d39:	55	pushq	%rbp
100009d3a:	48 89 e5	movq	%rsp, %rbp
100009d3d:	89 fe	movl	%edi, %esi
100009d3f:	48 8b 05 62 e4 04 00	movq	320610(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009d46:	8b 38	movl	(%rax), %edi
100009d48:	5d	popq	%rbp
100009d49:	e9 1a 7e 03 00	jmp	0x100041b68 ## symbol stub for: _mach_port_deallocate
100009d4e:	55	pushq	%rbp
100009d4f:	48 89 e5	movq	%rsp, %rbp
100009d52:	48 89 d1	movq	%rdx, %rcx
100009d55:	89 f2	movl	%esi, %edx
100009d57:	89 fe	movl	%edi, %esi
100009d59:	48 8b 05 48 e4 04 00	movq	320584(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009d60:	8b 38	movl	(%rax), %edi
100009d62:	5d	popq	%rbp
100009d63:	e9 06 7e 03 00	jmp	0x100041b6e ## symbol stub for: _mach_port_destruct
100009d68:	55	pushq	%rbp
100009d69:	48 89 e5	movq	%rsp, %rbp
100009d6c:	89 fe	movl	%edi, %esi
100009d6e:	48 8b 05 33 e4 04 00	movq	320563(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009d75:	8b 38	movl	(%rax), %edi
100009d77:	ba 04 00 00 00	movl	$4, %edx
100009d7c:	31 c9	xorl	%ecx, %ecx
100009d7e:	45 31 c0	xorl	%r8d, %r8d
100009d81:	5d	popq	%rbp
100009d82:	e9 0b 7e 03 00	jmp	0x100041b92 ## symbol stub for: _mach_port_set_attributes
100009d87:	55	pushq	%rbp
100009d88:	48 89 e5	movq	%rsp, %rbp
100009d8b:	48 83 ec 10	subq	$16, %rsp
100009d8f:	41 89 f0	movl	%esi, %r8d
100009d92:	89 fe	movl	%edi, %esi
100009d94:	31 c0	xorl	%eax, %eax
100009d96:	45 85 c0	testl	%r8d, %r8d
100009d99:	0f 95 c0	setne	%al
100009d9c:	44 8d 0c 40	leal	(%rax,%rax,2), %r9d
100009da0:	41 83 c1 12	addl	$18, %r9d
100009da4:	48 8b 05 fd e3 04 00	movq	320509(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009dab:	8b 38	movl	(%rax), %edi
100009dad:	48 89 14 24	movq	%rdx, (%rsp)
100009db1:	ba 45 00 00 00	movl	$69, %edx
100009db6:	31 c9	xorl	%ecx, %ecx
100009db8:	e8 cf 7d 03 00	callq	0x100041b8c ## symbol stub for: _mach_port_request_notification
100009dbd:	48 83 c4 10	addq	$16, %rsp
100009dc1:	5d	popq	%rbp
100009dc2:	c3	retq
100009dc3:	55	pushq	%rbp
100009dc4:	48 89 e5	movq	%rsp, %rbp
100009dc7:	8b 47 04	movl	4(%rdi), %eax
100009dca:	48 83 c0 03	addq	$3, %rax
100009dce:	48 83 e0 fc	andq	$-4, %rax
100009dd2:	48 01 f8	addq	%rdi, %rax
100009dd5:	48 83 c0 14	addq	$20, %rax
100009dd9:	5d	popq	%rbp
100009dda:	c3	retq
100009ddb:	55	pushq	%rbp
100009ddc:	48 89 e5	movq	%rsp, %rbp
100009ddf:	41 56	pushq	%r14
100009de1:	53	pushq	%rbx
100009de2:	41 89 f6	movl	%esi, %r14d
100009de5:	48 89 fb	movq	%rdi, %rbx
100009de8:	48 8b 3d c1 e2 04 00	movq	320193(%rip), %rdi ## literal pool symbol address: __os_alloc_once_table
100009def:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
100009df4:	75 63	jne	0x100009e59
100009df6:	48 8b 47 18	movq	24(%rdi), %rax
100009dfa:	80 78 2b 00	cmpb	$0, 43(%rax)
100009dfe:	b8 00 28 00 00	movl	$10240, %eax
100009e03:	be 00 1c 00 00	movl	$7168, %esi
100009e08:	0f 44 f0	cmovel	%eax, %esi
100009e0b:	48 8b 05 ae e2 04 00	movq	320174(%rip), %rax ## literal pool symbol address: __os_xbs_chrooted
100009e12:	80 38 01	cmpb	$1, (%rax)
100009e15:	b9 03 00 00 80	movl	$2147483651, %ecx
100009e1a:	83 d1 00	adcl	$0, %ecx
100009e1d:	48 85 db	testq	%rbx, %rbx
100009e20:	74 1c	je	0x100009e3e
100009e22:	48 89 df	movq	%rbx, %rdi
100009e25:	44 89 f2	movl	%r14d, %edx
100009e28:	41 b8 07 00 00 00	movl	$7, %r8d
100009e2e:	e8 df 7e 03 00	callq	0x100041d12 ## symbol stub for: _posix_spawnattr_setexceptionports_np
100009e33:	85 c0	testl	%eax, %eax
100009e35:	75 34	jne	0x100009e6b
100009e37:	31 c0	xorl	%eax, %eax
100009e39:	5b	popq	%rbx
100009e3a:	41 5e	popq	%r14
100009e3c:	5d	popq	%rbp
100009e3d:	c3	retq
100009e3e:	48 8b 05 63 e3 04 00	movq	320355(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009e45:	8b 38	movl	(%rax), %edi
100009e47:	44 89 f2	movl	%r14d, %edx
100009e4a:	41 b8 07 00 00 00	movl	$7, %r8d
100009e50:	5b	popq	%rbx
100009e51:	41 5e	popq	%r14
100009e53:	5d	popq	%rbp
100009e54:	e9 6f 80 03 00	jmp	0x100041ec8 ## symbol stub for: _task_set_exception_ports
100009e59:	48 83 c7 10	addq	$16, %rdi
100009e5d:	be d0 00 00 00	movl	$208, %esi
100009e62:	31 d2	xorl	%edx, %edx
100009e64:	e8 2d 79 03 00	callq	0x100041796 ## symbol stub for: __os_alloc_once
100009e69:	eb 8f	jmp	0x100009dfa
100009e6b:	89 c7	movl	%eax, %edi
100009e6d:	e8 eb 51 03 00	callq	0x10003f05d
100009e72:	55	pushq	%rbp
100009e73:	48 89 e5	movq	%rsp, %rbp
100009e76:	41 56	pushq	%r14
100009e78:	53	pushq	%rbx
100009e79:	48 81 ec 10 01 00 00	subq	$272, %rsp
100009e80:	41 89 fe	movl	%edi, %r14d
100009e83:	48 8b 05 9e e1 04 00	movq	319902(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100009e8a:	48 8b 00	movq	(%rax), %rax
100009e8d:	48 89 45 e8	movq	%rax, -24(%rbp)
100009e91:	48 8b 3d 18 e2 04 00	movq	320024(%rip), %rdi ## literal pool symbol address: __os_alloc_once_table
100009e98:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
100009e9d:	0f 85 1f 01 00 00	jne	0x100009fc2
100009ea3:	48 8b 47 18	movq	24(%rdi), %rax
100009ea7:	48 b9 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rcx
100009eb1:	48 89 4d e0	movq	%rcx, -32(%rbp)
100009eb5:	0f 28 05 c4 93 03 00	movaps	234436(%rip), %xmm0
100009ebc:	0f 29 45 d0	movaps	%xmm0, -48(%rbp)
100009ec0:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100009ec4:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100009ec8:	c7 85 ec fe ff ff 00 00 00 00	movl	$0, -276(%rbp)
100009ed2:	48 89 4d a0	movq	%rcx, -96(%rbp)
100009ed6:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100009eda:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100009ede:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100009ee5:	48 89 8d 60 ff ff ff	movq	%rcx, -160(%rbp)
100009eec:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100009ef3:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100009efa:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
100009f01:	48 89 8d 20 ff ff ff	movq	%rcx, -224(%rbp)
100009f08:	0f 29 85 10 ff ff ff	movaps	%xmm0, -240(%rbp)
100009f0f:	0f 29 85 00 ff ff ff	movaps	%xmm0, -256(%rbp)
100009f16:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
100009f1d:	80 78 2b 00	cmpb	$0, 43(%rax)
100009f21:	b8 00 20 00 00	movl	$8192, %eax
100009f26:	bb 00 04 00 00	movl	$1024, %ebx
100009f2b:	0f 44 d8	cmovel	%eax, %ebx
100009f2e:	48 8b 05 73 e2 04 00	movq	320115(%rip), %rax ## literal pool symbol address: _mach_task_self_
100009f35:	44 39 30	cmpl	%r14d, (%rax)
100009f38:	75 30	jne	0x100009f6a
100009f3a:	48 8d 85 f0 fe ff ff	leaq	-272(%rbp), %rax
100009f41:	48 89 04 24	movq	%rax, (%rsp)
100009f45:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100009f49:	48 8d 8d ec fe ff ff	leaq	-276(%rbp), %rcx
100009f50:	4c 8d 85 70 ff ff ff	leaq	-144(%rbp), %r8
100009f57:	4c 8d 8d 30 ff ff ff	leaq	-208(%rbp), %r9
100009f5e:	44 89 f7	movl	%r14d, %edi
100009f61:	89 de	movl	%ebx, %esi
100009f63:	e8 54 7f 03 00	callq	0x100041ebc ## symbol stub for: _task_get_exception_ports
100009f68:	eb 32	jmp	0x100009f9c
100009f6a:	e8 cf 7b 03 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
100009f6f:	48 8d 8d f0 fe ff ff	leaq	-272(%rbp), %rcx
100009f76:	48 89 0c 24	movq	%rcx, (%rsp)
100009f7a:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100009f7e:	48 8d 8d ec fe ff ff	leaq	-276(%rbp), %rcx
100009f85:	4c 8d 85 70 ff ff ff	leaq	-144(%rbp), %r8
100009f8c:	4c 8d 8d 30 ff ff ff	leaq	-208(%rbp), %r9
100009f93:	89 c7	movl	%eax, %edi
100009f95:	89 de	movl	%ebx, %esi
100009f97:	e8 3c 7b 03 00	callq	0x100041ad8 ## symbol stub for: _host_get_exception_ports
100009f9c:	85 c0	testl	%eax, %eax
100009f9e:	75 37	jne	0x100009fd7
100009fa0:	8b 85 70 ff ff ff	movl	-144(%rbp), %eax
100009fa6:	48 8b 0d 7b e0 04 00	movq	319611(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100009fad:	48 8b 09	movq	(%rcx), %rcx
100009fb0:	48 3b 4d e8	cmpq	-24(%rbp), %rcx
100009fb4:	75 28	jne	0x100009fde
100009fb6:	48 81 c4 10 01 00 00	addq	$272, %rsp
100009fbd:	5b	popq	%rbx
100009fbe:	41 5e	popq	%r14
100009fc0:	5d	popq	%rbp
100009fc1:	c3	retq
100009fc2:	48 83 c7 10	addq	$16, %rdi
100009fc6:	be d0 00 00 00	movl	$208, %esi
100009fcb:	31 d2	xorl	%edx, %edx
100009fcd:	e8 c4 77 03 00	callq	0x100041796 ## symbol stub for: __os_alloc_once
100009fd2:	e9 d0 fe ff ff	jmp	0x100009ea7
100009fd7:	89 c7	movl	%eax, %edi
100009fd9:	e8 95 50 03 00	callq	0x10003f073
100009fde:	e8 8f 77 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100009fe3:	55	pushq	%rbp
100009fe4:	48 89 e5	movq	%rsp, %rbp
100009fe7:	48 8d 3d ca 8c 05 00	leaq	363722(%rip), %rdi
100009fee:	e8 c3 7b 03 00	callq	0x100041bb6 ## symbol stub for: _mach_timebase_info
100009ff3:	85 c0	testl	%eax, %eax
100009ff5:	75 02	jne	0x100009ff9
100009ff7:	5d	popq	%rbp
100009ff8:	c3	retq
100009ff9:	89 c7	movl	%eax, %edi
100009ffb:	e8 89 50 03 00	callq	0x10003f089
10000a000:	48 85 ff	testq	%rdi, %rdi
10000a003:	74 06	je	0x10000a00b
10000a005:	48 89 f8	movq	%rdi, %rax
10000a008:	31 d2	xorl	%edx, %edx
10000a00a:	c3	retq
10000a00b:	55	pushq	%rbp
10000a00c:	48 89 e5	movq	%rsp, %rbp
10000a00f:	e8 8b 50 03 00	callq	0x10003f09f
10000a014:	85 ff	testl	%edi, %edi
10000a016:	74 05	je	0x10000a01d
10000a018:	31 c0	xorl	%eax, %eax
10000a01a:	89 fa	movl	%edi, %edx
10000a01c:	c3	retq
10000a01d:	55	pushq	%rbp
10000a01e:	48 89 e5	movq	%rsp, %rbp
10000a021:	e8 8b 50 03 00	callq	0x10003f0b1
10000a026:	55	pushq	%rbp
10000a027:	48 89 e5	movq	%rsp, %rbp
10000a02a:	41 56	pushq	%r14
10000a02c:	53	pushq	%rbx
10000a02d:	49 89 fe	movq	%rdi, %r14
10000a030:	bf b0 00 00 00	movl	$176, %edi
10000a035:	e8 ab 34 00 00	callq	0x10000d4e5
10000a03a:	48 89 c3	movq	%rax, %rbx
10000a03d:	4c 89 f7	movq	%r14, %rdi
10000a040:	e8 9d 4f 00 00	callq	0x10000efe2
10000a045:	48 89 03	movq	%rax, (%rbx)
10000a048:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000a04c:	31 f6	xorl	%esi, %esi
10000a04e:	ba 01 00 00 00	movl	$1, %edx
10000a053:	e8 f4 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a058:	48 8d 7b 20	leaq	32(%rbx), %rdi
10000a05c:	31 f6	xorl	%esi, %esi
10000a05e:	ba 01 00 00 00	movl	$1, %edx
10000a063:	e8 e4 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a068:	48 8d 7b 38	leaq	56(%rbx), %rdi
10000a06c:	31 f6	xorl	%esi, %esi
10000a06e:	ba 01 00 00 00	movl	$1, %edx
10000a073:	e8 d4 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a078:	48 8d 7b 50	leaq	80(%rbx), %rdi
10000a07c:	31 f6	xorl	%esi, %esi
10000a07e:	ba 01 00 00 00	movl	$1, %edx
10000a083:	e8 c4 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a088:	48 8d 7b 68	leaq	104(%rbx), %rdi
10000a08c:	31 f6	xorl	%esi, %esi
10000a08e:	ba 01 00 00 00	movl	$1, %edx
10000a093:	e8 b4 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a098:	48 8d bb 80 00 00 00	leaq	128(%rbx), %rdi
10000a09f:	31 f6	xorl	%esi, %esi
10000a0a1:	ba 01 00 00 00	movl	$1, %edx
10000a0a6:	e8 a1 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a0ab:	48 8d bb 98 00 00 00	leaq	152(%rbx), %rdi
10000a0b2:	31 f6	xorl	%esi, %esi
10000a0b4:	ba 01 00 00 00	movl	$1, %edx
10000a0b9:	e8 8e 7b 03 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10000a0be:	48 89 d8	movq	%rbx, %rax
10000a0c1:	5b	popq	%rbx
10000a0c2:	41 5e	popq	%r14
10000a0c4:	5d	popq	%rbp
10000a0c5:	c3	retq
10000a0c6:	55	pushq	%rbp
10000a0c7:	48 89 e5	movq	%rsp, %rbp
10000a0ca:	41 57	pushq	%r15
10000a0cc:	41 56	pushq	%r14
10000a0ce:	53	pushq	%rbx
10000a0cf:	50	pushq	%rax
10000a0d0:	49 89 d7	movq	%rdx, %r15
10000a0d3:	49 89 f6	movq	%rsi, %r14
10000a0d6:	48 89 fb	movq	%rdi, %rbx
10000a0d9:	bf 10 00 00 00	movl	$16, %edi
10000a0de:	e8 02 34 00 00	callq	0x10000d4e5
10000a0e3:	4c 89 78 08	movq	%r15, 8(%rax)
10000a0e7:	48 8d 73 08	leaq	8(%rbx), %rsi
10000a0eb:	48 89 df	movq	%rbx, %rdi
10000a0ee:	4c 89 f2	movq	%r14, %rdx
10000a0f1:	48 89 c1	movq	%rax, %rcx
10000a0f4:	48 83 c4 08	addq	$8, %rsp
10000a0f8:	5b	popq	%rbx
10000a0f9:	41 5e	popq	%r14
10000a0fb:	41 5f	popq	%r15
10000a0fd:	5d	popq	%rbp
10000a0fe:	e9 00 00 00 00	jmp	0x10000a103
10000a103:	55	pushq	%rbp
10000a104:	48 89 e5	movq	%rsp, %rbp
10000a107:	41 57	pushq	%r15
10000a109:	41 56	pushq	%r14
10000a10b:	41 54	pushq	%r12
10000a10d:	53	pushq	%rbx
10000a10e:	49 89 ce	movq	%rcx, %r14
10000a111:	49 89 f7	movq	%rsi, %r15
10000a114:	48 89 fb	movq	%rdi, %rbx
10000a117:	48 89 d7	movq	%rdx, %rdi
10000a11a:	e8 38 02 00 00	callq	0x10000a357
10000a11f:	49 89 c4	movq	%rax, %r12
10000a122:	48 81 c3 98 00 00 00	addq	$152, %rbx
10000a129:	48 89 df	movq	%rbx, %rdi
10000a12c:	48 89 c6	movq	%rax, %rsi
10000a12f:	e8 0c 7b 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a134:	48 85 c0	testq	%rax, %rax
10000a137:	75 29	jne	0x10000a162
10000a139:	4c 89 ff	movq	%r15, %rdi
10000a13c:	4c 89 e6	movq	%r12, %rsi
10000a13f:	e8 fc 7a 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a144:	48 85 c0	testq	%rax, %rax
10000a147:	75 1e	jne	0x10000a167
10000a149:	4d 89 26	movq	%r12, (%r14)
10000a14c:	4c 89 ff	movq	%r15, %rdi
10000a14f:	4c 89 e6	movq	%r12, %rsi
10000a152:	4c 89 f2	movq	%r14, %rdx
10000a155:	5b	popq	%rbx
10000a156:	41 5c	popq	%r12
10000a158:	41 5e	popq	%r14
10000a15a:	41 5f	popq	%r15
10000a15c:	5d	popq	%rbp
10000a15d:	e9 f0 7a 03 00	jmp	0x100041c52 ## symbol stub for: _os_map_str_insert
10000a162:	e8 71 4f 03 00	callq	0x10003f0d8
10000a167:	e8 57 4f 03 00	callq	0x10003f0c3
10000a16c:	55	pushq	%rbp
10000a16d:	48 89 e5	movq	%rsp, %rbp
10000a170:	41 57	pushq	%r15
10000a172:	41 56	pushq	%r14
10000a174:	53	pushq	%rbx
10000a175:	50	pushq	%rax
10000a176:	49 89 d7	movq	%rdx, %r15
10000a179:	49 89 f6	movq	%rsi, %r14
10000a17c:	48 89 fb	movq	%rdi, %rbx
10000a17f:	bf 10 00 00 00	movl	$16, %edi
10000a184:	e8 5c 33 00 00	callq	0x10000d4e5
10000a189:	4c 89 78 08	movq	%r15, 8(%rax)
10000a18d:	48 8d 73 20	leaq	32(%rbx), %rsi
10000a191:	48 89 df	movq	%rbx, %rdi
10000a194:	4c 89 f2	movq	%r14, %rdx
10000a197:	48 89 c1	movq	%rax, %rcx
10000a19a:	48 83 c4 08	addq	$8, %rsp
10000a19e:	5b	popq	%rbx
10000a19f:	41 5e	popq	%r14
10000a1a1:	41 5f	popq	%r15
10000a1a3:	5d	popq	%rbp
10000a1a4:	e9 5a ff ff ff	jmp	0x10000a103
10000a1a9:	55	pushq	%rbp
10000a1aa:	48 89 e5	movq	%rsp, %rbp
10000a1ad:	41 57	pushq	%r15
10000a1af:	41 56	pushq	%r14
10000a1b1:	53	pushq	%rbx
10000a1b2:	50	pushq	%rax
10000a1b3:	49 89 d7	movq	%rdx, %r15
10000a1b6:	49 89 f6	movq	%rsi, %r14
10000a1b9:	48 89 fb	movq	%rdi, %rbx
10000a1bc:	bf 10 00 00 00	movl	$16, %edi
10000a1c1:	e8 1f 33 00 00	callq	0x10000d4e5
10000a1c6:	4c 89 78 08	movq	%r15, 8(%rax)
10000a1ca:	48 8d 73 38	leaq	56(%rbx), %rsi
10000a1ce:	48 89 df	movq	%rbx, %rdi
10000a1d1:	4c 89 f2	movq	%r14, %rdx
10000a1d4:	48 89 c1	movq	%rax, %rcx
10000a1d7:	48 83 c4 08	addq	$8, %rsp
10000a1db:	5b	popq	%rbx
10000a1dc:	41 5e	popq	%r14
10000a1de:	41 5f	popq	%r15
10000a1e0:	5d	popq	%rbp
10000a1e1:	e9 1d ff ff ff	jmp	0x10000a103
10000a1e6:	55	pushq	%rbp
10000a1e7:	48 89 e5	movq	%rsp, %rbp
10000a1ea:	41 57	pushq	%r15
10000a1ec:	41 56	pushq	%r14
10000a1ee:	53	pushq	%rbx
10000a1ef:	50	pushq	%rax
10000a1f0:	49 89 d7	movq	%rdx, %r15
10000a1f3:	49 89 f6	movq	%rsi, %r14
10000a1f6:	48 89 fb	movq	%rdi, %rbx
10000a1f9:	bf 10 00 00 00	movl	$16, %edi
10000a1fe:	e8 e2 32 00 00	callq	0x10000d4e5
10000a203:	4c 89 78 08	movq	%r15, 8(%rax)
10000a207:	48 8d 73 50	leaq	80(%rbx), %rsi
10000a20b:	48 89 df	movq	%rbx, %rdi
10000a20e:	4c 89 f2	movq	%r14, %rdx
10000a211:	48 89 c1	movq	%rax, %rcx
10000a214:	48 83 c4 08	addq	$8, %rsp
10000a218:	5b	popq	%rbx
10000a219:	41 5e	popq	%r14
10000a21b:	41 5f	popq	%r15
10000a21d:	5d	popq	%rbp
10000a21e:	e9 e0 fe ff ff	jmp	0x10000a103
10000a223:	55	pushq	%rbp
10000a224:	48 89 e5	movq	%rsp, %rbp
10000a227:	41 57	pushq	%r15
10000a229:	41 56	pushq	%r14
10000a22b:	53	pushq	%rbx
10000a22c:	50	pushq	%rax
10000a22d:	49 89 d7	movq	%rdx, %r15
10000a230:	49 89 f6	movq	%rsi, %r14
10000a233:	48 89 fb	movq	%rdi, %rbx
10000a236:	bf 10 00 00 00	movl	$16, %edi
10000a23b:	e8 a5 32 00 00	callq	0x10000d4e5
10000a240:	4c 89 78 08	movq	%r15, 8(%rax)
10000a244:	48 8d 73 68	leaq	104(%rbx), %rsi
10000a248:	48 89 df	movq	%rbx, %rdi
10000a24b:	4c 89 f2	movq	%r14, %rdx
10000a24e:	48 89 c1	movq	%rax, %rcx
10000a251:	48 83 c4 08	addq	$8, %rsp
10000a255:	5b	popq	%rbx
10000a256:	41 5e	popq	%r14
10000a258:	41 5f	popq	%r15
10000a25a:	5d	popq	%rbp
10000a25b:	e9 a3 fe ff ff	jmp	0x10000a103
10000a260:	55	pushq	%rbp
10000a261:	48 89 e5	movq	%rsp, %rbp
10000a264:	41 57	pushq	%r15
10000a266:	41 56	pushq	%r14
10000a268:	53	pushq	%rbx
10000a269:	50	pushq	%rax
10000a26a:	49 89 d7	movq	%rdx, %r15
10000a26d:	49 89 f6	movq	%rsi, %r14
10000a270:	48 89 fb	movq	%rdi, %rbx
10000a273:	bf 10 00 00 00	movl	$16, %edi
10000a278:	e8 68 32 00 00	callq	0x10000d4e5
10000a27d:	4c 89 78 08	movq	%r15, 8(%rax)
10000a281:	48 8d b3 80 00 00 00	leaq	128(%rbx), %rsi
10000a288:	48 89 df	movq	%rbx, %rdi
10000a28b:	4c 89 f2	movq	%r14, %rdx
10000a28e:	48 89 c1	movq	%rax, %rcx
10000a291:	48 83 c4 08	addq	$8, %rsp
10000a295:	5b	popq	%rbx
10000a296:	41 5e	popq	%r14
10000a298:	41 5f	popq	%r15
10000a29a:	5d	popq	%rbp
10000a29b:	e9 63 fe ff ff	jmp	0x10000a103
10000a2a0:	55	pushq	%rbp
10000a2a1:	48 89 e5	movq	%rsp, %rbp
10000a2a4:	41 56	pushq	%r14
10000a2a6:	53	pushq	%rbx
10000a2a7:	48 89 fb	movq	%rdi, %rbx
10000a2aa:	48 89 f7	movq	%rsi, %rdi
10000a2ad:	e8 a5 00 00 00	callq	0x10000a357
10000a2b2:	49 89 c6	movq	%rax, %r14
10000a2b5:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000a2b9:	48 89 c6	movq	%rax, %rsi
10000a2bc:	e8 7f 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a2c1:	48 85 c0	testq	%rax, %rax
10000a2c4:	75 73	jne	0x10000a339
10000a2c6:	48 8d 7b 20	leaq	32(%rbx), %rdi
10000a2ca:	4c 89 f6	movq	%r14, %rsi
10000a2cd:	e8 6e 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a2d2:	48 85 c0	testq	%rax, %rax
10000a2d5:	75 67	jne	0x10000a33e
10000a2d7:	48 8d 7b 38	leaq	56(%rbx), %rdi
10000a2db:	4c 89 f6	movq	%r14, %rsi
10000a2de:	e8 5d 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a2e3:	48 85 c0	testq	%rax, %rax
10000a2e6:	75 5b	jne	0x10000a343
10000a2e8:	48 8d 7b 50	leaq	80(%rbx), %rdi
10000a2ec:	4c 89 f6	movq	%r14, %rsi
10000a2ef:	e8 4c 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a2f4:	48 85 c0	testq	%rax, %rax
10000a2f7:	75 4f	jne	0x10000a348
10000a2f9:	48 8d 7b 68	leaq	104(%rbx), %rdi
10000a2fd:	4c 89 f6	movq	%r14, %rsi
10000a300:	e8 3b 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a305:	48 85 c0	testq	%rax, %rax
10000a308:	75 43	jne	0x10000a34d
10000a30a:	48 8d bb 80 00 00 00	leaq	128(%rbx), %rdi
10000a311:	4c 89 f6	movq	%r14, %rsi
10000a314:	e8 27 79 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a319:	48 85 c0	testq	%rax, %rax
10000a31c:	75 34	jne	0x10000a352
10000a31e:	48 81 c3 98 00 00 00	addq	$152, %rbx
10000a325:	ba 01 00 00 00	movl	$1, %edx
10000a32a:	48 89 df	movq	%rbx, %rdi
10000a32d:	4c 89 f6	movq	%r14, %rsi
10000a330:	5b	popq	%rbx
10000a331:	41 5e	popq	%r14
10000a333:	5d	popq	%rbp
10000a334:	e9 19 79 03 00	jmp	0x100041c52 ## symbol stub for: _os_map_str_insert
10000a339:	e8 18 4e 03 00	callq	0x10003f156
10000a33e:	e8 fe 4d 03 00	callq	0x10003f141
10000a343:	e8 e4 4d 03 00	callq	0x10003f12c
10000a348:	e8 ca 4d 03 00	callq	0x10003f117
10000a34d:	e8 b0 4d 03 00	callq	0x10003f102
10000a352:	e8 96 4d 03 00	callq	0x10003f0ed
10000a357:	55	pushq	%rbp
10000a358:	48 89 e5	movq	%rsp, %rbp
10000a35b:	41 56	pushq	%r14
10000a35d:	53	pushq	%rbx
10000a35e:	e8 7f 4c 00 00	callq	0x10000efe2
10000a363:	49 89 c6	movq	%rax, %r14
10000a366:	0f be 38	movsbl	(%rax), %edi
10000a369:	85 ff	testl	%edi, %edi
10000a36b:	74 39	je	0x10000a3a6
10000a36d:	e8 0c 74 03 00	callq	0x10004177e ## symbol stub for: ___tolower
10000a372:	41 88 06	movb	%al, (%r14)
10000a375:	4c 89 f7	movq	%r14, %rdi
10000a378:	e8 d9 7a 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000a37d:	48 83 f8 02	cmpq	$2, %rax
10000a381:	72 23	jb	0x10000a3a6
10000a383:	bb 01 00 00 00	movl	$1, %ebx
10000a388:	41 0f be 3c 1e	movsbl	(%r14,%rbx), %edi
10000a38d:	e8 ec 73 03 00	callq	0x10004177e ## symbol stub for: ___tolower
10000a392:	41 88 04 1e	movb	%al, (%r14,%rbx)
10000a396:	48 ff c3	incq	%rbx
10000a399:	4c 89 f7	movq	%r14, %rdi
10000a39c:	e8 b5 7a 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000a3a1:	48 39 c3	cmpq	%rax, %rbx
10000a3a4:	72 e2	jb	0x10000a388
10000a3a6:	4c 89 f0	movq	%r14, %rax
10000a3a9:	5b	popq	%rbx
10000a3aa:	41 5e	popq	%r14
10000a3ac:	5d	popq	%rbp
10000a3ad:	c3	retq
10000a3ae:	55	pushq	%rbp
10000a3af:	48 89 e5	movq	%rsp, %rbp
10000a3b2:	41 57	pushq	%r15
10000a3b4:	41 56	pushq	%r14
10000a3b6:	41 55	pushq	%r13
10000a3b8:	41 54	pushq	%r12
10000a3ba:	53	pushq	%rbx
10000a3bb:	48 83 ec 28	subq	$40, %rsp
10000a3bf:	4c 89 45 c8	movq	%r8, -56(%rbp)
10000a3c3:	49 89 cd	movq	%rcx, %r13
10000a3c6:	49 89 d4	movq	%rdx, %r12
10000a3c9:	49 89 f7	movq	%rsi, %r15
10000a3cc:	48 89 fb	movq	%rdi, %rbx
10000a3cf:	48 89 d7	movq	%rdx, %rdi
10000a3d2:	e8 80 ff ff ff	callq	0x10000a357
10000a3d7:	48 8d bb 98 00 00 00	leaq	152(%rbx), %rdi
10000a3de:	49 89 c6	movq	%rax, %r14
10000a3e1:	48 89 c6	movq	%rax, %rsi
10000a3e4:	e8 57 78 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a3e9:	48 85 c0	testq	%rax, %rax
10000a3ec:	74 20	je	0x10000a40e
10000a3ee:	4d 89 f4	movq	%r14, %r12
10000a3f1:	41 b7 01	movb	$1, %r15b
10000a3f4:	4c 89 e7	movq	%r12, %rdi
10000a3f7:	e8 34 76 03 00	callq	0x100041a30 ## symbol stub for: _free
10000a3fc:	44 89 f8	movl	%r15d, %eax
10000a3ff:	48 83 c4 28	addq	$40, %rsp
10000a403:	5b	popq	%rbx
10000a404:	41 5c	popq	%r12
10000a406:	41 5d	popq	%r13
10000a408:	41 5e	popq	%r14
10000a40a:	41 5f	popq	%r15
10000a40c:	5d	popq	%rbp
10000a40d:	c3	retq
10000a40e:	4c 89 65 b8	movq	%r12, -72(%rbp)
10000a412:	4c 89 7d d0	movq	%r15, -48(%rbp)
10000a416:	4c 89 ef	movq	%r13, %rdi
10000a419:	e8 a8 7c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000a41e:	48 3b 05 bb dc 04 00	cmpq	318651(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10000a425:	4c 89 6d c0	movq	%r13, -64(%rbp)
10000a429:	74 4a	je	0x10000a475
10000a42b:	48 3b 05 de dc 04 00	cmpq	318686(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10000a432:	0f 84 80 00 00 00	je	0x10000a4b8
10000a438:	48 3b 05 e9 dc 04 00	cmpq	318697(%rip), %rax ## literal pool symbol address: __xpc_type_string
10000a43f:	4c 8b 6d b8	movq	-72(%rbp), %r13
10000a443:	0f 84 b2 00 00 00	je	0x10000a4fb
10000a449:	48 3b 05 88 dc 04 00	cmpq	318600(%rip), %rax ## literal pool symbol address: __xpc_type_array
10000a450:	4d 89 f4	movq	%r14, %r12
10000a453:	41 b7 01	movb	$1, %r15b
10000a456:	0f 84 cf 00 00 00	je	0x10000a52b
10000a45c:	48 3b 05 9d dc 04 00	cmpq	318621(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000a463:	0f 84 c8 00 00 00	je	0x10000a531
10000a469:	48 8d bb 80 00 00 00	leaq	128(%rbx), %rdi
10000a470:	e9 c0 00 00 00	jmp	0x10000a535
10000a475:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000a479:	4c 89 f6	movq	%r14, %rsi
10000a47c:	e8 bf 77 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a481:	48 85 c0	testq	%rax, %rax
10000a484:	4c 8b 6d b8	movq	-72(%rbp), %r13
10000a488:	4d 89 f4	movq	%r14, %r12
10000a48b:	41 b7 01	movb	$1, %r15b
10000a48e:	0f 84 c6 00 00 00	je	0x10000a55a
10000a494:	4c 8b 70 08	movq	8(%rax), %r14
10000a498:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000a49c:	e8 f3 7a 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10000a4a1:	0f b6 d0	movzbl	%al, %edx
10000a4a4:	4c 89 f7	movq	%r14, %rdi
10000a4a7:	48 8b 75 d0	movq	-48(%rbp), %rsi
10000a4ab:	48 8b 4d c8	movq	-56(%rbp), %rcx
10000a4af:	41 ff 56 10	callq	*16(%r14)
10000a4b3:	e9 3c ff ff ff	jmp	0x10000a3f4
10000a4b8:	48 8d 7b 20	leaq	32(%rbx), %rdi
10000a4bc:	4c 89 f6	movq	%r14, %rsi
10000a4bf:	e8 7c 77 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a4c4:	48 85 c0	testq	%rax, %rax
10000a4c7:	4c 8b 6d b8	movq	-72(%rbp), %r13
10000a4cb:	4d 89 f4	movq	%r14, %r12
10000a4ce:	41 b7 01	movb	$1, %r15b
10000a4d1:	0f 84 83 00 00 00	je	0x10000a55a
10000a4d7:	4c 8b 70 08	movq	8(%rax), %r14
10000a4db:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000a4df:	e8 ee 7b 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10000a4e4:	4c 89 f7	movq	%r14, %rdi
10000a4e7:	48 8b 75 d0	movq	-48(%rbp), %rsi
10000a4eb:	48 89 c2	movq	%rax, %rdx
10000a4ee:	48 8b 4d c8	movq	-56(%rbp), %rcx
10000a4f2:	41 ff 56 10	callq	*16(%r14)
10000a4f6:	e9 f9 fe ff ff	jmp	0x10000a3f4
10000a4fb:	48 8d 7b 38	leaq	56(%rbx), %rdi
10000a4ff:	4d 89 f4	movq	%r14, %r12
10000a502:	4c 89 f6	movq	%r14, %rsi
10000a505:	e8 36 77 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a50a:	48 85 c0	testq	%rax, %rax
10000a50d:	41 b7 01	movb	$1, %r15b
10000a510:	74 48	je	0x10000a55a
10000a512:	49 89 c6	movq	%rax, %r14
10000a515:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000a519:	e8 08 7c 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10000a51e:	49 8b 7e 08	movq	8(%r14), %rdi
10000a522:	48 8b 75 d0	movq	-48(%rbp), %rsi
10000a526:	48 89 c2	movq	%rax, %rdx
10000a529:	eb 23	jmp	0x10000a54e
10000a52b:	48 8d 7b 50	leaq	80(%rbx), %rdi
10000a52f:	eb 04	jmp	0x10000a535
10000a531:	48 8d 7b 68	leaq	104(%rbx), %rdi
10000a535:	4c 89 e6	movq	%r12, %rsi
10000a538:	e8 03 77 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a53d:	48 85 c0	testq	%rax, %rax
10000a540:	74 18	je	0x10000a55a
10000a542:	48 8b 78 08	movq	8(%rax), %rdi
10000a546:	48 8b 75 d0	movq	-48(%rbp), %rsi
10000a54a:	48 8b 55 c0	movq	-64(%rbp), %rdx
10000a54e:	48 8b 4d c8	movq	-56(%rbp), %rcx
10000a552:	ff 57 10	callq	*16(%rdi)
10000a555:	e9 9a fe ff ff	jmp	0x10000a3f4
10000a55a:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000a55e:	e8 63 7b 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000a563:	49 89 c7	movq	%rax, %r15
10000a566:	bf 80 00 00 00	movl	$128, %edi
10000a56b:	e8 f1 1a 00 00	callq	0x10000c061
10000a570:	4c 8b 33	movq	(%rbx), %r14
10000a573:	4c 89 7d c8	movq	%r15, -56(%rbp)
10000a577:	4c 89 ff	movq	%r15, %rdi
10000a57a:	4d 89 ef	movq	%r13, %r15
10000a57d:	49 89 c5	movq	%rax, %r13
10000a580:	e8 a7 7b 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
10000a585:	48 8d 35 0f d0 03 00	leaq	249871(%rip), %rsi ## literal pool for: "Invalid type for %s importer (key: %s type: %s), accepted types: ["
10000a58c:	4c 89 ef	movq	%r13, %rdi
10000a58f:	4c 89 f2	movq	%r14, %rdx
10000a592:	4c 89 f9	movq	%r15, %rcx
10000a595:	49 89 c0	movq	%rax, %r8
10000a598:	31 c0	xorl	%eax, %eax
10000a59a:	e8 31 1b 00 00	callq	0x10000c0d0
10000a59f:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000a5a3:	4c 89 e6	movq	%r12, %rsi
10000a5a6:	e8 95 76 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a5ab:	49 89 c6	movq	%rax, %r14
10000a5ae:	48 85 c0	testq	%rax, %rax
10000a5b1:	74 11	je	0x10000a5c4
10000a5b3:	48 8d 35 24 d0 03 00	leaq	249892(%rip), %rsi ## literal pool for: "bool, "
10000a5ba:	4c 89 ef	movq	%r13, %rdi
10000a5bd:	31 c0	xorl	%eax, %eax
10000a5bf:	e8 0c 1b 00 00	callq	0x10000c0d0
10000a5c4:	4d 85 f6	testq	%r14, %r14
10000a5c7:	41 0f 95 c6	setne	%r14b
10000a5cb:	48 8d 7b 20	leaq	32(%rbx), %rdi
10000a5cf:	4c 89 e6	movq	%r12, %rsi
10000a5d2:	e8 69 76 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a5d7:	48 85 c0	testq	%rax, %rax
10000a5da:	74 14	je	0x10000a5f0
10000a5dc:	48 8d 35 02 d0 03 00	leaq	249858(%rip), %rsi ## literal pool for: "integer, "
10000a5e3:	4c 89 ef	movq	%r13, %rdi
10000a5e6:	31 c0	xorl	%eax, %eax
10000a5e8:	e8 e3 1a 00 00	callq	0x10000c0d0
10000a5ed:	41 b6 01	movb	$1, %r14b
10000a5f0:	48 8d 7b 38	leaq	56(%rbx), %rdi
10000a5f4:	4c 89 e6	movq	%r12, %rsi
10000a5f7:	e8 44 76 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a5fc:	48 85 c0	testq	%rax, %rax
10000a5ff:	74 14	je	0x10000a615
10000a601:	48 8d 35 e7 cf 03 00	leaq	249831(%rip), %rsi ## literal pool for: "string, "
10000a608:	4c 89 ef	movq	%r13, %rdi
10000a60b:	31 c0	xorl	%eax, %eax
10000a60d:	e8 be 1a 00 00	callq	0x10000c0d0
10000a612:	41 b6 01	movb	$1, %r14b
10000a615:	48 8d 7b 50	leaq	80(%rbx), %rdi
10000a619:	4c 89 e6	movq	%r12, %rsi
10000a61c:	e8 1f 76 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a621:	48 85 c0	testq	%rax, %rax
10000a624:	74 14	je	0x10000a63a
10000a626:	48 8d 35 cb cf 03 00	leaq	249803(%rip), %rsi ## literal pool for: "array, "
10000a62d:	4c 89 ef	movq	%r13, %rdi
10000a630:	31 c0	xorl	%eax, %eax
10000a632:	e8 99 1a 00 00	callq	0x10000c0d0
10000a637:	41 b6 01	movb	$1, %r14b
10000a63a:	48 8d 7b 68	leaq	104(%rbx), %rdi
10000a63e:	4c 89 e6	movq	%r12, %rsi
10000a641:	e8 fa 75 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a646:	48 85 c0	testq	%rax, %rax
10000a649:	74 27	je	0x10000a672
10000a64b:	48 8d 35 ae cf 03 00	leaq	249774(%rip), %rsi ## literal pool for: "dictionary, "
10000a652:	4c 89 ef	movq	%r13, %rdi
10000a655:	31 c0	xorl	%eax, %eax
10000a657:	e8 74 1a 00 00	callq	0x10000c0d0
10000a65c:	48 83 eb 80	subq	$-128, %rbx
10000a660:	48 89 df	movq	%rbx, %rdi
10000a663:	4c 89 e6	movq	%r12, %rsi
10000a666:	e8 d5 75 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a66b:	48 85 c0	testq	%rax, %rax
10000a66e:	75 16	jne	0x10000a686
10000a670:	eb 25	jmp	0x10000a697
10000a672:	48 8d bb 80 00 00 00	leaq	128(%rbx), %rdi
10000a679:	4c 89 e6	movq	%r12, %rsi
10000a67c:	e8 bf 75 03 00	callq	0x100041c40 ## symbol stub for: _os_map_str_find
10000a681:	48 85 c0	testq	%rax, %rax
10000a684:	74 5a	je	0x10000a6e0
10000a686:	48 8d 35 80 cf 03 00	leaq	249728(%rip), %rsi ## literal pool for: "object, "
10000a68d:	4c 89 ef	movq	%r13, %rdi
10000a690:	31 c0	xorl	%eax, %eax
10000a692:	e8 39 1a 00 00	callq	0x10000c0d0
10000a697:	be 02 00 00 00	movl	$2, %esi
10000a69c:	4c 89 ef	movq	%r13, %rdi
10000a69f:	e8 ac 1b 00 00	callq	0x10000c250
10000a6a4:	48 8d 35 86 8f 03 00	leaq	233350(%rip), %rsi ## literal pool for: "]"
10000a6ab:	4c 89 ef	movq	%r13, %rdi
10000a6ae:	31 c0	xorl	%eax, %eax
10000a6b0:	e8 1b 1a 00 00	callq	0x10000c0d0
10000a6b5:	49 8b 4d 00	movq	(%r13), %rcx
10000a6b9:	48 8d 15 56 cf 03 00	leaq	249686(%rip), %rdx ## literal pool for: "%s"
10000a6c0:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000a6c4:	be 03 00 00 00	movl	$3, %esi
10000a6c9:	31 c0	xorl	%eax, %eax
10000a6cb:	e8 ea b8 00 00	callq	0x100015fba
10000a6d0:	4c 89 ef	movq	%r13, %rdi
10000a6d3:	e8 d9 19 00 00	callq	0x10000c0b1
10000a6d8:	45 31 ff	xorl	%r15d, %r15d
10000a6db:	e9 14 fd ff ff	jmp	0x10000a3f4
10000a6e0:	45 84 f6	testb	%r14b, %r14b
10000a6e3:	75 b2	jne	0x10000a697
10000a6e5:	48 8b 1b	movq	(%rbx), %rbx
10000a6e8:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000a6ec:	e8 3b 7a 03 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
10000a6f1:	48 8d 15 21 cf 03 00	leaq	249633(%rip), %rdx ## literal pool for: "Unknown key for %s importer (key: %s type: %s)"
10000a6f8:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000a6fc:	be 03 00 00 00	movl	$3, %esi
10000a701:	48 89 d9	movq	%rbx, %rcx
10000a704:	4d 89 f8	movq	%r15, %r8
10000a707:	49 89 c1	movq	%rax, %r9
10000a70a:	31 c0	xorl	%eax, %eax
10000a70c:	e8 a9 b8 00 00	callq	0x100015fba
10000a711:	eb bd	jmp	0x10000a6d0
10000a713:	48 85 ff	testq	%rdi, %rdi
10000a716:	74 06	je	0x10000a71e
10000a718:	48 89 f8	movq	%rdi, %rax
10000a71b:	31 d2	xorl	%edx, %edx
10000a71d:	c3	retq
10000a71e:	55	pushq	%rbp
10000a71f:	48 89 e5	movq	%rsp, %rbp
10000a722:	e8 44 4a 03 00	callq	0x10003f16b
10000a727:	85 ff	testl	%edi, %edi
10000a729:	74 05	je	0x10000a730
10000a72b:	31 c0	xorl	%eax, %eax
10000a72d:	89 fa	movl	%edi, %edx
10000a72f:	c3	retq
10000a730:	55	pushq	%rbp
10000a731:	48 89 e5	movq	%rsp, %rbp
10000a734:	e8 44 4a 03 00	callq	0x10003f17d
10000a739:	55	pushq	%rbp
10000a73a:	48 89 e5	movq	%rsp, %rbp
10000a73d:	41 57	pushq	%r15
10000a73f:	41 56	pushq	%r14
10000a741:	41 54	pushq	%r12
10000a743:	53	pushq	%rbx
10000a744:	49 89 f6	movq	%rsi, %r14
10000a747:	49 89 ff	movq	%rdi, %r15
10000a74a:	48 8d 35 06 bf 03 00	leaq	245510(%rip), %rsi ## literal pool for: "ActiveSoftMemoryLimit"
10000a751:	48 8d 15 e9 be 03 00	leaq	245481(%rip), %rdx ## literal pool for: "ActiveHardMemoryLimit"
10000a758:	4c 89 f1	movq	%r14, %rcx
10000a75b:	e8 0b 0a 00 00	callq	0x10000b16b
10000a760:	48 8d 35 1e bf 03 00	leaq	245534(%rip), %rsi ## literal pool for: "InactiveSoftMemoryLimit"
10000a767:	48 8d 15 ff be 03 00	leaq	245503(%rip), %rdx ## literal pool for: "InactiveHardMemoryLimit"
10000a76e:	4c 89 ff	movq	%r15, %rdi
10000a771:	4c 89 f1	movq	%r14, %rcx
10000a774:	e8 f2 09 00 00	callq	0x10000b16b
10000a779:	48 8d 35 1b b7 03 00	leaq	243483(%rip), %rsi ## literal pool for: "CPUMonitorInterval"
10000a780:	4c 89 ff	movq	%r15, %rdi
10000a783:	e8 c6 78 03 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
10000a788:	48 89 c3	movq	%rax, %rbx
10000a78b:	48 8d 35 f4 b6 03 00	leaq	243444(%rip), %rsi ## literal pool for: "CPUMonitorPercentage"
10000a792:	4c 89 ff	movq	%r15, %rdi
10000a795:	e8 b4 78 03 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
10000a79a:	49 89 c4	movq	%rax, %r12
10000a79d:	48 81 fb 00 01 00 00	cmpq	$256, %rbx
10000a7a4:	72 29	jb	0x10000a7cf
10000a7a6:	48 8d 15 1b cf 03 00	leaq	249627(%rip), %rdx ## literal pool for: "CPUMonitorInterval is out of range, ignoring"
10000a7ad:	31 db	xorl	%ebx, %ebx
10000a7af:	4c 89 f7	movq	%r14, %rdi
10000a7b2:	be 03 00 00 00	movl	$3, %esi
10000a7b7:	31 c0	xorl	%eax, %eax
10000a7b9:	e8 87 3e 00 00	callq	0x10000e645
10000a7be:	48 8d 35 d6 b6 03 00	leaq	243414(%rip), %rsi ## literal pool for: "CPUMonitorInterval"
10000a7c5:	4c 89 ff	movq	%r15, %rdi
10000a7c8:	31 d2	xorl	%edx, %edx
10000a7ca:	e8 df 78 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000a7cf:	49 83 fc 65	cmpq	$101, %r12
10000a7d3:	0f 82 86 00 00 00	jb	0x10000a85f
10000a7d9:	48 8d 15 15 cf 03 00	leaq	249621(%rip), %rdx ## literal pool for: "CPUMonitorPercentage is out of range, ignoring"
10000a7e0:	45 31 e4	xorl	%r12d, %r12d
10000a7e3:	4c 89 f7	movq	%r14, %rdi
10000a7e6:	be 03 00 00 00	movl	$3, %esi
10000a7eb:	31 c0	xorl	%eax, %eax
10000a7ed:	e8 53 3e 00 00	callq	0x10000e645
10000a7f2:	48 8d 35 8d b6 03 00	leaq	243341(%rip), %rsi ## literal pool for: "CPUMonitorPercentage"
10000a7f9:	4c 89 ff	movq	%r15, %rdi
10000a7fc:	31 d2	xorl	%edx, %edx
10000a7fe:	e8 ab 78 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000a803:	48 85 db	testq	%rbx, %rbx
10000a806:	0f 94 c0	sete	%al
10000a809:	4d 85 e4	testq	%r12, %r12
10000a80c:	75 04	jne	0x10000a812
10000a80e:	84 c0	testb	%al, %al
10000a810:	75 5e	jne	0x10000a870
10000a812:	4d 85 e4	testq	%r12, %r12
10000a815:	0f 94 c1	sete	%cl
10000a818:	08 c1	orb	%al, %cl
10000a81a:	80 f9 01	cmpb	$1, %cl
10000a81d:	75 51	jne	0x10000a870
10000a81f:	48 8d 15 fe ce 03 00	leaq	249598(%rip), %rdx ## literal pool for: "incomplete CPUMonitor, ignoring"
10000a826:	4c 89 f7	movq	%r14, %rdi
10000a829:	be 03 00 00 00	movl	$3, %esi
10000a82e:	31 c0	xorl	%eax, %eax
10000a830:	e8 10 3e 00 00	callq	0x10000e645
10000a835:	48 8d 35 5f b6 03 00	leaq	243295(%rip), %rsi ## literal pool for: "CPUMonitorInterval"
10000a83c:	4c 89 ff	movq	%r15, %rdi
10000a83f:	31 d2	xorl	%edx, %edx
10000a841:	e8 68 78 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000a846:	48 8d 35 39 b6 03 00	leaq	243257(%rip), %rsi ## literal pool for: "CPUMonitorPercentage"
10000a84d:	4c 89 ff	movq	%r15, %rdi
10000a850:	31 d2	xorl	%edx, %edx
10000a852:	5b	popq	%rbx
10000a853:	41 5c	popq	%r12
10000a855:	41 5e	popq	%r14
10000a857:	41 5f	popq	%r15
10000a859:	5d	popq	%rbp
10000a85a:	e9 4f 78 03 00	jmp	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000a85f:	48 85 db	testq	%rbx, %rbx
10000a862:	0f 94 c0	sete	%al
10000a865:	49 83 fc 64	cmpq	$100, %r12
10000a869:	75 9e	jne	0x10000a809
10000a86b:	48 85 db	testq	%rbx, %rbx
10000a86e:	75 99	jne	0x10000a809
10000a870:	5b	popq	%rbx
10000a871:	41 5c	popq	%r12
10000a873:	41 5e	popq	%r14
10000a875:	41 5f	popq	%r15
10000a877:	5d	popq	%rbp
10000a878:	c3	retq
10000a879:	55	pushq	%rbp
10000a87a:	48 89 e5	movq	%rsp, %rbp
10000a87d:	48 83 ec 30	subq	$48, %rsp
10000a881:	48 89 f0	movq	%rsi, %rax
10000a884:	48 8b 0d 8d d7 04 00	movq	317325(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000a88b:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000a88f:	48 89 0e	movq	%rcx, (%rsi)
10000a892:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000a89a:	48 8d 0d 25 00 00 00	leaq	37(%rip), %rcx
10000a8a1:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000a8a5:	48 8d 0d 94 f5 04 00	leaq	325012(%rip), %rcx
10000a8ac:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000a8b0:	48 89 7e 20	movq	%rdi, 32(%rsi)
10000a8b4:	48 89 56 28	movq	%rdx, 40(%rsi)
10000a8b8:	48 89 c7	movq	%rax, %rdi
10000a8bb:	e8 40 77 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
10000a8c0:	48 83 c4 30	addq	$48, %rsp
10000a8c4:	5d	popq	%rbp
10000a8c5:	c3	retq
10000a8c6:	55	pushq	%rbp
10000a8c7:	48 89 e5	movq	%rsp, %rbp
10000a8ca:	41 57	pushq	%r15
10000a8cc:	41 56	pushq	%r14
10000a8ce:	41 54	pushq	%r12
10000a8d0:	53	pushq	%rbx
10000a8d1:	49 89 d6	movq	%rdx, %r14
10000a8d4:	49 89 f7	movq	%rsi, %r15
10000a8d7:	48 8b 5f 20	movq	32(%rdi), %rbx
10000a8db:	4c 8b 67 28	movq	40(%rdi), %r12
10000a8df:	48 8b 3d 1a 84 05 00	movq	361498(%rip), %rdi
10000a8e6:	48 85 ff	testq	%rdi, %rdi
10000a8e9:	0f 85 31 02 00 00	jne	0x10000ab20
10000a8ef:	48 8d 3d 78 c6 03 00	leaq	247416(%rip), %rdi ## literal pool for: "JetsamProperties"
10000a8f6:	e8 2b f7 ff ff	callq	0x10000a026
10000a8fb:	48 89 05 fe 83 05 00	movq	%rax, 361470(%rip)
10000a902:	48 8d 35 34 98 03 00	leaq	235572(%rip), %rsi ## literal pool for: "EnableTransactions"
10000a909:	48 8d 15 70 f5 04 00	leaq	324976(%rip), %rdx
10000a910:	48 89 c7	movq	%rax, %rdi
10000a913:	e8 ae f7 ff ff	callq	0x10000a0c6
10000a918:	48 8b 3d e1 83 05 00	movq	361441(%rip), %rdi
10000a91f:	48 8d 35 03 98 03 00	leaq	235523(%rip), %rsi ## literal pool for: "EnablePressuredExit"
10000a926:	48 8d 15 93 f5 04 00	leaq	325011(%rip), %rdx
10000a92d:	e8 94 f7 ff ff	callq	0x10000a0c6
10000a932:	48 8b 3d c7 83 05 00	movq	361415(%rip), %rdi
10000a939:	48 8d 35 c5 ad 03 00	leaq	241093(%rip), %rsi ## literal pool for: "ExecuteAllowed"
10000a940:	e8 5b f9 ff ff	callq	0x10000a2a0
10000a945:	48 8b 3d b4 83 05 00	movq	361396(%rip), %rdi
10000a94c:	48 8d 35 f1 cd 03 00	leaq	249329(%rip), %rsi ## literal pool for: "EnableIdleHysteresis"
10000a953:	48 8d 15 a6 f5 04 00	leaq	325030(%rip), %rdx
10000a95a:	e8 67 f7 ff ff	callq	0x10000a0c6
10000a95f:	48 8b 3d 9a 83 05 00	movq	361370(%rip), %rdi
10000a966:	48 8d 35 ec cd 03 00	leaq	249324(%rip), %rsi ## literal pool for: "MallocSpaceEfficient"
10000a96d:	48 8d 15 cc f5 04 00	leaq	325068(%rip), %rdx
10000a974:	e8 4d f7 ff ff	callq	0x10000a0c6
10000a979:	48 8b 3d 80 83 05 00	movq	361344(%rip), %rdi
10000a980:	48 8d 35 e9 cd 03 00	leaq	249321(%rip), %rsi ## literal pool for: "MallocNanoZone"
10000a987:	48 8d 15 f2 f5 04 00	leaq	325106(%rip), %rdx
10000a98e:	e8 33 f7 ff ff	callq	0x10000a0c6
10000a993:	48 8b 3d 66 83 05 00	movq	361318(%rip), %rdi
10000a99a:	48 8d 35 b6 bc 03 00	leaq	244918(%rip), %rsi ## literal pool for: "ActiveSoftMemoryLimit"
10000a9a1:	48 8d 15 18 f6 04 00	leaq	325144(%rip), %rdx
10000a9a8:	e8 bf f7 ff ff	callq	0x10000a16c
10000a9ad:	48 8b 3d 4c 83 05 00	movq	361292(%rip), %rdi
10000a9b4:	48 8d 35 86 bc 03 00	leaq	244870(%rip), %rsi ## literal pool for: "ActiveHardMemoryLimit"
10000a9bb:	48 8d 15 3e f6 04 00	leaq	325182(%rip), %rdx
10000a9c2:	e8 a5 f7 ff ff	callq	0x10000a16c
10000a9c7:	48 8b 3d 32 83 05 00	movq	361266(%rip), %rdi
10000a9ce:	48 8d 35 aa cd 03 00	leaq	249258(%rip), %rsi ## literal pool for: "AddressLimit"
10000a9d5:	48 8d 15 64 f6 04 00	leaq	325220(%rip), %rdx
10000a9dc:	e8 8b f7 ff ff	callq	0x10000a16c
10000a9e1:	48 8b 3d 18 83 05 00	movq	361240(%rip), %rdi
10000a9e8:	48 8d 35 ac b4 03 00	leaq	242860(%rip), %rsi ## literal pool for: "CPUMonitorInterval"
10000a9ef:	48 8d 15 8a f6 04 00	leaq	325258(%rip), %rdx
10000a9f6:	e8 71 f7 ff ff	callq	0x10000a16c
10000a9fb:	48 8b 3d fe 82 05 00	movq	361214(%rip), %rdi
10000aa02:	48 8d 35 7d b4 03 00	leaq	242813(%rip), %rsi ## literal pool for: "CPUMonitorPercentage"
10000aa09:	48 8d 15 b0 f6 04 00	leaq	325296(%rip), %rdx
10000aa10:	e8 57 f7 ff ff	callq	0x10000a16c
10000aa15:	48 8b 3d e4 82 05 00	movq	361188(%rip), %rdi
10000aa1c:	48 8d 35 69 cd 03 00	leaq	249193(%rip), %rsi ## literal pool for: "SoftFileDescriptorLimit"
10000aa23:	48 8d 15 d6 f6 04 00	leaq	325334(%rip), %rdx
10000aa2a:	e8 3d f7 ff ff	callq	0x10000a16c
10000aa2f:	48 8b 3d ca 82 05 00	movq	361162(%rip), %rdi
10000aa36:	48 8d 35 67 cd 03 00	leaq	249191(%rip), %rsi ## literal pool for: "HardFileDescriptorLimit"
10000aa3d:	48 8d 15 fc f6 04 00	leaq	325372(%rip), %rdx
10000aa44:	e8 23 f7 ff ff	callq	0x10000a16c
10000aa49:	48 8b 3d b0 82 05 00	movq	361136(%rip), %rdi
10000aa50:	48 8d 35 2e bc 03 00	leaq	244782(%rip), %rsi ## literal pool for: "InactiveSoftMemoryLimit"
10000aa57:	48 8d 15 22 f7 04 00	leaq	325410(%rip), %rdx
10000aa5e:	e8 09 f7 ff ff	callq	0x10000a16c
10000aa63:	48 8b 3d 96 82 05 00	movq	361110(%rip), %rdi
10000aa6a:	48 8d 35 fc bb 03 00	leaq	244732(%rip), %rsi ## literal pool for: "InactiveHardMemoryLimit"
10000aa71:	48 8d 15 48 f7 04 00	leaq	325448(%rip), %rdx
10000aa78:	e8 ef f6 ff ff	callq	0x10000a16c
10000aa7d:	48 8b 3d 7c 82 05 00	movq	361084(%rip), %rdi
10000aa84:	48 8d 35 23 b4 03 00	leaq	242723(%rip), %rsi ## literal pool for: "JetsamPriority"
10000aa8b:	48 8d 15 6e f7 04 00	leaq	325486(%rip), %rdx
10000aa92:	e8 d5 f6 ff ff	callq	0x10000a16c
10000aa97:	48 8b 3d 62 82 05 00	movq	361058(%rip), %rdi
10000aa9e:	48 8d 35 17 cd 03 00	leaq	249111(%rip), %rsi ## literal pool for: "LogicalWritesLimit"
10000aaa5:	48 8d 15 94 f7 04 00	leaq	325524(%rip), %rdx
10000aaac:	e8 bb f6 ff ff	callq	0x10000a16c
10000aab1:	48 8b 3d 48 82 05 00	movq	361032(%rip), %rdi
10000aab8:	48 8d 35 10 cd 03 00	leaq	249104(%rip), %rsi ## literal pool for: "SoftPortLimit"
10000aabf:	48 8d 15 ba f7 04 00	leaq	325562(%rip), %rdx
10000aac6:	e8 a1 f6 ff ff	callq	0x10000a16c
10000aacb:	48 8b 3d 2e 82 05 00	movq	361006(%rip), %rdi
10000aad2:	48 8d 35 04 cd 03 00	leaq	249092(%rip), %rsi ## literal pool for: "HardPortLimit"
10000aad9:	48 8d 15 e0 f7 04 00	leaq	325600(%rip), %rdx
10000aae0:	e8 87 f6 ff ff	callq	0x10000a16c
10000aae5:	48 8b 3d 14 82 05 00	movq	360980(%rip), %rdi
10000aaec:	48 8d 35 f8 cc 03 00	leaq	249080(%rip), %rsi ## literal pool for: "ThreadLimit"
10000aaf3:	48 8d 15 06 f8 04 00	leaq	325638(%rip), %rdx
10000aafa:	e8 6d f6 ff ff	callq	0x10000a16c
10000aaff:	48 8b 3d fa 81 05 00	movq	360954(%rip), %rdi
10000ab06:	48 8d 35 ea cc 03 00	leaq	249066(%rip), %rsi ## literal pool for: "EnergyEfficiencyMode"
10000ab0d:	48 8d 15 2c f8 04 00	leaq	325676(%rip), %rdx
10000ab14:	e8 90 f6 ff ff	callq	0x10000a1a9
10000ab19:	48 8b 3d e0 81 05 00	movq	360928(%rip), %rdi
10000ab20:	48 89 de	movq	%rbx, %rsi
10000ab23:	4c 89 fa	movq	%r15, %rdx
10000ab26:	4c 89 f1	movq	%r14, %rcx
10000ab29:	4d 89 e0	movq	%r12, %r8
10000ab2c:	e8 7d f8 ff ff	callq	0x10000a3ae
10000ab31:	b0 01	movb	$1, %al
10000ab33:	5b	popq	%rbx
10000ab34:	41 5c	popq	%r12
10000ab36:	41 5e	popq	%r14
10000ab38:	41 5f	popq	%r15
10000ab3a:	5d	popq	%rbp
10000ab3b:	c3	retq
10000ab3c:	55	pushq	%rbp
10000ab3d:	48 89 e5	movq	%rsp, %rbp
10000ab40:	5d	popq	%rbp
10000ab41:	c3	retq
10000ab42:	55	pushq	%rbp
10000ab43:	48 89 e5	movq	%rsp, %rbp
10000ab46:	31 c0	xorl	%eax, %eax
10000ab48:	48 89 05 71 81 05 00	movq	%rax, 360817(%rip)
10000ab4f:	48 89 05 72 81 05 00	movq	%rax, 360818(%rip)
10000ab56:	48 89 05 73 81 05 00	movq	%rax, 360819(%rip)
10000ab5d:	48 89 05 74 81 05 00	movq	%rax, 360820(%rip)
10000ab64:	48 89 05 75 81 05 00	movq	%rax, 360821(%rip)
10000ab6b:	48 89 05 76 81 05 00	movq	%rax, 360822(%rip)
10000ab72:	48 89 05 77 81 05 00	movq	%rax, 360823(%rip)
10000ab79:	48 89 05 78 81 05 00	movq	%rax, 360824(%rip)
10000ab80:	5d	popq	%rbp
10000ab81:	c3	retq
10000ab82:	55	pushq	%rbp
10000ab83:	48 89 e5	movq	%rsp, %rbp
10000ab86:	41 57	pushq	%r15
10000ab88:	41 56	pushq	%r14
10000ab8a:	53	pushq	%rbx
10000ab8b:	50	pushq	%rax
10000ab8c:	48 8d 1d 2d 7c 05 00	leaq	359469(%rip), %rbx
10000ab93:	48 83 3b 00	cmpq	$0, (%rbx)
10000ab97:	0f 84 10 02 00 00	je	0x10000adad
10000ab9d:	4c 8d 3d d0 cc 03 00	leaq	249040(%rip), %r15 ## literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties.NonUI.plist"
10000aba4:	4c 89 ff	movq	%r15, %rdi
10000aba7:	e8 3e 7c 02 00	callq	0x1000327ea
10000abac:	49 89 c6	movq	%rax, %r14
10000abaf:	48 8b 13	movq	(%rbx), %rdx
10000abb2:	48 8d 05 0f 7c 05 00	leaq	359439(%rip), %rax
10000abb9:	48 8b 08	movq	(%rax), %rcx
10000abbc:	48 8d 3d f6 cc 03 00	leaq	249078(%rip), %rdi ## literal pool for: "%s.%s%s.plist"
10000abc3:	48 8d 35 fd cc 03 00	leaq	249085(%rip), %rsi ## literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties"
10000abca:	31 c0	xorl	%eax, %eax
10000abcc:	e8 64 45 00 00	callq	0x10000f135
10000abd1:	48 89 c3	movq	%rax, %rbx
10000abd4:	48 89 c7	movq	%rax, %rdi
10000abd7:	e8 0e 7c 02 00	callq	0x1000327ea
10000abdc:	48 85 c0	testq	%rax, %rax
10000abdf:	74 17	je	0x10000abf8
10000abe1:	49 89 df	movq	%rbx, %r15
10000abe4:	4d 85 f6	testq	%r14, %r14
10000abe7:	49 89 c6	movq	%rax, %r14
10000abea:	74 1d	je	0x10000ac09
10000abec:	48 8d 3d 0d cd 03 00	leaq	249101(%rip), %rdi ## literal pool for: "both NonUI & target-specific JetsamProperties plists are present. This is an error in the OS build configuration."
10000abf3:	e9 d7 01 00 00	jmp	0x10000adcf
10000abf8:	48 89 df	movq	%rbx, %rdi
10000abfb:	e8 30 6e 03 00	callq	0x100041a30 ## symbol stub for: _free
10000ac00:	4d 85 f6	testq	%r14, %r14
10000ac03:	0f 84 99 01 00 00	je	0x10000ada2
10000ac09:	4c 89 3d 08 7b 05 00	movq	%r15, 359176(%rip)
10000ac10:	4c 89 f7	movq	%r14, %rdi
10000ac13:	e8 ae 74 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000ac18:	48 3b 05 e1 d4 04 00	cmpq	316641(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000ac1f:	0f 85 91 01 00 00	jne	0x10000adb6
10000ac25:	48 83 3d 93 80 05 00 00	cmpq	$0, 360595(%rip)
10000ac2d:	0f 85 8c 01 00 00	jne	0x10000adbf
10000ac33:	48 83 3d 8d 80 05 00 00	cmpq	$0, 360589(%rip)
10000ac3b:	0f 85 7e 01 00 00	jne	0x10000adbf
10000ac41:	48 83 3d 87 80 05 00 00	cmpq	$0, 360583(%rip)
10000ac49:	0f 85 70 01 00 00	jne	0x10000adbf
10000ac4f:	48 83 3d 89 80 05 00 00	cmpq	$0, 360585(%rip)
10000ac57:	0f 85 62 01 00 00	jne	0x10000adbf
10000ac5d:	48 8d 35 37 cd 03 00	leaq	249143(%rip), %rsi ## literal pool for: "Version4"
10000ac64:	4c 89 f7	movq	%r14, %rdi
10000ac67:	e8 dc 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ac6c:	48 85 c0	testq	%rax, %rax
10000ac6f:	0f 84 53 01 00 00	je	0x10000adc8
10000ac75:	48 89 c3	movq	%rax, %rbx
10000ac78:	48 8d 35 67 cd 03 00	leaq	249191(%rip), %rsi ## literal pool for: "Daemon"
10000ac7f:	48 89 c7	movq	%rax, %rdi
10000ac82:	e8 c1 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ac87:	48 89 05 32 80 05 00	movq	%rax, 360498(%rip)
10000ac8e:	48 85 c0	testq	%rax, %rax
10000ac91:	74 08	je	0x10000ac9b
10000ac93:	48 89 c7	movq	%rax, %rdi
10000ac96:	e8 67 74 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ac9b:	48 8d 35 e6 8b 03 00	leaq	232422(%rip), %rsi ## literal pool for: "App"
10000aca2:	48 89 df	movq	%rbx, %rdi
10000aca5:	e8 9e 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000acaa:	48 89 05 17 80 05 00	movq	%rax, 360471(%rip)
10000acb1:	48 85 c0	testq	%rax, %rax
10000acb4:	74 08	je	0x10000acbe
10000acb6:	48 89 c7	movq	%rax, %rdi
10000acb9:	e8 44 74 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000acbe:	48 8d 35 28 cd 03 00	leaq	249128(%rip), %rsi ## literal pool for: "iOSAppOnMac"
10000acc5:	48 89 df	movq	%rbx, %rdi
10000acc8:	e8 7b 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000accd:	48 89 05 fc 7f 05 00	movq	%rax, 360444(%rip)
10000acd4:	48 85 c0	testq	%rax, %rax
10000acd7:	74 08	je	0x10000ace1
10000acd9:	48 89 c7	movq	%rax, %rdi
10000acdc:	e8 21 74 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ace1:	48 8d 35 11 cd 03 00	leaq	249105(%rip), %rsi ## literal pool for: "DriverKit"
10000ace8:	48 89 df	movq	%rbx, %rdi
10000aceb:	e8 58 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000acf0:	48 89 05 e1 7f 05 00	movq	%rax, 360417(%rip)
10000acf7:	48 85 c0	testq	%rax, %rax
10000acfa:	74 08	je	0x10000ad04
10000acfc:	48 89 c7	movq	%rax, %rdi
10000acff:	e8 fe 73 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ad04:	48 8d 35 f8 cc 03 00	leaq	249080(%rip), %rsi ## literal pool for: "Extension"
10000ad0b:	48 89 df	movq	%rbx, %rdi
10000ad0e:	e8 35 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ad13:	48 89 05 c6 7f 05 00	movq	%rax, 360390(%rip)
10000ad1a:	48 85 c0	testq	%rax, %rax
10000ad1d:	74 08	je	0x10000ad27
10000ad1f:	48 89 c7	movq	%rax, %rdi
10000ad22:	e8 db 73 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ad27:	48 8d 35 1d 93 03 00	leaq	234269(%rip), %rsi ## literal pool for: "XPCService"
10000ad2e:	48 89 df	movq	%rbx, %rdi
10000ad31:	e8 12 73 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ad36:	48 89 05 ab 7f 05 00	movq	%rax, 360363(%rip)
10000ad3d:	48 85 c0	testq	%rax, %rax
10000ad40:	74 08	je	0x10000ad4a
10000ad42:	48 89 c7	movq	%rax, %rdi
10000ad45:	e8 b8 73 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ad4a:	48 8d 35 bc cc 03 00	leaq	249020(%rip), %rsi ## literal pool for: "SystemXPCService"
10000ad51:	48 89 df	movq	%rbx, %rdi
10000ad54:	e8 ef 72 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ad59:	48 89 05 90 7f 05 00	movq	%rax, 360336(%rip)
10000ad60:	48 85 c0	testq	%rax, %rax
10000ad63:	74 08	je	0x10000ad6d
10000ad65:	48 89 c7	movq	%rax, %rdi
10000ad68:	e8 95 73 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ad6d:	48 8d 35 0a 8b 03 00	leaq	232202(%rip), %rsi ## literal pool for: "SystemApp"
10000ad74:	48 89 df	movq	%rbx, %rdi
10000ad77:	e8 cc 72 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000ad7c:	48 89 05 75 7f 05 00	movq	%rax, 360309(%rip)
10000ad83:	48 85 c0	testq	%rax, %rax
10000ad86:	74 08	je	0x10000ad90
10000ad88:	48 89 c7	movq	%rax, %rdi
10000ad8b:	e8 72 73 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10000ad90:	4c 89 f7	movq	%r14, %rdi
10000ad93:	48 83 c4 08	addq	$8, %rsp
10000ad97:	5b	popq	%rbx
10000ad98:	41 5e	popq	%r14
10000ad9a:	41 5f	popq	%r15
10000ad9c:	5d	popq	%rbp
10000ad9d:	e9 5a 73 03 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
10000ada2:	48 83 c4 08	addq	$8, %rsp
10000ada6:	5b	popq	%rbx
10000ada7:	41 5e	popq	%r14
10000ada9:	41 5f	popq	%r15
10000adab:	5d	popq	%rbp
10000adac:	c3	retq
10000adad:	48 8d 3d 9f ca 03 00	leaq	248479(%rip), %rdi ## literal pool for: "sysctl hw.targettype was not set"
10000adb4:	eb 19	jmp	0x10000adcf
10000adb6:	48 8d 3d 8b c8 03 00	leaq	247947(%rip), %rdi ## literal pool for: "JetsamProperties plist is malformed"
10000adbd:	eb 10	jmp	0x10000adcf
10000adbf:	48 8d 3d ac cb 03 00	leaq	248748(%rip), %rdi ## literal pool for: "found multiple jetsam properties plists!"
10000adc6:	eb 07	jmp	0x10000adcf
10000adc8:	48 8d 3d d5 cb 03 00	leaq	248789(%rip), %rdi ## literal pool for: "JetsamProperties plist is malformed - missing Version4 dictionary"
10000adcf:	31 c0	xorl	%eax, %eax
10000add1:	e8 3c 96 02 00	callq	0x100034412
10000add6:	55	pushq	%rbp
10000add7:	48 89 e5	movq	%rsp, %rbp
10000adda:	41 57	pushq	%r15
10000addc:	41 56	pushq	%r14
10000adde:	41 54	pushq	%r12
10000ade0:	53	pushq	%rbx
10000ade1:	49 89 fc	movq	%rdi, %r12
10000ade4:	e8 d0 06 00 00	callq	0x10000b4b9
10000ade9:	48 89 c3	movq	%rax, %rbx
10000adec:	48 8d 35 aa 8a 03 00	leaq	232106(%rip), %rsi ## literal pool for: "Driver"
10000adf3:	48 89 c7	movq	%rax, %rdi
10000adf6:	e8 38 45 00 00	callq	0x10000f333
10000adfb:	84 c0	testb	%al, %al
10000adfd:	74 09	je	0x10000ae08
10000adff:	4c 8b 35 d2 7e 05 00	movq	360146(%rip), %r14
10000ae06:	eb 5f	jmp	0x10000ae67
10000ae08:	48 8d 35 6f 8a 03 00	leaq	232047(%rip), %rsi ## literal pool for: "SystemApp"
10000ae0f:	48 89 df	movq	%rbx, %rdi
10000ae12:	e8 1c 45 00 00	callq	0x10000f333
10000ae17:	84 c0	testb	%al, %al
10000ae19:	74 09	je	0x10000ae24
10000ae1b:	4c 8b 35 d6 7e 05 00	movq	360150(%rip), %r14
10000ae22:	eb 43	jmp	0x10000ae67
10000ae24:	48 8d 35 5d 8a 03 00	leaq	232029(%rip), %rsi ## literal pool for: "App"
10000ae2b:	48 89 df	movq	%rbx, %rdi
10000ae2e:	e8 00 45 00 00	callq	0x10000f333
10000ae33:	84 c0	testb	%al, %al
10000ae35:	74 29	je	0x10000ae60
10000ae37:	48 8d 35 02 96 03 00	leaq	235010(%rip), %rsi ## literal pool for: "Platform"
10000ae3e:	4c 89 e7	movq	%r12, %rdi
10000ae41:	e8 08 72 03 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
10000ae46:	83 f8 02	cmpl	$2, %eax
10000ae49:	48 8d 05 80 7e 05 00	leaq	360064(%rip), %rax
10000ae50:	48 8d 0d 71 7e 05 00	leaq	360049(%rip), %rcx
10000ae57:	48 0f 44 c8	cmoveq	%rax, %rcx
10000ae5b:	4c 8b 31	movq	(%rcx), %r14
10000ae5e:	eb 07	jmp	0x10000ae67
10000ae60:	4c 8b 35 59 7e 05 00	movq	360025(%rip), %r14
10000ae67:	48 8d 35 44 9f 03 00	leaq	237380(%rip), %rsi ## literal pool for: "_JetsamPropertiesIdentifier"
10000ae6e:	4c 89 e7	movq	%r12, %rdi
10000ae71:	e8 e4 71 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000ae76:	48 85 c0	testq	%rax, %rax
10000ae79:	75 57	jne	0x10000aed2
10000ae7b:	48 8d 35 52 8b 03 00	leaq	232274(%rip), %rsi ## literal pool for: "Label"
10000ae82:	4c 89 e7	movq	%r12, %rdi
10000ae85:	e8 d0 71 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000ae8a:	49 89 c7	movq	%rax, %r15
10000ae8d:	4c 89 e7	movq	%r12, %rdi
10000ae90:	e8 24 06 00 00	callq	0x10000b4b9
10000ae95:	48 89 c3	movq	%rax, %rbx
10000ae98:	48 8d 35 e9 89 03 00	leaq	231913(%rip), %rsi ## literal pool for: "App"
10000ae9f:	48 89 c7	movq	%rax, %rdi
10000aea2:	e8 8c 44 00 00	callq	0x10000f333
10000aea7:	84 c0	testb	%al, %al
10000aea9:	75 13	jne	0x10000aebe
10000aeab:	48 8d 35 cc 89 03 00	leaq	231884(%rip), %rsi ## literal pool for: "SystemApp"
10000aeb2:	48 89 df	movq	%rbx, %rdi
10000aeb5:	e8 79 44 00 00	callq	0x10000f333
10000aeba:	84 c0	testb	%al, %al
10000aebc:	74 44	je	0x10000af02
10000aebe:	48 8d 35 79 8a 03 00	leaq	232057(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
10000aec5:	4c 89 e7	movq	%r12, %rdi
10000aec8:	e8 8d 71 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000aecd:	48 85 c0	testq	%rax, %rax
10000aed0:	74 30	je	0x10000af02
10000aed2:	48 89 c7	movq	%rax, %rdi
10000aed5:	e8 08 41 00 00	callq	0x10000efe2
10000aeda:	49 89 c7	movq	%rax, %r15
10000aedd:	48 89 c7	movq	%rax, %rdi
10000aee0:	4c 89 e6	movq	%r12, %rsi
10000aee3:	4c 89 f2	movq	%r14, %rdx
10000aee6:	e8 21 00 00 00	callq	0x10000af0c
10000aeeb:	48 89 c3	movq	%rax, %rbx
10000aeee:	4c 89 ff	movq	%r15, %rdi
10000aef1:	e8 3a 6b 03 00	callq	0x100041a30 ## symbol stub for: _free
10000aef6:	48 89 d8	movq	%rbx, %rax
10000aef9:	5b	popq	%rbx
10000aefa:	41 5c	popq	%r12
10000aefc:	41 5e	popq	%r14
10000aefe:	41 5f	popq	%r15
10000af00:	5d	popq	%rbp
10000af01:	c3	retq
10000af02:	4c 89 ff	movq	%r15, %rdi
10000af05:	e8 2e 6f 03 00	callq	0x100041e38 ## symbol stub for: _strdup
10000af0a:	eb ce	jmp	0x10000aeda
10000af0c:	55	pushq	%rbp
10000af0d:	48 89 e5	movq	%rsp, %rbp
10000af10:	41 57	pushq	%r15
10000af12:	41 56	pushq	%r14
10000af14:	41 55	pushq	%r13
10000af16:	41 54	pushq	%r12
10000af18:	53	pushq	%rbx
10000af19:	48 83 ec 18	subq	$24, %rsp
10000af1d:	49 89 d7	movq	%rdx, %r15
10000af20:	48 89 f3	movq	%rsi, %rbx
10000af23:	49 89 fe	movq	%rdi, %r14
10000af26:	45 31 ed	xorl	%r13d, %r13d
10000af29:	31 ff	xorl	%edi, %edi
10000af2b:	31 f6	xorl	%esi, %esi
10000af2d:	31 d2	xorl	%edx, %edx
10000af2f:	e8 de 70 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000af34:	48 8d 15 b4 05 00 00	leaq	1460(%rip), %rdx
10000af3b:	48 89 df	movq	%rbx, %rdi
10000af3e:	48 89 45 c0	movq	%rax, -64(%rbp)
10000af42:	48 89 c6	movq	%rax, %rsi
10000af45:	e8 bc 70 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10000af4a:	bb 00 00 00 00	movl	$0, %ebx
10000af4f:	b8 00 00 00 00	movl	$0, %eax
10000af54:	48 89 45 d0	movq	%rax, -48(%rbp)
10000af58:	b8 00 00 00 00	movl	$0, %eax
10000af5d:	48 89 45 c8	movq	%rax, -56(%rbp)
10000af61:	4d 85 ff	testq	%r15, %r15
10000af64:	0f 84 85 00 00 00	je	0x10000afef
10000af6a:	48 8d 35 ad ca 03 00	leaq	248493(%rip), %rsi ## literal pool for: "Default"
10000af71:	4c 89 ff	movq	%r15, %rdi
10000af74:	e8 cf 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000af79:	48 85 c0	testq	%rax, %rax
10000af7c:	74 27	je	0x10000afa5
10000af7e:	48 89 c3	movq	%rax, %rbx
10000af81:	48 8d 35 9e ca 03 00	leaq	248478(%rip), %rsi ## literal pool for: "Global"
10000af88:	48 89 c7	movq	%rax, %rdi
10000af8b:	e8 b8 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000af90:	48 89 45 c8	movq	%rax, -56(%rbp)
10000af94:	48 89 df	movq	%rbx, %rdi
10000af97:	4c 89 f6	movq	%r14, %rsi
10000af9a:	e8 a9 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000af9f:	48 89 45 d0	movq	%rax, -48(%rbp)
10000afa3:	eb 0c	jmp	0x10000afb1
10000afa5:	31 c0	xorl	%eax, %eax
10000afa7:	48 89 45 d0	movq	%rax, -48(%rbp)
10000afab:	31 c0	xorl	%eax, %eax
10000afad:	48 89 45 c8	movq	%rax, -56(%rbp)
10000afb1:	48 8d 35 75 ca 03 00	leaq	248437(%rip), %rsi ## literal pool for: "Override"
10000afb8:	4c 89 ff	movq	%r15, %rdi
10000afbb:	e8 88 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000afc0:	48 85 c0	testq	%rax, %rax
10000afc3:	74 25	je	0x10000afea
10000afc5:	48 89 c3	movq	%rax, %rbx
10000afc8:	48 8d 35 57 ca 03 00	leaq	248407(%rip), %rsi ## literal pool for: "Global"
10000afcf:	48 89 c7	movq	%rax, %rdi
10000afd2:	e8 71 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000afd7:	49 89 c5	movq	%rax, %r13
10000afda:	48 89 df	movq	%rbx, %rdi
10000afdd:	4c 89 f6	movq	%r14, %rsi
10000afe0:	e8 63 70 03 00	callq	0x100042048 ## symbol stub for: _xpc_dictionary_get_dictionary
10000afe5:	48 89 c3	movq	%rax, %rbx
10000afe8:	eb 05	jmp	0x10000afef
10000afea:	45 31 ed	xorl	%r13d, %r13d
10000afed:	31 db	xorl	%ebx, %ebx
10000afef:	45 31 e4	xorl	%r12d, %r12d
10000aff2:	31 ff	xorl	%edi, %edi
10000aff4:	31 f6	xorl	%esi, %esi
10000aff6:	31 d2	xorl	%edx, %edx
10000aff8:	e8 15 70 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000affd:	49 89 c6	movq	%rax, %r14
10000b000:	48 8d 05 59 f3 04 00	leaq	324441(%rip), %rax
10000b007:	4d 8b 3c 04	movq	(%r12,%rax), %r15
10000b00b:	48 85 db	testq	%rbx, %rbx
10000b00e:	74 0d	je	0x10000b01d
10000b010:	48 89 df	movq	%rbx, %rdi
10000b013:	4c 89 fe	movq	%r15, %rsi
10000b016:	e8 51 70 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b01b:	eb 02	jmp	0x10000b01f
10000b01d:	31 c0	xorl	%eax, %eax
10000b01f:	48 85 c0	testq	%rax, %rax
10000b022:	75 10	jne	0x10000b034
10000b024:	4d 85 ed	testq	%r13, %r13
10000b027:	74 0b	je	0x10000b034
10000b029:	4c 89 ef	movq	%r13, %rdi
10000b02c:	4c 89 fe	movq	%r15, %rsi
10000b02f:	e8 38 70 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b034:	48 85 c0	testq	%rax, %rax
10000b037:	75 3c	jne	0x10000b075
10000b039:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000b03d:	4c 89 fe	movq	%r15, %rsi
10000b040:	e8 27 70 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b045:	48 85 c0	testq	%rax, %rax
10000b048:	75 13	jne	0x10000b05d
10000b04a:	48 83 7d d0 00	cmpq	$0, -48(%rbp)
10000b04f:	74 0c	je	0x10000b05d
10000b051:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b055:	4c 89 fe	movq	%r15, %rsi
10000b058:	e8 0f 70 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b05d:	48 85 c0	testq	%rax, %rax
10000b060:	75 13	jne	0x10000b075
10000b062:	48 83 7d c8 00	cmpq	$0, -56(%rbp)
10000b067:	74 0c	je	0x10000b075
10000b069:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000b06d:	4c 89 fe	movq	%r15, %rsi
10000b070:	e8 f7 6f 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b075:	4c 89 f7	movq	%r14, %rdi
10000b078:	4c 89 fe	movq	%r15, %rsi
10000b07b:	48 89 c2	movq	%rax, %rdx
10000b07e:	e8 2b 70 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000b083:	49 83 c4 08	addq	$8, %r12
10000b087:	49 81 fc a8 00 00 00	cmpq	$168, %r12
10000b08e:	0f 85 6c ff ff ff	jne	0x10000b000
10000b094:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000b098:	e8 5f 70 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000b09d:	4c 89 f0	movq	%r14, %rax
10000b0a0:	48 83 c4 18	addq	$24, %rsp
10000b0a4:	5b	popq	%rbx
10000b0a5:	41 5c	popq	%r12
10000b0a7:	41 5d	popq	%r13
10000b0a9:	41 5e	popq	%r14
10000b0ab:	41 5f	popq	%r15
10000b0ad:	5d	popq	%rbp
10000b0ae:	c3	retq
10000b0af:	55	pushq	%rbp
10000b0b0:	48 89 e5	movq	%rsp, %rbp
10000b0b3:	41 56	pushq	%r14
10000b0b5:	53	pushq	%rbx
10000b0b6:	49 89 fe	movq	%rdi, %r14
10000b0b9:	31 ff	xorl	%edi, %edi
10000b0bb:	31 f6	xorl	%esi, %esi
10000b0bd:	31 d2	xorl	%edx, %edx
10000b0bf:	e8 4e 6f 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000b0c4:	48 89 c3	movq	%rax, %rbx
10000b0c7:	48 8b 15 12 7c 05 00	movq	359442(%rip), %rdx
10000b0ce:	4c 89 f7	movq	%r14, %rdi
10000b0d1:	48 89 c6	movq	%rax, %rsi
10000b0d4:	e8 33 fe ff ff	callq	0x10000af0c
10000b0d9:	49 89 c6	movq	%rax, %r14
10000b0dc:	48 89 df	movq	%rbx, %rdi
10000b0df:	e8 18 70 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000b0e4:	4c 89 f0	movq	%r14, %rax
10000b0e7:	5b	popq	%rbx
10000b0e8:	41 5e	popq	%r14
10000b0ea:	5d	popq	%rbp
10000b0eb:	c3	retq
10000b0ec:	55	pushq	%rbp
10000b0ed:	48 89 e5	movq	%rsp, %rbp
10000b0f0:	41 57	pushq	%r15
10000b0f2:	41 56	pushq	%r14
10000b0f4:	53	pushq	%rbx
10000b0f5:	50	pushq	%rax
10000b0f6:	48 89 f0	movq	%rsi, %rax
10000b0f9:	49 89 fe	movq	%rdi, %r14
10000b0fc:	48 8d 35 a2 93 03 00	leaq	234402(%rip), %rsi ## literal pool for: "ServiceType"
10000b103:	48 89 c7	movq	%rax, %rdi
10000b106:	e8 4f 6f 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000b10b:	48 85 c0	testq	%rax, %rax
10000b10e:	74 13	je	0x10000b123
10000b110:	48 8d 35 55 c5 03 00	leaq	247125(%rip), %rsi ## literal pool for: "System"
10000b117:	48 89 c7	movq	%rax, %rdi
10000b11a:	e8 01 6d 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000b11f:	85 c0	testl	%eax, %eax
10000b121:	74 09	je	0x10000b12c
10000b123:	48 8d 05 be 7b 05 00	leaq	359358(%rip), %rax
10000b12a:	eb 07	jmp	0x10000b133
10000b12c:	48 8d 05 bd 7b 05 00	leaq	359357(%rip), %rax
10000b133:	4c 8b 38	movq	(%rax), %r15
10000b136:	31 ff	xorl	%edi, %edi
10000b138:	31 f6	xorl	%esi, %esi
10000b13a:	31 d2	xorl	%edx, %edx
10000b13c:	e8 d1 6e 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000b141:	48 89 c3	movq	%rax, %rbx
10000b144:	4c 89 f7	movq	%r14, %rdi
10000b147:	48 89 c6	movq	%rax, %rsi
10000b14a:	4c 89 fa	movq	%r15, %rdx
10000b14d:	e8 ba fd ff ff	callq	0x10000af0c
10000b152:	49 89 c6	movq	%rax, %r14
10000b155:	48 89 df	movq	%rbx, %rdi
10000b158:	e8 9f 6f 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000b15d:	4c 89 f0	movq	%r14, %rax
10000b160:	48 83 c4 08	addq	$8, %rsp
10000b164:	5b	popq	%rbx
10000b165:	41 5e	popq	%r14
10000b167:	41 5f	popq	%r15
10000b169:	5d	popq	%rbp
10000b16a:	c3	retq
10000b16b:	55	pushq	%rbp
10000b16c:	48 89 e5	movq	%rsp, %rbp
10000b16f:	41 57	pushq	%r15
10000b171:	41 56	pushq	%r14
10000b173:	41 55	pushq	%r13
10000b175:	41 54	pushq	%r12
10000b177:	53	pushq	%rbx
10000b178:	50	pushq	%rax
10000b179:	49 89 cd	movq	%rcx, %r13
10000b17c:	48 89 d3	movq	%rdx, %rbx
10000b17f:	49 89 f7	movq	%rsi, %r15
10000b182:	49 89 fc	movq	%rdi, %r12
10000b185:	48 89 ca	movq	%rcx, %rdx
10000b188:	e8 9c 00 00 00	callq	0x10000b229
10000b18d:	41 89 c6	movl	%eax, %r14d
10000b190:	4c 89 e7	movq	%r12, %rdi
10000b193:	48 89 5d d0	movq	%rbx, -48(%rbp)
10000b197:	48 89 de	movq	%rbx, %rsi
10000b19a:	4c 89 ea	movq	%r13, %rdx
10000b19d:	e8 87 00 00 00	callq	0x10000b229
10000b1a2:	89 c3	movl	%eax, %ebx
10000b1a4:	45 85 f6	testl	%r14d, %r14d
10000b1a7:	7e 2b	jle	0x10000b1d4
10000b1a9:	85 db	testl	%ebx, %ebx
10000b1ab:	7e 27	jle	0x10000b1d4
10000b1ad:	48 8d 15 bf c4 03 00	leaq	246975(%rip), %rdx ## literal pool for: "%s is ignored in favor of %s"
10000b1b4:	4c 89 ef	movq	%r13, %rdi
10000b1b7:	be 06 00 00 00	movl	$6, %esi
10000b1bc:	44 39 f3	cmpl	%r14d, %ebx
10000b1bf:	7d 3c	jge	0x10000b1fd
10000b1c1:	4c 89 f9	movq	%r15, %rcx
10000b1c4:	4c 8b 45 d0	movq	-48(%rbp), %r8
10000b1c8:	31 c0	xorl	%eax, %eax
10000b1ca:	e8 76 34 00 00	callq	0x10000e645
10000b1cf:	4c 89 fb	movq	%r15, %rbx
10000b1d2:	eb 3a	jmp	0x10000b20e
10000b1d4:	45 85 f6	testl	%r14d, %r14d
10000b1d7:	79 0d	jns	0x10000b1e6
10000b1d9:	4c 89 e7	movq	%r12, %rdi
10000b1dc:	4c 89 fe	movq	%r15, %rsi
10000b1df:	31 d2	xorl	%edx, %edx
10000b1e1:	e8 c8 6e 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000b1e6:	85 db	testl	%ebx, %ebx
10000b1e8:	48 8b 5d d0	movq	-48(%rbp), %rbx
10000b1ec:	78 20	js	0x10000b20e
10000b1ee:	48 83 c4 08	addq	$8, %rsp
10000b1f2:	5b	popq	%rbx
10000b1f3:	41 5c	popq	%r12
10000b1f5:	41 5d	popq	%r13
10000b1f7:	41 5e	popq	%r14
10000b1f9:	41 5f	popq	%r15
10000b1fb:	5d	popq	%rbp
10000b1fc:	c3	retq
10000b1fd:	48 8b 5d d0	movq	-48(%rbp), %rbx
10000b201:	48 89 d9	movq	%rbx, %rcx
10000b204:	4d 89 f8	movq	%r15, %r8
10000b207:	31 c0	xorl	%eax, %eax
10000b209:	e8 37 34 00 00	callq	0x10000e645
10000b20e:	4c 89 e7	movq	%r12, %rdi
10000b211:	48 89 de	movq	%rbx, %rsi
10000b214:	31 d2	xorl	%edx, %edx
10000b216:	48 83 c4 08	addq	$8, %rsp
10000b21a:	5b	popq	%rbx
10000b21b:	41 5c	popq	%r12
10000b21d:	41 5d	popq	%r13
10000b21f:	41 5e	popq	%r14
10000b221:	41 5f	popq	%r15
10000b223:	5d	popq	%rbp
10000b224:	e9 85 6e 03 00	jmp	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000b229:	55	pushq	%rbp
10000b22a:	48 89 e5	movq	%rsp, %rbp
10000b22d:	41 57	pushq	%r15
10000b22f:	41 56	pushq	%r14
10000b231:	41 55	pushq	%r13
10000b233:	41 54	pushq	%r12
10000b235:	53	pushq	%rbx
10000b236:	50	pushq	%rax
10000b237:	49 89 d4	movq	%rdx, %r12
10000b23a:	49 89 f5	movq	%rsi, %r13
10000b23d:	49 89 ff	movq	%rdi, %r15
10000b240:	e8 27 6e 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000b245:	41 be ff ff ff ff	movl	$4294967295, %r14d
10000b24b:	48 85 c0	testq	%rax, %rax
10000b24e:	74 61	je	0x10000b2b1
10000b250:	48 89 c3	movq	%rax, %rbx
10000b253:	48 89 c7	movq	%rax, %rdi
10000b256:	e8 6b 6e 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000b25b:	48 3b 05 ae ce 04 00	cmpq	315054(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10000b262:	74 09	je	0x10000b26d
10000b264:	48 8d 15 25 c4 03 00	leaq	246821(%rip), %rdx ## literal pool for: "%s is not an int, ignoring"
10000b26b:	eb 20	jmp	0x10000b28d
10000b26d:	48 89 df	movq	%rbx, %rdi
10000b270:	e8 5d 6e 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10000b275:	b9 ff ff ff 7f	movl	$2147483647, %ecx
10000b27a:	48 8d 14 08	leaq	(%rax,%rcx), %rdx
10000b27e:	48 d1 ea	shrq	%rdx
10000b281:	48 39 ca	cmpq	%rcx, %rdx
10000b284:	72 28	jb	0x10000b2ae
10000b286:	48 8d 15 1e c4 03 00	leaq	246814(%rip), %rdx ## literal pool for: "%s is out of range, ignoring"
10000b28d:	4c 89 e7	movq	%r12, %rdi
10000b290:	be 03 00 00 00	movl	$3, %esi
10000b295:	4c 89 e9	movq	%r13, %rcx
10000b298:	31 c0	xorl	%eax, %eax
10000b29a:	e8 a6 33 00 00	callq	0x10000e645
10000b29f:	4c 89 ff	movq	%r15, %rdi
10000b2a2:	4c 89 ee	movq	%r13, %rsi
10000b2a5:	31 d2	xorl	%edx, %edx
10000b2a7:	e8 02 6e 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000b2ac:	eb 03	jmp	0x10000b2b1
10000b2ae:	41 89 c6	movl	%eax, %r14d
10000b2b1:	44 89 f0	movl	%r14d, %eax
10000b2b4:	48 83 c4 08	addq	$8, %rsp
10000b2b8:	5b	popq	%rbx
10000b2b9:	41 5c	popq	%r12
10000b2bb:	41 5d	popq	%r13
10000b2bd:	41 5e	popq	%r14
10000b2bf:	41 5f	popq	%r15
10000b2c1:	5d	popq	%rbp
10000b2c2:	c3	retq
10000b2c3:	55	pushq	%rbp
10000b2c4:	48 89 e5	movq	%rsp, %rbp
10000b2c7:	89 d0	movl	%edx, %eax
10000b2c9:	48 c1 e0 08	shlq	$8, %rax
10000b2cd:	48 c7 c1 ff fe ff ff	movq	$-257, %rcx
10000b2d4:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
10000b2db:	48 09 c1	orq	%rax, %rcx
10000b2de:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
10000b2e5:	5d	popq	%rbp
10000b2e6:	c3	retq
10000b2e7:	55	pushq	%rbp
10000b2e8:	48 89 e5	movq	%rsp, %rbp
10000b2eb:	89 d0	movl	%edx, %eax
10000b2ed:	48 c1 e0 09	shlq	$9, %rax
10000b2f1:	48 c7 c1 ff fd ff ff	movq	$-513, %rcx
10000b2f8:	48 23 8e 0d 05 00 00	andq	1293(%rsi), %rcx
10000b2ff:	48 09 c1	orq	%rax, %rcx
10000b302:	48 89 8e 0d 05 00 00	movq	%rcx, 1293(%rsi)
10000b309:	5d	popq	%rbp
10000b30a:	c3	retq
10000b30b:	55	pushq	%rbp
10000b30c:	48 89 e5	movq	%rsp, %rbp
10000b30f:	48 c1 e2 36	shlq	$54, %rdx
10000b313:	48 b8 ff ff ff ff ff ff bf ff	movabsq	$-18014398509481985, %rax
10000b31d:	48 23 86 0d 05 00 00	andq	1293(%rsi), %rax
10000b324:	48 09 d0	orq	%rdx, %rax
10000b327:	48 89 86 0d 05 00 00	movq	%rax, 1293(%rsi)
10000b32e:	5d	popq	%rbp
10000b32f:	c3	retq
10000b330:	55	pushq	%rbp
10000b331:	48 89 e5	movq	%rsp, %rbp
10000b334:	48 89 f7	movq	%rsi, %rdi
10000b337:	48 8d 0d fa 80 03 00	leaq	229626(%rip), %rcx ## literal pool for: "1"
10000b33e:	48 8d 05 29 c4 03 00	leaq	246825(%rip), %rax ## literal pool for: "0"
10000b345:	85 d2	testl	%edx, %edx
10000b347:	48 0f 45 c1	cmovneq	%rcx, %rax
10000b34b:	48 8d 35 07 c4 03 00	leaq	246791(%rip), %rsi ## literal pool for: "MallocSpaceEfficient"
10000b352:	48 89 c2	movq	%rax, %rdx
10000b355:	31 c9	xorl	%ecx, %ecx
10000b357:	5d	popq	%rbp
10000b358:	e9 0a 7d ff ff	jmp	0x100003067
10000b35d:	55	pushq	%rbp
10000b35e:	48 89 e5	movq	%rsp, %rbp
10000b361:	48 89 f7	movq	%rsi, %rdi
10000b364:	48 8d 0d cd 80 03 00	leaq	229581(%rip), %rcx ## literal pool for: "1"
10000b36b:	48 8d 05 fc c3 03 00	leaq	246780(%rip), %rax ## literal pool for: "0"
10000b372:	85 d2	testl	%edx, %edx
10000b374:	48 0f 45 c1	cmovneq	%rcx, %rax
10000b378:	48 8d 35 f1 c3 03 00	leaq	246769(%rip), %rsi ## literal pool for: "MallocNanoZone"
10000b37f:	48 89 c2	movq	%rax, %rdx
10000b382:	31 c9	xorl	%ecx, %ecx
10000b384:	5d	popq	%rbp
10000b385:	e9 dd 7c ff ff	jmp	0x100003067
10000b38a:	55	pushq	%rbp
10000b38b:	48 89 e5	movq	%rsp, %rbp
10000b38e:	89 96 3c 03 00 00	movl	%edx, 828(%rsi)
10000b394:	5d	popq	%rbp
10000b395:	c3	retq
10000b396:	55	pushq	%rbp
10000b397:	48 89 e5	movq	%rsp, %rbp
10000b39a:	89 96 3c 03 00 00	movl	%edx, 828(%rsi)
10000b3a0:	80 8e 34 03 00 00 04	orb	$4, 820(%rsi)
10000b3a7:	5d	popq	%rbp
10000b3a8:	c3	retq
10000b3a9:	55	pushq	%rbp
10000b3aa:	48 89 e5	movq	%rsp, %rbp
10000b3ad:	48 89 96 48 03 00 00	movq	%rdx, 840(%rsi)
10000b3b4:	5d	popq	%rbp
10000b3b5:	c3	retq
10000b3b6:	55	pushq	%rbp
10000b3b7:	48 89 e5	movq	%rsp, %rbp
10000b3ba:	89 96 8c 03 00 00	movl	%edx, 908(%rsi)
10000b3c0:	5d	popq	%rbp
10000b3c1:	c3	retq
10000b3c2:	55	pushq	%rbp
10000b3c3:	48 89 e5	movq	%rsp, %rbp
10000b3c6:	88 96 8a 03 00 00	movb	%dl, 906(%rsi)
10000b3cc:	5d	popq	%rbp
10000b3cd:	c3	retq
10000b3ce:	55	pushq	%rbp
10000b3cf:	48 89 e5	movq	%rsp, %rbp
10000b3d2:	89 96 58 03 00 00	movl	%edx, 856(%rsi)
10000b3d8:	5d	popq	%rbp
10000b3d9:	c3	retq
10000b3da:	55	pushq	%rbp
10000b3db:	48 89 e5	movq	%rsp, %rbp
10000b3de:	89 96 5c 03 00 00	movl	%edx, 860(%rsi)
10000b3e4:	5d	popq	%rbp
10000b3e5:	c3	retq
10000b3e6:	55	pushq	%rbp
10000b3e7:	48 89 e5	movq	%rsp, %rbp
10000b3ea:	89 96 40 03 00 00	movl	%edx, 832(%rsi)
10000b3f0:	5d	popq	%rbp
10000b3f1:	c3	retq
10000b3f2:	55	pushq	%rbp
10000b3f3:	48 89 e5	movq	%rsp, %rbp
10000b3f6:	89 96 40 03 00 00	movl	%edx, 832(%rsi)
10000b3fc:	80 8e 34 03 00 00 08	orb	$8, 820(%rsi)
10000b403:	5d	popq	%rbp
10000b404:	c3	retq
10000b405:	55	pushq	%rbp
10000b406:	48 89 e5	movq	%rsp, %rbp
10000b409:	89 96 38 03 00 00	movl	%edx, 824(%rsi)
10000b40f:	5d	popq	%rbp
10000b410:	c3	retq
10000b411:	55	pushq	%rbp
10000b412:	48 89 e5	movq	%rsp, %rbp
10000b415:	48 63 c2	movslq	%edx, %rax
10000b418:	48 89 86 78 03 00 00	movq	%rax, 888(%rsi)
10000b41f:	5d	popq	%rbp
10000b420:	c3	retq
10000b421:	55	pushq	%rbp
10000b422:	48 89 e5	movq	%rsp, %rbp
10000b425:	89 96 50 03 00 00	movl	%edx, 848(%rsi)
10000b42b:	5d	popq	%rbp
10000b42c:	c3	retq
10000b42d:	55	pushq	%rbp
10000b42e:	48 89 e5	movq	%rsp, %rbp
10000b431:	89 96 54 03 00 00	movl	%edx, 852(%rsi)
10000b437:	5d	popq	%rbp
10000b438:	c3	retq
10000b439:	55	pushq	%rbp
10000b43a:	48 89 e5	movq	%rsp, %rbp
10000b43d:	89 96 44 03 00 00	movl	%edx, 836(%rsi)
10000b443:	5d	popq	%rbp
10000b444:	c3	retq
10000b445:	55	pushq	%rbp
10000b446:	48 89 e5	movq	%rsp, %rbp
10000b449:	41 57	pushq	%r15
10000b44b:	41 56	pushq	%r14
10000b44d:	53	pushq	%rbx
10000b44e:	50	pushq	%rax
10000b44f:	49 89 ce	movq	%rcx, %r14
10000b452:	48 89 d3	movq	%rdx, %rbx
10000b455:	49 89 f7	movq	%rsi, %r15
10000b458:	48 8d 35 ad c3 03 00	leaq	246701(%rip), %rsi ## literal pool for: "Efficient"
10000b45f:	48 89 d7	movq	%rdx, %rdi
10000b462:	e8 ef 3e 00 00	callq	0x10000f356
10000b467:	84 c0	testb	%al, %al
10000b469:	74 0d	je	0x10000b478
10000b46b:	49 c7 87 70 03 00 00 01 00 00 00	movq	$1, 880(%r15)
10000b476:	eb 13	jmp	0x10000b48b
10000b478:	48 8d 35 97 c3 03 00	leaq	246679(%rip), %rsi ## literal pool for: "UserInterface"
10000b47f:	48 89 df	movq	%rbx, %rdi
10000b482:	e8 cf 3e 00 00	callq	0x10000f356
10000b487:	84 c0	testb	%al, %al
10000b489:	74 0b	je	0x10000b496
10000b48b:	48 83 c4 08	addq	$8, %rsp
10000b48f:	5b	popq	%rbx
10000b490:	41 5e	popq	%r14
10000b492:	41 5f	popq	%r15
10000b494:	5d	popq	%rbp
10000b495:	c3	retq
10000b496:	48 8d 15 87 c3 03 00	leaq	246663(%rip), %rdx ## literal pool for: "Unsupported value for EnergyEfficiencyMode: %s"
10000b49d:	4c 89 f7	movq	%r14, %rdi
10000b4a0:	be 03 00 00 00	movl	$3, %esi
10000b4a5:	48 89 d9	movq	%rbx, %rcx
10000b4a8:	31 c0	xorl	%eax, %eax
10000b4aa:	48 83 c4 08	addq	$8, %rsp
10000b4ae:	5b	popq	%rbx
10000b4af:	41 5e	popq	%r14
10000b4b1:	41 5f	popq	%r15
10000b4b3:	5d	popq	%rbp
10000b4b4:	e9 8c 31 00 00	jmp	0x10000e645
10000b4b9:	55	pushq	%rbp
10000b4ba:	48 89 e5	movq	%rsp, %rbp
10000b4bd:	53	pushq	%rbx
10000b4be:	50	pushq	%rax
10000b4bf:	48 89 fb	movq	%rdi, %rbx
10000b4c2:	48 8d 35 a2 98 03 00	leaq	235682(%rip), %rsi ## literal pool for: "POSIXSpawnType"
10000b4c9:	e8 8c 6b 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000b4ce:	48 85 c0	testq	%rax, %rax
10000b4d1:	74 07	je	0x10000b4da
10000b4d3:	48 83 c4 08	addq	$8, %rsp
10000b4d7:	5b	popq	%rbx
10000b4d8:	5d	popq	%rbp
10000b4d9:	c3	retq
10000b4da:	48 8d 35 bc 84 03 00	leaq	230588(%rip), %rsi ## literal pool for: "ProcessType"
10000b4e1:	48 89 df	movq	%rbx, %rdi
10000b4e4:	48 83 c4 08	addq	$8, %rsp
10000b4e8:	5b	popq	%rbx
10000b4e9:	5d	popq	%rbp
10000b4ea:	e9 6b 6b 03 00	jmp	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000b4ef:	55	pushq	%rbp
10000b4f0:	48 89 e5	movq	%rsp, %rbp
10000b4f3:	41 57	pushq	%r15
10000b4f5:	41 56	pushq	%r14
10000b4f7:	41 55	pushq	%r13
10000b4f9:	41 54	pushq	%r12
10000b4fb:	53	pushq	%rbx
10000b4fc:	50	pushq	%rax
10000b4fd:	49 89 d7	movq	%rdx, %r15
10000b500:	48 89 75 d0	movq	%rsi, -48(%rbp)
10000b504:	49 89 fc	movq	%rdi, %r12
10000b507:	31 db	xorl	%ebx, %ebx
10000b509:	4c 8d 35 50 ee 04 00	leaq	323152(%rip), %r14
10000b510:	4e 8b 2c 33	movq	(%rbx,%r14), %r13
10000b514:	4c 89 e7	movq	%r12, %rdi
10000b517:	4c 89 ee	movq	%r13, %rsi
10000b51a:	e8 01 69 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000b51f:	85 c0	testl	%eax, %eax
10000b521:	74 1c	je	0x10000b53f
10000b523:	48 83 c3 08	addq	$8, %rbx
10000b527:	48 81 fb a8 00 00 00	cmpq	$168, %rbx
10000b52e:	75 e0	jne	0x10000b510
10000b530:	48 83 c4 08	addq	$8, %rsp
10000b534:	5b	popq	%rbx
10000b535:	41 5c	popq	%r12
10000b537:	41 5d	popq	%r13
10000b539:	41 5e	popq	%r14
10000b53b:	41 5f	popq	%r15
10000b53d:	5d	popq	%rbp
10000b53e:	c3	retq
10000b53f:	4c 89 ff	movq	%r15, %rdi
10000b542:	4c 89 ee	movq	%r13, %rsi
10000b545:	48 8b 55 d0	movq	-48(%rbp), %rdx
10000b549:	48 83 c4 08	addq	$8, %rsp
10000b54d:	5b	popq	%rbx
10000b54e:	41 5c	popq	%r12
10000b550:	41 5d	popq	%r13
10000b552:	41 5e	popq	%r14
10000b554:	41 5f	popq	%r15
10000b556:	5d	popq	%rbp
10000b557:	e9 52 6b 03 00	jmp	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000b55c:	48 85 ff	testq	%rdi, %rdi
10000b55f:	74 06	je	0x10000b567
10000b561:	48 89 f8	movq	%rdi, %rax
10000b564:	31 d2	xorl	%edx, %edx
10000b566:	c3	retq
10000b567:	55	pushq	%rbp
10000b568:	48 89 e5	movq	%rsp, %rbp
10000b56b:	e8 1f 3c 03 00	callq	0x10003f18f
10000b570:	85 ff	testl	%edi, %edi
10000b572:	74 05	je	0x10000b579
10000b574:	31 c0	xorl	%eax, %eax
10000b576:	89 fa	movl	%edi, %edx
10000b578:	c3	retq
10000b579:	55	pushq	%rbp
10000b57a:	48 89 e5	movq	%rsp, %rbp
10000b57d:	e8 1f 3c 03 00	callq	0x10003f1a1
10000b582:	55	pushq	%rbp
10000b583:	48 89 e5	movq	%rsp, %rbp
10000b586:	53	pushq	%rbx
10000b587:	50	pushq	%rax
10000b588:	e8 55 3a 00 00	callq	0x10000efe2
10000b58d:	48 89 c3	movq	%rax, %rbx
10000b590:	48 83 3d 78 77 05 00 ff	cmpq	$-1, 358264(%rip)
10000b598:	75 1c	jne	0x10000b5b6
10000b59a:	48 8b 3d 67 77 05 00	movq	358247(%rip), %rdi
10000b5a1:	48 8d 15 23 00 00 00	leaq	35(%rip), %rdx
10000b5a8:	48 89 de	movq	%rbx, %rsi
10000b5ab:	48 83 c4 08	addq	$8, %rsp
10000b5af:	5b	popq	%rbx
10000b5b0:	5d	popq	%rbp
10000b5b1:	e9 1a 64 03 00	jmp	0x1000419d0 ## symbol stub for: _dispatch_sync_f
10000b5b6:	48 8d 3d 53 77 05 00	leaq	358227(%rip), %rdi
10000b5bd:	48 8d 35 64 ee 04 00	leaq	323172(%rip), %rsi
10000b5c4:	e8 71 63 03 00	callq	0x10004193a ## symbol stub for: _dispatch_once
10000b5c9:	eb cf	jmp	0x10000b59a
10000b5cb:	55	pushq	%rbp
10000b5cc:	48 89 e5	movq	%rsp, %rbp
10000b5cf:	41 56	pushq	%r14
10000b5d1:	53	pushq	%rbx
10000b5d2:	49 89 fe	movq	%rdi, %r14
10000b5d5:	8b 1d e5 6a 05 00	movl	355045(%rip), %ebx
10000b5db:	83 fb ff	cmpl	$-1, %ebx
10000b5de:	75 1b	jne	0x10000b5fb
10000b5e0:	48 8d 3d 4f c4 03 00	leaq	246863(%rip), %rdi ## literal pool for: "/dev/console"
10000b5e7:	be 01 00 02 00	movl	$131073, %esi
10000b5ec:	31 c0	xorl	%eax, %eax
10000b5ee:	e8 23 66 03 00	callq	0x100041c16 ## symbol stub for: _open
10000b5f3:	89 c3	movl	%eax, %ebx
10000b5f5:	89 05 c5 6a 05 00	movl	%eax, 355013(%rip)
10000b5fb:	4c 89 f7	movq	%r14, %rdi
10000b5fe:	e8 53 68 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000b603:	89 df	movl	%ebx, %edi
10000b605:	4c 89 f6	movq	%r14, %rsi
10000b608:	48 89 c2	movq	%rax, %rdx
10000b60b:	e8 18 69 03 00	callq	0x100041f28 ## symbol stub for: _write
10000b610:	4c 89 f7	movq	%r14, %rdi
10000b613:	5b	popq	%rbx
10000b614:	41 5e	popq	%r14
10000b616:	5d	popq	%rbp
10000b617:	e9 14 64 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000b61c:	55	pushq	%rbp
10000b61d:	48 89 e5	movq	%rsp, %rbp
10000b620:	48 81 ec e0 00 00 00	subq	$224, %rsp
10000b627:	49 89 fa	movq	%rdi, %r10
10000b62a:	48 8d bd 20 ff ff ff	leaq	-224(%rbp), %rdi
10000b631:	48 89 77 08	movq	%rsi, 8(%rdi)
10000b635:	48 89 57 10	movq	%rdx, 16(%rdi)
10000b639:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000b63d:	4c 89 47 20	movq	%r8, 32(%rdi)
10000b641:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000b645:	84 c0	testb	%al, %al
10000b647:	74 29	je	0x10000b672
10000b649:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
10000b650:	0f 29 8d 60 ff ff ff	movaps	%xmm1, -160(%rbp)
10000b657:	0f 29 95 70 ff ff ff	movaps	%xmm2, -144(%rbp)
10000b65e:	0f 29 5d 80	movaps	%xmm3, -128(%rbp)
10000b662:	0f 29 65 90	movaps	%xmm4, -112(%rbp)
10000b666:	0f 29 6d a0	movaps	%xmm5, -96(%rbp)
10000b66a:	0f 29 75 b0	movaps	%xmm6, -80(%rbp)
10000b66e:	0f 29 7d c0	movaps	%xmm7, -64(%rbp)
10000b672:	48 8b 05 af c9 04 00	movq	313775(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000b679:	48 8b 00	movq	(%rax), %rax
10000b67c:	48 89 45 f8	movq	%rax, -8(%rbp)
10000b680:	0f 28 05 f9 7b 03 00	movaps	228345(%rip), %xmm0
10000b687:	48 8d 55 e0	leaq	-32(%rbp), %rdx
10000b68b:	0f 29 02	movaps	%xmm0, (%rdx)
10000b68e:	48 89 7a 10	movq	%rdi, 16(%rdx)
10000b692:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000b69c:	48 89 02	movq	%rax, (%rdx)
10000b69f:	48 8d 45 10	leaq	16(%rbp), %rax
10000b6a3:	48 89 42 08	movq	%rax, 8(%rdx)
10000b6a7:	48 8d 7d d8	leaq	-40(%rbp), %rdi
10000b6ab:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
10000b6b2:	4c 89 d6	movq	%r10, %rsi
10000b6b5:	e8 4a 68 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000b6ba:	83 f8 ff	cmpl	$-1, %eax
10000b6bd:	74 21	je	0x10000b6e0
10000b6bf:	48 83 3d 49 76 05 00 ff	cmpq	$-1, 357961(%rip)
10000b6c7:	75 30	jne	0x10000b6f9
10000b6c9:	48 8b 3d 38 76 05 00	movq	357944(%rip), %rdi
10000b6d0:	48 8b 75 d8	movq	-40(%rbp), %rsi
10000b6d4:	48 8d 15 f0 fe ff ff	leaq	-272(%rip), %rdx
10000b6db:	e8 00 62 03 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
10000b6e0:	48 8b 05 41 c9 04 00	movq	313665(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000b6e7:	48 8b 00	movq	(%rax), %rax
10000b6ea:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10000b6ee:	75 1e	jne	0x10000b70e
10000b6f0:	48 81 c4 e0 00 00 00	addq	$224, %rsp
10000b6f7:	5d	popq	%rbp
10000b6f8:	c3	retq
10000b6f9:	48 8d 3d 10 76 05 00	leaq	357904(%rip), %rdi
10000b700:	48 8d 35 21 ed 04 00	leaq	322849(%rip), %rsi
10000b707:	e8 2e 62 03 00	callq	0x10004193a ## symbol stub for: _dispatch_once
10000b70c:	eb bb	jmp	0x10000b6c9
10000b70e:	e8 5f 60 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000b713:	55	pushq	%rbp
10000b714:	48 89 e5	movq	%rsp, %rbp
10000b717:	48 81 ec e0 00 00 00	subq	$224, %rsp
10000b71e:	49 89 fa	movq	%rdi, %r10
10000b721:	48 8d bd 20 ff ff ff	leaq	-224(%rbp), %rdi
10000b728:	48 89 77 08	movq	%rsi, 8(%rdi)
10000b72c:	48 89 57 10	movq	%rdx, 16(%rdi)
10000b730:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000b734:	4c 89 47 20	movq	%r8, 32(%rdi)
10000b738:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000b73c:	84 c0	testb	%al, %al
10000b73e:	74 29	je	0x10000b769
10000b740:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
10000b747:	0f 29 8d 60 ff ff ff	movaps	%xmm1, -160(%rbp)
10000b74e:	0f 29 95 70 ff ff ff	movaps	%xmm2, -144(%rbp)
10000b755:	0f 29 5d 80	movaps	%xmm3, -128(%rbp)
10000b759:	0f 29 65 90	movaps	%xmm4, -112(%rbp)
10000b75d:	0f 29 6d a0	movaps	%xmm5, -96(%rbp)
10000b761:	0f 29 75 b0	movaps	%xmm6, -80(%rbp)
10000b765:	0f 29 7d c0	movaps	%xmm7, -64(%rbp)
10000b769:	48 8b 05 b8 c8 04 00	movq	313528(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000b770:	48 8b 00	movq	(%rax), %rax
10000b773:	48 89 45 f8	movq	%rax, -8(%rbp)
10000b777:	0f 28 05 02 7b 03 00	movaps	228098(%rip), %xmm0
10000b77e:	48 8d 55 e0	leaq	-32(%rbp), %rdx
10000b782:	0f 29 02	movaps	%xmm0, (%rdx)
10000b785:	48 89 7a 10	movq	%rdi, 16(%rdx)
10000b789:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000b793:	48 89 02	movq	%rax, (%rdx)
10000b796:	48 8d 45 10	leaq	16(%rbp), %rax
10000b79a:	48 89 42 08	movq	%rax, 8(%rdx)
10000b79e:	48 8d 7d d8	leaq	-40(%rbp), %rdi
10000b7a2:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
10000b7a9:	4c 89 d6	movq	%r10, %rsi
10000b7ac:	e8 53 67 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000b7b1:	83 f8 ff	cmpl	$-1, %eax
10000b7b4:	74 12	je	0x10000b7c8
10000b7b6:	48 8b 7d d8	movq	-40(%rbp), %rdi
10000b7ba:	e8 c3 fd ff ff	callq	0x10000b582
10000b7bf:	48 8b 7d d8	movq	-40(%rbp), %rdi
10000b7c3:	e8 68 62 03 00	callq	0x100041a30 ## symbol stub for: _free
10000b7c8:	48 8b 05 59 c8 04 00	movq	313433(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000b7cf:	48 8b 00	movq	(%rax), %rax
10000b7d2:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10000b7d6:	75 09	jne	0x10000b7e1
10000b7d8:	48 81 c4 e0 00 00 00	addq	$224, %rsp
10000b7df:	5d	popq	%rbp
10000b7e0:	c3	retq
10000b7e1:	e8 8c 5f 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000b7e6:	55	pushq	%rbp
10000b7e7:	48 89 e5	movq	%rsp, %rbp
10000b7ea:	48 8d 3d 58 c2 03 00	leaq	246360(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.serialq"
10000b7f1:	31 f6	xorl	%esi, %esi
10000b7f3:	e8 5a 61 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000b7f8:	48 89 05 09 75 05 00	movq	%rax, 357641(%rip)
10000b7ff:	5d	popq	%rbp
10000b800:	c3	retq
10000b801:	48 85 ff	testq	%rdi, %rdi
10000b804:	74 06	je	0x10000b80c
10000b806:	48 89 f8	movq	%rdi, %rax
10000b809:	31 d2	xorl	%edx, %edx
10000b80b:	c3	retq
10000b80c:	55	pushq	%rbp
10000b80d:	48 89 e5	movq	%rsp, %rbp
10000b810:	e8 9e 39 03 00	callq	0x10003f1b3
10000b815:	85 ff	testl	%edi, %edi
10000b817:	74 05	je	0x10000b81e
10000b819:	31 c0	xorl	%eax, %eax
10000b81b:	89 fa	movl	%edi, %edx
10000b81d:	c3	retq
10000b81e:	55	pushq	%rbp
10000b81f:	48 89 e5	movq	%rsp, %rbp
10000b822:	e8 9e 39 03 00	callq	0x10003f1c5
10000b827:	55	pushq	%rbp
10000b828:	48 89 e5	movq	%rsp, %rbp
10000b82b:	b8 2d c0 00 00	movl	$49197, %eax
10000b830:	5d	popq	%rbp
10000b831:	c3	retq
10000b832:	55	pushq	%rbp
10000b833:	48 89 e5	movq	%rsp, %rbp
10000b836:	b8 2d c0 00 00	movl	$49197, %eax
10000b83b:	5d	popq	%rbp
10000b83c:	c3	retq
10000b83d:	55	pushq	%rbp
10000b83e:	48 89 e5	movq	%rsp, %rbp
10000b841:	5d	popq	%rbp
10000b842:	e9 d5 92 01 00	jmp	0x100024b1c
10000b847:	55	pushq	%rbp
10000b848:	48 89 e5	movq	%rsp, %rbp
10000b84b:	5d	popq	%rbp
10000b84c:	e9 37 9a 01 00	jmp	0x100025288
10000b851:	55	pushq	%rbp
10000b852:	48 89 e5	movq	%rsp, %rbp
10000b855:	5d	popq	%rbp
10000b856:	e9 3b 9b 01 00	jmp	0x100025396
10000b85b:	55	pushq	%rbp
10000b85c:	48 89 e5	movq	%rsp, %rbp
10000b85f:	48 83 ec 20	subq	$32, %rsp
10000b863:	48 8b 45 10	movq	16(%rbp), %rax
10000b867:	0f 57 c0	xorps	%xmm0, %xmm0
10000b86a:	0f 11 44 24 08	movups	%xmm0, 8(%rsp)
10000b86f:	48 89 04 24	movq	%rax, (%rsp)
10000b873:	e8 1e 9b 01 00	callq	0x100025396
10000b878:	48 83 c4 20	addq	$32, %rsp
10000b87c:	5d	popq	%rbp
10000b87d:	c3	retq
10000b87e:	55	pushq	%rbp
10000b87f:	48 89 e5	movq	%rsp, %rbp
10000b882:	b8 2d c0 00 00	movl	$49197, %eax
10000b887:	5d	popq	%rbp
10000b888:	c3	retq
10000b889:	55	pushq	%rbp
10000b88a:	48 89 e5	movq	%rsp, %rbp
10000b88d:	b8 2d c0 00 00	movl	$49197, %eax
10000b892:	5d	popq	%rbp
10000b893:	c3	retq
10000b894:	55	pushq	%rbp
10000b895:	48 89 e5	movq	%rsp, %rbp
10000b898:	b8 2d c0 00 00	movl	$49197, %eax
10000b89d:	5d	popq	%rbp
10000b89e:	c3	retq
10000b89f:	55	pushq	%rbp
10000b8a0:	48 89 e5	movq	%rsp, %rbp
10000b8a3:	b8 2d c0 00 00	movl	$49197, %eax
10000b8a8:	5d	popq	%rbp
10000b8a9:	c3	retq
10000b8aa:	55	pushq	%rbp
10000b8ab:	48 89 e5	movq	%rsp, %rbp
10000b8ae:	b8 2d c0 00 00	movl	$49197, %eax
10000b8b3:	5d	popq	%rbp
10000b8b4:	c3	retq
10000b8b5:	55	pushq	%rbp
10000b8b6:	48 89 e5	movq	%rsp, %rbp
10000b8b9:	b8 2d c0 00 00	movl	$49197, %eax
10000b8be:	5d	popq	%rbp
10000b8bf:	c3	retq
10000b8c0:	55	pushq	%rbp
10000b8c1:	48 89 e5	movq	%rsp, %rbp
10000b8c4:	b8 2d c0 00 00	movl	$49197, %eax
10000b8c9:	5d	popq	%rbp
10000b8ca:	c3	retq
10000b8cb:	55	pushq	%rbp
10000b8cc:	48 89 e5	movq	%rsp, %rbp
10000b8cf:	5d	popq	%rbp
10000b8d0:	e9 64 a2 01 00	jmp	0x100025b39
10000b8d5:	55	pushq	%rbp
10000b8d6:	48 89 e5	movq	%rsp, %rbp
10000b8d9:	b8 2d c0 00 00	movl	$49197, %eax
10000b8de:	5d	popq	%rbp
10000b8df:	c3	retq
10000b8e0:	55	pushq	%rbp
10000b8e1:	48 89 e5	movq	%rsp, %rbp
10000b8e4:	b8 2d c0 00 00	movl	$49197, %eax
10000b8e9:	5d	popq	%rbp
10000b8ea:	c3	retq
10000b8eb:	55	pushq	%rbp
10000b8ec:	48 89 e5	movq	%rsp, %rbp
10000b8ef:	b8 2d c0 00 00	movl	$49197, %eax
10000b8f4:	5d	popq	%rbp
10000b8f5:	c3	retq
10000b8f6:	55	pushq	%rbp
10000b8f7:	48 89 e5	movq	%rsp, %rbp
10000b8fa:	b8 2d c0 00 00	movl	$49197, %eax
10000b8ff:	5d	popq	%rbp
10000b900:	c3	retq
10000b901:	55	pushq	%rbp
10000b902:	48 89 e5	movq	%rsp, %rbp
10000b905:	b8 2d c0 00 00	movl	$49197, %eax
10000b90a:	5d	popq	%rbp
10000b90b:	c3	retq
10000b90c:	55	pushq	%rbp
10000b90d:	48 89 e5	movq	%rsp, %rbp
10000b910:	b8 2d c0 00 00	movl	$49197, %eax
10000b915:	5d	popq	%rbp
10000b916:	c3	retq
10000b917:	55	pushq	%rbp
10000b918:	48 89 e5	movq	%rsp, %rbp
10000b91b:	b8 2d c0 00 00	movl	$49197, %eax
10000b920:	5d	popq	%rbp
10000b921:	c3	retq
10000b922:	55	pushq	%rbp
10000b923:	48 89 e5	movq	%rsp, %rbp
10000b926:	b8 2d c0 00 00	movl	$49197, %eax
10000b92b:	5d	popq	%rbp
10000b92c:	c3	retq
10000b92d:	55	pushq	%rbp
10000b92e:	48 89 e5	movq	%rsp, %rbp
10000b931:	b8 2d c0 00 00	movl	$49197, %eax
10000b936:	5d	popq	%rbp
10000b937:	c3	retq
10000b938:	55	pushq	%rbp
10000b939:	48 89 e5	movq	%rsp, %rbp
10000b93c:	b8 2d c0 00 00	movl	$49197, %eax
10000b941:	5d	popq	%rbp
10000b942:	c3	retq
10000b943:	55	pushq	%rbp
10000b944:	48 89 e5	movq	%rsp, %rbp
10000b947:	b8 2d c0 00 00	movl	$49197, %eax
10000b94c:	5d	popq	%rbp
10000b94d:	c3	retq
10000b94e:	55	pushq	%rbp
10000b94f:	48 89 e5	movq	%rsp, %rbp
10000b952:	b8 2d c0 00 00	movl	$49197, %eax
10000b957:	5d	popq	%rbp
10000b958:	c3	retq
10000b959:	55	pushq	%rbp
10000b95a:	48 89 e5	movq	%rsp, %rbp
10000b95d:	b8 2d c0 00 00	movl	$49197, %eax
10000b962:	5d	popq	%rbp
10000b963:	c3	retq
10000b964:	55	pushq	%rbp
10000b965:	48 89 e5	movq	%rsp, %rbp
10000b968:	b8 2d c0 00 00	movl	$49197, %eax
10000b96d:	5d	popq	%rbp
10000b96e:	c3	retq
10000b96f:	55	pushq	%rbp
10000b970:	48 89 e5	movq	%rsp, %rbp
10000b973:	b8 2d c0 00 00	movl	$49197, %eax
10000b978:	5d	popq	%rbp
10000b979:	c3	retq
10000b97a:	55	pushq	%rbp
10000b97b:	48 89 e5	movq	%rsp, %rbp
10000b97e:	b8 2d c0 00 00	movl	$49197, %eax
10000b983:	5d	popq	%rbp
10000b984:	c3	retq
10000b985:	55	pushq	%rbp
10000b986:	48 89 e5	movq	%rsp, %rbp
10000b989:	b8 2d c0 00 00	movl	$49197, %eax
10000b98e:	5d	popq	%rbp
10000b98f:	c3	retq
10000b990:	48 85 ff	testq	%rdi, %rdi
10000b993:	74 06	je	0x10000b99b
10000b995:	48 89 f8	movq	%rdi, %rax
10000b998:	31 d2	xorl	%edx, %edx
10000b99a:	c3	retq
10000b99b:	55	pushq	%rbp
10000b99c:	48 89 e5	movq	%rsp, %rbp
10000b99f:	e8 33 38 03 00	callq	0x10003f1d7
10000b9a4:	85 ff	testl	%edi, %edi
10000b9a6:	74 05	je	0x10000b9ad
10000b9a8:	31 c0	xorl	%eax, %eax
10000b9aa:	89 fa	movl	%edi, %edx
10000b9ac:	c3	retq
10000b9ad:	55	pushq	%rbp
10000b9ae:	48 89 e5	movq	%rsp, %rbp
10000b9b1:	e8 33 38 03 00	callq	0x10003f1e9
10000b9b6:	55	pushq	%rbp
10000b9b7:	48 89 e5	movq	%rsp, %rbp
10000b9ba:	41 57	pushq	%r15
10000b9bc:	41 56	pushq	%r14
10000b9be:	41 55	pushq	%r13
10000b9c0:	41 54	pushq	%r12
10000b9c2:	53	pushq	%rbx
10000b9c3:	48 83 ec 18	subq	$24, %rsp
10000b9c7:	48 85 ff	testq	%rdi, %rdi
10000b9ca:	0f 84 f7 00 00 00	je	0x10000bac7
10000b9d0:	49 89 f6	movq	%rsi, %r14
10000b9d3:	49 89 fc	movq	%rdi, %r12
10000b9d6:	48 8b 05 03 74 05 00	movq	357379(%rip), %rax
10000b9dd:	31 c9	xorl	%ecx, %ecx
10000b9df:	48 8d 1d 3a 73 05 00	leaq	357178(%rip), %rbx
10000b9e6:	8d 14 08	leal	(%rax,%rcx), %edx
10000b9e9:	83 e2 03	andl	$3, %edx
10000b9ec:	48 8d 14 52	leaq	(%rdx,%rdx,2), %rdx
10000b9f0:	48 c1 e2 04	shlq	$4, %rdx
10000b9f4:	80 7c 1a 28 00	cmpb	$0, 40(%rdx,%rbx)
10000b9f9:	74 3e	je	0x10000ba39
10000b9fb:	48 8d 34 1a	leaq	(%rdx,%rbx), %rsi
10000b9ff:	48 83 c6 08	addq	$8, %rsi
10000ba03:	4c 39 e6	cmpq	%r12, %rsi
10000ba06:	0f 84 bf 00 00 00	je	0x10000bacb
10000ba0c:	f3 41 0f 6f 04 24	movdqu	(%r12), %xmm0
10000ba12:	f3 41 0f 6f 4c 24 10	movdqu	16(%r12), %xmm1
10000ba19:	f3 0f 6f 16	movdqu	(%rsi), %xmm2
10000ba1d:	66 0f ef d0	pxor	%xmm0, %xmm2
10000ba21:	f3 0f 6f 46 10	movdqu	16(%rsi), %xmm0
10000ba26:	66 0f ef c1	pxor	%xmm1, %xmm0
10000ba2a:	66 0f eb c2	por	%xmm2, %xmm0
10000ba2e:	66 0f 38 17 c0	ptest	%xmm0, %xmm0
10000ba33:	0f 84 92 00 00 00	je	0x10000bacb
10000ba39:	48 ff c1	incq	%rcx
10000ba3c:	48 83 f9 04	cmpq	$4, %rcx
10000ba40:	75 a4	jne	0x10000b9e6
10000ba42:	4c 89 e7	movq	%r12, %rdi
10000ba45:	e8 dd 96 02 00	callq	0x100035127
10000ba4a:	48 89 45 d0	movq	%rax, -48(%rbp)
10000ba4e:	48 85 c0	testq	%rax, %rax
10000ba51:	0f 84 86 00 00 00	je	0x10000badd
10000ba57:	4c 89 75 c8	movq	%r14, -56(%rbp)
10000ba5b:	4c 8d 35 ee e9 04 00	leaq	322030(%rip), %r14
10000ba62:	31 db	xorl	%ebx, %ebx
10000ba64:	45 31 ff	xorl	%r15d, %r15d
10000ba67:	49 8b 36	movq	(%r14), %rsi
10000ba6a:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000ba6e:	e8 f9 65 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10000ba73:	48 85 c0	testq	%rax, %rax
10000ba76:	74 2c	je	0x10000baa4
10000ba78:	49 89 c5	movq	%rax, %r13
10000ba7b:	48 89 c7	movq	%rax, %rdi
10000ba7e:	e8 43 66 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000ba83:	48 3b 05 56 c6 04 00	cmpq	312918(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10000ba8a:	75 0c	jne	0x10000ba98
10000ba8c:	4c 89 ef	movq	%r13, %rdi
10000ba8f:	e8 00 65 03 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10000ba94:	84 c0	testb	%al, %al
10000ba96:	74 0c	je	0x10000baa4
10000ba98:	b8 01 00 00 00	movl	$1, %eax
10000ba9d:	89 d9	movl	%ebx, %ecx
10000ba9f:	d3 e0	shll	%cl, %eax
10000baa1:	49 09 c7	orq	%rax, %r15
10000baa4:	48 ff c3	incq	%rbx
10000baa7:	49 83 c6 08	addq	$8, %r14
10000baab:	48 83 fb 1d	cmpq	$29, %rbx
10000baaf:	75 b6	jne	0x10000ba67
10000bab1:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000bab5:	e8 42 66 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000baba:	4c 8b 75 c8	movq	-56(%rbp), %r14
10000babe:	48 8d 1d 5b 72 05 00	leaq	356955(%rip), %rbx
10000bac5:	eb 19	jmp	0x10000bae0
10000bac7:	31 c0	xorl	%eax, %eax
10000bac9:	eb 64	jmp	0x10000bb2f
10000bacb:	b8 01 00 00 00	movl	$1, %eax
10000bad0:	44 89 f1	movl	%r14d, %ecx
10000bad3:	d3 e0	shll	%cl, %eax
10000bad5:	48 98	cltq
10000bad7:	48 85 04 1a	testq	%rax, (%rdx,%rbx)
10000badb:	eb 4f	jmp	0x10000bb2c
10000badd:	45 31 ff	xorl	%r15d, %r15d
10000bae0:	8b 05 fa 72 05 00	movl	357114(%rip), %eax
10000bae6:	ff c8	decl	%eax
10000bae8:	83 e0 03	andl	$3, %eax
10000baeb:	48 89 05 ee 72 05 00	movq	%rax, 357102(%rip)
10000baf2:	48 8d 04 40	leaq	(%rax,%rax,2), %rax
10000baf6:	48 c1 e0 04	shlq	$4, %rax
10000bafa:	f3 41 0f 6f 04 24	movdqu	(%r12), %xmm0
10000bb00:	f3 41 0f 6f 4c 24 10	movdqu	16(%r12), %xmm1
10000bb07:	f3 0f 7f 4c 18 18	movdqu	%xmm1, 24(%rax,%rbx)
10000bb0d:	f3 0f 7f 44 18 08	movdqu	%xmm0, 8(%rax,%rbx)
10000bb13:	4c 89 3c 18	movq	%r15, (%rax,%rbx)
10000bb17:	ba 01 00 00 00	movl	$1, %edx
10000bb1c:	44 89 f1	movl	%r14d, %ecx
10000bb1f:	d3 e2	shll	%cl, %edx
10000bb21:	c6 44 18 28 01	movb	$1, 40(%rax,%rbx)
10000bb26:	48 63 c2	movslq	%edx, %rax
10000bb29:	49 85 c7	testq	%rax, %r15
10000bb2c:	0f 95 c0	setne	%al
10000bb2f:	48 83 c4 18	addq	$24, %rsp
10000bb33:	5b	popq	%rbx
10000bb34:	41 5c	popq	%r12
10000bb36:	41 5d	popq	%r13
10000bb38:	41 5e	popq	%r14
10000bb3a:	41 5f	popq	%r15
10000bb3c:	5d	popq	%rbp
10000bb3d:	c3	retq
10000bb3e:	48 85 ff	testq	%rdi, %rdi
10000bb41:	74 06	je	0x10000bb49
10000bb43:	48 89 f8	movq	%rdi, %rax
10000bb46:	31 d2	xorl	%edx, %edx
10000bb48:	c3	retq
10000bb49:	55	pushq	%rbp
10000bb4a:	48 89 e5	movq	%rsp, %rbp
10000bb4d:	e8 a9 36 03 00	callq	0x10003f1fb
10000bb52:	85 ff	testl	%edi, %edi
10000bb54:	74 05	je	0x10000bb5b
10000bb56:	31 c0	xorl	%eax, %eax
10000bb58:	89 fa	movl	%edi, %edx
10000bb5a:	c3	retq
10000bb5b:	55	pushq	%rbp
10000bb5c:	48 89 e5	movq	%rsp, %rbp
10000bb5f:	e8 a9 36 03 00	callq	0x10003f20d
10000bb64:	55	pushq	%rbp
10000bb65:	48 89 e5	movq	%rsp, %rbp
10000bb68:	53	pushq	%rbx
10000bb69:	50	pushq	%rax
10000bb6a:	8b 07	movl	(%rdi), %eax
10000bb6c:	83 f8 02	cmpl	$2, %eax
10000bb6f:	0f 83 85 00 00 00	jae	0x10000bbfa
10000bb75:	48 89 fb	movq	%rdi, %rbx
10000bb78:	48 c7 45 f0 00 00 00 00	movq	$0, -16(%rbp)
10000bb80:	89 c1	movl	%eax, %ecx
10000bb82:	c1 e1 04	shll	$4, %ecx
10000bb85:	0f b6 c9	movzbl	%cl, %ecx
10000bb88:	ba 00 ff ff ff	movl	$4294967040, %edx
10000bb8d:	03 57 18	addl	24(%rdi), %edx
10000bb90:	c1 c2 18	roll	$24, %edx
10000bb93:	31 f6	xorl	%esi, %esi
10000bb95:	83 fa 06	cmpl	$6, %edx
10000bb98:	77 0d	ja	0x10000bba7
10000bb9a:	48 63 d2	movslq	%edx, %rdx
10000bb9d:	48 8d 35 ec 76 03 00	leaq	227052(%rip), %rsi
10000bba4:	8b 34 96	movl	(%rsi,%rdx,4), %esi
10000bba7:	09 ce	orl	%ecx, %esi
10000bba9:	83 f8 01	cmpl	$1, %eax
10000bbac:	75 0d	jne	0x10000bbbb
10000bbae:	89 f0	movl	%esi, %eax
10000bbb0:	83 c8 02	orl	$2, %eax
10000bbb3:	48 83 7b 20 00	cmpq	$0, 32(%rbx)
10000bbb8:	0f 45 f0	cmovnel	%eax, %esi
10000bbbb:	48 8d 7d f0	leaq	-16(%rbp), %rdi
10000bbbf:	e8 80 5c 03 00	callq	0x100041844 ## symbol stub for: _coalition_create
10000bbc4:	83 f8 ff	cmpl	$-1, %eax
10000bbc7:	74 27	je	0x10000bbf0
10000bbc9:	83 3b 00	cmpl	$0, (%rbx)
10000bbcc:	75 17	jne	0x10000bbe5
10000bbce:	48 8b 73 28	movq	40(%rbx), %rsi
10000bbd2:	48 85 f6	testq	%rsi, %rsi
10000bbd5:	74 0e	je	0x10000bbe5
10000bbd7:	48 8b 7d f0	movq	-16(%rbp), %rdi
10000bbdb:	e8 76 5c 03 00	callq	0x100041856 ## symbol stub for: _coalition_ledger_set_logical_writes_limit
10000bbe0:	83 f8 ff	cmpl	$-1, %eax
10000bbe3:	74 10	je	0x10000bbf5
10000bbe5:	48 8b 45 f0	movq	-16(%rbp), %rax
10000bbe9:	48 83 c4 08	addq	$8, %rsp
10000bbed:	5b	popq	%rbx
10000bbee:	5d	popq	%rbp
10000bbef:	c3	retq
10000bbf0:	e8 2a 36 03 00	callq	0x10003f21f
10000bbf5:	e8 40 36 03 00	callq	0x10003f23a
10000bbfa:	e8 56 36 03 00	callq	0x10003f255
10000bbff:	55	pushq	%rbp
10000bc00:	48 89 e5	movq	%rsp, %rbp
10000bc03:	31 f6	xorl	%esi, %esi
10000bc05:	e8 58 5c 03 00	callq	0x100041862 ## symbol stub for: _coalition_terminate
10000bc0a:	83 f8 ff	cmpl	$-1, %eax
10000bc0d:	74 02	je	0x10000bc11
10000bc0f:	5d	popq	%rbp
10000bc10:	c3	retq
10000bc11:	e8 54 36 03 00	callq	0x10003f26a
10000bc16:	eb f7	jmp	0x10000bc0f
10000bc18:	55	pushq	%rbp
10000bc19:	48 89 e5	movq	%rsp, %rbp
10000bc1c:	31 f6	xorl	%esi, %esi
10000bc1e:	e8 39 5c 03 00	callq	0x10004185c ## symbol stub for: _coalition_reap
10000bc23:	83 f8 ff	cmpl	$-1, %eax
10000bc26:	74 02	je	0x10000bc2a
10000bc28:	5d	popq	%rbp
10000bc29:	c3	retq
10000bc2a:	e8 4e 36 03 00	callq	0x10003f27d
10000bc2f:	eb f7	jmp	0x10000bc28
10000bc31:	55	pushq	%rbp
10000bc32:	48 89 e5	movq	%rsp, %rbp
10000bc35:	53	pushq	%rbx
10000bc36:	50	pushq	%rax
10000bc37:	48 89 f0	movq	%rsi, %rax
10000bc3a:	48 89 fb	movq	%rdi, %rbx
10000bc3d:	48 8b 31	movq	(%rcx), %rsi
10000bc40:	8b 49 08	movl	8(%rcx), %ecx
10000bc43:	48 89 c7	movq	%rax, %rdi
10000bc46:	e8 c1 60 03 00	callq	0x100041d0c ## symbol stub for: _posix_spawnattr_setcoalition_np
10000bc4b:	85 c0	testl	%eax, %eax
10000bc4d:	75 07	jne	0x10000bc56
10000bc4f:	48 83 c4 08	addq	$8, %rsp
10000bc53:	5b	popq	%rbx
10000bc54:	5d	popq	%rbp
10000bc55:	c3	retq
10000bc56:	48 63 d0	movslq	%eax, %rdx
10000bc59:	48 8d 3d a7 c6 00 00	leaq	50855(%rip), %rdi
10000bc60:	48 89 de	movq	%rbx, %rsi
10000bc63:	e8 40 5b 03 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10000bc68:	eb e5	jmp	0x10000bc4f
10000bc6a:	48 85 ff	testq	%rdi, %rdi
10000bc6d:	74 06	je	0x10000bc75
10000bc6f:	48 89 f8	movq	%rdi, %rax
10000bc72:	31 d2	xorl	%edx, %edx
10000bc74:	c3	retq
10000bc75:	55	pushq	%rbp
10000bc76:	48 89 e5	movq	%rsp, %rbp
10000bc79:	e8 12 36 03 00	callq	0x10003f290
10000bc7e:	85 ff	testl	%edi, %edi
10000bc80:	74 05	je	0x10000bc87
10000bc82:	31 c0	xorl	%eax, %eax
10000bc84:	89 fa	movl	%edi, %edx
10000bc86:	c3	retq
10000bc87:	55	pushq	%rbp
10000bc88:	48 89 e5	movq	%rsp, %rbp
10000bc8b:	e8 12 36 03 00	callq	0x10003f2a2
10000bc90:	55	pushq	%rbp
10000bc91:	48 89 e5	movq	%rsp, %rbp
10000bc94:	53	pushq	%rbx
10000bc95:	50	pushq	%rax
10000bc96:	48 89 fb	movq	%rdi, %rbx
10000bc99:	48 8b 7f 38	movq	56(%rdi), %rdi
10000bc9d:	e8 8e 5d 03 00	callq	0x100041a30 ## symbol stub for: _free
10000bca2:	48 8b 7b 40	movq	64(%rbx), %rdi
10000bca6:	48 85 ff	testq	%rdi, %rdi
10000bca9:	74 05	je	0x10000bcb0
10000bcab:	e8 a8 5c 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10000bcb0:	48 8b bb f0 00 00 00	movq	240(%rbx), %rdi
10000bcb7:	48 85 ff	testq	%rdi, %rdi
10000bcba:	74 05	je	0x10000bcc1
10000bcbc:	e8 97 5c 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10000bcc1:	48 8b 7b 48	movq	72(%rbx), %rdi
10000bcc5:	48 85 ff	testq	%rdi, %rdi
10000bcc8:	74 05	je	0x10000bccf
10000bcca:	e8 2d 64 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000bccf:	48 8b 7b 50	movq	80(%rbx), %rdi
10000bcd3:	48 85 ff	testq	%rdi, %rdi
10000bcd6:	74 05	je	0x10000bcdd
10000bcd8:	e8 1f 64 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000bcdd:	48 8b bb f8 00 00 00	movq	248(%rbx), %rdi
10000bce4:	48 83 c4 08	addq	$8, %rsp
10000bce8:	5b	popq	%rbx
10000bce9:	5d	popq	%rbp
10000bcea:	e9 47 5a 03 00	jmp	0x100041736 ## symbol stub for: __Block_release
10000bcef:	55	pushq	%rbp
10000bcf0:	48 89 e5	movq	%rsp, %rbp
10000bcf3:	e8 1c 28 00 00	callq	0x10000e514
10000bcf8:	48 8b 3d 79 c3 04 00	movq	312185(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10000bcff:	31 f6	xorl	%esi, %esi
10000bd01:	31 d2	xorl	%edx, %edx
10000bd03:	48 89 c1	movq	%rax, %rcx
10000bd06:	e8 77 5c 03 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10000bd0b:	48 89 05 d6 70 05 00	movq	%rax, 356566(%rip)
10000bd12:	48 8d 0d 57 69 05 00	leaq	354647(%rip), %rcx
10000bd19:	48 63 09	movslq	(%rcx), %rcx
10000bd1c:	48 69 d1 00 ca 9a 3b	imulq	$1000000000, %rcx, %rdx
10000bd23:	48 89 c7	movq	%rax, %rdi
10000bd26:	31 f6	xorl	%esi, %esi
10000bd28:	31 c9	xorl	%ecx, %ecx
10000bd2a:	e8 8f 5c 03 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10000bd2f:	48 8b 3d b2 70 05 00	movq	356530(%rip), %rdi
10000bd36:	48 8d 35 47 00 00 00	leaq	71(%rip), %rsi
10000bd3d:	e8 64 5c 03 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10000bd42:	48 8b 3d 9f 70 05 00	movq	356511(%rip), %rdi
10000bd49:	e8 74 5b 03 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10000bd4e:	bf 0a 00 00 00	movl	$10, %edi
10000bd53:	e8 0c 5c 03 00	callq	0x100041964 ## symbol stub for: _dispatch_semaphore_create
10000bd58:	48 89 05 c1 69 05 00	movq	%rax, 354753(%rip)
10000bd5f:	bf 09 00 00 00	movl	$9, %edi
10000bd64:	31 f6	xorl	%esi, %esi
10000bd66:	ba 01 00 00 00	movl	$1, %edx
10000bd6b:	e8 5c 60 03 00	callq	0x100041dcc ## symbol stub for: _setiopolicy_np
10000bd70:	85 c0	testl	%eax, %eax
10000bd72:	75 06	jne	0x10000bd7a
10000bd74:	5d	popq	%rbp
10000bd75:	e9 f0 66 00 00	jmp	0x10001246a
10000bd7a:	48 63 f8	movslq	%eax, %rdi
10000bd7d:	e8 20 5a 03 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10000bd82:	eb f0	jmp	0x10000bd74
10000bd84:	55	pushq	%rbp
10000bd85:	48 89 e5	movq	%rsp, %rbp
10000bd88:	5d	popq	%rbp
10000bd89:	e9 0a 61 03 00	jmp	0x100041e98 ## symbol stub for: _sync
10000bd8e:	55	pushq	%rbp
10000bd8f:	48 89 e5	movq	%rsp, %rbp
10000bd92:	41 57	pushq	%r15
10000bd94:	41 56	pushq	%r14
10000bd96:	41 55	pushq	%r13
10000bd98:	41 54	pushq	%r12
10000bd9a:	53	pushq	%rbx
10000bd9b:	48 83 ec 28	subq	$40, %rsp
10000bd9f:	e8 63 27 00 00	callq	0x10000e507
10000bda4:	4c 8b 35 6d c2 04 00	movq	311917(%rip), %r14 ## literal pool symbol address: __NSConcreteStackBlock
10000bdab:	48 8d 5d b0	leaq	-80(%rbp), %rbx
10000bdaf:	4c 89 33	movq	%r14, (%rbx)
10000bdb2:	41 bf 00 00 00 40	movl	$1073741824, %r15d
10000bdb8:	4c 89 7b 08	movq	%r15, 8(%rbx)
10000bdbc:	4c 8d 25 f3 01 00 00	leaq	499(%rip), %r12
10000bdc3:	4c 89 63 10	movq	%r12, 16(%rbx)
10000bdc7:	4c 8d 2d 6a e7 04 00	leaq	321386(%rip), %r13
10000bdce:	4c 89 6b 18	movq	%r13, 24(%rbx)
10000bdd2:	48 89 43 20	movq	%rax, 32(%rbx)
10000bdd6:	48 89 c7	movq	%rax, %rdi
10000bdd9:	48 89 de	movq	%rbx, %rsi
10000bddc:	e8 e9 5b 03 00	callq	0x1000419ca ## symbol stub for: _dispatch_sync
10000bde1:	e8 2e 27 00 00	callq	0x10000e514
10000bde6:	4c 89 33	movq	%r14, (%rbx)
10000bde9:	4c 89 7b 08	movq	%r15, 8(%rbx)
10000bded:	4c 89 63 10	movq	%r12, 16(%rbx)
10000bdf1:	4c 89 6b 18	movq	%r13, 24(%rbx)
10000bdf5:	48 89 43 20	movq	%rax, 32(%rbx)
10000bdf9:	48 8d 5d b0	leaq	-80(%rbp), %rbx
10000bdfd:	48 89 c7	movq	%rax, %rdi
10000be00:	48 89 de	movq	%rbx, %rsi
10000be03:	e8 c2 5b 03 00	callq	0x1000419ca ## symbol stub for: _dispatch_sync
10000be08:	e8 14 27 00 00	callq	0x10000e521
10000be0d:	4c 89 33	movq	%r14, (%rbx)
10000be10:	4c 89 7b 08	movq	%r15, 8(%rbx)
10000be14:	4c 89 63 10	movq	%r12, 16(%rbx)
10000be18:	4c 89 6b 18	movq	%r13, 24(%rbx)
10000be1c:	48 89 43 20	movq	%rax, 32(%rbx)
10000be20:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10000be24:	48 89 c7	movq	%rax, %rdi
10000be27:	e8 9e 5b 03 00	callq	0x1000419ca ## symbol stub for: _dispatch_sync
10000be2c:	48 83 c4 28	addq	$40, %rsp
10000be30:	5b	popq	%rbx
10000be31:	41 5c	popq	%r12
10000be33:	41 5d	popq	%r13
10000be35:	41 5e	popq	%r14
10000be37:	41 5f	popq	%r15
10000be39:	5d	popq	%rbp
10000be3a:	c3	retq
10000be3b:	55	pushq	%rbp
10000be3c:	48 89 e5	movq	%rsp, %rbp
10000be3f:	48 8b 05 da 68 05 00	movq	354522(%rip), %rax
10000be46:	5d	popq	%rbp
10000be47:	c3	retq
10000be48:	55	pushq	%rbp
10000be49:	48 89 e5	movq	%rsp, %rbp
10000be4c:	41 57	pushq	%r15
10000be4e:	41 56	pushq	%r14
10000be50:	41 54	pushq	%r12
10000be52:	53	pushq	%rbx
10000be53:	41 89 d6	movl	%edx, %r14d
10000be56:	49 89 f4	movq	%rsi, %r12
10000be59:	41 89 ff	movl	%edi, %r15d
10000be5c:	31 ff	xorl	%edi, %edi
10000be5e:	e8 bc 6f 00 00	callq	0x100012e1f
10000be63:	48 89 c3	movq	%rax, %rbx
10000be66:	44 88 78 30	movb	%r15b, 48(%rax)
10000be6a:	4d 85 e4	testq	%r12, %r12
10000be6d:	74 0c	je	0x10000be7b
10000be6f:	4c 89 e7	movq	%r12, %rdi
10000be72:	e8 6b 31 00 00	callq	0x10000efe2
10000be77:	48 89 43 38	movq	%rax, 56(%rbx)
10000be7b:	41 80 ff 04	cmpb	$4, %r15b
10000be7f:	75 07	jne	0x10000be88
10000be81:	44 89 b3 e8 00 00 00	movl	%r14d, 232(%rbx)
10000be88:	48 89 d8	movq	%rbx, %rax
10000be8b:	5b	popq	%rbx
10000be8c:	41 5c	popq	%r12
10000be8e:	41 5e	popq	%r14
10000be90:	41 5f	popq	%r15
10000be92:	5d	popq	%rbp
10000be93:	c3	retq
10000be94:	55	pushq	%rbp
10000be95:	48 89 e5	movq	%rsp, %rbp
10000be98:	41 57	pushq	%r15
10000be9a:	41 56	pushq	%r14
10000be9c:	53	pushq	%rbx
10000be9d:	50	pushq	%rax
10000be9e:	49 89 d6	movq	%rdx, %r14
10000bea1:	48 89 f3	movq	%rsi, %rbx
10000bea4:	49 89 ff	movq	%rdi, %r15
10000bea7:	48 89 f7	movq	%rsi, %rdi
10000beaa:	e8 af 5a 03 00	callq	0x10004195e ## symbol stub for: _dispatch_retain
10000beaf:	49 89 9f f0 00 00 00	movq	%rbx, 240(%r15)
10000beb6:	4c 89 f7	movq	%r14, %rdi
10000beb9:	e8 66 58 03 00	callq	0x100041724 ## symbol stub for: __Block_copy
10000bebe:	49 89 87 f8 00 00 00	movq	%rax, 248(%r15)
10000bec5:	41 80 7f 30 04	cmpb	$4, 48(%r15)
10000beca:	74 57	je	0x10000bf23
10000becc:	41 f6 87 00 01 00 00 01	testb	$1, 256(%r15)
10000bed4:	75 4d	jne	0x10000bf23
10000bed6:	e8 58 66 00 00	callq	0x100012533
10000bedb:	84 c0	testb	%al, %al
10000bedd:	74 20	je	0x10000beff
10000bedf:	49 8b 7f 38	movq	56(%r15), %rdi
10000bee3:	e8 6c 5f 00 00	callq	0x100011e54
10000bee8:	84 c0	testb	%al, %al
10000beea:	74 13	je	0x10000beff
10000beec:	4c 89 ff	movq	%r15, %rdi
10000beef:	e8 9e 5f 00 00	callq	0x100011e92
10000bef4:	85 c0	testl	%eax, %eax
10000bef6:	74 19	je	0x10000bf11
10000bef8:	3d 94 00 00 00	cmpl	$148, %eax
10000befd:	75 1d	jne	0x10000bf1c
10000beff:	4c 89 ff	movq	%r15, %rdi
10000bf02:	48 83 c4 08	addq	$8, %rsp
10000bf06:	5b	popq	%rbx
10000bf07:	41 5e	popq	%r14
10000bf09:	41 5f	popq	%r15
10000bf0b:	5d	popq	%rbp
10000bf0c:	e9 38 28 00 00	jmp	0x10000e749
10000bf11:	48 83 c4 08	addq	$8, %rsp
10000bf15:	5b	popq	%rbx
10000bf16:	41 5e	popq	%r14
10000bf18:	41 5f	popq	%r15
10000bf1a:	5d	popq	%rbp
10000bf1b:	c3	retq
10000bf1c:	41 89 87 e8 00 00 00	movl	%eax, 232(%r15)
10000bf23:	49 8b bf f0 00 00 00	movq	240(%r15), %rdi
10000bf2a:	e8 9f 59 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000bf2f:	49 8b bf f8 00 00 00	movq	248(%r15), %rdi
10000bf36:	41 8b 97 e8 00 00 00	movl	232(%r15), %edx
10000bf3d:	48 8b 47 10	movq	16(%rdi), %rax
10000bf41:	31 f6	xorl	%esi, %esi
10000bf43:	48 83 c4 08	addq	$8, %rsp
10000bf47:	5b	popq	%rbx
10000bf48:	41 5e	popq	%r14
10000bf4a:	41 5f	popq	%r15
10000bf4c:	5d	popq	%rbp
10000bf4d:	ff e0	jmpq	*%rax
10000bf4f:	55	pushq	%rbp
10000bf50:	48 89 e5	movq	%rsp, %rbp
10000bf53:	0f b6 47 30	movzbl	48(%rdi), %eax
10000bf57:	5d	popq	%rbp
10000bf58:	c3	retq
10000bf59:	55	pushq	%rbp
10000bf5a:	48 89 e5	movq	%rsp, %rbp
10000bf5d:	48 8b 47 40	movq	64(%rdi), %rax
10000bf61:	5d	popq	%rbp
10000bf62:	c3	retq
10000bf63:	55	pushq	%rbp
10000bf64:	48 89 e5	movq	%rsp, %rbp
10000bf67:	8a 87 00 01 00 00	movb	256(%rdi), %al
10000bf6d:	24 01	andb	$1, %al
10000bf6f:	5d	popq	%rbp
10000bf70:	c3	retq
10000bf71:	55	pushq	%rbp
10000bf72:	48 89 e5	movq	%rsp, %rbp
10000bf75:	48 8b 7f 50	movq	80(%rdi), %rdi
10000bf79:	48 85 ff	testq	%rdi, %rdi
10000bf7c:	74 06	je	0x10000bf84
10000bf7e:	5d	popq	%rbp
10000bf7f:	e9 7e 61 03 00	jmp	0x100042102 ## symbol stub for: _xpc_retain
10000bf84:	31 c0	xorl	%eax, %eax
10000bf86:	5d	popq	%rbp
10000bf87:	c3	retq
10000bf88:	55	pushq	%rbp
10000bf89:	48 89 e5	movq	%rsp, %rbp
10000bf8c:	48 8d 47 58	leaq	88(%rdi), %rax
10000bf90:	5d	popq	%rbp
10000bf91:	c3	retq
10000bf92:	55	pushq	%rbp
10000bf93:	48 89 e5	movq	%rsp, %rbp
10000bf96:	48 8b 47 38	movq	56(%rdi), %rax
10000bf9a:	5d	popq	%rbp
10000bf9b:	c3	retq
10000bf9c:	55	pushq	%rbp
10000bf9d:	48 89 e5	movq	%rsp, %rbp
10000bfa0:	48 8b 47 48	movq	72(%rdi), %rax
10000bfa4:	5d	popq	%rbp
10000bfa5:	c3	retq
10000bfa6:	55	pushq	%rbp
10000bfa7:	48 89 e5	movq	%rsp, %rbp
10000bfaa:	8a 87 00 01 00 00	movb	256(%rdi), %al
10000bfb0:	24 02	andb	$2, %al
10000bfb2:	d0 e8	shrb	%al
10000bfb4:	5d	popq	%rbp
10000bfb5:	c3	retq
10000bfb6:	55	pushq	%rbp
10000bfb7:	48 89 e5	movq	%rsp, %rbp
10000bfba:	48 8b 7f 20	movq	32(%rdi), %rdi
10000bfbe:	5d	popq	%rbp
10000bfbf:	e9 00 5a 03 00	jmp	0x1000419c4 ## symbol stub for: _dispatch_suspend
10000bfc4:	48 85 ff	testq	%rdi, %rdi
10000bfc7:	74 06	je	0x10000bfcf
10000bfc9:	48 89 f8	movq	%rdi, %rax
10000bfcc:	31 d2	xorl	%edx, %edx
10000bfce:	c3	retq
10000bfcf:	55	pushq	%rbp
10000bfd0:	48 89 e5	movq	%rsp, %rbp
10000bfd3:	e8 dc 32 03 00	callq	0x10003f2b4
10000bfd8:	85 ff	testl	%edi, %edi
10000bfda:	74 05	je	0x10000bfe1
10000bfdc:	31 c0	xorl	%eax, %eax
10000bfde:	89 fa	movl	%edi, %edx
10000bfe0:	c3	retq
10000bfe1:	55	pushq	%rbp
10000bfe2:	48 89 e5	movq	%rsp, %rbp
10000bfe5:	e8 dc 32 03 00	callq	0x10003f2c6
10000bfea:	55	pushq	%rbp
10000bfeb:	48 89 e5	movq	%rsp, %rbp
10000bfee:	5d	popq	%rbp
10000bfef:	c3	retq
10000bff0:	55	pushq	%rbp
10000bff1:	48 89 e5	movq	%rsp, %rbp
10000bff4:	41 56	pushq	%r14
10000bff6:	53	pushq	%rbx
10000bff7:	48 89 f3	movq	%rsi, %rbx
10000bffa:	49 89 fe	movq	%rdi, %r14
10000bffd:	48 89 f7	movq	%rsi, %rdi
10000c000:	e8 51 5e 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000c005:	4c 8d 40 01	leaq	1(%rax), %r8
10000c009:	4c 89 f7	movq	%r14, %rdi
10000c00c:	31 f6	xorl	%esi, %esi
10000c00e:	31 d2	xorl	%edx, %edx
10000c010:	48 89 d9	movq	%rbx, %rcx
10000c013:	e8 92 5e 03 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
10000c018:	85 c0	testl	%eax, %eax
10000c01a:	0f 94 c0	sete	%al
10000c01d:	5b	popq	%rbx
10000c01e:	41 5e	popq	%r14
10000c020:	5d	popq	%rbp
10000c021:	c3	retq
10000c022:	55	pushq	%rbp
10000c023:	48 89 e5	movq	%rsp, %rbp
10000c026:	53	pushq	%rbx
10000c027:	50	pushq	%rax
10000c028:	48 8d 5d f0	leaq	-16(%rbp), %rbx
10000c02c:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10000c033:	48 89 de	movq	%rbx, %rsi
10000c036:	e8 8a 88 02 00	callq	0x1000348c5
10000c03b:	48 89 c1	movq	%rax, %rcx
10000c03e:	48 8b 03	movq	(%rbx), %rax
10000c041:	48 85 c9	testq	%rcx, %rcx
10000c044:	74 0a	je	0x10000c050
10000c046:	48 85 c0	testq	%rax, %rax
10000c049:	75 0f	jne	0x10000c05a
10000c04b:	e8 88 32 03 00	callq	0x10003f2d8
10000c050:	48 89 c7	movq	%rax, %rdi
10000c053:	e8 d8 59 03 00	callq	0x100041a30 ## symbol stub for: _free
10000c058:	31 c0	xorl	%eax, %eax
10000c05a:	48 83 c4 08	addq	$8, %rsp
10000c05e:	5b	popq	%rbx
10000c05f:	5d	popq	%rbp
10000c060:	c3	retq
10000c061:	55	pushq	%rbp
10000c062:	48 89 e5	movq	%rsp, %rbp
10000c065:	41 56	pushq	%r14
10000c067:	53	pushq	%rbx
10000c068:	48 85 ff	testq	%rdi, %rdi
10000c06b:	74 32	je	0x10000c09f
10000c06d:	49 89 fe	movq	%rdi, %r14
10000c070:	bf 18 00 00 00	movl	$24, %edi
10000c075:	e8 6b 14 00 00	callq	0x10000d4e5
10000c07a:	48 89 c3	movq	%rax, %rbx
10000c07d:	4c 89 f7	movq	%r14, %rdi
10000c080:	e8 60 14 00 00	callq	0x10000d4e5
10000c085:	48 89 03	movq	%rax, (%rbx)
10000c088:	c6 00 00	movb	$0, (%rax)
10000c08b:	4c 89 73 08	movq	%r14, 8(%rbx)
10000c08f:	48 c7 43 10 00 00 00 00	movq	$0, 16(%rbx)
10000c097:	48 89 d8	movq	%rbx, %rax
10000c09a:	5b	popq	%rbx
10000c09b:	41 5e	popq	%r14
10000c09d:	5d	popq	%rbp
10000c09e:	c3	retq
10000c09f:	e8 49 32 03 00	callq	0x10003f2ed
10000c0a4:	55	pushq	%rbp
10000c0a5:	48 89 e5	movq	%rsp, %rbp
10000c0a8:	48 8b 3f	movq	(%rdi), %rdi
10000c0ab:	5d	popq	%rbp
10000c0ac:	e9 31 2f 00 00	jmp	0x10000efe2
10000c0b1:	55	pushq	%rbp
10000c0b2:	48 89 e5	movq	%rsp, %rbp
10000c0b5:	53	pushq	%rbx
10000c0b6:	50	pushq	%rax
10000c0b7:	48 89 fb	movq	%rdi, %rbx
10000c0ba:	48 8b 3f	movq	(%rdi), %rdi
10000c0bd:	e8 6e 59 03 00	callq	0x100041a30 ## symbol stub for: _free
10000c0c2:	48 89 df	movq	%rbx, %rdi
10000c0c5:	48 83 c4 08	addq	$8, %rsp
10000c0c9:	5b	popq	%rbx
10000c0ca:	5d	popq	%rbp
10000c0cb:	e9 60 59 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000c0d0:	55	pushq	%rbp
10000c0d1:	48 89 e5	movq	%rsp, %rbp
10000c0d4:	41 57	pushq	%r15
10000c0d6:	41 56	pushq	%r14
10000c0d8:	53	pushq	%rbx
10000c0d9:	48 81 ec e8 00 00 00	subq	$232, %rsp
10000c0e0:	49 89 fe	movq	%rdi, %r14
10000c0e3:	48 8d bd 00 ff ff ff	leaq	-256(%rbp), %rdi
10000c0ea:	48 89 57 10	movq	%rdx, 16(%rdi)
10000c0ee:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000c0f2:	4c 89 47 20	movq	%r8, 32(%rdi)
10000c0f6:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000c0fa:	84 c0	testb	%al, %al
10000c0fc:	74 2f	je	0x10000c12d
10000c0fe:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
10000c105:	0f 29 8d 40 ff ff ff	movaps	%xmm1, -192(%rbp)
10000c10c:	0f 29 95 50 ff ff ff	movaps	%xmm2, -176(%rbp)
10000c113:	0f 29 9d 60 ff ff ff	movaps	%xmm3, -160(%rbp)
10000c11a:	0f 29 a5 70 ff ff ff	movaps	%xmm4, -144(%rbp)
10000c121:	0f 29 6d 80	movaps	%xmm5, -128(%rbp)
10000c125:	0f 29 75 90	movaps	%xmm6, -112(%rbp)
10000c129:	0f 29 7d a0	movaps	%xmm7, -96(%rbp)
10000c12d:	48 8b 05 f4 be 04 00	movq	311028(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c134:	48 8b 00	movq	(%rax), %rax
10000c137:	48 89 45 e0	movq	%rax, -32(%rbp)
10000c13b:	0f 28 05 3e 71 03 00	movaps	225598(%rip), %xmm0
10000c142:	48 8d 55 c0	leaq	-64(%rbp), %rdx
10000c146:	0f 29 02	movaps	%xmm0, (%rdx)
10000c149:	48 89 7a 10	movq	%rdi, 16(%rdx)
10000c14d:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
10000c157:	48 89 02	movq	%rax, (%rdx)
10000c15a:	48 8d 45 10	leaq	16(%rbp), %rax
10000c15e:	48 89 42 08	movq	%rax, 8(%rdx)
10000c162:	48 8d 7d b8	leaq	-72(%rbp), %rdi
10000c166:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
10000c16d:	e8 92 5d 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000c172:	83 f8 ff	cmpl	$-1, %eax
10000c175:	0f 84 b8 00 00 00	je	0x10000c233
10000c17b:	48 63 d8	movslq	%eax, %rbx
10000c17e:	48 89 d9	movq	%rbx, %rcx
10000c181:	48 c1 f9 3f	sarq	$63, %rcx
10000c185:	49 03 5e 10	addq	16(%r14), %rbx
10000c189:	48 83 d1 00	adcq	$0, %rcx
10000c18d:	89 c8	movl	%ecx, %eax
10000c18f:	83 e0 01	andl	$1, %eax
10000c192:	48 f7 d8	negq	%rax
10000c195:	48 31 c1	xorq	%rax, %rcx
10000c198:	0f 85 ab 00 00 00	jne	0x10000c249
10000c19e:	48 85 c0	testq	%rax, %rax
10000c1a1:	0f 88 a2 00 00 00	js	0x10000c249
10000c1a7:	49 8b 56 08	movq	8(%r14), %rdx
10000c1ab:	48 39 da	cmpq	%rbx, %rdx
10000c1ae:	76 05	jbe	0x10000c1b5
10000c1b0:	4d 8b 3e	movq	(%r14), %r15
10000c1b3:	eb 41	jmp	0x10000c1f6
10000c1b5:	48 01 db	addq	%rbx, %rbx
10000c1b8:	0f 82 8b 00 00 00	jb	0x10000c249
10000c1be:	48 01 d2	addq	%rdx, %rdx
10000c1c1:	48 39 d3	cmpq	%rdx, %rbx
10000c1c4:	72 79	jb	0x10000c23f
10000c1c6:	48 89 df	movq	%rbx, %rdi
10000c1c9:	e8 17 13 00 00	callq	0x10000d4e5
10000c1ce:	49 89 c7	movq	%rax, %r15
10000c1d1:	49 8b 36	movq	(%r14), %rsi
10000c1d4:	48 89 c7	movq	%rax, %rdi
10000c1d7:	48 89 da	movq	%rbx, %rdx
10000c1da:	e8 71 5c 03 00	callq	0x100041e50 ## symbol stub for: _strlcpy
10000c1df:	48 39 d8	cmpq	%rbx, %rax
10000c1e2:	73 60	jae	0x10000c244
10000c1e4:	49 8b 3e	movq	(%r14), %rdi
10000c1e7:	e8 44 58 03 00	callq	0x100041a30 ## symbol stub for: _free
10000c1ec:	4d 89 3e	movq	%r15, (%r14)
10000c1ef:	49 89 5e 08	movq	%rbx, 8(%r14)
10000c1f3:	48 89 da	movq	%rbx, %rdx
10000c1f6:	48 8b 75 b8	movq	-72(%rbp), %rsi
10000c1fa:	4c 89 ff	movq	%r15, %rdi
10000c1fd:	e8 48 5c 03 00	callq	0x100041e4a ## symbol stub for: _strlcat
10000c202:	49 89 46 10	movq	%rax, 16(%r14)
10000c206:	49 3b 46 08	cmpq	8(%r14), %rax
10000c20a:	73 2e	jae	0x10000c23a
10000c20c:	48 8b 7d b8	movq	-72(%rbp), %rdi
10000c210:	e8 1b 58 03 00	callq	0x100041a30 ## symbol stub for: _free
10000c215:	48 8b 05 0c be 04 00	movq	310796(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c21c:	48 8b 00	movq	(%rax), %rax
10000c21f:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10000c223:	75 26	jne	0x10000c24b
10000c225:	48 81 c4 e8 00 00 00	addq	$232, %rsp
10000c22c:	5b	popq	%rbx
10000c22d:	41 5e	popq	%r14
10000c22f:	41 5f	popq	%r15
10000c231:	5d	popq	%rbp
10000c232:	c3	retq
10000c233:	e8 ca 30 03 00	callq	0x10003f302
10000c238:	eb db	jmp	0x10000c215
10000c23a:	e8 d6 30 03 00	callq	0x10003f315
10000c23f:	e8 e6 30 03 00	callq	0x10003f32a
10000c244:	e8 f6 30 03 00	callq	0x10003f33f
10000c249:	0f 0b	ud2
10000c24b:	e8 22 55 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000c250:	55	pushq	%rbp
10000c251:	48 89 e5	movq	%rsp, %rbp
10000c254:	48 8b 47 10	movq	16(%rdi), %rax
10000c258:	48 29 f0	subq	%rsi, %rax
10000c25b:	72 0d	jb	0x10000c26a
10000c25d:	48 89 47 10	movq	%rax, 16(%rdi)
10000c261:	48 8b 0f	movq	(%rdi), %rcx
10000c264:	c6 04 01 00	movb	$0, (%rcx,%rax)
10000c268:	5d	popq	%rbp
10000c269:	c3	retq
10000c26a:	e8 e5 30 03 00	callq	0x10003f354
10000c26f:	90	nop
10000c270:	55	pushq	%rbp
10000c271:	48 89 e5	movq	%rsp, %rbp
10000c274:	53	pushq	%rbx
10000c275:	48 81 ec a8 00 00 00	subq	$168, %rsp
10000c27c:	48 89 fa	movq	%rdi, %rdx
10000c27f:	0f 57 c0	xorps	%xmm0, %xmm0
10000c282:	48 8d 45 80	leaq	-128(%rbp), %rax
10000c286:	0f 29 00	movaps	%xmm0, (%rax)
10000c289:	48 c7 40 10 00 00 00 00	movq	$0, 16(%rax)
10000c291:	48 8d 0c 3e	leaq	(%rsi,%rdi), %rcx
10000c295:	48 8d 3d bc e2 04 00	leaq	320188(%rip), %rdi
10000c29c:	48 89 c6	movq	%rax, %rsi
10000c29f:	e8 7a 54 03 00	callq	0x10004171e ## symbol stub for: _CEValidate
10000c2a4:	48 8b 1d a5 be 04 00	movq	310949(%rip), %rbx ## literal pool symbol address: _kCENoError
10000c2ab:	48 3b 03	cmpq	(%rbx), %rax
10000c2ae:	0f 85 90 00 00 00	jne	0x10000c344
10000c2b4:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000c2b8:	0f 57 c0	xorps	%xmm0, %xmm0
10000c2bb:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10000c2bf:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10000c2c3:	0f 29 06	movaps	%xmm0, (%rsi)
10000c2c6:	48 8b 45 90	movq	-112(%rbp), %rax
10000c2ca:	48 89 44 24 10	movq	%rax, 16(%rsp)
10000c2cf:	0f 28 45 80	movaps	-128(%rbp), %xmm0
10000c2d3:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c2d7:	48 8d 3d 7a e2 04 00	leaq	320122(%rip), %rdi
10000c2de:	e8 35 54 03 00	callq	0x100041718 ## symbol stub for: _CEAcquireUnmanagedContext
10000c2e3:	48 3b 03	cmpq	(%rbx), %rax
10000c2e6:	75 5c	jne	0x10000c344
10000c2e8:	48 8b 45 c0	movq	-64(%rbp), %rax
10000c2ec:	48 89 45 f0	movq	%rax, -16(%rbp)
10000c2f0:	0f 28 45 a0	movaps	-96(%rbp), %xmm0
10000c2f4:	0f 28 4d b0	movaps	-80(%rbp), %xmm1
10000c2f8:	0f 29 4d e0	movaps	%xmm1, -32(%rbp)
10000c2fc:	0f 29 45 d0	movaps	%xmm0, -48(%rbp)
10000c300:	48 8b 45 c0	movq	-64(%rbp), %rax
10000c304:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c309:	0f 28 45 a0	movaps	-96(%rbp), %xmm0
10000c30d:	0f 28 4d b0	movaps	-80(%rbp), %xmm1
10000c311:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c316:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c31a:	e8 7f 55 03 00	callq	0x10004189e ## symbol stub for: _der_vm_context_is_valid
10000c31f:	84 c0	testb	%al, %al
10000c321:	74 21	je	0x10000c344
10000c323:	48 8b 45 f0	movq	-16(%rbp), %rax
10000c327:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c32c:	0f 28 45 d0	movaps	-48(%rbp), %xmm0
10000c330:	0f 28 4d e0	movaps	-32(%rbp), %xmm1
10000c334:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c339:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c33d:	e8 5e 01 00 00	callq	0x10000c4a0
10000c342:	eb 02	jmp	0x10000c346
10000c344:	31 c0	xorl	%eax, %eax
10000c346:	48 81 c4 a8 00 00 00	addq	$168, %rsp
10000c34d:	5b	popq	%rbx
10000c34e:	5d	popq	%rbp
10000c34f:	c3	retq
10000c350:	55	pushq	%rbp
10000c351:	48 89 e5	movq	%rsp, %rbp
10000c354:	48 89 f7	movq	%rsi, %rdi
10000c357:	5d	popq	%rbp
10000c358:	e9 65 58 03 00	jmp	0x100041bc2 ## symbol stub for: _malloc
10000c35d:	55	pushq	%rbp
10000c35e:	48 89 e5	movq	%rsp, %rbp
10000c361:	48 89 f7	movq	%rsi, %rdi
10000c364:	5d	popq	%rbp
10000c365:	e9 c6 56 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000c36a:	55	pushq	%rbp
10000c36b:	48 89 e5	movq	%rsp, %rbp
10000c36e:	48 81 ec d0 00 00 00	subq	$208, %rsp
10000c375:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
10000c37c:	48 89 57 10	movq	%rdx, 16(%rdi)
10000c380:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000c384:	4c 89 47 20	movq	%r8, 32(%rdi)
10000c388:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000c38c:	84 c0	testb	%al, %al
10000c38e:	74 26	je	0x10000c3b6
10000c390:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10000c397:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
10000c39e:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
10000c3a2:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
10000c3a6:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
10000c3aa:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
10000c3ae:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
10000c3b2:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
10000c3b6:	48 8b 05 6b bc 04 00	movq	310379(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c3bd:	48 8b 00	movq	(%rax), %rax
10000c3c0:	48 89 45 f8	movq	%rax, -8(%rbp)
10000c3c4:	0f 28 05 b5 6e 03 00	movaps	224949(%rip), %xmm0
10000c3cb:	48 8d 55 e0	leaq	-32(%rbp), %rdx
10000c3cf:	0f 29 02	movaps	%xmm0, (%rdx)
10000c3d2:	48 89 7a 10	movq	%rdi, 16(%rdx)
10000c3d6:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
10000c3e0:	48 89 02	movq	%rax, (%rdx)
10000c3e3:	48 8d 45 10	leaq	16(%rbp), %rax
10000c3e7:	48 89 42 08	movq	%rax, 8(%rdx)
10000c3eb:	bf 07 00 00 00	movl	$7, %edi
10000c3f0:	e8 21 5b 03 00	callq	0x100041f16 ## symbol stub for: _vsyslog
10000c3f5:	48 8b 05 2c bc 04 00	movq	310316(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c3fc:	48 8b 00	movq	(%rax), %rax
10000c3ff:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10000c403:	75 09	jne	0x10000c40e
10000c405:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10000c40c:	5d	popq	%rbp
10000c40d:	c3	retq
10000c40e:	e8 5f 53 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000c413:	55	pushq	%rbp
10000c414:	48 89 e5	movq	%rsp, %rbp
10000c417:	48 81 ec d0 00 00 00	subq	$208, %rsp
10000c41e:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
10000c425:	48 89 57 10	movq	%rdx, 16(%rdi)
10000c429:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000c42d:	4c 89 47 20	movq	%r8, 32(%rdi)
10000c431:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000c435:	84 c0	testb	%al, %al
10000c437:	74 26	je	0x10000c45f
10000c439:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10000c440:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
10000c447:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
10000c44b:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
10000c44f:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
10000c453:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
10000c457:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
10000c45b:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
10000c45f:	0f 28 05 1a 6e 03 00	movaps	224794(%rip), %xmm0
10000c466:	48 8d 55 e0	leaq	-32(%rbp), %rdx
10000c46a:	0f 29 02	movaps	%xmm0, (%rdx)
10000c46d:	48 89 7a 10	movq	%rdi, 16(%rdx)
10000c471:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
10000c47b:	48 89 02	movq	%rax, (%rdx)
10000c47e:	48 8d 45 10	leaq	16(%rbp), %rax
10000c482:	48 89 42 08	movq	%rax, 8(%rdx)
10000c486:	bf 02 00 00 00	movl	$2, %edi
10000c48b:	e8 86 5a 03 00	callq	0x100041f16 ## symbol stub for: _vsyslog
10000c490:	48 8d 0d f9 ba 03 00	leaq	244473(%rip), %rcx ## literal pool for: "Data corruption: CoreEntitlements has aborted due to an unrecoverable error"
10000c497:	48 89 0d 2a 62 05 00	movq	%rcx, 352810(%rip)
10000c49e:	0f 0b	ud2
10000c4a0:	55	pushq	%rbp
10000c4a1:	48 89 e5	movq	%rsp, %rbp
10000c4a4:	41 57	pushq	%r15
10000c4a6:	41 56	pushq	%r14
10000c4a8:	53	pushq	%rbx
10000c4a9:	48 83 ec 28	subq	$40, %rsp
10000c4ad:	48 8b 5d 10	movq	16(%rbp), %rbx
10000c4b1:	48 8b 45 30	movq	48(%rbp), %rax
10000c4b5:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c4ba:	0f 28 45 10	movaps	16(%rbp), %xmm0
10000c4be:	0f 28 4d 20	movaps	32(%rbp), %xmm1
10000c4c2:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c4c7:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c4cb:	31 ff	xorl	%edi, %edi
10000c4cd:	e8 c0 53 03 00	callq	0x100041892 ## symbol stub for: _der_vm_CEType_from_context
10000c4d2:	ff c8	decl	%eax
10000c4d4:	83 f8 04	cmpl	$4, %eax
10000c4d7:	0f 87 1b 01 00 00	ja	0x10000c5f8
10000c4dd:	48 8d 5d 10	leaq	16(%rbp), %rbx
10000c4e1:	48 8d 0d 30 01 00 00	leaq	304(%rip), %rcx
10000c4e8:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
10000c4ec:	48 01 c8	addq	%rcx, %rax
10000c4ef:	ff e0	jmpq	*%rax
10000c4f1:	e8 22 5b 03 00	callq	0x100042018 ## symbol stub for: _xpc_dictionary_create_empty
10000c4f6:	eb 05	jmp	0x10000c4fd
10000c4f8:	e8 49 5a 03 00	callq	0x100041f46 ## symbol stub for: _xpc_array_create_empty
10000c4fd:	49 89 c6	movq	%rax, %r14
10000c500:	48 8b 43 20	movq	32(%rbx), %rax
10000c504:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c509:	0f 10 03	movups	(%rbx), %xmm0
10000c50c:	0f 10 4b 10	movups	16(%rbx), %xmm1
10000c510:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c515:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c519:	48 8d 35 0c 01 00 00	leaq	268(%rip), %rsi
10000c520:	4c 89 f7	movq	%r14, %rdi
10000c523:	e8 88 53 03 00	callq	0x1000418b0 ## symbol stub for: _der_vm_iterate
10000c528:	4c 89 f0	movq	%r14, %rax
10000c52b:	48 83 c4 28	addq	$40, %rsp
10000c52f:	5b	popq	%rbx
10000c530:	41 5e	popq	%r14
10000c532:	41 5f	popq	%r15
10000c534:	5d	popq	%rbp
10000c535:	c3	retq
10000c536:	48 8b 43 20	movq	32(%rbx), %rax
10000c53a:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c53f:	0f 10 03	movups	(%rbx), %xmm0
10000c542:	0f 10 4b 10	movups	16(%rbx), %xmm1
10000c546:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c54b:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c54f:	e8 56 53 03 00	callq	0x1000418aa ## symbol stub for: _der_vm_integer_from_context
10000c554:	48 89 c7	movq	%rax, %rdi
10000c557:	48 83 c4 28	addq	$40, %rsp
10000c55b:	5b	popq	%rbx
10000c55c:	41 5e	popq	%r14
10000c55e:	41 5f	popq	%r15
10000c560:	5d	popq	%rbp
10000c561:	e9 66 5b 03 00	jmp	0x1000420cc ## symbol stub for: _xpc_int64_create
10000c566:	48 8b 43 20	movq	32(%rbx), %rax
10000c56a:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c56f:	0f 10 03	movups	(%rbx), %xmm0
10000c572:	0f 10 4b 10	movups	16(%rbx), %xmm1
10000c576:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c57b:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c57f:	e8 32 53 03 00	callq	0x1000418b6 ## symbol stub for: _der_vm_string_from_context
10000c584:	49 89 c6	movq	%rax, %r14
10000c587:	49 89 d7	movq	%rdx, %r15
10000c58a:	48 8d 7a 01	leaq	1(%rdx), %rdi
10000c58e:	e8 2f 56 03 00	callq	0x100041bc2 ## symbol stub for: _malloc
10000c593:	48 85 c0	testq	%rax, %rax
10000c596:	74 58	je	0x10000c5f0
10000c598:	48 89 c3	movq	%rax, %rbx
10000c59b:	48 89 c7	movq	%rax, %rdi
10000c59e:	4c 89 f6	movq	%r14, %rsi
10000c5a1:	4c 89 fa	movq	%r15, %rdx
10000c5a4:	e8 25 56 03 00	callq	0x100041bce ## symbol stub for: _memcpy
10000c5a9:	42 c6 04 3b 00	movb	$0, (%rbx,%r15)
10000c5ae:	48 89 df	movq	%rbx, %rdi
10000c5b1:	48 83 c4 28	addq	$40, %rsp
10000c5b5:	5b	popq	%rbx
10000c5b6:	41 5e	popq	%r14
10000c5b8:	41 5f	popq	%r15
10000c5ba:	5d	popq	%rbp
10000c5bb:	e9 5a 5b 03 00	jmp	0x10004211a ## symbol stub for: _xpc_string_create_no_copy
10000c5c0:	48 8b 43 20	movq	32(%rbx), %rax
10000c5c4:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c5c9:	0f 10 03	movups	(%rbx), %xmm0
10000c5cc:	0f 10 4b 10	movups	16(%rbx), %xmm1
10000c5d0:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c5d5:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c5d9:	e8 ba 52 03 00	callq	0x100041898 ## symbol stub for: _der_vm_bool_from_context
10000c5de:	0f b6 f8	movzbl	%al, %edi
10000c5e1:	48 83 c4 28	addq	$40, %rsp
10000c5e5:	5b	popq	%rbx
10000c5e6:	41 5e	popq	%r14
10000c5e8:	41 5f	popq	%r15
10000c5ea:	5d	popq	%rbp
10000c5eb:	e9 9e 59 03 00	jmp	0x100041f8e ## symbol stub for: _xpc_bool_create
10000c5f0:	45 31 f6	xorl	%r14d, %r14d
10000c5f3:	e9 30 ff ff ff	jmp	0x10000c528
10000c5f8:	48 8d 35 dd b9 03 00	leaq	244189(%rip), %rsi ## literal pool for: "[%s]: %s\n"
10000c5ff:	48 8d 15 e0 b9 03 00	leaq	244192(%rip), %rdx ## literal pool for: "_objectForActiveContext"
10000c606:	48 8d 0d f1 b9 03 00	leaq	244209(%rip), %rcx ## literal pool for: "CoreEntitlements: unknown DER type"
10000c60d:	48 89 df	movq	%rbx, %rdi
10000c610:	31 c0	xorl	%eax, %eax
10000c612:	ff 53 20	callq	*32(%rbx)
10000c615:	0f 1f 00	nopl	(%rax)
10000c618:	d9 fe	fsin
	.byte 0xff #bad opcode
10000c61b:	ff e0	jmpq	*%rax
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10000c61f:	ff 1e	lcalll	*(%rsi)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000c623:	ff 4e ff	decl	-1(%rsi)
	.byte 0xff #bad opcode
10000c627:	ff a8 ff ff ff 55	ljmpl	*1442840575(%rax)
10000c62d:	48 89 e5	movq	%rsp, %rbp
10000c630:	41 57	pushq	%r15
10000c632:	41 56	pushq	%r14
10000c634:	41 54	pushq	%r12
10000c636:	53	pushq	%rbx
10000c637:	48 81 ec c0 03 00 00	subq	$960, %rsp
10000c63e:	4c 8d 7d 10	leaq	16(%rbp), %r15
10000c642:	48 8b 05 df b9 04 00	movq	309727(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c649:	48 8b 00	movq	(%rax), %rax
10000c64c:	48 89 45 d8	movq	%rax, -40(%rbp)
10000c650:	4d 8b 37	movq	(%r15), %r14
10000c653:	41 8b 47 54	movl	84(%r15), %eax
10000c657:	83 f8 02	cmpl	$2, %eax
10000c65a:	74 4a	je	0x10000c6a6
10000c65c:	85 c0	testl	%eax, %eax
10000c65e:	0f 84 e2 02 00 00	je	0x10000c946
10000c664:	41 83 7f 50 02	cmpl	$2, 80(%r15)
10000c669:	0f 85 ee 02 00 00	jne	0x10000c95d
10000c66f:	49 8b 47 48	movq	72(%r15), %rax
10000c673:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c678:	41 0f 10 47 28	movups	40(%r15), %xmm0
10000c67d:	41 0f 10 4f 38	movups	56(%r15), %xmm1
10000c682:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c687:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c68b:	e8 10 fe ff ff	callq	0x10000c4a0
10000c690:	48 89 c3	movq	%rax, %rbx
10000c693:	49 8b 7f 58	movq	88(%r15), %rdi
10000c697:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10000c69e:	48 89 c2	movq	%rax, %rdx
10000c6a1:	e9 6c 02 00 00	jmp	0x10000c912
10000c6a6:	41 83 7f 50 01	cmpl	$1, 80(%r15)
10000c6ab:	0f 85 14 02 00 00	jne	0x10000c8c5
10000c6b1:	4d 8b 77 58	movq	88(%r15), %r14
10000c6b5:	41 0f 10 47 28	movups	40(%r15), %xmm0
10000c6ba:	41 0f 10 4f 38	movups	56(%r15), %xmm1
10000c6bf:	0f 29 85 a0 fd ff ff	movaps	%xmm0, -608(%rbp)
10000c6c6:	0f 29 8d b0 fd ff ff	movaps	%xmm1, -592(%rbp)
10000c6cd:	49 8b 47 48	movq	72(%r15), %rax
10000c6d1:	48 89 85 c0 fd ff ff	movq	%rax, -576(%rbp)
10000c6d8:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10000c6e2:	48 8d 9d 70 fd ff ff	leaq	-656(%rbp), %rbx
10000c6e9:	48 89 43 20	movq	%rax, 32(%rbx)
10000c6ed:	0f 28 05 8c 6b 03 00	movaps	224140(%rip), %xmm0
10000c6f4:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10000c6f8:	0f 29 03	movaps	%xmm0, (%rbx)
10000c6fb:	0f 57 c0	xorps	%xmm0, %xmm0
10000c6fe:	48 8d b5 d8 fe ff ff	leaq	-296(%rbp), %rsi
10000c705:	0f 11 46 08	movups	%xmm0, 8(%rsi)
10000c709:	0f 11 46 18	movups	%xmm0, 24(%rsi)
10000c70d:	0f 11 46 28	movups	%xmm0, 40(%rsi)
10000c711:	0f 11 46 38	movups	%xmm0, 56(%rsi)
10000c715:	0f 11 46 48	movups	%xmm0, 72(%rsi)
10000c719:	0f 11 46 58	movups	%xmm0, 88(%rsi)
10000c71d:	0f 11 46 68	movups	%xmm0, 104(%rsi)
10000c721:	0f 11 46 78	movups	%xmm0, 120(%rsi)
10000c725:	0f 11 86 88 00 00 00	movups	%xmm0, 136(%rsi)
10000c72c:	0f 11 86 98 00 00 00	movups	%xmm0, 152(%rsi)
10000c733:	0f 11 86 a8 00 00 00	movups	%xmm0, 168(%rsi)
10000c73a:	0f 11 86 b8 00 00 00	movups	%xmm0, 184(%rsi)
10000c741:	0f 11 86 c8 00 00 00	movups	%xmm0, 200(%rsi)
10000c748:	0f 11 86 d8 00 00 00	movups	%xmm0, 216(%rsi)
10000c74f:	0f 11 86 e8 00 00 00	movups	%xmm0, 232(%rsi)
10000c756:	48 c7 86 f8 00 00 00 00 00 00 00	movq	$0, 248(%rsi)
10000c761:	48 c7 06 02 00 00 00	movq	$2, (%rsi)
10000c768:	48 8d 7c 24 28	leaq	40(%rsp), %rdi
10000c76d:	b9 20 00 00 00	movl	$32, %ecx
10000c772:	f3 48 a5	rep		movsq	(%rsi), %es:(%rdi)
10000c775:	49 8b 47 48	movq	72(%r15), %rax
10000c779:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c77e:	41 0f 10 47 28	movups	40(%r15), %xmm0
10000c783:	41 0f 10 4f 38	movups	56(%r15), %xmm1
10000c788:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c78d:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c791:	48 89 df	movq	%rbx, %rdi
10000c794:	e8 0b 51 03 00	callq	0x1000418a4 ## symbol stub for: _der_vm_execute
10000c799:	48 8b 43 20	movq	32(%rbx), %rax
10000c79d:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c7a2:	0f 28 03	movaps	(%rbx), %xmm0
10000c7a5:	0f 28 4b 10	movaps	16(%rbx), %xmm1
10000c7a9:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c7ae:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c7b2:	e8 ff 50 03 00	callq	0x1000418b6 ## symbol stub for: _der_vm_string_from_context
10000c7b7:	49 89 c4	movq	%rax, %r12
10000c7ba:	48 89 d3	movq	%rdx, %rbx
10000c7bd:	48 8d 7a 01	leaq	1(%rdx), %rdi
10000c7c1:	e8 fc 53 03 00	callq	0x100041bc2 ## symbol stub for: _malloc
10000c7c6:	48 85 c0	testq	%rax, %rax
10000c7c9:	0f 84 50 01 00 00	je	0x10000c91f
10000c7cf:	49 89 c7	movq	%rax, %r15
10000c7d2:	48 89 c7	movq	%rax, %rdi
10000c7d5:	4c 89 e6	movq	%r12, %rsi
10000c7d8:	48 89 da	movq	%rbx, %rdx
10000c7db:	e8 ee 53 03 00	callq	0x100041bce ## symbol stub for: _memcpy
10000c7e0:	41 c6 04 1f 00	movb	$0, (%r15,%rbx)
10000c7e5:	48 8d b5 d0 fd ff ff	leaq	-560(%rbp), %rsi
10000c7ec:	0f 57 c0	xorps	%xmm0, %xmm0
10000c7ef:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10000c7f3:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10000c7f7:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10000c7fb:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
10000c7ff:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
10000c803:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
10000c807:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
10000c80b:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
10000c812:	0f 29 86 90 00 00 00	movaps	%xmm0, 144(%rsi)
10000c819:	0f 29 86 a0 00 00 00	movaps	%xmm0, 160(%rsi)
10000c820:	0f 29 86 b0 00 00 00	movaps	%xmm0, 176(%rsi)
10000c827:	0f 29 86 c0 00 00 00	movaps	%xmm0, 192(%rsi)
10000c82e:	0f 29 86 d0 00 00 00	movaps	%xmm0, 208(%rsi)
10000c835:	0f 29 86 e0 00 00 00	movaps	%xmm0, 224(%rsi)
10000c83c:	0f 29 86 f0 00 00 00	movaps	%xmm0, 240(%rsi)
10000c843:	0f 28 05 66 6a 03 00	movaps	223846(%rip), %xmm0
10000c84a:	0f 29 06	movaps	%xmm0, (%rsi)
10000c84d:	48 8d 7c 24 28	leaq	40(%rsp), %rdi
10000c852:	b9 20 00 00 00	movl	$32, %ecx
10000c857:	f3 48 a5	rep		movsq	(%rsi), %es:(%rdi)
10000c85a:	48 8b 85 c0 fd ff ff	movq	-576(%rbp), %rax
10000c861:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c866:	0f 28 85 a0 fd ff ff	movaps	-608(%rbp), %xmm0
10000c86d:	0f 28 8d b0 fd ff ff	movaps	-592(%rbp), %xmm1
10000c874:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c879:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c87d:	48 8d 9d 48 fd ff ff	leaq	-696(%rbp), %rbx
10000c884:	48 89 df	movq	%rbx, %rdi
10000c887:	e8 18 50 03 00	callq	0x1000418a4 ## symbol stub for: _der_vm_execute
10000c88c:	48 8b 43 20	movq	32(%rbx), %rax
10000c890:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c895:	0f 10 03	movups	(%rbx), %xmm0
10000c898:	0f 10 4b 10	movups	16(%rbx), %xmm1
10000c89c:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c8a1:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c8a5:	e8 f6 fb ff ff	callq	0x10000c4a0
10000c8aa:	48 89 c3	movq	%rax, %rbx
10000c8ad:	4c 89 f7	movq	%r14, %rdi
10000c8b0:	4c 89 fe	movq	%r15, %rsi
10000c8b3:	48 89 c2	movq	%rax, %rdx
10000c8b6:	e8 f3 57 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10000c8bb:	4c 89 ff	movq	%r15, %rdi
10000c8be:	e8 6d 51 03 00	callq	0x100041a30 ## symbol stub for: _free
10000c8c3:	eb 52	jmp	0x10000c917
10000c8c5:	e8 7c 56 03 00	callq	0x100041f46 ## symbol stub for: _xpc_array_create_empty
10000c8ca:	48 89 c3	movq	%rax, %rbx
10000c8cd:	49 8b 47 48	movq	72(%r15), %rax
10000c8d1:	48 89 44 24 20	movq	%rax, 32(%rsp)
10000c8d6:	41 0f 10 47 28	movups	40(%r15), %xmm0
10000c8db:	41 0f 10 4f 38	movups	56(%r15), %xmm1
10000c8e0:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
10000c8e5:	0f 11 04 24	movups	%xmm0, (%rsp)
10000c8e9:	48 8d 35 3c fd ff ff	leaq	-708(%rip), %rsi
10000c8f0:	48 89 df	movq	%rbx, %rdi
10000c8f3:	e8 b8 4f 03 00	callq	0x1000418b0 ## symbol stub for: _der_vm_iterate
10000c8f8:	48 8b 0d 51 b8 04 00	movq	309329(%rip), %rcx ## literal pool symbol address: _kCENoError
10000c8ff:	48 3b 01	cmpq	(%rcx), %rax
10000c902:	75 70	jne	0x10000c974
10000c904:	49 8b 7f 58	movq	88(%r15), %rdi
10000c908:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10000c90f:	48 89 da	movq	%rbx, %rdx
10000c912:	e8 71 56 03 00	callq	0x100041f88 ## symbol stub for: _xpc_array_set_value
10000c917:	48 89 df	movq	%rbx, %rdi
10000c91a:	e8 dd 57 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000c91f:	48 8b 05 02 b7 04 00	movq	308994(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c926:	48 8b 00	movq	(%rax), %rax
10000c929:	48 3b 45 d8	cmpq	-40(%rbp), %rax
10000c92d:	75 12	jne	0x10000c941
10000c92f:	b0 01	movb	$1, %al
10000c931:	48 81 c4 c0 03 00 00	addq	$960, %rsp
10000c938:	5b	popq	%rbx
10000c939:	41 5c	popq	%r12
10000c93b:	41 5e	popq	%r14
10000c93d:	41 5f	popq	%r15
10000c93f:	5d	popq	%rbp
10000c940:	c3	retq
10000c941:	e8 2c 4e 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000c946:	48 8d 35 8f b6 03 00	leaq	243343(%rip), %rsi ## literal pool for: "[%s]: %s\n"
10000c94d:	48 8d 15 cd b6 03 00	leaq	243405(%rip), %rdx ## literal pool for: "_manufacturingCallback"
10000c954:	48 8d 0d a3 b6 03 00	leaq	243363(%rip), %rcx ## literal pool for: "CoreEntitlements: unknown DER type"
10000c95b:	eb 2c	jmp	0x10000c989
10000c95d:	48 8d 35 78 b6 03 00	leaq	243320(%rip), %rsi ## literal pool for: "[%s]: %s\n"
10000c964:	48 8d 15 b6 b6 03 00	leaq	243382(%rip), %rdx ## literal pool for: "_manufacturingCallback"
10000c96b:	48 8d 0d 00 b7 03 00	leaq	243456(%rip), %rcx ## literal pool for: "CoreEntitlements: not a sequence"
10000c972:	eb 15	jmp	0x10000c989
10000c974:	48 8d 35 61 b6 03 00	leaq	243297(%rip), %rsi ## literal pool for: "[%s]: %s\n"
10000c97b:	48 8d 15 9f b6 03 00	leaq	243359(%rip), %rdx ## literal pool for: "_manufacturingCallback"
10000c982:	48 8d 0d af b6 03 00	leaq	243375(%rip), %rcx ## literal pool for: "CoreEntitlements: Couldn't iterate over DER entitlements\n"
10000c989:	4c 89 f7	movq	%r14, %rdi
10000c98c:	31 c0	xorl	%eax, %eax
10000c98e:	41 ff 56 20	callq	*32(%r14)
10000c992:	48 85 ff	testq	%rdi, %rdi
10000c995:	74 06	je	0x10000c99d
10000c997:	48 89 f8	movq	%rdi, %rax
10000c99a:	31 d2	xorl	%edx, %edx
10000c99c:	c3	retq
10000c99d:	55	pushq	%rbp
10000c99e:	48 89 e5	movq	%rsp, %rbp
10000c9a1:	e8 c3 29 03 00	callq	0x10003f369
10000c9a6:	85 ff	testl	%edi, %edi
10000c9a8:	74 05	je	0x10000c9af
10000c9aa:	31 c0	xorl	%eax, %eax
10000c9ac:	89 fa	movl	%edi, %edx
10000c9ae:	c3	retq
10000c9af:	55	pushq	%rbp
10000c9b0:	48 89 e5	movq	%rsp, %rbp
10000c9b3:	e8 c3 29 03 00	callq	0x10003f37b
10000c9b8:	55	pushq	%rbp
10000c9b9:	48 89 e5	movq	%rsp, %rbp
10000c9bc:	48 c7 05 29 64 05 00 00 00 00 00	movq	$0, 353321(%rip)
10000c9c7:	5d	popq	%rbp
10000c9c8:	c3	retq
10000c9c9:	55	pushq	%rbp
10000c9ca:	48 89 e5	movq	%rsp, %rbp
10000c9cd:	41 56	pushq	%r14
10000c9cf:	53	pushq	%rbx
10000c9d0:	48 8d 3d 0e b7 03 00	leaq	243470(%rip), %rdi ## literal pool for: "ReleaseType"
10000c9d7:	e8 64 01 00 00	callq	0x10000cb40
10000c9dc:	48 8d 3d 0e b7 03 00	leaq	243470(%rip), %rdi ## literal pool for: "kern.osreleasetype"
10000c9e3:	48 89 c6	movq	%rax, %rsi
10000c9e6:	e8 72 02 00 00	callq	0x10000cc5d
10000c9eb:	48 8d 05 f6 5d 05 00	leaq	351734(%rip), %rax
10000c9f2:	80 38 00	cmpb	$0, (%rax)
10000c9f5:	74 50	je	0x10000ca47
10000c9f7:	48 8d 3d 2b b7 03 00	leaq	243499(%rip), %rdi ## literal pool for: "kern.osversion"
10000c9fe:	e8 1f f6 ff ff	callq	0x10000c022
10000ca03:	48 85 c0	testq	%rax, %rax
10000ca06:	0f 84 8e 00 00 00	je	0x10000ca9a
10000ca0c:	48 89 c3	movq	%rax, %rbx
10000ca0f:	48 8d 3d b4 b6 03 00	leaq	243380(%rip), %rdi ## literal pool for: "ProductBuildVersion"
10000ca16:	e8 25 01 00 00	callq	0x10000cb40
10000ca1b:	48 85 c0	testq	%rax, %rax
10000ca1e:	0f 84 92 00 00 00	je	0x10000cab6
10000ca24:	49 89 c6	movq	%rax, %r14
10000ca27:	48 89 df	movq	%rbx, %rdi
10000ca2a:	48 89 c6	movq	%rax, %rsi
10000ca2d:	e8 01 29 00 00	callq	0x10000f333
10000ca32:	84 c0	testb	%al, %al
10000ca34:	0f 84 d2 00 00 00	je	0x10000cb0c
10000ca3a:	48 89 df	movq	%rbx, %rdi
10000ca3d:	e8 ee 4f 03 00	callq	0x100041a30 ## symbol stub for: _free
10000ca42:	e9 82 00 00 00	jmp	0x10000cac9
10000ca47:	48 8d 3d cc b6 03 00	leaq	243404(%rip), %rdi ## literal pool for: "ProductVersion"
10000ca4e:	e8 ed 00 00 00	callq	0x10000cb40
10000ca53:	48 8d 3d aa b6 03 00	leaq	243370(%rip), %rdi ## literal pool for: "kern.osproductversion"
10000ca5a:	48 89 c6	movq	%rax, %rsi
10000ca5d:	e8 fb 01 00 00	callq	0x10000cc5d
10000ca62:	48 8d 3d 61 b6 03 00	leaq	243297(%rip), %rdi ## literal pool for: "ProductBuildVersion"
10000ca69:	e8 d2 00 00 00	callq	0x10000cb40
10000ca6e:	48 8d 3d b4 b6 03 00	leaq	243380(%rip), %rdi ## literal pool for: "kern.osversion"
10000ca75:	48 89 c6	movq	%rax, %rsi
10000ca78:	e8 e0 01 00 00	callq	0x10000cc5d
10000ca7d:	48 8d 3d cb b6 03 00	leaq	243403(%rip), %rdi ## literal pool for: "iOSSupportVersion"
10000ca84:	e8 b7 00 00 00	callq	0x10000cb40
10000ca89:	48 8d 3d a8 b6 03 00	leaq	243368(%rip), %rdi ## literal pool for: "kern.iossupportversion"
10000ca90:	48 89 c6	movq	%rax, %rsi
10000ca93:	e8 c5 01 00 00	callq	0x10000cc5d
10000ca98:	eb 2f	jmp	0x10000cac9
10000ca9a:	e8 c1 4c 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ca9f:	8b 10	movl	(%rax), %edx
10000caa1:	48 8d 35 ef b6 03 00	leaq	243439(%rip), %rsi ## literal pool for: "Unable to reload kern.osversion: %d"
10000caa8:	bf 03 00 01 00	movl	$65539, %edi
10000caad:	31 c0	xorl	%eax, %eax
10000caaf:	e8 14 8b 02 00	callq	0x1000355c8
10000cab4:	eb 13	jmp	0x10000cac9
10000cab6:	48 8d 35 fe b6 03 00	leaq	243454(%rip), %rsi ## literal pool for: "Missing ProductBuildVersion"
10000cabd:	bf 03 00 01 00	movl	$65539, %edi
10000cac2:	31 c0	xorl	%eax, %eax
10000cac4:	e8 ff 8a 02 00	callq	0x1000355c8
10000cac9:	48 8d 3d c3 b5 03 00	leaq	243139(%rip), %rdi ## literal pool for: "/System/Library/CoreServices/SystemVersionCompat.plist"
10000cad0:	e8 15 5d 02 00	callq	0x1000327ea
10000cad5:	48 85 c0	testq	%rax, %rax
10000cad8:	74 2d	je	0x10000cb07
10000cada:	48 89 c3	movq	%rax, %rbx
10000cadd:	48 8d 35 36 b6 03 00	leaq	243254(%rip), %rsi ## literal pool for: "ProductVersion"
10000cae4:	48 89 c7	movq	%rax, %rdi
10000cae7:	e8 6e 55 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000caec:	48 8d 3d 27 b7 03 00	leaq	243495(%rip), %rdi ## literal pool for: "kern.osproductversioncompat"
10000caf3:	48 89 c6	movq	%rax, %rsi
10000caf6:	e8 62 01 00 00	callq	0x10000cc5d
10000cafb:	48 89 df	movq	%rbx, %rdi
10000cafe:	5b	popq	%rbx
10000caff:	41 5e	popq	%r14
10000cb01:	5d	popq	%rbp
10000cb02:	e9 f5 55 03 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
10000cb07:	5b	popq	%rbx
10000cb08:	41 5e	popq	%r14
10000cb0a:	5d	popq	%rbp
10000cb0b:	c3	retq
10000cb0c:	48 8d 3d c4 b6 03 00	leaq	243396(%rip), %rdi ## literal pool for: "Userspace reboot changed system version: previous %s != current %s"
10000cb13:	48 89 de	movq	%rbx, %rsi
10000cb16:	4c 89 f2	movq	%r14, %rdx
10000cb19:	31 c0	xorl	%eax, %eax
10000cb1b:	e8 a7 79 02 00	callq	0x1000344c7
10000cb20:	55	pushq	%rbp
10000cb21:	48 89 e5	movq	%rsp, %rbp
10000cb24:	48 8d 3d 9f b5 03 00	leaq	243103(%rip), %rdi ## literal pool for: "ProductBuildVersion"
10000cb2b:	e8 10 00 00 00	callq	0x10000cb40
10000cb30:	48 85 c0	testq	%rax, %rax
10000cb33:	48 8d 0d a4 b5 03 00	leaq	243108(%rip), %rcx ## literal pool for: "99Z999"
10000cb3a:	48 0f 44 c1	cmoveq	%rcx, %rax
10000cb3e:	5d	popq	%rbp
10000cb3f:	c3	retq
10000cb40:	55	pushq	%rbp
10000cb41:	48 89 e5	movq	%rsp, %rbp
10000cb44:	41 56	pushq	%r14
10000cb46:	53	pushq	%rbx
10000cb47:	49 89 fe	movq	%rdi, %r14
10000cb4a:	48 83 3d 9e 62 05 00 00	cmpq	$0, 352926(%rip)
10000cb52:	0f 85 c7 00 00 00	jne	0x10000cc1f
10000cb58:	48 8d 3d d7 b6 03 00	leaq	243415(%rip), %rdi ## literal pool for: "/System/Library/CoreServices/SystemVersion.plist"
10000cb5f:	e8 86 5c 02 00	callq	0x1000327ea
10000cb64:	48 83 3d 84 62 05 00 00	cmpq	$0, 352900(%rip)
10000cb6c:	0f 85 c0 00 00 00	jne	0x10000cc32
10000cb72:	48 89 c3	movq	%rax, %rbx
10000cb75:	31 ff	xorl	%edi, %edi
10000cb77:	31 f6	xorl	%esi, %esi
10000cb79:	31 d2	xorl	%edx, %edx
10000cb7b:	e8 92 54 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10000cb80:	48 89 c7	movq	%rax, %rdi
10000cb83:	48 89 05 66 62 05 00	movq	%rax, 352870(%rip)
10000cb8a:	48 85 db	testq	%rbx, %rbx
10000cb8d:	74 58	je	0x10000cbe7
10000cb8f:	48 8d 15 84 b5 03 00	leaq	243076(%rip), %rdx ## literal pool for: "ProductVersion"
10000cb96:	48 89 de	movq	%rbx, %rsi
10000cb99:	e8 35 01 00 00	callq	0x10000ccd3
10000cb9e:	48 8b 3d 4b 62 05 00	movq	352843(%rip), %rdi
10000cba5:	48 8d 15 1e b5 03 00	leaq	242974(%rip), %rdx ## literal pool for: "ProductBuildVersion"
10000cbac:	48 89 de	movq	%rbx, %rsi
10000cbaf:	e8 1f 01 00 00	callq	0x10000ccd3
10000cbb4:	48 8b 3d 35 62 05 00	movq	352821(%rip), %rdi
10000cbbb:	48 8d 15 8d b5 03 00	leaq	243085(%rip), %rdx ## literal pool for: "iOSSupportVersion"
10000cbc2:	48 89 de	movq	%rbx, %rsi
10000cbc5:	e8 09 01 00 00	callq	0x10000ccd3
10000cbca:	48 8b 3d 1f 62 05 00	movq	352799(%rip), %rdi
10000cbd1:	48 8d 15 0d b5 03 00	leaq	242957(%rip), %rdx ## literal pool for: "ReleaseType"
10000cbd8:	48 89 de	movq	%rbx, %rsi
10000cbdb:	e8 f3 00 00 00	callq	0x10000ccd3
10000cbe0:	48 8b 3d 09 62 05 00	movq	352777(%rip), %rdi
10000cbe7:	48 8d 35 f7 b4 03 00	leaq	242935(%rip), %rsi ## literal pool for: "ReleaseType"
10000cbee:	e8 67 54 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000cbf3:	48 85 c0	testq	%rax, %rax
10000cbf6:	75 1a	jne	0x10000cc12
10000cbf8:	48 8b 3d f1 61 05 00	movq	352753(%rip), %rdi
10000cbff:	48 8d 35 df b4 03 00	leaq	242911(%rip), %rsi ## literal pool for: "ReleaseType"
10000cc06:	48 8d 15 5a b6 03 00	leaq	243290(%rip), %rdx ## literal pool for: "User"
10000cc0d:	e8 8a 54 03 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10000cc12:	48 85 db	testq	%rbx, %rbx
10000cc15:	74 08	je	0x10000cc1f
10000cc17:	48 89 df	movq	%rbx, %rdi
10000cc1a:	e8 dd 54 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000cc1f:	48 8b 3d ca 61 05 00	movq	352714(%rip), %rdi
10000cc26:	4c 89 f6	movq	%r14, %rsi
10000cc29:	5b	popq	%rbx
10000cc2a:	41 5e	popq	%r14
10000cc2c:	5d	popq	%rbp
10000cc2d:	e9 28 54 03 00	jmp	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000cc32:	e8 56 27 03 00	callq	0x10003f38d
10000cc37:	55	pushq	%rbp
10000cc38:	48 89 e5	movq	%rsp, %rbp
10000cc3b:	53	pushq	%rbx
10000cc3c:	50	pushq	%rax
10000cc3d:	48 89 fb	movq	%rdi, %rbx
10000cc40:	48 8d 3d 9e b4 03 00	leaq	242846(%rip), %rdi ## literal pool for: "ReleaseType"
10000cc47:	e8 f4 fe ff ff	callq	0x10000cb40
10000cc4c:	48 89 c7	movq	%rax, %rdi
10000cc4f:	48 89 de	movq	%rbx, %rsi
10000cc52:	48 83 c4 08	addq	$8, %rsp
10000cc56:	5b	popq	%rbx
10000cc57:	5d	popq	%rbp
10000cc58:	e9 c5 26 00 00	jmp	0x10000f322
10000cc5d:	55	pushq	%rbp
10000cc5e:	48 89 e5	movq	%rsp, %rbp
10000cc61:	41 57	pushq	%r15
10000cc63:	41 56	pushq	%r14
10000cc65:	53	pushq	%rbx
10000cc66:	50	pushq	%rax
10000cc67:	48 85 f6	testq	%rsi, %rsi
10000cc6a:	74 4f	je	0x10000ccbb
10000cc6c:	48 89 f3	movq	%rsi, %rbx
10000cc6f:	49 89 fe	movq	%rdi, %r14
10000cc72:	e8 ab f3 ff ff	callq	0x10000c022
10000cc77:	48 85 c0	testq	%rax, %rax
10000cc7a:	74 30	je	0x10000ccac
10000cc7c:	44 8a 38	movb	(%rax), %r15b
10000cc7f:	48 89 c7	movq	%rax, %rdi
10000cc82:	e8 a9 4d 03 00	callq	0x100041a30 ## symbol stub for: _free
10000cc87:	45 84 ff	testb	%r15b, %r15b
10000cc8a:	74 20	je	0x10000ccac
10000cc8c:	48 8d 35 ce b4 03 00	leaq	242894(%rip), %rsi ## literal pool for: "%s is already set, skipping"
10000cc93:	bf 04 00 00 00	movl	$4, %edi
10000cc98:	4c 89 f2	movq	%r14, %rdx
10000cc9b:	31 c0	xorl	%eax, %eax
10000cc9d:	48 83 c4 08	addq	$8, %rsp
10000cca1:	5b	popq	%rbx
10000cca2:	41 5e	popq	%r14
10000cca4:	41 5f	popq	%r15
10000cca6:	5d	popq	%rbp
10000cca7:	e9 1c 89 02 00	jmp	0x1000355c8
10000ccac:	4c 89 f7	movq	%r14, %rdi
10000ccaf:	48 89 de	movq	%rbx, %rsi
10000ccb2:	e8 39 f3 ff ff	callq	0x10000bff0
10000ccb7:	84 c0	testb	%al, %al
10000ccb9:	74 0b	je	0x10000ccc6
10000ccbb:	48 83 c4 08	addq	$8, %rsp
10000ccbf:	5b	popq	%rbx
10000ccc0:	41 5e	popq	%r14
10000ccc2:	41 5f	popq	%r15
10000ccc4:	5d	popq	%rbp
10000ccc5:	c3	retq
10000ccc6:	0f b6 f8	movzbl	%al, %edi
10000ccc9:	4c 89 f6	movq	%r14, %rsi
10000cccc:	e8 d1 26 03 00	callq	0x10003f3a2
10000ccd1:	eb e8	jmp	0x10000ccbb
10000ccd3:	55	pushq	%rbp
10000ccd4:	48 89 e5	movq	%rsp, %rbp
10000ccd7:	41 56	pushq	%r14
10000ccd9:	53	pushq	%rbx
10000ccda:	48 89 d3	movq	%rdx, %rbx
10000ccdd:	49 89 fe	movq	%rdi, %r14
10000cce0:	48 89 f7	movq	%rsi, %rdi
10000cce3:	48 89 d6	movq	%rdx, %rsi
10000cce6:	e8 6f 53 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10000cceb:	48 85 c0	testq	%rax, %rax
10000ccee:	74 12	je	0x10000cd02
10000ccf0:	4c 89 f7	movq	%r14, %rdi
10000ccf3:	48 89 de	movq	%rbx, %rsi
10000ccf6:	48 89 c2	movq	%rax, %rdx
10000ccf9:	5b	popq	%rbx
10000ccfa:	41 5e	popq	%r14
10000ccfc:	5d	popq	%rbp
10000ccfd:	e9 9a 53 03 00	jmp	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10000cd02:	5b	popq	%rbx
10000cd03:	41 5e	popq	%r14
10000cd05:	5d	popq	%rbp
10000cd06:	c3	retq
10000cd07:	48 85 ff	testq	%rdi, %rdi
10000cd0a:	74 06	je	0x10000cd12
10000cd0c:	48 89 f8	movq	%rdi, %rax
10000cd0f:	31 d2	xorl	%edx, %edx
10000cd11:	c3	retq
10000cd12:	55	pushq	%rbp
10000cd13:	48 89 e5	movq	%rsp, %rbp
10000cd16:	e8 ca 26 03 00	callq	0x10003f3e5
10000cd1b:	85 ff	testl	%edi, %edi
10000cd1d:	74 05	je	0x10000cd24
10000cd1f:	31 c0	xorl	%eax, %eax
10000cd21:	89 fa	movl	%edi, %edx
10000cd23:	c3	retq
10000cd24:	55	pushq	%rbp
10000cd25:	48 89 e5	movq	%rsp, %rbp
10000cd28:	e8 ca 26 03 00	callq	0x10003f3f7
10000cd2d:	55	pushq	%rbp
10000cd2e:	48 89 e5	movq	%rsp, %rbp
10000cd31:	53	pushq	%rbx
10000cd32:	50	pushq	%rax
10000cd33:	31 ff	xorl	%edi, %edi
10000cd35:	e8 56 5f 00 00	callq	0x100012c90
10000cd3a:	48 89 c3	movq	%rax, %rbx
10000cd3d:	48 c7 40 18 08 00 00 00	movq	$8, 24(%rax)
10000cd45:	bf 40 00 00 00	movl	$64, %edi
10000cd4a:	e8 96 07 00 00	callq	0x10000d4e5
10000cd4f:	48 89 43 08	movq	%rax, 8(%rbx)
10000cd53:	48 89 d8	movq	%rbx, %rax
10000cd56:	48 83 c4 08	addq	$8, %rsp
10000cd5a:	5b	popq	%rbx
10000cd5b:	5d	popq	%rbp
10000cd5c:	c3	retq
10000cd5d:	55	pushq	%rbp
10000cd5e:	48 89 e5	movq	%rsp, %rbp
10000cd61:	41 56	pushq	%r14
10000cd63:	53	pushq	%rbx
10000cd64:	49 89 fe	movq	%rdi, %r14
10000cd67:	48 83 7f 10 00	cmpq	$0, 16(%rdi)
10000cd6c:	74 18	je	0x10000cd86
10000cd6e:	31 db	xorl	%ebx, %ebx
10000cd70:	49 8b 46 08	movq	8(%r14), %rax
10000cd74:	48 8b 3c d8	movq	(%rax,%rbx,8), %rdi
10000cd78:	e8 db 4e 03 00	callq	0x100041c58 ## symbol stub for: _os_release
10000cd7d:	48 ff c3	incq	%rbx
10000cd80:	49 3b 5e 10	cmpq	16(%r14), %rbx
10000cd84:	72 ea	jb	0x10000cd70
10000cd86:	49 8b 7e 08	movq	8(%r14), %rdi
10000cd8a:	5b	popq	%rbx
10000cd8b:	41 5e	popq	%r14
10000cd8d:	5d	popq	%rbp
10000cd8e:	e9 9d 4c 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000cd93:	55	pushq	%rbp
10000cd94:	48 89 e5	movq	%rsp, %rbp
10000cd97:	41 57	pushq	%r15
10000cd99:	41 56	pushq	%r14
10000cd9b:	41 54	pushq	%r12
10000cd9d:	53	pushq	%rbx
10000cd9e:	49 89 f6	movq	%rsi, %r14
10000cda1:	48 89 fb	movq	%rdi, %rbx
10000cda4:	48 8b 47 10	movq	16(%rdi), %rax
10000cda8:	48 8b 4f 18	movq	24(%rdi), %rcx
10000cdac:	48 39 c8	cmpq	%rcx, %rax
10000cdaf:	75 4f	jne	0x10000ce00
10000cdb1:	48 01 c0	addq	%rax, %rax
10000cdb4:	48 89 43 18	movq	%rax, 24(%rbx)
10000cdb8:	72 74	jb	0x10000ce2e
10000cdba:	b9 08 00 00 00	movl	$8, %ecx
10000cdbf:	48 f7 e1	mulq	%rcx
10000cdc2:	70 6a	jo	0x10000ce2e
10000cdc4:	48 89 c7	movq	%rax, %rdi
10000cdc7:	e8 19 07 00 00	callq	0x10000d4e5
10000cdcc:	49 89 c7	movq	%rax, %r15
10000cdcf:	b8 08 00 00 00	movl	$8, %eax
10000cdd4:	48 f7 63 10	mulq	16(%rbx)
10000cdd8:	70 54	jo	0x10000ce2e
10000cdda:	4c 8b 63 08	movq	8(%rbx), %r12
10000cdde:	4c 89 ff	movq	%r15, %rdi
10000cde1:	4c 89 e6	movq	%r12, %rsi
10000cde4:	48 89 c2	movq	%rax, %rdx
10000cde7:	e8 e2 4d 03 00	callq	0x100041bce ## symbol stub for: _memcpy
10000cdec:	4c 89 e7	movq	%r12, %rdi
10000cdef:	e8 3c 4c 03 00	callq	0x100041a30 ## symbol stub for: _free
10000cdf4:	4c 89 7b 08	movq	%r15, 8(%rbx)
10000cdf8:	48 8b 43 10	movq	16(%rbx), %rax
10000cdfc:	48 8b 4b 18	movq	24(%rbx), %rcx
10000ce00:	48 39 c8	cmpq	%rcx, %rax
10000ce03:	73 24	jae	0x10000ce29
10000ce05:	4c 89 f7	movq	%r14, %rdi
10000ce08:	e8 51 4e 03 00	callq	0x100041c5e ## symbol stub for: _os_retain
10000ce0d:	48 8b 4b 08	movq	8(%rbx), %rcx
10000ce11:	48 8b 53 10	movq	16(%rbx), %rdx
10000ce15:	48 89 04 d1	movq	%rax, (%rcx,%rdx,8)
10000ce19:	48 ff c2	incq	%rdx
10000ce1c:	48 89 53 10	movq	%rdx, 16(%rbx)
10000ce20:	5b	popq	%rbx
10000ce21:	41 5c	popq	%r12
10000ce23:	41 5e	popq	%r14
10000ce25:	41 5f	popq	%r15
10000ce27:	5d	popq	%rbp
10000ce28:	c3	retq
10000ce29:	e8 db 25 03 00	callq	0x10003f409
10000ce2e:	0f 0b	ud2
10000ce30:	55	pushq	%rbp
10000ce31:	48 89 e5	movq	%rsp, %rbp
10000ce34:	41 56	pushq	%r14
10000ce36:	53	pushq	%rbx
10000ce37:	48 39 77 10	cmpq	%rsi, 16(%rdi)
10000ce3b:	76 4d	jbe	0x10000ce8a
10000ce3d:	49 89 f6	movq	%rsi, %r14
10000ce40:	48 89 fb	movq	%rdi, %rbx
10000ce43:	48 8b 47 08	movq	8(%rdi), %rax
10000ce47:	48 8b 3c f0	movq	(%rax,%rsi,8), %rdi
10000ce4b:	e8 08 4e 03 00	callq	0x100041c58 ## symbol stub for: _os_release
10000ce50:	48 8b 43 08	movq	8(%rbx), %rax
10000ce54:	4a c7 04 f0 00 00 00 00	movq	$0, (%rax,%r14,8)
10000ce5c:	48 8b 53 10	movq	16(%rbx), %rdx
10000ce60:	48 ff ca	decq	%rdx
10000ce63:	48 89 53 10	movq	%rdx, 16(%rbx)
10000ce67:	4c 29 f2	subq	%r14, %rdx
10000ce6a:	76 19	jbe	0x10000ce85
10000ce6c:	48 8b 43 08	movq	8(%rbx), %rax
10000ce70:	4a 8d 3c f0	leaq	(%rax,%r14,8), %rdi
10000ce74:	4a 8d 34 f0	leaq	(%rax,%r14,8), %rsi
10000ce78:	48 83 c6 08	addq	$8, %rsi
10000ce7c:	48 c1 e2 03	shlq	$3, %rdx
10000ce80:	e8 4f 4d 03 00	callq	0x100041bd4 ## symbol stub for: _memmove
10000ce85:	5b	popq	%rbx
10000ce86:	41 5e	popq	%r14
10000ce88:	5d	popq	%rbp
10000ce89:	c3	retq
10000ce8a:	e8 8f 25 03 00	callq	0x10003f41e
10000ce8f:	55	pushq	%rbp
10000ce90:	48 89 e5	movq	%rsp, %rbp
10000ce93:	48 39 77 10	cmpq	%rsi, 16(%rdi)
10000ce97:	76 0a	jbe	0x10000cea3
10000ce99:	48 8b 47 08	movq	8(%rdi), %rax
10000ce9d:	48 8b 04 f0	movq	(%rax,%rsi,8), %rax
10000cea1:	5d	popq	%rbp
10000cea2:	c3	retq
10000cea3:	e8 8b 25 03 00	callq	0x10003f433
10000cea8:	55	pushq	%rbp
10000cea9:	48 89 e5	movq	%rsp, %rbp
10000ceac:	48 8b 47 10	movq	16(%rdi), %rax
10000ceb0:	5d	popq	%rbp
10000ceb1:	c3	retq
10000ceb2:	55	pushq	%rbp
10000ceb3:	48 89 e5	movq	%rsp, %rbp
10000ceb6:	5d	popq	%rbp
10000ceb7:	e9 46 4c 03 00	jmp	0x100041b02 ## symbol stub for: _kdebug_trace
10000cebc:	55	pushq	%rbp
10000cebd:	48 89 e5	movq	%rsp, %rbp
10000cec0:	31 f6	xorl	%esi, %esi
10000cec2:	31 d2	xorl	%edx, %edx
10000cec4:	31 c9	xorl	%ecx, %ecx
10000cec6:	45 31 c0	xorl	%r8d, %r8d
10000cec9:	5d	popq	%rbp
10000ceca:	e9 33 4c 03 00	jmp	0x100041b02 ## symbol stub for: _kdebug_trace
10000cecf:	55	pushq	%rbp
10000ced0:	48 89 e5	movq	%rsp, %rbp
10000ced3:	31 d2	xorl	%edx, %edx
10000ced5:	31 c9	xorl	%ecx, %ecx
10000ced7:	45 31 c0	xorl	%r8d, %r8d
10000ceda:	5d	popq	%rbp
10000cedb:	e9 22 4c 03 00	jmp	0x100041b02 ## symbol stub for: _kdebug_trace
10000cee0:	55	pushq	%rbp
10000cee1:	48 89 e5	movq	%rsp, %rbp
10000cee4:	31 c9	xorl	%ecx, %ecx
10000cee6:	45 31 c0	xorl	%r8d, %r8d
10000cee9:	5d	popq	%rbp
10000ceea:	e9 13 4c 03 00	jmp	0x100041b02 ## symbol stub for: _kdebug_trace
10000ceef:	55	pushq	%rbp
10000cef0:	48 89 e5	movq	%rsp, %rbp
10000cef3:	41 56	pushq	%r14
10000cef5:	53	pushq	%rbx
10000cef6:	48 83 ec 30	subq	$48, %rsp
10000cefa:	41 89 fe	movl	%edi, %r14d
10000cefd:	48 8b 05 24 b1 04 00	movq	307492(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000cf04:	48 8b 00	movq	(%rax), %rax
10000cf07:	48 89 45 e8	movq	%rax, -24(%rbp)
10000cf0b:	0f 28 05 6e 63 03 00	movaps	222062(%rip), %xmm0
10000cf12:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10000cf16:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10000cf1a:	0f 29 03	movaps	%xmm0, (%rbx)
10000cf1d:	ba 20 00 00 00	movl	$32, %edx
10000cf22:	48 89 df	movq	%rbx, %rdi
10000cf25:	e8 38 4f 03 00	callq	0x100041e62 ## symbol stub for: _strncpy
10000cf2a:	48 8b 33	movq	(%rbx), %rsi
10000cf2d:	48 8b 53 08	movq	8(%rbx), %rdx
10000cf31:	48 8b 4b 10	movq	16(%rbx), %rcx
10000cf35:	4c 8b 43 18	movq	24(%rbx), %r8
10000cf39:	44 89 f7	movl	%r14d, %edi
10000cf3c:	e8 c1 4b 03 00	callq	0x100041b02 ## symbol stub for: _kdebug_trace
10000cf41:	48 8b 05 e0 b0 04 00	movq	307424(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000cf48:	48 8b 00	movq	(%rax), %rax
10000cf4b:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10000cf4f:	75 09	jne	0x10000cf5a
10000cf51:	48 83 c4 30	addq	$48, %rsp
10000cf55:	5b	popq	%rbx
10000cf56:	41 5e	popq	%r14
10000cf58:	5d	popq	%rbp
10000cf59:	c3	retq
10000cf5a:	e8 13 48 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000cf5f:	48 85 ff	testq	%rdi, %rdi
10000cf62:	74 06	je	0x10000cf6a
10000cf64:	48 89 f8	movq	%rdi, %rax
10000cf67:	31 d2	xorl	%edx, %edx
10000cf69:	c3	retq
10000cf6a:	55	pushq	%rbp
10000cf6b:	48 89 e5	movq	%rsp, %rbp
10000cf6e:	e8 d5 24 03 00	callq	0x10003f448
10000cf73:	85 ff	testl	%edi, %edi
10000cf75:	74 05	je	0x10000cf7c
10000cf77:	31 c0	xorl	%eax, %eax
10000cf79:	89 fa	movl	%edi, %edx
10000cf7b:	c3	retq
10000cf7c:	55	pushq	%rbp
10000cf7d:	48 89 e5	movq	%rsp, %rbp
10000cf80:	e8 d5 24 03 00	callq	0x10003f45a
10000cf85:	55	pushq	%rbp
10000cf86:	48 89 e5	movq	%rsp, %rbp
10000cf89:	41 57	pushq	%r15
10000cf8b:	41 56	pushq	%r14
10000cf8d:	41 55	pushq	%r13
10000cf8f:	41 54	pushq	%r12
10000cf91:	53	pushq	%rbx
10000cf92:	50	pushq	%rax
10000cf93:	48 85 ff	testq	%rdi, %rdi
10000cf96:	0f 84 82 00 00 00	je	0x10000d01e
10000cf9c:	41 89 cd	movl	%ecx, %r13d
10000cf9f:	49 89 d7	movq	%rdx, %r15
10000cfa2:	49 89 f4	movq	%rsi, %r12
10000cfa5:	49 89 fe	movq	%rdi, %r14
10000cfa8:	4c 89 45 d0	movq	%r8, -48(%rbp)
10000cfac:	31 ff	xorl	%edi, %edi
10000cfae:	e8 97 5f 00 00	callq	0x100012f4a
10000cfb3:	48 89 c3	movq	%rax, %rbx
10000cfb6:	c6 40 08 00	movb	$0, 8(%rax)
10000cfba:	44 89 68 0c	movl	%r13d, 12(%rax)
10000cfbe:	4c 89 70 10	movq	%r14, 16(%rax)
10000cfc2:	48 c7 40 18 01 00 00 00	movq	$1, 24(%rax)
10000cfca:	48 c7 40 20 00 00 00 00	movq	$0, 32(%rax)
10000cfd2:	4d 85 e4	testq	%r12, %r12
10000cfd5:	74 0c	je	0x10000cfe3
10000cfd7:	4c 89 e7	movq	%r12, %rdi
10000cfda:	e8 03 20 00 00	callq	0x10000efe2
10000cfdf:	48 89 43 20	movq	%rax, 32(%rbx)
10000cfe3:	48 c7 43 28 00 00 00 00	movq	$0, 40(%rbx)
10000cfeb:	4d 85 ff	testq	%r15, %r15
10000cfee:	74 0c	je	0x10000cffc
10000cff0:	4c 89 ff	movq	%r15, %rdi
10000cff3:	e8 ea 1f 00 00	callq	0x10000efe2
10000cff8:	48 89 43 28	movq	%rax, 40(%rbx)
10000cffc:	48 c7 43 30 00 00 00 00	movq	$0, 48(%rbx)
10000d004:	48 8b 45 d0	movq	-48(%rbp), %rax
10000d008:	48 89 43 38	movq	%rax, 56(%rbx)
10000d00c:	48 89 d8	movq	%rbx, %rax
10000d00f:	48 83 c4 08	addq	$8, %rsp
10000d013:	5b	popq	%rbx
10000d014:	41 5c	popq	%r12
10000d016:	41 5d	popq	%r13
10000d018:	41 5e	popq	%r14
10000d01a:	41 5f	popq	%r15
10000d01c:	5d	popq	%rbp
10000d01d:	c3	retq
10000d01e:	e8 49 24 03 00	callq	0x10003f46c
10000d023:	55	pushq	%rbp
10000d024:	48 89 e5	movq	%rsp, %rbp
10000d027:	53	pushq	%rbx
10000d028:	50	pushq	%rax
10000d029:	80 7f 08 02	cmpb	$2, 8(%rdi)
10000d02d:	75 2b	jne	0x10000d05a
10000d02f:	48 89 fb	movq	%rdi, %rbx
10000d032:	48 83 7f 18 00	cmpq	$0, 24(%rdi)
10000d037:	75 26	jne	0x10000d05f
10000d039:	48 8b 7b 20	movq	32(%rbx), %rdi
10000d03d:	e8 ee 49 03 00	callq	0x100041a30 ## symbol stub for: _free
10000d042:	48 8b 7b 28	movq	40(%rbx), %rdi
10000d046:	e8 e5 49 03 00	callq	0x100041a30 ## symbol stub for: _free
10000d04b:	48 8b 7b 30	movq	48(%rbx), %rdi
10000d04f:	48 83 c4 08	addq	$8, %rsp
10000d053:	5b	popq	%rbx
10000d054:	5d	popq	%rbp
10000d055:	e9 d6 49 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000d05a:	e8 37 24 03 00	callq	0x10003f496
10000d05f:	e8 1d 24 03 00	callq	0x10003f481
10000d064:	55	pushq	%rbp
10000d065:	48 89 e5	movq	%rsp, %rbp
10000d068:	48 8b 47 18	movq	24(%rdi), %rax
10000d06c:	48 85 c0	testq	%rax, %rax
10000d06f:	74 12	je	0x10000d083
10000d071:	80 7f 08 00	cmpb	$0, 8(%rdi)
10000d075:	75 11	jne	0x10000d088
10000d077:	48 ff c0	incq	%rax
10000d07a:	48 89 47 18	movq	%rax, 24(%rdi)
10000d07e:	48 89 f8	movq	%rdi, %rax
10000d081:	5d	popq	%rbp
10000d082:	c3	retq
10000d083:	e8 23 24 03 00	callq	0x10003f4ab
10000d088:	e8 33 24 03 00	callq	0x10003f4c0
10000d08d:	55	pushq	%rbp
10000d08e:	48 89 e5	movq	%rsp, %rbp
10000d091:	53	pushq	%rbx
10000d092:	50	pushq	%rax
10000d093:	48 8b 47 18	movq	24(%rdi), %rax
10000d097:	48 85 c0	testq	%rax, %rax
10000d09a:	74 27	je	0x10000d0c3
10000d09c:	48 89 fb	movq	%rdi, %rbx
10000d09f:	80 7f 08 00	cmpb	$0, 8(%rdi)
10000d0a3:	75 23	jne	0x10000d0c8
10000d0a5:	48 ff c8	decq	%rax
10000d0a8:	48 89 43 18	movq	%rax, 24(%rbx)
10000d0ac:	75 0b	jne	0x10000d0b9
10000d0ae:	c6 43 08 01	movb	$1, 8(%rbx)
10000d0b2:	48 8b 7b 10	movq	16(%rbx), %rdi
10000d0b6:	ff 53 38	callq	*56(%rbx)
10000d0b9:	48 89 d8	movq	%rbx, %rax
10000d0bc:	48 83 c4 08	addq	$8, %rsp
10000d0c0:	5b	popq	%rbx
10000d0c1:	5d	popq	%rbp
10000d0c2:	c3	retq
10000d0c3:	e8 0d 24 03 00	callq	0x10003f4d5
10000d0c8:	e8 1d 24 03 00	callq	0x10003f4ea
10000d0cd:	55	pushq	%rbp
10000d0ce:	48 89 e5	movq	%rsp, %rbp
10000d0d1:	53	pushq	%rbx
10000d0d2:	50	pushq	%rax
10000d0d3:	48 83 7f 18 00	cmpq	$0, 24(%rdi)
10000d0d8:	75 2d	jne	0x10000d107
10000d0da:	48 89 fb	movq	%rdi, %rbx
10000d0dd:	80 7f 08 01	cmpb	$1, 8(%rdi)
10000d0e1:	75 29	jne	0x10000d10c
10000d0e3:	48 89 f0	movq	%rsi, %rax
10000d0e6:	c6 43 08 02	movb	$2, 8(%rbx)
10000d0ea:	48 85 f6	testq	%rsi, %rsi
10000d0ed:	74 11	je	0x10000d100
10000d0ef:	be 18 01 00 00	movl	$280, %esi
10000d0f4:	48 89 c7	movq	%rax, %rdi
10000d0f7:	e8 bf 1e 00 00	callq	0x10000efbb
10000d0fc:	48 89 43 30	movq	%rax, 48(%rbx)
10000d100:	48 83 c4 08	addq	$8, %rsp
10000d104:	5b	popq	%rbx
10000d105:	5d	popq	%rbp
10000d106:	c3	retq
10000d107:	e8 08 24 03 00	callq	0x10003f514
10000d10c:	e8 ee 23 03 00	callq	0x10003f4ff
10000d111:	55	pushq	%rbp
10000d112:	48 89 e5	movq	%rsp, %rbp
10000d115:	48 8b 47 10	movq	16(%rdi), %rax
10000d119:	5d	popq	%rbp
10000d11a:	c3	retq
10000d11b:	55	pushq	%rbp
10000d11c:	48 89 e5	movq	%rsp, %rbp
10000d11f:	48 8b 47 20	movq	32(%rdi), %rax
10000d123:	5d	popq	%rbp
10000d124:	c3	retq
10000d125:	55	pushq	%rbp
10000d126:	48 89 e5	movq	%rsp, %rbp
10000d129:	48 8b 47 28	movq	40(%rdi), %rax
10000d12d:	5d	popq	%rbp
10000d12e:	c3	retq
10000d12f:	55	pushq	%rbp
10000d130:	48 89 e5	movq	%rsp, %rbp
10000d133:	48 8b 47 30	movq	48(%rdi), %rax
10000d137:	5d	popq	%rbp
10000d138:	c3	retq
10000d139:	55	pushq	%rbp
10000d13a:	48 89 e5	movq	%rsp, %rbp
10000d13d:	8b 47 0c	movl	12(%rdi), %eax
10000d140:	5d	popq	%rbp
10000d141:	c3	retq
10000d142:	55	pushq	%rbp
10000d143:	48 89 e5	movq	%rsp, %rbp
10000d146:	40 38 77 08	cmpb	%sil, 8(%rdi)
10000d14a:	75 02	jne	0x10000d14e
10000d14c:	5d	popq	%rbp
10000d14d:	c3	retq
10000d14e:	e8 d6 23 03 00	callq	0x10003f529
10000d153:	48 85 ff	testq	%rdi, %rdi
10000d156:	74 06	je	0x10000d15e
10000d158:	48 89 f8	movq	%rdi, %rax
10000d15b:	31 d2	xorl	%edx, %edx
10000d15d:	c3	retq
10000d15e:	55	pushq	%rbp
10000d15f:	48 89 e5	movq	%rsp, %rbp
10000d162:	e8 d7 23 03 00	callq	0x10003f53e
10000d167:	85 ff	testl	%edi, %edi
10000d169:	74 05	je	0x10000d170
10000d16b:	31 c0	xorl	%eax, %eax
10000d16d:	89 fa	movl	%edi, %edx
10000d16f:	c3	retq
10000d170:	55	pushq	%rbp
10000d171:	48 89 e5	movq	%rsp, %rbp
10000d174:	e8 d7 23 03 00	callq	0x10003f550
10000d179:	55	pushq	%rbp
10000d17a:	48 89 e5	movq	%rsp, %rbp
10000d17d:	41 57	pushq	%r15
10000d17f:	41 56	pushq	%r14
10000d181:	53	pushq	%rbx
10000d182:	48 81 ec 98 00 00 00	subq	$152, %rsp
10000d189:	89 cb	movl	%ecx, %ebx
10000d18b:	49 89 d6	movq	%rdx, %r14
10000d18e:	48 8b 05 93 ae 04 00	movq	306835(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000d195:	48 8b 00	movq	(%rax), %rax
10000d198:	48 89 45 e0	movq	%rax, -32(%rbp)
10000d19c:	0f 28 05 dd 60 03 00	movaps	221405(%rip), %xmm0
10000d1a3:	0f 29 45 d0	movaps	%xmm0, -48(%rbp)
10000d1a7:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10000d1ab:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10000d1af:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10000d1b3:	48 8d 05 8e 54 05 00	leaq	349326(%rip), %rax
10000d1ba:	4c 8b 38	movq	(%rax), %r15
10000d1bd:	48 8d 05 c6 b0 03 00	leaq	241862(%rip), %rax ## literal pool for: "xpcproxy"
10000d1c4:	48 89 45 80	movq	%rax, -128(%rbp)
10000d1c8:	48 89 7d 88	movq	%rdi, -120(%rbp)
10000d1cc:	48 89 75 90	movq	%rsi, -112(%rbp)
10000d1d0:	48 c7 45 98 00 00 00 00	movq	$0, -104(%rbp)
10000d1d8:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10000d1e2:	48 8d bd 58 ff ff ff	leaq	-168(%rbp), %rdi
10000d1e9:	48 89 07	movq	%rax, (%rdi)
10000d1ec:	e8 eb 4a 03 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
10000d1f1:	85 c0	testl	%eax, %eax
10000d1f3:	0f 85 e7 00 00 00	jne	0x10000d2e0
10000d1f9:	48 8d bd 58 ff ff ff	leaq	-168(%rbp), %rdi
10000d200:	be 0c 40 00 00	movl	$16396, %esi
10000d205:	e8 0e 4b 03 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
10000d20a:	85 c0	testl	%eax, %eax
10000d20c:	0f 85 d5 00 00 00	jne	0x10000d2e7
10000d212:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
10000d219:	c7 06 00 00 00 00	movl	$0, (%rsi)
10000d21f:	48 8d bd 58 ff ff ff	leaq	-168(%rbp), %rdi
10000d226:	e8 05 4b 03 00	callq	0x100041d30 ## symbol stub for: _posix_spawnattr_setsigmask
10000d22b:	85 c0	testl	%eax, %eax
10000d22d:	0f 85 bb 00 00 00	jne	0x10000d2ee
10000d233:	48 8d b5 54 ff ff ff	leaq	-172(%rbp), %rsi
10000d23a:	c7 06 ff ff ff ff	movl	$4294967295, (%rsi)
10000d240:	48 8d bd 58 ff ff ff	leaq	-168(%rbp), %rdi
10000d247:	e8 de 4a 03 00	callq	0x100041d2a ## symbol stub for: _posix_spawnattr_setsigdefault
10000d24c:	85 c0	testl	%eax, %eax
10000d24e:	0f 85 a1 00 00 00	jne	0x10000d2f5
10000d254:	80 f3 01	xorb	$1, %bl
10000d257:	0f b6 fb	movzbl	%bl, %edi
10000d25a:	48 83 cf 02	orq	$2, %rdi
10000d25e:	48 c1 e7 08	shlq	$8, %rdi
10000d262:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000d266:	48 89 b5 60 ff ff ff	movq	%rsi, -160(%rbp)
10000d26d:	48 8d 05 1f b0 03 00	leaq	241695(%rip), %rax ## literal pool for: "XPC_NULL_BOOTSTRAP=1"
10000d274:	48 89 85 68 ff ff ff	movq	%rax, -152(%rbp)
10000d27b:	48 c7 85 70 ff ff ff 00 00 00 00	movq	$0, -144(%rbp)
10000d286:	e8 64 fe 02 00	callq	0x10003d0ef
10000d28b:	48 8d 05 ce 54 05 00	leaq	349390(%rip), %rax
10000d292:	80 38 00	cmpb	$0, (%rax)
10000d295:	75 0c	jne	0x10000d2a3
10000d297:	48 8d 05 fa 54 05 00	leaq	349434(%rip), %rax
10000d29e:	4c 8b 08	movq	(%rax), %r9
10000d2a1:	eb 07	jmp	0x10000d2aa
10000d2a3:	4c 8d 8d 60 ff ff ff	leaq	-160(%rbp), %r9
10000d2aa:	48 8d 8d 58 ff ff ff	leaq	-168(%rbp), %rcx
10000d2b1:	4c 8d 45 80	leaq	-128(%rbp), %r8
10000d2b5:	4c 89 f7	movq	%r14, %rdi
10000d2b8:	4c 89 fe	movq	%r15, %rsi
10000d2bb:	31 d2	xorl	%edx, %edx
10000d2bd:	e8 fc 49 03 00	callq	0x100041cbe ## symbol stub for: _posix_spawn
10000d2c2:	48 8b 0d 5f ad 04 00	movq	306527(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000d2c9:	48 8b 09	movq	(%rcx), %rcx
10000d2cc:	48 3b 4d e0	cmpq	-32(%rbp), %rcx
10000d2d0:	75 2a	jne	0x10000d2fc
10000d2d2:	48 81 c4 98 00 00 00	addq	$152, %rsp
10000d2d9:	5b	popq	%rbx
10000d2da:	41 5e	popq	%r14
10000d2dc:	41 5f	popq	%r15
10000d2de:	5d	popq	%rbp
10000d2df:	c3	retq
10000d2e0:	89 c7	movl	%eax, %edi
10000d2e2:	e8 bd 22 03 00	callq	0x10003f5a4
10000d2e7:	89 c7	movl	%eax, %edi
10000d2e9:	e8 a0 22 03 00	callq	0x10003f58e
10000d2ee:	89 c7	movl	%eax, %edi
10000d2f0:	e8 83 22 03 00	callq	0x10003f578
10000d2f5:	89 c7	movl	%eax, %edi
10000d2f7:	e8 66 22 03 00	callq	0x10003f562
10000d2fc:	e8 71 44 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000d301:	55	pushq	%rbp
10000d302:	48 89 e5	movq	%rsp, %rbp
10000d305:	41 57	pushq	%r15
10000d307:	41 56	pushq	%r14
10000d309:	53	pushq	%rbx
10000d30a:	48 81 ec e8 04 00 00	subq	$1256, %rsp
10000d311:	49 89 fe	movq	%rdi, %r14
10000d314:	48 8d bd 00 fb ff ff	leaq	-1280(%rbp), %rdi
10000d31b:	48 89 77 08	movq	%rsi, 8(%rdi)
10000d31f:	48 89 57 10	movq	%rdx, 16(%rdi)
10000d323:	48 89 4f 18	movq	%rcx, 24(%rdi)
10000d327:	4c 89 47 20	movq	%r8, 32(%rdi)
10000d32b:	4c 89 4f 28	movq	%r9, 40(%rdi)
10000d32f:	84 c0	testb	%al, %al
10000d331:	74 38	je	0x10000d36b
10000d333:	0f 29 85 30 fb ff ff	movaps	%xmm0, -1232(%rbp)
10000d33a:	0f 29 8d 40 fb ff ff	movaps	%xmm1, -1216(%rbp)
10000d341:	0f 29 95 50 fb ff ff	movaps	%xmm2, -1200(%rbp)
10000d348:	0f 29 9d 60 fb ff ff	movaps	%xmm3, -1184(%rbp)
10000d34f:	0f 29 a5 70 fb ff ff	movaps	%xmm4, -1168(%rbp)
10000d356:	0f 29 ad 80 fb ff ff	movaps	%xmm5, -1152(%rbp)
10000d35d:	0f 29 b5 90 fb ff ff	movaps	%xmm6, -1136(%rbp)
10000d364:	0f 29 bd a0 fb ff ff	movaps	%xmm7, -1120(%rbp)
10000d36b:	48 8b 05 b6 ac 04 00	movq	306358(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000d372:	48 8b 00	movq	(%rax), %rax
10000d375:	48 89 45 e0	movq	%rax, -32(%rbp)
10000d379:	0f 28 05 00 5f 03 00	movaps	220928(%rip), %xmm0
10000d380:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10000d384:	0f 29 03	movaps	%xmm0, (%rbx)
10000d387:	48 89 7b 10	movq	%rdi, 16(%rbx)
10000d38b:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000d395:	48 89 03	movq	%rax, (%rbx)
10000d398:	48 8d 45 10	leaq	16(%rbp), %rax
10000d39c:	48 89 43 08	movq	%rax, 8(%rbx)
10000d3a0:	4c 8d bd c0 fb ff ff	leaq	-1088(%rbp), %r15
10000d3a7:	ba 00 04 00 00	movl	$1024, %edx
10000d3ac:	4c 89 ff	movq	%r15, %rdi
10000d3af:	be aa 00 00 00	movl	$170, %esi
10000d3b4:	e8 21 48 03 00	callq	0x100041bda ## symbol stub for: _memset
10000d3b9:	be 00 04 00 00	movl	$1024, %esi
10000d3be:	4c 89 ff	movq	%r15, %rdi
10000d3c1:	4c 89 f2	movq	%r14, %rdx
10000d3c4:	48 89 d9	movq	%rbx, %rcx
10000d3c7:	e8 44 4b 03 00	callq	0x100041f10 ## symbol stub for: _vsnprintf
10000d3cc:	48 8d 95 bc fb ff ff	leaq	-1092(%rbp), %rdx
10000d3d3:	c7 02 00 00 00 00	movl	$0, (%rdx)
10000d3d9:	48 8d 3d 56 a6 03 00	leaq	239190(%rip), %rdi ## literal pool for: "/dev/console"
10000d3e0:	4c 89 fe	movq	%r15, %rsi
10000d3e3:	31 c9	xorl	%ecx, %ecx
10000d3e5:	e8 8f fd ff ff	callq	0x10000d179
10000d3ea:	85 c0	testl	%eax, %eax
10000d3ec:	74 21	je	0x10000d40f
10000d3ee:	89 c3	movl	%eax, %ebx
10000d3f0:	89 c7	movl	%eax, %edi
10000d3f2:	e8 47 4a 03 00	callq	0x100041e3e ## symbol stub for: _strerror
10000d3f7:	48 8d 35 6e ae 03 00	leaq	241262(%rip), %rsi ## literal pool for: "Could not spawn shell: %d: %s"
10000d3fe:	bf 04 00 01 00	movl	$65540, %edi
10000d403:	89 da	movl	%ebx, %edx
10000d405:	48 89 c1	movq	%rax, %rcx
10000d408:	31 c0	xorl	%eax, %eax
10000d40a:	e8 b9 81 02 00	callq	0x1000355c8
10000d40f:	8b 85 bc fb ff ff	movl	-1092(%rbp), %eax
10000d415:	48 8b 0d 0c ac 04 00	movq	306188(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000d41c:	48 8b 09	movq	(%rcx), %rcx
10000d41f:	48 3b 4d e0	cmpq	-32(%rbp), %rcx
10000d423:	75 0e	jne	0x10000d433
10000d425:	48 81 c4 e8 04 00 00	addq	$1256, %rsp
10000d42c:	5b	popq	%rbx
10000d42d:	41 5e	popq	%r14
10000d42f:	41 5f	popq	%r15
10000d431:	5d	popq	%rbp
10000d432:	c3	retq
10000d433:	e8 3a 43 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000d438:	55	pushq	%rbp
10000d439:	48 89 e5	movq	%rsp, %rbp
10000d43c:	41 56	pushq	%r14
10000d43e:	53	pushq	%rbx
10000d43f:	49 89 f6	movq	%rsi, %r14
10000d442:	48 89 fb	movq	%rdi, %rbx
10000d445:	be 98 05 00 00	movl	$1432, %esi
10000d44a:	e8 0b 43 03 00	callq	0x10004175a ## symbol stub for: ___bzero
10000d44f:	48 b8 9b ff ff ff 9b ff ff ff	movabsq	$-429496729701, %rax
10000d459:	48 89 83 68 04 00 00	movq	%rax, 1128(%rbx)
10000d460:	48 89 df	movq	%rbx, %rdi
10000d463:	e8 74 48 03 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
10000d468:	85 c0	testl	%eax, %eax
10000d46a:	75 19	jne	0x10000d485
10000d46c:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000d470:	e8 5b 48 03 00	callq	0x100041cd0 ## symbol stub for: _posix_spawn_file_actions_init
10000d475:	85 c0	testl	%eax, %eax
10000d477:	75 13	jne	0x10000d48c
10000d479:	4c 89 b3 b8 04 00 00	movq	%r14, 1208(%rbx)
10000d480:	5b	popq	%rbx
10000d481:	41 5e	popq	%r14
10000d483:	5d	popq	%rbp
10000d484:	c3	retq
10000d485:	89 c7	movl	%eax, %edi
10000d487:	e8 44 21 03 00	callq	0x10003f5d0
10000d48c:	89 c7	movl	%eax, %edi
10000d48e:	e8 27 21 03 00	callq	0x10003f5ba
10000d493:	55	pushq	%rbp
10000d494:	48 89 e5	movq	%rsp, %rbp
10000d497:	53	pushq	%rbx
10000d498:	50	pushq	%rax
10000d499:	48 89 fb	movq	%rdi, %rbx
10000d49c:	e8 35 48 03 00	callq	0x100041cd6 ## symbol stub for: _posix_spawnattr_destroy
10000d4a1:	48 8d 7b 08	leaq	8(%rbx), %rdi
10000d4a5:	e8 20 48 03 00	callq	0x100041cca ## symbol stub for: _posix_spawn_file_actions_destroy
10000d4aa:	48 8b bb 90 05 00 00	movq	1424(%rbx), %rdi
10000d4b1:	48 85 ff	testq	%rdi, %rdi
10000d4b4:	74 11	je	0x10000d4c7
10000d4b6:	48 8b 07	movq	(%rdi), %rax
10000d4b9:	48 89 83 90 05 00 00	movq	%rax, 1424(%rbx)
10000d4c0:	e8 6b 45 03 00	callq	0x100041a30 ## symbol stub for: _free
10000d4c5:	eb e3	jmp	0x10000d4aa
10000d4c7:	48 8b bb c0 04 00 00	movq	1216(%rbx), %rdi
10000d4ce:	e8 5d 45 03 00	callq	0x100041a30 ## symbol stub for: _free
10000d4d3:	48 8b bb d0 04 00 00	movq	1232(%rbx), %rdi
10000d4da:	48 83 c4 08	addq	$8, %rsp
10000d4de:	5b	popq	%rbx
10000d4df:	5d	popq	%rbp
10000d4e0:	e9 4b 45 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000d4e5:	55	pushq	%rbp
10000d4e6:	48 89 e5	movq	%rsp, %rbp
10000d4e9:	41 56	pushq	%r14
10000d4eb:	53	pushq	%rbx
10000d4ec:	49 89 fe	movq	%rdi, %r14
10000d4ef:	bf 01 00 00 00	movl	$1, %edi
10000d4f4:	4c 89 f6	movq	%r14, %rsi
10000d4f7:	e8 1e 43 03 00	callq	0x10004181a ## symbol stub for: _calloc
10000d4fc:	48 89 c3	movq	%rax, %rbx
10000d4ff:	48 85 c0	testq	%rax, %rax
10000d502:	75 1e	jne	0x10000d522
10000d504:	e8 57 42 03 00	callq	0x100041760 ## symbol stub for: ___error
10000d509:	83 38 0c	cmpl	$12, (%rax)
10000d50c:	74 0b	je	0x10000d519
10000d50e:	e8 4d 42 03 00	callq	0x100041760 ## symbol stub for: ___error
10000d513:	8b 38	movl	(%rax), %edi
10000d515:	85 ff	testl	%edi, %edi
10000d517:	75 11	jne	0x10000d52a
10000d519:	e8 88 1a 00 00	callq	0x10000efa6
10000d51e:	85 c0	testl	%eax, %eax
10000d520:	75 cd	jne	0x10000d4ef
10000d522:	48 89 d8	movq	%rbx, %rax
10000d525:	5b	popq	%rbx
10000d526:	41 5e	popq	%r14
10000d528:	5d	popq	%rbp
10000d529:	c3	retq
10000d52a:	e8 b7 20 03 00	callq	0x10003f5e6
10000d52f:	55	pushq	%rbp
10000d530:	48 89 e5	movq	%rsp, %rbp
10000d533:	41 57	pushq	%r15
10000d535:	41 56	pushq	%r14
10000d537:	53	pushq	%rbx
10000d538:	50	pushq	%rax
10000d539:	49 89 d6	movq	%rdx, %r14
10000d53c:	49 89 ff	movq	%rdi, %r15
10000d53f:	4c 89 ff	movq	%r15, %rdi
10000d542:	4c 89 f6	movq	%r14, %rsi
10000d545:	e8 46 48 03 00	callq	0x100041d90 ## symbol stub for: _realloc
10000d54a:	48 89 c3	movq	%rax, %rbx
10000d54d:	48 85 c0	testq	%rax, %rax
10000d550:	75 1e	jne	0x10000d570
10000d552:	e8 09 42 03 00	callq	0x100041760 ## symbol stub for: ___error
10000d557:	83 38 0c	cmpl	$12, (%rax)
10000d55a:	74 0b	je	0x10000d567
10000d55c:	e8 ff 41 03 00	callq	0x100041760 ## symbol stub for: ___error
10000d561:	8b 38	movl	(%rax), %edi
10000d563:	85 ff	testl	%edi, %edi
10000d565:	75 17	jne	0x10000d57e
10000d567:	e8 3a 1a 00 00	callq	0x10000efa6
10000d56c:	85 c0	testl	%eax, %eax
10000d56e:	75 cf	jne	0x10000d53f
10000d570:	48 89 d8	movq	%rbx, %rax
10000d573:	48 83 c4 08	addq	$8, %rsp
10000d577:	5b	popq	%rbx
10000d578:	41 5e	popq	%r14
10000d57a:	41 5f	popq	%r15
10000d57c:	5d	popq	%rbp
10000d57d:	c3	retq
10000d57e:	e8 79 20 03 00	callq	0x10003f5fc
10000d583:	90	nop
10000d584:	48 85 ff	testq	%rdi, %rdi
10000d587:	74 06	je	0x10000d58f
10000d589:	48 89 f8	movq	%rdi, %rax
10000d58c:	31 d2	xorl	%edx, %edx
10000d58e:	c3	retq
10000d58f:	55	pushq	%rbp
10000d590:	48 89 e5	movq	%rsp, %rbp
10000d593:	e8 7c 20 03 00	callq	0x10003f614
10000d598:	85 ff	testl	%edi, %edi
10000d59a:	74 05	je	0x10000d5a1
10000d59c:	31 c0	xorl	%eax, %eax
10000d59e:	89 fa	movl	%edi, %edx
10000d5a0:	c3	retq
10000d5a1:	55	pushq	%rbp
10000d5a2:	48 89 e5	movq	%rsp, %rbp
10000d5a5:	e8 7c 20 03 00	callq	0x10003f626
10000d5aa:	55	pushq	%rbp
10000d5ab:	48 89 e5	movq	%rsp, %rbp
10000d5ae:	31 c0	xorl	%eax, %eax
10000d5b0:	89 05 42 58 05 00	movl	%eax, 350274(%rip)
10000d5b6:	89 05 40 58 05 00	movl	%eax, 350272(%rip)
10000d5bc:	89 05 3e 58 05 00	movl	%eax, 350270(%rip)
10000d5c2:	48 c7 05 3b 58 05 00 00 00 00 00	movq	$0, 350267(%rip)
10000d5cd:	48 8b 3d 3c 58 05 00	movq	350268(%rip), %rdi
10000d5d4:	48 85 ff	testq	%rdi, %rdi
10000d5d7:	74 10	je	0x10000d5e9
10000d5d9:	e8 7a 43 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10000d5de:	48 c7 05 27 58 05 00 00 00 00 00	movq	$0, 350247(%rip)
10000d5e9:	5d	popq	%rbp
10000d5ea:	c3	retq
10000d5eb:	55	pushq	%rbp
10000d5ec:	48 89 e5	movq	%rsp, %rbp
10000d5ef:	41 56	pushq	%r14
10000d5f1:	53	pushq	%rbx
10000d5f2:	83 3d ff 57 05 00 02	cmpl	$2, 350207(%rip)
10000d5f9:	0f 83 2e 01 00 00	jae	0x10000d72d
10000d5ff:	4c 8d 35 5e 50 05 00	leaq	348254(%rip), %r14
10000d606:	49 63 06	movslq	(%r14), %rax
10000d609:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
10000d610:	31 db	xorl	%ebx, %ebx
10000d612:	31 ff	xorl	%edi, %edi
10000d614:	e8 bd 43 03 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10000d619:	41 83 3e 01	cmpl	$1, (%r14)
10000d61d:	48 19 db	sbbq	%rbx, %rbx
10000d620:	48 09 c3	orq	%rax, %rbx
10000d623:	31 ff	xorl	%edi, %edi
10000d625:	be 21 00 00 00	movl	$33, %esi
10000d62a:	31 d2	xorl	%edx, %edx
10000d62c:	e8 1b 43 03 00	callq	0x10004194c ## symbol stub for: _dispatch_queue_attr_make_with_qos_class
10000d631:	48 8d 3d 99 ac 03 00	leaq	240793(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.timeout"
10000d638:	48 89 c6	movq	%rax, %rsi
10000d63b:	e8 12 43 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000d640:	48 8b 3d 31 aa 04 00	movq	305713(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10000d647:	31 f6	xorl	%esi, %esi
10000d649:	31 d2	xorl	%edx, %edx
10000d64b:	48 89 c1	movq	%rax, %rcx
10000d64e:	e8 2f 43 03 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10000d653:	48 89 05 b6 57 05 00	movq	%rax, 350134(%rip)
10000d65a:	48 89 c7	movq	%rax, %rdi
10000d65d:	48 89 de	movq	%rbx, %rsi
10000d660:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10000d667:	31 c9	xorl	%ecx, %ecx
10000d669:	e8 50 43 03 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10000d66e:	48 8b 1d 9b 57 05 00	movq	350107(%rip), %rbx
10000d675:	e8 23 d9 01 00	callq	0x10002af9d
10000d67a:	48 89 df	movq	%rbx, %rdi
10000d67d:	48 89 c6	movq	%rax, %rsi
10000d680:	e8 f1 42 03 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10000d685:	48 8b 3d 84 57 05 00	movq	350084(%rip), %rdi
10000d68c:	48 8d 35 9f 00 00 00	leaq	159(%rip), %rsi
10000d693:	e8 0e 43 03 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10000d698:	48 8b 3d 71 57 05 00	movq	350065(%rip), %rdi
10000d69f:	e8 1e 42 03 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10000d6a4:	4c 8d 35 d5 55 05 00	leaq	349653(%rip), %r14
10000d6ab:	41 83 3e 00	cmpl	$0, (%r14)
10000d6af:	74 69	je	0x10000d71a
10000d6b1:	e8 44 0e 00 00	callq	0x10000e4fa
10000d6b6:	48 8b 3d bb a9 04 00	movq	305595(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10000d6bd:	ba 01 00 00 00	movl	$1, %edx
10000d6c2:	31 f6	xorl	%esi, %esi
10000d6c4:	48 89 c1	movq	%rax, %rcx
10000d6c7:	e8 b6 42 03 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10000d6cc:	48 89 c3	movq	%rax, %rbx
10000d6cf:	49 63 06	movslq	(%r14), %rax
10000d6d2:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
10000d6d9:	31 ff	xorl	%edi, %edi
10000d6db:	e8 f6 42 03 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10000d6e0:	48 89 df	movq	%rbx, %rdi
10000d6e3:	48 89 c6	movq	%rax, %rsi
10000d6e6:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10000d6ed:	31 c9	xorl	%ecx, %ecx
10000d6ef:	e8 ca 42 03 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10000d6f4:	48 8b 35 15 57 05 00	movq	349973(%rip), %rsi
10000d6fb:	48 89 df	movq	%rbx, %rdi
10000d6fe:	e8 73 42 03 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10000d703:	48 8d 35 78 00 00 00	leaq	120(%rip), %rsi
10000d70a:	48 89 df	movq	%rbx, %rdi
10000d70d:	e8 94 42 03 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10000d712:	48 89 df	movq	%rbx, %rdi
10000d715:	e8 a8 41 03 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10000d71a:	e8 68 01 00 00	callq	0x10000d887
10000d71f:	bf 02 00 00 00	movl	$2, %edi
10000d724:	5b	popq	%rbx
10000d725:	41 5e	popq	%r14
10000d727:	5d	popq	%rbp
10000d728:	e9 2c 02 00 00	jmp	0x10000d959
10000d72d:	e8 06 1f 03 00	callq	0x10003f638
10000d732:	55	pushq	%rbp
10000d733:	48 89 e5	movq	%rsp, %rbp
10000d736:	53	pushq	%rbx
10000d737:	48 83 ec 28	subq	$40, %rsp
10000d73b:	48 89 fb	movq	%rdi, %rbx
10000d73e:	e8 b7 0d 00 00	callq	0x10000e4fa
10000d743:	48 8b 0d ce a8 04 00	movq	305358(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000d74a:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000d74e:	48 89 0e	movq	%rcx, (%rsi)
10000d751:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000d759:	48 8d 0d d2 07 00 00	leaq	2002(%rip), %rcx
10000d760:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000d764:	48 8d 0d bd ce 04 00	leaq	315069(%rip), %rcx
10000d76b:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000d76f:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000d773:	48 89 c7	movq	%rax, %rdi
10000d776:	e8 5f 41 03 00	callq	0x1000418da ## symbol stub for: _dispatch_async_and_wait
10000d77b:	48 83 c4 28	addq	$40, %rsp
10000d77f:	5b	popq	%rbx
10000d780:	5d	popq	%rbp
10000d781:	c3	retq
10000d782:	55	pushq	%rbp
10000d783:	48 89 e5	movq	%rsp, %rbp
10000d786:	41 57	pushq	%r15
10000d788:	41 56	pushq	%r14
10000d78a:	41 55	pushq	%r13
10000d78c:	41 54	pushq	%r12
10000d78e:	53	pushq	%rbx
10000d78f:	50	pushq	%rax
10000d790:	49 89 fe	movq	%rdi, %r14
10000d793:	e8 05 d8 01 00	callq	0x10002af9d
10000d798:	49 89 c4	movq	%rax, %r12
10000d79b:	e8 98 43 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
10000d7a0:	49 89 c7	movq	%rax, %r15
10000d7a3:	41 83 bc 24 94 00 00 00 00	cmpl	$0, 148(%r12)
10000d7ac:	74 4c	je	0x10000d7fa
10000d7ae:	48 8d 35 c0 b0 03 00	leaq	241856(%rip), %rsi ## literal pool for: "Generating report..."
10000d7b5:	bf 05 00 01 00	movl	$65541, %edi
10000d7ba:	31 c0	xorl	%eax, %eax
10000d7bc:	e8 07 7e 02 00	callq	0x1000355c8
10000d7c1:	4c 89 e7	movq	%r12, %rdi
10000d7c4:	be 17 00 00 00	movl	$23, %esi
10000d7c9:	e8 22 2f 01 00	callq	0x1000206f0
10000d7ce:	48 8d 3d b5 b0 03 00	leaq	241845(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.shutdownstall"
10000d7d5:	31 f6	xorl	%esi, %esi
10000d7d7:	e8 76 41 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000d7dc:	48 89 c3	movq	%rax, %rbx
10000d7df:	48 8d 15 3e 0b 00 00	leaq	2878(%rip), %rdx
10000d7e6:	48 89 c7	movq	%rax, %rdi
10000d7e9:	31 f6	xorl	%esi, %esi
10000d7eb:	e8 f0 40 03 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
10000d7f0:	48 89 df	movq	%rbx, %rdi
10000d7f3:	e8 60 41 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10000d7f8:	eb 13	jmp	0x10000d80d
10000d7fa:	48 8d 35 33 b0 03 00	leaq	241715(%rip), %rsi ## literal pool for: "Shutdown stall event fired with no activations (skipping report)"
10000d801:	bf 05 00 01 00	movl	$65541, %edi
10000d806:	31 c0	xorl	%eax, %eax
10000d808:	e8 bb 7d 02 00	callq	0x1000355c8
10000d80d:	e8 26 43 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
10000d812:	48 89 c3	movq	%rax, %rbx
10000d815:	48 89 c7	movq	%rax, %rdi
10000d818:	49 2b bc 24 f0 00 00 00	subq	240(%r12), %rdi
10000d820:	e8 a2 c3 ff ff	callq	0x100009bc7
10000d825:	49 89 c4	movq	%rax, %r12
10000d828:	48 8d 05 35 4e 05 00	leaq	347701(%rip), %rax
10000d82f:	48 63 00	movslq	(%rax), %rax
10000d832:	4c 69 e8 00 ca 9a 3b	imulq	$1000000000, %rax, %r13
10000d839:	4c 29 fb	subq	%r15, %rbx
10000d83c:	48 89 df	movq	%rbx, %rdi
10000d83f:	e8 83 c3 ff ff	callq	0x100009bc7
10000d844:	4c 01 e8	addq	%r13, %rax
10000d847:	4c 29 e0	subq	%r12, %rax
10000d84a:	76 2c	jbe	0x10000d878
10000d84c:	31 ff	xorl	%edi, %edi
10000d84e:	48 89 c6	movq	%rax, %rsi
10000d851:	e8 80 41 03 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10000d856:	4c 89 f7	movq	%r14, %rdi
10000d859:	48 89 c6	movq	%rax, %rsi
10000d85c:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10000d863:	31 c9	xorl	%ecx, %ecx
10000d865:	48 83 c4 08	addq	$8, %rsp
10000d869:	5b	popq	%rbx
10000d86a:	41 5c	popq	%r12
10000d86c:	41 5d	popq	%r13
10000d86e:	41 5e	popq	%r14
10000d870:	41 5f	popq	%r15
10000d872:	5d	popq	%rbp
10000d873:	e9 46 41 03 00	jmp	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10000d878:	48 83 c4 08	addq	$8, %rsp
10000d87c:	5b	popq	%rbx
10000d87d:	41 5c	popq	%r12
10000d87f:	41 5d	popq	%r13
10000d881:	41 5e	popq	%r14
10000d883:	41 5f	popq	%r15
10000d885:	5d	popq	%rbp
10000d886:	c3	retq
10000d887:	55	pushq	%rbp
10000d888:	48 89 e5	movq	%rsp, %rbp
10000d88b:	53	pushq	%rbx
10000d88c:	50	pushq	%rax
10000d88d:	8b 05 65 55 05 00	movl	349541(%rip), %eax
10000d893:	48 83 f8 01	cmpq	$1, %rax
10000d897:	74 5c	je	0x10000d8f5
10000d899:	85 c0	testl	%eax, %eax
10000d89b:	0f 85 9f 00 00 00	jne	0x10000d940
10000d8a1:	48 8d 35 c0 ab 03 00	leaq	240576(%rip), %rsi ## literal pool for: "committing to system shutdown"
10000d8a8:	bf 05 00 00 00	movl	$5, %edi
10000d8ad:	31 c0	xorl	%eax, %eax
10000d8af:	e8 14 7d 02 00	callq	0x1000355c8
10000d8b4:	48 8d 3d 15 ac 03 00	leaq	240661(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.system-override"
10000d8bb:	31 f6	xorl	%esi, %esi
10000d8bd:	e8 90 40 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000d8c2:	48 89 c3	movq	%rax, %rbx
10000d8c5:	48 8d 15 39 06 00 00	leaq	1593(%rip), %rdx
10000d8cc:	48 89 c7	movq	%rax, %rdi
10000d8cf:	31 f6	xorl	%esi, %esi
10000d8d1:	e8 0a 40 03 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
10000d8d6:	48 89 df	movq	%rbx, %rdi
10000d8d9:	e8 7a 40 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10000d8de:	8b 05 18 55 05 00	movl	349464(%rip), %eax
10000d8e4:	8d 48 ff	leal	-1(%rax), %ecx
10000d8e7:	83 f9 02	cmpl	$2, %ecx
10000d8ea:	73 1e	jae	0x10000d90a
10000d8ec:	48 8d 3d 33 ac 03 00	leaq	240691(%rip), %rdi ## literal pool for: "kern.willuserspacereboot"
10000d8f3:	eb 31	jmp	0x10000d926
10000d8f5:	48 8d 35 8a ab 03 00	leaq	240522(%rip), %rsi ## literal pool for: "shutdown already committed"
10000d8fc:	bf 05 00 00 00	movl	$5, %edi
10000d901:	31 c0	xorl	%eax, %eax
10000d903:	e8 c0 7c 02 00	callq	0x1000355c8
10000d908:	eb 26	jmp	0x10000d930
10000d90a:	85 c0	testl	%eax, %eax
10000d90c:	75 22	jne	0x10000d930
10000d90e:	48 8d 3d e1 ab 03 00	leaq	240609(%rip), %rdi ## literal pool for: "kern.willshutdown"
10000d915:	be 01 00 00 00	movl	$1, %esi
10000d91a:	e8 ca 71 02 00	callq	0x100034ae9
10000d91f:	48 8d 3d e2 ab 03 00	leaq	240610(%rip), %rdi ## literal pool for: "security.mac.asp.willshutdown"
10000d926:	be 01 00 00 00	movl	$1, %esi
10000d92b:	e8 b9 71 02 00	callq	0x100034ae9
10000d930:	bf 01 00 00 00	movl	$1, %edi
10000d935:	48 83 c4 08	addq	$8, %rsp
10000d939:	5b	popq	%rbx
10000d93a:	5d	popq	%rbp
10000d93b:	e9 19 00 00 00	jmp	0x10000d959
10000d940:	48 8d 0d 79 cc 04 00	leaq	314489(%rip), %rcx
10000d947:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
10000d94b:	48 8d 3d 4f ab 03 00	leaq	240463(%rip), %rdi ## literal pool for: "Attempting to commit shutdown unexpectedly: %s"
10000d952:	31 c0	xorl	%eax, %eax
10000d954:	e8 b9 6a 02 00	callq	0x100034412
10000d959:	55	pushq	%rbp
10000d95a:	48 89 e5	movq	%rsp, %rbp
10000d95d:	53	pushq	%rbx
10000d95e:	50	pushq	%rax
10000d95f:	89 fb	movl	%edi, %ebx
10000d961:	8b 05 91 54 05 00	movl	349329(%rip), %eax
10000d967:	83 ff 08	cmpl	$8, %edi
10000d96a:	75 31	jne	0x10000d99d
10000d96c:	48 8d 0d 4d cc 04 00	leaq	314445(%rip), %rcx
10000d973:	48 8b 14 c1	movq	(%rcx,%rax,8), %rdx
10000d977:	89 d8	movl	%ebx, %eax
10000d979:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
10000d97d:	48 8d 35 14 aa 03 00	leaq	240148(%rip), %rsi ## literal pool for: "shutdown %s -> %s"
10000d984:	bf 05 00 01 00	movl	$65541, %edi
10000d989:	31 c0	xorl	%eax, %eax
10000d98b:	e8 38 7c 02 00	callq	0x1000355c8
10000d990:	89 1d 62 54 05 00	movl	%ebx, 349282(%rip)
10000d996:	48 83 c4 08	addq	$8, %rsp
10000d99a:	5b	popq	%rbx
10000d99b:	5d	popq	%rbp
10000d99c:	c3	retq
10000d99d:	83 f8 08	cmpl	$8, %eax
10000d9a0:	77 42	ja	0x10000d9e4
10000d9a2:	48 8d 0d 5b 00 00 00	leaq	91(%rip), %rcx
10000d9a9:	48 63 14 81	movslq	(%rcx,%rax,4), %rdx
10000d9ad:	48 01 ca	addq	%rcx, %rdx
10000d9b0:	ff e2	jmpq	*%rdx
10000d9b2:	83 fb 06	cmpl	$6, %ebx
10000d9b5:	74 b5	je	0x10000d96c
10000d9b7:	eb 2b	jmp	0x10000d9e4
10000d9b9:	83 fb 01	cmpl	$1, %ebx
10000d9bc:	74 ae	je	0x10000d96c
10000d9be:	eb 24	jmp	0x10000d9e4
10000d9c0:	8d 4b ff	leal	-1(%rbx), %ecx
10000d9c3:	83 f9 02	cmpl	$2, %ecx
10000d9c6:	72 a4	jb	0x10000d96c
10000d9c8:	eb 1a	jmp	0x10000d9e4
10000d9ca:	83 fb 03	cmpl	$3, %ebx
10000d9cd:	74 9d	je	0x10000d96c
10000d9cf:	eb 13	jmp	0x10000d9e4
10000d9d1:	83 fb 04	cmpl	$4, %ebx
10000d9d4:	74 96	je	0x10000d96c
10000d9d6:	eb 0c	jmp	0x10000d9e4
10000d9d8:	83 fb 05	cmpl	$5, %ebx
10000d9db:	74 8f	je	0x10000d96c
10000d9dd:	eb 05	jmp	0x10000d9e4
10000d9df:	83 fb 07	cmpl	$7, %ebx
10000d9e2:	74 ac	je	0x10000d990
10000d9e4:	48 8d 0d d5 cb 04 00	leaq	314325(%rip), %rcx
10000d9eb:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
10000d9ef:	89 d8	movl	%ebx, %eax
10000d9f1:	48 8b 14 c1	movq	(%rcx,%rax,8), %rdx
10000d9f5:	48 8d 3d ae a9 03 00	leaq	240046(%rip), %rdi ## literal pool for: "Unexpected shutdown transition %s -> %s"
10000d9fc:	31 c0	xorl	%eax, %eax
10000d9fe:	e8 0f 6a 02 00	callq	0x100034412
10000da03:	90	nop
10000da04:	b5 ff	movb	$-1, %ch
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da08:	bc ff ff ff c6	movl	$3338665983, %esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da0f:	ff cd	decl	%ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da13:	ff d4	callq	*%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da17:	ff ae ff ff ff db	ljmpl	*-603979777(%rsi)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da1f:	ff e0	jmpq	*%rax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000da23:	ff ae ff ff ff 55	ljmpl	*1442840575(%rsi)
10000da29:	48 89 e5	movq	%rsp, %rbp
10000da2c:	48 63 05 c5 53 05 00	movslq	349125(%rip), %rax
10000da33:	48 85 c0	testq	%rax, %rax
10000da36:	74 25	je	0x10000da5d
10000da38:	48 8d 0d 81 cb 04 00	leaq	314241(%rip), %rcx
10000da3f:	48 8b 14 c1	movq	(%rcx,%rax,8), %rdx
10000da43:	48 8d 35 a5 a8 03 00	leaq	239781(%rip), %rsi ## literal pool for: "Shutdown already started: %s"
10000da4a:	bf 03 00 00 00	movl	$3, %edi
10000da4f:	31 c0	xorl	%eax, %eax
10000da51:	e8 72 7b 02 00	callq	0x1000355c8
10000da56:	b8 25 00 00 00	movl	$37, %eax
10000da5b:	eb 1a	jmp	0x10000da77
10000da5d:	89 3d 99 53 05 00	movl	%edi, 349081(%rip)
10000da63:	48 89 35 9e 53 05 00	movq	%rsi, 349086(%rip)
10000da6a:	89 15 90 53 05 00	movl	%edx, 349072(%rip)
10000da70:	e8 12 fe ff ff	callq	0x10000d887
10000da75:	31 c0	xorl	%eax, %eax
10000da77:	5d	popq	%rbp
10000da78:	c3	retq
10000da79:	55	pushq	%rbp
10000da7a:	48 89 e5	movq	%rsp, %rbp
10000da7d:	83 3d 74 53 05 00 00	cmpl	$0, 349044(%rip)
10000da84:	0f 9f c1	setg	%cl
10000da87:	39 3d 6f 53 05 00	cmpl	%edi, 349039(%rip)
10000da8d:	0f 94 c0	sete	%al
10000da90:	20 c8	andb	%cl, %al
10000da92:	5d	popq	%rbp
10000da93:	c3	retq
10000da94:	55	pushq	%rbp
10000da95:	48 89 e5	movq	%rsp, %rbp
10000da98:	41 56	pushq	%r14
10000da9a:	53	pushq	%rbx
10000da9b:	48 81 ec e0 00 00 00	subq	$224, %rsp
10000daa2:	48 89 b5 18 ff ff ff	movq	%rsi, -232(%rbp)
10000daa9:	48 89 95 20 ff ff ff	movq	%rdx, -224(%rbp)
10000dab0:	48 89 8d 28 ff ff ff	movq	%rcx, -216(%rbp)
10000dab7:	4c 89 85 30 ff ff ff	movq	%r8, -208(%rbp)
10000dabe:	4c 89 8d 38 ff ff ff	movq	%r9, -200(%rbp)
10000dac5:	84 c0	testb	%al, %al
10000dac7:	74 2c	je	0x10000daf5
10000dac9:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
10000dad0:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
10000dad7:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
10000dade:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
10000dae5:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
10000dae9:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
10000daed:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
10000daf1:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
10000daf5:	48 8b 05 2c a5 04 00	movq	304428(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000dafc:	48 8b 00	movq	(%rax), %rax
10000daff:	48 89 45 e8	movq	%rax, -24(%rbp)
10000db03:	8b 05 ef 52 05 00	movl	348911(%rip), %eax
10000db09:	83 f8 02	cmpl	$2, %eax
10000db0c:	0f 94 c1	sete	%cl
10000db0f:	83 f8 08	cmpl	$8, %eax
10000db12:	0f 94 c2	sete	%dl
10000db15:	30 ca	xorb	%cl, %dl
10000db17:	0f 84 d9 00 00 00	je	0x10000dbf6
10000db1d:	49 89 fe	movq	%rdi, %r14
10000db20:	c7 05 d2 52 05 00 00 00 00 00	movl	$0, 348882(%rip)
10000db2a:	0f 28 05 4f 57 03 00	movaps	218959(%rip), %xmm0
10000db31:	48 8d 55 d0	leaq	-48(%rbp), %rdx
10000db35:	0f 29 02	movaps	%xmm0, (%rdx)
10000db38:	48 8d 85 10 ff ff ff	leaq	-240(%rbp), %rax
10000db3f:	48 89 42 10	movq	%rax, 16(%rdx)
10000db43:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000db4d:	48 89 02	movq	%rax, (%rdx)
10000db50:	48 8d 45 10	leaq	16(%rbp), %rax
10000db54:	48 89 42 08	movq	%rax, 8(%rdx)
10000db58:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10000db5c:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10000db63:	48 89 df	movq	%rbx, %rdi
10000db66:	4c 89 f6	movq	%r14, %rsi
10000db69:	e8 96 43 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000db6e:	48 8b 1b	movq	(%rbx), %rbx
10000db71:	48 89 da	movq	%rbx, %rdx
10000db74:	48 85 db	testq	%rbx, %rbx
10000db77:	74 6d	je	0x10000dbe6
10000db79:	48 8d 35 8c a7 03 00	leaq	239500(%rip), %rsi ## literal pool for: "Could not cleanly tear down userspace. Will force a full hardware reboot. (%s)"
10000db80:	bf 04 00 01 00	movl	$65540, %edi
10000db85:	31 c0	xorl	%eax, %eax
10000db87:	e8 3c 7a 02 00	callq	0x1000355c8
10000db8c:	48 89 df	movq	%rbx, %rdi
10000db8f:	e8 9c 3e 03 00	callq	0x100041a30 ## symbol stub for: _free
10000db94:	48 8b 15 6d 52 05 00	movq	348781(%rip), %rdx
10000db9b:	48 85 d2	testq	%rdx, %rdx
10000db9e:	74 2a	je	0x10000dbca
10000dba0:	48 8d 35 b4 a7 03 00	leaq	239540(%rip), %rsi ## literal pool for: "Converting pivot-root to full hardware reboot %s"
10000dba7:	bf 04 00 01 00	movl	$65540, %edi
10000dbac:	31 c0	xorl	%eax, %eax
10000dbae:	e8 15 7a 02 00	callq	0x1000355c8
10000dbb3:	48 8b 3d 4e 52 05 00	movq	348750(%rip), %rdi
10000dbba:	e8 71 3e 03 00	callq	0x100041a30 ## symbol stub for: _free
10000dbbf:	48 c7 05 3e 52 05 00 00 00 00 00	movq	$0, 348734(%rip)
10000dbca:	48 8b 05 57 a4 04 00	movq	304215(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000dbd1:	48 8b 00	movq	(%rax), %rax
10000dbd4:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10000dbd8:	75 33	jne	0x10000dc0d
10000dbda:	48 81 c4 e0 00 00 00	addq	$224, %rsp
10000dbe1:	5b	popq	%rbx
10000dbe2:	41 5e	popq	%r14
10000dbe4:	5d	popq	%rbp
10000dbe5:	c3	retq
10000dbe6:	31 ff	xorl	%edi, %edi
10000dbe8:	e8 b5 3b 03 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10000dbed:	4c 89 75 c8	movq	%r14, -56(%rbp)
10000dbf1:	4c 89 f2	movq	%r14, %rdx
10000dbf4:	eb 83	jmp	0x10000db79
10000dbf6:	31 f6	xorl	%esi, %esi
10000dbf8:	83 f8 08	cmpl	$8, %eax
10000dbfb:	40 0f 94 c6	sete	%sil
10000dbff:	31 ff	xorl	%edi, %edi
10000dc01:	83 f8 02	cmpl	$2, %eax
10000dc04:	40 0f 94 c7	sete	%dil
10000dc08:	e8 40 1a 03 00	callq	0x10003f64d
10000dc0d:	e8 60 3b 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000dc12:	55	pushq	%rbp
10000dc13:	48 89 e5	movq	%rsp, %rbp
10000dc16:	53	pushq	%rbx
10000dc17:	48 83 ec 28	subq	$40, %rsp
10000dc1b:	83 3d d6 51 05 00 02	cmpl	$2, 348630(%rip)
10000dc22:	0f 85 9b 00 00 00	jne	0x10000dcc3
10000dc28:	48 89 fb	movq	%rdi, %rbx
10000dc2b:	48 8d 15 5a a7 03 00	leaq	239450(%rip), %rdx ## literal pool for: "cleaning up"
10000dc32:	be 05 00 00 00	movl	$5, %esi
10000dc37:	31 c0	xorl	%eax, %eax
10000dc39:	e8 eb 27 01 00	callq	0x100020429
10000dc3e:	bf 03 00 00 00	movl	$3, %edi
10000dc43:	e8 11 fd ff ff	callq	0x10000d959
10000dc48:	e8 7b f6 02 00	callq	0x10003d2c8
10000dc4d:	bf 04 00 00 00	movl	$4, %edi
10000dc52:	e8 02 fd ff ff	callq	0x10000d959
10000dc57:	e8 3d 7f 00 00	callq	0x100015b99
10000dc5c:	e8 6c 00 00 00	callq	0x10000dccd
10000dc61:	48 89 df	movq	%rbx, %rdi
10000dc64:	e8 d3 00 00 00	callq	0x10000dd3c
10000dc69:	e8 8c 08 00 00	callq	0x10000e4fa
10000dc6e:	48 8b 0d a3 a3 04 00	movq	304035(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000dc75:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000dc79:	48 89 0e	movq	%rcx, (%rsi)
10000dc7c:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000dc84:	48 8d 0d 86 01 00 00	leaq	390(%rip), %rcx
10000dc8b:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000dc8f:	48 8d 0d 72 c9 04 00	leaq	313714(%rip), %rcx
10000dc96:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000dc9a:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000dc9e:	48 89 c7	movq	%rax, %rdi
10000dca1:	e8 2e 3c 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10000dca6:	48 89 df	movq	%rbx, %rdi
10000dca9:	be 18 00 00 00	movl	$24, %esi
10000dcae:	e8 1b 4c 00 00	callq	0x1000128ce
10000dcb3:	83 bb 94 00 00 00 00	cmpl	$0, 148(%rbx)
10000dcba:	75 0c	jne	0x10000dcc8
10000dcbc:	48 83 c4 28	addq	$40, %rsp
10000dcc0:	5b	popq	%rbx
10000dcc1:	5d	popq	%rbp
10000dcc2:	c3	retq
10000dcc3:	e8 b2 19 03 00	callq	0x10003f67a
10000dcc8:	e8 98 19 03 00	callq	0x10003f665
10000dccd:	55	pushq	%rbp
10000dcce:	48 89 e5	movq	%rsp, %rbp
10000dcd1:	e8 58 08 00 00	callq	0x10000e52e
10000dcd6:	83 3d 1b 51 05 00 04	cmpl	$4, 348443(%rip)
10000dcdd:	75 22	jne	0x10000dd01
10000dcdf:	83 3d 16 51 05 00 00	cmpl	$0, 348438(%rip)
10000dce6:	74 31	je	0x10000dd19
10000dce8:	48 8d 05 fa 4a 05 00	leaq	346874(%rip), %rax
10000dcef:	80 38 00	cmpb	$0, (%rax)
10000dcf2:	75 12	jne	0x10000dd06
10000dcf4:	31 ff	xorl	%edi, %edi
10000dcf6:	e8 35 79 00 00	callq	0x100015630
10000dcfb:	84 c0	testb	%al, %al
10000dcfd:	74 1a	je	0x10000dd19
10000dcff:	5d	popq	%rbp
10000dd00:	c3	retq
10000dd01:	e8 89 19 03 00	callq	0x10003f68f
10000dd06:	48 8d 35 ee ab 03 00	leaq	240622(%rip), %rsi ## literal pool for: "Abandoning lingering coalitions"
10000dd0d:	bf 04 00 01 00	movl	$65540, %edi
10000dd12:	31 c0	xorl	%eax, %eax
10000dd14:	e8 af 78 02 00	callq	0x1000355c8
10000dd19:	bf 05 00 00 00	movl	$5, %edi
10000dd1e:	e8 36 fc ff ff	callq	0x10000d959
10000dd23:	48 8b 3d e6 50 05 00	movq	348390(%rip), %rdi
10000dd2a:	e8 4d 3c 03 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10000dd2f:	e8 69 d2 01 00	callq	0x10002af9d
10000dd34:	48 89 c7	movq	%rax, %rdi
10000dd37:	e8 83 03 00 00	callq	0x10000e0bf
10000dd3c:	55	pushq	%rbp
10000dd3d:	48 89 e5	movq	%rsp, %rbp
10000dd40:	41 57	pushq	%r15
10000dd42:	41 56	pushq	%r14
10000dd44:	41 54	pushq	%r12
10000dd46:	53	pushq	%rbx
10000dd47:	48 83 ec 10	subq	$16, %rsp
10000dd4b:	83 3d a6 50 05 00 04	cmpl	$4, 348326(%rip)
10000dd52:	0f 85 b4 00 00 00	jne	0x10000de0c
10000dd58:	49 89 fe	movq	%rdi, %r14
10000dd5b:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10000dd65:	48 8d 75 d8	leaq	-40(%rbp), %rsi
10000dd69:	48 89 06	movq	%rax, (%rsi)
10000dd6c:	48 8d 55 d0	leaq	-48(%rbp), %rdx
10000dd70:	48 89 02	movq	%rax, (%rdx)
10000dd73:	48 8d 3d a1 ab 03 00	leaq	240545(%rip), %rdi ## literal pool for: "kern.proc.all"
10000dd7a:	e8 31 41 03 00	callq	0x100041eb0 ## symbol stub for: _sysctlbyname_get_data_np
10000dd7f:	85 c0	testl	%eax, %eax
10000dd81:	74 0c	je	0x10000dd8f
10000dd83:	83 f8 ff	cmpl	$-1, %eax
10000dd86:	75 72	jne	0x10000ddfa
10000dd88:	e8 17 19 03 00	callq	0x10003f6a4
10000dd8d:	eb 6b	jmp	0x10000ddfa
10000dd8f:	48 8b 45 d0	movq	-48(%rbp), %rax
10000dd93:	48 3d 88 02 00 00	cmpq	$648, %rax
10000dd99:	72 56	jb	0x10000ddf1
10000dd9b:	48 c1 e8 03	shrq	$3, %rax
10000dd9f:	48 b9 cb c0 d3 ad f9 61 91 32	movabsq	$3643801298510528715, %rcx
10000dda9:	48 f7 e1	mulq	%rcx
10000ddac:	49 89 d4	movq	%rdx, %r12
10000ddaf:	49 c1 ec 04	shrq	$4, %r12
10000ddb3:	bb f3 00 00 00	movl	$243, %ebx
10000ddb8:	4c 8d 3d 6a ab 03 00	leaq	240490(%rip), %r15 ## literal pool for: "Found lingering process: %d (%s)"
10000ddbf:	4c 8b 45 d8	movq	-40(%rbp), %r8
10000ddc3:	41 8b 8c 18 35 ff ff ff	movl	-203(%r8,%rbx), %ecx
10000ddcb:	83 f9 02	cmpl	$2, %ecx
10000ddce:	7c 15	jl	0x10000dde5
10000ddd0:	49 01 d8	addq	%rbx, %r8
10000ddd3:	4c 89 f7	movq	%r14, %rdi
10000ddd6:	be 04 00 01 00	movl	$65540, %esi
10000dddb:	4c 89 fa	movq	%r15, %rdx
10000ddde:	31 c0	xorl	%eax, %eax
10000dde0:	e8 44 26 01 00	callq	0x100020429
10000dde5:	48 81 c3 88 02 00 00	addq	$648, %rbx
10000ddec:	49 ff cc	decq	%r12
10000ddef:	75 ce	jne	0x10000ddbf
10000ddf1:	48 8b 7d d8	movq	-40(%rbp), %rdi
10000ddf5:	e8 36 3c 03 00	callq	0x100041a30 ## symbol stub for: _free
10000ddfa:	e8 f9 71 02 00	callq	0x100034ff8
10000ddff:	48 83 c4 10	addq	$16, %rsp
10000de03:	5b	popq	%rbx
10000de04:	41 5c	popq	%r12
10000de06:	41 5e	popq	%r14
10000de08:	41 5f	popq	%r15
10000de0a:	5d	popq	%rbp
10000de0b:	c3	retq
10000de0c:	e8 a6 18 03 00	callq	0x10003f6b7
10000de11:	55	pushq	%rbp
10000de12:	48 89 e5	movq	%rsp, %rbp
10000de15:	48 8b 7f 20	movq	32(%rdi), %rdi
10000de19:	5d	popq	%rbp
10000de1a:	e9 00 00 00 00	jmp	0x10000de1f
10000de1f:	55	pushq	%rbp
10000de20:	48 89 e5	movq	%rsp, %rbp
10000de23:	41 57	pushq	%r15
10000de25:	41 56	pushq	%r14
10000de27:	53	pushq	%rbx
10000de28:	48 83 ec 58	subq	$88, %rsp
10000de2c:	48 89 fb	movq	%rdi, %rbx
10000de2f:	83 3d c2 4f 05 00 04	cmpl	$4, 348098(%rip)
10000de36:	0f 85 94 00 00 00	jne	0x10000ded0
10000de3c:	4c 8b 3d d5 a1 04 00	movq	303573(%rip), %r15 ## literal pool symbol address: __NSConcreteStackBlock
10000de43:	48 8d 7d 98	leaq	-104(%rbp), %rdi
10000de47:	4c 89 3f	movq	%r15, (%rdi)
10000de4a:	48 c7 47 08 00 00 00 40	movq	$1073741824, 8(%rdi)
10000de52:	48 8d 05 93 05 00 00	leaq	1427(%rip), %rax
10000de59:	48 89 47 10	movq	%rax, 16(%rdi)
10000de5d:	48 8d 05 34 c8 04 00	leaq	313396(%rip), %rax
10000de64:	48 89 47 18	movq	%rax, 24(%rdi)
10000de68:	48 89 5f 20	movq	%rbx, 32(%rdi)
10000de6c:	e8 bf 77 00 00	callq	0x100015630
10000de71:	84 c0	testb	%al, %al
10000de73:	74 50	je	0x10000dec5
10000de75:	48 89 df	movq	%rbx, %rdi
10000de78:	e8 bf fe ff ff	callq	0x10000dd3c
10000de7d:	be 00 ca 9a 3b	movl	$1000000000, %esi
10000de82:	31 ff	xorl	%edi, %edi
10000de84:	e8 4d 3b 03 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10000de89:	49 89 c6	movq	%rax, %r14
10000de8c:	e8 69 06 00 00	callq	0x10000e4fa
10000de91:	48 8d 55 c0	leaq	-64(%rbp), %rdx
10000de95:	4c 89 3a	movq	%r15, (%rdx)
10000de98:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
10000dea0:	48 8d 0d 8f 05 00 00	leaq	1423(%rip), %rcx
10000dea7:	48 89 4a 10	movq	%rcx, 16(%rdx)
10000deab:	48 8d 0d 06 c8 04 00	leaq	313350(%rip), %rcx
10000deb2:	48 89 4a 18	movq	%rcx, 24(%rdx)
10000deb6:	48 89 5a 20	movq	%rbx, 32(%rdx)
10000deba:	4c 89 f7	movq	%r14, %rdi
10000debd:	48 89 c6	movq	%rax, %rsi
10000dec0:	e8 03 3a 03 00	callq	0x1000418c8 ## symbol stub for: _dispatch_after
10000dec5:	48 83 c4 58	addq	$88, %rsp
10000dec9:	5b	popq	%rbx
10000deca:	41 5e	popq	%r14
10000decc:	41 5f	popq	%r15
10000dece:	5d	popq	%rbp
10000decf:	c3	retq
10000ded0:	48 8d 15 73 aa 03 00	leaq	240243(%rip), %rdx ## literal pool for: "Polling for lingering coalitions stopped"
10000ded7:	48 89 df	movq	%rbx, %rdi
10000deda:	be 05 00 01 00	movl	$65541, %esi
10000dedf:	31 c0	xorl	%eax, %eax
10000dee1:	48 83 c4 58	addq	$88, %rsp
10000dee5:	5b	popq	%rbx
10000dee6:	41 5e	popq	%r14
10000dee8:	41 5f	popq	%r15
10000deea:	5d	popq	%rbp
10000deeb:	e9 39 25 01 00	jmp	0x100020429
10000def0:	55	pushq	%rbp
10000def1:	48 89 e5	movq	%rsp, %rbp
10000def4:	83 3d fd 4e 05 00 04	cmpl	$4, 347901(%rip)
10000defb:	75 06	jne	0x10000df03
10000defd:	5d	popq	%rbp
10000defe:	e9 ca fd ff ff	jmp	0x10000dccd
10000df03:	5d	popq	%rbp
10000df04:	c3	retq
10000df05:	55	pushq	%rbp
10000df06:	48 89 e5	movq	%rsp, %rbp
10000df09:	48 8d 3d 2f a6 03 00	leaq	239151(%rip), %rdi ## literal pool for: "system shutdown has begun"
10000df10:	e8 3f 3e 03 00	callq	0x100041d54 ## symbol stub for: _pthread_setname_np
10000df15:	be 03 00 00 00	movl	$3, %esi
10000df1a:	48 c7 c7 ff ff ff ff	movq	$-1, %rdi
10000df21:	e8 90 3f 03 00	callq	0x100041eb6 ## symbol stub for: _system_override
10000df26:	83 f8 ff	cmpl	$-1, %eax
10000df29:	74 02	je	0x10000df2d
10000df2b:	5d	popq	%rbp
10000df2c:	c3	retq
10000df2d:	e8 9a 17 03 00	callq	0x10003f6cc
10000df32:	55	pushq	%rbp
10000df33:	48 89 e5	movq	%rsp, %rbp
10000df36:	41 56	pushq	%r14
10000df38:	53	pushq	%rbx
10000df39:	49 89 fe	movq	%rdi, %r14
10000df3c:	48 8d 35 d3 96 03 00	leaq	235219(%rip), %rsi ## literal pool for: "%s"
10000df43:	48 8d 15 0f a6 03 00	leaq	239119(%rip), %rdx ## literal pool for: "Shutting the system down has taken too long. launchd is rebooting\n(or halting) the system now. Any processes that are still running\nwill be abandoned to the mercy of the kernel.\n"
10000df4a:	bf 03 00 01 00	movl	$65539, %edi
10000df4f:	31 c0	xorl	%eax, %eax
10000df51:	e8 72 76 02 00	callq	0x1000355c8
10000df56:	e8 28 00 00 00	callq	0x10000df83
10000df5b:	48 89 c3	movq	%rax, %rbx
10000df5e:	bf 08 00 00 00	movl	$8, %edi
10000df63:	e8 f1 f9 ff ff	callq	0x10000d959
10000df68:	48 89 df	movq	%rbx, %rdi
10000df6b:	31 c0	xorl	%eax, %eax
10000df6d:	e8 22 fb ff ff	callq	0x10000da94
10000df72:	48 89 df	movq	%rbx, %rdi
10000df75:	e8 b6 3a 03 00	callq	0x100041a30 ## symbol stub for: _free
10000df7a:	49 8b 7e 20	movq	32(%r14), %rdi
10000df7e:	e8 3c 01 00 00	callq	0x10000e0bf
10000df83:	55	pushq	%rbp
10000df84:	48 89 e5	movq	%rsp, %rbp
10000df87:	41 57	pushq	%r15
10000df89:	41 56	pushq	%r14
10000df8b:	53	pushq	%rbx
10000df8c:	48 83 ec 58	subq	$88, %rsp
10000df90:	48 63 05 61 4e 05 00	movslq	347745(%rip), %rax
10000df97:	48 83 f8 04	cmpq	$4, %rax
10000df9b:	0f 85 b5 00 00 00	jne	0x10000e056
10000dfa1:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10000dfa5:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10000dfac:	48 89 5b 08	movq	%rbx, 8(%rbx)
10000dfb0:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
10000dfba:	48 89 43 10	movq	%rax, 16(%rbx)
10000dfbe:	c7 43 18 00 00 00 00	movl	$0, 24(%rbx)
10000dfc5:	bf 40 00 00 00	movl	$64, %edi
10000dfca:	e8 92 e0 ff ff	callq	0x10000c061
10000dfcf:	49 89 c6	movq	%rax, %r14
10000dfd2:	48 8b 05 3f a0 04 00	movq	303167(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000dfd9:	48 8d 7d 98	leaq	-104(%rbp), %rdi
10000dfdd:	48 89 07	movq	%rax, (%rdi)
10000dfe0:	48 c7 47 08 00 00 00 42	movq	$1107296256, 8(%rdi)
10000dfe8:	48 8d 05 b6 02 00 00	leaq	694(%rip), %rax
10000dfef:	48 89 47 10	movq	%rax, 16(%rdi)
10000dff3:	48 8d 05 4e c6 04 00	leaq	312910(%rip), %rax
10000dffa:	48 89 47 18	movq	%rax, 24(%rdi)
10000dffe:	4c 89 77 28	movq	%r14, 40(%rdi)
10000e002:	48 89 5f 20	movq	%rbx, 32(%rdi)
10000e006:	e8 25 76 00 00	callq	0x100015630
10000e00b:	48 8b 43 08	movq	8(%rbx), %rax
10000e00f:	83 78 18 00	cmpl	$0, 24(%rax)
10000e013:	7e 64	jle	0x10000e079
10000e015:	4c 89 f7	movq	%r14, %rdi
10000e018:	e8 87 e0 ff ff	callq	0x10000c0a4
10000e01d:	49 89 c7	movq	%rax, %r15
10000e020:	8b 05 d2 4d 05 00	movl	347602(%rip), %eax
10000e026:	48 8d 0d 93 c5 04 00	leaq	312723(%rip), %rcx
10000e02d:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
10000e031:	48 8b 45 d0	movq	-48(%rbp), %rax
10000e035:	8b 50 18	movl	24(%rax), %edx
10000e038:	48 8d 3d 34 a6 03 00	leaq	239156(%rip), %rdi ## literal pool for: "userspace shutdown timed out: %s (%d).%s"
10000e03f:	4c 89 f9	movq	%r15, %rcx
10000e042:	31 c0	xorl	%eax, %eax
10000e044:	e8 ec 10 00 00	callq	0x10000f135
10000e049:	48 89 c3	movq	%rax, %rbx
10000e04c:	4c 89 ff	movq	%r15, %rdi
10000e04f:	e8 dc 39 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e054:	eb 45	jmp	0x10000e09b
10000e056:	48 8d 0d 63 c5 04 00	leaq	312675(%rip), %rcx
10000e05d:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
10000e061:	48 8d 3d 7f a6 03 00	leaq	239231(%rip), %rdi ## literal pool for: "userspace shutdown timed out: %s"
10000e068:	31 c0	xorl	%eax, %eax
10000e06a:	48 83 c4 58	addq	$88, %rsp
10000e06e:	5b	popq	%rbx
10000e06f:	41 5e	popq	%r14
10000e071:	41 5f	popq	%r15
10000e073:	5d	popq	%rbp
10000e074:	e9 bc 10 00 00	jmp	0x10000f135
10000e079:	8b 05 79 4d 05 00	movl	347513(%rip), %eax
10000e07f:	48 8d 0d 3a c5 04 00	leaq	312634(%rip), %rcx
10000e086:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
10000e08a:	48 8d 3d 0b a6 03 00	leaq	239115(%rip), %rdi ## literal pool for: "userspace shutdown timed out: %s. Unable to identify lingering coalitions."
10000e091:	31 c0	xorl	%eax, %eax
10000e093:	e8 9d 10 00 00	callq	0x10000f135
10000e098:	48 89 c3	movq	%rax, %rbx
10000e09b:	4c 89 f7	movq	%r14, %rdi
10000e09e:	e8 0e e0 ff ff	callq	0x10000c0b1
10000e0a3:	48 8d 7d c8	leaq	-56(%rbp), %rdi
10000e0a7:	be 08 00 00 00	movl	$8, %esi
10000e0ac:	e8 7f 36 03 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
10000e0b1:	48 89 d8	movq	%rbx, %rax
10000e0b4:	48 83 c4 58	addq	$88, %rsp
10000e0b8:	5b	popq	%rbx
10000e0b9:	41 5e	popq	%r14
10000e0bb:	41 5f	popq	%r15
10000e0bd:	5d	popq	%rbp
10000e0be:	c3	retq
10000e0bf:	55	pushq	%rbp
10000e0c0:	48 89 e5	movq	%rsp, %rbp
10000e0c3:	41 57	pushq	%r15
10000e0c5:	41 56	pushq	%r14
10000e0c7:	41 54	pushq	%r12
10000e0c9:	53	pushq	%rbx
10000e0ca:	8b 05 28 4d 05 00	movl	347432(%rip), %eax
10000e0d0:	83 f8 05	cmpl	$5, %eax
10000e0d3:	0f 94 c1	sete	%cl
10000e0d6:	83 f8 08	cmpl	$8, %eax
10000e0d9:	0f 94 c2	sete	%dl
10000e0dc:	30 ca	xorb	%cl, %dl
10000e0de:	0f 84 6e 01 00 00	je	0x10000e252
10000e0e4:	49 89 fc	movq	%rdi, %r12
10000e0e7:	e8 52 3a 03 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10000e0ec:	89 c7	movl	%eax, %edi
10000e0ee:	31 f6	xorl	%esi, %esi
10000e0f0:	e8 6e 9d 02 00	callq	0x100037e63
10000e0f5:	48 8d 3d 0c a6 03 00	leaq	239116(%rip), %rdi ## literal pool for: "shutdown_installer_tasks"
10000e0fc:	e8 c7 9d 02 00	callq	0x100037ec8
10000e101:	48 8d 3d 19 a6 03 00	leaq	239129(%rip), %rdi ## literal pool for: "deferred_install"
10000e108:	e8 bb 9d 02 00	callq	0x100037ec8
10000e10d:	8b 1d ed 4c 05 00	movl	347373(%rip), %ebx
10000e113:	49 8b bc 24 f0 00 00 00	movq	240(%r12), %rdi
10000e11b:	e8 2a ba ff ff	callq	0x100009b4a
10000e120:	49 be db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %r14
10000e12a:	49 f7 e6	mulq	%r14
10000e12d:	49 89 d0	movq	%rdx, %r8
10000e130:	49 c1 e8 12	shrq	$18, %r8
10000e134:	48 8d 15 f7 a5 03 00	leaq	239095(%rip), %rdx ## literal pool for: "shutting down system: flags = 0x%x, time = %llu ms"
10000e13b:	4c 89 e7	movq	%r12, %rdi
10000e13e:	be 05 00 00 00	movl	$5, %esi
10000e143:	89 d9	movl	%ebx, %ecx
10000e145:	31 c0	xorl	%eax, %eax
10000e147:	e8 dd 22 01 00	callq	0x100020429
10000e14c:	49 8b bc 24 f0 00 00 00	movq	240(%r12), %rdi
10000e154:	e8 f1 b9 ff ff	callq	0x100009b4a
10000e159:	49 f7 e6	mulq	%r14
10000e15c:	48 89 d1	movq	%rdx, %rcx
10000e15f:	48 c1 e9 12	shrq	$18, %rcx
10000e163:	48 8d 15 fb a5 03 00	leaq	239099(%rip), %rdx ## literal pool for: "Userspace teardown took: %llu ms"
10000e16a:	4c 89 e7	movq	%r12, %rdi
10000e16d:	be 05 00 01 00	movl	$65541, %esi
10000e172:	31 c0	xorl	%eax, %eax
10000e174:	e8 b0 22 01 00	callq	0x100020429
10000e179:	4c 8b 35 88 4c 05 00	movq	347272(%rip), %r14
10000e180:	41 bf 01 00 00 00	movl	$1, %r15d
10000e186:	8b 05 70 4c 05 00	movl	347248(%rip), %eax
10000e18c:	85 c0	testl	%eax, %eax
10000e18e:	74 2b	je	0x10000e1bb
10000e190:	83 f8 02	cmpl	$2, %eax
10000e193:	74 4d	je	0x10000e1e2
10000e195:	83 f8 01	cmpl	$1, %eax
10000e198:	75 70	jne	0x10000e20a
10000e19a:	4d 85 f6	testq	%r14, %r14
10000e19d:	0f 85 cf 00 00 00	jne	0x10000e272
10000e1a3:	48 8d 15 dc a5 03 00	leaq	239068(%rip), %rdx ## literal pool for: "Will be re-execing for a userspace reboot"
10000e1aa:	4c 89 e7	movq	%r12, %rdi
10000e1ad:	be 05 00 01 00	movl	$65541, %esi
10000e1b2:	31 c0	xorl	%eax, %eax
10000e1b4:	e8 70 22 01 00	callq	0x100020429
10000e1b9:	eb 49	jmp	0x10000e204
10000e1bb:	4d 85 f6	testq	%r14, %r14
10000e1be:	0f 85 bf 00 00 00	jne	0x10000e283
10000e1c4:	8b 0d 36 4c 05 00	movl	347190(%rip), %ecx
10000e1ca:	48 8d 15 0d a6 03 00	leaq	239117(%rip), %rdx ## literal pool for: "Will be calling reboot(2) with flags: 0x%x"
10000e1d1:	4c 89 e7	movq	%r12, %rdi
10000e1d4:	be 05 00 01 00	movl	$65541, %esi
10000e1d9:	31 c0	xorl	%eax, %eax
10000e1db:	e8 49 22 01 00	callq	0x100020429
10000e1e0:	eb 28	jmp	0x10000e20a
10000e1e2:	4d 85 f6	testq	%r14, %r14
10000e1e5:	0f 84 a9 00 00 00	je	0x10000e294
10000e1eb:	48 8d 15 be a5 03 00	leaq	239038(%rip), %rdx ## literal pool for: "Will pivot-root to new incoming root path: %s"
10000e1f2:	4c 89 e7	movq	%r12, %rdi
10000e1f5:	be 05 00 01 00	movl	$65541, %esi
10000e1fa:	4c 89 f1	movq	%r14, %rcx
10000e1fd:	31 c0	xorl	%eax, %eax
10000e1ff:	e8 25 22 01 00	callq	0x100020429
10000e204:	41 bf 04 00 00 00	movl	$4, %r15d
10000e20a:	48 8d 35 f8 a5 03 00	leaq	239096(%rip), %rsi ## literal pool for: "Quiescing queues"
10000e211:	bf 05 00 01 00	movl	$65541, %edi
10000e216:	31 c0	xorl	%eax, %eax
10000e218:	e8 ab 73 02 00	callq	0x1000355c8
10000e21d:	bf 06 00 00 00	movl	$6, %edi
10000e222:	e8 32 f7 ff ff	callq	0x10000d959
10000e227:	e8 62 db ff ff	callq	0x10000bd8e
10000e22c:	e8 49 74 02 00	callq	0x10003567a
10000e231:	48 8d 3d e2 a5 03 00	leaq	239074(%rip), %rdi ## literal pool for: "launchd quiesce complete\n"
10000e238:	e8 45 d3 ff ff	callq	0x10000b582
10000e23d:	bf 07 00 00 00	movl	$7, %edi
10000e242:	e8 12 f7 ff ff	callq	0x10000d959
10000e247:	44 89 ff	movl	%r15d, %edi
10000e24a:	4c 89 f6	movq	%r14, %rsi
10000e24d:	e8 c0 00 00 00	callq	0x10000e312
10000e252:	83 f8 08	cmpl	$8, %eax
10000e255:	0f 94 c1	sete	%cl
10000e258:	83 f8 05	cmpl	$5, %eax
10000e25b:	0f 94 c0	sete	%al
10000e25e:	08 c8	orb	%cl, %al
10000e260:	0f b6 f8	movzbl	%al, %edi
10000e263:	e8 34 35 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000e268:	48 89 c7	movq	%rax, %rdi
10000e26b:	e8 44 35 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000e270:	0f 0b	ud2
10000e272:	31 ff	xorl	%edi, %edi
10000e274:	e8 23 35 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000e279:	48 89 c7	movq	%rax, %rdi
10000e27c:	e8 33 35 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000e281:	0f 0b	ud2
10000e283:	31 ff	xorl	%edi, %edi
10000e285:	e8 12 35 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000e28a:	48 89 c7	movq	%rax, %rdi
10000e28d:	e8 22 35 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000e292:	0f 0b	ud2
10000e294:	31 ff	xorl	%edi, %edi
10000e296:	e8 01 35 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000e29b:	48 89 c7	movq	%rax, %rdi
10000e29e:	e8 11 35 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000e2a3:	0f 0b	ud2
10000e2a5:	55	pushq	%rbp
10000e2a6:	48 89 e5	movq	%rsp, %rbp
10000e2a9:	41 57	pushq	%r15
10000e2ab:	41 56	pushq	%r14
10000e2ad:	41 54	pushq	%r12
10000e2af:	53	pushq	%rbx
10000e2b0:	48 89 f3	movq	%rsi, %rbx
10000e2b3:	49 89 fe	movq	%rdi, %r14
10000e2b6:	4c 8b 7f 28	movq	40(%rdi), %r15
10000e2ba:	48 89 f7	movq	%rsi, %rdi
10000e2bd:	e8 4f ee ff ff	callq	0x10000d111
10000e2c2:	49 89 c4	movq	%rax, %r12
10000e2c5:	48 89 df	movq	%rbx, %rdi
10000e2c8:	e8 4e ee ff ff	callq	0x10000d11b
10000e2cd:	48 8d 35 38 a3 03 00	leaq	238392(%rip), %rsi ## literal pool for: " %llu (%s),"
10000e2d4:	4c 89 ff	movq	%r15, %rdi
10000e2d7:	4c 89 e2	movq	%r12, %rdx
10000e2da:	48 89 c1	movq	%rax, %rcx
10000e2dd:	31 c0	xorl	%eax, %eax
10000e2df:	e8 ec dd ff ff	callq	0x10000c0d0
10000e2e4:	49 8b 46 20	movq	32(%r14), %rax
10000e2e8:	48 8b 40 08	movq	8(%rax), %rax
10000e2ec:	ff 40 18	incl	24(%rax)
10000e2ef:	5b	popq	%rbx
10000e2f0:	41 5c	popq	%r12
10000e2f2:	41 5e	popq	%r14
10000e2f4:	41 5f	popq	%r15
10000e2f6:	5d	popq	%rbp
10000e2f7:	c3	retq
10000e2f8:	55	pushq	%rbp
10000e2f9:	48 89 e5	movq	%rsp, %rbp
10000e2fc:	48 83 c7 20	addq	$32, %rdi
10000e300:	48 8b 76 20	movq	32(%rsi), %rsi
10000e304:	ba 08 00 00 00	movl	$8, %edx
10000e309:	5d	popq	%rbp
10000e30a:	e9 1b 34 03 00	jmp	0x10004172a ## symbol stub for: __Block_object_assign
10000e30f:	90	nop
10000e310:	90	nop
10000e311:	90	nop
10000e312:	55	pushq	%rbp
10000e313:	48 89 e5	movq	%rsp, %rbp
10000e316:	48 89 f2	movq	%rsi, %rdx
10000e319:	8b 35 e1 4a 05 00	movl	346849(%rip), %esi
10000e31f:	e8 7d 9c 02 00	callq	0x100037fa1
10000e324:	55	pushq	%rbp
10000e325:	48 89 e5	movq	%rsp, %rbp
10000e328:	53	pushq	%rbx
10000e329:	48 83 ec 28	subq	$40, %rsp
10000e32d:	48 8d 3d 7a a5 03 00	leaq	238970(%rip), %rdi ## literal pool for: "executing shutdown stall task"
10000e334:	e8 1b 3a 03 00	callq	0x100041d54 ## symbol stub for: _pthread_setname_np
10000e339:	e8 fa 37 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
10000e33e:	48 89 c3	movq	%rax, %rbx
10000e341:	48 8d 3d 84 a5 03 00	leaq	238980(%rip), %rdi ## literal pool for: "shutdown-stall"
10000e348:	be 03 00 00 00	movl	$3, %esi
10000e34d:	e8 93 92 02 00	callq	0x1000375e5
10000e352:	48 89 df	movq	%rbx, %rdi
10000e355:	e8 f0 b7 ff ff	callq	0x100009b4a
10000e35a:	48 c1 e8 09	shrq	$9, %rax
10000e35e:	48 b9 53 5a 9b a0 2f b8 44 00	movabsq	$19342813113834067, %rcx
10000e368:	48 f7 e1	mulq	%rcx
10000e36b:	48 89 d3	movq	%rdx, %rbx
10000e36e:	48 c1 eb 0b	shrq	$11, %rbx
10000e372:	e8 83 01 00 00	callq	0x10000e4fa
10000e377:	48 8b 0d 9a 9c 04 00	movq	302234(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000e37e:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000e382:	48 89 0e	movq	%rcx, (%rsi)
10000e385:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000e38d:	48 8d 0d 21 00 00 00	leaq	33(%rip), %rcx
10000e394:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000e398:	48 8d 0d d9 c2 04 00	leaq	312025(%rip), %rcx
10000e39f:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000e3a3:	89 5e 20	movl	%ebx, 32(%rsi)
10000e3a6:	48 89 c7	movq	%rax, %rdi
10000e3a9:	e8 26 35 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10000e3ae:	48 83 c4 28	addq	$40, %rsp
10000e3b2:	5b	popq	%rbx
10000e3b3:	5d	popq	%rbp
10000e3b4:	c3	retq
10000e3b5:	55	pushq	%rbp
10000e3b6:	48 89 e5	movq	%rsp, %rbp
10000e3b9:	53	pushq	%rbx
10000e3ba:	50	pushq	%rax
10000e3bb:	48 89 fb	movq	%rdi, %rbx
10000e3be:	e8 da cb 01 00	callq	0x10002af9d
10000e3c3:	48 89 c7	movq	%rax, %rdi
10000e3c6:	be 17 00 00 00	movl	$23, %esi
10000e3cb:	e8 65 23 01 00	callq	0x100020735
10000e3d0:	8b 53 20	movl	32(%rbx), %edx
10000e3d3:	48 8d 35 01 a5 03 00	leaq	238849(%rip), %rsi ## literal pool for: "Report generated in %u seconds."
10000e3da:	bf 05 00 01 00	movl	$65541, %edi
10000e3df:	31 c0	xorl	%eax, %eax
10000e3e1:	48 83 c4 08	addq	$8, %rsp
10000e3e5:	5b	popq	%rbx
10000e3e6:	5d	popq	%rbp
10000e3e7:	e9 dc 71 02 00	jmp	0x1000355c8
10000e3ec:	55	pushq	%rbp
10000e3ed:	48 89 e5	movq	%rsp, %rbp
10000e3f0:	41 57	pushq	%r15
10000e3f2:	41 56	pushq	%r14
10000e3f4:	53	pushq	%rbx
10000e3f5:	50	pushq	%rax
10000e3f6:	48 89 f3	movq	%rsi, %rbx
10000e3f9:	4c 8b 77 20	movq	32(%rdi), %r14
10000e3fd:	48 89 f7	movq	%rsi, %rdi
10000e400:	e8 0c ed ff ff	callq	0x10000d111
10000e405:	49 89 c7	movq	%rax, %r15
10000e408:	48 89 df	movq	%rbx, %rdi
10000e40b:	e8 0b ed ff ff	callq	0x10000d11b
10000e410:	48 8d 15 5c a5 03 00	leaq	238940(%rip), %rdx ## literal pool for: "Lingering coalition: %llu (%s)"
10000e417:	4c 89 f7	movq	%r14, %rdi
10000e41a:	be 04 00 01 00	movl	$65540, %esi
10000e41f:	4c 89 f9	movq	%r15, %rcx
10000e422:	49 89 c0	movq	%rax, %r8
10000e425:	31 c0	xorl	%eax, %eax
10000e427:	48 83 c4 08	addq	$8, %rsp
10000e42b:	5b	popq	%rbx
10000e42c:	41 5e	popq	%r14
10000e42e:	41 5f	popq	%r15
10000e430:	5d	popq	%rbp
10000e431:	e9 f3 1f 01 00	jmp	0x100020429
10000e436:	55	pushq	%rbp
10000e437:	48 89 e5	movq	%rsp, %rbp
10000e43a:	48 8b 7f 20	movq	32(%rdi), %rdi
10000e43e:	5d	popq	%rbp
10000e43f:	e9 db f9 ff ff	jmp	0x10000de1f
10000e444:	48 85 ff	testq	%rdi, %rdi
10000e447:	74 06	je	0x10000e44f
10000e449:	48 89 f8	movq	%rdi, %rax
10000e44c:	31 d2	xorl	%edx, %edx
10000e44e:	c3	retq
10000e44f:	55	pushq	%rbp
10000e450:	48 89 e5	movq	%rsp, %rbp
10000e453:	e8 8f 12 03 00	callq	0x10003f6e7
10000e458:	85 ff	testl	%edi, %edi
10000e45a:	74 05	je	0x10000e461
10000e45c:	31 c0	xorl	%eax, %eax
10000e45e:	89 fa	movl	%edi, %edx
10000e460:	c3	retq
10000e461:	55	pushq	%rbp
10000e462:	48 89 e5	movq	%rsp, %rbp
10000e465:	e8 8f 12 03 00	callq	0x10003f6f9
10000e46a:	55	pushq	%rbp
10000e46b:	48 89 e5	movq	%rsp, %rbp
10000e46e:	53	pushq	%rbx
10000e46f:	50	pushq	%rax
10000e470:	31 ff	xorl	%edi, %edi
10000e472:	e8 cf 34 03 00	callq	0x100041946 ## symbol stub for: _dispatch_queue_attr_make_initially_inactive
10000e477:	48 89 c3	movq	%rax, %rbx
10000e47a:	e8 e1 38 03 00	callq	0x100041d60 ## symbol stub for: _qos_class_main
10000e47f:	48 89 df	movq	%rbx, %rdi
10000e482:	89 c6	movl	%eax, %esi
10000e484:	31 d2	xorl	%edx, %edx
10000e486:	e8 c1 34 03 00	callq	0x10004194c ## symbol stub for: _dispatch_queue_attr_make_with_qos_class
10000e48b:	48 8d 3d 00 a5 03 00	leaq	238848(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.eventq"
10000e492:	48 89 c6	movq	%rax, %rsi
10000e495:	e8 b8 34 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000e49a:	48 89 05 77 49 05 00	movq	%rax, 346487(%rip)
10000e4a1:	48 8d 3d 07 a5 03 00	leaq	238855(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.ioq"
10000e4a8:	31 f6	xorl	%esi, %esi
10000e4aa:	e8 a3 34 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000e4af:	48 89 05 72 42 05 00	movq	%rax, 344690(%rip)
10000e4b6:	31 ff	xorl	%edi, %edi
10000e4b8:	be 05 00 00 00	movl	$5, %esi
10000e4bd:	31 d2	xorl	%edx, %edx
10000e4bf:	e8 88 34 03 00	callq	0x10004194c ## symbol stub for: _dispatch_queue_attr_make_with_qos_class
10000e4c4:	48 89 c3	movq	%rax, %rbx
10000e4c7:	48 8d 3d fb a4 03 00	leaq	238843(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.bgioq"
10000e4ce:	48 89 c6	movq	%rax, %rsi
10000e4d1:	e8 7c 34 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000e4d6:	48 89 05 43 49 05 00	movq	%rax, 346435(%rip)
10000e4dd:	48 8d 3d 01 a5 03 00	leaq	238849(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.bglogq"
10000e4e4:	48 89 de	movq	%rbx, %rsi
10000e4e7:	e8 66 34 03 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10000e4ec:	48 89 05 35 49 05 00	movq	%rax, 346421(%rip)
10000e4f3:	48 83 c4 08	addq	$8, %rsp
10000e4f7:	5b	popq	%rbx
10000e4f8:	5d	popq	%rbp
10000e4f9:	c3	retq
10000e4fa:	55	pushq	%rbp
10000e4fb:	48 89 e5	movq	%rsp, %rbp
10000e4fe:	48 8b 05 13 49 05 00	movq	346387(%rip), %rax
10000e505:	5d	popq	%rbp
10000e506:	c3	retq
10000e507:	55	pushq	%rbp
10000e508:	48 89 e5	movq	%rsp, %rbp
10000e50b:	48 8b 05 16 42 05 00	movq	344598(%rip), %rax
10000e512:	5d	popq	%rbp
10000e513:	c3	retq
10000e514:	55	pushq	%rbp
10000e515:	48 89 e5	movq	%rsp, %rbp
10000e518:	48 8b 05 01 49 05 00	movq	346369(%rip), %rax
10000e51f:	5d	popq	%rbp
10000e520:	c3	retq
10000e521:	55	pushq	%rbp
10000e522:	48 89 e5	movq	%rsp, %rbp
10000e525:	48 8b 05 fc 48 05 00	movq	346364(%rip), %rax
10000e52c:	5d	popq	%rbp
10000e52d:	c3	retq
10000e52e:	55	pushq	%rbp
10000e52f:	48 89 e5	movq	%rsp, %rbp
10000e532:	48 8b 3d df 48 05 00	movq	346335(%rip), %rdi
10000e539:	5d	popq	%rbp
10000e53a:	e9 8f 33 03 00	jmp	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000e53f:	48 85 ff	testq	%rdi, %rdi
10000e542:	74 06	je	0x10000e54a
10000e544:	48 89 f8	movq	%rdi, %rax
10000e547:	31 d2	xorl	%edx, %edx
10000e549:	c3	retq
10000e54a:	55	pushq	%rbp
10000e54b:	48 89 e5	movq	%rsp, %rbp
10000e54e:	e8 b8 11 03 00	callq	0x10003f70b
10000e553:	85 ff	testl	%edi, %edi
10000e555:	74 05	je	0x10000e55c
10000e557:	31 c0	xorl	%eax, %eax
10000e559:	89 fa	movl	%edi, %edx
10000e55b:	c3	retq
10000e55c:	55	pushq	%rbp
10000e55d:	48 89 e5	movq	%rsp, %rbp
10000e560:	e8 b8 11 03 00	callq	0x10003f71d
10000e565:	55	pushq	%rbp
10000e566:	48 89 e5	movq	%rsp, %rbp
10000e569:	41 57	pushq	%r15
10000e56b:	41 56	pushq	%r14
10000e56d:	53	pushq	%rbx
10000e56e:	48 83 ec 28	subq	$40, %rsp
10000e572:	49 89 f6	movq	%rsi, %r14
10000e575:	be 01 00 00 00	movl	$1, %esi
10000e57a:	e8 89 1f 01 00	callq	0x100020508
10000e57f:	48 89 c3	movq	%rax, %rbx
10000e582:	48 8d 3d 79 a4 03 00	leaq	238713(%rip), %rdi ## literal pool for: "%s/%s"
10000e589:	48 89 c6	movq	%rax, %rsi
10000e58c:	4c 89 f2	movq	%r14, %rdx
10000e58f:	31 c0	xorl	%eax, %eax
10000e591:	e8 9f 0b 00 00	callq	0x10000f135
10000e596:	49 89 c6	movq	%rax, %r14
10000e599:	48 89 df	movq	%rbx, %rdi
10000e59c:	e8 8f 34 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e5a1:	48 8b 05 70 9a 04 00	movq	301680(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000e5a8:	4c 8d 7d c0	leaq	-64(%rbp), %r15
10000e5ac:	49 89 07	movq	%rax, (%r15)
10000e5af:	49 c7 47 08 00 00 00 40	movq	$1073741824, 8(%r15)
10000e5b7:	48 8d 05 3d 00 00 00	leaq	61(%rip), %rax
10000e5be:	49 89 47 10	movq	%rax, 16(%r15)
10000e5c2:	48 8d 05 0f c1 04 00	leaq	311567(%rip), %rax
10000e5c9:	49 89 47 18	movq	%rax, 24(%r15)
10000e5cd:	4d 89 77 20	movq	%r14, 32(%r15)
10000e5d1:	bf 10 00 00 00	movl	$16, %edi
10000e5d6:	e8 0a ef ff ff	callq	0x10000d4e5
10000e5db:	48 89 c3	movq	%rax, %rbx
10000e5de:	4c 89 ff	movq	%r15, %rdi
10000e5e1:	e8 8a 0c 00 00	callq	0x10000f270
10000e5e6:	48 89 03	movq	%rax, (%rbx)
10000e5e9:	4c 89 73 08	movq	%r14, 8(%rbx)
10000e5ed:	48 89 d8	movq	%rbx, %rax
10000e5f0:	48 83 c4 28	addq	$40, %rsp
10000e5f4:	5b	popq	%rbx
10000e5f5:	41 5e	popq	%r14
10000e5f7:	41 5f	popq	%r15
10000e5f9:	5d	popq	%rbp
10000e5fa:	c3	retq
10000e5fb:	55	pushq	%rbp
10000e5fc:	48 89 e5	movq	%rsp, %rbp
10000e5ff:	48 89 d1	movq	%rdx, %rcx
10000e602:	48 8b 7f 20	movq	32(%rdi), %rdi
10000e606:	48 8d 15 fb a3 03 00	leaq	238587(%rip), %rdx ## literal pool for: "(lint): %s"
10000e60d:	31 c0	xorl	%eax, %eax
10000e60f:	5d	popq	%rbp
10000e610:	e9 95 72 02 00	jmp	0x1000358aa
10000e615:	55	pushq	%rbp
10000e616:	48 89 e5	movq	%rsp, %rbp
10000e619:	53	pushq	%rbx
10000e61a:	50	pushq	%rax
10000e61b:	48 89 fb	movq	%rdi, %rbx
10000e61e:	48 8b 7f 08	movq	8(%rdi), %rdi
10000e622:	e8 09 34 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e627:	48 c7 43 08 00 00 00 00	movq	$0, 8(%rbx)
10000e62f:	48 8b 3b	movq	(%rbx), %rdi
10000e632:	e8 ff 30 03 00	callq	0x100041736 ## symbol stub for: __Block_release
10000e637:	48 89 df	movq	%rbx, %rdi
10000e63a:	48 83 c4 08	addq	$8, %rsp
10000e63e:	5b	popq	%rbx
10000e63f:	5d	popq	%rbp
10000e640:	e9 eb 33 03 00	jmp	0x100041a30 ## symbol stub for: _free
10000e645:	55	pushq	%rbp
10000e646:	48 89 e5	movq	%rsp, %rbp
10000e649:	41 56	pushq	%r14
10000e64b:	53	pushq	%rbx
10000e64c:	48 81 ec e0 00 00 00	subq	$224, %rsp
10000e653:	41 89 f6	movl	%esi, %r14d
10000e656:	48 89 fb	movq	%rdi, %rbx
10000e659:	48 8d b5 10 ff ff ff	leaq	-240(%rbp), %rsi
10000e660:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000e664:	4c 89 46 20	movq	%r8, 32(%rsi)
10000e668:	4c 89 4e 28	movq	%r9, 40(%rsi)
10000e66c:	84 c0	testb	%al, %al
10000e66e:	74 2c	je	0x10000e69c
10000e670:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
10000e677:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
10000e67e:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
10000e685:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
10000e68c:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
10000e690:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
10000e694:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
10000e698:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
10000e69c:	48 8b 05 85 99 04 00	movq	301445(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000e6a3:	48 8b 00	movq	(%rax), %rax
10000e6a6:	48 89 45 e8	movq	%rax, -24(%rbp)
10000e6aa:	0f 28 05 cf 4b 03 00	movaps	216015(%rip), %xmm0
10000e6b1:	48 8d 45 d0	leaq	-48(%rbp), %rax
10000e6b5:	0f 29 00	movaps	%xmm0, (%rax)
10000e6b8:	48 89 70 10	movq	%rsi, 16(%rax)
10000e6bc:	48 b9 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rcx
10000e6c6:	48 89 08	movq	%rcx, (%rax)
10000e6c9:	48 8d 4d 10	leaq	16(%rbp), %rcx
10000e6cd:	48 89 48 08	movq	%rcx, 8(%rax)
10000e6d1:	48 8d 7d c8	leaq	-56(%rbp), %rdi
10000e6d5:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
10000e6dc:	48 89 d6	movq	%rdx, %rsi
10000e6df:	48 89 c2	movq	%rax, %rdx
10000e6e2:	e8 1d 38 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000e6e7:	83 f8 ff	cmpl	$-1, %eax
10000e6ea:	74 16	je	0x10000e702
10000e6ec:	48 8b 3b	movq	(%rbx), %rdi
10000e6ef:	48 8b 55 c8	movq	-56(%rbp), %rdx
10000e6f3:	44 89 f6	movl	%r14d, %esi
10000e6f6:	ff 57 10	callq	*16(%rdi)
10000e6f9:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000e6fd:	e8 2e 33 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e702:	48 8b 05 1f 99 04 00	movq	301343(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000e709:	48 8b 00	movq	(%rax), %rax
10000e70c:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10000e710:	75 0c	jne	0x10000e71e
10000e712:	48 81 c4 e0 00 00 00	addq	$224, %rsp
10000e719:	5b	popq	%rbx
10000e71a:	41 5e	popq	%r14
10000e71c:	5d	popq	%rbp
10000e71d:	c3	retq
10000e71e:	e8 4f 30 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000e723:	48 85 ff	testq	%rdi, %rdi
10000e726:	74 06	je	0x10000e72e
10000e728:	48 89 f8	movq	%rdi, %rax
10000e72b:	31 d2	xorl	%edx, %edx
10000e72d:	c3	retq
10000e72e:	55	pushq	%rbp
10000e72f:	48 89 e5	movq	%rsp, %rbp
10000e732:	e8 f8 0f 03 00	callq	0x10003f72f
10000e737:	85 ff	testl	%edi, %edi
10000e739:	74 05	je	0x10000e740
10000e73b:	31 c0	xorl	%eax, %eax
10000e73d:	89 fa	movl	%edi, %edx
10000e73f:	c3	retq
10000e740:	55	pushq	%rbp
10000e741:	48 89 e5	movq	%rsp, %rbp
10000e744:	e8 f8 0f 03 00	callq	0x10003f741
10000e749:	55	pushq	%rbp
10000e74a:	48 89 e5	movq	%rsp, %rbp
10000e74d:	53	pushq	%rbx
10000e74e:	48 83 ec 78	subq	$120, %rsp
10000e752:	48 89 fb	movq	%rdi, %rbx
10000e755:	48 8b 77 38	movq	56(%rdi), %rsi
10000e759:	8b 7f 1c	movl	28(%rdi), %edi
10000e75c:	90	nop
10000e75d:	0f 1f 40 00	nopl	(%rax)
10000e761:	8a 43 30	movb	48(%rbx), %al
10000e764:	8d 48 ff	leal	-1(%rax), %ecx
10000e767:	80 f9 02	cmpb	$2, %cl
10000e76a:	72 4f	jb	0x10000e7bb
10000e76c:	3c 03	cmpb	$3, %al
10000e76e:	0f 84 9f 00 00 00	je	0x10000e813
10000e774:	84 c0	testb	%al, %al
10000e776:	0f 85 e8 00 00 00	jne	0x10000e864
10000e77c:	48 89 df	movq	%rbx, %rdi
10000e77f:	be 2e 00 00 00	movl	$46, %esi
10000e784:	e8 45 41 00 00	callq	0x1000128ce
10000e789:	e8 79 fd ff ff	callq	0x10000e507
10000e78e:	48 8b 0d 83 98 04 00	movq	301187(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000e795:	48 8d 75 a8	leaq	-88(%rbp), %rsi
10000e799:	48 89 0e	movq	%rcx, (%rsi)
10000e79c:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000e7a4:	48 8d 0d ca 00 00 00	leaq	202(%rip), %rcx
10000e7ab:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000e7af:	48 8d 0d 42 bf 04 00	leaq	311106(%rip), %rcx
10000e7b6:	e9 92 00 00 00	jmp	0x10000e84d
10000e7bb:	31 f6	xorl	%esi, %esi
10000e7bd:	3c 02	cmpb	$2, %al
10000e7bf:	40 0f 94 c6	sete	%sil
10000e7c3:	48 8b 7b 38	movq	56(%rbx), %rdi
10000e7c7:	48 ff c6	incq	%rsi
10000e7ca:	e8 d1 37 03 00	callq	0x100041fa0 ## symbol stub for: _xpc_bundle_create
10000e7cf:	48 89 43 48	movq	%rax, 72(%rbx)
10000e7d3:	48 89 df	movq	%rbx, %rdi
10000e7d6:	be 2e 00 00 00	movl	$46, %esi
10000e7db:	e8 ee 40 00 00	callq	0x1000128ce
10000e7e0:	31 ff	xorl	%edi, %edi
10000e7e2:	31 f6	xorl	%esi, %esi
10000e7e4:	e8 0f 31 03 00	callq	0x1000418f8 ## symbol stub for: _dispatch_get_global_queue
10000e7e9:	48 8b 0d 28 98 04 00	movq	301096(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000e7f0:	48 8d 75 80	leaq	-128(%rbp), %rsi
10000e7f4:	48 89 0e	movq	%rcx, (%rsi)
10000e7f7:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000e7ff:	48 8d 0d 1c 05 00 00	leaq	1308(%rip), %rcx
10000e806:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000e80a:	48 8d 0d 67 bf 04 00	leaq	311143(%rip), %rcx
10000e811:	eb 3a	jmp	0x10000e84d
10000e813:	48 89 df	movq	%rbx, %rdi
10000e816:	be 2e 00 00 00	movl	$46, %esi
10000e81b:	e8 ae 40 00 00	callq	0x1000128ce
10000e820:	e8 e2 fc ff ff	callq	0x10000e507
10000e825:	48 8b 0d ec 97 04 00	movq	301036(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000e82c:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000e830:	48 89 0e	movq	%rcx, (%rsi)
10000e833:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000e83b:	48 8d 0d b0 01 00 00	leaq	432(%rip), %rcx
10000e842:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000e846:	48 8d 0d cb be 04 00	leaq	310987(%rip), %rcx
10000e84d:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000e851:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000e855:	48 89 c7	movq	%rax, %rdi
10000e858:	e8 77 30 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10000e85d:	48 83 c4 78	addq	$120, %rsp
10000e861:	5b	popq	%rbx
10000e862:	5d	popq	%rbp
10000e863:	c3	retq
10000e864:	0f b6 f0	movzbl	%al, %esi
10000e867:	48 8d 3d b1 a1 03 00	leaq	238001(%rip), %rdi ## literal pool for: "unsupported IO type %d"
10000e86e:	31 c0	xorl	%eax, %eax
10000e870:	e8 9d 5b 02 00	callq	0x100034412
10000e875:	55	pushq	%rbp
10000e876:	48 89 e5	movq	%rsp, %rbp
10000e879:	41 57	pushq	%r15
10000e87b:	41 56	pushq	%r14
10000e87d:	41 55	pushq	%r13
10000e87f:	41 54	pushq	%r12
10000e881:	53	pushq	%rbx
10000e882:	50	pushq	%rax
10000e883:	49 89 fe	movq	%rdi, %r14
10000e886:	4c 8b 67 20	movq	32(%rdi), %r12
10000e88a:	e8 78 fc ff ff	callq	0x10000e507
10000e88f:	48 89 c7	movq	%rax, %rdi
10000e892:	e8 37 30 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000e897:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000e89b:	4c 89 26	movq	%r12, (%rsi)
10000e89e:	49 8b 7c 24 38	movq	56(%r12), %rdi
10000e8a3:	ba 1f 00 00 00	movl	$31, %edx
10000e8a8:	b9 00 00 00 01	movl	$16777216, %ecx
10000e8ad:	31 c0	xorl	%eax, %eax
10000e8af:	e8 1e 32 03 00	callq	0x100041ad2 ## symbol stub for: _guarded_open_np
10000e8b4:	85 c0	testl	%eax, %eax
10000e8b6:	78 30	js	0x10000e8e8
10000e8b8:	41 89 c7	movl	%eax, %r15d
10000e8bb:	49 8d 74 24 58	leaq	88(%r12), %rsi
10000e8c0:	89 c7	movl	%eax, %edi
10000e8c2:	e8 7b 31 03 00	callq	0x100041a42 ## symbol stub for: _fstat$INODE64
10000e8c7:	85 c0	testl	%eax, %eax
10000e8c9:	74 4d	je	0x10000e918
10000e8cb:	e8 90 2e 03 00	callq	0x100041760 ## symbol stub for: ___error
10000e8d0:	8b 18	movl	(%rax), %ebx
10000e8d2:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000e8d6:	44 89 ff	movl	%r15d, %edi
10000e8d9:	e8 ee 31 03 00	callq	0x100041acc ## symbol stub for: _guarded_close_np
10000e8de:	83 f8 ff	cmpl	$-1, %eax
10000e8e1:	75 0c	jne	0x10000e8ef
10000e8e3:	e8 6b 0e 03 00	callq	0x10003f753
10000e8e8:	e8 73 2e 03 00	callq	0x100041760 ## symbol stub for: ___error
10000e8ed:	8b 18	movl	(%rax), %ebx
10000e8ef:	4c 89 e7	movq	%r12, %rdi
10000e8f2:	31 f6	xorl	%esi, %esi
10000e8f4:	89 da	movl	%ebx, %edx
10000e8f6:	e8 4b 03 00 00	callq	0x10000ec46
10000e8fb:	49 8b 7e 20	movq	32(%r14), %rdi
10000e8ff:	be 2e 00 00 00	movl	$46, %esi
10000e904:	e8 48 40 00 00	callq	0x100012951
10000e909:	48 83 c4 08	addq	$8, %rsp
10000e90d:	5b	popq	%rbx
10000e90e:	41 5c	popq	%r12
10000e910:	41 5d	popq	%r13
10000e912:	41 5e	popq	%r14
10000e914:	41 5f	popq	%r15
10000e916:	5d	popq	%rbp
10000e917:	c3	retq
10000e918:	b8 00 40 00 00	movl	$16384, %eax
10000e91d:	41 03 44 24 5c	addl	92(%r12), %eax
10000e922:	0f b7 c0	movzwl	%ax, %eax
10000e925:	3d 00 b0 00 00	cmpl	$45056, %eax
10000e92a:	73 11	jae	0x10000e93d
10000e92c:	c1 e8 0c	shrl	$12, %eax
10000e92f:	b9 61 05 00 00	movl	$1377, %ecx
10000e934:	0f a3 c1	btl	%eax, %ecx
10000e937:	0f 82 80 00 00 00	jb	0x10000e9bd
10000e93d:	44 89 ff	movl	%r15d, %edi
10000e940:	e8 2b 3d 02 00	callq	0x100032670
10000e945:	48 85 c0	testq	%rax, %rax
10000e948:	74 81	je	0x10000e8cb
10000e94a:	48 89 c3	movq	%rax, %rbx
10000e94d:	49 8b 7c 24 38	movq	56(%r12), %rdi
10000e952:	e8 d9 30 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e957:	49 89 5c 24 38	movq	%rbx, 56(%r12)
10000e95c:	44 89 ff	movl	%r15d, %edi
10000e95f:	e8 4a 34 03 00	callq	0x100041dae ## symbol stub for: _rootless_check_trusted_fd
10000e964:	85 c0	testl	%eax, %eax
10000e966:	0f 94 c0	sete	%al
10000e969:	41 8a 8c 24 00 01 00 00	movb	256(%r12), %cl
10000e971:	00 c0	addb	%al, %al
10000e973:	80 e1 fd	andb	$-3, %cl
10000e976:	08 c1	orb	%al, %cl
10000e978:	41 88 8c 24 00 01 00 00	movb	%cl, 256(%r12)
10000e980:	4d 8b ac 24 b8 00 00 00	movq	184(%r12), %r13
10000e988:	4c 89 ef	movq	%r13, %rdi
10000e98b:	e8 55 eb ff ff	callq	0x10000d4e5
10000e990:	48 89 c3	movq	%rax, %rbx
10000e993:	44 89 ff	movl	%r15d, %edi
10000e996:	48 89 c6	movq	%rax, %rsi
10000e999:	4c 89 ea	movq	%r13, %rdx
10000e99c:	e8 e9 33 03 00	callq	0x100041d8a ## symbol stub for: _read
10000e9a1:	48 85 c0	testq	%rax, %rax
10000e9a4:	78 29	js	0x10000e9cf
10000e9a6:	4c 39 e8	cmpq	%r13, %rax
10000e9a9:	74 24	je	0x10000e9cf
10000e9ab:	48 89 df	movq	%rbx, %rdi
10000e9ae:	e8 7d 30 03 00	callq	0x100041a30 ## symbol stub for: _free
10000e9b3:	bb 05 00 00 00	movl	$5, %ebx
10000e9b8:	e9 15 ff ff ff	jmp	0x10000e8d2
10000e9bd:	0f b7 c0	movzwl	%ax, %eax
10000e9c0:	48 8d 0d f9 48 03 00	leaq	215289(%rip), %rcx
10000e9c7:	8b 1c 81	movl	(%rcx,%rax,4), %ebx
10000e9ca:	e9 03 ff ff ff	jmp	0x10000e8d2
10000e9cf:	48 8b 05 62 96 04 00	movq	300642(%rip), %rax ## literal pool symbol address: __dispatch_data_destructor_free
10000e9d6:	48 8b 08	movq	(%rax), %rcx
10000e9d9:	48 89 df	movq	%rbx, %rdi
10000e9dc:	31 db	xorl	%ebx, %ebx
10000e9de:	4c 89 ee	movq	%r13, %rsi
10000e9e1:	31 d2	xorl	%edx, %edx
10000e9e3:	e8 fe 2e 03 00	callq	0x1000418e6 ## symbol stub for: _dispatch_data_create
10000e9e8:	49 89 44 24 40	movq	%rax, 64(%r12)
10000e9ed:	e9 e0 fe ff ff	jmp	0x10000e8d2
10000e9f2:	55	pushq	%rbp
10000e9f3:	48 89 e5	movq	%rsp, %rbp
10000e9f6:	41 57	pushq	%r15
10000e9f8:	41 56	pushq	%r14
10000e9fa:	41 55	pushq	%r13
10000e9fc:	41 54	pushq	%r12
10000e9fe:	53	pushq	%rbx
10000e9ff:	48 83 ec 38	subq	$56, %rsp
10000ea03:	48 89 fb	movq	%rdi, %rbx
10000ea06:	48 8b 05 1b 96 04 00	movq	300571(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000ea0d:	48 8b 00	movq	(%rax), %rax
10000ea10:	48 89 45 d0	movq	%rax, -48(%rbp)
10000ea14:	4c 8b 6f 20	movq	32(%rdi), %r13
10000ea18:	e8 ea fa ff ff	callq	0x10000e507
10000ea1d:	48 89 c7	movq	%rax, %rdi
10000ea20:	e8 a9 2e 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000ea25:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000ea29:	4c 89 2e	movq	%r13, (%rsi)
10000ea2c:	49 8b 7d 38	movq	56(%r13), %rdi
10000ea30:	ba 1f 00 00 00	movl	$31, %edx
10000ea35:	b9 00 80 00 01	movl	$16809984, %ecx
10000ea3a:	31 c0	xorl	%eax, %eax
10000ea3c:	e8 91 30 03 00	callq	0x100041ad2 ## symbol stub for: _guarded_open_np
10000ea41:	85 c0	testl	%eax, %eax
10000ea43:	78 1f	js	0x10000ea64
10000ea45:	41 89 c7	movl	%eax, %r15d
10000ea48:	49 8d 75 58	leaq	88(%r13), %rsi
10000ea4c:	89 c7	movl	%eax, %edi
10000ea4e:	e8 ef 2f 03 00	callq	0x100041a42 ## symbol stub for: _fstat$INODE64
10000ea53:	85 c0	testl	%eax, %eax
10000ea55:	74 23	je	0x10000ea7a
10000ea57:	e8 04 2d 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ea5c:	44 8b 30	movl	(%rax), %r14d
10000ea5f:	e9 59 01 00 00	jmp	0x10000ebbd
10000ea64:	e8 f7 2c 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ea69:	8b 10	movl	(%rax), %edx
10000ea6b:	4c 89 ef	movq	%r13, %rdi
10000ea6e:	31 f6	xorl	%esi, %esi
10000ea70:	e8 d1 01 00 00	callq	0x10000ec46
10000ea75:	e9 74 01 00 00	jmp	0x10000ebee
10000ea7a:	41 0f b7 45 5c	movzwl	92(%r13), %eax
10000ea7f:	25 00 f0 00 00	andl	$61440, %eax
10000ea84:	3d 00 40 00 00	cmpl	$16384, %eax
10000ea89:	0f 85 28 01 00 00	jne	0x10000ebb7
10000ea8f:	44 89 ff	movl	%r15d, %edi
10000ea92:	e8 d9 3b 02 00	callq	0x100032670
10000ea97:	48 85 c0	testq	%rax, %rax
10000ea9a:	74 bb	je	0x10000ea57
10000ea9c:	49 89 c6	movq	%rax, %r14
10000ea9f:	48 89 5d a8	movq	%rbx, -88(%rbp)
10000eaa3:	49 8b 7d 38	movq	56(%r13), %rdi
10000eaa7:	e8 84 2f 03 00	callq	0x100041a30 ## symbol stub for: _free
10000eaac:	4d 89 75 38	movq	%r14, 56(%r13)
10000eab0:	48 8d 7d c0	leaq	-64(%rbp), %rdi
10000eab4:	4c 89 37	movq	%r14, (%rdi)
10000eab7:	48 c7 47 08 00 00 00 00	movq	$0, 8(%rdi)
10000eabf:	be 5c 00 00 00	movl	$92, %esi
10000eac4:	31 d2	xorl	%edx, %edx
10000eac6:	e8 89 2f 03 00	callq	0x100041a54 ## symbol stub for: _fts_open$INODE64
10000eacb:	48 89 c3	movq	%rax, %rbx
10000eace:	e8 5a e2 ff ff	callq	0x10000cd2d
10000ead3:	49 89 c4	movq	%rax, %r12
10000ead6:	48 89 5d b0	movq	%rbx, -80(%rbp)
10000eada:	48 89 df	movq	%rbx, %rdi
10000eadd:	e8 78 2f 03 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10000eae2:	48 85 c0	testq	%rax, %rax
10000eae5:	0f 84 30 01 00 00	je	0x10000ec1b
10000eaeb:	49 89 c6	movq	%rax, %r14
10000eaee:	31 c0	xorl	%eax, %eax
10000eaf0:	48 89 45 b8	movq	%rax, -72(%rbp)
10000eaf4:	41 0f b7 46 58	movzwl	88(%r14), %eax
10000eaf9:	66 83 f8 06	cmpw	$6, %ax
10000eafd:	7f 15	jg	0x10000eb14
10000eaff:	66 83 f8 01	cmpw	$1, %ax
10000eb03:	74 23	je	0x10000eb28
10000eb05:	66 83 f8 06	cmpw	$6, %ax
10000eb09:	75 5a	jne	0x10000eb65
10000eb0b:	48 ff 4d b8	decq	-72(%rbp)
10000eb0f:	e9 81 00 00 00	jmp	0x10000eb95
10000eb14:	66 83 f8 07	cmpw	$7, %ax
10000eb18:	74 3c	je	0x10000eb56
10000eb1a:	66 83 f8 0b	cmpw	$11, %ax
10000eb1e:	75 45	jne	0x10000eb65
10000eb20:	49 8b 76 30	movq	48(%r14), %rsi
10000eb24:	31 ff	xorl	%edi, %edi
10000eb26:	eb 2a	jmp	0x10000eb52
10000eb28:	48 8b 45 b8	movq	-72(%rbp), %rax
10000eb2c:	48 85 c0	testq	%rax, %rax
10000eb2f:	74 7b	je	0x10000ebac
10000eb31:	48 ff c0	incq	%rax
10000eb34:	48 89 45 b8	movq	%rax, -72(%rbp)
10000eb38:	48 8b 7d b0	movq	-80(%rbp), %rdi
10000eb3c:	4c 89 f6	movq	%r14, %rsi
10000eb3f:	ba 04 00 00 00	movl	$4, %edx
10000eb44:	e8 17 2f 03 00	callq	0x100041a60 ## symbol stub for: _fts_set$INODE64
10000eb49:	49 8b 76 30	movq	48(%r14), %rsi
10000eb4d:	bf 03 00 00 00	movl	$3, %edi
10000eb52:	31 d2	xorl	%edx, %edx
10000eb54:	eb 1d	jmp	0x10000eb73
10000eb56:	49 8b 76 30	movq	48(%r14), %rsi
10000eb5a:	41 8b 56 38	movl	56(%r14), %edx
10000eb5e:	bf 04 00 00 00	movl	$4, %edi
10000eb63:	eb 0e	jmp	0x10000eb73
10000eb65:	49 8b 76 30	movq	48(%r14), %rsi
10000eb69:	bf 04 00 00 00	movl	$4, %edi
10000eb6e:	ba 6c 00 00 00	movl	$108, %edx
10000eb73:	e8 d0 d2 ff ff	callq	0x10000be48
10000eb78:	48 89 c3	movq	%rax, %rbx
10000eb7b:	48 85 c0	testq	%rax, %rax
10000eb7e:	74 15	je	0x10000eb95
10000eb80:	4c 89 e7	movq	%r12, %rdi
10000eb83:	48 89 de	movq	%rbx, %rsi
10000eb86:	e8 08 e2 ff ff	callq	0x10000cd93
10000eb8b:	48 89 df	movq	%rbx, %rdi
10000eb8e:	31 f6	xorl	%esi, %esi
10000eb90:	e8 bc 3d 00 00	callq	0x100012951
10000eb95:	48 8b 7d b0	movq	-80(%rbp), %rdi
10000eb99:	e8 bc 2e 03 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10000eb9e:	49 89 c6	movq	%rax, %r14
10000eba1:	48 85 c0	testq	%rax, %rax
10000eba4:	0f 85 4a ff ff ff	jne	0x10000eaf4
10000ebaa:	eb 6f	jmp	0x10000ec1b
10000ebac:	b8 01 00 00 00	movl	$1, %eax
10000ebb1:	48 89 45 b8	movq	%rax, -72(%rbp)
10000ebb5:	eb de	jmp	0x10000eb95
10000ebb7:	41 be 14 00 00 00	movl	$20, %r14d
10000ebbd:	45 31 e4	xorl	%r12d, %r12d
10000ebc0:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000ebc4:	44 89 ff	movl	%r15d, %edi
10000ebc7:	e8 00 2f 03 00	callq	0x100041acc ## symbol stub for: _guarded_close_np
10000ebcc:	83 f8 ff	cmpl	$-1, %eax
10000ebcf:	74 66	je	0x10000ec37
10000ebd1:	4c 89 ef	movq	%r13, %rdi
10000ebd4:	4c 89 e6	movq	%r12, %rsi
10000ebd7:	44 89 f2	movl	%r14d, %edx
10000ebda:	e8 67 00 00 00	callq	0x10000ec46
10000ebdf:	4d 85 e4	testq	%r12, %r12
10000ebe2:	74 0a	je	0x10000ebee
10000ebe4:	4c 89 e7	movq	%r12, %rdi
10000ebe7:	31 f6	xorl	%esi, %esi
10000ebe9:	e8 63 3d 00 00	callq	0x100012951
10000ebee:	48 8b 7b 20	movq	32(%rbx), %rdi
10000ebf2:	be 2e 00 00 00	movl	$46, %esi
10000ebf7:	e8 55 3d 00 00	callq	0x100012951
10000ebfc:	48 8b 05 25 94 04 00	movq	300069(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000ec03:	48 8b 00	movq	(%rax), %rax
10000ec06:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000ec0a:	75 35	jne	0x10000ec41
10000ec0c:	48 83 c4 38	addq	$56, %rsp
10000ec10:	5b	popq	%rbx
10000ec11:	41 5c	popq	%r12
10000ec13:	41 5d	popq	%r13
10000ec15:	41 5e	popq	%r14
10000ec17:	41 5f	popq	%r15
10000ec19:	5d	popq	%rbp
10000ec1a:	c3	retq
10000ec1b:	48 8b 7d b0	movq	-80(%rbp), %rdi
10000ec1f:	e8 2a 2e 03 00	callq	0x100041a4e ## symbol stub for: _fts_close$INODE64
10000ec24:	83 f8 ff	cmpl	$-1, %eax
10000ec27:	74 13	je	0x10000ec3c
10000ec29:	45 31 f6	xorl	%r14d, %r14d
10000ec2c:	45 85 ff	testl	%r15d, %r15d
10000ec2f:	48 8b 5d a8	movq	-88(%rbp), %rbx
10000ec33:	79 8b	jns	0x10000ebc0
10000ec35:	eb 9a	jmp	0x10000ebd1
10000ec37:	e8 32 0b 03 00	callq	0x10003f76e
10000ec3c:	e8 48 0b 03 00	callq	0x10003f789
10000ec41:	e8 2c 2b 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000ec46:	55	pushq	%rbp
10000ec47:	48 89 e5	movq	%rsp, %rbp
10000ec4a:	41 57	pushq	%r15
10000ec4c:	41 56	pushq	%r14
10000ec4e:	53	pushq	%rbx
10000ec4f:	48 83 ec 38	subq	$56, %rsp
10000ec53:	41 89 d7	movl	%edx, %r15d
10000ec56:	49 89 f6	movq	%rsi, %r14
10000ec59:	48 89 fb	movq	%rdi, %rbx
10000ec5c:	e8 a6 f8 ff ff	callq	0x10000e507
10000ec61:	48 89 c7	movq	%rax, %rdi
10000ec64:	e8 65 2c 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000ec69:	44 89 bb e8 00 00 00	movl	%r15d, 232(%rbx)
10000ec70:	48 89 df	movq	%rbx, %rdi
10000ec73:	be 02 00 00 00	movl	$2, %esi
10000ec78:	e8 51 3c 00 00	callq	0x1000128ce
10000ec7d:	4d 85 f6	testq	%r14, %r14
10000ec80:	74 0d	je	0x10000ec8f
10000ec82:	4c 89 f7	movq	%r14, %rdi
10000ec85:	be 02 00 00 00	movl	$2, %esi
10000ec8a:	e8 3f 3c 00 00	callq	0x1000128ce
10000ec8f:	48 8b bb f0 00 00 00	movq	240(%rbx), %rdi
10000ec96:	48 8b 05 7b 93 04 00	movq	299899(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000ec9d:	48 8d 75 b8	leaq	-72(%rbp), %rsi
10000eca1:	48 89 06	movq	%rax, (%rsi)
10000eca4:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000ecac:	48 8d 05 27 00 00 00	leaq	39(%rip), %rax
10000ecb3:	48 89 46 10	movq	%rax, 16(%rsi)
10000ecb7:	48 8d 05 7a ba 04 00	leaq	309882(%rip), %rax
10000ecbe:	48 89 46 18	movq	%rax, 24(%rsi)
10000ecc2:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000ecc6:	4c 89 76 28	movq	%r14, 40(%rsi)
10000ecca:	e8 05 2c 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10000eccf:	48 83 c4 38	addq	$56, %rsp
10000ecd3:	5b	popq	%rbx
10000ecd4:	41 5e	popq	%r14
10000ecd6:	41 5f	popq	%r15
10000ecd8:	5d	popq	%rbp
10000ecd9:	c3	retq
10000ecda:	55	pushq	%rbp
10000ecdb:	48 89 e5	movq	%rsp, %rbp
10000ecde:	53	pushq	%rbx
10000ecdf:	50	pushq	%rax
10000ece0:	48 89 fb	movq	%rdi, %rbx
10000ece3:	48 8b 47 20	movq	32(%rdi), %rax
10000ece7:	48 8b 77 28	movq	40(%rdi), %rsi
10000eceb:	48 8b b8 f8 00 00 00	movq	248(%rax), %rdi
10000ecf2:	8b 90 e8 00 00 00	movl	232(%rax), %edx
10000ecf8:	ff 57 10	callq	*16(%rdi)
10000ecfb:	48 8b 7b 28	movq	40(%rbx), %rdi
10000ecff:	48 85 ff	testq	%rdi, %rdi
10000ed02:	74 0a	je	0x10000ed0e
10000ed04:	be 02 00 00 00	movl	$2, %esi
10000ed09:	e8 43 3c 00 00	callq	0x100012951
10000ed0e:	48 8b 7b 20	movq	32(%rbx), %rdi
10000ed12:	be 02 00 00 00	movl	$2, %esi
10000ed17:	48 83 c4 08	addq	$8, %rsp
10000ed1b:	5b	popq	%rbx
10000ed1c:	5d	popq	%rbp
10000ed1d:	e9 2f 3c 00 00	jmp	0x100012951
10000ed22:	55	pushq	%rbp
10000ed23:	48 89 e5	movq	%rsp, %rbp
10000ed26:	41 56	pushq	%r14
10000ed28:	53	pushq	%rbx
10000ed29:	48 83 ec 30	subq	$48, %rsp
10000ed2d:	49 89 fe	movq	%rdi, %r14
10000ed30:	e8 06 d1 ff ff	callq	0x10000be3b
10000ed35:	48 89 c3	movq	%rax, %rbx
10000ed38:	48 89 c7	movq	%rax, %rdi
10000ed3b:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10000ed42:	e8 29 2c 03 00	callq	0x100041970 ## symbol stub for: _dispatch_semaphore_wait
10000ed47:	49 8b 46 20	movq	32(%r14), %rax
10000ed4b:	48 8b 78 48	movq	72(%rax), %rdi
10000ed4f:	e8 7c 32 03 00	callq	0x100041fd0 ## symbol stub for: _xpc_bundle_resolve_sync
10000ed54:	48 89 df	movq	%rbx, %rdi
10000ed57:	e8 0e 2c 03 00	callq	0x10004196a ## symbol stub for: _dispatch_semaphore_signal
10000ed5c:	49 8b 46 20	movq	32(%r14), %rax
10000ed60:	48 8b b8 f0 00 00 00	movq	240(%rax), %rdi
10000ed67:	48 8b 0d aa 92 04 00	movq	299690(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000ed6e:	48 8d 75 c8	leaq	-56(%rbp), %rsi
10000ed72:	48 89 0e	movq	%rcx, (%rsi)
10000ed75:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10000ed7d:	48 8d 0d 21 00 00 00	leaq	33(%rip), %rcx
10000ed84:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000ed88:	48 8d 0d c9 b9 04 00	leaq	309705(%rip), %rcx
10000ed8f:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000ed93:	48 89 46 20	movq	%rax, 32(%rsi)
10000ed97:	e8 38 2b 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10000ed9c:	48 83 c4 30	addq	$48, %rsp
10000eda0:	5b	popq	%rbx
10000eda1:	41 5e	popq	%r14
10000eda3:	5d	popq	%rbp
10000eda4:	c3	retq
10000eda5:	55	pushq	%rbp
10000eda6:	48 89 e5	movq	%rsp, %rbp
10000eda9:	41 57	pushq	%r15
10000edab:	41 56	pushq	%r14
10000edad:	41 54	pushq	%r12
10000edaf:	53	pushq	%rbx
10000edb0:	49 89 fe	movq	%rdi, %r14
10000edb3:	48 8b 5f 20	movq	32(%rdi), %rbx
10000edb7:	48 8b bb f0 00 00 00	movq	240(%rbx), %rdi
10000edbe:	e8 0b 2b 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10000edc3:	4c 8b 7b 48	movq	72(%rbx), %r15
10000edc7:	4c 89 ff	movq	%r15, %rdi
10000edca:	e8 dd 31 03 00	callq	0x100041fac ## symbol stub for: _xpc_bundle_get_error
10000edcf:	41 89 c4	movl	%eax, %r12d
10000edd2:	85 c0	testl	%eax, %eax
10000edd4:	75 4b	jne	0x10000ee21
10000edd6:	4c 89 ff	movq	%r15, %rdi
10000edd9:	be 04 00 00 00	movl	$4, %esi
10000edde:	e8 e1 31 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
10000ede3:	48 8d 7b 58	leaq	88(%rbx), %rdi
10000ede7:	ba 90 00 00 00	movl	$144, %edx
10000edec:	48 89 c6	movq	%rax, %rsi
10000edef:	e8 da 2d 03 00	callq	0x100041bce ## symbol stub for: _memcpy
10000edf4:	4c 89 ff	movq	%r15, %rdi
10000edf7:	be 02 00 00 00	movl	$2, %esi
10000edfc:	e8 c3 31 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
10000ee01:	48 89 c7	movq	%rax, %rdi
10000ee04:	e8 9f 2f 03 00	callq	0x100041da8 ## symbol stub for: _rootless_check_trusted
10000ee09:	85 c0	testl	%eax, %eax
10000ee0b:	0f 94 c0	sete	%al
10000ee0e:	8a 8b 00 01 00 00	movb	256(%rbx), %cl
10000ee14:	00 c0	addb	%al, %al
10000ee16:	80 e1 fd	andb	$-3, %cl
10000ee19:	08 c1	orb	%al, %cl
10000ee1b:	88 8b 00 01 00 00	movb	%cl, 256(%rbx)
10000ee21:	44 89 a3 e8 00 00 00	movl	%r12d, 232(%rbx)
10000ee28:	48 8b bb f8 00 00 00	movq	248(%rbx), %rdi
10000ee2f:	31 f6	xorl	%esi, %esi
10000ee31:	44 89 e2	movl	%r12d, %edx
10000ee34:	ff 57 10	callq	*16(%rdi)
10000ee37:	49 8b 7e 20	movq	32(%r14), %rdi
10000ee3b:	be 2e 00 00 00	movl	$46, %esi
10000ee40:	5b	popq	%rbx
10000ee41:	41 5c	popq	%r12
10000ee43:	41 5e	popq	%r14
10000ee45:	41 5f	popq	%r15
10000ee47:	5d	popq	%rbp
10000ee48:	e9 04 3b 00 00	jmp	0x100012951
10000ee4d:	55	pushq	%rbp
10000ee4e:	48 89 e5	movq	%rsp, %rbp
10000ee51:	41 57	pushq	%r15
10000ee53:	41 56	pushq	%r14
10000ee55:	53	pushq	%rbx
10000ee56:	50	pushq	%rax
10000ee57:	48 89 cb	movq	%rcx, %rbx
10000ee5a:	49 89 d6	movq	%rdx, %r14
10000ee5d:	49 89 f7	movq	%rsi, %r15
10000ee60:	8b 06	movl	(%rsi), %eax
10000ee62:	48 01 c7	addq	%rax, %rdi
10000ee65:	48 81 c7 c9 00 00 00	addq	$201, %rdi
10000ee6c:	48 89 ce	movq	%rcx, %rsi
10000ee6f:	e8 be 2f 03 00	callq	0x100041e32 ## symbol stub for: _strcpy
10000ee74:	48 89 df	movq	%rbx, %rdi
10000ee77:	e8 da 2f 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000ee7c:	41 01 07	addl	%eax, (%r15)
10000ee7f:	49 29 06	subq	%rax, (%r14)
10000ee82:	48 83 c4 08	addq	$8, %rsp
10000ee86:	5b	popq	%rbx
10000ee87:	41 5e	popq	%r14
10000ee89:	41 5f	popq	%r15
10000ee8b:	5d	popq	%rbp
10000ee8c:	c3	retq
10000ee8d:	55	pushq	%rbp
10000ee8e:	48 89 e5	movq	%rsp, %rbp
10000ee91:	41 57	pushq	%r15
10000ee93:	41 56	pushq	%r14
10000ee95:	53	pushq	%rbx
10000ee96:	50	pushq	%rax
10000ee97:	48 89 cb	movq	%rcx, %rbx
10000ee9a:	49 89 d6	movq	%rdx, %r14
10000ee9d:	49 89 f7	movq	%rsi, %r15
10000eea0:	8b 06	movl	(%rsi), %eax
10000eea2:	48 01 c7	addq	%rax, %rdi
10000eea5:	48 81 c7 c9 00 00 00	addq	$201, %rdi
10000eeac:	48 89 ce	movq	%rcx, %rsi
10000eeaf:	e8 7e 2f 03 00	callq	0x100041e32 ## symbol stub for: _strcpy
10000eeb4:	48 89 df	movq	%rbx, %rdi
10000eeb7:	e8 9a 2f 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000eebc:	48 ff c0	incq	%rax
10000eebf:	41 01 07	addl	%eax, (%r15)
10000eec2:	49 29 06	subq	%rax, (%r14)
10000eec5:	48 83 c4 08	addq	$8, %rsp
10000eec9:	5b	popq	%rbx
10000eeca:	41 5e	popq	%r14
10000eecc:	41 5f	popq	%r15
10000eece:	5d	popq	%rbp
10000eecf:	c3	retq
10000eed0:	55	pushq	%rbp
10000eed1:	48 89 e5	movq	%rsp, %rbp
10000eed4:	e8 13 2b ff ff	callq	0x1000019ec
10000eed9:	89 c0	movl	%eax, %eax
10000eedb:	48 c1 e0 03	shlq	$3, %rax
10000eedf:	5d	popq	%rbp
10000eee0:	c3	retq
10000eee1:	55	pushq	%rbp
10000eee2:	48 89 e5	movq	%rsp, %rbp
10000eee5:	41 57	pushq	%r15
10000eee7:	41 56	pushq	%r14
10000eee9:	41 55	pushq	%r13
10000eeeb:	41 54	pushq	%r12
10000eeed:	53	pushq	%rbx
10000eeee:	48 83 ec 18	subq	$24, %rsp
10000eef2:	49 89 ce	movq	%rcx, %r14
10000eef5:	49 89 d7	movq	%rdx, %r15
10000eef8:	49 89 f4	movq	%rsi, %r12
10000eefb:	48 89 fb	movq	%rdi, %rbx
10000eefe:	48 89 f7	movq	%rsi, %rdi
10000ef01:	e8 e6 2a ff ff	callq	0x1000019ec
10000ef06:	89 43 20	movl	%eax, 32(%rbx)
10000ef09:	85 c0	testl	%eax, %eax
10000ef0b:	74 5c	je	0x10000ef69
10000ef0d:	4c 89 75 c8	movq	%r14, -56(%rbp)
10000ef11:	41 8b 0f	movl	(%r15), %ecx
10000ef14:	89 4b 24	movl	%ecx, 36(%rbx)
10000ef17:	4c 89 7d d0	movq	%r15, -48(%rbp)
10000ef1b:	41 8b 0f	movl	(%r15), %ecx
10000ef1e:	44 8d 68 ff	leal	-1(%rax), %r13d
10000ef22:	49 c1 e5 03	shlq	$3, %r13
10000ef26:	41 89 c6	movl	%eax, %r14d
10000ef29:	4c 8d 3c 19	leaq	(%rcx,%rbx), %r15
10000ef2d:	49 81 c7 cd 00 00 00	addq	$205, %r15
10000ef34:	31 db	xorl	%ebx, %ebx
10000ef36:	4c 89 e7	movq	%r12, %rdi
10000ef39:	89 de	movl	%ebx, %esi
10000ef3b:	e8 b5 2a ff ff	callq	0x1000019f5
10000ef40:	41 89 44 df fc	movl	%eax, -4(%r15,%rbx,8)
10000ef45:	4c 89 e7	movq	%r12, %rdi
10000ef48:	89 de	movl	%ebx, %esi
10000ef4a:	e8 bb 2a ff ff	callq	0x100001a0a
10000ef4f:	41 89 04 df	movl	%eax, (%r15,%rbx,8)
10000ef53:	48 ff c3	incq	%rbx
10000ef56:	49 39 de	cmpq	%rbx, %r14
10000ef59:	75 db	jne	0x10000ef36
10000ef5b:	49 83 c5 08	addq	$8, %r13
10000ef5f:	4c 8b 75 c8	movq	-56(%rbp), %r14
10000ef63:	4c 8b 7d d0	movq	-48(%rbp), %r15
10000ef67:	eb 0a	jmp	0x10000ef73
10000ef69:	c7 43 24 00 00 00 00	movl	$0, 36(%rbx)
10000ef70:	45 31 ed	xorl	%r13d, %r13d
10000ef73:	4c 89 e7	movq	%r12, %rdi
10000ef76:	e8 71 2a ff ff	callq	0x1000019ec
10000ef7b:	89 c0	movl	%eax, %eax
10000ef7d:	48 c1 e0 03	shlq	$3, %rax
10000ef81:	49 39 c5	cmpq	%rax, %r13
10000ef84:	75 15	jne	0x10000ef9b
10000ef86:	45 01 2f	addl	%r13d, (%r15)
10000ef89:	4d 29 2e	subq	%r13, (%r14)
10000ef8c:	48 83 c4 18	addq	$24, %rsp
10000ef90:	5b	popq	%rbx
10000ef91:	41 5c	popq	%r12
10000ef93:	41 5d	popq	%r13
10000ef95:	41 5e	popq	%r14
10000ef97:	41 5f	popq	%r15
10000ef99:	5d	popq	%rbp
10000ef9a:	c3	retq
10000ef9b:	e8 04 08 03 00	callq	0x10003f7a4
10000efa0:	55	pushq	%rbp
10000efa1:	48 89 e5	movq	%rsp, %rbp
10000efa4:	5d	popq	%rbp
10000efa5:	c3	retq
10000efa6:	55	pushq	%rbp
10000efa7:	48 89 e5	movq	%rsp, %rbp
10000efaa:	bf 01 00 00 00	movl	$1, %edi
10000efaf:	e8 48 2e 03 00	callq	0x100041dfc ## symbol stub for: _sleep
10000efb4:	b8 01 00 00 00	movl	$1, %eax
10000efb9:	5d	popq	%rbp
10000efba:	c3	retq
10000efbb:	55	pushq	%rbp
10000efbc:	48 89 e5	movq	%rsp, %rbp
10000efbf:	41 56	pushq	%r14
10000efc1:	53	pushq	%rbx
10000efc2:	48 89 f3	movq	%rsi, %rbx
10000efc5:	49 89 fe	movq	%rdi, %r14
10000efc8:	48 89 f7	movq	%rsi, %rdi
10000efcb:	e8 15 e5 ff ff	callq	0x10000d4e5
10000efd0:	48 89 c7	movq	%rax, %rdi
10000efd3:	4c 89 f6	movq	%r14, %rsi
10000efd6:	48 89 da	movq	%rbx, %rdx
10000efd9:	5b	popq	%rbx
10000efda:	41 5e	popq	%r14
10000efdc:	5d	popq	%rbp
10000efdd:	e9 ec 2b 03 00	jmp	0x100041bce ## symbol stub for: _memcpy
10000efe2:	55	pushq	%rbp
10000efe3:	48 89 e5	movq	%rsp, %rbp
10000efe6:	53	pushq	%rbx
10000efe7:	50	pushq	%rax
10000efe8:	48 89 fb	movq	%rdi, %rbx
10000efeb:	e8 48 2e 03 00	callq	0x100041e38 ## symbol stub for: _strdup
10000eff0:	48 85 c0	testq	%rax, %rax
10000eff3:	75 1f	jne	0x10000f014
10000eff5:	e8 66 27 03 00	callq	0x100041760 ## symbol stub for: ___error
10000effa:	83 38 0c	cmpl	$12, (%rax)
10000effd:	74 0b	je	0x10000f00a
10000efff:	e8 5c 27 03 00	callq	0x100041760 ## symbol stub for: ___error
10000f004:	8b 38	movl	(%rax), %edi
10000f006:	85 ff	testl	%edi, %edi
10000f008:	75 11	jne	0x10000f01b
10000f00a:	e8 97 ff ff ff	callq	0x10000efa6
10000f00f:	48 89 df	movq	%rbx, %rdi
10000f012:	eb d7	jmp	0x10000efeb
10000f014:	48 83 c4 08	addq	$8, %rsp
10000f018:	5b	popq	%rbx
10000f019:	5d	popq	%rbp
10000f01a:	c3	retq
10000f01b:	e8 99 07 03 00	callq	0x10003f7b9
10000f020:	55	pushq	%rbp
10000f021:	48 89 e5	movq	%rsp, %rbp
10000f024:	5d	popq	%rbp
10000f025:	e9 0e 2e 03 00	jmp	0x100041e38 ## symbol stub for: _strdup
10000f02a:	55	pushq	%rbp
10000f02b:	48 89 e5	movq	%rsp, %rbp
10000f02e:	41 56	pushq	%r14
10000f030:	53	pushq	%rbx
10000f031:	48 83 ec 40	subq	$64, %rsp
10000f035:	49 89 f6	movq	%rsi, %r14
10000f038:	48 8b 05 e9 8f 04 00	movq	298985(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f03f:	48 8b 00	movq	(%rax), %rax
10000f042:	48 89 45 e8	movq	%rax, -24(%rbp)
10000f046:	31 db	xorl	%ebx, %ebx
10000f048:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000f04c:	48 89 5e 10	movq	%rbx, 16(%rsi)
10000f050:	0f 57 c0	xorps	%xmm0, %xmm0
10000f053:	0f 29 06	movaps	%xmm0, (%rsi)
10000f056:	e8 5b 00 00 00	callq	0x10000f0b6
10000f05b:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10000f05f:	48 89 5e 10	movq	%rbx, 16(%rsi)
10000f063:	0f 57 c0	xorps	%xmm0, %xmm0
10000f066:	0f 29 06	movaps	%xmm0, (%rsi)
10000f069:	4c 89 f7	movq	%r14, %rdi
10000f06c:	e8 45 00 00 00	callq	0x10000f0b6
10000f071:	48 8b 44 dd b0	movq	-80(%rbp,%rbx,8), %rax
10000f076:	48 39 44 dd d0	cmpq	%rax, -48(%rbp,%rbx,8)
10000f07b:	77 0f	ja	0x10000f08c
10000f07d:	72 14	jb	0x10000f093
10000f07f:	48 ff c3	incq	%rbx
10000f082:	48 83 fb 03	cmpq	$3, %rbx
10000f086:	75 e9	jne	0x10000f071
10000f088:	31 c0	xorl	%eax, %eax
10000f08a:	eb 0c	jmp	0x10000f098
10000f08c:	b8 01 00 00 00	movl	$1, %eax
10000f091:	eb 05	jmp	0x10000f098
10000f093:	b8 ff ff ff ff	movl	$4294967295, %eax
10000f098:	48 8b 0d 89 8f 04 00	movq	298889(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f09f:	48 8b 09	movq	(%rcx), %rcx
10000f0a2:	48 3b 4d e8	cmpq	-24(%rbp), %rcx
10000f0a6:	75 09	jne	0x10000f0b1
10000f0a8:	48 83 c4 40	addq	$64, %rsp
10000f0ac:	5b	popq	%rbx
10000f0ad:	41 5e	popq	%r14
10000f0af:	5d	popq	%rbp
10000f0b0:	c3	retq
10000f0b1:	e8 bc 26 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000f0b6:	55	pushq	%rbp
10000f0b7:	48 89 e5	movq	%rsp, %rbp
10000f0ba:	41 57	pushq	%r15
10000f0bc:	41 56	pushq	%r14
10000f0be:	41 55	pushq	%r13
10000f0c0:	41 54	pushq	%r12
10000f0c2:	53	pushq	%rbx
10000f0c3:	48 83 ec 18	subq	$24, %rsp
10000f0c7:	48 89 f3	movq	%rsi, %rbx
10000f0ca:	e8 69 2d 03 00	callq	0x100041e38 ## symbol stub for: _strdup
10000f0cf:	4c 8d 7d c0	leaq	-64(%rbp), %r15
10000f0d3:	48 89 45 d0	movq	%rax, -48(%rbp)
10000f0d7:	49 89 07	movq	%rax, (%r15)
10000f0da:	45 31 f6	xorl	%r14d, %r14d
10000f0dd:	4c 8d 25 52 99 03 00	leaq	235858(%rip), %r12 ## literal pool for: "."
10000f0e4:	4c 8d 6d c8	leaq	-56(%rbp), %r13
10000f0e8:	4c 89 ff	movq	%r15, %rdi
10000f0eb:	4c 89 e6	movq	%r12, %rsi
10000f0ee:	e8 81 2d 03 00	callq	0x100041e74 ## symbol stub for: _strsep
10000f0f3:	48 85 c0	testq	%rax, %rax
10000f0f6:	74 25	je	0x10000f11d
10000f0f8:	48 c7 45 c8 00 00 00 00	movq	$0, -56(%rbp)
10000f100:	48 89 c7	movq	%rax, %rdi
10000f103:	4c 89 ee	movq	%r13, %rsi
10000f106:	ba 0a 00 00 00	movl	$10, %edx
10000f10b:	e8 82 2d 03 00	callq	0x100041e92 ## symbol stub for: _strtoull
10000f110:	4a 89 04 f3	movq	%rax, (%rbx,%r14,8)
10000f114:	49 ff c6	incq	%r14
10000f117:	49 83 fe 03	cmpq	$3, %r14
10000f11b:	75 cb	jne	0x10000f0e8
10000f11d:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000f121:	e8 0a 29 03 00	callq	0x100041a30 ## symbol stub for: _free
10000f126:	48 83 c4 18	addq	$24, %rsp
10000f12a:	5b	popq	%rbx
10000f12b:	41 5c	popq	%r12
10000f12d:	41 5d	popq	%r13
10000f12f:	41 5e	popq	%r14
10000f131:	41 5f	popq	%r15
10000f133:	5d	popq	%rbp
10000f134:	c3	retq
10000f135:	55	pushq	%rbp
10000f136:	48 89 e5	movq	%rsp, %rbp
10000f139:	41 57	pushq	%r15
10000f13b:	41 56	pushq	%r14
10000f13d:	41 55	pushq	%r13
10000f13f:	41 54	pushq	%r12
10000f141:	53	pushq	%rbx
10000f142:	48 81 ec e8 00 00 00	subq	$232, %rsp
10000f149:	48 89 fb	movq	%rdi, %rbx
10000f14c:	4c 8d a5 f0 fe ff ff	leaq	-272(%rbp), %r12
10000f153:	49 89 74 24 08	movq	%rsi, 8(%r12)
10000f158:	49 89 54 24 10	movq	%rdx, 16(%r12)
10000f15d:	49 89 4c 24 18	movq	%rcx, 24(%r12)
10000f162:	4d 89 44 24 20	movq	%r8, 32(%r12)
10000f167:	4d 89 4c 24 28	movq	%r9, 40(%r12)
10000f16c:	84 c0	testb	%al, %al
10000f16e:	74 32	je	0x10000f1a2
10000f170:	0f 29 85 20 ff ff ff	movaps	%xmm0, -224(%rbp)
10000f177:	0f 29 8d 30 ff ff ff	movaps	%xmm1, -208(%rbp)
10000f17e:	0f 29 95 40 ff ff ff	movaps	%xmm2, -192(%rbp)
10000f185:	0f 29 9d 50 ff ff ff	movaps	%xmm3, -176(%rbp)
10000f18c:	0f 29 a5 60 ff ff ff	movaps	%xmm4, -160(%rbp)
10000f193:	0f 29 ad 70 ff ff ff	movaps	%xmm5, -144(%rbp)
10000f19a:	0f 29 75 80	movaps	%xmm6, -128(%rbp)
10000f19e:	0f 29 7d 90	movaps	%xmm7, -112(%rbp)
10000f1a2:	48 8b 05 7f 8e 04 00	movq	298623(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f1a9:	48 8b 00	movq	(%rax), %rax
10000f1ac:	48 89 45 d0	movq	%rax, -48(%rbp)
10000f1b0:	4c 8d 75 a8	leaq	-88(%rbp), %r14
10000f1b4:	49 c7 06 00 00 00 00	movq	$0, (%r14)
10000f1bb:	0f 28 05 be 40 03 00	movaps	213182(%rip), %xmm0
10000f1c2:	48 8d 55 b0	leaq	-80(%rbp), %rdx
10000f1c6:	0f 29 02	movaps	%xmm0, (%rdx)
10000f1c9:	4c 89 62 10	movq	%r12, 16(%rdx)
10000f1cd:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000f1d7:	48 89 02	movq	%rax, (%rdx)
10000f1da:	4c 8d 6d 10	leaq	16(%rbp), %r13
10000f1de:	4c 89 6a 08	movq	%r13, 8(%rdx)
10000f1e2:	4c 89 f7	movq	%r14, %rdi
10000f1e5:	48 89 de	movq	%rbx, %rsi
10000f1e8:	e8 17 2d 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000f1ed:	49 8b 06	movq	(%r14), %rax
10000f1f0:	48 85 c0	testq	%rax, %rax
10000f1f3:	75 4f	jne	0x10000f244
10000f1f5:	4c 8d 75 a8	leaq	-88(%rbp), %r14
10000f1f9:	4c 8d 7d b0	leaq	-80(%rbp), %r15
10000f1fd:	e8 5e 25 03 00	callq	0x100041760 ## symbol stub for: ___error
10000f202:	83 38 0c	cmpl	$12, (%rax)
10000f205:	74 0b	je	0x10000f212
10000f207:	e8 54 25 03 00	callq	0x100041760 ## symbol stub for: ___error
10000f20c:	8b 38	movl	(%rax), %edi
10000f20e:	85 ff	testl	%edi, %edi
10000f210:	75 54	jne	0x10000f266
10000f212:	e8 8f fd ff ff	callq	0x10000efa6
10000f217:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10000f221:	48 89 45 b0	movq	%rax, -80(%rbp)
10000f225:	4c 89 6d b8	movq	%r13, -72(%rbp)
10000f229:	4c 89 65 c0	movq	%r12, -64(%rbp)
10000f22d:	4c 89 f7	movq	%r14, %rdi
10000f230:	48 89 de	movq	%rbx, %rsi
10000f233:	4c 89 fa	movq	%r15, %rdx
10000f236:	e8 c9 2c 03 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10000f23b:	48 8b 45 a8	movq	-88(%rbp), %rax
10000f23f:	48 85 c0	testq	%rax, %rax
10000f242:	74 b9	je	0x10000f1fd
10000f244:	48 8b 0d dd 8d 04 00	movq	298461(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f24b:	48 8b 09	movq	(%rcx), %rcx
10000f24e:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
10000f252:	75 17	jne	0x10000f26b
10000f254:	48 81 c4 e8 00 00 00	addq	$232, %rsp
10000f25b:	5b	popq	%rbx
10000f25c:	41 5c	popq	%r12
10000f25e:	41 5d	popq	%r13
10000f260:	41 5e	popq	%r14
10000f262:	41 5f	popq	%r15
10000f264:	5d	popq	%rbp
10000f265:	c3	retq
10000f266:	e8 64 05 03 00	callq	0x10003f7cf
10000f26b:	e8 02 25 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000f270:	55	pushq	%rbp
10000f271:	48 89 e5	movq	%rsp, %rbp
10000f274:	53	pushq	%rbx
10000f275:	50	pushq	%rax
10000f276:	48 89 fb	movq	%rdi, %rbx
10000f279:	e8 a6 24 03 00	callq	0x100041724 ## symbol stub for: __Block_copy
10000f27e:	48 85 c0	testq	%rax, %rax
10000f281:	75 1f	jne	0x10000f2a2
10000f283:	e8 d8 24 03 00	callq	0x100041760 ## symbol stub for: ___error
10000f288:	83 38 0c	cmpl	$12, (%rax)
10000f28b:	74 0b	je	0x10000f298
10000f28d:	e8 ce 24 03 00	callq	0x100041760 ## symbol stub for: ___error
10000f292:	8b 38	movl	(%rax), %edi
10000f294:	85 ff	testl	%edi, %edi
10000f296:	75 11	jne	0x10000f2a9
10000f298:	e8 09 fd ff ff	callq	0x10000efa6
10000f29d:	48 89 df	movq	%rbx, %rdi
10000f2a0:	eb d7	jmp	0x10000f279
10000f2a2:	48 83 c4 08	addq	$8, %rsp
10000f2a6:	5b	popq	%rbx
10000f2a7:	5d	popq	%rbp
10000f2a8:	c3	retq
10000f2a9:	e8 37 05 03 00	callq	0x10003f7e5
10000f2ae:	55	pushq	%rbp
10000f2af:	48 89 e5	movq	%rsp, %rbp
10000f2b2:	41 56	pushq	%r14
10000f2b4:	53	pushq	%rbx
10000f2b5:	48 89 f3	movq	%rsi, %rbx
10000f2b8:	49 89 fe	movq	%rdi, %r14
10000f2bb:	48 89 f7	movq	%rsi, %rdi
10000f2be:	e8 93 2b 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000f2c3:	4c 89 f7	movq	%r14, %rdi
10000f2c6:	48 89 de	movq	%rbx, %rsi
10000f2c9:	48 89 c2	movq	%rax, %rdx
10000f2cc:	e8 8b 2b 03 00	callq	0x100041e5c ## symbol stub for: _strncmp
10000f2d1:	85 c0	testl	%eax, %eax
10000f2d3:	0f 94 c0	sete	%al
10000f2d6:	5b	popq	%rbx
10000f2d7:	41 5e	popq	%r14
10000f2d9:	5d	popq	%rbp
10000f2da:	c3	retq
10000f2db:	55	pushq	%rbp
10000f2dc:	48 89 e5	movq	%rsp, %rbp
10000f2df:	41 57	pushq	%r15
10000f2e1:	41 56	pushq	%r14
10000f2e3:	53	pushq	%rbx
10000f2e4:	50	pushq	%rax
10000f2e5:	49 89 f6	movq	%rsi, %r14
10000f2e8:	49 89 ff	movq	%rdi, %r15
10000f2eb:	e8 66 2b 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000f2f0:	48 89 c3	movq	%rax, %rbx
10000f2f3:	4c 89 f7	movq	%r14, %rdi
10000f2f6:	e8 5b 2b 03 00	callq	0x100041e56 ## symbol stub for: _strlen
10000f2fb:	48 29 c3	subq	%rax, %rbx
10000f2fe:	78 15	js	0x10000f315
10000f300:	49 01 df	addq	%rbx, %r15
10000f303:	4c 89 ff	movq	%r15, %rdi
10000f306:	4c 89 f6	movq	%r14, %rsi
10000f309:	e8 1e 2b 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000f30e:	85 c0	testl	%eax, %eax
10000f310:	0f 94 c0	sete	%al
10000f313:	eb 02	jmp	0x10000f317
10000f315:	31 c0	xorl	%eax, %eax
10000f317:	48 83 c4 08	addq	$8, %rsp
10000f31b:	5b	popq	%rbx
10000f31c:	41 5e	popq	%r14
10000f31e:	41 5f	popq	%r15
10000f320:	5d	popq	%rbp
10000f321:	c3	retq
10000f322:	55	pushq	%rbp
10000f323:	48 89 e5	movq	%rsp, %rbp
10000f326:	e8 55 2b 03 00	callq	0x100041e80 ## symbol stub for: _strstr
10000f32b:	48 85 c0	testq	%rax, %rax
10000f32e:	0f 95 c0	setne	%al
10000f331:	5d	popq	%rbp
10000f332:	c3	retq
10000f333:	48 89 f8	movq	%rdi, %rax
10000f336:	48 09 f0	orq	%rsi, %rax
10000f339:	0f 94 c0	sete	%al
10000f33c:	48 85 ff	testq	%rdi, %rdi
10000f33f:	74 14	je	0x10000f355
10000f341:	48 85 f6	testq	%rsi, %rsi
10000f344:	74 0f	je	0x10000f355
10000f346:	55	pushq	%rbp
10000f347:	48 89 e5	movq	%rsp, %rbp
10000f34a:	e8 dd 2a 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10000f34f:	85 c0	testl	%eax, %eax
10000f351:	0f 94 c0	sete	%al
10000f354:	5d	popq	%rbp
10000f355:	c3	retq
10000f356:	48 89 f8	movq	%rdi, %rax
10000f359:	48 09 f0	orq	%rsi, %rax
10000f35c:	0f 94 c0	sete	%al
10000f35f:	48 85 ff	testq	%rdi, %rdi
10000f362:	74 14	je	0x10000f378
10000f364:	48 85 f6	testq	%rsi, %rsi
10000f367:	74 0f	je	0x10000f378
10000f369:	55	pushq	%rbp
10000f36a:	48 89 e5	movq	%rsp, %rbp
10000f36d:	e8 ae 2a 03 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10000f372:	85 c0	testl	%eax, %eax
10000f374:	0f 94 c0	sete	%al
10000f377:	5d	popq	%rbp
10000f378:	c3	retq
10000f379:	55	pushq	%rbp
10000f37a:	48 89 e5	movq	%rsp, %rbp
10000f37d:	48 85 f6	testq	%rsi, %rsi
10000f380:	74 2b	je	0x10000f3ad
10000f382:	41 b8 05 15 00 00	movl	$5381, %r8d
10000f388:	31 c9	xorl	%ecx, %ecx
10000f38a:	0f b6 14 0f	movzbl	(%rdi,%rcx), %edx
10000f38e:	48 85 d2	testq	%rdx, %rdx
10000f391:	74 21	je	0x10000f3b4
10000f393:	4c 89 c0	movq	%r8, %rax
10000f396:	48 c1 e0 05	shlq	$5, %rax
10000f39a:	4c 01 c0	addq	%r8, %rax
10000f39d:	48 01 d0	addq	%rdx, %rax
10000f3a0:	48 ff c1	incq	%rcx
10000f3a3:	49 89 c0	movq	%rax, %r8
10000f3a6:	48 39 ce	cmpq	%rcx, %rsi
10000f3a9:	75 df	jne	0x10000f38a
10000f3ab:	eb 0a	jmp	0x10000f3b7
10000f3ad:	b8 05 15 00 00	movl	$5381, %eax
10000f3b2:	eb 03	jmp	0x10000f3b7
10000f3b4:	4c 89 c0	movq	%r8, %rax
10000f3b7:	5d	popq	%rbp
10000f3b8:	c3	retq
10000f3b9:	55	pushq	%rbp
10000f3ba:	48 89 e5	movq	%rsp, %rbp
10000f3bd:	8a 0f	movb	(%rdi), %cl
10000f3bf:	84 c9	testb	%cl, %cl
10000f3c1:	74 24	je	0x10000f3e7
10000f3c3:	48 ff c7	incq	%rdi
10000f3c6:	31 d2	xorl	%edx, %edx
10000f3c8:	48 89 d0	movq	%rdx, %rax
10000f3cb:	48 0f be c9	movsbq	%cl, %rcx
10000f3cf:	48 c1 e0 05	shlq	$5, %rax
10000f3d3:	48 01 d0	addq	%rdx, %rax
10000f3d6:	48 01 c8	addq	%rcx, %rax
10000f3d9:	8a 0f	movb	(%rdi), %cl
10000f3db:	48 ff c7	incq	%rdi
10000f3de:	48 89 c2	movq	%rax, %rdx
10000f3e1:	84 c9	testb	%cl, %cl
10000f3e3:	75 e6	jne	0x10000f3cb
10000f3e5:	eb 02	jmp	0x10000f3e9
10000f3e7:	31 c0	xorl	%eax, %eax
10000f3e9:	5d	popq	%rbp
10000f3ea:	c3	retq
10000f3eb:	55	pushq	%rbp
10000f3ec:	48 89 e5	movq	%rsp, %rbp
10000f3ef:	48 85 d2	testq	%rdx, %rdx
10000f3f2:	74 16	je	0x10000f40a
10000f3f4:	48 83 c6 08	addq	$8, %rsi
10000f3f8:	31 c0	xorl	%eax, %eax
10000f3fa:	39 7e f8	cmpl	%edi, -8(%rsi)
10000f3fd:	74 0f	je	0x10000f40e
10000f3ff:	48 83 c6 10	addq	$16, %rsi
10000f403:	48 ff ca	decq	%rdx
10000f406:	75 f2	jne	0x10000f3fa
10000f408:	eb 07	jmp	0x10000f411
10000f40a:	31 c0	xorl	%eax, %eax
10000f40c:	eb 03	jmp	0x10000f411
10000f40e:	48 8b 06	movq	(%rsi), %rax
10000f411:	5d	popq	%rbp
10000f412:	c3	retq
10000f413:	48 85 ff	testq	%rdi, %rdi
10000f416:	74 06	je	0x10000f41e
10000f418:	48 89 f8	movq	%rdi, %rax
10000f41b:	31 d2	xorl	%edx, %edx
10000f41d:	c3	retq
10000f41e:	55	pushq	%rbp
10000f41f:	48 89 e5	movq	%rsp, %rbp
10000f422:	e8 d4 03 03 00	callq	0x10003f7fb
10000f427:	85 ff	testl	%edi, %edi
10000f429:	74 05	je	0x10000f430
10000f42b:	31 c0	xorl	%eax, %eax
10000f42d:	89 fa	movl	%edi, %edx
10000f42f:	c3	retq
10000f430:	55	pushq	%rbp
10000f431:	48 89 e5	movq	%rsp, %rbp
10000f434:	e8 d4 03 03 00	callq	0x10003f80d
10000f439:	55	pushq	%rbp
10000f43a:	48 89 e5	movq	%rsp, %rbp
10000f43d:	41 57	pushq	%r15
10000f43f:	41 56	pushq	%r14
10000f441:	41 55	pushq	%r13
10000f443:	41 54	pushq	%r12
10000f445:	53	pushq	%rbx
10000f446:	48 83 ec 68	subq	$104, %rsp
10000f44a:	48 89 cb	movq	%rcx, %rbx
10000f44d:	49 89 f6	movq	%rsi, %r14
10000f450:	49 89 ff	movq	%rdi, %r15
10000f453:	48 8b 05 ce 8b 04 00	movq	297934(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f45a:	48 8b 00	movq	(%rax), %rax
10000f45d:	48 89 45 d0	movq	%rax, -48(%rbp)
10000f461:	85 d2	testl	%edx, %edx
10000f463:	74 0b	je	0x10000f470
10000f465:	4c 89 ff	movq	%r15, %rdi
10000f468:	4c 89 f6	movq	%r14, %rsi
10000f46b:	e8 3b 96 02 00	callq	0x100038aab
10000f470:	48 89 df	movq	%rbx, %rdi
10000f473:	e8 4e 2c 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10000f478:	48 3b 05 a9 8c 04 00	cmpq	298153(%rip), %rax ## literal pool symbol address: __xpc_type_string
10000f47f:	0f 84 05 01 00 00	je	0x10000f58a
10000f485:	48 3b 05 84 8c 04 00	cmpq	298116(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10000f48c:	0f 84 1d 01 00 00	je	0x10000f5af
10000f492:	48 3b 05 97 8c 04 00	cmpq	298135(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10000f499:	0f 84 35 01 00 00	je	0x10000f5d4
10000f49f:	48 3b 05 62 8c 04 00	cmpq	298082(%rip), %rax ## literal pool symbol address: __xpc_type_double
10000f4a6:	0f 84 68 01 00 00	je	0x10000f614
10000f4ac:	48 3b 05 2d 8c 04 00	cmpq	298029(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10000f4b3:	0f 84 98 01 00 00	je	0x10000f651
10000f4b9:	48 3b 05 38 8c 04 00	cmpq	298040(%rip), %rax ## literal pool symbol address: __xpc_type_date
10000f4c0:	0f 84 c9 01 00 00	je	0x10000f68f
10000f4c6:	48 3b 05 0b 8c 04 00	cmpq	297995(%rip), %rax ## literal pool symbol address: __xpc_type_array
10000f4cd:	0f 84 4d 02 00 00	je	0x10000f720
10000f4d3:	48 3b 05 26 8c 04 00	cmpq	298022(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000f4da:	0f 84 df 02 00 00	je	0x10000f7bf
10000f4e0:	48 3b 05 01 8c 04 00	cmpq	297985(%rip), %rax ## literal pool symbol address: __xpc_type_bundle
10000f4e7:	0f 85 22 03 00 00	jne	0x10000f80f
10000f4ed:	48 8d 15 8c 95 03 00	leaq	234892(%rip), %rdx ## literal pool for: "@bundle {"
10000f4f4:	4c 89 ff	movq	%r15, %rdi
10000f4f7:	31 f6	xorl	%esi, %esi
10000f4f9:	31 c0	xorl	%eax, %eax
10000f4fb:	e8 72 97 02 00	callq	0x100038c72
10000f500:	48 89 df	movq	%rbx, %rdi
10000f503:	e8 b0 2a 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
10000f508:	49 89 c4	movq	%rax, %r12
10000f50b:	4d 8d 6e 01	leaq	1(%r14), %r13
10000f50f:	48 8d 15 74 95 03 00	leaq	234868(%rip), %rdx ## literal pool for: "info plist = "
10000f516:	4c 89 ff	movq	%r15, %rdi
10000f519:	4c 89 ee	movq	%r13, %rsi
10000f51c:	31 c0	xorl	%eax, %eax
10000f51e:	e8 65 96 02 00	callq	0x100038b88
10000f523:	4c 89 ff	movq	%r15, %rdi
10000f526:	4c 89 ee	movq	%r13, %rsi
10000f529:	31 d2	xorl	%edx, %edx
10000f52b:	4c 89 e1	movq	%r12, %rcx
10000f52e:	e8 06 ff ff ff	callq	0x10000f439
10000f533:	48 89 df	movq	%rbx, %rdi
10000f536:	e8 5f 2a 03 00	callq	0x100041f9a ## symbol stub for: _xpc_bundle_copy_services
10000f53b:	48 89 c3	movq	%rax, %rbx
10000f53e:	48 8d 15 53 95 03 00	leaq	234835(%rip), %rdx ## literal pool for: "service bundles => "
10000f545:	4c 89 ff	movq	%r15, %rdi
10000f548:	4c 89 ee	movq	%r13, %rsi
10000f54b:	31 c0	xorl	%eax, %eax
10000f54d:	e8 36 96 02 00	callq	0x100038b88
10000f552:	4c 89 ff	movq	%r15, %rdi
10000f555:	4c 89 ee	movq	%r13, %rsi
10000f558:	31 d2	xorl	%edx, %edx
10000f55a:	48 89 d9	movq	%rbx, %rcx
10000f55d:	e8 d7 fe ff ff	callq	0x10000f439
10000f562:	48 89 df	movq	%rbx, %rdi
10000f565:	e8 92 2b 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10000f56a:	48 8b 05 b7 8a 04 00	movq	297655(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f571:	48 8b 00	movq	(%rax), %rax
10000f574:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f578:	0f 85 b0 02 00 00	jne	0x10000f82e
10000f57e:	48 8d 15 f9 94 03 00	leaq	234745(%rip), %rdx ## literal pool for: "}"
10000f585:	e9 1a 02 00 00	jmp	0x10000f7a4
10000f58a:	48 89 df	movq	%rbx, %rdi
10000f58d:	e8 94 2b 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10000f592:	48 8b 0d 8f 8a 04 00	movq	297615(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f599:	48 8b 09	movq	(%rcx), %rcx
10000f59c:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
10000f5a0:	0f 85 88 02 00 00	jne	0x10000f82e
10000f5a6:	48 8d 15 8b 94 03 00	leaq	234635(%rip), %rdx ## literal pool for: "\"%s\""
10000f5ad:	eb 48	jmp	0x10000f5f7
10000f5af:	48 89 df	movq	%rbx, %rdi
10000f5b2:	e8 1b 2b 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10000f5b7:	48 8b 0d 6a 8a 04 00	movq	297578(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f5be:	48 8b 09	movq	(%rcx), %rcx
10000f5c1:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
10000f5c5:	0f 85 63 02 00 00	jne	0x10000f82e
10000f5cb:	48 8d 15 6b 94 03 00	leaq	234603(%rip), %rdx ## literal pool for: "%lld"
10000f5d2:	eb 23	jmp	0x10000f5f7
10000f5d4:	48 89 df	movq	%rbx, %rdi
10000f5d7:	e8 5c 2b 03 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
10000f5dc:	48 8b 0d 45 8a 04 00	movq	297541(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f5e3:	48 8b 09	movq	(%rcx), %rcx
10000f5e6:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
10000f5ea:	0f 85 3e 02 00 00	jne	0x10000f82e
10000f5f0:	48 8d 15 4b 94 03 00	leaq	234571(%rip), %rdx ## literal pool for: "%llu"
10000f5f7:	4c 89 ff	movq	%r15, %rdi
10000f5fa:	31 f6	xorl	%esi, %esi
10000f5fc:	48 89 c1	movq	%rax, %rcx
10000f5ff:	31 c0	xorl	%eax, %eax
10000f601:	48 83 c4 68	addq	$104, %rsp
10000f605:	5b	popq	%rbx
10000f606:	41 5c	popq	%r12
10000f608:	41 5d	popq	%r13
10000f60a:	41 5e	popq	%r14
10000f60c:	41 5f	popq	%r15
10000f60e:	5d	popq	%rbp
10000f60f:	e9 5e 96 02 00	jmp	0x100038c72
10000f614:	48 89 df	movq	%rbx, %rdi
10000f617:	e8 98 2a 03 00	callq	0x1000420b4 ## symbol stub for: _xpc_double_get_value
10000f61c:	48 8b 05 05 8a 04 00	movq	297477(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f623:	48 8b 00	movq	(%rax), %rax
10000f626:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f62a:	0f 85 fe 01 00 00	jne	0x10000f82e
10000f630:	48 8d 15 10 94 03 00	leaq	234512(%rip), %rdx ## literal pool for: "%f"
10000f637:	4c 89 ff	movq	%r15, %rdi
10000f63a:	31 f6	xorl	%esi, %esi
10000f63c:	b0 01	movb	$1, %al
10000f63e:	48 83 c4 68	addq	$104, %rsp
10000f642:	5b	popq	%rbx
10000f643:	41 5c	popq	%r12
10000f645:	41 5d	popq	%r13
10000f647:	41 5e	popq	%r14
10000f649:	41 5f	popq	%r15
10000f64b:	5d	popq	%rbp
10000f64c:	e9 21 96 02 00	jmp	0x100038c72
10000f651:	48 3b 1d 78 8a 04 00	cmpq	297592(%rip), %rbx ## literal pool symbol address: __xpc_bool_true
10000f658:	48 8d 05 eb 93 03 00	leaq	234475(%rip), %rax ## literal pool for: "true"
10000f65f:	48 8d 0d e9 93 03 00	leaq	234473(%rip), %rcx ## literal pool for: "false"
10000f666:	48 0f 44 c8	cmoveq	%rax, %rcx
10000f66a:	48 8b 05 b7 89 04 00	movq	297399(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f671:	48 8b 00	movq	(%rax), %rax
10000f674:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f678:	0f 85 b0 01 00 00	jne	0x10000f82e
10000f67e:	48 8d 15 91 7f 03 00	leaq	229265(%rip), %rdx ## literal pool for: "%s"
10000f685:	4c 89 ff	movq	%r15, %rdi
10000f688:	31 f6	xorl	%esi, %esi
10000f68a:	e9 70 ff ff ff	jmp	0x10000f5ff
10000f68f:	48 89 df	movq	%rbx, %rdi
10000f692:	e8 63 29 03 00	callq	0x100041ffa ## symbol stub for: _xpc_date_get_value_absolute
10000f697:	f2 0f 58 05 51 3c 03 00	addsd	212049(%rip), %xmm0
10000f69f:	f2 48 0f 2c c0	cvttsd2si	%xmm0, %rax
10000f6a4:	48 8d 7d a8	leaq	-88(%rbp), %rdi
10000f6a8:	48 89 07	movq	%rax, (%rdi)
10000f6ab:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10000f6b5:	48 8d 9d 70 ff ff ff	leaq	-144(%rbp), %rbx
10000f6bc:	48 89 43 30	movq	%rax, 48(%rbx)
10000f6c0:	0f 28 05 b9 3b 03 00	movaps	211897(%rip), %xmm0
10000f6c7:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10000f6cb:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10000f6cf:	0f 29 03	movaps	%xmm0, (%rbx)
10000f6d2:	48 89 de	movq	%rbx, %rsi
10000f6d5:	e8 ec 23 03 00	callq	0x100041ac6 ## symbol stub for: _gmtime_r
10000f6da:	4c 8d 75 b0	leaq	-80(%rbp), %r14
10000f6de:	0f 28 05 9b 3b 03 00	movaps	211867(%rip), %xmm0
10000f6e5:	41 0f 11 46 0e	movups	%xmm0, 14(%r14)
10000f6ea:	41 0f 29 06	movaps	%xmm0, (%r14)
10000f6ee:	48 8d 15 60 93 03 00	leaq	234336(%rip), %rdx ## literal pool for: "%a %b %d %T %Y %Z"
10000f6f5:	be 1e 00 00 00	movl	$30, %esi
10000f6fa:	4c 89 f7	movq	%r14, %rdi
10000f6fd:	48 89 d9	movq	%rbx, %rcx
10000f700:	e8 3f 27 03 00	callq	0x100041e44 ## symbol stub for: _strftime
10000f705:	48 8d 15 5b 93 03 00	leaq	234331(%rip), %rdx ## literal pool for: "%s (approx)"
10000f70c:	4c 89 ff	movq	%r15, %rdi
10000f70f:	31 f6	xorl	%esi, %esi
10000f711:	4c 89 f1	movq	%r14, %rcx
10000f714:	31 c0	xorl	%eax, %eax
10000f716:	e8 57 95 02 00	callq	0x100038c72
10000f71b:	e9 ef 00 00 00	jmp	0x10000f80f
10000f720:	48 8d 15 4c 93 03 00	leaq	234316(%rip), %rdx ## literal pool for: "["
10000f727:	4c 89 ff	movq	%r15, %rdi
10000f72a:	31 f6	xorl	%esi, %esi
10000f72c:	31 c0	xorl	%eax, %eax
10000f72e:	e8 3f 95 02 00	callq	0x100038c72
10000f733:	48 89 df	movq	%rbx, %rdi
10000f736:	e8 11 28 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10000f73b:	48 85 c0	testq	%rax, %rax
10000f73e:	74 49	je	0x10000f789
10000f740:	4d 8d 66 01	leaq	1(%r14), %r12
10000f744:	45 31 ed	xorl	%r13d, %r13d
10000f747:	4c 89 ff	movq	%r15, %rdi
10000f74a:	4c 89 e6	movq	%r12, %rsi
10000f74d:	48 8d 15 21 93 03 00	leaq	234273(%rip), %rdx ## literal pool for: "%lu = "
10000f754:	4c 89 e9	movq	%r13, %rcx
10000f757:	31 c0	xorl	%eax, %eax
10000f759:	e8 2a 94 02 00	callq	0x100038b88
10000f75e:	48 89 df	movq	%rbx, %rdi
10000f761:	4c 89 ee	movq	%r13, %rsi
10000f764:	e8 f5 27 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
10000f769:	4c 89 ff	movq	%r15, %rdi
10000f76c:	4c 89 e6	movq	%r12, %rsi
10000f76f:	31 d2	xorl	%edx, %edx
10000f771:	48 89 c1	movq	%rax, %rcx
10000f774:	e8 c0 fc ff ff	callq	0x10000f439
10000f779:	49 ff c5	incq	%r13
10000f77c:	48 89 df	movq	%rbx, %rdi
10000f77f:	e8 c8 27 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10000f784:	49 39 c5	cmpq	%rax, %r13
10000f787:	72 be	jb	0x10000f747
10000f789:	48 8b 05 98 88 04 00	movq	297112(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f790:	48 8b 00	movq	(%rax), %rax
10000f793:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f797:	0f 85 91 00 00 00	jne	0x10000f82e
10000f79d:	48 8d 15 8d 3e 03 00	leaq	212621(%rip), %rdx ## literal pool for: "]"
10000f7a4:	4c 89 ff	movq	%r15, %rdi
10000f7a7:	4c 89 f6	movq	%r14, %rsi
10000f7aa:	31 c0	xorl	%eax, %eax
10000f7ac:	48 83 c4 68	addq	$104, %rsp
10000f7b0:	5b	popq	%rbx
10000f7b1:	41 5c	popq	%r12
10000f7b3:	41 5d	popq	%r13
10000f7b5:	41 5e	popq	%r14
10000f7b7:	41 5f	popq	%r15
10000f7b9:	5d	popq	%rbp
10000f7ba:	e9 b3 94 02 00	jmp	0x100038c72
10000f7bf:	48 8d 15 b6 92 03 00	leaq	234166(%rip), %rdx ## literal pool for: "{"
10000f7c6:	4c 89 ff	movq	%r15, %rdi
10000f7c9:	31 f6	xorl	%esi, %esi
10000f7cb:	31 c0	xorl	%eax, %eax
10000f7cd:	e8 a0 94 02 00	callq	0x100038c72
10000f7d2:	49 8d 46 01	leaq	1(%r14), %rax
10000f7d6:	48 8d b5 70 ff ff ff	leaq	-144(%rbp), %rsi
10000f7dd:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10000f7e4:	4c 89 7e 08	movq	%r15, 8(%rsi)
10000f7e8:	48 89 46 10	movq	%rax, 16(%rsi)
10000f7ec:	48 8d 15 40 00 00 00	leaq	64(%rip), %rdx
10000f7f3:	48 89 df	movq	%rbx, %rdi
10000f7f6:	e8 0b 28 03 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10000f7fb:	48 8d 15 7c 92 03 00	leaq	234108(%rip), %rdx ## literal pool for: "}"
10000f802:	4c 89 ff	movq	%r15, %rdi
10000f805:	4c 89 f6	movq	%r14, %rsi
10000f808:	31 c0	xorl	%eax, %eax
10000f80a:	e8 63 94 02 00	callq	0x100038c72
10000f80f:	48 8b 05 12 88 04 00	movq	296978(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f816:	48 8b 00	movq	(%rax), %rax
10000f819:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f81d:	75 0f	jne	0x10000f82e
10000f81f:	48 83 c4 68	addq	$104, %rsp
10000f823:	5b	popq	%rbx
10000f824:	41 5c	popq	%r12
10000f826:	41 5d	popq	%r13
10000f828:	41 5e	popq	%r14
10000f82a:	41 5f	popq	%r15
10000f82c:	5d	popq	%rbp
10000f82d:	c3	retq
10000f82e:	e8 3f 1f 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000f833:	55	pushq	%rbp
10000f834:	48 89 e5	movq	%rsp, %rbp
10000f837:	41 57	pushq	%r15
10000f839:	41 56	pushq	%r14
10000f83b:	53	pushq	%rbx
10000f83c:	50	pushq	%rax
10000f83d:	49 89 f6	movq	%rsi, %r14
10000f840:	48 89 f9	movq	%rdi, %rcx
10000f843:	48 8b 5a 08	movq	8(%rdx), %rbx
10000f847:	4c 8b 7a 10	movq	16(%rdx), %r15
10000f84b:	48 8d 15 dc 93 03 00	leaq	234460(%rip), %rdx ## literal pool for: "\"%s\" => "
10000f852:	48 89 df	movq	%rbx, %rdi
10000f855:	4c 89 fe	movq	%r15, %rsi
10000f858:	31 c0	xorl	%eax, %eax
10000f85a:	e8 29 93 02 00	callq	0x100038b88
10000f85f:	48 89 df	movq	%rbx, %rdi
10000f862:	4c 89 fe	movq	%r15, %rsi
10000f865:	31 d2	xorl	%edx, %edx
10000f867:	4c 89 f1	movq	%r14, %rcx
10000f86a:	48 83 c4 08	addq	$8, %rsp
10000f86e:	5b	popq	%rbx
10000f86f:	41 5e	popq	%r14
10000f871:	41 5f	popq	%r15
10000f873:	5d	popq	%rbp
10000f874:	e9 c0 fb ff ff	jmp	0x10000f439
10000f879:	55	pushq	%rbp
10000f87a:	48 89 e5	movq	%rsp, %rbp
10000f87d:	41 57	pushq	%r15
10000f87f:	41 56	pushq	%r14
10000f881:	53	pushq	%rbx
10000f882:	48 81 ec 28 01 00 00	subq	$296, %rsp
10000f889:	49 89 f6	movq	%rsi, %r14
10000f88c:	48 89 fe	movq	%rdi, %rsi
10000f88f:	48 8b 05 92 87 04 00	movq	296850(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f896:	48 8b 00	movq	(%rax), %rax
10000f899:	48 89 45 e0	movq	%rax, -32(%rbp)
10000f89d:	48 8b 05 6c 3a 03 00	movq	211564(%rip), %rax
10000f8a4:	4c 8d bd c0 fe ff ff	leaq	-320(%rbp), %r15
10000f8ab:	49 89 47 10	movq	%rax, 16(%r15)
10000f8af:	0f 10 05 4a 3a 03 00	movups	211530(%rip), %xmm0
10000f8b6:	41 0f 29 07	movaps	%xmm0, (%r15)
10000f8ba:	0f 57 c0	xorps	%xmm0, %xmm0
10000f8bd:	48 8d 9d e0 fe ff ff	leaq	-288(%rbp), %rbx
10000f8c4:	0f 11 83 ef 00 00 00	movups	%xmm0, 239(%rbx)
10000f8cb:	0f 29 83 e0 00 00 00	movaps	%xmm0, 224(%rbx)
10000f8d2:	0f 29 83 d0 00 00 00	movaps	%xmm0, 208(%rbx)
10000f8d9:	0f 29 83 c0 00 00 00	movaps	%xmm0, 192(%rbx)
10000f8e0:	0f 29 83 b0 00 00 00	movaps	%xmm0, 176(%rbx)
10000f8e7:	0f 29 83 a0 00 00 00	movaps	%xmm0, 160(%rbx)
10000f8ee:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
10000f8f5:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
10000f8fc:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
10000f900:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
10000f904:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
10000f908:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
10000f90c:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10000f910:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10000f914:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10000f918:	0f 29 03	movaps	%xmm0, (%rbx)
10000f91b:	c6 83 ff 00 00 00 07	movb	$7, 255(%rbx)
10000f922:	ba ff 00 00 00	movl	$255, %edx
10000f927:	b9 ff 00 00 00	movl	$255, %ecx
10000f92c:	48 89 df	movq	%rbx, %rdi
10000f92f:	e8 44 1e 03 00	callq	0x100041778 ## symbol stub for: ___strlcpy_chk
10000f934:	41 c7 07 33 04 00 00	movl	$1075, (%r15)
10000f93b:	49 89 5f 08	movq	%rbx, 8(%r15)
10000f93f:	4c 89 ff	movq	%r15, %rdi
10000f942:	4c 89 f6	movq	%r14, %rsi
10000f945:	e8 dd a2 ff ff	callq	0x100009c27
10000f94a:	48 8b 0d d7 86 04 00	movq	296663(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f951:	48 8b 09	movq	(%rcx), %rcx
10000f954:	48 3b 4d e0	cmpq	-32(%rbp), %rcx
10000f958:	75 0e	jne	0x10000f968
10000f95a:	48 81 c4 28 01 00 00	addq	$296, %rsp
10000f961:	5b	popq	%rbx
10000f962:	41 5e	popq	%r14
10000f964:	41 5f	popq	%r15
10000f966:	5d	popq	%rbp
10000f967:	c3	retq
10000f968:	e8 05 1e 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10000f96d:	55	pushq	%rbp
10000f96e:	48 89 e5	movq	%rsp, %rbp
10000f971:	48 89 fe	movq	%rdi, %rsi
10000f974:	48 8d 3d 9b 7c 03 00	leaq	228507(%rip), %rdi ## literal pool for: "%s"
10000f97b:	31 c0	xorl	%eax, %eax
10000f97d:	e8 90 4a 02 00	callq	0x100034412
10000f982:	55	pushq	%rbp
10000f983:	48 89 e5	movq	%rsp, %rbp
10000f986:	41 56	pushq	%r14
10000f988:	53	pushq	%rbx
10000f989:	48 81 ec d0 00 00 00	subq	$208, %rsp
10000f990:	48 8d 3d 15 91 03 00	leaq	233749(%rip), %rdi ## literal pool for: "LAUNCH_DID_REEXEC"
10000f997:	e8 e8 20 03 00	callq	0x100041a84 ## symbol stub for: _getenv
10000f99c:	48 85 c0	testq	%rax, %rax
10000f99f:	75 22	jne	0x10000f9c3
10000f9a1:	48 8d 3d 16 91 03 00	leaq	233750(%rip), %rdi ## literal pool for: "XPC_USERSPACE_REBOOTED"
10000f9a8:	e8 d7 20 03 00	callq	0x100041a84 ## symbol stub for: _getenv
10000f9ad:	48 85 c0	testq	%rax, %rax
10000f9b0:	75 11	jne	0x10000f9c3
10000f9b2:	48 8d 3d 1c 91 03 00	leaq	233756(%rip), %rdi ## literal pool for: "kern.initproc_spawned"
10000f9b9:	be 01 00 00 00	movl	$1, %esi
10000f9be:	e8 26 51 02 00	callq	0x100034ae9
10000f9c3:	48 8d 05 a3 ff ff ff	leaq	-93(%rip), %rax
10000f9ca:	48 8b 0d e7 86 04 00	movq	296679(%rip), %rcx ## literal pool symbol address: __os_crash_callback
10000f9d1:	48 89 01	movq	%rax, (%rcx)
10000f9d4:	bf 01 00 00 00	movl	$1, %edi
10000f9d9:	e8 1e 21 03 00	callq	0x100041afc ## symbol stub for: _isatty
10000f9de:	4c 8d 35 eb 2d 05 00	leaq	339435(%rip), %r14
10000f9e5:	85 c0	testl	%eax, %eax
10000f9e7:	74 39	je	0x10000fa22
10000f9e9:	41 80 3e 00	cmpb	$0, (%r14)
10000f9ed:	75 33	jne	0x10000fa22
10000f9ef:	89 c3	movl	%eax, %ebx
10000f9f1:	48 8b 05 38 86 04 00	movq	296504(%rip), %rax ## literal pool symbol address: ___stdoutp
10000f9f8:	4c 8b 30	movq	(%rax), %r14
10000f9fb:	e8 9c 20 03 00	callq	0x100041a9c ## symbol stub for: _getprogname
10000fa00:	48 8d 35 e4 90 03 00	leaq	233700(%rip), %rsi ## literal pool for: "%s cannot be run directly.\n"
10000fa07:	4c 89 f7	movq	%r14, %rdi
10000fa0a:	48 89 c2	movq	%rax, %rdx
10000fa0d:	31 c0	xorl	%eax, %eax
10000fa0f:	e8 16 20 03 00	callq	0x100041a2a ## symbol stub for: _fprintf
10000fa14:	e8 83 20 03 00	callq	0x100041a9c ## symbol stub for: _getprogname
10000fa19:	48 8d 3d e7 90 03 00	leaq	233703(%rip), %rdi ## literal pool for: "%s cannot be run directly (stdout: %d)"
10000fa20:	eb 41	jmp	0x10000fa63
10000fa22:	e8 6f 20 03 00	callq	0x100041a96 ## symbol stub for: _getpid
10000fa27:	83 f8 01	cmpl	$1, %eax
10000fa2a:	74 43	je	0x10000fa6f
10000fa2c:	41 80 3e 00	cmpb	$0, (%r14)
10000fa30:	75 3d	jne	0x10000fa6f
10000fa32:	89 c3	movl	%eax, %ebx
10000fa34:	48 8b 05 f5 85 04 00	movq	296437(%rip), %rax ## literal pool symbol address: ___stdoutp
10000fa3b:	4c 8b 30	movq	(%rax), %r14
10000fa3e:	e8 59 20 03 00	callq	0x100041a9c ## symbol stub for: _getprogname
10000fa43:	48 8d 35 a1 90 03 00	leaq	233633(%rip), %rsi ## literal pool for: "%s cannot be run directly.\n"
10000fa4a:	4c 89 f7	movq	%r14, %rdi
10000fa4d:	48 89 c2	movq	%rax, %rdx
10000fa50:	31 c0	xorl	%eax, %eax
10000fa52:	e8 d3 1f 03 00	callq	0x100041a2a ## symbol stub for: _fprintf
10000fa57:	e8 40 20 03 00	callq	0x100041a9c ## symbol stub for: _getprogname
10000fa5c:	48 8d 3d cb 90 03 00	leaq	233675(%rip), %rdi ## literal pool for: "%s cannot be run directly (pid = %d)"
10000fa63:	48 89 c6	movq	%rax, %rsi
10000fa66:	89 da	movl	%ebx, %edx
10000fa68:	31 c0	xorl	%eax, %eax
10000fa6a:	e8 a3 49 02 00	callq	0x100034412
10000fa6f:	e8 ca 20 03 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10000fa74:	89 c7	movl	%eax, %edi
10000fa76:	e8 31 22 03 00	callq	0x100041cac ## symbol stub for: _panic_init
10000fa7b:	e8 ea e9 ff ff	callq	0x10000e46a
10000fa80:	41 80 3e 00	cmpb	$0, (%r14)
10000fa84:	75 27	jne	0x10000faad
10000fa86:	31 ff	xorl	%edi, %edi
10000fa88:	31 f6	xorl	%esi, %esi
10000fa8a:	e8 d5 04 00 00	callq	0x10000ff64
10000fa8f:	bf 01 00 00 00	movl	$1, %edi
10000fa94:	be 01 00 00 00	movl	$1, %esi
10000fa99:	e8 c6 04 00 00	callq	0x10000ff64
10000fa9e:	bf 02 00 00 00	movl	$2, %edi
10000faa3:	be 02 00 00 00	movl	$2, %esi
10000faa8:	e8 b7 04 00 00	callq	0x10000ff64
10000faad:	bf 40 00 00 22	movl	$570425408, %edi
10000fab2:	e8 05 d4 ff ff	callq	0x10000cebc
10000fab7:	e8 fc ce ff ff	callq	0x10000c9b8
10000fabc:	e8 ec c4 02 00	callq	0x10003bfad
10000fac1:	e8 46 49 02 00	callq	0x10003440c
10000fac6:	48 8d 35 90 90 03 00	leaq	233616(%rip), %rsi ## literal pool for: "hello"
10000facd:	bf 05 00 00 00	movl	$5, %edi
10000fad2:	31 c0	xorl	%eax, %eax
10000fad4:	e8 ef 5a 02 00	callq	0x1000355c8
10000fad9:	48 8d 05 b8 2b 05 00	leaq	338872(%rip), %rax
10000fae0:	48 8b 10	movq	(%rax), %rdx
10000fae3:	48 8d 35 2c 7b 03 00	leaq	228140(%rip), %rsi ## literal pool for: "%s"
10000faea:	bf 05 00 01 00	movl	$65541, %edi
10000faef:	31 c0	xorl	%eax, %eax
10000faf1:	e8 d2 5a 02 00	callq	0x1000355c8
10000faf6:	48 8d 75 e8	leaq	-24(%rbp), %rsi
10000fafa:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10000fb01:	48 8d 3d 5b 90 03 00	leaq	233563(%rip), %rdi ## literal pool for: "kern.bootargs"
10000fb08:	e8 b8 4d 02 00	callq	0x1000348c5
10000fb0d:	48 85 c0	testq	%rax, %rax
10000fb10:	74 17	je	0x10000fb29
10000fb12:	48 8b 55 e8	movq	-24(%rbp), %rdx
10000fb16:	48 8d 35 54 90 03 00	leaq	233556(%rip), %rsi ## literal pool for: "boot-args = %s"
10000fb1d:	bf 05 00 01 00	movl	$65541, %edi
10000fb22:	31 c0	xorl	%eax, %eax
10000fb24:	e8 9f 5a 02 00	callq	0x1000355c8
10000fb29:	48 8b 7d e8	movq	-24(%rbp), %rdi
10000fb2d:	e8 fe 1e 03 00	callq	0x100041a30 ## symbol stub for: _free
10000fb32:	e8 5f 1f 03 00	callq	0x100041a96 ## symbol stub for: _getpid
10000fb37:	89 c7	movl	%eax, %edi
10000fb39:	e8 fe 21 03 00	callq	0x100041d3c ## symbol stub for: _proc_disable_wakemon
10000fb3e:	83 f8 ff	cmpl	$-1, %eax
10000fb41:	0f 84 b2 03 00 00	je	0x10000fef9
10000fb47:	41 80 3e 00	cmpb	$0, (%r14)
10000fb4b:	74 1d	je	0x10000fb6a
10000fb4d:	48 8d 05 b6 2c 05 00	leaq	339126(%rip), %rax
10000fb54:	c6 00 01	movb	$1, (%rax)
10000fb57:	48 8d 35 22 90 03 00	leaq	233506(%rip), %rsi ## literal pool for: "Lean Testing Environment starting."
10000fb5e:	bf 05 00 01 00	movl	$65541, %edi
10000fb63:	31 c0	xorl	%eax, %eax
10000fb65:	e8 5e 5a 02 00	callq	0x1000355c8
10000fb6a:	48 8d 05 61 2c 05 00	leaq	339041(%rip), %rax
10000fb71:	80 38 00	cmpb	$0, (%rax)
10000fb74:	48 8d 1d 59 2c 05 00	leaq	339033(%rip), %rbx
10000fb7b:	8a 03	movb	(%rbx), %al
10000fb7d:	74 23	je	0x10000fba2
10000fb7f:	84 c0	testb	%al, %al
10000fb81:	75 1f	jne	0x10000fba2
10000fb83:	48 8d 05 80 2c 05 00	leaq	339072(%rip), %rax
10000fb8a:	c6 00 01	movb	$1, (%rax)
10000fb8d:	48 8d 35 0f 90 03 00	leaq	233487(%rip), %rsi ## literal pool for: "Restore environment starting."
10000fb94:	bf 05 00 01 00	movl	$65541, %edi
10000fb99:	31 c0	xorl	%eax, %eax
10000fb9b:	e8 28 5a 02 00	callq	0x1000355c8
10000fba0:	8a 03	movb	(%rbx), %al
10000fba2:	84 c0	testb	%al, %al
10000fba4:	74 1d	je	0x10000fbc3
10000fba6:	48 8d 05 5d 2c 05 00	leaq	339037(%rip), %rax
10000fbad:	c6 00 01	movb	$1, (%rax)
10000fbb0:	48 8d 35 0a 90 03 00	leaq	233482(%rip), %rsi ## literal pool for: "BaseSystem environment starting."
10000fbb7:	bf 05 00 01 00	movl	$65541, %edi
10000fbbc:	31 c0	xorl	%eax, %eax
10000fbbe:	e8 05 5a 02 00	callq	0x1000355c8
10000fbc3:	48 8d 05 21 2c 05 00	leaq	338977(%rip), %rax
10000fbca:	80 38 00	cmpb	$0, (%rax)
10000fbcd:	74 13	je	0x10000fbe2
10000fbcf:	48 8d 35 0c 90 03 00	leaq	233484(%rip), %rsi ## literal pool for: "Safe boot."
10000fbd6:	bf 05 00 01 00	movl	$65541, %edi
10000fbdb:	31 c0	xorl	%eax, %eax
10000fbdd:	e8 e6 59 02 00	callq	0x1000355c8
10000fbe2:	48 8d 05 a7 2a 05 00	leaq	338599(%rip), %rax
10000fbe9:	80 38 00	cmpb	$0, (%rax)
10000fbec:	74 13	je	0x10000fc01
10000fbee:	48 8d 35 f8 8f 03 00	leaq	233464(%rip), %rsi ## literal pool for: "System Integrity Protection is engaged."
10000fbf5:	bf 05 00 01 00	movl	$65541, %edi
10000fbfa:	31 c0	xorl	%eax, %eax
10000fbfc:	e8 c7 59 02 00	callq	0x1000355c8
10000fc01:	e8 d8 21 03 00	callq	0x100041dde ## symbol stub for: _setsid
10000fc06:	83 f8 ff	cmpl	$-1, %eax
10000fc09:	75 2d	jne	0x10000fc38
10000fc0b:	41 80 3e 00	cmpb	$0, (%r14)
10000fc0f:	75 27	jne	0x10000fc38
10000fc11:	48 8d 05 d0 2b 05 00	leaq	338896(%rip), %rax
10000fc18:	80 38 00	cmpb	$0, (%rax)
10000fc1b:	74 0a	je	0x10000fc27
10000fc1d:	e8 3e 1b 03 00	callq	0x100041760 ## symbol stub for: ___error
10000fc22:	83 38 01	cmpl	$1, (%rax)
10000fc25:	74 11	je	0x10000fc38
10000fc27:	e8 34 1b 03 00	callq	0x100041760 ## symbol stub for: ___error
10000fc2c:	48 63 38	movslq	(%rax), %rdi
10000fc2f:	48 85 ff	testq	%rdi, %rdi
10000fc32:	0f 85 06 03 00 00	jne	0x10000ff3e
10000fc38:	48 8d 3d 50 79 03 00	leaq	227664(%rip), %rdi ## literal pool for: "/"
10000fc3f:	e8 dc 1b 03 00	callq	0x100041820 ## symbol stub for: _chdir
10000fc44:	83 f8 ff	cmpl	$-1, %eax
10000fc47:	0f 84 c3 02 00 00	je	0x10000ff10
10000fc4d:	48 8d 3d 5d 48 03 00	leaq	215133(%rip), %rdi ## literal pool for: "root"
10000fc54:	e8 79 21 03 00	callq	0x100041dd2 ## symbol stub for: _setlogin
10000fc59:	83 f8 ff	cmpl	$-1, %eax
10000fc5c:	0f 84 c5 02 00 00	je	0x10000ff27
10000fc62:	31 db	xorl	%ebx, %ebx
10000fc64:	4c 8d 35 b5 36 03 00	leaq	210613(%rip), %r14
10000fc6b:	42 8b 3c 33	movl	(%rbx,%r14), %edi
10000fc6f:	8d 4f ff	leal	-1(%rdi), %ecx
10000fc72:	b8 01 00 00 00	movl	$1, %eax
10000fc77:	d3 e0	shll	%cl, %eax
10000fc79:	09 05 b1 31 05 00	orl	%eax, 340401(%rip)
10000fc7f:	be 01 00 00 00	movl	$1, %esi
10000fc84:	e8 6d 21 03 00	callq	0x100041df6 ## symbol stub for: _signal
10000fc89:	48 83 f8 ff	cmpq	$-1, %rax
10000fc8d:	74 0c	je	0x10000fc9b
10000fc8f:	48 83 c3 04	addq	$4, %rbx
10000fc93:	48 83 fb 54	cmpq	$84, %rbx
10000fc97:	75 d2	jne	0x10000fc6b
10000fc99:	eb 0f	jmp	0x10000fcaa
10000fc9b:	e8 c0 1a 03 00	callq	0x100041760 ## symbol stub for: ___error
10000fca0:	48 63 38	movslq	(%rax), %rdi
10000fca3:	e8 fa 1a 03 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10000fca8:	eb e5	jmp	0x10000fc8f
10000fcaa:	4c 8b 35 f7 84 04 00	movq	296183(%rip), %r14 ## literal pool symbol address: _mach_task_self_
10000fcb1:	41 8b 3e	movl	(%r14), %edi
10000fcb4:	be 04 00 00 00	movl	$4, %esi
10000fcb9:	31 d2	xorl	%edx, %edx
10000fcbb:	e8 0e 22 03 00	callq	0x100041ece ## symbol stub for: _task_set_special_port
10000fcc0:	85 c0	testl	%eax, %eax
10000fcc2:	0f 85 f2 01 00 00	jne	0x10000feba
10000fcc8:	48 8b 05 69 84 04 00	movq	296041(%rip), %rax ## literal pool symbol address: _bootstrap_port
10000fccf:	c7 00 00 00 00 00	movl	$0, (%rax)
10000fcd5:	48 8d 05 c4 24 05 00	leaq	337092(%rip), %rax
10000fcdc:	48 8b 78 78	movq	120(%rax), %rdi
10000fce0:	be 07 05 07 00	movl	$460039, %esi
10000fce5:	e8 8f fb ff ff	callq	0x10000f879
10000fcea:	89 c3	movl	%eax, %ebx
10000fcec:	48 8d b5 20 ff ff ff	leaq	-224(%rbp), %rsi
10000fcf3:	89 06	movl	%eax, (%rsi)
10000fcf5:	41 8b 3e	movl	(%r14), %edi
10000fcf8:	ba 01 00 00 00	movl	$1, %edx
10000fcfd:	e8 a2 1e 03 00	callq	0x100041ba4 ## symbol stub for: _mach_ports_register
10000fd02:	85 c0	testl	%eax, %eax
10000fd04:	0f 85 cf 01 00 00	jne	0x10000fed9
10000fd0a:	48 8d 05 5f 2a 05 00	leaq	338527(%rip), %rax
10000fd11:	89 18	movl	%ebx, (%rax)
10000fd13:	89 df	movl	%ebx, %edi
10000fd15:	be 11 00 00 00	movl	$17, %esi
10000fd1a:	e8 c5 23 03 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
10000fd1f:	48 8d 0d 52 2a 05 00	leaq	338514(%rip), %rcx
10000fd26:	48 89 01	movq	%rax, (%rcx)
10000fd29:	e8 0a 1e 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
10000fd2e:	48 89 05 fb 29 05 00	movq	%rax, 338427(%rip)
10000fd35:	48 8d 3d e4 2a 05 00	leaq	338660(%rip), %rdi
10000fd3c:	e8 b7 21 03 00	callq	0x100041ef8 ## symbol stub for: _uuid_generate
10000fd41:	0f 57 c0	xorps	%xmm0, %xmm0
10000fd44:	48 8d bd 20 ff ff ff	leaq	-224(%rbp), %rdi
10000fd4b:	0f 29 07	movaps	%xmm0, (%rdi)
10000fd4e:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
10000fd52:	48 c7 47 20 00 00 00 00	movq	$0, 32(%rdi)
10000fd5a:	bb ff ff ff ff	movl	$4294967295, %ebx
10000fd5f:	89 1f	movl	%ebx, (%rdi)
10000fd61:	c7 47 10 04 00 00 00	movl	$4, 16(%rdi)
10000fd68:	89 5f 24	movl	%ebx, 36(%rdi)
10000fd6b:	48 c7 47 28 01 00 00 00	movq	$1, 40(%rdi)
10000fd73:	be 30 00 00 00	movl	$48, %esi
10000fd78:	e8 43 20 03 00	callq	0x100041dc0 ## symbol stub for: _setaudit_addr
10000fd7d:	39 d8	cmpl	%ebx, %eax
10000fd7f:	0f 84 c8 01 00 00	je	0x10000ff4d
10000fd85:	e8 78 1a 03 00	callq	0x100041802 ## symbol stub for: _audit_session_self
10000fd8a:	89 05 a8 29 05 00	movl	%eax, 338344(%rip)
10000fd90:	ff c0	incl	%eax
10000fd92:	83 f8 01	cmpl	$1, %eax
10000fd95:	0f 86 47 01 00 00	jbe	0x10000fee2
10000fd9b:	e8 20 1d 03 00	callq	0x100041ac0 ## symbol stub for: _getuid
10000fda0:	89 05 8a 2a 05 00	movl	%eax, 338570(%rip)
10000fda6:	e8 df 1c 03 00	callq	0x100041a8a ## symbol stub for: _geteuid
10000fdab:	89 05 83 2a 05 00	movl	%eax, 338563(%rip)
10000fdb1:	e8 c8 1c 03 00	callq	0x100041a7e ## symbol stub for: _getegid
10000fdb6:	89 05 7c 2a 05 00	movl	%eax, 338556(%rip)
10000fdbc:	e8 c9 1c 03 00	callq	0x100041a8a ## symbol stub for: _geteuid
10000fdc1:	89 05 75 2a 05 00	movl	%eax, 338549(%rip)
10000fdc7:	e8 b2 1c 03 00	callq	0x100041a7e ## symbol stub for: _getegid
10000fdcc:	89 05 6e 2a 05 00	movl	%eax, 338542(%rip)
10000fdd2:	e8 bf 1c 03 00	callq	0x100041a96 ## symbol stub for: _getpid
10000fdd7:	89 05 67 2a 05 00	movl	%eax, 338535(%rip)
10000fddd:	e8 b2 4d 02 00	callq	0x100034b94
10000fde2:	89 05 60 2a 05 00	movl	%eax, 338528(%rip)
10000fde8:	c7 05 5a 2a 05 00 00 00 00 00	movl	$0, 338522(%rip)
10000fdf2:	0f 28 05 87 34 03 00	movaps	210055(%rip), %xmm0
10000fdf9:	48 8d 9d 20 ff ff ff	leaq	-224(%rbp), %rbx
10000fe00:	0f 29 83 b0 00 00 00	movaps	%xmm0, 176(%rbx)
10000fe07:	0f 29 83 a0 00 00 00	movaps	%xmm0, 160(%rbx)
10000fe0e:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
10000fe15:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
10000fe1c:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
10000fe20:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
10000fe24:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
10000fe28:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
10000fe2c:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10000fe30:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10000fe34:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10000fe38:	0f 29 03	movaps	%xmm0, (%rbx)
10000fe3b:	e8 56 1c 03 00	callq	0x100041a96 ## symbol stub for: _getpid
10000fe40:	89 c7	movl	%eax, %edi
10000fe42:	48 89 de	movq	%rbx, %rsi
10000fe45:	e8 e2 49 02 00	callq	0x10003482c
10000fe4a:	85 c0	testl	%eax, %eax
10000fe4c:	74 09	je	0x10000fe57
10000fe4e:	83 f8 2d	cmpl	$45, %eax
10000fe51:	0f 85 94 00 00 00	jne	0x10000feeb
10000fe57:	48 8b 45 b8	movq	-72(%rbp), %rax
10000fe5b:	48 89 05 de 28 05 00	movq	%rax, 338142(%rip)
10000fe62:	e8 9b 9a 02 00	callq	0x100039902
10000fe67:	e8 83 be ff ff	callq	0x10000bcef
10000fe6c:	e8 c4 0e 02 00	callq	0x100030d35
10000fe71:	e8 84 85 00 00	callq	0x1000183fa
10000fe76:	e8 62 5f 01 00	callq	0x100025ddd
10000fe7b:	e8 0f 24 02 00	callq	0x10003228f
10000fe80:	e8 17 2c 02 00	callq	0x100032a9c
10000fe85:	e8 eb 0b 02 00	callq	0x100030a75
10000fe8a:	e8 5b c1 ff ff	callq	0x10000bfea
10000fe8f:	e8 16 d7 ff ff	callq	0x10000d5aa
10000fe94:	e8 ac 16 ff ff	callq	0x100001545
10000fe99:	e8 67 57 00 00	callq	0x100015605
10000fe9e:	e8 9f ac ff ff	callq	0x10000ab42
10000fea3:	e8 5d 7b 02 00	callq	0x100037a05
10000fea8:	e8 4d e6 ff ff	callq	0x10000e4fa
10000fead:	48 89 c7	movq	%rax, %rdi
10000feb0:	e8 0d 1a 03 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10000feb5:	e8 7a 1a 03 00	callq	0x100041934 ## symbol stub for: _dispatch_main
10000feba:	48 8d 35 76 8d 03 00	leaq	232822(%rip), %rsi ## literal pool for: "Could not neuter bootstrap port: 0x%x"
10000fec1:	bf 03 00 00 00	movl	$3, %edi
10000fec6:	89 c2	movl	%eax, %edx
10000fec8:	31 c0	xorl	%eax, %eax
10000feca:	e8 f9 56 02 00	callq	0x1000355c8
10000fecf:	bf 01 00 00 00	movl	$1, %edi
10000fed4:	e8 1b 1b 03 00	callq	0x1000419f4 ## symbol stub for: _exit
10000fed9:	48 8d 3d 7d 8d 03 00	leaq	232829(%rip), %rdi ## literal pool for: "could not set up inheritance port"
10000fee0:	eb 10	jmp	0x10000fef2
10000fee2:	48 8d 3d 96 8d 03 00	leaq	232854(%rip), %rdi ## literal pool for: "could not obtain root audit session port"
10000fee9:	eb 07	jmp	0x10000fef2
10000feeb:	48 8d 3d 23 8d 03 00	leaq	232739(%rip), %rdi ## literal pool for: "could not get unique pid"
10000fef2:	31 c0	xorl	%eax, %eax
10000fef4:	e8 19 45 02 00	callq	0x100034412
10000fef9:	e8 62 18 03 00	callq	0x100041760 ## symbol stub for: ___error
10000fefe:	48 63 38	movslq	(%rax), %rdi
10000ff01:	e8 96 18 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000ff06:	48 89 c7	movq	%rax, %rdi
10000ff09:	e8 a6 18 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000ff0e:	0f 0b	ud2
10000ff10:	e8 4b 18 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ff15:	48 63 38	movslq	(%rax), %rdi
10000ff18:	e8 7f 18 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000ff1d:	48 89 c7	movq	%rax, %rdi
10000ff20:	e8 8f 18 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000ff25:	0f 0b	ud2
10000ff27:	e8 34 18 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ff2c:	48 63 38	movslq	(%rax), %rdi
10000ff2f:	e8 68 18 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000ff34:	48 89 c7	movq	%rax, %rdi
10000ff37:	e8 78 18 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000ff3c:	0f 0b	ud2
10000ff3e:	e8 59 18 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000ff43:	48 89 c7	movq	%rax, %rdi
10000ff46:	e8 69 18 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000ff4b:	0f 0b	ud2
10000ff4d:	e8 0e 18 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ff52:	48 63 38	movslq	(%rax), %rdi
10000ff55:	e8 42 18 03 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10000ff5a:	48 89 c7	movq	%rax, %rdi
10000ff5d:	e8 52 18 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10000ff62:	0f 0b	ud2
10000ff64:	55	pushq	%rbp
10000ff65:	48 89 e5	movq	%rsp, %rbp
10000ff68:	53	pushq	%rbx
10000ff69:	50	pushq	%rax
10000ff6a:	89 f3	movl	%esi, %ebx
10000ff6c:	89 fe	movl	%edi, %esi
10000ff6e:	81 ce 00 00 02 00	orl	$131072, %esi
10000ff74:	48 8d 3d d8 8b 03 00	leaq	232408(%rip), %rdi ## literal pool for: "/dev/null"
10000ff7b:	ba b6 01 00 00	movl	$438, %edx
10000ff80:	31 c0	xorl	%eax, %eax
10000ff82:	e8 8f 1c 03 00	callq	0x100041c16 ## symbol stub for: _open
10000ff87:	83 f8 ff	cmpl	$-1, %eax
10000ff8a:	74 28	je	0x10000ffb4
10000ff8c:	89 c7	movl	%eax, %edi
10000ff8e:	89 de	movl	%ebx, %esi
10000ff90:	e8 53 1a 03 00	callq	0x1000419e8 ## symbol stub for: _dup2
10000ff95:	89 c3	movl	%eax, %ebx
10000ff97:	83 f8 ff	cmpl	$-1, %eax
10000ff9a:	75 0b	jne	0x10000ffa7
10000ff9c:	e8 bf 17 03 00	callq	0x100041760 ## symbol stub for: ___error
10000ffa1:	8b 38	movl	(%rax), %edi
10000ffa3:	85 ff	testl	%edi, %edi
10000ffa5:	75 14	jne	0x10000ffbb
10000ffa7:	89 df	movl	%ebx, %edi
10000ffa9:	48 83 c4 08	addq	$8, %rsp
10000ffad:	5b	popq	%rbx
10000ffae:	5d	popq	%rbp
10000ffaf:	e9 00 28 02 00	jmp	0x1000327b4
10000ffb4:	48 83 c4 08	addq	$8, %rsp
10000ffb8:	5b	popq	%rbx
10000ffb9:	5d	popq	%rbp
10000ffba:	c3	retq
10000ffbb:	e8 5f f8 02 00	callq	0x10003f81f
10000ffc0:	48 85 ff	testq	%rdi, %rdi
10000ffc3:	74 06	je	0x10000ffcb
10000ffc5:	48 89 f8	movq	%rdi, %rax
10000ffc8:	31 d2	xorl	%edx, %edx
10000ffca:	c3	retq
10000ffcb:	55	pushq	%rbp
10000ffcc:	48 89 e5	movq	%rsp, %rbp
10000ffcf:	e8 63 f8 02 00	callq	0x10003f837
10000ffd4:	85 ff	testl	%edi, %edi
10000ffd6:	74 05	je	0x10000ffdd
10000ffd8:	31 c0	xorl	%eax, %eax
10000ffda:	89 fa	movl	%edi, %edx
10000ffdc:	c3	retq
10000ffdd:	55	pushq	%rbp
10000ffde:	48 89 e5	movq	%rsp, %rbp
10000ffe1:	e8 63 f8 02 00	callq	0x10003f849
10000ffe6:	55	pushq	%rbp
10000ffe7:	48 89 e5	movq	%rsp, %rbp
10000ffea:	53	pushq	%rbx
10000ffeb:	50	pushq	%rax
10000ffec:	48 89 fb	movq	%rdi, %rbx
10000ffef:	48 8d 35 b2 8c 03 00	leaq	232626(%rip), %rsi ## literal pool for: "Frameworks"
10000fff6:	e8 22 00 00 00	callq	0x10001001d
10000fffb:	84 c0	testb	%al, %al
10000fffd:	74 09	je	0x100010008
10000ffff:	b0 01	movb	$1, %al
100010001:	48 83 c4 08	addq	$8, %rsp
100010005:	5b	popq	%rbx
100010006:	5d	popq	%rbp
100010007:	c3	retq
100010008:	48 8d 35 a4 8c 03 00	leaq	232612(%rip), %rsi ## literal pool for: "PrivateFrameworks"
10001000f:	48 89 df	movq	%rbx, %rdi
100010012:	48 83 c4 08	addq	$8, %rsp
100010016:	5b	popq	%rbx
100010017:	5d	popq	%rbp
100010018:	e9 00 00 00 00	jmp	0x10001001d
10001001d:	55	pushq	%rbp
10001001e:	48 89 e5	movq	%rsp, %rbp
100010021:	41 57	pushq	%r15
100010023:	41 56	pushq	%r14
100010025:	41 55	pushq	%r13
100010027:	41 54	pushq	%r12
100010029:	53	pushq	%rbx
10001002a:	48 81 ec 08 04 00 00	subq	$1032, %rsp
100010031:	49 89 f6	movq	%rsi, %r14
100010034:	49 89 fc	movq	%rdi, %r12
100010037:	48 8b 05 ea 7f 04 00	movq	294890(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001003e:	48 8b 00	movq	(%rax), %rax
100010041:	48 89 45 d0	movq	%rax, -48(%rbp)
100010045:	48 8d 9d d0 fb ff ff	leaq	-1072(%rbp), %rbx
10001004c:	ba 00 04 00 00	movl	$1024, %edx
100010051:	48 89 df	movq	%rbx, %rdi
100010054:	be aa 00 00 00	movl	$170, %esi
100010059:	e8 7c 1b 03 00	callq	0x100041bda ## symbol stub for: _memset
10001005e:	48 8d 15 27 8f 03 00	leaq	233255(%rip), %rdx ## literal pool for: "%s/System/Library/%s"
100010065:	48 8d 0d 1f 8f 03 00	leaq	233247(%rip), %rcx ## literal pool for: ""
10001006c:	be 00 04 00 00	movl	$1024, %esi
100010071:	48 89 df	movq	%rbx, %rdi
100010074:	4d 89 f0	movq	%r14, %r8
100010077:	31 c0	xorl	%eax, %eax
100010079:	e8 84 1d 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001007e:	4c 89 e7	movq	%r12, %rdi
100010081:	48 89 de	movq	%rbx, %rsi
100010084:	e8 25 f2 ff ff	callq	0x10000f2ae
100010089:	b1 01	movb	$1, %cl
10001008b:	84 c0	testb	%al, %al
10001008d:	75 27	jne	0x1000100b6
10001008f:	48 8d 3d 0b 8f 03 00	leaq	233227(%rip), %rdi ## literal pool for: "SystemRoots"
100010096:	e8 3a c8 02 00	callq	0x10003c8d5
10001009b:	48 85 c0	testq	%rax, %rax
10001009e:	74 14	je	0x1000100b4
1000100a0:	48 89 c3	movq	%rax, %rbx
1000100a3:	48 89 c7	movq	%rax, %rdi
1000100a6:	e8 1b 20 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000100ab:	48 3b 05 26 80 04 00	cmpq	294950(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000100b2:	74 2a	je	0x1000100de
1000100b4:	31 c9	xorl	%ecx, %ecx
1000100b6:	48 8b 05 6b 7f 04 00	movq	294763(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000100bd:	48 8b 00	movq	(%rax), %rax
1000100c0:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000100c4:	0f 85 89 00 00 00	jne	0x100010153
1000100ca:	89 c8	movl	%ecx, %eax
1000100cc:	48 81 c4 08 04 00 00	addq	$1032, %rsp
1000100d3:	5b	popq	%rbx
1000100d4:	41 5c	popq	%r12
1000100d6:	41 5d	popq	%r13
1000100d8:	41 5e	popq	%r14
1000100da:	41 5f	popq	%r15
1000100dc:	5d	popq	%rbp
1000100dd:	c3	retq
1000100de:	48 89 df	movq	%rbx, %rdi
1000100e1:	e8 66 1e 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000100e6:	48 85 c0	testq	%rax, %rax
1000100e9:	74 c9	je	0x1000100b4
1000100eb:	45 31 ed	xorl	%r13d, %r13d
1000100ee:	48 89 df	movq	%rbx, %rdi
1000100f1:	4c 89 ee	movq	%r13, %rsi
1000100f4:	e8 59 1e 03 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
1000100f9:	48 85 c0	testq	%rax, %rax
1000100fc:	74 39	je	0x100010137
1000100fe:	be 00 04 00 00	movl	$1024, %esi
100010103:	4c 8d bd d0 fb ff ff	leaq	-1072(%rbp), %r15
10001010a:	4c 89 ff	movq	%r15, %rdi
10001010d:	48 8d 15 99 8e 03 00	leaq	233113(%rip), %rdx ## literal pool for: "%s%s/%s"
100010114:	48 8d 0d 70 8e 03 00	leaq	233072(%rip), %rcx ## literal pool for: ""
10001011b:	49 89 c0	movq	%rax, %r8
10001011e:	4d 89 f1	movq	%r14, %r9
100010121:	31 c0	xorl	%eax, %eax
100010123:	e8 da 1c 03 00	callq	0x100041e02 ## symbol stub for: _snprintf
100010128:	4c 89 e7	movq	%r12, %rdi
10001012b:	4c 89 fe	movq	%r15, %rsi
10001012e:	e8 7b f1 ff ff	callq	0x10000f2ae
100010133:	84 c0	testb	%al, %al
100010135:	75 15	jne	0x10001014c
100010137:	49 ff c5	incq	%r13
10001013a:	48 89 df	movq	%rbx, %rdi
10001013d:	e8 0a 1e 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100010142:	49 39 c5	cmpq	%rax, %r13
100010145:	72 a7	jb	0x1000100ee
100010147:	e9 68 ff ff ff	jmp	0x1000100b4
10001014c:	b1 01	movb	$1, %cl
10001014e:	e9 63 ff ff ff	jmp	0x1000100b6
100010153:	e8 1a 16 03 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100010158:	55	pushq	%rbp
100010159:	48 89 e5	movq	%rsp, %rbp
10001015c:	41 57	pushq	%r15
10001015e:	41 56	pushq	%r14
100010160:	41 55	pushq	%r13
100010162:	41 54	pushq	%r12
100010164:	53	pushq	%rbx
100010165:	50	pushq	%rax
100010166:	4d 89 c7	movq	%r8, %r15
100010169:	48 89 4d d0	movq	%rcx, -48(%rbp)
10001016d:	48 89 d3	movq	%rdx, %rbx
100010170:	49 89 f4	movq	%rsi, %r12
100010173:	41 89 fd	movl	%edi, %r13d
100010176:	31 ff	xorl	%edi, %edi
100010178:	e8 b5 2b 00 00	callq	0x100012d32
10001017d:	49 89 c6	movq	%rax, %r14
100010180:	44 88 68 5c	movb	%r13b, 92(%rax)
100010184:	4c 89 e7	movq	%r12, %rdi
100010187:	e8 56 ee ff ff	callq	0x10000efe2
10001018c:	49 89 46 08	movq	%rax, 8(%r14)
100010190:	0f 10 03	movups	(%rbx), %xmm0
100010193:	0f 10 4b 10	movups	16(%rbx), %xmm1
100010197:	41 0f 11 46 10	movups	%xmm0, 16(%r14)
10001019c:	41 0f 11 4e 20	movups	%xmm1, 32(%r14)
1000101a1:	48 8b 45 d0	movq	-48(%rbp), %rax
1000101a5:	49 89 46 30	movq	%rax, 48(%r14)
1000101a9:	4d 89 7e 38	movq	%r15, 56(%r14)
1000101ad:	4c 89 ff	movq	%r15, %rdi
1000101b0:	e8 a9 17 03 00	callq	0x10004195e ## symbol stub for: _dispatch_retain
1000101b5:	4c 89 f0	movq	%r14, %rax
1000101b8:	48 83 c4 08	addq	$8, %rsp
1000101bc:	5b	popq	%rbx
1000101bd:	41 5c	popq	%r12
1000101bf:	41 5d	popq	%r13
1000101c1:	41 5e	popq	%r14
1000101c3:	41 5f	popq	%r15
1000101c5:	5d	popq	%rbp
1000101c6:	c3	retq
1000101c7:	55	pushq	%rbp
1000101c8:	48 89 e5	movq	%rsp, %rbp
1000101cb:	53	pushq	%rbx
1000101cc:	50	pushq	%rax
1000101cd:	8a 47 5d	movb	93(%rdi), %al
1000101d0:	24 01	andb	$1, %al
1000101d2:	75 50	jne	0x100010224
1000101d4:	48 89 fb	movq	%rdi, %rbx
1000101d7:	48 8b 7f 08	movq	8(%rdi), %rdi
1000101db:	e8 50 18 03 00	callq	0x100041a30 ## symbol stub for: _free
1000101e0:	48 8b 7b 38	movq	56(%rbx), %rdi
1000101e4:	e8 6f 17 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000101e9:	48 8b 7b 40	movq	64(%rbx), %rdi
1000101ed:	48 85 ff	testq	%rdi, %rdi
1000101f0:	74 05	je	0x1000101f7
1000101f2:	e8 3f 15 03 00	callq	0x100041736 ## symbol stub for: __Block_release
1000101f7:	48 8b 7b 48	movq	72(%rbx), %rdi
1000101fb:	48 85 ff	testq	%rdi, %rdi
1000101fe:	74 05	je	0x100010205
100010200:	e8 31 15 03 00	callq	0x100041736 ## symbol stub for: __Block_release
100010205:	48 8b 7b 50	movq	80(%rbx), %rdi
100010209:	48 85 ff	testq	%rdi, %rdi
10001020c:	74 0f	je	0x10001021d
10001020e:	31 f6	xorl	%esi, %esi
100010210:	e8 3c 27 00 00	callq	0x100012951
100010215:	48 c7 43 50 00 00 00 00	movq	$0, 80(%rbx)
10001021d:	48 83 c4 08	addq	$8, %rsp
100010221:	5b	popq	%rbx
100010222:	5d	popq	%rbp
100010223:	c3	retq
100010224:	0f b6 f8	movzbl	%al, %edi
100010227:	e8 2f f6 02 00	callq	0x10003f85b
10001022c:	55	pushq	%rbp
10001022d:	48 89 e5	movq	%rsp, %rbp
100010230:	53	pushq	%rbx
100010231:	50	pushq	%rax
100010232:	8a 47 5d	movb	93(%rdi), %al
100010235:	24 01	andb	$1, %al
100010237:	75 16	jne	0x10001024f
100010239:	48 89 fb	movq	%rdi, %rbx
10001023c:	48 89 f7	movq	%rsi, %rdi
10001023f:	e8 e0 14 03 00	callq	0x100041724 ## symbol stub for: __Block_copy
100010244:	48 89 43 40	movq	%rax, 64(%rbx)
100010248:	48 83 c4 08	addq	$8, %rsp
10001024c:	5b	popq	%rbx
10001024d:	5d	popq	%rbp
10001024e:	c3	retq
10001024f:	0f b6 f8	movzbl	%al, %edi
100010252:	e8 1f f6 02 00	callq	0x10003f876
100010257:	55	pushq	%rbp
100010258:	48 89 e5	movq	%rsp, %rbp
10001025b:	53	pushq	%rbx
10001025c:	50	pushq	%rax
10001025d:	8a 47 5d	movb	93(%rdi), %al
100010260:	24 01	andb	$1, %al
100010262:	75 16	jne	0x10001027a
100010264:	48 89 fb	movq	%rdi, %rbx
100010267:	48 89 f7	movq	%rsi, %rdi
10001026a:	e8 b5 14 03 00	callq	0x100041724 ## symbol stub for: __Block_copy
10001026f:	48 89 43 48	movq	%rax, 72(%rbx)
100010273:	48 83 c4 08	addq	$8, %rsp
100010277:	5b	popq	%rbx
100010278:	5d	popq	%rbp
100010279:	c3	retq
10001027a:	0f b6 f8	movzbl	%al, %edi
10001027d:	e8 0f f6 02 00	callq	0x10003f891
100010282:	55	pushq	%rbp
100010283:	48 89 e5	movq	%rsp, %rbp
100010286:	41 57	pushq	%r15
100010288:	41 56	pushq	%r14
10001028a:	41 54	pushq	%r12
10001028c:	53	pushq	%rbx
10001028d:	48 83 ec 30	subq	$48, %rsp
100010291:	49 89 fc	movq	%rdi, %r12
100010294:	48 8b 7f 38	movq	56(%rdi), %rdi
100010298:	e8 31 16 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
10001029d:	41 8a 44 24 5d	movb	93(%r12), %al
1000102a2:	89 c1	movl	%eax, %ecx
1000102a4:	80 e1 01	andb	$1, %cl
1000102a7:	0f 85 36 03 00 00	jne	0x1000105e3
1000102ad:	0c 01	orb	$1, %al
1000102af:	41 88 44 24 5d	movb	%al, 93(%r12)
1000102b4:	4c 89 e7	movq	%r12, %rdi
1000102b7:	be 2f 00 00 00	movl	$47, %esi
1000102bc:	e8 0d 26 00 00	callq	0x1000128ce
1000102c1:	49 83 7c 24 40 00	cmpq	$0, 64(%r12)
1000102c7:	0f 84 1e 03 00 00	je	0x1000105eb
1000102cd:	49 83 7c 24 48 00	cmpq	$0, 72(%r12)
1000102d3:	0f 84 17 03 00 00	je	0x1000105f0
1000102d9:	49 8b 5c 24 08	movq	8(%r12), %rbx
1000102de:	80 3b 2f	cmpb	$47, (%rbx)
1000102e1:	75 26	jne	0x100010309
1000102e3:	48 8d 35 db 89 03 00	leaq	231899(%rip), %rsi ## literal pool for: "/usr/lib"
1000102ea:	48 89 df	movq	%rbx, %rdi
1000102ed:	e8 bc ef ff ff	callq	0x10000f2ae
1000102f2:	84 c0	testb	%al, %al
1000102f4:	75 13	jne	0x100010309
1000102f6:	48 8d 35 d1 89 03 00	leaq	231889(%rip), %rsi ## literal pool for: "/usr/local/lib"
1000102fd:	48 89 df	movq	%rbx, %rdi
100010300:	e8 a9 ef ff ff	callq	0x10000f2ae
100010305:	84 c0	testb	%al, %al
100010307:	74 1b	je	0x100010324
100010309:	4c 89 e7	movq	%r12, %rdi
10001030c:	31 f6	xorl	%esi, %esi
10001030e:	ba 6c 00 00 00	movl	$108, %edx
100010313:	48 83 c4 30	addq	$48, %rsp
100010317:	5b	popq	%rbx
100010318:	41 5c	popq	%r12
10001031a:	41 5e	popq	%r14
10001031c:	41 5f	popq	%r15
10001031e:	5d	popq	%rbp
10001031f:	e9 f4 02 00 00	jmp	0x100010618
100010324:	41 8a 44 24 5c	movb	92(%r12), %al
100010329:	8d 48 ff	leal	-1(%rax), %ecx
10001032c:	80 f9 06	cmpb	$6, %cl
10001032f:	0f 87 c0 02 00 00	ja	0x1000105f5
100010335:	0f b6 c9	movzbl	%cl, %ecx
100010338:	48 8d 15 bd 02 00 00	leaq	701(%rip), %rdx
10001033f:	48 63 0c 8a	movslq	(%rdx,%rcx,4), %rcx
100010343:	48 01 d1	addq	%rdx, %rcx
100010346:	ff e1	jmpq	*%rcx
100010348:	48 8b 3d e9 2a 05 00	movq	338665(%rip), %rdi
10001034f:	48 85 ff	testq	%rdi, %rdi
100010352:	0f 84 f5 01 00 00	je	0x10001054d
100010358:	49 8b 74 24 08	movq	8(%r12), %rsi
10001035d:	e8 d4 1c 03 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100010362:	84 c0	testb	%al, %al
100010364:	0f 84 de 01 00 00	je	0x100010548
10001036a:	4c 89 e7	movq	%r12, %rdi
10001036d:	e8 6f 0c 00 00	callq	0x100010fe1
100010372:	e9 4e 02 00 00	jmp	0x1000105c5
100010377:	31 c9	xorl	%ecx, %ecx
100010379:	3c 07	cmpb	$7, %al
10001037b:	0f 94 c1	sete	%cl
10001037e:	49 8b 74 24 08	movq	8(%r12), %rsi
100010383:	bf 02 00 00 00	movl	$2, %edi
100010388:	29 cf	subl	%ecx, %edi
10001038a:	31 d2	xorl	%edx, %edx
10001038c:	e8 b7 ba ff ff	callq	0x10000be48
100010391:	41 0f 10 44 24 10	movups	16(%r12), %xmm0
100010397:	41 0f 10 4c 24 20	movups	32(%r12), %xmm1
10001039d:	0f 11 40 08	movups	%xmm0, 8(%rax)
1000103a1:	0f 11 48 18	movups	%xmm1, 24(%rax)
1000103a5:	49 8b 4c 24 30	movq	48(%r12), %rcx
1000103aa:	48 89 48 28	movq	%rcx, 40(%rax)
1000103ae:	49 8b 74 24 38	movq	56(%r12), %rsi
1000103b3:	48 8b 0d 5e 7c 04 00	movq	293982(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
1000103ba:	48 8d 55 b0	leaq	-80(%rbp), %rdx
1000103be:	48 89 0a	movq	%rcx, (%rdx)
1000103c1:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
1000103c9:	48 8d 0d 7b 10 00 00	leaq	4219(%rip), %rcx
1000103d0:	48 89 4a 10	movq	%rcx, 16(%rdx)
1000103d4:	48 8d 0d 0d a5 04 00	leaq	304397(%rip), %rcx
1000103db:	e9 d1 01 00 00	jmp	0x1000105b1
1000103e0:	4d 8b 7c 24 08	movq	8(%r12), %r15
1000103e5:	4d 8b 74 24 30	movq	48(%r12), %r14
1000103ea:	48 8d 35 c4 8b 03 00	leaq	232388(%rip), %rsi ## literal pool for: ".plist"
1000103f1:	4c 89 ff	movq	%r15, %rdi
1000103f4:	e8 e2 ee ff ff	callq	0x10000f2db
1000103f9:	b1 02	movb	$2, %cl
1000103fb:	84 c0	testb	%al, %al
1000103fd:	75 31	jne	0x100010430
1000103ff:	48 8d 35 b6 8b 03 00	leaq	232374(%rip), %rsi ## literal pool for: ".xpc"
100010406:	4c 89 ff	movq	%r15, %rdi
100010409:	e8 cd ee ff ff	callq	0x10000f2db
10001040e:	84 c0	testb	%al, %al
100010410:	75 15	jne	0x100010427
100010412:	48 8d 35 a8 8b 03 00	leaq	232360(%rip), %rsi ## literal pool for: ".pluginkit"
100010419:	4c 89 ff	movq	%r15, %rdi
10001041c:	e8 ba ee ff ff	callq	0x10000f2db
100010421:	b1 03	movb	$3, %cl
100010423:	84 c0	testb	%al, %al
100010425:	74 09	je	0x100010430
100010427:	49 81 ce 00 10 00 00	orq	$4096, %r14
10001042e:	b1 07	movb	$7, %cl
100010430:	49 8d 54 24 10	leaq	16(%r12), %rdx
100010435:	4d 8b 44 24 38	movq	56(%r12), %r8
10001043a:	0f b6 f9	movzbl	%cl, %edi
10001043d:	4c 89 fe	movq	%r15, %rsi
100010440:	4c 89 f1	movq	%r14, %rcx
100010443:	e8 10 fd ff ff	callq	0x100010158
100010448:	48 89 c3	movq	%rax, %rbx
10001044b:	4c 89 e7	movq	%r12, %rdi
10001044e:	48 89 c6	movq	%rax, %rsi
100010451:	e8 d2 0a 00 00	callq	0x100010f28
100010456:	48 89 df	movq	%rbx, %rdi
100010459:	31 f6	xorl	%esi, %esi
10001045b:	e8 f1 24 00 00	callq	0x100012951
100010460:	4c 89 e7	movq	%r12, %rdi
100010463:	48 83 c4 30	addq	$48, %rsp
100010467:	5b	popq	%rbx
100010468:	41 5c	popq	%r12
10001046a:	41 5e	popq	%r14
10001046c:	41 5f	popq	%r15
10001046e:	5d	popq	%rbp
10001046f:	e9 6d 0b 00 00	jmp	0x100010fe1
100010474:	49 8b 5c 24 08	movq	8(%r12), %rbx
100010479:	48 8d 35 35 8b 03 00	leaq	232245(%rip), %rsi ## literal pool for: ".plist"
100010480:	48 89 df	movq	%rbx, %rdi
100010483:	e8 53 ee ff ff	callq	0x10000f2db
100010488:	84 c0	testb	%al, %al
10001048a:	0f 84 42 01 00 00	je	0x1000105d2
100010490:	31 ff	xorl	%edi, %edi
100010492:	48 89 de	movq	%rbx, %rsi
100010495:	31 d2	xorl	%edx, %edx
100010497:	e8 ac b9 ff ff	callq	0x10000be48
10001049c:	41 0f 10 44 24 10	movups	16(%r12), %xmm0
1000104a2:	41 0f 10 4c 24 20	movups	32(%r12), %xmm1
1000104a8:	0f 11 40 08	movups	%xmm0, 8(%rax)
1000104ac:	0f 11 48 18	movups	%xmm1, 24(%rax)
1000104b0:	49 8b 4c 24 30	movq	48(%r12), %rcx
1000104b5:	48 89 48 28	movq	%rcx, 40(%rax)
1000104b9:	49 8b 74 24 38	movq	56(%r12), %rsi
1000104be:	48 8b 0d 53 7b 04 00	movq	293715(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
1000104c5:	48 8d 55 b0	leaq	-80(%rbp), %rdx
1000104c9:	48 89 0a	movq	%rcx, (%rdx)
1000104cc:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
1000104d4:	48 8d 0d 2c 0c 00 00	leaq	3116(%rip), %rcx
1000104db:	48 89 4a 10	movq	%rcx, 16(%rdx)
1000104df:	48 8d 0d a2 a3 04 00	leaq	304034(%rip), %rcx
1000104e6:	e9 c6 00 00 00	jmp	0x1000105b1
1000104eb:	49 8b 74 24 08	movq	8(%r12), %rsi
1000104f0:	bf 03 00 00 00	movl	$3, %edi
1000104f5:	31 d2	xorl	%edx, %edx
1000104f7:	e8 4c b9 ff ff	callq	0x10000be48
1000104fc:	41 0f 10 44 24 10	movups	16(%r12), %xmm0
100010502:	41 0f 10 4c 24 20	movups	32(%r12), %xmm1
100010508:	0f 11 40 08	movups	%xmm0, 8(%rax)
10001050c:	0f 11 48 18	movups	%xmm1, 24(%rax)
100010510:	49 8b 4c 24 30	movq	48(%r12), %rcx
100010515:	48 89 48 28	movq	%rcx, 40(%rax)
100010519:	49 8b 74 24 38	movq	56(%r12), %rsi
10001051e:	48 8b 0d f3 7a 04 00	movq	293619(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100010525:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100010529:	48 89 0a	movq	%rcx, (%rdx)
10001052c:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100010534:	48 8d 0d fd 0b 00 00	leaq	3069(%rip), %rcx
10001053b:	48 89 4a 10	movq	%rcx, 16(%rdx)
10001053f:	48 8d 0d 62 a3 04 00	leaq	303970(%rip), %rcx
100010546:	eb 69	jmp	0x1000105b1
100010548:	41 8a 44 24 5c	movb	92(%r12), %al
10001054d:	31 c9	xorl	%ecx, %ecx
10001054f:	3c 05	cmpb	$5, %al
100010551:	0f 94 c1	sete	%cl
100010554:	49 8b 74 24 08	movq	8(%r12), %rsi
100010559:	bf 02 00 00 00	movl	$2, %edi
10001055e:	29 cf	subl	%ecx, %edi
100010560:	31 d2	xorl	%edx, %edx
100010562:	e8 e1 b8 ff ff	callq	0x10000be48
100010567:	41 0f 10 44 24 10	movups	16(%r12), %xmm0
10001056d:	41 0f 10 4c 24 20	movups	32(%r12), %xmm1
100010573:	0f 11 40 08	movups	%xmm0, 8(%rax)
100010577:	0f 11 48 18	movups	%xmm1, 24(%rax)
10001057b:	49 8b 4c 24 30	movq	48(%r12), %rcx
100010580:	48 89 48 28	movq	%rcx, 40(%rax)
100010584:	49 8b 74 24 38	movq	56(%r12), %rsi
100010589:	48 8b 0d 88 7a 04 00	movq	293512(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100010590:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100010594:	48 89 0a	movq	%rcx, (%rdx)
100010597:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
10001059f:	48 8d 0d b9 0c 00 00	leaq	3257(%rip), %rcx
1000105a6:	48 89 4a 10	movq	%rcx, 16(%rdx)
1000105aa:	48 8d 0d 17 a3 04 00	leaq	303895(%rip), %rcx
1000105b1:	48 89 4a 18	movq	%rcx, 24(%rdx)
1000105b5:	4c 89 62 20	movq	%r12, 32(%rdx)
1000105b9:	48 89 42 28	movq	%rax, 40(%rdx)
1000105bd:	48 89 c7	movq	%rax, %rdi
1000105c0:	e8 cf b8 ff ff	callq	0x10000be94
1000105c5:	48 83 c4 30	addq	$48, %rsp
1000105c9:	5b	popq	%rbx
1000105ca:	41 5c	popq	%r12
1000105cc:	41 5e	popq	%r14
1000105ce:	41 5f	popq	%r15
1000105d0:	5d	popq	%rbp
1000105d1:	c3	retq
1000105d2:	4c 89 e7	movq	%r12, %rdi
1000105d5:	31 f6	xorl	%esi, %esi
1000105d7:	ba 6c 00 00 00	movl	$108, %edx
1000105dc:	e8 37 00 00 00	callq	0x100010618
1000105e1:	eb e2	jmp	0x1000105c5
1000105e3:	0f b6 f9	movzbl	%cl, %edi
1000105e6:	e8 fd f2 02 00	callq	0x10003f8e8
1000105eb:	e8 bc f2 02 00	callq	0x10003f8ac
1000105f0:	e8 cc f2 02 00	callq	0x10003f8c1
1000105f5:	e8 dc f2 02 00	callq	0x10003f8d6
1000105fa:	66 90	nop
1000105fc:	e4 fd	inb	$253, %al
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100010600:	78 fe	js	0x100010600
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100010604:	ef	outl	%eax, %dx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100010607:	ff 4c fd ff	decl	-1(%rbp,%rdi,8)
10001060b:	ff 4c fd ff	decl	-1(%rbp,%rdi,8)
	.byte 0xff #bad opcode
100010610:	7b fd	jnp	0x10001060f
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100010614:	7b fd	jnp	0x100010613
	.byte 0xff #bad opcode
100010617:	ff 55 48	callq	*72(%rbp)
10001061a:	89 e5	movl	%esp, %ebp
10001061c:	41 57	pushq	%r15
10001061e:	41 56	pushq	%r14
100010620:	53	pushq	%rbx
100010621:	50	pushq	%rax
100010622:	41 89 d6	movl	%edx, %r14d
100010625:	49 89 f7	movq	%rsi, %r15
100010628:	48 89 fb	movq	%rdi, %rbx
10001062b:	48 8b 7f 38	movq	56(%rdi), %rdi
10001062f:	e8 9a 12 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
100010634:	48 8b 7b 40	movq	64(%rbx), %rdi
100010638:	4c 89 fe	movq	%r15, %rsi
10001063b:	44 89 f2	movl	%r14d, %edx
10001063e:	ff 57 10	callq	*16(%rdi)
100010641:	8a 43 5d	movb	93(%rbx), %al
100010644:	a8 01	testb	$1, %al
100010646:	74 1c	je	0x100010664
100010648:	24 fe	andb	$-2, %al
10001064a:	88 43 5d	movb	%al, 93(%rbx)
10001064d:	48 89 df	movq	%rbx, %rdi
100010650:	be 2f 00 00 00	movl	$47, %esi
100010655:	48 83 c4 08	addq	$8, %rsp
100010659:	5b	popq	%rbx
10001065a:	41 5e	popq	%r14
10001065c:	41 5f	popq	%r15
10001065e:	5d	popq	%rbp
10001065f:	e9 ed 22 00 00	jmp	0x100012951
100010664:	e8 9a f2 02 00	callq	0x10003f903
100010669:	55	pushq	%rbp
10001066a:	48 89 e5	movq	%rsp, %rbp
10001066d:	53	pushq	%rbx
10001066e:	50	pushq	%rax
10001066f:	8a 87 84 00 00 00	movb	132(%rdi), %al
100010675:	24 01	andb	$1, %al
100010677:	75 64	jne	0x1000106dd
100010679:	48 89 fb	movq	%rdi, %rbx
10001067c:	48 8b 7f 28	movq	40(%rdi), %rdi
100010680:	be 0f 00 00 00	movl	$15, %esi
100010685:	e8 c7 22 00 00	callq	0x100012951
10001068a:	48 8b 7b 40	movq	64(%rbx), %rdi
10001068e:	48 85 ff	testq	%rdi, %rdi
100010691:	74 05	je	0x100010698
100010693:	e8 64 1a 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100010698:	48 8b 7b 08	movq	8(%rbx), %rdi
10001069c:	e8 b7 12 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000106a1:	48 8b 7b 10	movq	16(%rbx), %rdi
1000106a5:	e8 8c 10 03 00	callq	0x100041736 ## symbol stub for: __Block_release
1000106aa:	48 8b 7b 48	movq	72(%rbx), %rdi
1000106ae:	e8 49 1a 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000106b3:	48 8b 7b 30	movq	48(%rbx), %rdi
1000106b7:	48 85 ff	testq	%rdi, %rdi
1000106ba:	74 05	je	0x1000106c1
1000106bc:	e8 97 12 03 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000106c1:	48 8b 7b 38	movq	56(%rbx), %rdi
1000106c5:	31 f6	xorl	%esi, %esi
1000106c7:	e8 85 22 00 00	callq	0x100012951
1000106cc:	48 8b 7b 18	movq	24(%rbx), %rdi
1000106d0:	31 f6	xorl	%esi, %esi
1000106d2:	48 83 c4 08	addq	$8, %rsp
1000106d6:	5b	popq	%rbx
1000106d7:	5d	popq	%rbp
1000106d8:	e9 74 22 00 00	jmp	0x100012951
1000106dd:	0f b6 f8	movzbl	%al, %edi
1000106e0:	e8 33 f2 02 00	callq	0x10003f918
1000106e5:	55	pushq	%rbp
1000106e6:	48 89 e5	movq	%rsp, %rbp
1000106e9:	41 57	pushq	%r15
1000106eb:	41 56	pushq	%r14
1000106ed:	41 55	pushq	%r13
1000106ef:	41 54	pushq	%r12
1000106f1:	53	pushq	%rbx
1000106f2:	48 81 ec a8 00 00 00	subq	$168, %rsp
1000106f9:	48 89 55 c0	movq	%rdx, -64(%rbp)
1000106fd:	41 89 f7	movl	%esi, %r15d
100010700:	41 8d 47 ff	leal	-1(%r15), %eax
100010704:	3c 02	cmpb	$2, %al
100010706:	0f 83 a9 03 00 00	jae	0x100010ab5
10001070c:	4c 89 cb	movq	%r9, %rbx
10001070f:	4d 89 c5	movq	%r8, %r13
100010712:	49 89 cc	movq	%rcx, %r12
100010715:	49 89 fe	movq	%rdi, %r14
100010718:	48 83 bf e0 00 00 00 00	cmpq	$0, 224(%rdi)
100010720:	75 13	jne	0x100010735
100010722:	e8 11 14 03 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
100010727:	49 89 86 e0 00 00 00	movq	%rax, 224(%r14)
10001072e:	48 81 cb 00 20 00 00	orq	$8192, %rbx
100010735:	48 89 5d b0	movq	%rbx, -80(%rbp)
100010739:	4c 89 6d d0	movq	%r13, -48(%rbp)
10001073d:	41 80 ff 01	cmpb	$1, %r15b
100010741:	75 0d	jne	0x100010750
100010743:	4c 89 f7	movq	%r14, %rdi
100010746:	be 08 00 00 00	movl	$8, %esi
10001074b:	e8 f9 0a 01 00	callq	0x100021249
100010750:	e8 a5 dd ff ff	callq	0x10000e4fa
100010755:	49 89 c5	movq	%rax, %r13
100010758:	31 ff	xorl	%edi, %edi
10001075a:	e8 a9 25 00 00	callq	0x100012d08
10001075f:	48 89 c3	movq	%rax, %rbx
100010762:	4c 89 f7	movq	%r14, %rdi
100010765:	49 89 c6	movq	%rax, %r14
100010768:	48 89 7d b8	movq	%rdi, -72(%rbp)
10001076c:	be 0f 00 00 00	movl	$15, %esi
100010771:	e8 58 21 00 00	callq	0x1000128ce
100010776:	48 89 43 28	movq	%rax, 40(%rbx)
10001077a:	44 88 7b 58	movb	%r15b, 88(%rbx)
10001077e:	48 89 5d c8	movq	%rbx, -56(%rbp)
100010782:	48 8b 45 b0	movq	-80(%rbp), %rax
100010786:	48 89 43 50	movq	%rax, 80(%rbx)
10001078a:	4c 89 f3	movq	%r14, %rbx
10001078d:	4c 8b 75 c0	movq	-64(%rbp), %r14
100010791:	4d 85 f6	testq	%r14, %r14
100010794:	74 0c	je	0x1000107a2
100010796:	4c 89 f7	movq	%r14, %rdi
100010799:	e8 64 19 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10001079e:	48 89 43 40	movq	%rax, 64(%rbx)
1000107a2:	4c 89 6b 08	movq	%r13, 8(%rbx)
1000107a6:	4c 89 ef	movq	%r13, %rdi
1000107a9:	e8 b0 11 03 00	callq	0x10004195e ## symbol stub for: _dispatch_retain
1000107ae:	31 ff	xorl	%edi, %edi
1000107b0:	31 f6	xorl	%esi, %esi
1000107b2:	31 d2	xorl	%edx, %edx
1000107b4:	e8 59 18 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000107b9:	48 89 43 48	movq	%rax, 72(%rbx)
1000107bd:	e8 6b c5 ff ff	callq	0x10000cd2d
1000107c2:	48 89 43 18	movq	%rax, 24(%rbx)
1000107c6:	41 80 ff 02	cmpb	$2, %r15b
1000107ca:	75 16	jne	0x1000107e2
1000107cc:	4d 85 f6	testq	%r14, %r14
1000107cf:	74 11	je	0x1000107e2
1000107d1:	e8 28 11 03 00	callq	0x1000418fe ## symbol stub for: _dispatch_group_create
1000107d6:	48 89 43 30	movq	%rax, 48(%rbx)
1000107da:	48 89 c7	movq	%rax, %rdi
1000107dd:	e8 22 11 03 00	callq	0x100041904 ## symbol stub for: _dispatch_group_enter
1000107e2:	e8 d6 7c 02 00	callq	0x1000384bd
1000107e7:	48 89 43 38	movq	%rax, 56(%rbx)
1000107eb:	b0 02	movb	$2, %al
1000107ed:	4c 8b 75 d0	movq	-48(%rbp), %r14
1000107f1:	4c 3b 35 a8 79 04 00	cmpq	293288(%rip), %r14
1000107f8:	74 48	je	0x100010842
1000107fa:	48 8d 0d 2f 20 05 00	leaq	335919(%rip), %rcx
100010801:	f3 41 0f 6f 06	movdqu	(%r14), %xmm0
100010806:	f3 41 0f 6f 4e 10	movdqu	16(%r14), %xmm1
10001080c:	f3 0f 6f 11	movdqu	(%rcx), %xmm2
100010810:	66 0f ef d0	pxor	%xmm0, %xmm2
100010814:	f3 0f 6f 41 10	movdqu	16(%rcx), %xmm0
100010819:	66 0f ef c1	pxor	%xmm1, %xmm0
10001081d:	66 0f eb c2	por	%xmm2, %xmm0
100010821:	66 0f 38 17 c0	ptest	%xmm0, %xmm0
100010826:	74 1a	je	0x100010842
100010828:	b0 01	movb	$1, %al
10001082a:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001082f:	75 11	jne	0x100010842
100010831:	4c 89 f7	movq	%r14, %rdi
100010834:	31 f6	xorl	%esi, %esi
100010836:	ba 02 00 00 00	movl	$2, %edx
10001083b:	e8 cd 14 00 00	callq	0x100011d0d
100010840:	fe c0	incb	%al
100010842:	88 43 60	movb	%al, 96(%rbx)
100010845:	48 83 45 c8 64	addq	$100, -56(%rbp)
10001084a:	41 0f 10 06	movups	(%r14), %xmm0
10001084e:	41 0f 10 4e 10	movups	16(%r14), %xmm1
100010853:	0f 11 43 64	movups	%xmm0, 100(%rbx)
100010857:	0f 11 4b 74	movups	%xmm1, 116(%rbx)
10001085b:	48 89 5d d0	movq	%rbx, -48(%rbp)
10001085f:	4c 8b 73 50	movq	80(%rbx), %r14
100010863:	4c 89 e7	movq	%r12, %rdi
100010866:	e8 5b 18 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001086b:	4c 89 e7	movq	%r12, %rdi
10001086e:	48 3b 05 63 78 04 00	cmpq	292963(%rip), %rax ## literal pool symbol address: __xpc_type_array
100010875:	74 6f	je	0x1000108e6
100010877:	e8 4a 18 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001087c:	48 3b 05 a5 78 04 00	cmpq	293029(%rip), %rax ## literal pool symbol address: __xpc_type_string
100010883:	0f 84 fd 00 00 00	je	0x100010986
100010889:	4c 89 e7	movq	%r12, %rdi
10001088c:	e8 35 18 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100010891:	48 3b 05 68 78 04 00	cmpq	292968(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100010898:	0f 85 24 02 00 00	jne	0x100010ac2
10001089e:	48 8b 05 73 77 04 00	movq	292723(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000108a5:	48 8d b5 30 ff ff ff	leaq	-208(%rbp), %rsi
1000108ac:	48 89 06	movq	%rax, (%rsi)
1000108af:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
1000108b7:	48 8d 05 67 0c 00 00	leaq	3175(%rip), %rax
1000108be:	48 89 46 10	movq	%rax, 16(%rsi)
1000108c2:	48 8d 05 3f a0 04 00	leaq	303167(%rip), %rax
1000108c9:	48 89 46 18	movq	%rax, 24(%rsi)
1000108cd:	4c 89 76 20	movq	%r14, 32(%rsi)
1000108d1:	48 8b 45 d0	movq	-48(%rbp), %rax
1000108d5:	48 89 46 28	movq	%rax, 40(%rsi)
1000108d9:	4c 89 e7	movq	%r12, %rdi
1000108dc:	e8 1f 17 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
1000108e1:	e9 11 01 00 00	jmp	0x1000109f7
1000108e6:	e8 61 16 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000108eb:	48 85 c0	testq	%rax, %rax
1000108ee:	0f 84 03 01 00 00	je	0x1000109f7
1000108f4:	45 31 ff	xorl	%r15d, %r15d
1000108f7:	4c 89 e7	movq	%r12, %rdi
1000108fa:	4c 89 fe	movq	%r15, %rsi
1000108fd:	e8 50 16 03 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100010902:	48 85 c0	testq	%rax, %rax
100010905:	74 69	je	0x100010970
100010907:	49 89 c5	movq	%rax, %r13
10001090a:	41 80 fe 02	cmpb	$2, %r14b
10001090e:	74 18	je	0x100010928
100010910:	b3 01	movb	$1, %bl
100010912:	41 80 fe 01	cmpb	$1, %r14b
100010916:	75 1e	jne	0x100010936
100010918:	44 89 f3	movl	%r14d, %ebx
10001091b:	c1 eb 0c	shrl	$12, %ebx
10001091e:	83 e3 01	andl	$1, %ebx
100010921:	00 db	addb	%bl, %bl
100010923:	80 cb 05	orb	$5, %bl
100010926:	eb 0e	jmp	0x100010936
100010928:	44 89 f3	movl	%r14d, %ebx
10001092b:	c1 eb 0c	shrl	$12, %ebx
10001092e:	83 e3 01	andl	$1, %ebx
100010931:	00 db	addb	%bl, %bl
100010933:	80 cb 04	orb	$4, %bl
100010936:	41 81 e6 00 ff ff ff	andl	$4294967040, %r14d
10001093d:	e8 b8 db ff ff	callq	0x10000e4fa
100010942:	0f b6 fb	movzbl	%bl, %edi
100010945:	4c 89 ee	movq	%r13, %rsi
100010948:	48 8b 55 c8	movq	-56(%rbp), %rdx
10001094c:	4c 89 f1	movq	%r14, %rcx
10001094f:	49 89 c0	movq	%rax, %r8
100010952:	e8 01 f8 ff ff	callq	0x100010158
100010957:	48 89 c3	movq	%rax, %rbx
10001095a:	48 8b 7d d0	movq	-48(%rbp), %rdi
10001095e:	48 89 c6	movq	%rax, %rsi
100010961:	e8 16 0b 00 00	callq	0x10001147c
100010966:	48 89 df	movq	%rbx, %rdi
100010969:	31 f6	xorl	%esi, %esi
10001096b:	e8 e1 1f 00 00	callq	0x100012951
100010970:	49 ff c7	incq	%r15
100010973:	4c 89 e7	movq	%r12, %rdi
100010976:	e8 d1 15 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001097b:	49 39 c7	cmpq	%rax, %r15
10001097e:	0f 82 73 ff ff ff	jb	0x1000108f7
100010984:	eb 71	jmp	0x1000109f7
100010986:	41 80 fe 02	cmpb	$2, %r14b
10001098a:	74 18	je	0x1000109a4
10001098c:	b3 01	movb	$1, %bl
10001098e:	41 80 fe 01	cmpb	$1, %r14b
100010992:	75 1e	jne	0x1000109b2
100010994:	44 89 f3	movl	%r14d, %ebx
100010997:	c1 eb 0c	shrl	$12, %ebx
10001099a:	83 e3 01	andl	$1, %ebx
10001099d:	00 db	addb	%bl, %bl
10001099f:	80 cb 05	orb	$5, %bl
1000109a2:	eb 0e	jmp	0x1000109b2
1000109a4:	44 89 f3	movl	%r14d, %ebx
1000109a7:	c1 eb 0c	shrl	$12, %ebx
1000109aa:	83 e3 01	andl	$1, %ebx
1000109ad:	00 db	addb	%bl, %bl
1000109af:	80 cb 04	orb	$4, %bl
1000109b2:	4c 89 e7	movq	%r12, %rdi
1000109b5:	e8 6c 17 03 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000109ba:	49 89 c7	movq	%rax, %r15
1000109bd:	41 81 e6 00 ff ff ff	andl	$4294967040, %r14d
1000109c4:	e8 31 db ff ff	callq	0x10000e4fa
1000109c9:	0f b6 fb	movzbl	%bl, %edi
1000109cc:	4c 89 fe	movq	%r15, %rsi
1000109cf:	48 8b 55 c8	movq	-56(%rbp), %rdx
1000109d3:	4c 89 f1	movq	%r14, %rcx
1000109d6:	49 89 c0	movq	%rax, %r8
1000109d9:	e8 7a f7 ff ff	callq	0x100010158
1000109de:	48 89 c3	movq	%rax, %rbx
1000109e1:	48 8b 7d d0	movq	-48(%rbp), %rdi
1000109e5:	48 89 c6	movq	%rax, %rsi
1000109e8:	e8 8f 0a 00 00	callq	0x10001147c
1000109ed:	48 89 df	movq	%rbx, %rdi
1000109f0:	31 f6	xorl	%esi, %esi
1000109f2:	e8 5a 1f 00 00	callq	0x100012951
1000109f7:	4c 8b 35 1a 76 04 00	movq	292378(%rip), %r14 ## literal pool symbol address: __NSConcreteStackBlock
1000109fe:	4c 89 75 88	movq	%r14, -120(%rbp)
100010a02:	48 c7 45 90 00 00 00 40	movq	$1073741824, -112(%rbp)
100010a0a:	48 8d 05 b6 00 00 00	leaq	182(%rip), %rax
100010a11:	48 89 45 98	movq	%rax, -104(%rbp)
100010a15:	48 8d 05 7c 9d 04 00	leaq	302460(%rip), %rax
100010a1c:	48 89 45 a0	movq	%rax, -96(%rbp)
100010a20:	48 8b 5d d0	movq	-48(%rbp), %rbx
100010a24:	48 89 5d a8	movq	%rbx, -88(%rbp)
100010a28:	8a 83 84 00 00 00	movb	132(%rbx), %al
100010a2e:	24 01	andb	$1, %al
100010a30:	0f 85 84 00 00 00	jne	0x100010aba
100010a36:	48 8d 7d 88	leaq	-120(%rbp), %rdi
100010a3a:	e8 e5 0c 03 00	callq	0x100041724 ## symbol stub for: __Block_copy
100010a3f:	48 89 43 10	movq	%rax, 16(%rbx)
100010a43:	e8 b2 da ff ff	callq	0x10000e4fa
100010a48:	48 8d 95 60 ff ff ff	leaq	-160(%rbp), %rdx
100010a4f:	4c 89 32	movq	%r14, (%rdx)
100010a52:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100010a5a:	48 8d 0d 41 02 00 00	leaq	577(%rip), %rcx
100010a61:	48 89 4a 10	movq	%rcx, 16(%rdx)
100010a65:	48 8d 0d 4c 9d 04 00	leaq	302412(%rip), %rcx
100010a6c:	48 89 4a 18	movq	%rcx, 24(%rdx)
100010a70:	48 89 5a 20	movq	%rbx, 32(%rdx)
100010a74:	48 8b 5d c0	movq	-64(%rbp), %rbx
100010a78:	48 89 df	movq	%rbx, %rdi
100010a7b:	48 89 c6	movq	%rax, %rsi
100010a7e:	e8 9d 00 02 00	callq	0x100030b20
100010a83:	48 85 db	testq	%rbx, %rbx
100010a86:	74 1b	je	0x100010aa3
100010a88:	84 c0	testb	%al, %al
100010a8a:	75 17	jne	0x100010aa3
100010a8c:	48 8d 15 61 82 03 00	leaq	229985(%rip), %rdx ## literal pool for: "couldn't handoff domain IO, asynced away"
100010a93:	48 8b 7d b8	movq	-72(%rbp), %rdi
100010a97:	be 05 00 00 00	movl	$5, %esi
100010a9c:	31 c0	xorl	%eax, %eax
100010a9e:	e8 86 f9 00 00	callq	0x100020429
100010aa3:	48 81 c4 a8 00 00 00	addq	$168, %rsp
100010aaa:	5b	popq	%rbx
100010aab:	41 5c	popq	%r12
100010aad:	41 5d	popq	%r13
100010aaf:	41 5e	popq	%r14
100010ab1:	41 5f	popq	%r15
100010ab3:	5d	popq	%rbp
100010ab4:	c3	retq
100010ab5:	e8 a6 ee 02 00	callq	0x10003f960
100010aba:	0f b6 f8	movzbl	%al, %edi
100010abd:	e8 71 ee 02 00	callq	0x10003f933
100010ac2:	e8 87 ee 02 00	callq	0x10003f94e
100010ac7:	55	pushq	%rbp
100010ac8:	48 89 e5	movq	%rsp, %rbp
100010acb:	41 57	pushq	%r15
100010acd:	41 56	pushq	%r14
100010acf:	41 54	pushq	%r12
100010ad1:	53	pushq	%rbx
100010ad2:	48 83 ec 60	subq	$96, %rsp
100010ad6:	49 89 fe	movq	%rdi, %r14
100010ad9:	48 8b 5f 20	movq	32(%rdi), %rbx
100010add:	4c 8b 7b 28	movq	40(%rbx), %r15
100010ae1:	f6 43 51 04	testb	$4, 81(%rbx)
100010ae5:	74 5e	je	0x100010b45
100010ae7:	80 7b 58 01	cmpb	$1, 88(%rbx)
100010aeb:	0f 85 ac 01 00 00	jne	0x100010c9d
100010af1:	48 8b 7b 38	movq	56(%rbx), %rdi
100010af5:	48 8b 05 1c 75 04 00	movq	292124(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100010afc:	48 8d 75 80	leaq	-128(%rbp), %rsi
100010b00:	48 89 06	movq	%rax, (%rsi)
100010b03:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100010b0b:	48 8d 05 93 10 00 00	leaq	4243(%rip), %rax
100010b12:	48 89 46 10	movq	%rax, 16(%rsi)
100010b16:	48 8d 05 6b 9e 04 00	leaq	302699(%rip), %rax
100010b1d:	48 89 46 18	movq	%rax, 24(%rsi)
100010b21:	4c 89 7e 20	movq	%r15, 32(%rsi)
100010b25:	48 89 5e 28	movq	%rbx, 40(%rsi)
100010b29:	e8 10 79 02 00	callq	0x10003843e
100010b2e:	49 8b bf d8 00 00 00	movq	216(%r15), %rdi
100010b35:	e8 c2 15 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100010b3a:	49 c7 87 d8 00 00 00 00 00 00 00	movq	$0, 216(%r15)
100010b45:	4c 8b 63 40	movq	64(%rbx), %r12
100010b49:	4d 85 e4	testq	%r12, %r12
100010b4c:	0f 84 a1 00 00 00	je	0x100010bf3
100010b52:	80 7b 58 01	cmpb	$1, 88(%rbx)
100010b56:	48 8d 05 69 85 03 00	leaq	230761(%rip), %rax ## literal pool for: "bootstrap-error"
100010b5d:	48 8d 35 72 85 03 00	leaq	230770(%rip), %rsi ## literal pool for: "bootout-error"
100010b64:	48 0f 44 f0	cmoveq	%rax, %rsi
100010b68:	48 63 53 5c	movslq	92(%rbx), %rdx
100010b6c:	4c 89 e7	movq	%r12, %rdi
100010b6f:	e8 10 15 03 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100010b74:	48 8b 53 48	movq	72(%rbx), %rdx
100010b78:	48 8d 35 65 85 03 00	leaq	230757(%rip), %rsi ## literal pool for: "errors"
100010b7f:	4c 89 e7	movq	%r12, %rdi
100010b82:	e8 27 15 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100010b87:	48 83 7b 30 00	cmpq	$0, 48(%rbx)
100010b8c:	0f 84 9c 00 00 00	je	0x100010c2e
100010b92:	4c 89 e7	movq	%r12, %rdi
100010b95:	e8 68 15 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100010b9a:	4c 89 ff	movq	%r15, %rdi
100010b9d:	be 10 00 00 00	movl	$16, %esi
100010ba2:	e8 27 1d 00 00	callq	0x1000128ce
100010ba7:	48 8b 7b 30	movq	48(%rbx), %rdi
100010bab:	e8 5a 0d 03 00	callq	0x10004190a ## symbol stub for: _dispatch_group_leave
100010bb0:	48 8b 73 08	movq	8(%rbx), %rsi
100010bb4:	48 8b 7b 30	movq	48(%rbx), %rdi
100010bb8:	48 8b 05 59 74 04 00	movq	291929(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100010bbf:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100010bc3:	48 89 02	movq	%rax, (%rdx)
100010bc6:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100010bce:	48 8d 05 3a 10 00 00	leaq	4154(%rip), %rax
100010bd5:	48 89 42 10	movq	%rax, 16(%rdx)
100010bd9:	48 8d 05 c8 9d 04 00	leaq	302536(%rip), %rax
100010be0:	48 89 42 18	movq	%rax, 24(%rdx)
100010be4:	4c 89 62 20	movq	%r12, 32(%rdx)
100010be8:	4c 89 7a 28	movq	%r15, 40(%rdx)
100010bec:	e8 1f 0d 03 00	callq	0x100041910 ## symbol stub for: _dispatch_group_notify
100010bf1:	eb 4a	jmp	0x100010c3d
100010bf3:	48 8b 7b 48	movq	72(%rbx), %rdi
100010bf7:	48 8b 05 1a 74 04 00	movq	291866(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100010bfe:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100010c02:	48 89 06	movq	%rax, (%rsi)
100010c05:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100010c0d:	48 8d 05 4b 10 00 00	leaq	4171(%rip), %rax
100010c14:	48 89 46 10	movq	%rax, 16(%rsi)
100010c18:	48 8d 05 a9 9d 04 00	leaq	302505(%rip), %rax
100010c1f:	48 89 46 18	movq	%rax, 24(%rsi)
100010c23:	48 89 5e 20	movq	%rbx, 32(%rsi)
100010c27:	e8 d4 13 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100010c2c:	eb 0f	jmp	0x100010c3d
100010c2e:	4c 89 e7	movq	%r12, %rdi
100010c31:	e8 ba 14 03 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100010c36:	a9 df ff ff ff	testl	$4294967263, %eax
100010c3b:	75 4c	jne	0x100010c89
100010c3d:	f6 43 51 20	testb	$32, 81(%rbx)
100010c41:	74 1b	je	0x100010c5e
100010c43:	49 8b bf e0 00 00 00	movq	224(%r15), %rdi
100010c4a:	e8 fb 8e ff ff	callq	0x100009b4a
100010c4f:	49 89 87 e8 00 00 00	movq	%rax, 232(%r15)
100010c56:	4c 89 ff	movq	%r15, %rdi
100010c59:	e8 38 09 01 00	callq	0x100021596
100010c5e:	80 7b 58 01	cmpb	$1, 88(%rbx)
100010c62:	75 0d	jne	0x100010c71
100010c64:	4c 89 ff	movq	%r15, %rdi
100010c67:	be 08 00 00 00	movl	$8, %esi
100010c6c:	e8 79 06 01 00	callq	0x1000212ea
100010c71:	49 8b 7e 20	movq	32(%r14), %rdi
100010c75:	31 f6	xorl	%esi, %esi
100010c77:	e8 d5 1c 00 00	callq	0x100012951
100010c7c:	48 83 c4 60	addq	$96, %rsp
100010c80:	5b	popq	%rbx
100010c81:	41 5c	popq	%r12
100010c83:	41 5e	popq	%r14
100010c85:	41 5f	popq	%r15
100010c87:	5d	popq	%rbp
100010c88:	c3	retq
100010c89:	48 63 d0	movslq	%eax, %rdx
100010c8c:	48 8d 3d 75 f7 00 00	leaq	63349(%rip), %rdi
100010c93:	4c 89 fe	movq	%r15, %rsi
100010c96:	e8 0d 0b 03 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100010c9b:	eb a0	jmp	0x100010c3d
100010c9d:	e8 d3 ec 02 00	callq	0x10003f975
100010ca2:	55	pushq	%rbp
100010ca3:	48 89 e5	movq	%rsp, %rbp
100010ca6:	41 57	pushq	%r15
100010ca8:	41 56	pushq	%r14
100010caa:	53	pushq	%rbx
100010cab:	50	pushq	%rax
100010cac:	4c 8b 77 20	movq	32(%rdi), %r14
100010cb0:	49 8b 7e 08	movq	8(%r14), %rdi
100010cb4:	e8 15 0c 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
100010cb9:	41 8a 86 84 00 00 00	movb	132(%r14), %al
100010cc0:	89 c1	movl	%eax, %ecx
100010cc2:	80 e1 01	andb	$1, %cl
100010cc5:	75 7c	jne	0x100010d43
100010cc7:	0c 01	orb	$1, %al
100010cc9:	41 88 86 84 00 00 00	movb	%al, 132(%r14)
100010cd0:	4c 89 f7	movq	%r14, %rdi
100010cd3:	be 31 00 00 00	movl	$49, %esi
100010cd8:	e8 f1 1b 00 00	callq	0x1000128ce
100010cdd:	49 8b 7e 18	movq	24(%r14), %rdi
100010ce1:	e8 c2 c1 ff ff	callq	0x10000cea8
100010ce6:	48 85 c0	testq	%rax, %rax
100010ce9:	74 46	je	0x100010d31
100010ceb:	49 8b 7e 18	movq	24(%r14), %rdi
100010cef:	e8 b4 c1 ff ff	callq	0x10000cea8
100010cf4:	41 f6 46 52 01	testb	$1, 82(%r14)
100010cf9:	41 bf 01 00 00 00	movl	$1, %r15d
100010cff:	4c 0f 44 f8	cmoveq	%rax, %r15
100010d03:	4d 85 ff	testq	%r15, %r15
100010d06:	74 1e	je	0x100010d26
100010d08:	31 db	xorl	%ebx, %ebx
100010d0a:	49 8b 7e 18	movq	24(%r14), %rdi
100010d0e:	48 89 de	movq	%rbx, %rsi
100010d11:	e8 79 c1 ff ff	callq	0x10000ce8f
100010d16:	48 89 c7	movq	%rax, %rdi
100010d19:	e8 64 f5 ff ff	callq	0x100010282
100010d1e:	48 ff c3	incq	%rbx
100010d21:	49 39 df	cmpq	%rbx, %r15
100010d24:	75 e4	jne	0x100010d0a
100010d26:	48 83 c4 08	addq	$8, %rsp
100010d2a:	5b	popq	%rbx
100010d2b:	41 5e	popq	%r14
100010d2d:	41 5f	popq	%r15
100010d2f:	5d	popq	%rbp
100010d30:	c3	retq
100010d31:	4c 89 f7	movq	%r14, %rdi
100010d34:	48 83 c4 08	addq	$8, %rsp
100010d38:	5b	popq	%rbx
100010d39:	41 5e	popq	%r14
100010d3b:	41 5f	popq	%r15
100010d3d:	5d	popq	%rbp
100010d3e:	e9 aa 0d 00 00	jmp	0x100011aed
100010d43:	0f b6 f9	movzbl	%cl, %edi
100010d46:	e8 3f ec 02 00	callq	0x10003f98a
100010d4b:	55	pushq	%rbp
100010d4c:	48 89 e5	movq	%rsp, %rbp
100010d4f:	49 81 c9 00 00 01 00	orq	$65536, %r9
100010d56:	5d	popq	%rbp
100010d57:	e9 89 f9 ff ff	jmp	0x1000106e5
100010d5c:	55	pushq	%rbp
100010d5d:	48 89 e5	movq	%rsp, %rbp
100010d60:	41 57	pushq	%r15
100010d62:	41 56	pushq	%r14
100010d64:	41 55	pushq	%r13
100010d66:	41 54	pushq	%r12
100010d68:	53	pushq	%rbx
100010d69:	48 83 ec 48	subq	$72, %rsp
100010d6d:	4d 89 c6	movq	%r8, %r14
100010d70:	49 89 cd	movq	%rcx, %r13
100010d73:	49 89 d7	movq	%rdx, %r15
100010d76:	48 89 f3	movq	%rsi, %rbx
100010d79:	49 89 fc	movq	%rdi, %r12
100010d7c:	e8 79 d7 ff ff	callq	0x10000e4fa
100010d81:	b9 00 50 00 00	movl	$20480, %ecx
100010d86:	bf 06 00 00 00	movl	$6, %edi
100010d8b:	48 89 de	movq	%rbx, %rsi
100010d8e:	4c 89 ea	movq	%r13, %rdx
100010d91:	49 89 c0	movq	%rax, %r8
100010d94:	e8 bf f3 ff ff	callq	0x100010158
100010d99:	48 89 c3	movq	%rax, %rbx
100010d9c:	4d 85 ff	testq	%r15, %r15
100010d9f:	74 08	je	0x100010da9
100010da1:	4c 89 ff	movq	%r15, %rdi
100010da4:	e8 59 13 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100010da9:	4c 89 e7	movq	%r12, %rdi
100010dac:	be 12 00 00 00	movl	$18, %esi
100010db1:	e8 18 1b 00 00	callq	0x1000128ce
100010db6:	48 8b 05 5b 72 04 00	movq	291419(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100010dbd:	48 8d 75 98	leaq	-104(%rbp), %rsi
100010dc1:	48 89 06	movq	%rax, (%rsi)
100010dc4:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
100010dcc:	48 8d 05 4d 00 00 00	leaq	77(%rip), %rax
100010dd3:	48 89 46 10	movq	%rax, 16(%rsi)
100010dd7:	48 8d 05 fa 99 04 00	leaq	301562(%rip), %rax
100010dde:	48 89 46 18	movq	%rax, 24(%rsi)
100010de2:	4c 89 7e 28	movq	%r15, 40(%rsi)
100010de6:	4c 89 66 30	movq	%r12, 48(%rsi)
100010dea:	4c 89 76 20	movq	%r14, 32(%rsi)
100010dee:	48 89 5e 38	movq	%rbx, 56(%rsi)
100010df2:	48 89 df	movq	%rbx, %rdi
100010df5:	e8 32 f4 ff ff	callq	0x10001022c
100010dfa:	48 8d 35 27 9a 04 00	leaq	301607(%rip), %rsi
100010e01:	48 89 df	movq	%rbx, %rdi
100010e04:	e8 4e f4 ff ff	callq	0x100010257
100010e09:	48 89 df	movq	%rbx, %rdi
100010e0c:	e8 71 f4 ff ff	callq	0x100010282
100010e11:	48 83 c4 48	addq	$72, %rsp
100010e15:	5b	popq	%rbx
100010e16:	41 5c	popq	%r12
100010e18:	41 5d	popq	%r13
100010e1a:	41 5e	popq	%r14
100010e1c:	41 5f	popq	%r15
100010e1e:	5d	popq	%rbp
100010e1f:	c3	retq
100010e20:	55	pushq	%rbp
100010e21:	48 89 e5	movq	%rsp, %rbp
100010e24:	41 57	pushq	%r15
100010e26:	41 56	pushq	%r14
100010e28:	53	pushq	%rbx
100010e29:	48 83 ec 38	subq	$56, %rsp
100010e2d:	48 89 fb	movq	%rdi, %rbx
100010e30:	89 55 e4	movl	%edx, -28(%rbp)
100010e33:	85 d2	testl	%edx, %edx
100010e35:	74 08	je	0x100010e3f
100010e37:	45 31 f6	xorl	%r14d, %r14d
100010e3a:	e9 87 00 00 00	jmp	0x100010ec6
100010e3f:	49 89 f6	movq	%rsi, %r14
100010e42:	4c 8b 7b 28	movq	40(%rbx), %r15
100010e46:	4d 85 ff	testq	%r15, %r15
100010e49:	74 56	je	0x100010ea1
100010e4b:	4c 89 f7	movq	%r14, %rdi
100010e4e:	e8 49 b1 ff ff	callq	0x10000bf9c
100010e53:	48 85 c0	testq	%rax, %rax
100010e56:	0f 84 9b 00 00 00	je	0x100010ef7
100010e5c:	48 89 c7	movq	%rax, %rdi
100010e5f:	e8 54 11 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
100010e64:	48 85 c0	testq	%rax, %rax
100010e67:	74 38	je	0x100010ea1
100010e69:	48 8b 0d a8 71 04 00	movq	291240(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100010e70:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100010e74:	48 89 0e	movq	%rcx, (%rsi)
100010e77:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100010e7f:	48 8d 0d 50 0e 00 00	leaq	3664(%rip), %rcx
100010e86:	48 89 4e 10	movq	%rcx, 16(%rsi)
100010e8a:	48 8d 0d 57 9b 04 00	leaq	301911(%rip), %rcx
100010e91:	48 89 4e 18	movq	%rcx, 24(%rsi)
100010e95:	48 89 46 20	movq	%rax, 32(%rsi)
100010e99:	4c 89 ff	movq	%r15, %rdi
100010e9c:	e8 5f 11 03 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100010ea1:	48 8b 53 28	movq	40(%rbx), %rdx
100010ea5:	48 8b 7b 30	movq	48(%rbx), %rdi
100010ea9:	48 8d 4d e4	leaq	-28(%rbp), %rcx
100010ead:	4c 89 f6	movq	%r14, %rsi
100010eb0:	e8 3b 35 01 00	callq	0x1000243f0
100010eb5:	49 89 c6	movq	%rax, %r14
100010eb8:	48 8b 7b 28	movq	40(%rbx), %rdi
100010ebc:	48 85 ff	testq	%rdi, %rdi
100010ebf:	74 05	je	0x100010ec6
100010ec1:	e8 36 12 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100010ec6:	48 8b 7b 20	movq	32(%rbx), %rdi
100010eca:	8b 55 e4	movl	-28(%rbp), %edx
100010ecd:	4c 89 f6	movq	%r14, %rsi
100010ed0:	ff 57 10	callq	*16(%rdi)
100010ed3:	48 8b 7b 30	movq	48(%rbx), %rdi
100010ed7:	be 12 00 00 00	movl	$18, %esi
100010edc:	e8 70 1a 00 00	callq	0x100012951
100010ee1:	48 8b 7b 38	movq	56(%rbx), %rdi
100010ee5:	31 f6	xorl	%esi, %esi
100010ee7:	e8 65 1a 00 00	callq	0x100012951
100010eec:	48 83 c4 38	addq	$56, %rsp
100010ef0:	5b	popq	%rbx
100010ef1:	41 5e	popq	%r14
100010ef3:	41 5f	popq	%r15
100010ef5:	5d	popq	%rbp
100010ef6:	c3	retq
100010ef7:	e8 a9 ea 02 00	callq	0x10003f9a5
100010efc:	55	pushq	%rbp
100010efd:	48 89 e5	movq	%rsp, %rbp
100010f00:	48 83 c7 20	addq	$32, %rdi
100010f04:	48 8b 76 20	movq	32(%rsi), %rsi
100010f08:	ba 07 00 00 00	movl	$7, %edx
100010f0d:	5d	popq	%rbp
100010f0e:	e9 17 08 03 00	jmp	0x10004172a ## symbol stub for: __Block_object_assign
100010f13:	90	nop
100010f14:	90	nop
100010f15:	90	nop
100010f16:	55	pushq	%rbp
100010f17:	48 89 e5	movq	%rsp, %rbp
100010f1a:	48 8d 3d 3c 80 03 00	leaq	229436(%rip), %rdi ## literal pool for: "unexpected subdio for an app extension bundle"
100010f21:	e8 8e 08 03 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100010f26:	0f 0b	ud2
100010f28:	55	pushq	%rbp
100010f29:	48 89 e5	movq	%rsp, %rbp
100010f2c:	41 57	pushq	%r15
100010f2e:	41 56	pushq	%r14
100010f30:	41 54	pushq	%r12
100010f32:	53	pushq	%rbx
100010f33:	48 83 ec 60	subq	$96, %rsp
100010f37:	83 7f 58 00	cmpl	$0, 88(%rdi)
100010f3b:	0f 85 9b 00 00 00	jne	0x100010fdc
100010f41:	49 89 f6	movq	%rsi, %r14
100010f44:	48 89 fb	movq	%rdi, %rbx
100010f47:	4c 8b 3d ca 70 04 00	movq	291018(%rip), %r15 ## literal pool symbol address: __NSConcreteStackBlock
100010f4e:	48 8d 75 88	leaq	-120(%rbp), %rsi
100010f52:	4c 89 3e	movq	%r15, (%rsi)
100010f55:	41 bc 00 00 00 40	movl	$1073741824, %r12d
100010f5b:	4c 89 66 08	movq	%r12, 8(%rsi)
100010f5f:	48 8d 05 05 01 00 00	leaq	261(%rip), %rax
100010f66:	48 89 46 10	movq	%rax, 16(%rsi)
100010f6a:	48 8d 05 d7 98 04 00	leaq	301271(%rip), %rax
100010f71:	48 89 46 18	movq	%rax, 24(%rsi)
100010f75:	48 89 7e 20	movq	%rdi, 32(%rsi)
100010f79:	4c 89 76 28	movq	%r14, 40(%rsi)
100010f7d:	4c 89 f7	movq	%r14, %rdi
100010f80:	e8 a7 f2 ff ff	callq	0x10001022c
100010f85:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100010f89:	4c 89 3e	movq	%r15, (%rsi)
100010f8c:	4c 89 66 08	movq	%r12, 8(%rsi)
100010f90:	48 8d 05 62 01 00 00	leaq	354(%rip), %rax
100010f97:	48 89 46 10	movq	%rax, 16(%rsi)
100010f9b:	48 8d 05 c6 98 04 00	leaq	301254(%rip), %rax
100010fa2:	48 89 46 18	movq	%rax, 24(%rsi)
100010fa6:	48 89 5e 20	movq	%rbx, 32(%rsi)
100010faa:	4c 89 f7	movq	%r14, %rdi
100010fad:	e8 a5 f2 ff ff	callq	0x100010257
100010fb2:	48 8b 7b 50	movq	80(%rbx), %rdi
100010fb6:	48 85 ff	testq	%rdi, %rdi
100010fb9:	75 0c	jne	0x100010fc7
100010fbb:	e8 6d bd ff ff	callq	0x10000cd2d
100010fc0:	48 89 c7	movq	%rax, %rdi
100010fc3:	48 89 43 50	movq	%rax, 80(%rbx)
100010fc7:	4c 89 f6	movq	%r14, %rsi
100010fca:	e8 c4 bd ff ff	callq	0x10000cd93
100010fcf:	48 83 c4 60	addq	$96, %rsp
100010fd3:	5b	popq	%rbx
100010fd4:	41 5c	popq	%r12
100010fd6:	41 5e	popq	%r14
100010fd8:	41 5f	popq	%r15
100010fda:	5d	popq	%rbp
100010fdb:	c3	retq
100010fdc:	e8 d9 e9 02 00	callq	0x10003f9ba
100010fe1:	55	pushq	%rbp
100010fe2:	48 89 e5	movq	%rsp, %rbp
100010fe5:	41 56	pushq	%r14
100010fe7:	53	pushq	%rbx
100010fe8:	49 89 fe	movq	%rdi, %r14
100010feb:	48 83 7f 50 00	cmpq	$0, 80(%rdi)
100010ff0:	74 64	je	0x100011056
100010ff2:	4c 89 f7	movq	%r14, %rdi
100010ff5:	be 30 00 00 00	movl	$48, %esi
100010ffa:	e8 cf 18 00 00	callq	0x1000128ce
100010fff:	49 8b 7e 50	movq	80(%r14), %rdi
100011003:	e8 a0 be ff ff	callq	0x10000cea8
100011008:	41 89 46 58	movl	%eax, 88(%r14)
10001100c:	85 c0	testl	%eax, %eax
10001100e:	74 56	je	0x100011066
100011010:	49 8b 7e 50	movq	80(%r14), %rdi
100011014:	e8 8f be ff ff	callq	0x10000cea8
100011019:	48 85 c0	testq	%rax, %rax
10001101c:	74 27	je	0x100011045
10001101e:	31 db	xorl	%ebx, %ebx
100011020:	49 8b 7e 50	movq	80(%r14), %rdi
100011024:	48 89 de	movq	%rbx, %rsi
100011027:	e8 63 be ff ff	callq	0x10000ce8f
10001102c:	48 89 c7	movq	%rax, %rdi
10001102f:	e8 4e f2 ff ff	callq	0x100010282
100011034:	48 ff c3	incq	%rbx
100011037:	49 8b 7e 50	movq	80(%r14), %rdi
10001103b:	e8 68 be ff ff	callq	0x10000cea8
100011040:	48 39 c3	cmpq	%rax, %rbx
100011043:	72 db	jb	0x100011020
100011045:	4c 89 f7	movq	%r14, %rdi
100011048:	be 30 00 00 00	movl	$48, %esi
10001104d:	5b	popq	%rbx
10001104e:	41 5e	popq	%r14
100011050:	5d	popq	%rbp
100011051:	e9 fb 18 00 00	jmp	0x100012951
100011056:	4c 89 f7	movq	%r14, %rdi
100011059:	31 f6	xorl	%esi, %esi
10001105b:	31 d2	xorl	%edx, %edx
10001105d:	5b	popq	%rbx
10001105e:	41 5e	popq	%r14
100011060:	5d	popq	%rbp
100011061:	e9 b2 f5 ff ff	jmp	0x100010618
100011066:	e8 64 e9 02 00	callq	0x10003f9cf
10001106b:	55	pushq	%rbp
10001106c:	48 89 e5	movq	%rsp, %rbp
10001106f:	53	pushq	%rbx
100011070:	50	pushq	%rax
100011071:	89 d1	movl	%edx, %ecx
100011073:	48 89 f2	movq	%rsi, %rdx
100011076:	48 89 fb	movq	%rdi, %rbx
100011079:	48 8b 7f 20	movq	32(%rdi), %rdi
10001107d:	48 8b 73 28	movq	40(%rbx), %rsi
100011081:	e8 2d 00 00 00	callq	0x1000110b3
100011086:	48 8b 7b 20	movq	32(%rbx), %rdi
10001108a:	8b 47 58	movl	88(%rdi), %eax
10001108d:	85 c0	testl	%eax, %eax
10001108f:	74 1d	je	0x1000110ae
100011091:	ff c8	decl	%eax
100011093:	89 47 58	movl	%eax, 88(%rdi)
100011096:	74 07	je	0x10001109f
100011098:	48 83 c4 08	addq	$8, %rsp
10001109c:	5b	popq	%rbx
10001109d:	5d	popq	%rbp
10001109e:	c3	retq
10001109f:	31 f6	xorl	%esi, %esi
1000110a1:	31 d2	xorl	%edx, %edx
1000110a3:	48 83 c4 08	addq	$8, %rsp
1000110a7:	5b	popq	%rbx
1000110a8:	5d	popq	%rbp
1000110a9:	e9 6a f5 ff ff	jmp	0x100010618
1000110ae:	e8 31 e9 02 00	callq	0x10003f9e4
1000110b3:	55	pushq	%rbp
1000110b4:	48 89 e5	movq	%rsp, %rbp
1000110b7:	41 57	pushq	%r15
1000110b9:	41 56	pushq	%r14
1000110bb:	41 54	pushq	%r12
1000110bd:	53	pushq	%rbx
1000110be:	f6 47 5d 01	testb	$1, 93(%rdi)
1000110c2:	74 30	je	0x1000110f4
1000110c4:	41 89 ce	movl	%ecx, %r14d
1000110c7:	49 89 d7	movq	%rdx, %r15
1000110ca:	49 89 f4	movq	%rsi, %r12
1000110cd:	48 89 fb	movq	%rdi, %rbx
1000110d0:	48 8b 7f 38	movq	56(%rdi), %rdi
1000110d4:	e8 f5 07 03 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
1000110d9:	48 8b 7b 48	movq	72(%rbx), %rdi
1000110dd:	48 8b 47 10	movq	16(%rdi), %rax
1000110e1:	4c 89 e6	movq	%r12, %rsi
1000110e4:	4c 89 fa	movq	%r15, %rdx
1000110e7:	44 89 f1	movl	%r14d, %ecx
1000110ea:	5b	popq	%rbx
1000110eb:	41 5c	popq	%r12
1000110ed:	41 5e	popq	%r14
1000110ef:	41 5f	popq	%r15
1000110f1:	5d	popq	%rbp
1000110f2:	ff e0	jmpq	*%rax
1000110f4:	e8 00 e9 02 00	callq	0x10003f9f9
1000110f9:	55	pushq	%rbp
1000110fa:	48 89 e5	movq	%rsp, %rbp
1000110fd:	48 8b 7f 20	movq	32(%rdi), %rdi
100011101:	5d	popq	%rbp
100011102:	e9 ac ff ff ff	jmp	0x1000110b3
100011107:	55	pushq	%rbp
100011108:	48 89 e5	movq	%rsp, %rbp
10001110b:	53	pushq	%rbx
10001110c:	50	pushq	%rax
10001110d:	48 85 f6	testq	%rsi, %rsi
100011110:	75 21	jne	0x100011133
100011112:	48 89 fb	movq	%rdi, %rbx
100011115:	48 8b 7f 20	movq	32(%rdi), %rdi
100011119:	48 8b 73 28	movq	40(%rbx), %rsi
10001111d:	e8 f6 f4 ff ff	callq	0x100010618
100011122:	48 8b 7b 28	movq	40(%rbx), %rdi
100011126:	31 f6	xorl	%esi, %esi
100011128:	48 83 c4 08	addq	$8, %rsp
10001112c:	5b	popq	%rbx
10001112d:	5d	popq	%rbp
10001112e:	e9 1e 18 00 00	jmp	0x100012951
100011133:	e8 d6 e8 02 00	callq	0x10003fa0e
100011138:	55	pushq	%rbp
100011139:	48 89 e5	movq	%rsp, %rbp
10001113c:	41 57	pushq	%r15
10001113e:	41 56	pushq	%r14
100011140:	41 55	pushq	%r13
100011142:	41 54	pushq	%r12
100011144:	53	pushq	%rbx
100011145:	50	pushq	%rax
100011146:	49 89 ff	movq	%rdi, %r15
100011149:	85 d2	testl	%edx, %edx
10001114b:	74 10	je	0x10001115d
10001114d:	49 8b 7f 20	movq	32(%r15), %rdi
100011151:	31 f6	xorl	%esi, %esi
100011153:	e8 c0 f4 ff ff	callq	0x100010618
100011158:	e9 e4 00 00 00	jmp	0x100011241
10001115d:	49 89 f6	movq	%rsi, %r14
100011160:	48 85 f6	testq	%rsi, %rsi
100011163:	0f 84 f1 00 00 00	je	0x10001125a
100011169:	4c 89 f7	movq	%r14, %rdi
10001116c:	e8 37 bd ff ff	callq	0x10000cea8
100011171:	48 85 c0	testq	%rax, %rax
100011174:	75 21	jne	0x100011197
100011176:	49 8b 47 20	movq	32(%r15), %rax
10001117a:	f6 40 31 20	testb	$32, 49(%rax)
10001117e:	75 17	jne	0x100011197
100011180:	48 8b 50 08	movq	8(%rax), %rdx
100011184:	48 8d 35 41 7e 03 00	leaq	228929(%rip), %rsi ## literal pool for: "Activated a directory (%s) and found no files"
10001118b:	bf 04 00 00 00	movl	$4, %edi
100011190:	31 c0	xorl	%eax, %eax
100011192:	e8 31 44 02 00	callq	0x1000355c8
100011197:	4c 89 f7	movq	%r14, %rdi
10001119a:	e8 09 bd ff ff	callq	0x10000cea8
10001119f:	48 85 c0	testq	%rax, %rax
1000111a2:	0f 84 90 00 00 00	je	0x100011238
1000111a8:	45 31 e4	xorl	%r12d, %r12d
1000111ab:	4c 89 f7	movq	%r14, %rdi
1000111ae:	4c 89 e6	movq	%r12, %rsi
1000111b1:	e8 d9 bc ff ff	callq	0x10000ce8f
1000111b6:	48 89 c3	movq	%rax, %rbx
1000111b9:	49 8b 47 20	movq	32(%r15), %rax
1000111bd:	0f 10 40 10	movups	16(%rax), %xmm0
1000111c1:	0f 10 48 20	movups	32(%rax), %xmm1
1000111c5:	0f 11 43 08	movups	%xmm0, 8(%rbx)
1000111c9:	0f 11 4b 18	movups	%xmm1, 24(%rbx)
1000111cd:	48 8b 40 30	movq	48(%rax), %rax
1000111d1:	48 89 43 28	movq	%rax, 40(%rbx)
1000111d5:	48 89 df	movq	%rbx, %rdi
1000111d8:	e8 72 ad ff ff	callq	0x10000bf4f
1000111dd:	45 31 ed	xorl	%r13d, %r13d
1000111e0:	3c 03	cmpb	$3, %al
1000111e2:	41 0f 94 c5	sete	%r13b
1000111e6:	48 89 df	movq	%rbx, %rdi
1000111e9:	e8 a4 ad ff ff	callq	0x10000bf92
1000111ee:	49 8b 77 20	movq	32(%r15), %rsi
1000111f2:	48 8d 56 10	leaq	16(%rsi), %rdx
1000111f6:	48 8b 4e 30	movq	48(%rsi), %rcx
1000111fa:	4c 8b 46 38	movq	56(%rsi), %r8
1000111fe:	43 8d 7c 6d 02	leal	2(%r13,%r13,2), %edi
100011203:	48 89 c6	movq	%rax, %rsi
100011206:	e8 4d ef ff ff	callq	0x100010158
10001120b:	48 89 c3	movq	%rax, %rbx
10001120e:	49 8b 7f 20	movq	32(%r15), %rdi
100011212:	48 89 c6	movq	%rax, %rsi
100011215:	e8 0e fd ff ff	callq	0x100010f28
10001121a:	48 89 df	movq	%rbx, %rdi
10001121d:	31 f6	xorl	%esi, %esi
10001121f:	e8 2d 17 00 00	callq	0x100012951
100011224:	49 ff c4	incq	%r12
100011227:	4c 89 f7	movq	%r14, %rdi
10001122a:	e8 79 bc ff ff	callq	0x10000cea8
10001122f:	49 39 c4	cmpq	%rax, %r12
100011232:	0f 82 73 ff ff ff	jb	0x1000111ab
100011238:	49 8b 7f 20	movq	32(%r15), %rdi
10001123c:	e8 a0 fd ff ff	callq	0x100010fe1
100011241:	49 8b 7f 28	movq	40(%r15), %rdi
100011245:	31 f6	xorl	%esi, %esi
100011247:	48 83 c4 08	addq	$8, %rsp
10001124b:	5b	popq	%rbx
10001124c:	41 5c	popq	%r12
10001124e:	41 5d	popq	%r13
100011250:	41 5e	popq	%r14
100011252:	41 5f	popq	%r15
100011254:	5d	popq	%rbp
100011255:	e9 f7 16 00 00	jmp	0x100012951
10001125a:	e8 c4 e7 02 00	callq	0x10003fa23
10001125f:	55	pushq	%rbp
100011260:	48 89 e5	movq	%rsp, %rbp
100011263:	41 57	pushq	%r15
100011265:	41 56	pushq	%r14
100011267:	41 55	pushq	%r13
100011269:	41 54	pushq	%r12
10001126b:	53	pushq	%rbx
10001126c:	48 83 ec 18	subq	$24, %rsp
100011270:	48 85 f6	testq	%rsi, %rsi
100011273:	0f 85 cd 01 00 00	jne	0x100011446
100011279:	49 89 ff	movq	%rdi, %r15
10001127c:	85 d2	testl	%edx, %edx
10001127e:	74 17	je	0x100011297
100011280:	49 8b 7f 20	movq	32(%r15), %rdi
100011284:	31 f6	xorl	%esi, %esi
100011286:	e8 8d f3 ff ff	callq	0x100010618
10001128b:	49 83 c7 28	addq	$40, %r15
10001128f:	4d 89 fe	movq	%r15, %r14
100011292:	e9 97 01 00 00	jmp	0x10001142e
100011297:	4d 8d 77 28	leaq	40(%r15), %r14
10001129b:	49 8b 7f 28	movq	40(%r15), %rdi
10001129f:	e8 f8 ac ff ff	callq	0x10000bf9c
1000112a4:	48 89 c7	movq	%rax, %rdi
1000112a7:	e8 ee 0c 03 00	callq	0x100041f9a ## symbol stub for: _xpc_bundle_copy_services
1000112ac:	48 89 c3	movq	%rax, %rbx
1000112af:	48 89 c7	movq	%rax, %rdi
1000112b2:	e8 95 0c 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000112b7:	48 85 c0	testq	%rax, %rax
1000112ba:	0f 84 10 01 00 00	je	0x1000113d0
1000112c0:	45 31 e4	xorl	%r12d, %r12d
1000112c3:	4c 89 75 d0	movq	%r14, -48(%rbp)
1000112c7:	48 89 5d c8	movq	%rbx, -56(%rbp)
1000112cb:	48 89 df	movq	%rbx, %rdi
1000112ce:	4c 89 e6	movq	%r12, %rsi
1000112d1:	e8 88 0c 03 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
1000112d6:	48 89 c3	movq	%rax, %rbx
1000112d9:	49 8b 3e	movq	(%r14), %rdi
1000112dc:	e8 82 ac ff ff	callq	0x10000bf63
1000112e1:	48 89 df	movq	%rbx, %rdi
1000112e4:	84 c0	testb	%al, %al
1000112e6:	0f 84 89 00 00 00	je	0x100011375
1000112ec:	e8 ee 0a 00 00	callq	0x100011ddf
1000112f1:	49 89 c5	movq	%rax, %r13
1000112f4:	48 89 c7	movq	%rax, %rdi
1000112f7:	e8 53 ac ff ff	callq	0x10000bf4f
1000112fc:	31 db	xorl	%ebx, %ebx
1000112fe:	3c 01	cmpb	$1, %al
100011300:	0f 94 c3	sete	%bl
100011303:	49 8b 47 20	movq	32(%r15), %rax
100011307:	4c 8b 70 30	movq	48(%rax), %r14
10001130b:	b8 00 10 00 00	movl	$4096, %eax
100011310:	49 09 c6	orq	%rax, %r14
100011313:	4c 89 ef	movq	%r13, %rdi
100011316:	e8 77 ac ff ff	callq	0x10000bf92
10001131b:	49 8b 57 20	movq	32(%r15), %rdx
10001131f:	4c 8b 42 38	movq	56(%rdx), %r8
100011323:	48 83 c2 10	addq	$16, %rdx
100011327:	83 cb 06	orl	$6, %ebx
10001132a:	89 df	movl	%ebx, %edi
10001132c:	48 89 c6	movq	%rax, %rsi
10001132f:	4c 89 f1	movq	%r14, %rcx
100011332:	4c 8b 75 d0	movq	-48(%rbp), %r14
100011336:	e8 1d ee ff ff	callq	0x100010158
10001133b:	48 89 c3	movq	%rax, %rbx
10001133e:	0f 10 40 10	movups	16(%rax), %xmm0
100011342:	0f 10 48 20	movups	32(%rax), %xmm1
100011346:	41 0f 11 45 08	movups	%xmm0, 8(%r13)
10001134b:	41 0f 11 4d 18	movups	%xmm1, 24(%r13)
100011350:	48 8b 40 30	movq	48(%rax), %rax
100011354:	49 89 45 28	movq	%rax, 40(%r13)
100011358:	49 8b 7f 20	movq	32(%r15), %rdi
10001135c:	48 89 de	movq	%rbx, %rsi
10001135f:	4c 89 ea	movq	%r13, %rdx
100011362:	31 c9	xorl	%ecx, %ecx
100011364:	e8 4a fd ff ff	callq	0x1000110b3
100011369:	48 89 df	movq	%rbx, %rdi
10001136c:	31 f6	xorl	%esi, %esi
10001136e:	e8 de 15 00 00	callq	0x100012951
100011373:	eb 39	jmp	0x1000113ae
100011375:	e8 44 0c 03 00	callq	0x100041fbe ## symbol stub for: _xpc_bundle_get_path
10001137a:	49 8b 57 20	movq	32(%r15), %rdx
10001137e:	48 8b 4a 30	movq	48(%rdx), %rcx
100011382:	be 00 10 00 00	movl	$4096, %esi
100011387:	48 09 f1	orq	%rsi, %rcx
10001138a:	4c 8b 42 38	movq	56(%rdx), %r8
10001138e:	48 83 c2 10	addq	$16, %rdx
100011392:	bf 07 00 00 00	movl	$7, %edi
100011397:	48 89 c6	movq	%rax, %rsi
10001139a:	e8 b9 ed ff ff	callq	0x100010158
10001139f:	49 89 c5	movq	%rax, %r13
1000113a2:	49 8b 7f 20	movq	32(%r15), %rdi
1000113a6:	48 89 c6	movq	%rax, %rsi
1000113a9:	e8 7a fb ff ff	callq	0x100010f28
1000113ae:	4c 89 ef	movq	%r13, %rdi
1000113b1:	31 f6	xorl	%esi, %esi
1000113b3:	e8 99 15 00 00	callq	0x100012951
1000113b8:	49 ff c4	incq	%r12
1000113bb:	48 8b 5d c8	movq	-56(%rbp), %rbx
1000113bf:	48 89 df	movq	%rbx, %rdi
1000113c2:	e8 85 0b 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000113c7:	49 39 c4	cmpq	%rax, %r12
1000113ca:	0f 82 fb fe ff ff	jb	0x1000112cb
1000113d0:	49 8b 3e	movq	(%r14), %rdi
1000113d3:	e8 8b ab ff ff	callq	0x10000bf63
1000113d8:	84 c0	testb	%al, %al
1000113da:	75 41	jne	0x10001141d
1000113dc:	48 89 df	movq	%rbx, %rdi
1000113df:	e8 68 0b 03 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000113e4:	48 85 c0	testq	%rax, %rax
1000113e7:	75 34	jne	0x10001141d
1000113e9:	4d 8b 67 20	movq	32(%r15), %r12
1000113ed:	48 8b 3d 44 1a 05 00	movq	334404(%rip), %rdi
1000113f4:	48 85 ff	testq	%rdi, %rdi
1000113f7:	75 15	jne	0x10001140e
1000113f9:	31 ff	xorl	%edi, %edi
1000113fb:	31 f6	xorl	%esi, %esi
1000113fd:	31 d2	xorl	%edx, %edx
1000113ff:	e8 0e 0c 03 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100011404:	48 89 c7	movq	%rax, %rdi
100011407:	48 89 05 2a 1a 05 00	movq	%rax, 334378(%rip)
10001140e:	49 8b 74 24 08	movq	8(%r12), %rsi
100011413:	ba 01 00 00 00	movl	$1, %edx
100011418:	e8 5b 0c 03 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001141d:	48 89 df	movq	%rbx, %rdi
100011420:	e8 d7 0c 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100011425:	49 8b 7f 20	movq	32(%r15), %rdi
100011429:	e8 b3 fb ff ff	callq	0x100010fe1
10001142e:	49 8b 3e	movq	(%r14), %rdi
100011431:	31 f6	xorl	%esi, %esi
100011433:	48 83 c4 18	addq	$24, %rsp
100011437:	5b	popq	%rbx
100011438:	41 5c	popq	%r12
10001143a:	41 5d	popq	%r13
10001143c:	41 5e	popq	%r14
10001143e:	41 5f	popq	%r15
100011440:	5d	popq	%rbp
100011441:	e9 0b 15 00 00	jmp	0x100012951
100011446:	e8 ed e5 02 00	callq	0x10003fa38
10001144b:	55	pushq	%rbp
10001144c:	48 89 e5	movq	%rsp, %rbp
10001144f:	53	pushq	%rbx
100011450:	50	pushq	%rax
100011451:	48 85 f6	testq	%rsi, %rsi
100011454:	75 21	jne	0x100011477
100011456:	48 89 fb	movq	%rdi, %rbx
100011459:	48 8b 7f 20	movq	32(%rdi), %rdi
10001145d:	48 8b 73 28	movq	40(%rbx), %rsi
100011461:	e8 b2 f1 ff ff	callq	0x100010618
100011466:	48 8b 7b 28	movq	40(%rbx), %rdi
10001146a:	31 f6	xorl	%esi, %esi
10001146c:	48 83 c4 08	addq	$8, %rsp
100011470:	5b	popq	%rbx
100011471:	5d	popq	%rbp
100011472:	e9 da 14 00 00	jmp	0x100012951
100011477:	e8 d1 e5 02 00	callq	0x10003fa4d
10001147c:	55	pushq	%rbp
10001147d:	48 89 e5	movq	%rsp, %rbp
100011480:	41 57	pushq	%r15
100011482:	41 56	pushq	%r14
100011484:	41 54	pushq	%r12
100011486:	53	pushq	%rbx
100011487:	48 83 ec 60	subq	$96, %rsp
10001148b:	48 83 7f 20 00	cmpq	$0, 32(%rdi)
100011490:	0f 85 8a 00 00 00	jne	0x100011520
100011496:	49 89 f6	movq	%rsi, %r14
100011499:	48 89 fb	movq	%rdi, %rbx
10001149c:	4c 8b 3d 75 6b 04 00	movq	289653(%rip), %r15 ## literal pool symbol address: __NSConcreteStackBlock
1000114a3:	48 8d 75 88	leaq	-120(%rbp), %rsi
1000114a7:	4c 89 3e	movq	%r15, (%rsi)
1000114aa:	41 bc 00 00 00 40	movl	$1073741824, %r12d
1000114b0:	4c 89 66 08	movq	%r12, 8(%rsi)
1000114b4:	48 8d 05 24 01 00 00	leaq	292(%rip), %rax
1000114bb:	48 89 46 10	movq	%rax, 16(%rsi)
1000114bf:	48 8d 05 82 94 04 00	leaq	300162(%rip), %rax
1000114c6:	48 89 46 18	movq	%rax, 24(%rsi)
1000114ca:	48 89 7e 20	movq	%rdi, 32(%rsi)
1000114ce:	4c 89 76 28	movq	%r14, 40(%rsi)
1000114d2:	4c 89 f7	movq	%r14, %rdi
1000114d5:	e8 52 ed ff ff	callq	0x10001022c
1000114da:	48 8d 75 b8	leaq	-72(%rbp), %rsi
1000114de:	4c 89 3e	movq	%r15, (%rsi)
1000114e1:	4c 89 66 08	movq	%r12, 8(%rsi)
1000114e5:	48 8d 05 62 06 00 00	leaq	1634(%rip), %rax
1000114ec:	48 89 46 10	movq	%rax, 16(%rsi)
1000114f0:	48 8d 05 71 94 04 00	leaq	300145(%rip), %rax
1000114f7:	48 89 46 18	movq	%rax, 24(%rsi)
1000114fb:	48 89 5e 20	movq	%rbx, 32(%rsi)
1000114ff:	4c 89 f7	movq	%r14, %rdi
100011502:	e8 50 ed ff ff	callq	0x100010257
100011507:	48 8b 7b 18	movq	24(%rbx), %rdi
10001150b:	4c 89 f6	movq	%r14, %rsi
10001150e:	e8 80 b8 ff ff	callq	0x10000cd93
100011513:	48 83 c4 60	addq	$96, %rsp
100011517:	5b	popq	%rbx
100011518:	41 5c	popq	%r12
10001151a:	41 5e	popq	%r14
10001151c:	41 5f	popq	%r15
10001151e:	5d	popq	%rbp
10001151f:	c3	retq
100011520:	e8 3d e5 02 00	callq	0x10003fa62
100011525:	55	pushq	%rbp
100011526:	48 89 e5	movq	%rsp, %rbp
100011529:	41 57	pushq	%r15
10001152b:	41 56	pushq	%r14
10001152d:	41 55	pushq	%r13
10001152f:	41 54	pushq	%r12
100011531:	53	pushq	%rbx
100011532:	50	pushq	%rax
100011533:	48 89 d3	movq	%rdx, %rbx
100011536:	49 89 f6	movq	%rsi, %r14
100011539:	49 89 ff	movq	%rdi, %r15
10001153c:	48 89 d7	movq	%rdx, %rdi
10001153f:	e8 82 0b 03 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100011544:	48 3b 05 e5 6b 04 00	cmpq	289765(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10001154b:	74 05	je	0x100011552
10001154d:	45 31 e4	xorl	%r12d, %r12d
100011550:	eb 0b	jmp	0x10001155d
100011552:	48 89 df	movq	%rbx, %rdi
100011555:	e8 de 0b 03 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
10001155a:	49 89 c4	movq	%rax, %r12
10001155d:	4d 0b 67 20	orq	32(%r15), %r12
100011561:	41 80 fc 02	cmpb	$2, %r12b
100011565:	74 18	je	0x10001157f
100011567:	b3 01	movb	$1, %bl
100011569:	41 80 fc 01	cmpb	$1, %r12b
10001156d:	75 1e	jne	0x10001158d
10001156f:	44 89 e3	movl	%r12d, %ebx
100011572:	c1 eb 0c	shrl	$12, %ebx
100011575:	83 e3 01	andl	$1, %ebx
100011578:	00 db	addb	%bl, %bl
10001157a:	80 cb 05	orb	$5, %bl
10001157d:	eb 0e	jmp	0x10001158d
10001157f:	44 89 e3	movl	%r12d, %ebx
100011582:	c1 eb 0c	shrl	$12, %ebx
100011585:	83 e3 01	andl	$1, %ebx
100011588:	00 db	addb	%bl, %bl
10001158a:	80 cb 04	orb	$4, %bl
10001158d:	41 81 e4 00 ff ff ff	andl	$4294967040, %r12d
100011594:	4d 8b 6f 28	movq	40(%r15), %r13
100011598:	49 83 c5 64	addq	$100, %r13
10001159c:	e8 59 cf ff ff	callq	0x10000e4fa
1000115a1:	0f b6 fb	movzbl	%bl, %edi
1000115a4:	4c 89 f6	movq	%r14, %rsi
1000115a7:	4c 89 ea	movq	%r13, %rdx
1000115aa:	4c 89 e1	movq	%r12, %rcx
1000115ad:	49 89 c0	movq	%rax, %r8
1000115b0:	e8 a3 eb ff ff	callq	0x100010158
1000115b5:	48 89 c3	movq	%rax, %rbx
1000115b8:	49 8b 7f 28	movq	40(%r15), %rdi
1000115bc:	48 89 c6	movq	%rax, %rsi
1000115bf:	e8 b8 fe ff ff	callq	0x10001147c
1000115c4:	48 89 df	movq	%rbx, %rdi
1000115c7:	31 f6	xorl	%esi, %esi
1000115c9:	e8 83 13 00 00	callq	0x100012951
1000115ce:	b0 01	movb	$1, %al
1000115d0:	48 83 c4 08	addq	$8, %rsp
1000115d4:	5b	popq	%rbx
1000115d5:	41 5c	popq	%r12
1000115d7:	41 5d	popq	%r13
1000115d9:	41 5e	popq	%r14
1000115db:	41 5f	popq	%r15
1000115dd:	5d	popq	%rbp
1000115de:	c3	retq
1000115df:	55	pushq	%rbp
1000115e0:	48 89 e5	movq	%rsp, %rbp
1000115e3:	41 56	pushq	%r14
1000115e5:	53	pushq	%rbx
1000115e6:	48 83 ec 30	subq	$48, %rsp
1000115ea:	89 d1	movl	%edx, %ecx
1000115ec:	48 89 f2	movq	%rsi, %rdx
1000115ef:	49 89 fe	movq	%rdi, %r14
1000115f2:	48 8b 7f 20	movq	32(%rdi), %rdi
1000115f6:	49 8b 76 28	movq	40(%r14), %rsi
1000115fa:	e8 99 00 00 00	callq	0x100011698
1000115ff:	49 8b 46 20	movq	32(%r14), %rax
100011603:	48 8b 78 18	movq	24(%rax), %rdi
100011607:	48 8b 58 20	movq	32(%rax), %rbx
10001160b:	48 ff c3	incq	%rbx
10001160e:	48 89 58 20	movq	%rbx, 32(%rax)
100011612:	e8 91 b8 ff ff	callq	0x10000cea8
100011617:	48 39 c3	cmpq	%rax, %rbx
10001161a:	77 77	ja	0x100011693
10001161c:	49 8b 46 20	movq	32(%r14), %rax
100011620:	48 8b 78 18	movq	24(%rax), %rdi
100011624:	48 8b 58 20	movq	32(%rax), %rbx
100011628:	e8 7b b8 ff ff	callq	0x10000cea8
10001162d:	49 8b 7e 20	movq	32(%r14), %rdi
100011631:	48 39 c3	cmpq	%rax, %rbx
100011634:	75 0d	jne	0x100011643
100011636:	48 83 c4 30	addq	$48, %rsp
10001163a:	5b	popq	%rbx
10001163b:	41 5e	popq	%r14
10001163d:	5d	popq	%rbp
10001163e:	e9 aa 04 00 00	jmp	0x100011aed
100011643:	f6 47 52 01	testb	$1, 82(%rdi)
100011647:	74 41	je	0x10001168a
100011649:	e8 ac ce ff ff	callq	0x10000e4fa
10001164e:	48 8b 0d c3 69 04 00	movq	289219(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100011655:	48 8d 75 c8	leaq	-56(%rbp), %rsi
100011659:	48 89 0e	movq	%rcx, (%rsi)
10001165c:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100011664:	48 8d 0d c5 04 00 00	leaq	1221(%rip), %rcx
10001166b:	48 89 4e 10	movq	%rcx, 16(%rsi)
10001166f:	48 8d 0d b2 92 04 00	leaq	299698(%rip), %rcx
100011676:	48 89 4e 18	movq	%rcx, 24(%rsi)
10001167a:	49 8b 4e 20	movq	32(%r14), %rcx
10001167e:	48 89 4e 20	movq	%rcx, 32(%rsi)
100011682:	48 89 c7	movq	%rax, %rdi
100011685:	e8 4a 02 03 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10001168a:	48 83 c4 30	addq	$48, %rsp
10001168e:	5b	popq	%rbx
10001168f:	41 5e	popq	%r14
100011691:	5d	popq	%rbp
100011692:	c3	retq
100011693:	e8 df e3 02 00	callq	0x10003fa77
100011698:	55	pushq	%rbp
100011699:	48 89 e5	movq	%rsp, %rbp
10001169c:	41 57	pushq	%r15
10001169e:	41 56	pushq	%r14
1000116a0:	41 55	pushq	%r13
1000116a2:	41 54	pushq	%r12
1000116a4:	53	pushq	%rbx
1000116a5:	48 83 ec 78	subq	$120, %rsp
1000116a9:	41 89 ce	movl	%ecx, %r14d
1000116ac:	48 89 75 88	movq	%rsi, -120(%rbp)
1000116b0:	49 89 ff	movq	%rdi, %r15
1000116b3:	48 8b 05 6e 69 04 00	movq	289134(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000116ba:	48 8b 00	movq	(%rax), %rax
1000116bd:	48 89 45 d0	movq	%rax, -48(%rbp)
1000116c1:	85 c9	testl	%ecx, %ecx
1000116c3:	0f 85 e4 01 00 00	jne	0x1000118ad
1000116c9:	41 8a 5f 58	movb	88(%r15), %bl
1000116cd:	8d 43 ff	leal	-1(%rbx), %eax
1000116d0:	3c 02	cmpb	$2, %al
1000116d2:	0f 83 0b 04 00 00	jae	0x100011ae3
1000116d8:	49 89 d4	movq	%rdx, %r12
1000116db:	4d 8b 6f 28	movq	40(%r15), %r13
1000116df:	4c 89 ef	movq	%r13, %rdi
1000116e2:	e8 2d f6 00 00	callq	0x100020d14
1000116e7:	41 be 7c 00 00 00	movl	$124, %r14d
1000116ed:	84 c0	testb	%al, %al
1000116ef:	0f 85 b8 01 00 00	jne	0x1000118ad
1000116f5:	48 8b 45 88	movq	-120(%rbp), %rax
1000116f9:	8a 40 5c	movb	92(%rax), %al
1000116fc:	8d 48 fa	leal	-6(%rax), %ecx
1000116ff:	80 f9 02	cmpb	$2, %cl
100011702:	73 23	jae	0x100011727
100011704:	41 be 74 00 00 00	movl	$116, %r14d
10001170a:	80 fb 02	cmpb	$2, %bl
10001170d:	0f 84 9a 01 00 00	je	0x1000118ad
100011713:	41 f6 47 51 04	testb	$4, 81(%r15)
100011718:	75 37	jne	0x100011751
10001171a:	4c 89 ef	movq	%r13, %rdi
10001171d:	4c 89 e6	movq	%r12, %rsi
100011720:	e8 95 2c 01 00	callq	0x1000243ba
100011725:	eb 22	jmp	0x100011749
100011727:	41 be 00 00 00 00	movl	$0, %r14d
10001172d:	3c 02	cmpb	$2, %al
10001172f:	0f 85 78 01 00 00	jne	0x1000118ad
100011735:	80 fb 01	cmpb	$1, %bl
100011738:	0f 85 4d 01 00 00	jne	0x10001188b
10001173e:	4c 89 ef	movq	%r13, %rdi
100011741:	4c 89 e6	movq	%r12, %rsi
100011744:	e8 5e 1e 01 00	callq	0x1000235a7
100011749:	41 89 c6	movl	%eax, %r14d
10001174c:	e9 5c 01 00 00	jmp	0x1000118ad
100011751:	4c 89 e7	movq	%r12, %rdi
100011754:	e8 43 a8 ff ff	callq	0x10000bf9c
100011759:	49 89 c5	movq	%rax, %r13
10001175c:	49 8b 47 38	movq	56(%r15), %rax
100011760:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
100011767:	4c 89 ef	movq	%r13, %rdi
10001176a:	e8 49 08 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
10001176f:	41 be 6b 00 00 00	movl	$107, %r14d
100011775:	48 85 c0	testq	%rax, %rax
100011778:	0f 84 2f 01 00 00	je	0x1000118ad
10001177e:	48 8d 35 b9 21 03 00	leaq	205241(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
100011785:	48 89 85 60 ff ff ff	movq	%rax, -160(%rbp)
10001178c:	48 89 c7	movq	%rax, %rdi
10001178f:	e8 c6 08 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100011794:	48 89 45 80	movq	%rax, -128(%rbp)
100011798:	48 85 c0	testq	%rax, %rax
10001179b:	0f 84 0c 01 00 00	je	0x1000118ad
1000117a1:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
1000117a8:	48 8b 75 80	movq	-128(%rbp), %rsi
1000117ac:	e8 66 6c 02 00	callq	0x100038417
1000117b1:	48 85 c0	testq	%rax, %rax
1000117b4:	0f 84 08 03 00 00	je	0x100011ac2
1000117ba:	48 89 85 68 ff ff ff	movq	%rax, -152(%rbp)
1000117c1:	48 89 c7	movq	%rax, %rdi
1000117c4:	e8 d3 a7 ff ff	callq	0x10000bf9c
1000117c9:	48 89 c3	movq	%rax, %rbx
1000117cc:	4c 89 ef	movq	%r13, %rdi
1000117cf:	be 02 00 00 00	movl	$2, %esi
1000117d4:	e8 eb 07 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
1000117d9:	49 89 c5	movq	%rax, %r13
1000117dc:	48 89 9d 70 ff ff ff	movq	%rbx, -144(%rbp)
1000117e3:	48 89 df	movq	%rbx, %rdi
1000117e6:	be 02 00 00 00	movl	$2, %esi
1000117eb:	e8 d4 07 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
1000117f0:	48 89 c3	movq	%rax, %rbx
1000117f3:	48 89 c7	movq	%rax, %rdi
1000117f6:	e8 eb e7 ff ff	callq	0x10000ffe6
1000117fb:	84 c0	testb	%al, %al
1000117fd:	74 16	je	0x100011815
1000117ff:	4c 89 ef	movq	%r13, %rdi
100011802:	e8 df e7 ff ff	callq	0x10000ffe6
100011807:	41 be 7f 00 00 00	movl	$127, %r14d
10001180d:	84 c0	testb	%al, %al
10001180f:	0f 84 98 00 00 00	je	0x1000118ad
100011815:	48 89 df	movq	%rbx, %rdi
100011818:	e8 c9 e7 ff ff	callq	0x10000ffe6
10001181d:	84 c0	testb	%al, %al
10001181f:	75 16	jne	0x100011837
100011821:	4c 89 ef	movq	%r13, %rdi
100011824:	e8 bd e7 ff ff	callq	0x10000ffe6
100011829:	41 be 7f 00 00 00	movl	$127, %r14d
10001182f:	84 c0	testb	%al, %al
100011831:	0f 85 71 02 00 00	jne	0x100011aa8
100011837:	48 89 df	movq	%rbx, %rdi
10001183a:	e8 a7 e7 ff ff	callq	0x10000ffe6
10001183f:	84 c0	testb	%al, %al
100011841:	75 10	jne	0x100011853
100011843:	4c 89 ef	movq	%r13, %rdi
100011846:	e8 9b e7 ff ff	callq	0x10000ffe6
10001184b:	84 c0	testb	%al, %al
10001184d:	0f 84 dd 01 00 00	je	0x100011a30
100011853:	48 89 df	movq	%rbx, %rdi
100011856:	4c 89 ee	movq	%r13, %rsi
100011859:	e8 ce 05 03 00	callq	0x100041e2c ## symbol stub for: _strcmp
10001185e:	85 c0	testl	%eax, %eax
100011860:	0f 84 bf 01 00 00	je	0x100011a25
100011866:	49 8b 7f 28	movq	40(%r15), %rdi
10001186a:	48 8d 15 9d 77 03 00	leaq	227229(%rip), %rdx ## literal pool for: "Conflicts exist in System services. Randomly deciding: path1 = %s, path2 = %s"
100011871:	be 04 00 00 00	movl	$4, %esi
100011876:	4c 89 e9	movq	%r13, %rcx
100011879:	49 89 d8	movq	%rbx, %r8
10001187c:	31 c0	xorl	%eax, %eax
10001187e:	e8 a6 eb 00 00	callq	0x100020429
100011883:	41 be 82 00 00 00	movl	$130, %r14d
100011889:	eb 22	jmp	0x1000118ad
10001188b:	49 8b 57 30	movq	48(%r15), %rdx
10001188f:	4c 89 ef	movq	%r13, %rdi
100011892:	4c 89 e6	movq	%r12, %rsi
100011895:	e8 97 26 01 00	callq	0x100023f31
10001189a:	45 31 f6	xorl	%r14d, %r14d
10001189d:	83 f8 24	cmpl	$36, %eax
1000118a0:	44 0f 45 f0	cmovnel	%eax, %r14d
1000118a4:	41 f6 47 52 02	testb	$2, 82(%r15)
1000118a9:	44 0f 44 f0	cmovel	%eax, %r14d
1000118ad:	4c 8b 6d 88	movq	-120(%rbp), %r13
1000118b1:	41 8a 45 5c	movb	92(%r13), %al
1000118b5:	3c 02	cmpb	$2, %al
1000118b7:	0f 85 d4 00 00 00	jne	0x100011991
1000118bd:	41 f6 47 51 20	testb	$32, 81(%r15)
1000118c2:	0f 85 ee 00 00 00	jne	0x1000119b6
1000118c8:	41 80 7f 58 01	cmpb	$1, 88(%r15)
1000118cd:	48 8d 05 88 77 03 00	leaq	227208(%rip), %rax ## literal pool for: "Bootstrap"
1000118d4:	4c 8d 25 8b 77 03 00	leaq	227211(%rip), %r12 ## literal pool for: "Bootout"
1000118db:	4c 0f 44 e0	cmoveq	%rax, %r12
1000118df:	49 8b 5d 08	movq	8(%r13), %rbx
1000118e3:	45 85 f6	testl	%r14d, %r14d
1000118e6:	74 49	je	0x100011931
1000118e8:	44 89 f7	movl	%r14d, %edi
1000118eb:	e8 1e 08 03 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000118f0:	49 89 c5	movq	%rax, %r13
1000118f3:	0f 28 05 86 19 03 00	movaps	203142(%rip), %xmm0
1000118fa:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000118fe:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100011902:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100011906:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10001190a:	0f 29 06	movaps	%xmm0, (%rsi)
10001190d:	49 8d 7f 64	leaq	100(%r15), %rdi
100011911:	e8 47 2f 02 00	callq	0x10003485d
100011916:	41 83 fe 24	cmpl	$36, %r14d
10001191a:	74 3f	je	0x10001195b
10001191c:	49 8b 7f 28	movq	40(%r15), %rdi
100011920:	44 8b 4d 90	movl	-112(%rbp), %r9d
100011924:	48 83 ec 08	subq	$8, %rsp
100011928:	48 8d 15 66 77 03 00	leaq	227174(%rip), %rdx ## literal pool for: "%s by %s[%d] for %s failed (%d: %s)"
10001192f:	eb 3d	jmp	0x10001196e
100011931:	0f 28 05 48 19 03 00	movaps	203080(%rip), %xmm0
100011938:	48 8d 75 90	leaq	-112(%rbp), %rsi
10001193c:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100011940:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100011944:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100011948:	0f 29 06	movaps	%xmm0, (%rsi)
10001194b:	49 8d 7f 64	leaq	100(%r15), %rdi
10001194f:	e8 09 2f 02 00	callq	0x10003485d
100011954:	4c 8d 2d 30 76 03 00	leaq	226864(%rip), %r13 ## literal pool for: ""
10001195b:	49 8b 7f 28	movq	40(%r15), %rdi
10001195f:	44 8b 4d 90	movl	-112(%rbp), %r9d
100011963:	48 83 ec 08	subq	$8, %rsp
100011967:	48 8d 15 00 77 03 00	leaq	227072(%rip), %rdx ## literal pool for: "%s by %s[%d] for %s succeeded (%d: %s)"
10001196e:	be 05 00 00 00	movl	$5, %esi
100011973:	4c 89 e1	movq	%r12, %rcx
100011976:	49 89 c0	movq	%rax, %r8
100011979:	31 c0	xorl	%eax, %eax
10001197b:	41 55	pushq	%r13
10001197d:	41 56	pushq	%r14
10001197f:	53	pushq	%rbx
100011980:	e8 a4 ea 00 00	callq	0x100020429
100011985:	48 83 c4 20	addq	$32, %rsp
100011989:	4c 8b 6d 88	movq	-120(%rbp), %r13
10001198d:	41 8a 45 5c	movb	92(%r13), %al
100011991:	24 fe	andb	$-2, %al
100011993:	3c 04	cmpb	$4, %al
100011995:	75 1f	jne	0x1000119b6
100011997:	41 8d 46 95	leal	-107(%r14), %eax
10001199b:	83 f8 15	cmpl	$21, %eax
10001199e:	77 0f	ja	0x1000119af
1000119a0:	bb 79 00 00 00	movl	$121, %ebx
1000119a5:	b9 05 00 20 00	movl	$2097157, %ecx
1000119aa:	0f a3 c1	btl	%eax, %ecx
1000119ad:	72 0f	jb	0x1000119be
1000119af:	45 85 f6	testl	%r14d, %r14d
1000119b2:	74 20	je	0x1000119d4
1000119b4:	eb 05	jmp	0x1000119bb
1000119b6:	45 85 f6	testl	%r14d, %r14d
1000119b9:	74 16	je	0x1000119d1
1000119bb:	44 89 f3	movl	%r14d, %ebx
1000119be:	49 8b 75 08	movq	8(%r13), %rsi
1000119c2:	4c 89 ff	movq	%r15, %rdi
1000119c5:	89 da	movl	%ebx, %edx
1000119c7:	e8 90 01 00 00	callq	0x100011b5c
1000119cc:	41 89 de	movl	%ebx, %r14d
1000119cf:	eb 03	jmp	0x1000119d4
1000119d1:	45 31 f6	xorl	%r14d, %r14d
1000119d4:	41 8a 47 58	movb	88(%r15), %al
1000119d8:	3c 02	cmpb	$2, %al
1000119da:	74 16	je	0x1000119f2
1000119dc:	3c 01	cmpb	$1, %al
1000119de:	75 22	jne	0x100011a02
1000119e0:	49 8b 75 08	movq	8(%r13), %rsi
1000119e4:	41 8b 7f 78	movl	120(%r15), %edi
1000119e8:	44 89 f2	movl	%r14d, %edx
1000119eb:	90	nop
1000119ec:	0f 1f 40 00	nopl	(%rax)
1000119f0:	eb 10	jmp	0x100011a02
1000119f2:	49 8b 75 08	movq	8(%r13), %rsi
1000119f6:	41 8b 7f 78	movl	120(%r15), %edi
1000119fa:	44 89 f2	movl	%r14d, %edx
1000119fd:	90	nop
1000119fe:	0f 1f 40 00	nopl	(%rax)
100011a02:	48 8b 05 1f 66 04 00	movq	288287(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100011a09:	48 8b 00	movq	(%rax), %rax
100011a0c:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100011a10:	0f 85 d2 00 00 00	jne	0x100011ae8
100011a16:	48 83 c4 78	addq	$120, %rsp
100011a1a:	5b	popq	%rbx
100011a1b:	41 5c	popq	%r12
100011a1d:	41 5d	popq	%r13
100011a1f:	41 5e	popq	%r14
100011a21:	41 5f	popq	%r15
100011a23:	5d	popq	%rbp
100011a24:	c3	retq
100011a25:	41 be 79 00 00 00	movl	$121, %r14d
100011a2b:	e9 7d fe ff ff	jmp	0x1000118ad
100011a30:	4c 8d 35 e5 25 03 00	leaq	206309(%rip), %r14 ## literal pool for: "CFBundleVersion"
100011a37:	48 8b bd 60 ff ff ff	movq	-160(%rbp), %rdi
100011a3e:	4c 89 f6	movq	%r14, %rsi
100011a41:	e8 14 06 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100011a46:	49 89 c5	movq	%rax, %r13
100011a49:	48 85 c0	testq	%rax, %rax
100011a4c:	48 8d 1d 1b 5d 03 00	leaq	220443(%rip), %rbx ## literal pool for: "0"
100011a53:	4c 0f 44 eb	cmoveq	%rbx, %r13
100011a57:	48 8b bd 70 ff ff ff	movq	-144(%rbp), %rdi
100011a5e:	e8 55 05 03 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
100011a63:	48 89 c7	movq	%rax, %rdi
100011a66:	4c 89 f6	movq	%r14, %rsi
100011a69:	e8 ec 05 03 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100011a6e:	48 85 c0	testq	%rax, %rax
100011a71:	48 0f 45 d8	cmovneq	%rax, %rbx
100011a75:	4c 89 ef	movq	%r13, %rdi
100011a78:	48 89 de	movq	%rbx, %rsi
100011a7b:	e8 aa d5 ff ff	callq	0x10000f02a
100011a80:	8d 48 01	leal	1(%rax), %ecx
100011a83:	31 d2	xorl	%edx, %edx
100011a85:	83 f9 02	cmpl	$2, %ecx
100011a88:	0f 92 c2	setb	%dl
100011a8b:	83 f8 01	cmpl	$1, %eax
100011a8e:	8d 04 52	leal	(%rdx,%rdx,2), %eax
100011a91:	b9 02 00 00 00	movl	$2, %ecx
100011a96:	0f 45 c8	cmovnel	%eax, %ecx
100011a99:	41 be 81 00 00 00	movl	$129, %r14d
100011a9f:	f6 c1 01	testb	$1, %cl
100011aa2:	0f 85 05 fe ff ff	jne	0x1000118ad
100011aa8:	48 8b bd 68 ff ff ff	movq	-152(%rbp), %rdi
100011aaf:	e8 de a4 ff ff	callq	0x10000bf92
100011ab4:	4c 89 ff	movq	%r15, %rdi
100011ab7:	48 89 c6	movq	%rax, %rsi
100011aba:	44 89 f2	movl	%r14d, %edx
100011abd:	e8 9a 00 00 00	callq	0x100011b5c
100011ac2:	41 80 64 24 29 fb	andb	$-5, 41(%r12)
100011ac8:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100011acf:	48 8b 75 80	movq	-128(%rbp), %rsi
100011ad3:	4c 89 e2	movq	%r12, %rdx
100011ad6:	e8 97 68 02 00	callq	0x100038372
100011adb:	45 31 f6	xorl	%r14d, %r14d
100011ade:	e9 ca fd ff ff	jmp	0x1000118ad
100011ae3:	e8 a4 df 02 00	callq	0x10003fa8c
100011ae8:	e8 85 fc 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100011aed:	55	pushq	%rbp
100011aee:	48 89 e5	movq	%rsp, %rbp
100011af1:	53	pushq	%rbx
100011af2:	50	pushq	%rax
100011af3:	48 89 fb	movq	%rdi, %rbx
100011af6:	48 8b 7f 08	movq	8(%rdi), %rdi
100011afa:	e8 cf fd 02 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
100011aff:	48 8b 7b 10	movq	16(%rbx), %rdi
100011b03:	ff 57 10	callq	*16(%rdi)
100011b06:	8a 83 84 00 00 00	movb	132(%rbx), %al
100011b0c:	a8 01	testb	$1, %al
100011b0e:	74 1b	je	0x100011b2b
100011b10:	24 fe	andb	$-2, %al
100011b12:	88 83 84 00 00 00	movb	%al, 132(%rbx)
100011b18:	48 89 df	movq	%rbx, %rdi
100011b1b:	be 31 00 00 00	movl	$49, %esi
100011b20:	48 83 c4 08	addq	$8, %rsp
100011b24:	5b	popq	%rbx
100011b25:	5d	popq	%rbp
100011b26:	e9 26 0e 00 00	jmp	0x100012951
100011b2b:	e8 71 df 02 00	callq	0x10003faa1
100011b30:	55	pushq	%rbp
100011b31:	48 89 e5	movq	%rsp, %rbp
100011b34:	48 8b 47 20	movq	32(%rdi), %rax
100011b38:	48 8b 78 18	movq	24(%rax), %rdi
100011b3c:	48 8b 70 20	movq	32(%rax), %rsi
100011b40:	e8 4a b3 ff ff	callq	0x10000ce8f
100011b45:	48 89 c7	movq	%rax, %rdi
100011b48:	5d	popq	%rbp
100011b49:	e9 34 e7 ff ff	jmp	0x100010282
100011b4e:	55	pushq	%rbp
100011b4f:	48 89 e5	movq	%rsp, %rbp
100011b52:	48 8b 7f 20	movq	32(%rdi), %rdi
100011b56:	5d	popq	%rbp
100011b57:	e9 3c fb ff ff	jmp	0x100011698
100011b5c:	55	pushq	%rbp
100011b5d:	48 89 e5	movq	%rsp, %rbp
100011b60:	41 56	pushq	%r14
100011b62:	53	pushq	%rbx
100011b63:	85 d2	testl	%edx, %edx
100011b65:	74 39	je	0x100011ba0
100011b67:	48 89 fb	movq	%rdi, %rbx
100011b6a:	80 7f 60 02	cmpb	$2, 96(%rdi)
100011b6e:	75 1e	jne	0x100011b8e
100011b70:	41 89 d6	movl	%edx, %r14d
100011b73:	48 8b 7b 48	movq	72(%rbx), %rdi
100011b77:	48 63 d2	movslq	%edx, %rdx
100011b7a:	e8 05 05 03 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100011b7f:	83 7b 5c 00	cmpl	$0, 92(%rbx)
100011b83:	74 12	je	0x100011b97
100011b85:	c7 43 5c 85 00 00 00	movl	$133, 92(%rbx)
100011b8c:	eb 0d	jmp	0x100011b9b
100011b8e:	c7 43 5c 05 00 00 00	movl	$5, 92(%rbx)
100011b95:	eb 04	jmp	0x100011b9b
100011b97:	44 89 73 5c	movl	%r14d, 92(%rbx)
100011b9b:	5b	popq	%rbx
100011b9c:	41 5e	popq	%r14
100011b9e:	5d	popq	%rbp
100011b9f:	c3	retq
100011ba0:	e8 11 df 02 00	callq	0x10003fab6
100011ba5:	55	pushq	%rbp
100011ba6:	48 89 e5	movq	%rsp, %rbp
100011ba9:	41 57	pushq	%r15
100011bab:	41 56	pushq	%r14
100011bad:	53	pushq	%rbx
100011bae:	50	pushq	%rax
100011baf:	49 89 d7	movq	%rdx, %r15
100011bb2:	49 89 fe	movq	%rdi, %r14
100011bb5:	48 89 d7	movq	%rdx, %rdi
100011bb8:	e8 ba 10 00 00	callq	0x100012c77
100011bbd:	48 89 c3	movq	%rax, %rbx
100011bc0:	e8 84 12 00 00	callq	0x100012e49
100011bc5:	48 39 c3	cmpq	%rax, %rbx
100011bc8:	75 40	jne	0x100011c0a
100011bca:	49 8b 7e 20	movq	32(%r14), %rdi
100011bce:	4c 89 fe	movq	%r15, %rsi
100011bd1:	e8 e4 27 01 00	callq	0x1000243ba
100011bd6:	85 c0	testl	%eax, %eax
100011bd8:	74 25	je	0x100011bff
100011bda:	89 c3	movl	%eax, %ebx
100011bdc:	4d 8b 76 28	movq	40(%r14), %r14
100011be0:	4c 89 ff	movq	%r15, %rdi
100011be3:	e8 aa a3 ff ff	callq	0x10000bf92
100011be8:	4c 89 f7	movq	%r14, %rdi
100011beb:	48 89 c6	movq	%rax, %rsi
100011bee:	89 da	movl	%ebx, %edx
100011bf0:	48 83 c4 08	addq	$8, %rsp
100011bf4:	5b	popq	%rbx
100011bf5:	41 5e	popq	%r14
100011bf7:	41 5f	popq	%r15
100011bf9:	5d	popq	%rbp
100011bfa:	e9 5d ff ff ff	jmp	0x100011b5c
100011bff:	48 83 c4 08	addq	$8, %rsp
100011c03:	5b	popq	%rbx
100011c04:	41 5e	popq	%r14
100011c06:	41 5f	popq	%r15
100011c08:	5d	popq	%rbp
100011c09:	c3	retq
100011c0a:	e8 bc de 02 00	callq	0x10003facb
100011c0f:	55	pushq	%rbp
100011c10:	48 89 e5	movq	%rsp, %rbp
100011c13:	41 56	pushq	%r14
100011c15:	53	pushq	%rbx
100011c16:	48 89 fb	movq	%rdi, %rbx
100011c19:	48 8b 7f 20	movq	32(%rdi), %rdi
100011c1d:	e8 ce 04 03 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100011c22:	41 89 c6	movl	%eax, %r14d
100011c25:	48 8b 7b 20	movq	32(%rbx), %rdi
100011c29:	e8 ce 04 03 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100011c2e:	41 f7 c6 df ff ff ff	testl	$4294967263, %r14d
100011c35:	75 13	jne	0x100011c4a
100011c37:	48 8b 7b 28	movq	40(%rbx), %rdi
100011c3b:	be 10 00 00 00	movl	$16, %esi
100011c40:	e8 0c 0d 00 00	callq	0x100012951
100011c45:	5b	popq	%rbx
100011c46:	41 5e	popq	%r14
100011c48:	5d	popq	%rbp
100011c49:	c3	retq
100011c4a:	49 63 d6	movslq	%r14d, %rdx
100011c4d:	48 8b 73 28	movq	40(%rbx), %rsi
100011c51:	48 8d 3d b0 e7 00 00	leaq	59312(%rip), %rdi
100011c58:	e8 4b fb 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100011c5d:	eb d8	jmp	0x100011c37
100011c5f:	55	pushq	%rbp
100011c60:	48 89 e5	movq	%rsp, %rbp
100011c63:	41 57	pushq	%r15
100011c65:	41 56	pushq	%r14
100011c67:	53	pushq	%rbx
100011c68:	50	pushq	%rax
100011c69:	49 89 f6	movq	%rsi, %r14
100011c6c:	4c 8b 7f 20	movq	32(%rdi), %r15
100011c70:	48 89 d7	movq	%rdx, %rdi
100011c73:	e8 5a 04 03 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100011c78:	48 89 c3	movq	%rax, %rbx
100011c7b:	83 c0 89	addl	$-119, %eax
100011c7e:	83 f8 21	cmpl	$33, %eax
100011c81:	77 1c	ja	0x100011c9f
100011c83:	48 b9 25 80 00 20 02 00 00 00	movabsq	$9126838309, %rcx
100011c8d:	48 0f a3 c1	btq	%rax, %rcx
100011c91:	73 0c	jae	0x100011c9f
100011c93:	48 8d 05 46 0b 05 00	leaq	330566(%rip), %rax
100011c9a:	80 38 00	cmpb	$0, (%rax)
100011c9d:	74 2a	je	0x100011cc9
100011c9f:	4d 8b 7f 28	movq	40(%r15), %r15
100011ca3:	89 df	movl	%ebx, %edi
100011ca5:	e8 64 04 03 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100011caa:	48 8d 15 3a 74 03 00	leaq	226362(%rip), %rdx ## literal pool for: "Failed to bootstrap path: path = %s, error = %d: %s"
100011cb1:	4c 89 ff	movq	%r15, %rdi
100011cb4:	be 03 00 00 00	movl	$3, %esi
100011cb9:	4c 89 f1	movq	%r14, %rcx
100011cbc:	41 89 d8	movl	%ebx, %r8d
100011cbf:	49 89 c1	movq	%rax, %r9
100011cc2:	31 c0	xorl	%eax, %eax
100011cc4:	e8 60 e7 00 00	callq	0x100020429
100011cc9:	b0 01	movb	$1, %al
100011ccb:	48 83 c4 08	addq	$8, %rsp
100011ccf:	5b	popq	%rbx
100011cd0:	41 5e	popq	%r14
100011cd2:	41 5f	popq	%r15
100011cd4:	5d	popq	%rbp
100011cd5:	c3	retq
100011cd6:	55	pushq	%rbp
100011cd7:	48 89 e5	movq	%rsp, %rbp
100011cda:	48 8b 7f 20	movq	32(%rdi), %rdi
100011cde:	e8 cb 03 03 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100011ce3:	b0 01	movb	$1, %al
100011ce5:	5d	popq	%rbp
100011ce6:	c3	retq
100011ce7:	48 85 ff	testq	%rdi, %rdi
100011cea:	74 06	je	0x100011cf2
100011cec:	48 89 f8	movq	%rdi, %rax
100011cef:	31 d2	xorl	%edx, %edx
100011cf1:	c3	retq
100011cf2:	55	pushq	%rbp
100011cf3:	48 89 e5	movq	%rsp, %rbp
100011cf6:	e8 e5 dd 02 00	callq	0x10003fae0
100011cfb:	85 ff	testl	%edi, %edi
100011cfd:	74 05	je	0x100011d04
100011cff:	31 c0	xorl	%eax, %eax
100011d01:	89 fa	movl	%edi, %edx
100011d03:	c3	retq
100011d04:	55	pushq	%rbp
100011d05:	48 89 e5	movq	%rsp, %rbp
100011d08:	e8 e5 dd 02 00	callq	0x10003faf2
100011d0d:	55	pushq	%rbp
100011d0e:	48 89 e5	movq	%rsp, %rbp
100011d11:	48 83 ec 40	subq	$64, %rsp
100011d15:	48 89 f0	movq	%rsi, %rax
100011d18:	be 00 00 00 00	movl	$0, %esi
100011d1d:	83 fa 02	cmpl	$2, %edx
100011d20:	75 09	jne	0x100011d2b
100011d22:	48 8b 0d df 62 04 00	movq	287455(%rip), %rcx ## literal pool symbol address: _SANDBOX_CHECK_NO_REPORT
100011d29:	8b 31	movl	(%rcx), %esi
100011d2b:	0f 10 07	movups	(%rdi), %xmm0
100011d2e:	0f 10 4f 10	movups	16(%rdi), %xmm1
100011d32:	0f 29 4d f0	movaps	%xmm1, -16(%rbp)
100011d36:	0f 29 45 e0	movaps	%xmm0, -32(%rbp)
100011d3a:	0f 28 45 e0	movaps	-32(%rbp), %xmm0
100011d3e:	0f 28 4d f0	movaps	-16(%rbp), %xmm1
100011d42:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
100011d47:	0f 11 04 24	movups	%xmm0, (%rsp)
100011d4b:	48 89 c7	movq	%rax, %rdi
100011d4e:	31 c0	xorl	%eax, %eax
100011d50:	e8 5f 00 03 00	callq	0x100041db4 ## symbol stub for: _sandbox_check_by_audit_token
100011d55:	85 c0	testl	%eax, %eax
100011d57:	0f 94 c0	sete	%al
100011d5a:	48 83 c4 40	addq	$64, %rsp
100011d5e:	5d	popq	%rbp
100011d5f:	c3	retq
100011d60:	55	pushq	%rbp
100011d61:	48 89 e5	movq	%rsp, %rbp
100011d64:	48 83 ec 40	subq	$64, %rsp
100011d68:	49 89 f0	movq	%rsi, %r8
100011d6b:	31 c0	xorl	%eax, %eax
100011d6d:	83 fa 02	cmpl	$2, %edx
100011d70:	0f 94 c0	sete	%al
100011d73:	83 c8 02	orl	$2, %eax
100011d76:	83 fa 03	cmpl	$3, %edx
100011d79:	be 0c 00 00 00	movl	$12, %esi
100011d7e:	0f 45 f0	cmovnel	%eax, %esi
100011d81:	0f 10 07	movups	(%rdi), %xmm0
100011d84:	0f 10 4f 10	movups	16(%rdi), %xmm1
100011d88:	0f 29 4d f0	movaps	%xmm1, -16(%rbp)
100011d8c:	0f 29 45 e0	movaps	%xmm0, -32(%rbp)
100011d90:	0f 28 45 e0	movaps	-32(%rbp), %xmm0
100011d94:	0f 28 4d f0	movaps	-16(%rbp), %xmm1
100011d98:	0f 11 4c 24 10	movups	%xmm1, 16(%rsp)
100011d9d:	0f 11 04 24	movups	%xmm0, (%rsp)
100011da1:	4c 89 c7	movq	%r8, %rdi
100011da4:	48 89 ca	movq	%rcx, %rdx
100011da7:	31 c0	xorl	%eax, %eax
100011da9:	e8 06 00 03 00	callq	0x100041db4 ## symbol stub for: _sandbox_check_by_audit_token
100011dae:	85 c0	testl	%eax, %eax
100011db0:	0f 94 c0	sete	%al
100011db3:	48 83 c4 40	addq	$64, %rsp
100011db7:	5d	popq	%rbp
100011db8:	c3	retq
100011db9:	48 85 ff	testq	%rdi, %rdi
100011dbc:	74 06	je	0x100011dc4
100011dbe:	48 89 f8	movq	%rdi, %rax
100011dc1:	31 d2	xorl	%edx, %edx
100011dc3:	c3	retq
100011dc4:	55	pushq	%rbp
100011dc5:	48 89 e5	movq	%rsp, %rbp
100011dc8:	e8 37 dd 02 00	callq	0x10003fb04
100011dcd:	85 ff	testl	%edi, %edi
100011dcf:	74 05	je	0x100011dd6
100011dd1:	31 c0	xorl	%eax, %eax
100011dd3:	89 fa	movl	%edi, %edx
100011dd5:	c3	retq
100011dd6:	55	pushq	%rbp
100011dd7:	48 89 e5	movq	%rsp, %rbp
100011dda:	e8 37 dd 02 00	callq	0x10003fb16
100011ddf:	55	pushq	%rbp
100011de0:	48 89 e5	movq	%rsp, %rbp
100011de3:	41 56	pushq	%r14
100011de5:	53	pushq	%rbx
100011de6:	49 89 fe	movq	%rdi, %r14
100011de9:	31 ff	xorl	%edi, %edi
100011deb:	e8 2f 10 00 00	callq	0x100012e1f
100011df0:	48 89 c3	movq	%rax, %rbx
100011df3:	4c 89 f7	movq	%r14, %rdi
100011df6:	31 f6	xorl	%esi, %esi
100011df8:	e8 c7 01 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
100011dfd:	31 f6	xorl	%esi, %esi
100011dff:	83 f8 01	cmpl	$1, %eax
100011e02:	40 0f 94 c6	sete	%sil
100011e06:	89 f0	movl	%esi, %eax
100011e08:	fe c0	incb	%al
100011e0a:	83 ce 02	orl	$2, %esi
100011e0d:	88 43 30	movb	%al, 48(%rbx)
100011e10:	4c 89 f7	movq	%r14, %rdi
100011e13:	e8 ac 01 03 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
100011e18:	48 89 c7	movq	%rax, %rdi
100011e1b:	e8 c2 d1 ff ff	callq	0x10000efe2
100011e20:	48 89 43 38	movq	%rax, 56(%rbx)
100011e24:	4c 89 f7	movq	%r14, %rdi
100011e27:	e8 d6 02 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100011e2c:	48 89 43 48	movq	%rax, 72(%rbx)
100011e30:	48 8d 7b 58	leaq	88(%rbx), %rdi
100011e34:	48 8d 35 8d 02 05 00	leaq	328333(%rip), %rsi
100011e3b:	ba 90 00 00 00	movl	$144, %edx
100011e40:	e8 89 fd 02 00	callq	0x100041bce ## symbol stub for: _memcpy
100011e45:	80 8b 00 01 00 00 01	orb	$1, 256(%rbx)
100011e4c:	48 89 d8	movq	%rbx, %rax
100011e4f:	5b	popq	%rbx
100011e50:	41 5e	popq	%r14
100011e52:	5d	popq	%rbp
100011e53:	c3	retq
100011e54:	55	pushq	%rbp
100011e55:	48 89 e5	movq	%rsp, %rbp
100011e58:	41 57	pushq	%r15
100011e5a:	41 56	pushq	%r14
100011e5c:	53	pushq	%rbx
100011e5d:	50	pushq	%rax
100011e5e:	49 89 fe	movq	%rdi, %r14
100011e61:	31 db	xorl	%ebx, %ebx
100011e63:	4c 8d 3d a6 8b 04 00	leaq	297894(%rip), %r15
100011e6a:	4a 8b 34 3b	movq	(%rbx,%r15), %rsi
100011e6e:	4c 89 f7	movq	%r14, %rdi
100011e71:	e8 38 d4 ff ff	callq	0x10000f2ae
100011e76:	84 c0	testb	%al, %al
100011e78:	75 0d	jne	0x100011e87
100011e7a:	48 8d 4b 08	leaq	8(%rbx), %rcx
100011e7e:	48 83 fb 08	cmpq	$8, %rbx
100011e82:	48 89 cb	movq	%rcx, %rbx
100011e85:	75 e3	jne	0x100011e6a
100011e87:	48 83 c4 08	addq	$8, %rsp
100011e8b:	5b	popq	%rbx
100011e8c:	41 5e	popq	%r14
100011e8e:	41 5f	popq	%r15
100011e90:	5d	popq	%rbp
100011e91:	c3	retq
100011e92:	55	pushq	%rbp
100011e93:	48 89 e5	movq	%rsp, %rbp
100011e96:	41 57	pushq	%r15
100011e98:	41 56	pushq	%r14
100011e9a:	41 54	pushq	%r12
100011e9c:	53	pushq	%rbx
100011e9d:	48 81 ec 10 04 00 00	subq	$1040, %rsp
100011ea4:	48 8b 05 7d 61 04 00	movq	287101(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100011eab:	48 8b 00	movq	(%rax), %rax
100011eae:	48 89 45 d8	movq	%rax, -40(%rbp)
100011eb2:	8a 47 30	movb	48(%rdi), %al
100011eb5:	41 be 94 00 00 00	movl	$148, %r14d
100011ebb:	3c 03	cmpb	$3, %al
100011ebd:	0f 84 80 01 00 00	je	0x100012043
100011ec3:	48 89 fb	movq	%rdi, %rbx
100011ec6:	3c 02	cmpb	$2, %al
100011ec8:	74 22	je	0x100011eec
100011eca:	3c 01	cmpb	$1, %al
100011ecc:	0f 85 8a 00 00 00	jne	0x100011f5c
100011ed2:	48 8b 7b 38	movq	56(%rbx), %rdi
100011ed6:	48 8d 35 e2 72 03 00	leaq	226018(%rip), %rsi ## literal pool for: ".appex"
100011edd:	e8 f9 d3 ff ff	callq	0x10000f2db
100011ee2:	84 c0	testb	%al, %al
100011ee4:	74 73	je	0x100011f59
100011ee6:	48 8b 7b 38	movq	56(%rbx), %rdi
100011eea:	eb 66	jmp	0x100011f52
100011eec:	4c 8d bd d0 fb ff ff	leaq	-1072(%rbp), %r15
100011ef3:	ba 00 04 00 00	movl	$1024, %edx
100011ef8:	4c 89 ff	movq	%r15, %rdi
100011efb:	be aa 00 00 00	movl	$170, %esi
100011f00:	e8 d5 fc 02 00	callq	0x100041bda ## symbol stub for: _memset
100011f05:	48 8b 4b 38	movq	56(%rbx), %rcx
100011f09:	48 8d 15 06 57 03 00	leaq	218886(%rip), %rdx ## literal pool for: "%s"
100011f10:	be 00 04 00 00	movl	$1024, %esi
100011f15:	4c 89 ff	movq	%r15, %rdi
100011f18:	31 c0	xorl	%eax, %eax
100011f1a:	e8 e3 fe 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
100011f1f:	4c 89 ff	movq	%r15, %rdi
100011f22:	be 2f 00 00 00	movl	$47, %esi
100011f27:	e8 42 ff 02 00	callq	0x100041e6e ## symbol stub for: _strrchr
100011f2c:	48 85 c0	testq	%rax, %rax
100011f2f:	74 03	je	0x100011f34
100011f31:	c6 00 00	movb	$0, (%rax)
100011f34:	48 8d 35 84 72 03 00	leaq	225924(%rip), %rsi ## literal pool for: ".appex"
100011f3b:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
100011f42:	e8 94 d3 ff ff	callq	0x10000f2db
100011f47:	84 c0	testb	%al, %al
100011f49:	74 0e	je	0x100011f59
100011f4b:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
100011f52:	e8 fe 05 00 00	callq	0x100012555
100011f57:	eb 3f	jmp	0x100011f98
100011f59:	8a 43 30	movb	48(%rbx), %al
100011f5c:	3c 02	cmpb	$2, %al
100011f5e:	74 2f	je	0x100011f8f
100011f60:	3c 01	cmpb	$1, %al
100011f62:	74 51	je	0x100011fb5
100011f64:	84 c0	testb	%al, %al
100011f66:	0f 85 d7 00 00 00	jne	0x100012043
100011f6c:	48 8b 73 38	movq	56(%rbx), %rsi
100011f70:	48 8b 3d d1 07 05 00	movq	329681(%rip), %rdi
100011f77:	e8 f0 00 03 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100011f7c:	48 85 c0	testq	%rax, %rax
100011f7f:	0f 84 be 00 00 00	je	0x100012043
100011f85:	48 89 c7	movq	%rax, %rdi
100011f88:	e8 75 01 03 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100011f8d:	eb 09	jmp	0x100011f98
100011f8f:	48 8b 7b 38	movq	56(%rbx), %rdi
100011f93:	e8 e2 05 00 00	callq	0x10001257a
100011f98:	49 89 c7	movq	%rax, %r15
100011f9b:	4d 85 ff	testq	%r15, %r15
100011f9e:	0f 84 9f 00 00 00	je	0x100012043
100011fa4:	8a 43 30	movb	48(%rbx), %al
100011fa7:	8d 48 ff	leal	-1(%rax), %ecx
100011faa:	80 f9 02	cmpb	$2, %cl
100011fad:	73 46	jae	0x100011ff5
100011faf:	48 8d 43 48	leaq	72(%rbx), %rax
100011fb3:	eb 48	jmp	0x100011ffd
100011fb5:	4c 8b 63 38	movq	56(%rbx), %r12
100011fb9:	4c 89 e7	movq	%r12, %rdi
100011fbc:	e8 94 05 00 00	callq	0x100012555
100011fc1:	49 89 c7	movq	%rax, %r15
100011fc4:	48 85 c0	testq	%rax, %rax
100011fc7:	75 d2	jne	0x100011f9b
100011fc9:	4c 89 e7	movq	%r12, %rdi
100011fcc:	e8 a9 05 00 00	callq	0x10001257a
100011fd1:	48 85 c0	testq	%rax, %rax
100011fd4:	0f 84 8c 00 00 00	je	0x100012066
100011fda:	49 89 c7	movq	%rax, %r15
100011fdd:	48 8d 35 e2 71 03 00	leaq	225762(%rip), %rsi ## literal pool for: "Found XPCService bundle by executable: %s"
100011fe4:	bf 05 00 00 00	movl	$5, %edi
100011fe9:	4c 89 e2	movq	%r12, %rdx
100011fec:	31 c0	xorl	%eax, %eax
100011fee:	e8 d5 35 02 00	callq	0x1000355c8
100011ff3:	eb a6	jmp	0x100011f9b
100011ff5:	84 c0	testb	%al, %al
100011ff7:	75 7a	jne	0x100012073
100011ff9:	48 8d 43 50	leaq	80(%rbx), %rax
100011ffd:	4c 89 38	movq	%r15, (%rax)
100012000:	80 8b 00 01 00 00 01	orb	$1, 256(%rbx)
100012007:	c7 83 e8 00 00 00 00 00 00 00	movl	$0, 232(%rbx)
100012011:	48 8d 7b 58	leaq	88(%rbx), %rdi
100012015:	48 8d 35 ac 00 05 00	leaq	327852(%rip), %rsi
10001201c:	ba 90 00 00 00	movl	$144, %edx
100012021:	e8 a8 fb 02 00	callq	0x100041bce ## symbol stub for: _memcpy
100012026:	48 8b bb f0 00 00 00	movq	240(%rbx), %rdi
10001202d:	e8 9c f8 02 00	callq	0x1000418ce ## symbol stub for: _dispatch_assert_queue$V2
100012032:	48 8b bb f8 00 00 00	movq	248(%rbx), %rdi
100012039:	45 31 f6	xorl	%r14d, %r14d
10001203c:	31 f6	xorl	%esi, %esi
10001203e:	31 d2	xorl	%edx, %edx
100012040:	ff 57 10	callq	*16(%rdi)
100012043:	48 8b 05 de 5f 04 00	movq	286686(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001204a:	48 8b 00	movq	(%rax), %rax
10001204d:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100012051:	75 1b	jne	0x10001206e
100012053:	44 89 f0	movl	%r14d, %eax
100012056:	48 81 c4 10 04 00 00	addq	$1040, %rsp
10001205d:	5b	popq	%rbx
10001205e:	41 5c	popq	%r12
100012060:	41 5e	popq	%r14
100012062:	41 5f	popq	%r15
100012064:	5d	popq	%rbp
100012065:	c3	retq
100012066:	45 31 ff	xorl	%r15d, %r15d
100012069:	e9 2d ff ff ff	jmp	0x100011f9b
10001206e:	e8 ff f6 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100012073:	0f b6 f0	movzbl	%al, %esi
100012076:	48 8d 3d a2 70 03 00	leaq	225442(%rip), %rdi ## literal pool for: "unsupported cached entry type %d"
10001207d:	31 c0	xorl	%eax, %eax
10001207f:	e8 8e 23 02 00	callq	0x100034412
100012084:	55	pushq	%rbp
100012085:	48 89 e5	movq	%rsp, %rbp
100012088:	53	pushq	%rbx
100012089:	50	pushq	%rax
10001208a:	48 85 ff	testq	%rdi, %rdi
10001208d:	0f 85 df 00 00 00	jne	0x100012172
100012093:	48 8d 3d a6 70 03 00	leaq	225446(%rip), %rdi ## literal pool for: "/System/Library/xpc/launchd.plist"
10001209a:	e8 4b 07 02 00	callq	0x1000327ea
10001209f:	48 85 c0	testq	%rax, %rax
1000120a2:	74 5e	je	0x100012102
1000120a4:	48 89 c3	movq	%rax, %rbx
1000120a7:	48 89 c7	movq	%rax, %rdi
1000120aa:	e8 4a 01 00 00	callq	0x1000121f9
1000120af:	e8 53 c4 ff ff	callq	0x10000e507
1000120b4:	48 8b 3d b5 5f 04 00	movq	286645(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_signal
1000120bb:	be 01 00 00 00	movl	$1, %esi
1000120c0:	31 d2	xorl	%edx, %edx
1000120c2:	48 89 c1	movq	%rax, %rcx
1000120c5:	e8 b8 f8 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
1000120ca:	48 89 05 6f 0d 05 00	movq	%rax, 331119(%rip)
1000120d1:	48 8d 35 70 89 04 00	leaq	297328(%rip), %rsi
1000120d8:	48 89 c7	movq	%rax, %rdi
1000120db:	e8 c0 f8 02 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
1000120e0:	48 8b 3d 59 0d 05 00	movq	331097(%rip), %rdi
1000120e7:	e8 d6 f7 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
1000120ec:	48 89 df	movq	%rbx, %rdi
1000120ef:	e8 84 01 00 00	callq	0x100012278
1000120f4:	48 89 df	movq	%rbx, %rdi
1000120f7:	48 83 c4 08	addq	$8, %rsp
1000120fb:	5b	popq	%rbx
1000120fc:	5d	popq	%rbp
1000120fd:	e9 fa ff 02 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100012102:	e8 00 c4 ff ff	callq	0x10000e507
100012107:	48 8b 3d 62 5f 04 00	movq	286562(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_signal
10001210e:	be 01 00 00 00	movl	$1, %esi
100012113:	31 d2	xorl	%edx, %edx
100012115:	48 89 c1	movq	%rax, %rcx
100012118:	e8 65 f8 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001211d:	48 89 05 1c 0d 05 00	movq	%rax, 331036(%rip)
100012124:	48 8d 35 1d 89 04 00	leaq	297245(%rip), %rsi
10001212b:	48 89 c7	movq	%rax, %rdi
10001212e:	e8 6d f8 02 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
100012133:	48 8b 3d 06 0d 05 00	movq	331014(%rip), %rdi
10001213a:	e8 83 f7 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001213f:	31 ff	xorl	%edi, %edi
100012141:	e8 32 01 00 00	callq	0x100012278
100012146:	48 8d 05 63 06 05 00	leaq	329315(%rip), %rax
10001214d:	83 38 00	cmpl	$0, (%rax)
100012150:	74 07	je	0x100012159
100012152:	48 83 c4 08	addq	$8, %rsp
100012156:	5b	popq	%rbx
100012157:	5d	popq	%rbp
100012158:	c3	retq
100012159:	48 8d 35 18 70 03 00	leaq	225304(%rip), %rsi ## literal pool for: "Unable to load cache"
100012160:	bf 04 00 01 00	movl	$65540, %edi
100012165:	31 c0	xorl	%eax, %eax
100012167:	48 83 c4 08	addq	$8, %rsp
10001216b:	5b	popq	%rbx
10001216c:	5d	popq	%rbp
10001216d:	e9 56 34 02 00	jmp	0x1000355c8
100012172:	e8 b1 d9 02 00	callq	0x10003fb28
100012177:	55	pushq	%rbp
100012178:	48 89 e5	movq	%rsp, %rbp
10001217b:	53	pushq	%rbx
10001217c:	48 83 ec 28	subq	$40, %rsp
100012180:	48 8d 3d b9 6f 03 00	leaq	225209(%rip), %rdi ## literal pool for: "/System/Library/xpc/launchd.plist"
100012187:	e8 5e 06 02 00	callq	0x1000327ea
10001218c:	48 85 c0	testq	%rax, %rax
10001218f:	74 4f	je	0x1000121e0
100012191:	48 89 c3	movq	%rax, %rbx
100012194:	48 89 c7	movq	%rax, %rdi
100012197:	e8 5d 00 00 00	callq	0x1000121f9
10001219c:	e8 59 c3 ff ff	callq	0x10000e4fa
1000121a1:	48 8b 0d 70 5e 04 00	movq	286320(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
1000121a8:	48 8d 75 d0	leaq	-48(%rbp), %rsi
1000121ac:	48 89 0e	movq	%rcx, (%rsi)
1000121af:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
1000121b7:	48 8d 0d 99 00 00 00	leaq	153(%rip), %rcx
1000121be:	48 89 4e 10	movq	%rcx, 16(%rsi)
1000121c2:	48 8d 0d 9f 88 04 00	leaq	297119(%rip), %rcx
1000121c9:	48 89 4e 18	movq	%rcx, 24(%rsi)
1000121cd:	48 89 5e 20	movq	%rbx, 32(%rsi)
1000121d1:	48 89 c7	movq	%rax, %rdi
1000121d4:	e8 fb f6 02 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
1000121d9:	48 83 c4 28	addq	$40, %rsp
1000121dd:	5b	popq	%rbx
1000121de:	5d	popq	%rbp
1000121df:	c3	retq
1000121e0:	48 8d 35 7b 6f 03 00	leaq	225147(%rip), %rsi ## literal pool for: "Error reloading cache"
1000121e7:	bf 03 00 00 00	movl	$3, %edi
1000121ec:	31 c0	xorl	%eax, %eax
1000121ee:	48 83 c4 28	addq	$40, %rsp
1000121f2:	5b	popq	%rbx
1000121f3:	5d	popq	%rbp
1000121f4:	e9 cf 33 02 00	jmp	0x1000355c8
1000121f9:	55	pushq	%rbp
1000121fa:	48 89 e5	movq	%rsp, %rbp
1000121fd:	41 57	pushq	%r15
1000121ff:	41 56	pushq	%r14
100012201:	41 54	pushq	%r12
100012203:	53	pushq	%rbx
100012204:	49 89 fc	movq	%rdi, %r12
100012207:	4c 8d 35 e2 6f 03 00	leaq	225250(%rip), %r14 ## literal pool for: "SystemLibraryTreeState"
10001220e:	4c 89 f6	movq	%r14, %rsi
100012211:	e8 56 fe 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100012216:	49 89 c7	movq	%rax, %r15
100012219:	31 ff	xorl	%edi, %edi
10001221b:	31 f6	xorl	%esi, %esi
10001221d:	31 d2	xorl	%edx, %edx
10001221f:	e8 ee fd 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100012224:	48 89 c3	movq	%rax, %rbx
100012227:	48 8d 35 d9 6f 03 00	leaq	225241(%rip), %rsi ## literal pool for: "_imagePathToInfo"
10001222e:	48 89 c7	movq	%rax, %rdi
100012231:	4c 89 fa	movq	%r15, %rdx
100012234:	e8 75 fe 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100012239:	4c 89 e7	movq	%r12, %rdi
10001223c:	4c 89 f6	movq	%r14, %rsi
10001223f:	48 89 da	movq	%rbx, %rdx
100012242:	e8 67 fe 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100012247:	48 89 df	movq	%rbx, %rdi
10001224a:	5b	popq	%rbx
10001224b:	41 5c	popq	%r12
10001224d:	41 5e	popq	%r14
10001224f:	41 5f	popq	%r15
100012251:	5d	popq	%rbp
100012252:	e9 a5 fe 02 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100012257:	55	pushq	%rbp
100012258:	48 89 e5	movq	%rsp, %rbp
10001225b:	53	pushq	%rbx
10001225c:	50	pushq	%rax
10001225d:	48 89 fb	movq	%rdi, %rbx
100012260:	48 8b 7f 20	movq	32(%rdi), %rdi
100012264:	e8 0f 00 00 00	callq	0x100012278
100012269:	48 8b 7b 20	movq	32(%rbx), %rdi
10001226d:	48 83 c4 08	addq	$8, %rsp
100012271:	5b	popq	%rbx
100012272:	5d	popq	%rbp
100012273:	e9 84 fe 02 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100012278:	55	pushq	%rbp
100012279:	48 89 e5	movq	%rsp, %rbp
10001227c:	41 57	pushq	%r15
10001227e:	41 56	pushq	%r14
100012280:	41 54	pushq	%r12
100012282:	53	pushq	%rbx
100012283:	48 83 ec 50	subq	$80, %rsp
100012287:	48 85 ff	testq	%rdi, %rdi
10001228a:	74 11	je	0x10001229d
10001228c:	48 89 fb	movq	%rdi, %rbx
10001228f:	e8 32 fe 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100012294:	48 3b 05 65 5e 04 00	cmpq	286309(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10001229b:	74 15	je	0x1000122b2
10001229d:	31 ff	xorl	%edi, %edi
10001229f:	31 f6	xorl	%esi, %esi
1000122a1:	48 83 c4 50	addq	$80, %rsp
1000122a5:	5b	popq	%rbx
1000122a6:	41 5c	popq	%r12
1000122a8:	41 5e	popq	%r14
1000122aa:	41 5f	popq	%r15
1000122ac:	5d	popq	%rbp
1000122ad:	e9 c6 01 00 00	jmp	0x100012478
1000122b2:	48 8d 35 37 6f 03 00	leaq	225079(%rip), %rsi ## literal pool for: "SystemLibraryTreeState"
1000122b9:	48 89 df	movq	%rbx, %rdi
1000122bc:	e8 ab fd 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000122c1:	48 85 c0	testq	%rax, %rax
1000122c4:	74 18	je	0x1000122de
1000122c6:	49 89 c6	movq	%rax, %r14
1000122c9:	48 89 c7	movq	%rax, %rdi
1000122cc:	e8 f5 fd 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000122d1:	48 3b 05 28 5e 04 00	cmpq	286248(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000122d8:	0f 84 b0 00 00 00	je	0x10001238e
1000122de:	45 31 f6	xorl	%r14d, %r14d
1000122e1:	31 ff	xorl	%edi, %edi
1000122e3:	31 f6	xorl	%esi, %esi
1000122e5:	31 d2	xorl	%edx, %edx
1000122e7:	e8 26 fd 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000122ec:	49 89 c7	movq	%rax, %r15
1000122ef:	48 8b 05 22 5d 04 00	movq	285986(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000122f6:	48 89 45 b8	movq	%rax, -72(%rbp)
1000122fa:	48 c7 45 c0 00 00 00 40	movq	$1073741824, -64(%rbp)
100012302:	48 8d 05 15 05 00 00	leaq	1301(%rip), %rax
100012309:	48 89 45 c8	movq	%rax, -56(%rbp)
10001230d:	48 8d 05 b4 87 04 00	leaq	296884(%rip), %rax
100012314:	48 89 45 d0	movq	%rax, -48(%rbp)
100012318:	4c 89 7d d8	movq	%r15, -40(%rbp)
10001231c:	48 8d 35 29 6f 03 00	leaq	225065(%rip), %rsi ## literal pool for: "AppExtensions"
100012323:	48 89 df	movq	%rbx, %rdi
100012326:	e8 41 fd 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10001232b:	48 85 c0	testq	%rax, %rax
10001232e:	74 20	je	0x100012350
100012330:	48 89 c3	movq	%rax, %rbx
100012333:	48 89 c7	movq	%rax, %rdi
100012336:	e8 8b fd 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001233b:	48 3b 05 be 5d 04 00	cmpq	286142(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100012342:	75 0c	jne	0x100012350
100012344:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100012348:	48 89 df	movq	%rbx, %rdi
10001234b:	e8 b0 fc 02 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100012350:	4c 89 f7	movq	%r14, %rdi
100012353:	4c 89 fe	movq	%r15, %rsi
100012356:	e8 1d 01 00 00	callq	0x100012478
10001235b:	4d 85 f6	testq	%r14, %r14
10001235e:	74 08	je	0x100012368
100012360:	4c 89 f7	movq	%r14, %rdi
100012363:	e8 94 fd 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012368:	4d 85 ff	testq	%r15, %r15
10001236b:	74 14	je	0x100012381
10001236d:	4c 89 ff	movq	%r15, %rdi
100012370:	48 83 c4 50	addq	$80, %rsp
100012374:	5b	popq	%rbx
100012375:	41 5c	popq	%r12
100012377:	41 5e	popq	%r14
100012379:	41 5f	popq	%r15
10001237b:	5d	popq	%rbp
10001237c:	e9 7b fd 02 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100012381:	48 83 c4 50	addq	$80, %rsp
100012385:	5b	popq	%rbx
100012386:	41 5c	popq	%r12
100012388:	41 5e	popq	%r14
10001238a:	41 5f	popq	%r15
10001238c:	5d	popq	%rbp
10001238d:	c3	retq
10001238e:	48 8d 35 72 6e 03 00	leaq	224882(%rip), %rsi ## literal pool for: "_imagePathToInfo"
100012395:	4c 89 f7	movq	%r14, %rdi
100012398:	e8 cf fc 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10001239d:	48 85 c0	testq	%rax, %rax
1000123a0:	0f 84 38 ff ff ff	je	0x1000122de
1000123a6:	49 89 c7	movq	%rax, %r15
1000123a9:	48 89 c7	movq	%rax, %rdi
1000123ac:	e8 15 fd 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000123b1:	48 3b 05 48 5d 04 00	cmpq	286024(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000123b8:	0f 85 20 ff ff ff	jne	0x1000122de
1000123be:	31 ff	xorl	%edi, %edi
1000123c0:	31 f6	xorl	%esi, %esi
1000123c2:	31 d2	xorl	%edx, %edx
1000123c4:	e8 49 fc 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000123c9:	49 89 c6	movq	%rax, %r14
1000123cc:	4c 8b 25 45 5c 04 00	movq	285765(%rip), %r12 ## literal pool symbol address: __NSConcreteStackBlock
1000123d3:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000123d7:	4c 89 26	movq	%r12, (%rsi)
1000123da:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
1000123e2:	48 8d 05 db 01 00 00	leaq	475(%rip), %rax
1000123e9:	48 89 46 10	movq	%rax, 16(%rsi)
1000123ed:	48 8d 05 94 86 04 00	leaq	296596(%rip), %rax
1000123f4:	48 89 46 18	movq	%rax, 24(%rsi)
1000123f8:	4c 89 76 20	movq	%r14, 32(%rsi)
1000123fc:	4c 89 ff	movq	%r15, %rdi
1000123ff:	e8 fc fb 02 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100012404:	48 8d 35 0d 6e 03 00	leaq	224781(%rip), %rsi ## literal pool for: "Symlinks"
10001240b:	48 89 df	movq	%rbx, %rdi
10001240e:	e8 59 fc 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100012413:	48 85 c0	testq	%rax, %rax
100012416:	0f 84 c5 fe ff ff	je	0x1000122e1
10001241c:	49 89 c7	movq	%rax, %r15
10001241f:	48 89 c7	movq	%rax, %rdi
100012422:	e8 9f fc 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100012427:	48 3b 05 d2 5c 04 00	cmpq	285906(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10001242e:	0f 85 ad fe ff ff	jne	0x1000122e1
100012434:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100012438:	4c 89 26	movq	%r12, (%rsi)
10001243b:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100012443:	48 8d 05 4e 03 00 00	leaq	846(%rip), %rax
10001244a:	48 89 46 10	movq	%rax, 16(%rsi)
10001244e:	48 8d 05 53 86 04 00	leaq	296531(%rip), %rax
100012455:	48 89 46 18	movq	%rax, 24(%rsi)
100012459:	4c 89 76 20	movq	%r14, 32(%rsi)
10001245d:	4c 89 ff	movq	%r15, %rdi
100012460:	e8 9b fb 02 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
100012465:	e9 77 fe ff ff	jmp	0x1000122e1
10001246a:	55	pushq	%rbp
10001246b:	48 89 e5	movq	%rsp, %rbp
10001246e:	31 ff	xorl	%edi, %edi
100012470:	31 f6	xorl	%esi, %esi
100012472:	5d	popq	%rbp
100012473:	e9 00 00 00 00	jmp	0x100012478
100012478:	55	pushq	%rbp
100012479:	48 89 e5	movq	%rsp, %rbp
10001247c:	41 56	pushq	%r14
10001247e:	53	pushq	%rbx
10001247f:	49 89 f6	movq	%rsi, %r14
100012482:	48 89 fb	movq	%rdi, %rbx
100012485:	48 8b 3d bc 02 05 00	movq	328380(%rip), %rdi
10001248c:	48 85 ff	testq	%rdi, %rdi
10001248f:	74 05	je	0x100012496
100012491:	e8 66 fc 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012496:	31 ff	xorl	%edi, %edi
100012498:	31 f6	xorl	%esi, %esi
10001249a:	31 d2	xorl	%edx, %edx
10001249c:	e8 71 fb 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000124a1:	48 89 05 a0 02 05 00	movq	%rax, 328352(%rip)
1000124a8:	48 8b 3d a1 02 05 00	movq	328353(%rip), %rdi
1000124af:	48 85 ff	testq	%rdi, %rdi
1000124b2:	74 05	je	0x1000124b9
1000124b4:	e8 43 fc 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000124b9:	48 85 db	testq	%rbx, %rbx
1000124bc:	74 11	je	0x1000124cf
1000124be:	48 89 df	movq	%rbx, %rdi
1000124c1:	e8 00 fc 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000124c6:	48 3b 05 33 5c 04 00	cmpq	285747(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000124cd:	74 0d	je	0x1000124dc
1000124cf:	31 ff	xorl	%edi, %edi
1000124d1:	31 f6	xorl	%esi, %esi
1000124d3:	31 d2	xorl	%edx, %edx
1000124d5:	e8 38 fb 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000124da:	eb 08	jmp	0x1000124e4
1000124dc:	48 89 df	movq	%rbx, %rdi
1000124df:	e8 1e fc 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000124e4:	48 89 05 65 02 05 00	movq	%rax, 328293(%rip)
1000124eb:	48 8b 3d 66 02 05 00	movq	328294(%rip), %rdi
1000124f2:	48 85 ff	testq	%rdi, %rdi
1000124f5:	74 05	je	0x1000124fc
1000124f7:	e8 00 fc 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000124fc:	4d 85 f6	testq	%r14, %r14
1000124ff:	74 11	je	0x100012512
100012501:	4c 89 f7	movq	%r14, %rdi
100012504:	e8 bd fb 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100012509:	48 3b 05 f0 5b 04 00	cmpq	285680(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100012510:	74 0d	je	0x10001251f
100012512:	31 ff	xorl	%edi, %edi
100012514:	31 f6	xorl	%esi, %esi
100012516:	31 d2	xorl	%edx, %edx
100012518:	e8 f5 fa 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10001251d:	eb 08	jmp	0x100012527
10001251f:	4c 89 f7	movq	%r14, %rdi
100012522:	e8 db fb 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100012527:	48 89 05 2a 02 05 00	movq	%rax, 328234(%rip)
10001252e:	5b	popq	%rbx
10001252f:	41 5e	popq	%r14
100012531:	5d	popq	%rbp
100012532:	c3	retq
100012533:	55	pushq	%rbp
100012534:	48 89 e5	movq	%rsp, %rbp
100012537:	48 8d 05 94 02 05 00	leaq	328340(%rip), %rax
10001253e:	80 38 00	cmpb	$0, (%rax)
100012541:	0f 94 c1	sete	%cl
100012544:	48 8d 05 89 02 05 00	leaq	328329(%rip), %rax
10001254b:	80 38 00	cmpb	$0, (%rax)
10001254e:	0f 95 c0	setne	%al
100012551:	08 c8	orb	%cl, %al
100012553:	5d	popq	%rbp
100012554:	c3	retq
100012555:	55	pushq	%rbp
100012556:	48 89 e5	movq	%rsp, %rbp
100012559:	48 89 fe	movq	%rdi, %rsi
10001255c:	48 8b 3d f5 01 05 00	movq	328181(%rip), %rdi
100012563:	e8 04 fb 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100012568:	48 85 c0	testq	%rax, %rax
10001256b:	74 09	je	0x100012576
10001256d:	48 89 c7	movq	%rax, %rdi
100012570:	5d	popq	%rbp
100012571:	e9 8c fb 02 00	jmp	0x100042102 ## symbol stub for: _xpc_retain
100012576:	31 c0	xorl	%eax, %eax
100012578:	5d	popq	%rbp
100012579:	c3	retq
10001257a:	55	pushq	%rbp
10001257b:	48 89 e5	movq	%rsp, %rbp
10001257e:	41 56	pushq	%r14
100012580:	53	pushq	%rbx
100012581:	48 89 fb	movq	%rdi, %rbx
100012584:	48 8b 3d c5 01 05 00	movq	328133(%rip), %rdi
10001258b:	48 89 de	movq	%rbx, %rsi
10001258e:	e8 d9 fa 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100012593:	48 85 c0	testq	%rax, %rax
100012596:	74 22	je	0x1000125ba
100012598:	49 89 c6	movq	%rax, %r14
10001259b:	bf 01 00 00 00	movl	$1, %edi
1000125a0:	48 89 de	movq	%rbx, %rsi
1000125a3:	e8 fe f9 02 00	callq	0x100041fa6 ## symbol stub for: _xpc_bundle_create_from_origin
1000125a8:	48 89 c3	movq	%rax, %rbx
1000125ab:	48 89 c7	movq	%rax, %rdi
1000125ae:	31 f6	xorl	%esi, %esi
1000125b0:	4c 89 f2	movq	%r14, %rdx
1000125b3:	e8 12 fa 02 00	callq	0x100041fca ## symbol stub for: _xpc_bundle_populate
1000125b8:	eb 02	jmp	0x1000125bc
1000125ba:	31 db	xorl	%ebx, %ebx
1000125bc:	48 89 d8	movq	%rbx, %rax
1000125bf:	5b	popq	%rbx
1000125c0:	41 5e	popq	%r14
1000125c2:	5d	popq	%rbp
1000125c3:	c3	retq
1000125c4:	55	pushq	%rbp
1000125c5:	48 89 e5	movq	%rsp, %rbp
1000125c8:	41 57	pushq	%r15
1000125ca:	41 56	pushq	%r14
1000125cc:	41 55	pushq	%r13
1000125ce:	41 54	pushq	%r12
1000125d0:	53	pushq	%rbx
1000125d1:	50	pushq	%rax
1000125d2:	49 89 f6	movq	%rsi, %r14
1000125d5:	49 89 ff	movq	%rdi, %r15
1000125d8:	48 85 d2	testq	%rdx, %rdx
1000125db:	74 14	je	0x1000125f1
1000125dd:	48 89 d3	movq	%rdx, %rbx
1000125e0:	48 89 d7	movq	%rdx, %rdi
1000125e3:	e8 de fa 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000125e8:	48 3b 05 11 5b 04 00	cmpq	285457(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000125ef:	74 69	je	0x10001265a
1000125f1:	48 8b 3d 50 08 05 00	movq	329808(%rip), %rdi
1000125f8:	48 85 ff	testq	%rdi, %rdi
1000125fb:	75 13	jne	0x100012610
1000125fd:	31 ff	xorl	%edi, %edi
1000125ff:	31 f6	xorl	%esi, %esi
100012601:	e8 3a f9 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100012606:	48 89 c7	movq	%rax, %rdi
100012609:	48 89 05 38 08 05 00	movq	%rax, 329784(%rip)
100012610:	e8 37 f9 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100012615:	48 85 c0	testq	%rax, %rax
100012618:	0f 85 fc 00 00 00	jne	0x10001271a
10001261e:	48 8b 3d 23 08 05 00	movq	329763(%rip), %rdi
100012625:	e8 d8 fa 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10001262a:	49 89 c5	movq	%rax, %r13
10001262d:	4d 85 ed	testq	%r13, %r13
100012630:	74 17	je	0x100012649
100012632:	49 8b 7f 20	movq	32(%r15), %rdi
100012636:	4c 89 f6	movq	%r14, %rsi
100012639:	4c 89 ea	movq	%r13, %rdx
10001263c:	e8 6d fa 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100012641:	4c 89 ef	movq	%r13, %rdi
100012644:	e8 b3 fa 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012649:	b0 01	movb	$1, %al
10001264b:	48 83 c4 08	addq	$8, %rsp
10001264f:	5b	popq	%rbx
100012650:	41 5c	popq	%r12
100012652:	41 5d	popq	%r13
100012654:	41 5e	popq	%r14
100012656:	41 5f	popq	%r15
100012658:	5d	popq	%rbp
100012659:	c3	retq
10001265a:	48 8d 35 c0 6b 03 00	leaq	224192(%rip), %rsi ## literal pool for: "_serviceBundles"
100012661:	48 89 df	movq	%rbx, %rdi
100012664:	e8 03 fa 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100012669:	48 85 c0	testq	%rax, %rax
10001266c:	74 83	je	0x1000125f1
10001266e:	49 89 c4	movq	%rax, %r12
100012671:	48 89 c7	movq	%rax, %rdi
100012674:	e8 4d fa 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100012679:	48 3b 05 58 5a 04 00	cmpq	285272(%rip), %rax ## literal pool symbol address: __xpc_type_array
100012680:	0f 85 6b ff ff ff	jne	0x1000125f1
100012686:	4c 89 e7	movq	%r12, %rdi
100012689:	e8 be f8 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001268e:	48 85 c0	testq	%rax, %rax
100012691:	0f 84 5a ff ff ff	je	0x1000125f1
100012697:	31 ff	xorl	%edi, %edi
100012699:	31 f6	xorl	%esi, %esi
10001269b:	e8 a0 f8 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
1000126a0:	49 89 c5	movq	%rax, %r13
1000126a3:	4c 89 e7	movq	%r12, %rdi
1000126a6:	e8 a1 f8 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000126ab:	48 85 c0	testq	%rax, %rax
1000126ae:	0f 84 79 ff ff ff	je	0x10001262d
1000126b4:	4c 89 75 d0	movq	%r14, -48(%rbp)
1000126b8:	31 db	xorl	%ebx, %ebx
1000126ba:	4c 89 e7	movq	%r12, %rdi
1000126bd:	48 89 de	movq	%rbx, %rsi
1000126c0:	e8 99 f8 02 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
1000126c5:	48 85 c0	testq	%rax, %rax
1000126c8:	74 37	je	0x100012701
1000126ca:	49 89 c6	movq	%rax, %r14
1000126cd:	48 89 c7	movq	%rax, %rdi
1000126d0:	e8 f1 f9 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000126d5:	48 3b 05 24 5a 04 00	cmpq	285220(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000126dc:	75 23	jne	0x100012701
1000126de:	4c 89 f7	movq	%r14, %rdi
1000126e1:	e8 3c 00 00 00	callq	0x100012722
1000126e6:	48 85 c0	testq	%rax, %rax
1000126e9:	74 16	je	0x100012701
1000126eb:	49 89 c6	movq	%rax, %r14
1000126ee:	4c 89 ef	movq	%r13, %rdi
1000126f1:	48 89 c6	movq	%rax, %rsi
1000126f4:	e8 35 f8 02 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
1000126f9:	4c 89 f7	movq	%r14, %rdi
1000126fc:	e8 fb f9 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012701:	48 ff c3	incq	%rbx
100012704:	4c 89 e7	movq	%r12, %rdi
100012707:	e8 40 f8 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001270c:	48 39 c3	cmpq	%rax, %rbx
10001270f:	72 a9	jb	0x1000126ba
100012711:	4c 8b 75 d0	movq	-48(%rbp), %r14
100012715:	e9 13 ff ff ff	jmp	0x10001262d
10001271a:	48 89 c7	movq	%rax, %rdi
10001271d:	e8 1b d4 02 00	callq	0x10003fb3d
100012722:	55	pushq	%rbp
100012723:	48 89 e5	movq	%rsp, %rbp
100012726:	41 57	pushq	%r15
100012728:	41 56	pushq	%r14
10001272a:	53	pushq	%rbx
10001272b:	50	pushq	%rax
10001272c:	48 89 fb	movq	%rdi, %rbx
10001272f:	48 8d 35 fb 6a 03 00	leaq	223995(%rip), %rsi ## literal pool for: "_infoPlist"
100012736:	e8 31 f9 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10001273b:	48 85 c0	testq	%rax, %rax
10001273e:	74 14	je	0x100012754
100012740:	49 89 c7	movq	%rax, %r15
100012743:	48 89 c7	movq	%rax, %rdi
100012746:	e8 7b f9 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001274b:	48 3b 05 ae 59 04 00	cmpq	285102(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100012752:	74 11	je	0x100012765
100012754:	45 31 f6	xorl	%r14d, %r14d
100012757:	4c 89 f0	movq	%r14, %rax
10001275a:	48 83 c4 08	addq	$8, %rsp
10001275e:	5b	popq	%rbx
10001275f:	41 5e	popq	%r14
100012761:	41 5f	popq	%r15
100012763:	5d	popq	%rbp
100012764:	c3	retq
100012765:	48 8d 35 d0 6a 03 00	leaq	223952(%rip), %rsi ## literal pool for: "_executablePath"
10001276c:	48 89 df	movq	%rbx, %rdi
10001276f:	e8 e6 f8 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100012774:	48 85 c0	testq	%rax, %rax
100012777:	74 db	je	0x100012754
100012779:	bf 01 00 00 00	movl	$1, %edi
10001277e:	48 89 c6	movq	%rax, %rsi
100012781:	e8 20 f8 02 00	callq	0x100041fa6 ## symbol stub for: _xpc_bundle_create_from_origin
100012786:	49 89 c6	movq	%rax, %r14
100012789:	48 89 c7	movq	%rax, %rdi
10001278c:	4c 89 fe	movq	%r15, %rsi
10001278f:	31 d2	xorl	%edx, %edx
100012791:	e8 34 f8 02 00	callq	0x100041fca ## symbol stub for: _xpc_bundle_populate
100012796:	eb bf	jmp	0x100012757
100012798:	55	pushq	%rbp
100012799:	48 89 e5	movq	%rsp, %rbp
10001279c:	41 57	pushq	%r15
10001279e:	41 56	pushq	%r14
1000127a0:	41 55	pushq	%r13
1000127a2:	41 54	pushq	%r12
1000127a4:	53	pushq	%rbx
1000127a5:	50	pushq	%rax
1000127a6:	49 89 f6	movq	%rsi, %r14
1000127a9:	49 89 fc	movq	%rdi, %r12
1000127ac:	48 89 d7	movq	%rdx, %rdi
1000127af:	e8 72 f9 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000127b4:	48 85 c0	testq	%rax, %rax
1000127b7:	74 44	je	0x1000127fd
1000127b9:	48 89 c3	movq	%rax, %rbx
1000127bc:	49 8b 7c 24 20	movq	32(%r12), %rdi
1000127c1:	4c 89 f6	movq	%r14, %rsi
1000127c4:	e8 a3 f8 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000127c9:	49 89 c5	movq	%rax, %r13
1000127cc:	49 8b 7c 24 20	movq	32(%r12), %rdi
1000127d1:	48 89 de	movq	%rbx, %rsi
1000127d4:	e8 93 f8 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000127d9:	49 89 c7	movq	%rax, %r15
1000127dc:	4d 85 ed	testq	%r13, %r13
1000127df:	75 34	jne	0x100012815
1000127e1:	4d 85 ff	testq	%r15, %r15
1000127e4:	74 17	je	0x1000127fd
1000127e6:	4d 85 ed	testq	%r13, %r13
1000127e9:	75 19	jne	0x100012804
1000127eb:	49 8b 7c 24 20	movq	32(%r12), %rdi
1000127f0:	4c 89 f6	movq	%r14, %rsi
1000127f3:	4c 89 fa	movq	%r15, %rdx
1000127f6:	e8 b3 f8 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000127fb:	eb 07	jmp	0x100012804
1000127fd:	31 ff	xorl	%edi, %edi
1000127ff:	e8 9e ef 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100012804:	b0 01	movb	$1, %al
100012806:	48 83 c4 08	addq	$8, %rsp
10001280a:	5b	popq	%rbx
10001280b:	41 5c	popq	%r12
10001280d:	41 5d	popq	%r13
10001280f:	41 5e	popq	%r14
100012811:	41 5f	popq	%r15
100012813:	5d	popq	%rbp
100012814:	c3	retq
100012815:	31 ff	xorl	%edi, %edi
100012817:	e8 86 ef 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001281c:	eb c3	jmp	0x1000127e1
10001281e:	55	pushq	%rbp
10001281f:	48 89 e5	movq	%rsp, %rbp
100012822:	41 57	pushq	%r15
100012824:	41 56	pushq	%r14
100012826:	53	pushq	%rbx
100012827:	50	pushq	%rax
100012828:	49 89 f6	movq	%rsi, %r14
10001282b:	49 89 ff	movq	%rdi, %r15
10001282e:	48 89 d7	movq	%rdx, %rdi
100012831:	e8 ec fe ff ff	callq	0x100012722
100012836:	48 85 c0	testq	%rax, %rax
100012839:	74 1a	je	0x100012855
10001283b:	48 89 c3	movq	%rax, %rbx
10001283e:	49 8b 7f 20	movq	32(%r15), %rdi
100012842:	4c 89 f6	movq	%r14, %rsi
100012845:	48 89 c2	movq	%rax, %rdx
100012848:	e8 61 f8 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001284d:	48 89 df	movq	%rbx, %rdi
100012850:	e8 a7 f8 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012855:	b0 01	movb	$1, %al
100012857:	48 83 c4 08	addq	$8, %rsp
10001285b:	5b	popq	%rbx
10001285c:	41 5e	popq	%r14
10001285e:	41 5f	popq	%r15
100012860:	5d	popq	%rbp
100012861:	c3	retq
100012862:	48 85 ff	testq	%rdi, %rdi
100012865:	74 06	je	0x10001286d
100012867:	48 89 f8	movq	%rdi, %rax
10001286a:	31 d2	xorl	%edx, %edx
10001286c:	c3	retq
10001286d:	55	pushq	%rbp
10001286e:	48 89 e5	movq	%rsp, %rbp
100012871:	e8 a6 d6 02 00	callq	0x10003ff1c
100012876:	85 ff	testl	%edi, %edi
100012878:	74 05	je	0x10001287f
10001287a:	31 c0	xorl	%eax, %eax
10001287c:	89 fa	movl	%edi, %edx
10001287e:	c3	retq
10001287f:	55	pushq	%rbp
100012880:	48 89 e5	movq	%rsp, %rbp
100012883:	e8 a6 d6 02 00	callq	0x10003ff2e
100012888:	55	pushq	%rbp
100012889:	48 89 e5	movq	%rsp, %rbp
10001288c:	41 57	pushq	%r15
10001288e:	41 56	pushq	%r14
100012890:	41 54	pushq	%r12
100012892:	53	pushq	%rbx
100012893:	49 89 cf	movq	%rcx, %r15
100012896:	49 89 d4	movq	%rdx, %r12
100012899:	49 89 fe	movq	%rdi, %r14
10001289c:	bf 18 00 00 00	movl	$24, %edi
1000128a1:	e8 3f ac ff ff	callq	0x10000d4e5
1000128a6:	48 89 c3	movq	%rax, %rbx
1000128a9:	4c 89 30	movq	%r14, (%rax)
1000128ac:	4c 89 60 08	movq	%r12, 8(%rax)
1000128b0:	4c 89 78 10	movq	%r15, 16(%rax)
1000128b4:	4d 85 f6	testq	%r14, %r14
1000128b7:	74 09	je	0x1000128c2
1000128b9:	4c 89 f7	movq	%r14, %rdi
1000128bc:	ff 15 f6 58 04 00	callq	*284918(%rip) ## literal pool symbol address: _objc_retain
1000128c2:	48 89 d8	movq	%rbx, %rax
1000128c5:	5b	popq	%rbx
1000128c6:	41 5c	popq	%r12
1000128c8:	41 5e	popq	%r14
1000128ca:	41 5f	popq	%r15
1000128cc:	5d	popq	%rbp
1000128cd:	c3	retq
1000128ce:	55	pushq	%rbp
1000128cf:	48 89 e5	movq	%rsp, %rbp
1000128d2:	53	pushq	%rbx
1000128d3:	50	pushq	%rax
1000128d4:	48 89 fb	movq	%rdi, %rbx
1000128d7:	ff 15 db 58 04 00	callq	*284891(%rip) ## literal pool symbol address: _objc_retain
1000128dd:	48 89 d8	movq	%rbx, %rax
1000128e0:	48 83 c4 08	addq	$8, %rsp
1000128e4:	5b	popq	%rbx
1000128e5:	5d	popq	%rbp
1000128e6:	c3	retq
1000128e7:	55	pushq	%rbp
1000128e8:	48 89 e5	movq	%rsp, %rbp
1000128eb:	41 57	pushq	%r15
1000128ed:	41 56	pushq	%r14
1000128ef:	41 54	pushq	%r12
1000128f1:	53	pushq	%rbx
1000128f2:	49 89 d7	movq	%rdx, %r15
1000128f5:	49 89 f4	movq	%rsi, %r12
1000128f8:	49 89 fe	movq	%rdi, %r14
1000128fb:	bf 18 00 00 00	movl	$24, %edi
100012900:	e8 e0 ab ff ff	callq	0x10000d4e5
100012905:	48 89 c3	movq	%rax, %rbx
100012908:	4c 89 30	movq	%r14, (%rax)
10001290b:	4c 89 60 08	movq	%r12, 8(%rax)
10001290f:	4c 89 78 10	movq	%r15, 16(%rax)
100012913:	4d 85 f6	testq	%r14, %r14
100012916:	74 08	je	0x100012920
100012918:	4c 89 f7	movq	%r14, %rdi
10001291b:	e8 e2 f7 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100012920:	48 89 d8	movq	%rbx, %rax
100012923:	5b	popq	%rbx
100012924:	41 5c	popq	%r12
100012926:	41 5e	popq	%r14
100012928:	41 5f	popq	%r15
10001292a:	5d	popq	%rbp
10001292b:	c3	retq
10001292c:	55	pushq	%rbp
10001292d:	48 89 e5	movq	%rsp, %rbp
100012930:	53	pushq	%rbx
100012931:	50	pushq	%rax
100012932:	48 89 fb	movq	%rdi, %rbx
100012935:	48 8b 3f	movq	(%rdi), %rdi
100012938:	48 85 ff	testq	%rdi, %rdi
10001293b:	74 06	je	0x100012943
10001293d:	ff 15 6d 58 04 00	callq	*284781(%rip) ## literal pool symbol address: _objc_release
100012943:	48 89 df	movq	%rbx, %rdi
100012946:	48 83 c4 08	addq	$8, %rsp
10001294a:	5b	popq	%rbx
10001294b:	5d	popq	%rbp
10001294c:	e9 df f0 02 00	jmp	0x100041a30 ## symbol stub for: _free
100012951:	55	pushq	%rbp
100012952:	48 89 e5	movq	%rsp, %rbp
100012955:	5d	popq	%rbp
100012956:	ff 25 54 58 04 00	jmpq	*284756(%rip) ## literal pool symbol address: _objc_release
10001295c:	55	pushq	%rbp
10001295d:	48 89 e5	movq	%rsp, %rbp
100012960:	53	pushq	%rbx
100012961:	50	pushq	%rax
100012962:	48 89 fb	movq	%rdi, %rbx
100012965:	48 8b 3f	movq	(%rdi), %rdi
100012968:	48 85 ff	testq	%rdi, %rdi
10001296b:	74 05	je	0x100012972
10001296d:	e8 8a f7 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100012972:	48 89 df	movq	%rbx, %rdi
100012975:	48 83 c4 08	addq	$8, %rsp
100012979:	5b	popq	%rbx
10001297a:	5d	popq	%rbp
10001297b:	e9 b0 f0 02 00	jmp	0x100041a30 ## symbol stub for: _free
100012980:	55	pushq	%rbp
100012981:	48 89 e5	movq	%rsp, %rbp
100012984:	41 57	pushq	%r15
100012986:	41 56	pushq	%r14
100012988:	41 55	pushq	%r13
10001298a:	41 54	pushq	%r12
10001298c:	53	pushq	%rbx
10001298d:	50	pushq	%rax
10001298e:	48 89 55 d0	movq	%rdx, -48(%rbp)
100012992:	49 89 f7	movq	%rsi, %r15
100012995:	49 89 fe	movq	%rdi, %r14
100012998:	85 c9	testl	%ecx, %ecx
10001299a:	75 2a	jne	0x1000129c6
10001299c:	45 31 ed	xorl	%r13d, %r13d
10001299f:	4c 8d 25 4a 81 04 00	leaq	295242(%rip), %r12
1000129a6:	31 db	xorl	%ebx, %ebx
1000129a8:	4a 8b 34 23	movq	(%rbx,%r12), %rsi
1000129ac:	4c 89 f7	movq	%r14, %rdi
1000129af:	e8 78 f4 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000129b4:	85 c0	testl	%eax, %eax
1000129b6:	0f 84 83 00 00 00	je	0x100012a3f
1000129bc:	48 83 c3 08	addq	$8, %rbx
1000129c0:	48 83 fb 10	cmpq	$16, %rbx
1000129c4:	75 e2	jne	0x1000129a8
1000129c6:	4c 89 f7	movq	%r14, %rdi
1000129c9:	e8 88 f4 02 00	callq	0x100041e56 ## symbol stub for: _strlen
1000129ce:	49 89 c5	movq	%rax, %r13
1000129d1:	48 8d 58 01	leaq	1(%rax), %rbx
1000129d5:	4c 89 ff	movq	%r15, %rdi
1000129d8:	e8 79 f4 02 00	callq	0x100041e56 ## symbol stub for: _strlen
1000129dd:	49 89 c4	movq	%rax, %r12
1000129e0:	49 01 dc	addq	%rbx, %r12
1000129e3:	0f 92 c0	setb	%al
1000129e6:	31 d2	xorl	%edx, %edx
1000129e8:	49 ff c4	incq	%r12
1000129eb:	0f 94 c2	sete	%dl
1000129ee:	48 89 d1	movq	%rdx, %rcx
1000129f1:	48 f7 d9	negq	%rcx
1000129f4:	48 31 ca	xorq	%rcx, %rdx
1000129f7:	0f 95 c2	setne	%dl
1000129fa:	49 ff c5	incq	%r13
1000129fd:	74 52	je	0x100012a51
1000129ff:	84 c0	testb	%al, %al
100012a01:	75 4e	jne	0x100012a51
100012a03:	84 d2	testb	%dl, %dl
100012a05:	75 4a	jne	0x100012a51
100012a07:	48 85 c9	testq	%rcx, %rcx
100012a0a:	78 45	js	0x100012a51
100012a0c:	4c 89 e7	movq	%r12, %rdi
100012a0f:	48 83 c7 18	addq	$24, %rdi
100012a13:	72 3c	jb	0x100012a51
100012a15:	e8 cb aa ff ff	callq	0x10000d4e5
100012a1a:	49 89 c5	movq	%rax, %r13
100012a1d:	48 8d 78 18	leaq	24(%rax), %rdi
100012a21:	48 8d 15 32 68 03 00	leaq	223282(%rip), %rdx ## literal pool for: "%s=%s"
100012a28:	4c 89 e6	movq	%r12, %rsi
100012a2b:	4c 89 f1	movq	%r14, %rcx
100012a2e:	4d 89 f8	movq	%r15, %r8
100012a31:	31 c0	xorl	%eax, %eax
100012a33:	e8 ca f3 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
100012a38:	48 8b 45 d0	movq	-48(%rbp), %rax
100012a3c:	4c 89 20	movq	%r12, (%rax)
100012a3f:	4c 89 e8	movq	%r13, %rax
100012a42:	48 83 c4 08	addq	$8, %rsp
100012a46:	5b	popq	%rbx
100012a47:	41 5c	popq	%r12
100012a49:	41 5d	popq	%r13
100012a4b:	41 5e	popq	%r14
100012a4d:	41 5f	popq	%r15
100012a4f:	5d	popq	%rbp
100012a50:	c3	retq
100012a51:	0f 0b	ud2
100012a53:	55	pushq	%rbp
100012a54:	48 89 e5	movq	%rsp, %rbp
100012a57:	41 57	pushq	%r15
100012a59:	41 56	pushq	%r14
100012a5b:	41 54	pushq	%r12
100012a5d:	53	pushq	%rbx
100012a5e:	49 89 f6	movq	%rsi, %r14
100012a61:	49 89 ff	movq	%rdi, %r15
100012a64:	49 83 c7 18	addq	$24, %r15
100012a68:	4c 89 ff	movq	%r15, %rdi
100012a6b:	e8 e6 f3 02 00	callq	0x100041e56 ## symbol stub for: _strlen
100012a70:	48 89 c3	movq	%rax, %rbx
100012a73:	48 ff c3	incq	%rbx
100012a76:	48 89 df	movq	%rbx, %rdi
100012a79:	48 83 c7 18	addq	$24, %rdi
100012a7d:	72 2f	jb	0x100012aae
100012a7f:	e8 61 aa ff ff	callq	0x10000d4e5
100012a84:	49 89 c4	movq	%rax, %r12
100012a87:	48 8d 78 18	leaq	24(%rax), %rdi
100012a8b:	48 8d 15 84 4b 03 00	leaq	215940(%rip), %rdx ## literal pool for: "%s"
100012a92:	48 89 de	movq	%rbx, %rsi
100012a95:	4c 89 f9	movq	%r15, %rcx
100012a98:	31 c0	xorl	%eax, %eax
100012a9a:	e8 63 f3 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
100012a9f:	49 89 1e	movq	%rbx, (%r14)
100012aa2:	4c 89 e0	movq	%r12, %rax
100012aa5:	5b	popq	%rbx
100012aa6:	41 5c	popq	%r12
100012aa8:	41 5e	popq	%r14
100012aaa:	41 5f	popq	%r15
100012aac:	5d	popq	%rbp
100012aad:	c3	retq
100012aae:	0f 0b	ud2
100012ab0:	55	pushq	%rbp
100012ab1:	48 89 e5	movq	%rsp, %rbp
100012ab4:	41 57	pushq	%r15
100012ab6:	41 56	pushq	%r14
100012ab8:	41 54	pushq	%r12
100012aba:	53	pushq	%rbx
100012abb:	49 89 d7	movq	%rdx, %r15
100012abe:	49 89 f6	movq	%rsi, %r14
100012ac1:	48 89 fb	movq	%rdi, %rbx
100012ac4:	48 83 c3 18	addq	$24, %rbx
100012ac8:	48 89 df	movq	%rbx, %rdi
100012acb:	be 3d 00 00 00	movl	$61, %esi
100012ad0:	e8 99 f3 02 00	callq	0x100041e6e ## symbol stub for: _strrchr
100012ad5:	49 89 c4	movq	%rax, %r12
100012ad8:	c6 00 00	movb	$0, (%rax)
100012adb:	4c 8d 40 01	leaq	1(%rax), %r8
100012adf:	48 8d 15 7a 67 03 00	leaq	223098(%rip), %rdx ## literal pool for: "%s => %s"
100012ae6:	4c 89 ff	movq	%r15, %rdi
100012ae9:	4c 89 f6	movq	%r14, %rsi
100012aec:	48 89 d9	movq	%rbx, %rcx
100012aef:	31 c0	xorl	%eax, %eax
100012af1:	e8 7c 61 02 00	callq	0x100038c72
100012af6:	41 c6 04 24 3d	movb	$61, (%r12)
100012afb:	5b	popq	%rbx
100012afc:	41 5c	popq	%r12
100012afe:	41 5e	popq	%r14
100012b00:	41 5f	popq	%r15
100012b02:	5d	popq	%rbp
100012b03:	c3	retq
100012b04:	55	pushq	%rbp
100012b05:	48 89 e5	movq	%rsp, %rbp
100012b08:	41 57	pushq	%r15
100012b0a:	41 56	pushq	%r14
100012b0c:	53	pushq	%rbx
100012b0d:	50	pushq	%rax
100012b0e:	49 89 f6	movq	%rsi, %r14
100012b11:	48 89 fb	movq	%rdi, %rbx
100012b14:	48 83 c3 18	addq	$24, %rbx
100012b18:	48 89 df	movq	%rbx, %rdi
100012b1b:	be 3d 00 00 00	movl	$61, %esi
100012b20:	e8 01 f3 02 00	callq	0x100041e26 ## symbol stub for: _strchr
100012b25:	48 85 c0	testq	%rax, %rax
100012b28:	74 1c	je	0x100012b46
100012b2a:	49 89 c7	movq	%rax, %r15
100012b2d:	c6 00 00	movb	$0, (%rax)
100012b30:	48 89 df	movq	%rbx, %rdi
100012b33:	4c 89 f6	movq	%r14, %rsi
100012b36:	e8 f1 f2 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
100012b3b:	85 c0	testl	%eax, %eax
100012b3d:	0f 94 c0	sete	%al
100012b40:	41 c6 07 3d	movb	$61, (%r15)
100012b44:	eb 02	jmp	0x100012b48
100012b46:	31 c0	xorl	%eax, %eax
100012b48:	48 83 c4 08	addq	$8, %rsp
100012b4c:	5b	popq	%rbx
100012b4d:	41 5e	popq	%r14
100012b4f:	41 5f	popq	%r15
100012b51:	5d	popq	%rbp
100012b52:	c3	retq
100012b53:	55	pushq	%rbp
100012b54:	48 89 e5	movq	%rsp, %rbp
100012b57:	48 83 c7 18	addq	$24, %rdi
100012b5b:	be 3d 00 00 00	movl	$61, %esi
100012b60:	e8 c1 f2 02 00	callq	0x100041e26 ## symbol stub for: _strchr
100012b65:	48 8d 48 01	leaq	1(%rax), %rcx
100012b69:	48 85 c0	testq	%rax, %rax
100012b6c:	48 0f 45 c1	cmovneq	%rcx, %rax
100012b70:	5d	popq	%rbp
100012b71:	c3	retq
100012b72:	55	pushq	%rbp
100012b73:	48 89 e5	movq	%rsp, %rbp
100012b76:	5d	popq	%rbp
100012b77:	e9 b4 ee 02 00	jmp	0x100041a30 ## symbol stub for: _free
100012b7c:	55	pushq	%rbp
100012b7d:	48 89 e5	movq	%rsp, %rbp
100012b80:	41 57	pushq	%r15
100012b82:	41 56	pushq	%r14
100012b84:	53	pushq	%rbx
100012b85:	50	pushq	%rax
100012b86:	49 89 ff	movq	%rdi, %r15
100012b89:	48 8d 35 d9 66 03 00	leaq	222937(%rip), %rsi ## literal pool for: "LD_LIBRARY_PATH"
100012b90:	e8 97 f2 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
100012b95:	41 b6 01	movb	$1, %r14b
100012b98:	85 c0	testl	%eax, %eax
100012b9a:	74 57	je	0x100012bf3
100012b9c:	48 8d 35 d6 66 03 00	leaq	222934(%rip), %rsi ## literal pool for: "DYLD_"
100012ba3:	4c 89 ff	movq	%r15, %rdi
100012ba6:	e8 03 c7 ff ff	callq	0x10000f2ae
100012bab:	84 c0	testb	%al, %al
100012bad:	74 41	je	0x100012bf0
100012baf:	48 8d 35 c9 66 03 00	leaq	222921(%rip), %rsi ## literal pool for: "DYLD_PRINT_"
100012bb6:	4c 89 ff	movq	%r15, %rdi
100012bb9:	e8 f0 c6 ff ff	callq	0x10000f2ae
100012bbe:	84 c0	testb	%al, %al
100012bc0:	74 31	je	0x100012bf3
100012bc2:	31 db	xorl	%ebx, %ebx
100012bc4:	4c 8d 35 45 7f 04 00	leaq	294725(%rip), %r14
100012bcb:	4a 8b 34 33	movq	(%rbx,%r14), %rsi
100012bcf:	4c 89 ff	movq	%r15, %rdi
100012bd2:	e8 55 f2 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
100012bd7:	85 c0	testl	%eax, %eax
100012bd9:	74 0d	je	0x100012be8
100012bdb:	48 8d 4b 08	leaq	8(%rbx), %rcx
100012bdf:	48 83 fb 50	cmpq	$80, %rbx
100012be3:	48 89 cb	movq	%rcx, %rbx
100012be6:	75 e3	jne	0x100012bcb
100012be8:	85 c0	testl	%eax, %eax
100012bea:	41 0f 95 c6	setne	%r14b
100012bee:	eb 03	jmp	0x100012bf3
100012bf0:	45 31 f6	xorl	%r14d, %r14d
100012bf3:	44 89 f0	movl	%r14d, %eax
100012bf6:	48 83 c4 08	addq	$8, %rsp
100012bfa:	5b	popq	%rbx
100012bfb:	41 5e	popq	%r14
100012bfd:	41 5f	popq	%r15
100012bff:	5d	popq	%rbp
100012c00:	c3	retq
100012c01:	55	pushq	%rbp
100012c02:	48 89 e5	movq	%rsp, %rbp
100012c05:	41 57	pushq	%r15
100012c07:	41 56	pushq	%r14
100012c09:	53	pushq	%rbx
100012c0a:	50	pushq	%rax
100012c0b:	41 89 f6	movl	%esi, %r14d
100012c0e:	41 89 ff	movl	%edi, %r15d
100012c11:	bf 18 00 00 00	movl	$24, %edi
100012c16:	e8 ca a8 ff ff	callq	0x10000d4e5
100012c1b:	48 89 c3	movq	%rax, %rbx
100012c1e:	44 89 ff	movl	%r15d, %edi
100012c21:	e8 f7 70 ff ff	callq	0x100009d1d
100012c26:	85 c0	testl	%eax, %eax
100012c28:	75 16	jne	0x100012c40
100012c2a:	44 89 7b 10	movl	%r15d, 16(%rbx)
100012c2e:	44 89 73 14	movl	%r14d, 20(%rbx)
100012c32:	48 89 d8	movq	%rbx, %rax
100012c35:	48 83 c4 08	addq	$8, %rsp
100012c39:	5b	popq	%rbx
100012c3a:	41 5e	popq	%r14
100012c3c:	41 5f	popq	%r15
100012c3e:	5d	popq	%rbp
100012c3f:	c3	retq
100012c40:	48 63 f8	movslq	%eax, %rdi
100012c43:	e8 5a eb 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100012c48:	eb e0	jmp	0x100012c2a
100012c4a:	55	pushq	%rbp
100012c4b:	48 89 e5	movq	%rsp, %rbp
100012c4e:	53	pushq	%rbx
100012c4f:	50	pushq	%rax
100012c50:	48 89 fb	movq	%rdi, %rbx
100012c53:	8b 7f 10	movl	16(%rdi), %edi
100012c56:	e8 de 70 ff ff	callq	0x100009d39
100012c5b:	85 c0	testl	%eax, %eax
100012c5d:	75 0e	jne	0x100012c6d
100012c5f:	48 89 df	movq	%rbx, %rdi
100012c62:	48 83 c4 08	addq	$8, %rsp
100012c66:	5b	popq	%rbx
100012c67:	5d	popq	%rbp
100012c68:	e9 c3 ed 02 00	jmp	0x100041a30 ## symbol stub for: _free
100012c6d:	48 63 f8	movslq	%eax, %rdi
100012c70:	e8 2d eb 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100012c75:	eb e8	jmp	0x100012c5f
100012c77:	55	pushq	%rbp
100012c78:	48 89 e5	movq	%rsp, %rbp
100012c7b:	5d	popq	%rbp
100012c7c:	e9 8f ef 02 00	jmp	0x100041c10 ## symbol stub for: _object_getClass
100012c81:	55	pushq	%rbp
100012c82:	48 89 e5	movq	%rsp, %rbp
100012c85:	48 89 f8	movq	%rdi, %rax
100012c88:	5d	popq	%rbp
100012c89:	c3	retq
100012c8a:	55	pushq	%rbp
100012c8b:	48 89 e5	movq	%rsp, %rbp
100012c8e:	5d	popq	%rbp
100012c8f:	c3	retq
100012c90:	55	pushq	%rbp
100012c91:	48 89 e5	movq	%rsp, %rbp
100012c94:	53	pushq	%rbx
100012c95:	50	pushq	%rax
100012c96:	48 8d 5f 18	leaq	24(%rdi), %rbx
100012c9a:	48 8b 3d 4f ed 04 00	movq	322895(%rip), %rdi ## Objc class ref: OS_launch_array
100012ca1:	e8 64 ef 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012ca6:	48 89 c7	movq	%rax, %rdi
100012ca9:	48 89 de	movq	%rbx, %rsi
100012cac:	48 83 c4 08	addq	$8, %rsp
100012cb0:	5b	popq	%rbx
100012cb1:	5d	popq	%rbp
100012cb2:	e9 7b eb 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012cb7:	55	pushq	%rbp
100012cb8:	48 89 e5	movq	%rsp, %rbp
100012cbb:	53	pushq	%rbx
100012cbc:	50	pushq	%rax
100012cbd:	48 8d 5f 10	leaq	16(%rdi), %rbx
100012cc1:	48 8b 3d 30 ed 04 00	movq	322864(%rip), %rdi ## Objc class ref: OS_launch_dictionary
100012cc8:	e8 3d ef 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012ccd:	48 89 c7	movq	%rax, %rdi
100012cd0:	48 89 de	movq	%rbx, %rsi
100012cd3:	48 83 c4 08	addq	$8, %rsp
100012cd7:	5b	popq	%rbx
100012cd8:	5d	popq	%rbp
100012cd9:	e9 54 eb 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012cde:	55	pushq	%rbp
100012cdf:	48 89 e5	movq	%rsp, %rbp
100012ce2:	53	pushq	%rbx
100012ce3:	50	pushq	%rax
100012ce4:	48 8d 9f 08 04 00 00	leaq	1032(%rdi), %rbx
100012ceb:	48 8b 3d 0e ed 04 00	movq	322830(%rip), %rdi ## Objc class ref: OS_launch_domain
100012cf2:	e8 13 ef 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012cf7:	48 89 c7	movq	%rax, %rdi
100012cfa:	48 89 de	movq	%rbx, %rsi
100012cfd:	48 83 c4 08	addq	$8, %rsp
100012d01:	5b	popq	%rbx
100012d02:	5d	popq	%rbp
100012d03:	e9 2a eb 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012d08:	55	pushq	%rbp
100012d09:	48 89 e5	movq	%rsp, %rbp
100012d0c:	53	pushq	%rbx
100012d0d:	50	pushq	%rax
100012d0e:	48 8d 9f 80 00 00 00	leaq	128(%rdi), %rbx
100012d15:	48 8b 3d ec ec 04 00	movq	322796(%rip), %rdi ## Objc class ref: OS_launch_domain_aggregate_io
100012d1c:	e8 e9 ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012d21:	48 89 c7	movq	%rax, %rdi
100012d24:	48 89 de	movq	%rbx, %rsi
100012d27:	48 83 c4 08	addq	$8, %rsp
100012d2b:	5b	popq	%rbx
100012d2c:	5d	popq	%rbp
100012d2d:	e9 00 eb 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012d32:	55	pushq	%rbp
100012d33:	48 89 e5	movq	%rsp, %rbp
100012d36:	53	pushq	%rbx
100012d37:	50	pushq	%rax
100012d38:	48 8d 5f 58	leaq	88(%rdi), %rbx
100012d3c:	48 8b 3d cd ec 04 00	movq	322765(%rip), %rdi ## Objc class ref: OS_launch_domain_io
100012d43:	e8 c2 ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012d48:	48 89 c7	movq	%rax, %rdi
100012d4b:	48 89 de	movq	%rbx, %rsi
100012d4e:	48 83 c4 08	addq	$8, %rsp
100012d52:	5b	popq	%rbx
100012d53:	5d	popq	%rbp
100012d54:	e9 d9 ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012d59:	55	pushq	%rbp
100012d5a:	48 89 e5	movq	%rsp, %rbp
100012d5d:	53	pushq	%rbx
100012d5e:	50	pushq	%rax
100012d5f:	48 8d 9f 88 00 00 00	leaq	136(%rdi), %rbx
100012d66:	48 8b 3d ab ec 04 00	movq	322731(%rip), %rdi ## Objc class ref: OS_launch_endpoint
100012d6d:	e8 98 ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012d72:	48 89 c7	movq	%rax, %rdi
100012d75:	48 89 de	movq	%rbx, %rsi
100012d78:	48 83 c4 08	addq	$8, %rsp
100012d7c:	5b	popq	%rbx
100012d7d:	5d	popq	%rbp
100012d7e:	e9 af ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012d83:	55	pushq	%rbp
100012d84:	48 89 e5	movq	%rsp, %rbp
100012d87:	53	pushq	%rbx
100012d88:	50	pushq	%rax
100012d89:	48 8d 5f 30	leaq	48(%rdi), %rbx
100012d8d:	48 8b 3d 8c ec 04 00	movq	322700(%rip), %rdi ## Objc class ref: OS_launch_event_provider
100012d94:	e8 71 ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012d99:	48 89 c7	movq	%rax, %rdi
100012d9c:	48 89 de	movq	%rbx, %rsi
100012d9f:	48 83 c4 08	addq	$8, %rsp
100012da3:	5b	popq	%rbx
100012da4:	5d	popq	%rbp
100012da5:	e9 88 ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012daa:	55	pushq	%rbp
100012dab:	48 89 e5	movq	%rsp, %rbp
100012dae:	53	pushq	%rbx
100012daf:	50	pushq	%rax
100012db0:	48 8d 5f 48	leaq	72(%rdi), %rbx
100012db4:	48 8b 3d 6d ec 04 00	movq	322669(%rip), %rdi ## Objc class ref: OS_launch_event_realm
100012dbb:	e8 4a ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012dc0:	48 89 c7	movq	%rax, %rdi
100012dc3:	48 89 de	movq	%rbx, %rsi
100012dc6:	48 83 c4 08	addq	$8, %rsp
100012dca:	5b	popq	%rbx
100012dcb:	5d	popq	%rbp
100012dcc:	e9 61 ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012dd1:	55	pushq	%rbp
100012dd2:	48 89 e5	movq	%rsp, %rbp
100012dd5:	53	pushq	%rbx
100012dd6:	50	pushq	%rax
100012dd7:	48 8d 5f 10	leaq	16(%rdi), %rbx
100012ddb:	48 8b 3d 4e ec 04 00	movq	322638(%rip), %rdi ## Objc class ref: OS_launch_event_stream
100012de2:	e8 23 ee 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012de7:	48 89 c7	movq	%rax, %rdi
100012dea:	48 89 de	movq	%rbx, %rsi
100012ded:	48 83 c4 08	addq	$8, %rsp
100012df1:	5b	popq	%rbx
100012df2:	5d	popq	%rbp
100012df3:	e9 3a ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012df8:	55	pushq	%rbp
100012df9:	48 89 e5	movq	%rsp, %rbp
100012dfc:	53	pushq	%rbx
100012dfd:	50	pushq	%rax
100012dfe:	48 8d 5f 48	leaq	72(%rdi), %rbx
100012e02:	48 8b 3d 2f ec 04 00	movq	322607(%rip), %rdi ## Objc class ref: OS_launch_event_subscription
100012e09:	e8 fc ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012e0e:	48 89 c7	movq	%rax, %rdi
100012e11:	48 89 de	movq	%rbx, %rsi
100012e14:	48 83 c4 08	addq	$8, %rsp
100012e18:	5b	popq	%rbx
100012e19:	5d	popq	%rbp
100012e1a:	e9 13 ea 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012e1f:	55	pushq	%rbp
100012e20:	48 89 e5	movq	%rsp, %rbp
100012e23:	53	pushq	%rbx
100012e24:	50	pushq	%rax
100012e25:	48 8d 9f 00 01 00 00	leaq	256(%rdi), %rbx
100012e2c:	48 8b 3d 0d ec 04 00	movq	322573(%rip), %rdi ## Objc class ref: OS_launch_io
100012e33:	e8 d2 ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012e38:	48 89 c7	movq	%rax, %rdi
100012e3b:	48 89 de	movq	%rbx, %rsi
100012e3e:	48 83 c4 08	addq	$8, %rsp
100012e42:	5b	popq	%rbx
100012e43:	5d	popq	%rbp
100012e44:	e9 e9 e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012e49:	55	pushq	%rbp
100012e4a:	48 89 e5	movq	%rsp, %rbp
100012e4d:	48 8b 3d ec eb 04 00	movq	322540(%rip), %rdi ## Objc class ref: OS_launch_io
100012e54:	5d	popq	%rbp
100012e55:	e9 b0 ed 02 00	jmp	0x100041c0a ## symbol stub for: _objc_opt_class
100012e5a:	55	pushq	%rbp
100012e5b:	48 89 e5	movq	%rsp, %rbp
100012e5e:	53	pushq	%rbx
100012e5f:	50	pushq	%rax
100012e60:	48 8d 5f 48	leaq	72(%rdi), %rbx
100012e64:	48 8b 3d dd eb 04 00	movq	322525(%rip), %rdi ## Objc class ref: OS_launch_log
100012e6b:	e8 9a ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012e70:	48 89 c7	movq	%rax, %rdi
100012e73:	48 89 de	movq	%rbx, %rsi
100012e76:	48 83 c4 08	addq	$8, %rsp
100012e7a:	5b	popq	%rbx
100012e7b:	5d	popq	%rbp
100012e7c:	e9 b1 e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012e81:	55	pushq	%rbp
100012e82:	48 89 e5	movq	%rsp, %rbp
100012e85:	53	pushq	%rbx
100012e86:	50	pushq	%rax
100012e87:	48 8d 9f 10 05 00 00	leaq	1296(%rdi), %rbx
100012e8e:	48 8b 3d bb eb 04 00	movq	322491(%rip), %rdi ## Objc class ref: OS_launch_service
100012e95:	e8 70 ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012e9a:	48 89 c7	movq	%rax, %rdi
100012e9d:	48 89 de	movq	%rbx, %rsi
100012ea0:	48 83 c4 08	addq	$8, %rsp
100012ea4:	5b	popq	%rbx
100012ea5:	5d	popq	%rbp
100012ea6:	e9 87 e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012eab:	55	pushq	%rbp
100012eac:	48 89 e5	movq	%rsp, %rbp
100012eaf:	53	pushq	%rbx
100012eb0:	50	pushq	%rax
100012eb1:	48 8d 5f 38	leaq	56(%rdi), %rbx
100012eb5:	48 8b 3d 9c eb 04 00	movq	322460(%rip), %rdi ## Objc class ref: OS_launch_service_stub
100012ebc:	e8 49 ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012ec1:	48 89 c7	movq	%rax, %rdi
100012ec4:	48 89 de	movq	%rbx, %rsi
100012ec7:	48 83 c4 08	addq	$8, %rsp
100012ecb:	5b	popq	%rbx
100012ecc:	5d	popq	%rbp
100012ecd:	e9 60 e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012ed2:	55	pushq	%rbp
100012ed3:	48 89 e5	movq	%rsp, %rbp
100012ed6:	53	pushq	%rbx
100012ed7:	50	pushq	%rax
100012ed8:	48 8d 9f c0 00 00 00	leaq	192(%rdi), %rbx
100012edf:	48 8b 3d 7a eb 04 00	movq	322426(%rip), %rdi ## Objc class ref: OS_launch_socket
100012ee6:	e8 1f ed 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012eeb:	48 89 c7	movq	%rax, %rdi
100012eee:	48 89 de	movq	%rbx, %rsi
100012ef1:	48 83 c4 08	addq	$8, %rsp
100012ef5:	5b	popq	%rbx
100012ef6:	5d	popq	%rbp
100012ef7:	e9 36 e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012efc:	55	pushq	%rbp
100012efd:	48 89 e5	movq	%rsp, %rbp
100012f00:	53	pushq	%rbx
100012f01:	50	pushq	%rax
100012f02:	48 8d 5f 20	leaq	32(%rdi), %rbx
100012f06:	48 8b 3d 5b eb 04 00	movq	322395(%rip), %rdi ## Objc class ref: OS_launch_cache
100012f0d:	e8 f8 ec 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012f12:	48 89 c7	movq	%rax, %rdi
100012f15:	48 89 de	movq	%rbx, %rsi
100012f18:	48 83 c4 08	addq	$8, %rsp
100012f1c:	5b	popq	%rbx
100012f1d:	5d	popq	%rbp
100012f1e:	e9 0f e9 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012f23:	55	pushq	%rbp
100012f24:	48 89 e5	movq	%rsp, %rbp
100012f27:	53	pushq	%rbx
100012f28:	50	pushq	%rax
100012f29:	48 8d 5f 10	leaq	16(%rdi), %rbx
100012f2d:	48 8b 3d 3c eb 04 00	movq	322364(%rip), %rdi ## Objc class ref: OS_launch_uint64_dictionary
100012f34:	e8 d1 ec 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012f39:	48 89 c7	movq	%rax, %rdi
100012f3c:	48 89 de	movq	%rbx, %rsi
100012f3f:	48 83 c4 08	addq	$8, %rsp
100012f43:	5b	popq	%rbx
100012f44:	5d	popq	%rbp
100012f45:	e9 e8 e8 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012f4a:	55	pushq	%rbp
100012f4b:	48 89 e5	movq	%rsp, %rbp
100012f4e:	53	pushq	%rbx
100012f4f:	50	pushq	%rax
100012f50:	48 8d 5f 38	leaq	56(%rdi), %rbx
100012f54:	48 8b 3d 1d eb 04 00	movq	322333(%rip), %rdi ## Objc class ref: OS_launch_coalition
100012f5b:	e8 aa ec 02 00	callq	0x100041c0a ## symbol stub for: _objc_opt_class
100012f60:	48 89 c7	movq	%rax, %rdi
100012f63:	48 89 de	movq	%rbx, %rsi
100012f66:	48 83 c4 08	addq	$8, %rsp
100012f6a:	5b	popq	%rbx
100012f6b:	5d	popq	%rbp
100012f6c:	e9 c1 e8 02 00	jmp	0x100041832 ## symbol stub for: _class_createInstance
100012f71:	48 85 ff	testq	%rdi, %rdi
100012f74:	74 06	je	0x100012f7c
100012f76:	48 89 f8	movq	%rdi, %rax
100012f79:	31 d2	xorl	%edx, %edx
100012f7b:	c3	retq
100012f7c:	55	pushq	%rbp
100012f7d:	48 89 e5	movq	%rsp, %rbp
100012f80:	e8 bb cf 02 00	callq	0x10003ff40
100012f85:	85 ff	testl	%edi, %edi
100012f87:	74 05	je	0x100012f8e
100012f89:	31 c0	xorl	%eax, %eax
100012f8b:	89 fa	movl	%edi, %edx
100012f8d:	c3	retq
100012f8e:	55	pushq	%rbp
100012f8f:	48 89 e5	movq	%rsp, %rbp
100012f92:	e8 bb cf 02 00	callq	0x10003ff52
100012f97:	48 85 ff	testq	%rdi, %rdi
100012f9a:	74 06	je	0x100012fa2
100012f9c:	48 89 f8	movq	%rdi, %rax
100012f9f:	31 d2	xorl	%edx, %edx
100012fa1:	c3	retq
100012fa2:	55	pushq	%rbp
100012fa3:	48 89 e5	movq	%rsp, %rbp
100012fa6:	e8 b9 cf 02 00	callq	0x10003ff64
100012fab:	85 ff	testl	%edi, %edi
100012fad:	74 05	je	0x100012fb4
100012faf:	31 c0	xorl	%eax, %eax
100012fb1:	89 fa	movl	%edi, %edx
100012fb3:	c3	retq
100012fb4:	55	pushq	%rbp
100012fb5:	48 89 e5	movq	%rsp, %rbp
100012fb8:	e8 b9 cf 02 00	callq	0x10003ff76
100012fbd:	55	pushq	%rbp
100012fbe:	48 89 e5	movq	%rsp, %rbp
100012fc1:	48 8b 46 18	movq	24(%rsi), %rax
100012fc5:	31 c9	xorl	%ecx, %ecx
100012fc7:	48 3b 42 18	cmpq	24(%rdx), %rax
100012fcb:	0f 97 c1	seta	%cl
100012fce:	b8 ff ff ff ff	movl	$4294967295, %eax
100012fd3:	0f 43 c1	cmovael	%ecx, %eax
100012fd6:	5d	popq	%rbp
100012fd7:	c3	retq
100012fd8:	55	pushq	%rbp
100012fd9:	48 89 e5	movq	%rsp, %rbp
100012fdc:	48 8b 46 18	movq	24(%rsi), %rax
100012fe0:	31 c9	xorl	%ecx, %ecx
100012fe2:	48 3b 02	cmpq	(%rdx), %rax
100012fe5:	0f 97 c1	seta	%cl
100012fe8:	b8 ff ff ff ff	movl	$4294967295, %eax
100012fed:	0f 43 c1	cmovael	%ecx, %eax
100012ff0:	5d	popq	%rbp
100012ff1:	c3	retq
100012ff2:	55	pushq	%rbp
100012ff3:	48 89 e5	movq	%rsp, %rbp
100012ff6:	41 57	pushq	%r15
100012ff8:	41 56	pushq	%r14
100012ffa:	53	pushq	%rbx
100012ffb:	50	pushq	%rax
100012ffc:	48 89 75 e0	movq	%rsi, -32(%rbp)
100013000:	81 7f 10 76 13 00 00	cmpl	$4982, 16(%rdi)
100013007:	75 7f	jne	0x100013088
100013009:	49 89 d6	movq	%rdx, %r14
10001300c:	49 89 ff	movq	%rdi, %r15
10001300f:	48 8b 7f 08	movq	8(%rdi), %rdi
100013013:	48 8d 75 e0	leaq	-32(%rbp), %rsi
100013017:	e8 50 ed 02 00	callq	0x100041d6c ## symbol stub for: _rb_tree_find_node
10001301c:	48 85 c0	testq	%rax, %rax
10001301f:	74 20	je	0x100013041
100013021:	48 89 c3	movq	%rax, %rbx
100013024:	49 8b 7f 08	movq	8(%r15), %rdi
100013028:	48 89 c6	movq	%rax, %rsi
10001302b:	e8 54 ed 02 00	callq	0x100041d84 ## symbol stub for: _rb_tree_remove_node
100013030:	48 8b 7b 20	movq	32(%rbx), %rdi
100013034:	e8 1f ec 02 00	callq	0x100041c58 ## symbol stub for: _os_release
100013039:	48 89 df	movq	%rbx, %rdi
10001303c:	e8 ef e9 02 00	callq	0x100041a30 ## symbol stub for: _free
100013041:	4d 85 f6	testq	%r14, %r14
100013044:	74 32	je	0x100013078
100013046:	bf 28 00 00 00	movl	$40, %edi
10001304b:	e8 72 eb 02 00	callq	0x100041bc2 ## symbol stub for: _malloc
100013050:	48 89 c3	movq	%rax, %rbx
100013053:	48 8b 45 e0	movq	-32(%rbp), %rax
100013057:	48 89 43 18	movq	%rax, 24(%rbx)
10001305b:	4c 89 f7	movq	%r14, %rdi
10001305e:	e8 fb eb 02 00	callq	0x100041c5e ## symbol stub for: _os_retain
100013063:	48 89 43 20	movq	%rax, 32(%rbx)
100013067:	49 8b 7f 08	movq	8(%r15), %rdi
10001306b:	48 89 de	movq	%rbx, %rsi
10001306e:	e8 05 ed 02 00	callq	0x100041d78 ## symbol stub for: _rb_tree_insert_node
100013073:	48 39 d8	cmpq	%rbx, %rax
100013076:	75 0b	jne	0x100013083
100013078:	48 83 c4 08	addq	$8, %rsp
10001307c:	5b	popq	%rbx
10001307d:	41 5e	popq	%r14
10001307f:	41 5f	popq	%r15
100013081:	5d	popq	%rbp
100013082:	c3	retq
100013083:	e8 00 cf 02 00	callq	0x10003ff88
100013088:	0f 0b	ud2
10001308a:	55	pushq	%rbp
10001308b:	48 89 e5	movq	%rsp, %rbp
10001308e:	48 83 ec 10	subq	$16, %rsp
100013092:	48 89 75 f8	movq	%rsi, -8(%rbp)
100013096:	81 7f 10 76 13 00 00	cmpl	$4982, 16(%rdi)
10001309d:	75 20	jne	0x1000130bf
10001309f:	48 8b 7f 08	movq	8(%rdi), %rdi
1000130a3:	48 8d 75 f8	leaq	-8(%rbp), %rsi
1000130a7:	e8 c0 ec 02 00	callq	0x100041d6c ## symbol stub for: _rb_tree_find_node
1000130ac:	48 85 c0	testq	%rax, %rax
1000130af:	74 06	je	0x1000130b7
1000130b1:	48 8b 40 20	movq	32(%rax), %rax
1000130b5:	eb 02	jmp	0x1000130b9
1000130b7:	31 c0	xorl	%eax, %eax
1000130b9:	48 83 c4 10	addq	$16, %rsp
1000130bd:	5d	popq	%rbp
1000130be:	c3	retq
1000130bf:	0f 0b	ud2
1000130c1:	55	pushq	%rbp
1000130c2:	48 89 e5	movq	%rsp, %rbp
1000130c5:	41 57	pushq	%r15
1000130c7:	41 56	pushq	%r14
1000130c9:	53	pushq	%rbx
1000130ca:	50	pushq	%rax
1000130cb:	81 7f 10 76 13 00 00	cmpl	$4982, 16(%rdi)
1000130d2:	75 51	jne	0x100013125
1000130d4:	49 89 f7	movq	%rsi, %r15
1000130d7:	49 89 fe	movq	%rdi, %r14
1000130da:	48 8b 7f 08	movq	8(%rdi), %rdi
1000130de:	31 f6	xorl	%esi, %esi
1000130e0:	ba 01 00 00 00	movl	$1, %edx
1000130e5:	e8 94 ec 02 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
1000130ea:	48 85 c0	testq	%rax, %rax
1000130ed:	74 2b	je	0x10001311a
1000130ef:	48 89 c3	movq	%rax, %rbx
1000130f2:	48 8b 73 18	movq	24(%rbx), %rsi
1000130f6:	48 8b 53 20	movq	32(%rbx), %rdx
1000130fa:	4c 89 ff	movq	%r15, %rdi
1000130fd:	41 ff 57 10	callq	*16(%r15)
100013101:	49 8b 7e 08	movq	8(%r14), %rdi
100013105:	48 89 de	movq	%rbx, %rsi
100013108:	ba 01 00 00 00	movl	$1, %edx
10001310d:	e8 6c ec 02 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
100013112:	48 89 c3	movq	%rax, %rbx
100013115:	48 85 c0	testq	%rax, %rax
100013118:	75 d8	jne	0x1000130f2
10001311a:	48 83 c4 08	addq	$8, %rsp
10001311e:	5b	popq	%rbx
10001311f:	41 5e	popq	%r14
100013121:	41 5f	popq	%r15
100013123:	5d	popq	%rbp
100013124:	c3	retq
100013125:	0f 0b	ud2
100013127:	55	pushq	%rbp
100013128:	48 89 e5	movq	%rsp, %rbp
10001312b:	81 7f 10 76 13 00 00	cmpl	$4982, 16(%rdi)
100013132:	75 0a	jne	0x10001313e
100013134:	48 8b 7f 08	movq	8(%rdi), %rdi
100013138:	5d	popq	%rbp
100013139:	e9 28 ec 02 00	jmp	0x100041d66 ## symbol stub for: _rb_tree_count
10001313e:	0f 0b	ud2
100013140:	55	pushq	%rbp
100013141:	48 89 e5	movq	%rsp, %rbp
100013144:	53	pushq	%rbx
100013145:	50	pushq	%rax
100013146:	31 ff	xorl	%edi, %edi
100013148:	e8 d6 fd ff ff	callq	0x100012f23
10001314d:	48 89 c3	movq	%rax, %rbx
100013150:	bf 40 00 00 00	movl	$64, %edi
100013155:	e8 68 ea 02 00	callq	0x100041bc2 ## symbol stub for: _malloc
10001315a:	48 89 43 08	movq	%rax, 8(%rbx)
10001315e:	48 8d 35 f3 ef 04 00	leaq	323571(%rip), %rsi
100013165:	48 89 c7	movq	%rax, %rdi
100013168:	e8 05 ec 02 00	callq	0x100041d72 ## symbol stub for: _rb_tree_init
10001316d:	c7 43 10 76 13 00 00	movl	$4982, 16(%rbx)
100013174:	48 89 d8	movq	%rbx, %rax
100013177:	48 83 c4 08	addq	$8, %rsp
10001317b:	5b	popq	%rbx
10001317c:	5d	popq	%rbp
10001317d:	c3	retq
10001317e:	55	pushq	%rbp
10001317f:	48 89 e5	movq	%rsp, %rbp
100013182:	41 57	pushq	%r15
100013184:	41 56	pushq	%r14
100013186:	53	pushq	%rbx
100013187:	50	pushq	%rax
100013188:	81 7f 10 76 13 00 00	cmpl	$4982, 16(%rdi)
10001318f:	75 6e	jne	0x1000131ff
100013191:	49 89 fe	movq	%rdi, %r14
100013194:	c7 47 10 00 00 00 00	movl	$0, 16(%rdi)
10001319b:	48 8b 7f 08	movq	8(%rdi), %rdi
10001319f:	31 f6	xorl	%esi, %esi
1000131a1:	ba 01 00 00 00	movl	$1, %edx
1000131a6:	e8 d3 eb 02 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
1000131ab:	48 85 c0	testq	%rax, %rax
1000131ae:	74 3c	je	0x1000131ec
1000131b0:	48 89 c3	movq	%rax, %rbx
1000131b3:	49 8b 7e 08	movq	8(%r14), %rdi
1000131b7:	48 89 de	movq	%rbx, %rsi
1000131ba:	ba 01 00 00 00	movl	$1, %edx
1000131bf:	e8 ba eb 02 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
1000131c4:	49 89 c7	movq	%rax, %r15
1000131c7:	49 8b 7e 08	movq	8(%r14), %rdi
1000131cb:	48 89 de	movq	%rbx, %rsi
1000131ce:	e8 b1 eb 02 00	callq	0x100041d84 ## symbol stub for: _rb_tree_remove_node
1000131d3:	48 8b 7b 20	movq	32(%rbx), %rdi
1000131d7:	e8 7c ea 02 00	callq	0x100041c58 ## symbol stub for: _os_release
1000131dc:	48 89 df	movq	%rbx, %rdi
1000131df:	e8 4c e8 02 00	callq	0x100041a30 ## symbol stub for: _free
1000131e4:	4c 89 fb	movq	%r15, %rbx
1000131e7:	4d 85 ff	testq	%r15, %r15
1000131ea:	75 c7	jne	0x1000131b3
1000131ec:	49 8b 7e 08	movq	8(%r14), %rdi
1000131f0:	48 83 c4 08	addq	$8, %rsp
1000131f4:	5b	popq	%rbx
1000131f5:	41 5e	popq	%r14
1000131f7:	41 5f	popq	%r15
1000131f9:	5d	popq	%rbp
1000131fa:	e9 31 e8 02 00	jmp	0x100041a30 ## symbol stub for: _free
1000131ff:	0f 0b	ud2
100013201:	90	nop
100013202:	90	nop
100013203:	90	nop
100013204:	48 85 ff	testq	%rdi, %rdi
100013207:	74 06	je	0x10001320f
100013209:	48 89 f8	movq	%rdi, %rax
10001320c:	31 d2	xorl	%edx, %edx
10001320e:	c3	retq
10001320f:	55	pushq	%rbp
100013210:	48 89 e5	movq	%rsp, %rbp
100013213:	e8 87 cd 02 00	callq	0x10003ff9f
100013218:	85 ff	testl	%edi, %edi
10001321a:	74 05	je	0x100013221
10001321c:	31 c0	xorl	%eax, %eax
10001321e:	89 fa	movl	%edi, %edx
100013220:	c3	retq
100013221:	55	pushq	%rbp
100013222:	48 89 e5	movq	%rsp, %rbp
100013225:	e8 87 cd 02 00	callq	0x10003ffb1
10001322a:	55	pushq	%rbp
10001322b:	48 89 e5	movq	%rsp, %rbp
10001322e:	41 57	pushq	%r15
100013230:	41 56	pushq	%r14
100013232:	53	pushq	%rbx
100013233:	50	pushq	%rax
100013234:	49 89 fe	movq	%rdi, %r14
100013237:	48 39 3d 12 fc 04 00	cmpq	%rdi, 326674(%rip)
10001323e:	75 0b	jne	0x10001324b
100013240:	48 c7 05 05 fc 04 00 00 00 00 00	movq	$0, 326661(%rip)
10001324b:	49 8b 46 50	movq	80(%r14), %rax
10001324f:	48 85 c0	testq	%rax, %rax
100013252:	74 2a	je	0x10001327e
100013254:	31 db	xorl	%ebx, %ebx
100013256:	4c 8d 3d a3 f3 04 00	leaq	324515(%rip), %r15
10001325d:	49 8b 4e 38	movq	56(%r14), %rcx
100013261:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
100013264:	85 ff	testl	%edi, %edi
100013266:	78 0e	js	0x100013276
100013268:	41 3b 3f	cmpl	(%r15), %edi
10001326b:	74 09	je	0x100013276
10001326d:	e8 42 f5 01 00	callq	0x1000327b4
100013272:	49 8b 46 50	movq	80(%r14), %rax
100013276:	48 ff c3	incq	%rbx
100013279:	48 39 c3	cmpq	%rax, %rbx
10001327c:	72 df	jb	0x10001325d
10001327e:	49 83 7e 18 ff	cmpq	$-1, 24(%r14)
100013283:	0f 85 98 00 00 00	jne	0x100013321
100013289:	49 83 7e 20 ff	cmpq	$-1, 32(%r14)
10001328e:	0f 85 8d 00 00 00	jne	0x100013321
100013294:	49 83 7e 08 ff	cmpq	$-1, 8(%r14)
100013299:	0f 85 8b 00 00 00	jne	0x10001332a
10001329f:	49 83 7e 10 ff	cmpq	$-1, 16(%r14)
1000132a4:	0f 85 80 00 00 00	jne	0x10001332a
1000132aa:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
1000132b2:	25 84 00 00 00	andl	$132, %eax
1000132b7:	66 83 f8 04	cmpw	$4, %ax
1000132bb:	74 76	je	0x100013333
1000132bd:	49 8b 7e 38	movq	56(%r14), %rdi
1000132c1:	e8 6a e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132c6:	49 8b 7e 40	movq	64(%r14), %rdi
1000132ca:	e8 61 e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132cf:	49 8b be 80 00 00 00	movq	128(%r14), %rdi
1000132d6:	e8 55 e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132db:	49 8b be 88 00 00 00	movq	136(%r14), %rdi
1000132e2:	e8 49 e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132e7:	49 8b be 98 00 00 00	movq	152(%r14), %rdi
1000132ee:	e8 3d e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132f3:	49 8b be a0 00 00 00	movq	160(%r14), %rdi
1000132fa:	e8 31 e7 02 00	callq	0x100041a30 ## symbol stub for: _free
1000132ff:	49 8b be a8 00 00 00	movq	168(%r14), %rdi
100013306:	e8 25 e7 02 00	callq	0x100041a30 ## symbol stub for: _free
10001330b:	49 8b be b8 00 00 00	movq	184(%r14), %rdi
100013312:	48 83 c4 08	addq	$8, %rsp
100013316:	5b	popq	%rbx
100013317:	41 5e	popq	%r14
100013319:	41 5f	popq	%r15
10001331b:	5d	popq	%rbp
10001331c:	e9 db ed 02 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100013321:	48 8d 3d 34 60 03 00	leaq	221236(%rip), %rdi ## literal pool for: "socket deallocated while still in domain list"
100013328:	eb 10	jmp	0x10001333a
10001332a:	48 8d 3d 59 60 03 00	leaq	221273(%rip), %rdi ## literal pool for: "socket deallocated while still in service list"
100013331:	eb 07	jmp	0x10001333a
100013333:	48 8d 3d 7f 60 03 00	leaq	221311(%rip), %rdi ## literal pool for: "socket deallocated while still active"
10001333a:	31 c0	xorl	%eax, %eax
10001333c:	e8 d1 10 02 00	callq	0x100034412
100013341:	55	pushq	%rbp
100013342:	48 89 e5	movq	%rsp, %rbp
100013345:	48 89 d1	movq	%rdx, %rcx
100013348:	48 89 f7	movq	%rsi, %rdi
10001334b:	48 8d 15 c4 42 03 00	leaq	213700(%rip), %rdx ## literal pool for: "%s"
100013352:	be 03 00 00 00	movl	$3, %esi
100013357:	31 c0	xorl	%eax, %eax
100013359:	e8 04 00 00 00	callq	0x100013362
10001335e:	b0 01	movb	$1, %al
100013360:	5d	popq	%rbp
100013361:	c3	retq
100013362:	55	pushq	%rbp
100013363:	48 89 e5	movq	%rsp, %rbp
100013366:	41 57	pushq	%r15
100013368:	41 56	pushq	%r14
10001336a:	41 54	pushq	%r12
10001336c:	53	pushq	%rbx
10001336d:	48 81 ec d0 00 00 00	subq	$208, %rsp
100013374:	49 89 d6	movq	%rdx, %r14
100013377:	41 89 f7	movl	%esi, %r15d
10001337a:	4c 8d a5 10 ff ff ff	leaq	-240(%rbp), %r12
100013381:	49 89 4c 24 18	movq	%rcx, 24(%r12)
100013386:	4d 89 44 24 20	movq	%r8, 32(%r12)
10001338b:	4d 89 4c 24 28	movq	%r9, 40(%r12)
100013390:	84 c0	testb	%al, %al
100013392:	74 2c	je	0x1000133c0
100013394:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
10001339b:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
1000133a2:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
1000133a9:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
1000133b0:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
1000133b4:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
1000133b8:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
1000133bc:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
1000133c0:	48 8b 05 61 4c 04 00	movq	281697(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000133c7:	48 8b 00	movq	(%rax), %rax
1000133ca:	48 89 45 d8	movq	%rax, -40(%rbp)
1000133ce:	e8 69 00 00 00	callq	0x10001343c
1000133d3:	48 89 c3	movq	%rax, %rbx
1000133d6:	0f 28 05 a3 fe 02 00	movaps	196259(%rip), %xmm0
1000133dd:	48 8d 4d c0	leaq	-64(%rbp), %rcx
1000133e1:	0f 29 01	movaps	%xmm0, (%rcx)
1000133e4:	4c 89 61 10	movq	%r12, 16(%rcx)
1000133e8:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
1000133f2:	48 89 01	movq	%rax, (%rcx)
1000133f5:	48 8d 45 10	leaq	16(%rbp), %rax
1000133f9:	48 89 41 08	movq	%rax, 8(%rcx)
1000133fd:	4c 8b 45 08	movq	8(%rbp), %r8
100013401:	48 89 df	movq	%rbx, %rdi
100013404:	44 89 fe	movl	%r15d, %esi
100013407:	4c 89 f2	movq	%r14, %rdx
10001340a:	e8 54 23 02 00	callq	0x100035763
10001340f:	48 89 df	movq	%rbx, %rdi
100013412:	e8 19 e6 02 00	callq	0x100041a30 ## symbol stub for: _free
100013417:	48 8b 05 0a 4c 04 00	movq	281610(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001341e:	48 8b 00	movq	(%rax), %rax
100013421:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100013425:	75 10	jne	0x100013437
100013427:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10001342e:	5b	popq	%rbx
10001342f:	41 5c	popq	%r12
100013431:	41 5e	popq	%r14
100013433:	41 5f	popq	%r15
100013435:	5d	popq	%rbp
100013436:	c3	retq
100013437:	e8 36 e3 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001343c:	55	pushq	%rbp
10001343d:	48 89 e5	movq	%rsp, %rbp
100013440:	41 57	pushq	%r15
100013442:	41 56	pushq	%r14
100013444:	53	pushq	%rbx
100013445:	50	pushq	%rax
100013446:	48 89 fb	movq	%rdi, %rbx
100013449:	bf 40 00 00 00	movl	$64, %edi
10001344e:	e8 0e 8c ff ff	callq	0x10000c061
100013453:	49 89 c6	movq	%rax, %r14
100013456:	48 8b 7b 30	movq	48(%rbx), %rdi
10001345a:	48 85 ff	testq	%rdi, %rdi
10001345d:	74 29	je	0x100013488
10001345f:	be 01 00 00 00	movl	$1, %esi
100013464:	e8 bf 4e 00 00	callq	0x100018328
100013469:	49 89 c7	movq	%rax, %r15
10001346c:	48 8d 35 1b 62 03 00	leaq	221723(%rip), %rsi ## literal pool for: "%s - "
100013473:	4c 89 f7	movq	%r14, %rdi
100013476:	48 89 c2	movq	%rax, %rdx
100013479:	31 c0	xorl	%eax, %eax
10001347b:	e8 50 8c ff ff	callq	0x10000c0d0
100013480:	4c 89 ff	movq	%r15, %rdi
100013483:	e8 a8 e5 02 00	callq	0x100041a30 ## symbol stub for: _free
100013488:	48 81 c3 c8 00 00 00	addq	$200, %rbx
10001348f:	48 8d 35 80 41 03 00	leaq	213376(%rip), %rsi ## literal pool for: "%s"
100013496:	4c 89 f7	movq	%r14, %rdi
100013499:	48 89 da	movq	%rbx, %rdx
10001349c:	31 c0	xorl	%eax, %eax
10001349e:	e8 2d 8c ff ff	callq	0x10000c0d0
1000134a3:	4c 89 f7	movq	%r14, %rdi
1000134a6:	e8 f9 8b ff ff	callq	0x10000c0a4
1000134ab:	48 89 c3	movq	%rax, %rbx
1000134ae:	4c 89 f7	movq	%r14, %rdi
1000134b1:	e8 fb 8b ff ff	callq	0x10000c0b1
1000134b6:	48 89 d8	movq	%rbx, %rax
1000134b9:	48 83 c4 08	addq	$8, %rsp
1000134bd:	5b	popq	%rbx
1000134be:	41 5e	popq	%r14
1000134c0:	41 5f	popq	%r15
1000134c2:	5d	popq	%rbp
1000134c3:	c3	retq
1000134c4:	55	pushq	%rbp
1000134c5:	48 89 e5	movq	%rsp, %rbp
1000134c8:	41 57	pushq	%r15
1000134ca:	41 56	pushq	%r14
1000134cc:	41 55	pushq	%r13
1000134ce:	41 54	pushq	%r12
1000134d0:	53	pushq	%rbx
1000134d1:	48 83 ec 18	subq	$24, %rsp
1000134d5:	4c 89 4d c8	movq	%r9, -56(%rbp)
1000134d9:	4d 89 c6	movq	%r8, %r14
1000134dc:	48 89 4d d0	movq	%rcx, -48(%rbp)
1000134e0:	41 89 d5	movl	%edx, %r13d
1000134e3:	49 89 f4	movq	%rsi, %r12
1000134e6:	49 89 ff	movq	%rdi, %r15
1000134e9:	48 89 f7	movq	%rsi, %rdi
1000134ec:	e8 65 e9 02 00	callq	0x100041e56 ## symbol stub for: _strlen
1000134f1:	48 8d 78 01	leaq	1(%rax), %rdi
1000134f5:	e8 d8 f9 ff ff	callq	0x100012ed2
1000134fa:	48 89 c3	movq	%rax, %rbx
1000134fd:	4c 89 78 30	movq	%r15, 48(%rax)
100013501:	c7 40 58 ff ff ff ff	movl	$4294967295, 88(%rax)
100013508:	44 89 68 60	movl	%r13d, 96(%rax)
10001350c:	4c 8b 6d d0	movq	-48(%rbp), %r13
100013510:	4c 89 f7	movq	%r14, %rdi
100013513:	e8 46 e4 02 00	callq	0x10004195e ## symbol stub for: _dispatch_retain
100013518:	4c 89 73 68	movq	%r14, 104(%rbx)
10001351c:	48 8b 45 c8	movq	-56(%rbp), %rax
100013520:	48 89 43 70	movq	%rax, 112(%rbx)
100013524:	48 8b 45 10	movq	16(%rbp), %rax
100013528:	48 89 43 78	movq	%rax, 120(%rbx)
10001352c:	4c 89 ef	movq	%r13, %rdi
10001352f:	e8 ce eb 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100013534:	48 89 83 b8 00 00 00	movq	%rax, 184(%rbx)
10001353b:	80 8b c4 00 00 00 02	orb	$2, 196(%rbx)
100013542:	48 8d bb c8 00 00 00	leaq	200(%rbx), %rdi
100013549:	4c 89 e6	movq	%r12, %rsi
10001354c:	e8 e1 e8 02 00	callq	0x100041e32 ## symbol stub for: _strcpy
100013551:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100013555:	f3 0f 7f 43 08	movdqu	%xmm0, 8(%rbx)
10001355a:	f3 0f 7f 43 18	movdqu	%xmm0, 24(%rbx)
10001355f:	4c 89 ff	movq	%r15, %rdi
100013562:	e8 3b 82 00 00	callq	0x10001b7a2
100013567:	44 8b 70 14	movl	20(%rax), %r14d
10001356b:	45 85 f6	testl	%r14d, %r14d
10001356e:	74 18	je	0x100013588
100013570:	49 89 c7	movq	%rax, %r15
100013573:	e8 1e e5 02 00	callq	0x100041a96 ## symbol stub for: _getpid
100013578:	41 39 c6	cmpl	%eax, %r14d
10001357b:	74 0b	je	0x100013588
10001357d:	41 8b 47 08	movl	8(%r15), %eax
100013581:	85 c0	testl	%eax, %eax
100013583:	74 03	je	0x100013588
100013585:	89 43 64	movl	%eax, 100(%rbx)
100013588:	4c 8b 7d 18	movq	24(%rbp), %r15
10001358c:	48 8d 35 4c 5e 03 00	leaq	220748(%rip), %rsi ## literal pool for: "SockPathName"
100013593:	4c 89 ef	movq	%r13, %rdi
100013596:	e8 bf ea 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10001359b:	48 85 c0	testq	%rax, %rax
10001359e:	74 27	je	0x1000135c7
1000135a0:	48 8d 35 45 5e 03 00	leaq	220741(%rip), %rsi ## literal pool for: "/var/run/syslog"
1000135a7:	48 89 c7	movq	%rax, %rdi
1000135aa:	e8 7d e8 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000135af:	85 c0	testl	%eax, %eax
1000135b1:	75 14	jne	0x1000135c7
1000135b3:	48 8d 35 42 5e 03 00	leaq	220738(%rip), %rsi ## literal pool for: "SystemLoggingSocket"
1000135ba:	4c 89 ef	movq	%r13, %rdi
1000135bd:	ba 01 00 00 00	movl	$1, %edx
1000135c2:	e8 b1 ea 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
1000135c7:	c7 43 5c 01 00 00 00	movl	$1, 92(%rbx)
1000135ce:	48 89 df	movq	%rbx, %rdi
1000135d1:	be 01 00 00 00	movl	$1, %esi
1000135d6:	4c 89 fa	movq	%r15, %rdx
1000135d9:	31 c9	xorl	%ecx, %ecx
1000135db:	e8 a8 f2 ff ff	callq	0x100012888
1000135e0:	49 89 c6	movq	%rax, %r14
1000135e3:	48 8d 15 25 00 00 00	leaq	37(%rip), %rdx
1000135ea:	4c 89 ef	movq	%r13, %rdi
1000135ed:	48 89 c6	movq	%rax, %rsi
1000135f0:	e8 11 ea 02 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
1000135f5:	4c 89 f7	movq	%r14, %rdi
1000135f8:	e8 2f f3 ff ff	callq	0x10001292c
1000135fd:	48 89 d8	movq	%rbx, %rax
100013600:	48 83 c4 18	addq	$24, %rsp
100013604:	5b	popq	%rbx
100013605:	41 5c	popq	%r12
100013607:	41 5d	popq	%r13
100013609:	41 5e	popq	%r14
10001360b:	41 5f	popq	%r15
10001360d:	5d	popq	%rbp
10001360e:	c3	retq
10001360f:	55	pushq	%rbp
100013610:	48 89 e5	movq	%rsp, %rbp
100013613:	41 57	pushq	%r15
100013615:	41 56	pushq	%r14
100013617:	41 55	pushq	%r13
100013619:	41 54	pushq	%r12
10001361b:	53	pushq	%rbx
10001361c:	50	pushq	%rax
10001361d:	49 89 f7	movq	%rsi, %r15
100013620:	49 89 fc	movq	%rdi, %r12
100013623:	4c 8b 2a	movq	(%rdx), %r13
100013626:	4c 8b 72 08	movq	8(%rdx), %r14
10001362a:	48 89 f7	movq	%rsi, %rdi
10001362d:	e8 94 ea 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100013632:	48 89 c3	movq	%rax, %rbx
100013635:	48 8d 35 58 60 03 00	leaq	221272(%rip), %rsi ## literal pool for: "SockType"
10001363c:	4c 89 e7	movq	%r12, %rdi
10001363f:	e8 dc e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013644:	85 c0	testl	%eax, %eax
100013646:	0f 84 4e 01 00 00	je	0x10001379a
10001364c:	48 8d 35 71 60 03 00	leaq	221297(%rip), %rsi ## literal pool for: "SockPassive"
100013653:	4c 89 e7	movq	%r12, %rdi
100013656:	e8 c5 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10001365b:	85 c0	testl	%eax, %eax
10001365d:	0f 84 b2 01 00 00	je	0x100013815
100013663:	48 8d 35 66 60 03 00	leaq	221286(%rip), %rsi ## literal pool for: "SecureSocketWithKey"
10001366a:	4c 89 e7	movq	%r12, %rdi
10001366d:	e8 ae e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013672:	85 c0	testl	%eax, %eax
100013674:	0f 84 cd 01 00 00	je	0x100013847
10001367a:	48 8d 35 5e 5d 03 00	leaq	220510(%rip), %rsi ## literal pool for: "SockPathName"
100013681:	4c 89 e7	movq	%r12, %rdi
100013684:	e8 97 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013689:	85 c0	testl	%eax, %eax
10001368b:	0f 84 e9 01 00 00	je	0x10001387a
100013691:	48 8d 35 7c 60 03 00	leaq	221308(%rip), %rsi ## literal pool for: "SockPathOwner"
100013698:	4c 89 e7	movq	%r12, %rdi
10001369b:	e8 80 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000136a0:	85 c0	testl	%eax, %eax
1000136a2:	0f 84 0f 02 00 00	je	0x1000138b7
1000136a8:	48 8d 35 73 60 03 00	leaq	221299(%rip), %rsi ## literal pool for: "SockPathGroup"
1000136af:	4c 89 e7	movq	%r12, %rdi
1000136b2:	e8 69 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000136b7:	85 c0	testl	%eax, %eax
1000136b9:	0f 84 23 02 00 00	je	0x1000138e2
1000136bf:	48 8d 35 6a 60 03 00	leaq	221290(%rip), %rsi ## literal pool for: "SockPathMode"
1000136c6:	4c 89 e7	movq	%r12, %rdi
1000136c9:	e8 52 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000136ce:	85 c0	testl	%eax, %eax
1000136d0:	0f 84 37 02 00 00	je	0x10001390d
1000136d6:	48 8d 35 60 60 03 00	leaq	221280(%rip), %rsi ## literal pool for: "SockNodeName"
1000136dd:	4c 89 e7	movq	%r12, %rdi
1000136e0:	e8 3b e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000136e5:	85 c0	testl	%eax, %eax
1000136e7:	0f 84 57 02 00 00	je	0x100013944
1000136ed:	48 8d 35 56 60 03 00	leaq	221270(%rip), %rsi ## literal pool for: "MulticastGroup"
1000136f4:	4c 89 e7	movq	%r12, %rdi
1000136f7:	e8 24 e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000136fc:	85 c0	testl	%eax, %eax
1000136fe:	0f 84 a0 02 00 00	je	0x1000139a4
100013704:	48 8d 35 4e 60 03 00	leaq	221262(%rip), %rsi ## literal pool for: "SockServiceName"
10001370b:	4c 89 e7	movq	%r12, %rdi
10001370e:	e8 0d e7 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013713:	85 c0	testl	%eax, %eax
100013715:	0f 84 ce 02 00 00	je	0x1000139e9
10001371b:	48 8d 35 47 60 03 00	leaq	221255(%rip), %rsi ## literal pool for: "SockFamily"
100013722:	4c 89 e7	movq	%r12, %rdi
100013725:	e8 f6 e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10001372a:	85 c0	testl	%eax, %eax
10001372c:	0f 84 ef 02 00 00	je	0x100013a21
100013732:	48 8d 35 51 60 03 00	leaq	221265(%rip), %rsi ## literal pool for: "SockProtocol"
100013739:	4c 89 e7	movq	%r12, %rdi
10001373c:	e8 df e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013741:	85 c0	testl	%eax, %eax
100013743:	0f 84 59 03 00 00	je	0x100013aa2
100013749:	48 8d 35 4f 60 03 00	leaq	221263(%rip), %rsi ## literal pool for: "Bonjour"
100013750:	4c 89 e7	movq	%r12, %rdi
100013753:	e8 c8 e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013758:	85 c0	testl	%eax, %eax
10001375a:	0f 84 a6 03 00 00	je	0x100013b06
100013760:	48 8d 35 95 5c 03 00	leaq	220309(%rip), %rsi ## literal pool for: "SystemLoggingSocket"
100013767:	4c 89 e7	movq	%r12, %rdi
10001376a:	e8 b1 e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10001376f:	85 c0	testl	%eax, %eax
100013771:	0f 84 ae 03 00 00	je	0x100013b25
100013777:	48 8d 35 29 60 03 00	leaq	221225(%rip), %rsi ## literal pool for: "ReceivePacketInfo"
10001377e:	4c 89 e7	movq	%r12, %rdi
100013781:	e8 9a e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013786:	85 c0	testl	%eax, %eax
100013788:	0f 84 11 04 00 00	je	0x100013b9f
10001378e:	48 8d 15 24 60 03 00	leaq	221220(%rip), %rdx ## literal pool for: "Unknown socket key %s"
100013795:	e9 e5 03 00 00	jmp	0x100013b7f
10001379a:	48 3b 1d 87 49 04 00	cmpq	280967(%rip), %rbx ## literal pool symbol address: __xpc_type_string
1000137a1:	0f 85 08 03 00 00	jne	0x100013aaf
1000137a7:	4c 89 ff	movq	%r15, %rdi
1000137aa:	e8 77 e9 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000137af:	48 89 c3	movq	%rax, %rbx
1000137b2:	48 8d 35 e4 5e 03 00	leaq	220900(%rip), %rsi ## literal pool for: "stream"
1000137b9:	48 89 c7	movq	%rax, %rdi
1000137bc:	e8 5f e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000137c1:	85 c0	testl	%eax, %eax
1000137c3:	0f 84 0c 01 00 00	je	0x1000138d5
1000137c9:	48 8d 35 d4 5e 03 00	leaq	220884(%rip), %rsi ## literal pool for: "dgram"
1000137d0:	48 89 df	movq	%rbx, %rdi
1000137d3:	e8 48 e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000137d8:	85 c0	testl	%eax, %eax
1000137da:	0f 84 20 01 00 00	je	0x100013900
1000137e0:	48 8d 35 c3 5e 03 00	leaq	220867(%rip), %rsi ## literal pool for: "seqpacket"
1000137e7:	48 89 df	movq	%rbx, %rdi
1000137ea:	e8 31 e6 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
1000137ef:	85 c0	testl	%eax, %eax
1000137f1:	0f 84 40 01 00 00	je	0x100013937
1000137f7:	48 8d 15 b6 5e 03 00	leaq	220854(%rip), %rdx ## literal pool for: "Unrecognized %s"
1000137fe:	4c 89 f7	movq	%r14, %rdi
100013801:	be 03 00 00 00	movl	$3, %esi
100013806:	4c 89 e1	movq	%r12, %rcx
100013809:	31 c0	xorl	%eax, %eax
10001380b:	e8 35 ae ff ff	callq	0x10000e645
100013810:	e9 be 02 00 00	jmp	0x100013ad3
100013815:	48 3b 1d c4 48 04 00	cmpq	280772(%rip), %rbx ## literal pool symbol address: __xpc_type_bool
10001381c:	0f 85 8d 02 00 00	jne	0x100013aaf
100013822:	4c 89 ff	movq	%r15, %rdi
100013825:	e8 6a e7 02 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10001382a:	41 8b 8d c4 00 00 00	movl	196(%r13), %ecx
100013831:	0f b6 c0	movzbl	%al, %eax
100013834:	83 e1 fd	andl	$-3, %ecx
100013837:	8d 04 41	leal	(%rcx,%rax,2), %eax
10001383a:	66 41 89 85 c4 00 00 00	movw	%ax, 196(%r13)
100013842:	e9 97 02 00 00	jmp	0x100013ade
100013847:	48 3b 1d da 48 04 00	cmpq	280794(%rip), %rbx ## literal pool symbol address: __xpc_type_string
10001384e:	0f 85 5b 02 00 00	jne	0x100013aaf
100013854:	49 83 bd 88 00 00 00 00	cmpq	$0, 136(%r13)
10001385c:	75 37	jne	0x100013895
10001385e:	4c 89 ff	movq	%r15, %rdi
100013861:	e8 c0 e8 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100013866:	48 89 c7	movq	%rax, %rdi
100013869:	e8 74 b7 ff ff	callq	0x10000efe2
10001386e:	49 89 85 80 00 00 00	movq	%rax, 128(%r13)
100013875:	e9 64 02 00 00	jmp	0x100013ade
10001387a:	48 3b 1d a7 48 04 00	cmpq	280743(%rip), %rbx ## literal pool symbol address: __xpc_type_string
100013881:	0f 85 28 02 00 00	jne	0x100013aaf
100013887:	49 83 bd 80 00 00 00 00	cmpq	$0, 128(%r13)
10001388f:	0f 84 d8 00 00 00	je	0x10001396d
100013895:	48 8d 15 48 5e 03 00	leaq	220744(%rip), %rdx ## literal pool for: "Can't have both %s and %s"
10001389c:	48 8d 0d 3c 5b 03 00	leaq	219964(%rip), %rcx ## literal pool for: "SockPathName"
1000138a3:	4c 8d 05 26 5e 03 00	leaq	220710(%rip), %r8 ## literal pool for: "SecureSocketWithKey"
1000138aa:	4c 89 f7	movq	%r14, %rdi
1000138ad:	be 03 00 00 00	movl	$3, %esi
1000138b2:	e9 15 02 00 00	jmp	0x100013acc
1000138b7:	48 3b 1d 52 48 04 00	cmpq	280658(%rip), %rbx ## literal pool symbol address: __xpc_type_int64
1000138be:	0f 85 eb 01 00 00	jne	0x100013aaf
1000138c4:	4c 89 ff	movq	%r15, %rdi
1000138c7:	e8 06 e8 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
1000138cc:	41 89 45 60	movl	%eax, 96(%r13)
1000138d0:	e9 09 02 00 00	jmp	0x100013ade
1000138d5:	41 c7 45 5c 01 00 00 00	movl	$1, 92(%r13)
1000138dd:	e9 fc 01 00 00	jmp	0x100013ade
1000138e2:	48 3b 1d 27 48 04 00	cmpq	280615(%rip), %rbx ## literal pool symbol address: __xpc_type_int64
1000138e9:	0f 85 c0 01 00 00	jne	0x100013aaf
1000138ef:	4c 89 ff	movq	%r15, %rdi
1000138f2:	e8 db e7 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
1000138f7:	41 89 45 64	movl	%eax, 100(%r13)
1000138fb:	e9 de 01 00 00	jmp	0x100013ade
100013900:	41 c7 45 5c 02 00 00 00	movl	$2, 92(%r13)
100013908:	e9 d1 01 00 00	jmp	0x100013ade
10001390d:	48 3b 1d fc 47 04 00	cmpq	280572(%rip), %rbx ## literal pool symbol address: __xpc_type_int64
100013914:	0f 85 95 01 00 00	jne	0x100013aaf
10001391a:	4c 89 ff	movq	%r15, %rdi
10001391d:	e8 b0 e7 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100013922:	66 41 89 85 90 00 00 00	movw	%ax, 144(%r13)
10001392a:	41 80 8d c4 00 00 00 08	orb	$8, 196(%r13)
100013932:	e9 a7 01 00 00	jmp	0x100013ade
100013937:	41 c7 45 5c 05 00 00 00	movl	$5, 92(%r13)
10001393f:	e9 9a 01 00 00	jmp	0x100013ade
100013944:	48 3b 1d dd 47 04 00	cmpq	280541(%rip), %rbx ## literal pool symbol address: __xpc_type_string
10001394b:	0f 85 5e 01 00 00	jne	0x100013aaf
100013951:	4c 89 ff	movq	%r15, %rdi
100013954:	e8 cd e7 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100013959:	48 89 c7	movq	%rax, %rdi
10001395c:	e8 81 b6 ff ff	callq	0x10000efe2
100013961:	49 89 85 98 00 00 00	movq	%rax, 152(%r13)
100013968:	e9 71 01 00 00	jmp	0x100013ade
10001396d:	4c 89 ff	movq	%r15, %rdi
100013970:	e8 ab e7 02 00	callq	0x100042120 ## symbol stub for: _xpc_string_get_length
100013975:	48 83 f8 68	cmpq	$104, %rax
100013979:	72 52	jb	0x1000139cd
10001397b:	48 8d 15 7c 5d 03 00	leaq	220540(%rip), %rdx ## literal pool for: "%s value is too long."
100013982:	4c 89 f7	movq	%r14, %rdi
100013985:	be 03 00 00 00	movl	$3, %esi
10001398a:	4c 89 e1	movq	%r12, %rcx
10001398d:	31 c0	xorl	%eax, %eax
10001398f:	e8 b1 ac ff ff	callq	0x10000e645
100013994:	41 c7 85 c0 00 00 00 22 00 00 00	movl	$34, 192(%r13)
10001399f:	e9 3a 01 00 00	jmp	0x100013ade
1000139a4:	48 3b 1d 7d 47 04 00	cmpq	280445(%rip), %rbx ## literal pool symbol address: __xpc_type_string
1000139ab:	0f 85 fe 00 00 00	jne	0x100013aaf
1000139b1:	4c 89 ff	movq	%r15, %rdi
1000139b4:	e8 6d e7 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000139b9:	48 89 c7	movq	%rax, %rdi
1000139bc:	e8 21 b6 ff ff	callq	0x10000efe2
1000139c1:	49 89 85 a0 00 00 00	movq	%rax, 160(%r13)
1000139c8:	e9 11 01 00 00	jmp	0x100013ade
1000139cd:	4c 89 ff	movq	%r15, %rdi
1000139d0:	e8 51 e7 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000139d5:	48 89 c7	movq	%rax, %rdi
1000139d8:	e8 05 b6 ff ff	callq	0x10000efe2
1000139dd:	49 89 85 88 00 00 00	movq	%rax, 136(%r13)
1000139e4:	e9 f5 00 00 00	jmp	0x100013ade
1000139e9:	48 3b 1d 38 47 04 00	cmpq	280376(%rip), %rbx ## literal pool symbol address: __xpc_type_string
1000139f0:	0f 84 f7 00 00 00	je	0x100013aed
1000139f6:	48 3b 1d 13 47 04 00	cmpq	280339(%rip), %rbx ## literal pool symbol address: __xpc_type_int64
1000139fd:	0f 85 ac 00 00 00	jne	0x100013aaf
100013a03:	4c 89 ff	movq	%r15, %rdi
100013a06:	e8 c7 e6 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100013a0b:	48 8d 3d 2b 50 03 00	leaq	217131(%rip), %rdi ## literal pool for: "%lld"
100013a12:	48 89 c6	movq	%rax, %rsi
100013a15:	31 c0	xorl	%eax, %eax
100013a17:	e8 19 b7 ff ff	callq	0x10000f135
100013a1c:	e9 dc 00 00 00	jmp	0x100013afd
100013a21:	48 3b 1d 00 47 04 00	cmpq	280320(%rip), %rbx ## literal pool symbol address: __xpc_type_string
100013a28:	0f 85 81 00 00 00	jne	0x100013aaf
100013a2e:	4c 89 ff	movq	%r15, %rdi
100013a31:	e8 f0 e6 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100013a36:	48 89 c3	movq	%rax, %rbx
100013a39:	48 8d 35 34 5d 03 00	leaq	220468(%rip), %rsi ## literal pool for: "IPv4"
100013a40:	48 89 c7	movq	%rax, %rdi
100013a43:	e8 d8 e3 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013a48:	85 c0	testl	%eax, %eax
100013a4a:	0f 84 78 01 00 00	je	0x100013bc8
100013a50:	48 8d 35 22 5d 03 00	leaq	220450(%rip), %rsi ## literal pool for: "IPv6"
100013a57:	48 89 df	movq	%rbx, %rdi
100013a5a:	e8 c1 e3 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013a5f:	85 c0	testl	%eax, %eax
100013a61:	0f 84 71 01 00 00	je	0x100013bd8
100013a67:	48 8d 35 10 5d 03 00	leaq	220432(%rip), %rsi ## literal pool for: "IPv4v6"
100013a6e:	48 89 df	movq	%rbx, %rdi
100013a71:	e8 aa e3 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013a76:	85 c0	testl	%eax, %eax
100013a78:	0f 84 7a 01 00 00	je	0x100013bf8
100013a7e:	48 8d 35 00 5d 03 00	leaq	220416(%rip), %rsi ## literal pool for: "Unix"
100013a85:	48 89 df	movq	%rbx, %rdi
100013a88:	e8 93 e3 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013a8d:	85 c0	testl	%eax, %eax
100013a8f:	0f 85 e3 00 00 00	jne	0x100013b78
100013a95:	41 c7 85 b0 00 00 00 01 00 00 00	movl	$1, 176(%r13)
100013aa0:	eb 3c	jmp	0x100013ade
100013aa2:	48 3b 1d 7f 46 04 00	cmpq	280191(%rip), %rbx ## literal pool symbol address: __xpc_type_string
100013aa9:	0f 84 90 00 00 00	je	0x100013b3f
100013aaf:	48 89 df	movq	%rbx, %rdi
100013ab2:	e8 75 e6 02 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
100013ab7:	48 8d 15 11 5d 03 00	leaq	220433(%rip), %rdx ## literal pool for: "Invalid type for socket dictionary (key/type): %s/%s"
100013abe:	4c 89 f7	movq	%r14, %rdi
100013ac1:	be 03 00 00 00	movl	$3, %esi
100013ac6:	4c 89 e1	movq	%r12, %rcx
100013ac9:	49 89 c0	movq	%rax, %r8
100013acc:	31 c0	xorl	%eax, %eax
100013ace:	e8 72 ab ff ff	callq	0x10000e645
100013ad3:	41 c7 85 c0 00 00 00 16 00 00 00	movl	$22, 192(%r13)
100013ade:	48 83 c4 08	addq	$8, %rsp
100013ae2:	5b	popq	%rbx
100013ae3:	41 5c	popq	%r12
100013ae5:	41 5d	popq	%r13
100013ae7:	41 5e	popq	%r14
100013ae9:	41 5f	popq	%r15
100013aeb:	5d	popq	%rbp
100013aec:	c3	retq
100013aed:	4c 89 ff	movq	%r15, %rdi
100013af0:	e8 31 e6 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100013af5:	48 89 c7	movq	%rax, %rdi
100013af8:	e8 e5 b4 ff ff	callq	0x10000efe2
100013afd:	49 89 85 a8 00 00 00	movq	%rax, 168(%r13)
100013b04:	eb d8	jmp	0x100013ade
100013b06:	48 3b 1d d3 45 04 00	cmpq	280019(%rip), %rbx ## literal pool symbol address: __xpc_type_bool
100013b0d:	75 0c	jne	0x100013b1b
100013b0f:	4c 89 ff	movq	%r15, %rdi
100013b12:	e8 7d e4 02 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100013b17:	84 c0	testb	%al, %al
100013b19:	74 c3	je	0x100013ade
100013b1b:	41 80 8d c4 00 00 00 10	orb	$16, 196(%r13)
100013b23:	eb b9	jmp	0x100013ade
100013b25:	4c 89 ff	movq	%r15, %rdi
100013b28:	e8 67 e4 02 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100013b2d:	41 8b 8d c4 00 00 00	movl	196(%r13), %ecx
100013b34:	0f b6 c0	movzbl	%al, %eax
100013b37:	c1 e0 06	shll	$6, %eax
100013b3a:	83 e1 bf	andl	$-65, %ecx
100013b3d:	eb 7a	jmp	0x100013bb9
100013b3f:	4c 89 ff	movq	%r15, %rdi
100013b42:	e8 df e5 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
100013b47:	48 89 c3	movq	%rax, %rbx
100013b4a:	48 8d 35 46 5c 03 00	leaq	220230(%rip), %rsi ## literal pool for: "TCP"
100013b51:	48 89 c7	movq	%rax, %rdi
100013b54:	e8 c7 e2 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013b59:	85 c0	testl	%eax, %eax
100013b5b:	0f 84 87 00 00 00	je	0x100013be8
100013b61:	48 8d 35 33 5c 03 00	leaq	220211(%rip), %rsi ## literal pool for: "UDP"
100013b68:	48 89 df	movq	%rbx, %rdi
100013b6b:	e8 b0 e2 02 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
100013b70:	85 c0	testl	%eax, %eax
100013b72:	0f 84 98 00 00 00	je	0x100013c10
100013b78:	48 8d 15 35 5b 03 00	leaq	219957(%rip), %rdx ## literal pool for: "Unrecognized %s"
100013b7f:	4c 89 f7	movq	%r14, %rdi
100013b82:	be 04 00 00 00	movl	$4, %esi
100013b87:	4c 89 e1	movq	%r12, %rcx
100013b8a:	31 c0	xorl	%eax, %eax
100013b8c:	48 83 c4 08	addq	$8, %rsp
100013b90:	5b	popq	%rbx
100013b91:	41 5c	popq	%r12
100013b93:	41 5d	popq	%r13
100013b95:	41 5e	popq	%r14
100013b97:	41 5f	popq	%r15
100013b99:	5d	popq	%rbp
100013b9a:	e9 a6 aa ff ff	jmp	0x10000e645
100013b9f:	4c 89 ff	movq	%r15, %rdi
100013ba2:	e8 ed e3 02 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
100013ba7:	0f b6 c0	movzbl	%al, %eax
100013baa:	c1 e0 09	shll	$9, %eax
100013bad:	b9 ff fd ff ff	movl	$4294966783, %ecx
100013bb2:	41 23 8d c4 00 00 00	andl	196(%r13), %ecx
100013bb9:	09 c1	orl	%eax, %ecx
100013bbb:	66 41 89 8d c4 00 00 00	movw	%cx, 196(%r13)
100013bc3:	e9 16 ff ff ff	jmp	0x100013ade
100013bc8:	41 c7 85 b0 00 00 00 02 00 00 00	movl	$2, 176(%r13)
100013bd3:	e9 06 ff ff ff	jmp	0x100013ade
100013bd8:	41 c7 85 b0 00 00 00 1e 00 00 00	movl	$30, 176(%r13)
100013be3:	e9 f6 fe ff ff	jmp	0x100013ade
100013be8:	41 c7 85 b4 00 00 00 06 00 00 00	movl	$6, 180(%r13)
100013bf3:	e9 e6 fe ff ff	jmp	0x100013ade
100013bf8:	41 c7 85 b0 00 00 00 1e 00 00 00	movl	$30, 176(%r13)
100013c03:	41 80 8d c4 00 00 00 20	orb	$32, 196(%r13)
100013c0b:	e9 ce fe ff ff	jmp	0x100013ade
100013c10:	41 c7 85 b4 00 00 00 11 00 00 00	movl	$17, 180(%r13)
100013c1b:	e9 be fe ff ff	jmp	0x100013ade
100013c20:	55	pushq	%rbp
100013c21:	48 89 e5	movq	%rsp, %rbp
100013c24:	53	pushq	%rbx
100013c25:	50	pushq	%rax
100013c26:	48 89 fb	movq	%rdi, %rbx
100013c29:	f6 87 c4 00 00 00 40	testb	$64, 196(%rdi)
100013c30:	75 2a	jne	0x100013c5c
100013c32:	48 89 df	movq	%rbx, %rdi
100013c35:	be 2a 00 00 00	movl	$42, %esi
100013c3a:	e8 8f ec ff ff	callq	0x1000128ce
100013c3f:	e8 c3 a8 ff ff	callq	0x10000e507
100013c44:	48 8d 15 0f 01 00 00	leaq	271(%rip), %rdx
100013c4b:	48 89 c7	movq	%rax, %rdi
100013c4e:	48 89 de	movq	%rbx, %rsi
100013c51:	48 83 c4 08	addq	$8, %rsp
100013c55:	5b	popq	%rbx
100013c56:	5d	popq	%rbp
100013c57:	e9 84 dc 02 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
100013c5c:	48 8b 0d ed f1 04 00	movq	324077(%rip), %rcx
100013c63:	48 85 c9	testq	%rcx, %rcx
100013c66:	74 31	je	0x100013c99
100013c68:	48 81 c1 c8 00 00 00	addq	$200, %rcx
100013c6f:	48 8d 15 e5 57 03 00	leaq	219109(%rip), %rdx ## literal pool for: "System logger socket is already claimed by: %s"
100013c76:	48 89 df	movq	%rbx, %rdi
100013c79:	be 03 00 00 00	movl	$3, %esi
100013c7e:	31 c0	xorl	%eax, %eax
100013c80:	e8 dd f6 ff ff	callq	0x100013362
100013c85:	c7 83 c0 00 00 00 25 00 00 00	movl	$37, 192(%rbx)
100013c8f:	48 89 df	movq	%rbx, %rdi
100013c92:	be 01 00 00 00	movl	$1, %esi
100013c97:	eb 68	jmp	0x100013d01
100013c99:	48 89 1d b0 f1 04 00	movq	%rbx, 324016(%rip)
100013ca0:	bf 04 00 00 00	movl	$4, %edi
100013ca5:	e8 3b 98 ff ff	callq	0x10000d4e5
100013caa:	48 89 43 38	movq	%rax, 56(%rbx)
100013cae:	bf 01 00 00 00	movl	$1, %edi
100013cb3:	e8 2d 98 ff ff	callq	0x10000d4e5
100013cb8:	48 89 43 40	movq	%rax, 64(%rbx)
100013cbc:	48 c7 43 50 01 00 00 00	movq	$1, 80(%rbx)
100013cc4:	48 8d 05 35 e9 04 00	leaq	321845(%rip), %rax
100013ccb:	8b 00	movl	(%rax), %eax
100013ccd:	48 8b 4b 38	movq	56(%rbx), %rcx
100013cd1:	89 01	movl	%eax, (%rcx)
100013cd3:	c7 43 5c 02 00 00 00	movl	$2, 92(%rbx)
100013cda:	80 8b c4 00 00 00 04	orb	$4, 196(%rbx)
100013ce1:	83 39 ff	cmpl	$-1, (%rcx)
100013ce4:	75 16	jne	0x100013cfc
100013ce6:	48 8d 15 23 57 03 00	leaq	218915(%rip), %rdx ## literal pool for: "System logger socket was not opened during early boot. (Proceeding anyway)"
100013ced:	48 89 df	movq	%rbx, %rdi
100013cf0:	be 04 00 00 00	movl	$4, %esi
100013cf5:	31 c0	xorl	%eax, %eax
100013cf7:	e8 66 f6 ff ff	callq	0x100013362
100013cfc:	48 89 df	movq	%rbx, %rdi
100013cff:	31 f6	xorl	%esi, %esi
100013d01:	48 83 c4 08	addq	$8, %rsp
100013d05:	5b	popq	%rbx
100013d06:	5d	popq	%rbp
100013d07:	e9 00 00 00 00	jmp	0x100013d0c
100013d0c:	55	pushq	%rbp
100013d0d:	48 89 e5	movq	%rsp, %rbp
100013d10:	41 57	pushq	%r15
100013d12:	41 56	pushq	%r14
100013d14:	53	pushq	%rbx
100013d15:	50	pushq	%rax
100013d16:	41 89 f6	movl	%esi, %r14d
100013d19:	49 89 ff	movq	%rdi, %r15
100013d1c:	bf 10 00 00 00	movl	$16, %edi
100013d21:	e8 bf 97 ff ff	callq	0x10000d4e5
100013d26:	48 89 c3	movq	%rax, %rbx
100013d29:	4c 89 ff	movq	%r15, %rdi
100013d2c:	be 2b 00 00 00	movl	$43, %esi
100013d31:	e8 98 eb ff ff	callq	0x1000128ce
100013d36:	48 89 03	movq	%rax, (%rbx)
100013d39:	44 89 73 08	movl	%r14d, 8(%rbx)
100013d3d:	49 8b 7f 68	movq	104(%r15), %rdi
100013d41:	48 8d 15 0f 17 00 00	leaq	5903(%rip), %rdx
100013d48:	48 89 de	movq	%rbx, %rsi
100013d4b:	48 83 c4 08	addq	$8, %rsp
100013d4f:	5b	popq	%rbx
100013d50:	41 5e	popq	%r14
100013d52:	41 5f	popq	%r15
100013d54:	5d	popq	%rbp
100013d55:	e9 86 db 02 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
100013d5a:	55	pushq	%rbp
100013d5b:	48 89 e5	movq	%rsp, %rbp
100013d5e:	41 57	pushq	%r15
100013d60:	41 56	pushq	%r14
100013d62:	41 55	pushq	%r13
100013d64:	41 54	pushq	%r12
100013d66:	53	pushq	%rbx
100013d67:	48 81 ec 18 09 00 00	subq	$2328, %rsp
100013d6e:	49 89 ff	movq	%rdi, %r15
100013d71:	48 8b 05 b0 42 04 00	movq	279216(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100013d78:	48 8b 00	movq	(%rax), %rax
100013d7b:	48 89 45 d0	movq	%rax, -48(%rbp)
100013d7f:	48 83 bf 80 00 00 00 00	cmpq	$0, 128(%rdi)
100013d87:	0f 84 82 00 00 00	je	0x100013e0f
100013d8d:	48 8d 9d 40 f7 ff ff	leaq	-2240(%rbp), %rbx
100013d94:	ba 00 04 00 00	movl	$1024, %edx
100013d99:	48 89 df	movq	%rbx, %rdi
100013d9c:	be aa 00 00 00	movl	$170, %esi
100013da1:	e8 34 de 02 00	callq	0x100041bda ## symbol stub for: _memset
100013da6:	c6 03 00	movb	$0, (%rbx)
100013da9:	48 8d 35 54 5a 03 00	leaq	219732(%rip), %rsi ## literal pool for: "/private/tmp/com.apple.launchd.XXXXXXXXXX"
100013db0:	ba 00 04 00 00	movl	$1024, %edx
100013db5:	b9 00 04 00 00	movl	$1024, %ecx
100013dba:	48 89 df	movq	%rbx, %rdi
100013dbd:	e8 b6 d9 02 00	callq	0x100041778 ## symbol stub for: ___strlcpy_chk
100013dc2:	48 89 df	movq	%rbx, %rdi
100013dc5:	e8 22 de 02 00	callq	0x100041bec ## symbol stub for: _mkdtemp
100013dca:	48 85 c0	testq	%rax, %rax
100013dcd:	75 11	jne	0x100013de0
100013dcf:	e8 8c d9 02 00	callq	0x100041760 ## symbol stub for: ___error
100013dd4:	48 63 10	movslq	(%rax), %rdx
100013dd7:	48 85 d2	testq	%rdx, %rdx
100013dda:	0f 85 a9 0c 00 00	jne	0x100014a89
100013de0:	49 8d 97 c8 00 00 00	leaq	200(%r15), %rdx
100013de7:	48 8d 3d 14 4c 03 00	leaq	216084(%rip), %rdi ## literal pool for: "%s/%s"
100013dee:	48 8d b5 40 f7 ff ff	leaq	-2240(%rbp), %rsi
100013df5:	31 c0	xorl	%eax, %eax
100013df7:	e8 39 b3 ff ff	callq	0x10000f135
100013dfc:	48 89 c6	movq	%rax, %rsi
100013dff:	4d 8d af 88 00 00 00	leaq	136(%r15), %r13
100013e06:	49 89 87 88 00 00 00	movq	%rax, 136(%r15)
100013e0d:	eb 36	jmp	0x100013e45
100013e0f:	49 83 bf 88 00 00 00 00	cmpq	$0, 136(%r15)
100013e17:	0f 84 87 02 00 00	je	0x1000140a4
100013e1d:	4d 8d af 88 00 00 00	leaq	136(%r15), %r13
100013e24:	4c 8d b5 40 f7 ff ff	leaq	-2240(%rbp), %r14
100013e2b:	ba 00 04 00 00	movl	$1024, %edx
100013e30:	4c 89 f7	movq	%r14, %rdi
100013e33:	be aa 00 00 00	movl	$170, %esi
100013e38:	e8 9d dd 02 00	callq	0x100041bda ## symbol stub for: _memset
100013e3d:	41 c6 06 00	movb	$0, (%r14)
100013e41:	49 8b 75 00	movq	(%r13), %rsi
100013e45:	0f 57 c0	xorps	%xmm0, %xmm0
100013e48:	48 8d bd 42 ff ff ff	leaq	-190(%rbp), %rdi
100013e4f:	0f 29 47 fe	movaps	%xmm0, -2(%rdi)
100013e53:	0f 11 47 58	movups	%xmm0, 88(%rdi)
100013e57:	0f 29 47 4e	movaps	%xmm0, 78(%rdi)
100013e5b:	0f 29 47 3e	movaps	%xmm0, 62(%rdi)
100013e5f:	0f 29 47 2e	movaps	%xmm0, 46(%rdi)
100013e63:	0f 29 47 1e	movaps	%xmm0, 30(%rdi)
100013e67:	0f 29 47 0e	movaps	%xmm0, 14(%rdi)
100013e6b:	c6 47 ff 01	movb	$1, -1(%rdi)
100013e6f:	ba 67 00 00 00	movl	$103, %edx
100013e74:	e8 e9 df 02 00	callq	0x100041e62 ## symbol stub for: _strncpy
100013e79:	bf 04 00 00 00	movl	$4, %edi
100013e7e:	e8 62 96 ff ff	callq	0x10000d4e5
100013e83:	49 89 47 38	movq	%rax, 56(%r15)
100013e87:	bf 01 00 00 00	movl	$1, %edi
100013e8c:	e8 54 96 ff ff	callq	0x10000d4e5
100013e91:	49 89 47 40	movq	%rax, 64(%r15)
100013e95:	49 c7 47 50 01 00 00 00	movq	$1, 80(%r15)
100013e9d:	41 8b 77 5c	movl	92(%r15), %esi
100013ea1:	bf 01 00 00 00	movl	$1, %edi
100013ea6:	31 d2	xorl	%edx, %edx
100013ea8:	e8 5b df 02 00	callq	0x100041e08 ## symbol stub for: _socket
100013ead:	49 8b 4f 38	movq	56(%r15), %rcx
100013eb1:	89 01	movl	%eax, (%rcx)
100013eb3:	83 f8 ff	cmpl	$-1, %eax
100013eb6:	74 28	je	0x100013ee0
100013eb8:	41 f6 87 c4 00 00 00 02	testb	$2, 196(%r15)
100013ec0:	75 41	jne	0x100013f03
100013ec2:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
100013ec9:	89 c7	movl	%eax, %edi
100013ecb:	ba 6a 00 00 00	movl	$106, %edx
100013ed0:	e8 93 d9 02 00	callq	0x100041868 ## symbol stub for: _connect
100013ed5:	31 db	xorl	%ebx, %ebx
100013ed7:	83 f8 ff	cmpl	$-1, %eax
100013eda:	0f 85 92 0a 00 00	jne	0x100014972
100013ee0:	e8 7b d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013ee5:	48 63 10	movslq	(%rax), %rdx
100013ee8:	48 8d 3d 52 f4 ff ff	leaq	-2990(%rip), %rdi
100013eef:	4c 89 fe	movq	%r15, %rsi
100013ef2:	e8 b1 d8 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100013ef7:	e8 64 d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013efc:	8b 18	movl	(%rax), %ebx
100013efe:	e9 6f 0a 00 00	jmp	0x100014972
100013f03:	49 8b 7d 00	movq	(%r13), %rdi
100013f07:	48 85 ff	testq	%rdi, %rdi
100013f0a:	0f 84 0e 0c 00 00	je	0x100014b1e
100013f10:	e8 c5 df 02 00	callq	0x100041eda ## symbol stub for: _unlink
100013f15:	85 c0	testl	%eax, %eax
100013f17:	74 49	je	0x100013f62
100013f19:	e8 42 d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f1e:	83 38 02	cmpl	$2, (%rax)
100013f21:	74 3f	je	0x100013f62
100013f23:	e8 38 d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f28:	8b 38	movl	(%rax), %edi
100013f2a:	e8 df e1 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100013f2f:	48 89 c3	movq	%rax, %rbx
100013f32:	e8 29 d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f37:	44 8b 00	movl	(%rax), %r8d
100013f3a:	48 8d 15 ed 58 03 00	leaq	219373(%rip), %rdx ## literal pool for: "Failed to remove old socket: error=%s (%d)"
100013f41:	4c 89 ff	movq	%r15, %rdi
100013f44:	be 03 00 00 00	movl	$3, %esi
100013f49:	48 89 d9	movq	%rbx, %rcx
100013f4c:	31 c0	xorl	%eax, %eax
100013f4e:	e8 0f f4 ff ff	callq	0x100013362
100013f53:	e8 08 d8 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f58:	8b 18	movl	(%rax), %ebx
100013f5a:	85 db	testl	%ebx, %ebx
100013f5c:	0f 85 10 0a 00 00	jne	0x100014972
100013f62:	49 8b 47 38	movq	56(%r15), %rax
100013f66:	8b 38	movl	(%rax), %edi
100013f68:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
100013f6f:	ba 6a 00 00 00	movl	$106, %edx
100013f74:	e8 9b d8 02 00	callq	0x100041814 ## symbol stub for: _bind
100013f79:	85 c0	testl	%eax, %eax
100013f7b:	74 3f	je	0x100013fbc
100013f7d:	e8 de d7 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f82:	8b 38	movl	(%rax), %edi
100013f84:	e8 85 e1 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100013f89:	48 89 c3	movq	%rax, %rbx
100013f8c:	e8 cf d7 02 00	callq	0x100041760 ## symbol stub for: ___error
100013f91:	44 8b 00	movl	(%rax), %r8d
100013f94:	48 8d 15 be 58 03 00	leaq	219326(%rip), %rdx ## literal pool for: "Failed to bind() a socket: error=%s (%d)"
100013f9b:	4c 89 ff	movq	%r15, %rdi
100013f9e:	be 03 00 00 00	movl	$3, %esi
100013fa3:	48 89 d9	movq	%rbx, %rcx
100013fa6:	31 c0	xorl	%eax, %eax
100013fa8:	e8 b5 f3 ff ff	callq	0x100013362
100013fad:	e8 ae d7 02 00	callq	0x100041760 ## symbol stub for: ___error
100013fb2:	8b 18	movl	(%rax), %ebx
100013fb4:	85 db	testl	%ebx, %ebx
100013fb6:	0f 85 b6 09 00 00	jne	0x100014972
100013fbc:	48 8d 9d 40 fb ff ff	leaq	-1216(%rbp), %rbx
100013fc3:	be 00 04 00 00	movl	$1024, %esi
100013fc8:	48 89 df	movq	%rbx, %rdi
100013fcb:	e8 8a d7 02 00	callq	0x10004175a ## symbol stub for: ___bzero
100013fd0:	49 8b 7d 00	movq	(%r13), %rdi
100013fd4:	48 89 de	movq	%rbx, %rsi
100013fd7:	e8 e0 d8 02 00	callq	0x1000418bc ## symbol stub for: _dirname_r
100013fdc:	48 85 c0	testq	%rax, %rax
100013fdf:	0f 84 01 09 00 00	je	0x1000148e6
100013fe5:	48 8d bd 40 fb ff ff	leaq	-1216(%rbp), %rdi
100013fec:	be 00 00 10 00	movl	$1048576, %esi
100013ff1:	31 c0	xorl	%eax, %eax
100013ff3:	e8 1e dc 02 00	callq	0x100041c16 ## symbol stub for: _open
100013ff8:	85 c0	testl	%eax, %eax
100013ffa:	0f 88 3a 09 00 00	js	0x10001493a
100014000:	41 89 c4	movl	%eax, %r12d
100014003:	48 8d 9d 40 fb ff ff	leaq	-1216(%rbp), %rbx
10001400a:	be 00 04 00 00	movl	$1024, %esi
10001400f:	48 89 df	movq	%rbx, %rdi
100014012:	e8 43 d7 02 00	callq	0x10004175a ## symbol stub for: ___bzero
100014017:	49 8b 7d 00	movq	(%r13), %rdi
10001401b:	48 89 de	movq	%rbx, %rsi
10001401e:	e8 eb d7 02 00	callq	0x10004180e ## symbol stub for: _basename_r
100014023:	48 85 c0	testq	%rax, %rax
100014026:	0f 84 98 09 00 00	je	0x1000149c4
10001402c:	41 8b 57 60	movl	96(%r15), %edx
100014030:	41 8b 47 64	movl	100(%r15), %eax
100014034:	31 c9	xorl	%ecx, %ecx
100014036:	85 d2	testl	%edx, %edx
100014038:	0f 94 c1	sete	%cl
10001403b:	85 c0	testl	%eax, %eax
10001403d:	0f 45 c8	cmovnel	%eax, %ecx
100014040:	48 8d b5 40 fb ff ff	leaq	-1216(%rbp), %rsi
100014047:	44 89 e7	movl	%r12d, %edi
10001404a:	41 b8 20 00 00 00	movl	$32, %r8d
100014050:	e8 ab d9 02 00	callq	0x100041a00 ## symbol stub for: _fchownat
100014055:	85 c0	testl	%eax, %eax
100014057:	0f 84 92 09 00 00	je	0x1000149ef
10001405d:	4c 8d 35 b6 58 03 00	leaq	219318(%rip), %r14 ## literal pool for: "Failed to fchown() a socket: error=%s (%d)"
100014064:	e8 f7 d6 02 00	callq	0x100041760 ## symbol stub for: ___error
100014069:	8b 38	movl	(%rax), %edi
10001406b:	e8 9e e0 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100014070:	48 89 c3	movq	%rax, %rbx
100014073:	e8 e8 d6 02 00	callq	0x100041760 ## symbol stub for: ___error
100014078:	44 8b 00	movl	(%rax), %r8d
10001407b:	4c 89 ff	movq	%r15, %rdi
10001407e:	be 03 00 00 00	movl	$3, %esi
100014083:	4c 89 f2	movq	%r14, %rdx
100014086:	48 89 d9	movq	%rbx, %rcx
100014089:	31 c0	xorl	%eax, %eax
10001408b:	e8 d2 f2 ff ff	callq	0x100013362
100014090:	e8 cb d6 02 00	callq	0x100041760 ## symbol stub for: ___error
100014095:	8b 18	movl	(%rax), %ebx
100014097:	85 db	testl	%ebx, %ebx
100014099:	0f 85 00 0a 00 00	jne	0x100014a9f
10001409f:	e9 7b 09 00 00	jmp	0x100014a1f
1000140a4:	0f 57 c0	xorps	%xmm0, %xmm0
1000140a7:	0f 29 85 f0 f6 ff ff	movaps	%xmm0, -2320(%rbp)
1000140ae:	0f 29 85 e0 f6 ff ff	movaps	%xmm0, -2336(%rbp)
1000140b5:	0f 29 85 d0 f6 ff ff	movaps	%xmm0, -2352(%rbp)
1000140bc:	41 8b 87 b0 00 00 00	movl	176(%r15), %eax
1000140c3:	89 85 d4 f6 ff ff	movl	%eax, -2348(%rbp)
1000140c9:	41 8b 47 5c	movl	92(%r15), %eax
1000140cd:	89 85 d8 f6 ff ff	movl	%eax, -2344(%rbp)
1000140d3:	41 8b 87 b4 00 00 00	movl	180(%r15), %eax
1000140da:	89 85 dc f6 ff ff	movl	%eax, -2340(%rbp)
1000140e0:	41 f6 87 c4 00 00 00 02	testb	$2, 196(%r15)
1000140e8:	74 0a	je	0x1000140f4
1000140ea:	c7 85 d0 f6 ff ff 01 00 00 00	movl	$1, -2352(%rbp)
1000140f4:	48 8d 8d 20 f7 ff ff	leaq	-2272(%rbp), %rcx
1000140fb:	48 c7 01 00 00 00 00	movq	$0, (%rcx)
100014102:	49 8b bf 98 00 00 00	movq	152(%r15), %rdi
100014109:	49 8b b7 a8 00 00 00	movq	168(%r15), %rsi
100014110:	48 8d 95 d0 f6 ff ff	leaq	-2352(%rbp), %rdx
100014117:	e8 56 d9 02 00	callq	0x100041a72 ## symbol stub for: _getaddrinfo
10001411c:	85 c0	testl	%eax, %eax
10001411e:	0f 85 b2 09 00 00	jne	0x100014ad6
100014124:	48 8b 8d 20 f7 ff ff	movq	-2272(%rbp), %rcx
10001412b:	49 8b 47 50	movq	80(%r15), %rax
10001412f:	48 85 c9	testq	%rcx, %rcx
100014132:	74 10	je	0x100014144
100014134:	48 ff c0	incq	%rax
100014137:	48 8b 49 28	movq	40(%rcx), %rcx
10001413b:	48 85 c9	testq	%rcx, %rcx
10001413e:	75 f4	jne	0x100014134
100014140:	49 89 47 50	movq	%rax, 80(%r15)
100014144:	b9 04 00 00 00	movl	$4, %ecx
100014149:	48 f7 e1	mulq	%rcx
10001414c:	0f 80 d6 09 00 00	jo	0x100014b28
100014152:	48 89 c7	movq	%rax, %rdi
100014155:	e8 8b 93 ff ff	callq	0x10000d4e5
10001415a:	49 89 47 38	movq	%rax, 56(%r15)
10001415e:	49 8b 7f 50	movq	80(%r15), %rdi
100014162:	e8 7e 93 ff ff	callq	0x10000d4e5
100014167:	49 89 47 40	movq	%rax, 64(%r15)
10001416b:	4c 8b b5 20 f7 ff ff	movq	-2272(%rbp), %r14
100014172:	31 db	xorl	%ebx, %ebx
100014174:	4d 85 f6	testq	%r14, %r14
100014177:	0f 84 72 07 00 00	je	0x1000148ef
10001417d:	4c 8d a5 3c f7 ff ff	leaq	-2244(%rbp), %r12
100014184:	31 db	xorl	%ebx, %ebx
100014186:	4c 89 bd 08 f7 ff ff	movq	%r15, -2296(%rbp)
10001418d:	41 8b 7e 04	movl	4(%r14), %edi
100014191:	41 8b 76 08	movl	8(%r14), %esi
100014195:	41 8b 56 0c	movl	12(%r14), %edx
100014199:	e8 6a dc 02 00	callq	0x100041e08 ## symbol stub for: _socket
10001419e:	49 8b 4f 38	movq	56(%r15), %rcx
1000141a2:	89 04 99	movl	%eax, (%rcx,%rbx,4)
1000141a5:	83 f8 ff	cmpl	$-1, %eax
1000141a8:	0f 84 f3 00 00 00	je	0x1000142a1
1000141ae:	c7 85 3c f7 ff ff 01 00 00 00	movl	$1, -2244(%rbp)
1000141b8:	41 0f b7 87 c4 00 00 00	movzwl	196(%r15), %eax
1000141c0:	a8 02	testb	$2, %al
1000141c2:	75 2e	jne	0x1000141f2
1000141c4:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
1000141c7:	49 8b 76 20	movq	32(%r14), %rsi
1000141cb:	41 8b 56 10	movl	16(%r14), %edx
1000141cf:	e8 94 d6 02 00	callq	0x100041868 ## symbol stub for: _connect
1000141d4:	85 c0	testl	%eax, %eax
1000141d6:	0f 84 31 04 00 00	je	0x10001460d
1000141dc:	83 f8 ff	cmpl	$-1, %eax
1000141df:	0f 85 dd 06 00 00	jne	0x1000148c2
1000141e5:	4c 89 ff	movq	%r15, %rdi
1000141e8:	e8 d6 bd 02 00	callq	0x10003ffc3
1000141ed:	e9 d0 06 00 00	jmp	0x1000148c2
1000141f2:	41 8b 56 04	movl	4(%r14), %edx
1000141f6:	83 fa 02	cmpl	$2, %edx
1000141f9:	74 4a	je	0x100014245
1000141fb:	83 fa 1e	cmpl	$30, %edx
1000141fe:	0f 85 63 01 00 00	jne	0x100014367
100014204:	a8 20	testb	$32, %al
100014206:	0f 85 ea 00 00 00	jne	0x1000142f6
10001420c:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
10001420f:	be 29 00 00 00	movl	$41, %esi
100014214:	ba 1b 00 00 00	movl	$27, %edx
100014219:	4c 89 e1	movq	%r12, %rcx
10001421c:	41 b8 04 00 00 00	movl	$4, %r8d
100014222:	e8 bd db 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
100014227:	85 c0	testl	%eax, %eax
100014229:	0f 84 b4 00 00 00	je	0x1000142e3
10001422f:	83 f8 ff	cmpl	$-1, %eax
100014232:	0f 85 8a 06 00 00	jne	0x1000148c2
100014238:	4c 89 ff	movq	%r15, %rdi
10001423b:	e8 80 be 02 00	callq	0x1000400c0
100014240:	e9 7d 06 00 00	jmp	0x1000148c2
100014245:	a8 20	testb	$32, %al
100014247:	75 40	jne	0x100014289
100014249:	0f ba e0 09	btl	$9, %eax
10001424d:	0f 83 14 01 00 00	jae	0x100014367
100014253:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
100014256:	31 f6	xorl	%esi, %esi
100014258:	ba 14 00 00 00	movl	$20, %edx
10001425d:	4c 89 e1	movq	%r12, %rcx
100014260:	41 b8 04 00 00 00	movl	$4, %r8d
100014266:	e8 79 db 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
10001426b:	85 c0	testl	%eax, %eax
10001426d:	0f 84 be 00 00 00	je	0x100014331
100014273:	83 f8 ff	cmpl	$-1, %eax
100014276:	0f 85 46 06 00 00	jne	0x1000148c2
10001427c:	4c 89 ff	movq	%r15, %rdi
10001427f:	e8 8a be 02 00	callq	0x10004010e
100014284:	e9 39 06 00 00	jmp	0x1000148c2
100014289:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
10001428c:	e8 23 e5 01 00	callq	0x1000327b4
100014291:	49 8b 47 38	movq	56(%r15), %rax
100014295:	c7 04 98 ff ff ff ff	movl	$4294967295, (%rax,%rbx,4)
10001429c:	e9 21 06 00 00	jmp	0x1000148c2
1000142a1:	e8 ba d4 02 00	callq	0x100041760 ## symbol stub for: ___error
1000142a6:	48 63 10	movslq	(%rax), %rdx
1000142a9:	48 8d 3d 91 f0 ff ff	leaq	-3951(%rip), %rdi
1000142b0:	4c 89 fe	movq	%r15, %rsi
1000142b3:	e8 f0 d4 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000142b8:	41 8b 4e 04	movl	4(%r14), %ecx
1000142bc:	45 8b 46 08	movl	8(%r14), %r8d
1000142c0:	45 8b 4e 0c	movl	12(%r14), %r9d
1000142c4:	48 89 1c 24	movq	%rbx, (%rsp)
1000142c8:	4c 89 ff	movq	%r15, %rdi
1000142cb:	be 03 00 00 00	movl	$3, %esi
1000142d0:	48 8d 15 eb 56 03 00	leaq	218859(%rip), %rdx ## literal pool for: "Could not create socket for resolved listener (family = %d, type = %d, protocol = %d, idx = %lu: "
1000142d7:	31 c0	xorl	%eax, %eax
1000142d9:	e8 84 f0 ff ff	callq	0x100013362
1000142de:	e9 df 05 00 00	jmp	0x1000148c2
1000142e3:	49 8b 4f 38	movq	56(%r15), %rcx
1000142e7:	8b 04 99	movl	(%rcx,%rbx,4), %eax
1000142ea:	41 89 47 58	movl	%eax, 88(%r15)
1000142ee:	41 0f b7 87 c4 00 00 00	movzwl	196(%r15), %eax
1000142f6:	0f ba e0 09	btl	$9, %eax
1000142fa:	73 6b	jae	0x100014367
1000142fc:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
1000142ff:	be 29 00 00 00	movl	$41, %esi
100014304:	ba 3d 00 00 00	movl	$61, %edx
100014309:	4c 89 e1	movq	%r12, %rcx
10001430c:	41 b8 04 00 00 00	movl	$4, %r8d
100014312:	e8 cd da 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
100014317:	85 c0	testl	%eax, %eax
100014319:	74 4c	je	0x100014367
10001431b:	83 f8 ff	cmpl	$-1, %eax
10001431e:	0f 85 9e 05 00 00	jne	0x1000148c2
100014324:	4c 89 ff	movq	%r15, %rdi
100014327:	e8 bb bd 02 00	callq	0x1000400e7
10001432c:	e9 91 05 00 00	jmp	0x1000148c2
100014331:	49 8b 47 38	movq	56(%r15), %rax
100014335:	8b 3c 98	movl	(%rax,%rbx,4), %edi
100014338:	31 f6	xorl	%esi, %esi
10001433a:	ba 07 00 00 00	movl	$7, %edx
10001433f:	4c 89 e1	movq	%r12, %rcx
100014342:	41 b8 04 00 00 00	movl	$4, %r8d
100014348:	e8 97 da 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
10001434d:	85 c0	testl	%eax, %eax
10001434f:	74 16	je	0x100014367
100014351:	83 f8 ff	cmpl	$-1, %eax
100014354:	0f 85 68 05 00 00	jne	0x1000148c2
10001435a:	4c 89 ff	movq	%r15, %rdi
10001435d:	e8 d3 bd 02 00	callq	0x100040135
100014362:	e9 5b 05 00 00	jmp	0x1000148c2
100014367:	49 83 bf a0 00 00 00 00	cmpq	$0, 160(%r15)
10001436f:	49 8b 47 38	movq	56(%r15), %rax
100014373:	8b 3c 98	movl	(%rax,%rbx,4), %edi
100014376:	be ff ff 00 00	movl	$65535, %esi
10001437b:	74 2d	je	0x1000143aa
10001437d:	ba 00 02 00 00	movl	$512, %edx
100014382:	4c 89 e1	movq	%r12, %rcx
100014385:	41 b8 04 00 00 00	movl	$4, %r8d
10001438b:	e8 54 da 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
100014390:	85 c0	testl	%eax, %eax
100014392:	74 43	je	0x1000143d7
100014394:	83 f8 ff	cmpl	$-1, %eax
100014397:	0f 85 25 05 00 00	jne	0x1000148c2
10001439d:	4c 89 ff	movq	%r15, %rdi
1000143a0:	e8 f4 bc 02 00	callq	0x100040099
1000143a5:	e9 18 05 00 00	jmp	0x1000148c2
1000143aa:	ba 04 00 00 00	movl	$4, %edx
1000143af:	4c 89 e1	movq	%r12, %rcx
1000143b2:	41 b8 04 00 00 00	movl	$4, %r8d
1000143b8:	e8 27 da 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
1000143bd:	85 c0	testl	%eax, %eax
1000143bf:	74 16	je	0x1000143d7
1000143c1:	83 f8 ff	cmpl	$-1, %eax
1000143c4:	0f 85 f8 04 00 00	jne	0x1000148c2
1000143ca:	4c 89 ff	movq	%r15, %rdi
1000143cd:	e8 2b bc 02 00	callq	0x10003fffd
1000143d2:	e9 eb 04 00 00	jmp	0x1000148c2
1000143d7:	49 8b 47 38	movq	56(%r15), %rax
1000143db:	8b 3c 98	movl	(%rax,%rbx,4), %edi
1000143de:	49 8b 76 20	movq	32(%r14), %rsi
1000143e2:	41 8b 56 10	movl	16(%r14), %edx
1000143e6:	e8 29 d4 02 00	callq	0x100041814 ## symbol stub for: _bind
1000143eb:	85 c0	testl	%eax, %eax
1000143ed:	74 16	je	0x100014405
1000143ef:	83 f8 ff	cmpl	$-1, %eax
1000143f2:	0f 85 ca 04 00 00	jne	0x1000148c2
1000143f8:	4c 89 ff	movq	%r15, %rdi
1000143fb:	e8 24 bc 02 00	callq	0x100040024
100014400:	e9 bd 04 00 00	jmp	0x1000148c2
100014405:	49 8d 56 10	leaq	16(%r14), %rdx
100014409:	49 8b 47 38	movq	56(%r15), %rax
10001440d:	8b 3c 98	movl	(%rax,%rbx,4), %edi
100014410:	49 8b 76 20	movq	32(%r14), %rsi
100014414:	e8 9b d6 02 00	callq	0x100041ab4 ## symbol stub for: _getsockname
100014419:	85 c0	testl	%eax, %eax
10001441b:	74 16	je	0x100014433
10001441d:	83 f8 ff	cmpl	$-1, %eax
100014420:	0f 85 9c 04 00 00	jne	0x1000148c2
100014426:	4c 89 ff	movq	%r15, %rdi
100014429:	e8 1d bc 02 00	callq	0x10004004b
10001442e:	e9 8f 04 00 00	jmp	0x1000148c2
100014433:	49 8b bf a0 00 00 00	movq	160(%r15), %rdi
10001443a:	48 85 ff	testq	%rdi, %rdi
10001443d:	0f 84 93 01 00 00	je	0x1000145d6
100014443:	49 8b 47 38	movq	56(%r15), %rax
100014447:	8b 04 98	movl	(%rax,%rbx,4), %eax
10001444a:	89 85 30 f7 ff ff	movl	%eax, -2256(%rbp)
100014450:	45 8b 66 04	movl	4(%r14), %r12d
100014454:	49 8b 46 08	movq	8(%r14), %rax
100014458:	48 b9 00 00 00 00 aa aa aa aa	movabsq	$-6148914694099828736, %rcx
100014462:	48 89 8d 50 fb ff ff	movq	%rcx, -1200(%rbp)
100014469:	c7 85 40 fb ff ff 01 00 00 00	movl	$1, -1216(%rbp)
100014473:	44 89 a5 44 fb ff ff	movl	%r12d, -1212(%rbp)
10001447a:	48 89 85 48 fb ff ff	movq	%rax, -1208(%rbp)
100014481:	48 8d 85 58 fb ff ff	leaq	-1192(%rbp), %rax
100014488:	31 c9	xorl	%ecx, %ecx
10001448a:	48 89 48 10	movq	%rcx, 16(%rax)
10001448e:	0f 57 c0	xorps	%xmm0, %xmm0
100014491:	0f 11 00	movups	%xmm0, (%rax)
100014494:	48 89 8d 40 ff ff ff	movq	%rcx, -192(%rbp)
10001449b:	31 f6	xorl	%esi, %esi
10001449d:	48 8d 95 40 fb ff ff	leaq	-1216(%rbp), %rdx
1000144a4:	48 8d 8d 40 ff ff ff	leaq	-192(%rbp), %rcx
1000144ab:	e8 c2 d5 02 00	callq	0x100041a72 ## symbol stub for: _getaddrinfo
1000144b0:	85 c0	testl	%eax, %eax
1000144b2:	74 33	je	0x1000144e7
1000144b4:	41 89 c5	movl	%eax, %r13d
1000144b7:	89 c7	movl	%eax, %edi
1000144b9:	e8 ae d5 02 00	callq	0x100041a6c ## symbol stub for: _gai_strerror
1000144be:	4c 89 ff	movq	%r15, %rdi
1000144c1:	be 03 00 00 00	movl	$3, %esi
1000144c6:	48 8d 15 de 54 03 00	leaq	218334(%rip), %rdx ## literal pool for: "getaddrinfo(3): %d: %s"
1000144cd:	44 89 e9	movl	%r13d, %ecx
1000144d0:	49 89 c0	movq	%rax, %r8
1000144d3:	31 c0	xorl	%eax, %eax
1000144d5:	e8 88 ee ff ff	callq	0x100013362
1000144da:	44 89 ef	movl	%r13d, %edi
1000144dd:	e8 eb 0f 00 00	callq	0x1000154cd
1000144e2:	e9 e8 00 00 00	jmp	0x1000145cf
1000144e7:	4c 8b ad 40 ff ff ff	movq	-192(%rbp), %r13
1000144ee:	4d 85 ed	testq	%r13, %r13
1000144f1:	8b bd 30 f7 ff ff	movl	-2256(%rbp), %edi
1000144f7:	0f 84 c6 00 00 00	je	0x1000145c3
1000144fd:	41 83 fc 1e	cmpl	$30, %r12d
100014501:	74 41	je	0x100014544
100014503:	41 83 fc 02	cmpl	$2, %r12d
100014507:	0f 85 94 00 00 00	jne	0x1000145a1
10001450d:	c7 85 44 f7 ff ff aa aa aa aa	movl	$2863311530, -2236(%rbp)
100014517:	49 8b 45 20	movq	32(%r13), %rax
10001451b:	8b 40 04	movl	4(%rax), %eax
10001451e:	89 85 40 f7 ff ff	movl	%eax, -2240(%rbp)
100014524:	c7 85 44 f7 ff ff 00 00 00 00	movl	$0, -2236(%rbp)
10001452e:	31 f6	xorl	%esi, %esi
100014530:	ba 0c 00 00 00	movl	$12, %edx
100014535:	48 8d 8d 40 f7 ff ff	leaq	-2240(%rbp), %rcx
10001453c:	41 b8 08 00 00 00	movl	$8, %r8d
100014542:	eb 3a	jmp	0x10001457e
100014544:	49 8b 45 20	movq	32(%r13), %rax
100014548:	c7 85 50 f7 ff ff aa aa aa aa	movl	$2863311530, -2224(%rbp)
100014552:	0f 10 40 08	movups	8(%rax), %xmm0
100014556:	0f 29 85 40 f7 ff ff	movaps	%xmm0, -2240(%rbp)
10001455d:	c7 85 50 f7 ff ff 00 00 00 00	movl	$0, -2224(%rbp)
100014567:	be 29 00 00 00	movl	$41, %esi
10001456c:	ba 0c 00 00 00	movl	$12, %edx
100014571:	48 8d 8d 40 f7 ff ff	leaq	-2240(%rbp), %rcx
100014578:	41 b8 14 00 00 00	movl	$20, %r8d
10001457e:	e8 61 d8 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
100014583:	83 f8 ff	cmpl	$-1, %eax
100014586:	75 3b	jne	0x1000145c3
100014588:	e8 d3 d1 02 00	callq	0x100041760 ## symbol stub for: ___error
10001458d:	48 63 10	movslq	(%rax), %rdx
100014590:	48 8d 3d aa ed ff ff	leaq	-4694(%rip), %rdi
100014597:	4c 89 fe	movq	%r15, %rsi
10001459a:	e8 09 d2 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001459f:	eb 19	jmp	0x1000145ba
1000145a1:	4c 89 ff	movq	%r15, %rdi
1000145a4:	be 03 00 00 00	movl	$3, %esi
1000145a9:	48 8d 15 74 54 03 00	leaq	218228(%rip), %rdx ## literal pool for: "Unknown family encountered during multicast group bind: %d"
1000145b0:	44 89 e1	movl	%r12d, %ecx
1000145b3:	31 c0	xorl	%eax, %eax
1000145b5:	e8 a8 ed ff ff	callq	0x100013362
1000145ba:	4d 8b 6d 28	movq	40(%r13), %r13
1000145be:	e9 2b ff ff ff	jmp	0x1000144ee
1000145c3:	48 8b bd 40 ff ff ff	movq	-192(%rbp), %rdi
1000145ca:	e8 67 d4 02 00	callq	0x100041a36 ## symbol stub for: _freeaddrinfo
1000145cf:	4c 8d a5 3c f7 ff ff	leaq	-2244(%rbp), %r12
1000145d6:	41 8b 46 08	movl	8(%r14), %eax
1000145da:	83 c8 04	orl	$4, %eax
1000145dd:	83 f8 05	cmpl	$5, %eax
1000145e0:	75 2b	jne	0x10001460d
1000145e2:	49 8b 47 38	movq	56(%r15), %rax
1000145e6:	8b 3c 98	movl	(%rax,%rbx,4), %edi
1000145e9:	be ff ff ff ff	movl	$4294967295, %esi
1000145ee:	e8 39 d5 02 00	callq	0x100041b2c ## symbol stub for: _listen
1000145f3:	85 c0	testl	%eax, %eax
1000145f5:	74 16	je	0x10001460d
1000145f7:	83 f8 ff	cmpl	$-1, %eax
1000145fa:	0f 85 c2 02 00 00	jne	0x1000148c2
100014600:	4c 89 ff	movq	%r15, %rdi
100014603:	e8 6a ba 02 00	callq	0x100040072
100014608:	e9 b5 02 00 00	jmp	0x1000148c2
10001460d:	49 8b 7f 30	movq	48(%r15), %rdi
100014611:	49 8b 47 38	movq	56(%r15), %rax
100014615:	8b 04 98	movl	(%rax,%rbx,4), %eax
100014618:	89 85 1c f7 ff ff	movl	%eax, -2276(%rbp)
10001461e:	e8 1d 77 00 00	callq	0x10001bd40
100014623:	49 89 c5	movq	%rax, %r13
100014626:	80 38 2f	cmpb	$47, (%rax)
100014629:	75 69	jne	0x100014694
10001462b:	31 c0	xorl	%eax, %eax
10001462d:	48 89 85 28 f7 ff ff	movq	%rax, -2264(%rbp)
100014634:	4c 89 ef	movq	%r13, %rdi
100014637:	e8 1a d8 02 00	callq	0x100041e56 ## symbol stub for: _strlen
10001463c:	44 8d 40 01	leal	1(%rax), %r8d
100014640:	8b bd 1c f7 ff ff	movl	-2276(%rbp), %edi
100014646:	be ff ff 00 00	movl	$65535, %esi
10001464b:	ba 85 10 00 00	movl	$4229, %edx
100014650:	4c 89 e9	movq	%r13, %rcx
100014653:	e8 8c d7 02 00	callq	0x100041de4 ## symbol stub for: _setsockopt
100014658:	83 f8 ff	cmpl	$-1, %eax
10001465b:	0f 85 38 02 00 00	jne	0x100014899
100014661:	e8 fa d0 02 00	callq	0x100041760 ## symbol stub for: ___error
100014666:	83 38 2a	cmpl	$42, (%rax)
100014669:	0f 84 2a 02 00 00	je	0x100014899
10001466f:	e8 ec d0 02 00	callq	0x100041760 ## symbol stub for: ___error
100014674:	48 63 10	movslq	(%rax), %rdx
100014677:	48 85 d2	testq	%rdx, %rdx
10001467a:	0f 84 19 02 00 00	je	0x100014899
100014680:	48 8d 3d ba ec ff ff	leaq	-4934(%rip), %rdi
100014687:	4c 89 fe	movq	%r15, %rsi
10001468a:	e8 19 d1 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001468f:	e9 05 02 00 00	jmp	0x100014899
100014694:	4c 89 ad 30 f7 ff ff	movq	%r13, -2256(%rbp)
10001469b:	48 8d 3d bd 53 03 00	leaq	218045(%rip), %rdi ## literal pool for: "PATH"
1000146a2:	e8 dd d3 02 00	callq	0x100041a84 ## symbol stub for: _getenv
1000146a7:	48 85 c0	testq	%rax, %rax
1000146aa:	0f 84 b7 00 00 00	je	0x100014767
1000146b0:	48 89 c7	movq	%rax, %rdi
1000146b3:	e8 2a a9 ff ff	callq	0x10000efe2
1000146b8:	48 89 85 28 f7 ff ff	movq	%rax, -2264(%rbp)
1000146bf:	48 89 85 10 f7 ff ff	movq	%rax, -2288(%rbp)
1000146c6:	0f 28 05 b3 eb 02 00	movaps	191411(%rip), %xmm0
1000146cd:	0f 29 85 f0 f7 ff ff	movaps	%xmm0, -2064(%rbp)
1000146d4:	0f 29 85 e0 f7 ff ff	movaps	%xmm0, -2080(%rbp)
1000146db:	0f 29 85 d0 f7 ff ff	movaps	%xmm0, -2096(%rbp)
1000146e2:	0f 29 85 c0 f7 ff ff	movaps	%xmm0, -2112(%rbp)
1000146e9:	0f 29 85 b0 f7 ff ff	movaps	%xmm0, -2128(%rbp)
1000146f0:	0f 29 85 a0 f7 ff ff	movaps	%xmm0, -2144(%rbp)
1000146f7:	0f 29 85 90 f7 ff ff	movaps	%xmm0, -2160(%rbp)
1000146fe:	0f 29 85 80 f7 ff ff	movaps	%xmm0, -2176(%rbp)
100014705:	0f 29 85 70 f7 ff ff	movaps	%xmm0, -2192(%rbp)
10001470c:	0f 29 85 60 f7 ff ff	movaps	%xmm0, -2208(%rbp)
100014713:	0f 29 85 50 f7 ff ff	movaps	%xmm0, -2224(%rbp)
10001471a:	0f 29 85 40 f7 ff ff	movaps	%xmm0, -2240(%rbp)
100014721:	48 8d bd 10 f7 ff ff	leaq	-2288(%rbp), %rdi
100014728:	48 8d 35 91 53 03 00	leaq	218001(%rip), %rsi ## literal pool for: ":"
10001472f:	e8 40 d7 02 00	callq	0x100041e74 ## symbol stub for: _strsep
100014734:	48 85 c0	testq	%rax, %rax
100014737:	74 49	je	0x100014782
100014739:	45 31 ed	xorl	%r13d, %r13d
10001473c:	49 83 fd 18	cmpq	$24, %r13
100014740:	74 4c	je	0x10001478e
100014742:	4a 89 84 ed 40 f7 ff ff	movq	%rax, -2240(%rbp,%r13,8)
10001474a:	49 ff c5	incq	%r13
10001474d:	48 8d bd 10 f7 ff ff	leaq	-2288(%rbp), %rdi
100014754:	48 8d 35 65 53 03 00	leaq	217957(%rip), %rsi ## literal pool for: ":"
10001475b:	e8 14 d7 02 00	callq	0x100041e74 ## symbol stub for: _strsep
100014760:	48 85 c0	testq	%rax, %rax
100014763:	75 d7	jne	0x10001473c
100014765:	eb 43	jmp	0x1000147aa
100014767:	4c 89 ff	movq	%r15, %rdi
10001476a:	be 03 00 00 00	movl	$3, %esi
10001476f:	48 8d 15 ee 52 03 00	leaq	217838(%rip), %rdx ## literal pool for: "No PATH environment variable set. The application firewall will not work with this service."
100014776:	31 c0	xorl	%eax, %eax
100014778:	e8 e5 eb ff ff	callq	0x100013362
10001477d:	e9 23 01 00 00	jmp	0x1000148a5
100014782:	4c 8b ad 30 f7 ff ff	movq	-2256(%rbp), %r13
100014789:	e9 a6 fe ff ff	jmp	0x100014634
10001478e:	4c 89 ff	movq	%r15, %rdi
100014791:	be 04 00 00 00	movl	$4, %esi
100014796:	48 8d 15 25 53 03 00	leaq	217893(%rip), %rdx ## literal pool for: "PATH contains lots of paths. Some will be skipped."
10001479d:	31 c0	xorl	%eax, %eax
10001479f:	e8 be eb ff ff	callq	0x100013362
1000147a4:	41 bd 18 00 00 00	movl	$24, %r13d
1000147aa:	45 31 ff	xorl	%r15d, %r15d
1000147ad:	ba 00 04 00 00	movl	$1024, %edx
1000147b2:	4c 8d a5 40 fb ff ff	leaq	-1216(%rbp), %r12
1000147b9:	4c 89 e7	movq	%r12, %rdi
1000147bc:	be aa 00 00 00	movl	$170, %esi
1000147c1:	e8 14 d4 02 00	callq	0x100041bda ## symbol stub for: _memset
1000147c6:	4a 8b 8c fd 40 f7 ff ff	movq	-2240(%rbp,%r15,8), %rcx
1000147ce:	be 00 04 00 00	movl	$1024, %esi
1000147d3:	4c 89 e7	movq	%r12, %rdi
1000147d6:	48 8d 15 25 42 03 00	leaq	213541(%rip), %rdx ## literal pool for: "%s/%s"
1000147dd:	4c 8b 85 30 f7 ff ff	movq	-2256(%rbp), %r8
1000147e4:	31 c0	xorl	%eax, %eax
1000147e6:	e8 17 d6 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
1000147eb:	0f 28 05 8e ea 02 00	movaps	191118(%rip), %xmm0
1000147f2:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
1000147f6:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
1000147fa:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
1000147fe:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100014802:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100014806:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
10001480d:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100014814:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
10001481b:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100014822:	4c 89 e7	movq	%r12, %rdi
100014825:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
10001482c:	e8 e3 d5 02 00	callq	0x100041e14 ## symbol stub for: _stat$INODE64
100014831:	85 c0	testl	%eax, %eax
100014833:	74 15	je	0x10001484a
100014835:	49 ff c7	incq	%r15
100014838:	4d 39 fd	cmpq	%r15, %r13
10001483b:	0f 85 6c ff ff ff	jne	0x1000147ad
100014841:	4c 8b ad 30 f7 ff ff	movq	-2256(%rbp), %r13
100014848:	eb 22	jmp	0x10001486c
10001484a:	48 8b bd 28 f7 ff ff	movq	-2264(%rbp), %rdi
100014851:	e8 da d1 02 00	callq	0x100041a30 ## symbol stub for: _free
100014856:	48 8d bd 40 fb ff ff	leaq	-1216(%rbp), %rdi
10001485d:	e8 80 a7 ff ff	callq	0x10000efe2
100014862:	49 89 c5	movq	%rax, %r13
100014865:	48 89 85 28 f7 ff ff	movq	%rax, -2264(%rbp)
10001486c:	4d 85 ed	testq	%r13, %r13
10001486f:	4c 8b bd 08 f7 ff ff	movq	-2296(%rbp), %r15
100014876:	4c 8d a5 3c f7 ff ff	leaq	-2244(%rbp), %r12
10001487d:	0f 85 b1 fd ff ff	jne	0x100014634
100014883:	4c 89 ff	movq	%r15, %rdi
100014886:	be 03 00 00 00	movl	$3, %esi
10001488b:	48 8d 15 63 52 03 00	leaq	217699(%rip), %rdx ## literal pool for: "Socket's service points to a non-existent executable. The application firewall will not work with this service."
100014892:	31 c0	xorl	%eax, %eax
100014894:	e8 c9 ea ff ff	callq	0x100013362
100014899:	48 8b bd 28 f7 ff ff	movq	-2264(%rbp), %rdi
1000148a0:	e8 8b d1 02 00	callq	0x100041a30 ## symbol stub for: _free
1000148a5:	49 8b 47 38	movq	56(%r15), %rax
1000148a9:	8b 3c 98	movl	(%rax,%rbx,4), %edi
1000148ac:	be 04 00 00 00	movl	$4, %esi
1000148b1:	ba 04 00 00 00	movl	$4, %edx
1000148b6:	31 c0	xorl	%eax, %eax
1000148b8:	e8 4f d1 02 00	callq	0x100041a0c ## symbol stub for: _fcntl
1000148bd:	83 f8 ff	cmpl	$-1, %eax
1000148c0:	74 12	je	0x1000148d4
1000148c2:	48 ff c3	incq	%rbx
1000148c5:	4d 8b 76 28	movq	40(%r14), %r14
1000148c9:	4d 85 f6	testq	%r14, %r14
1000148cc:	0f 85 bb f8 ff ff	jne	0x10001418d
1000148d2:	eb 07	jmp	0x1000148db
1000148d4:	e8 11 b7 02 00	callq	0x10003ffea
1000148d9:	eb e7	jmp	0x1000148c2
1000148db:	48 8b bd 20 f7 ff ff	movq	-2272(%rbp), %rdi
1000148e2:	31 db	xorl	%ebx, %ebx
1000148e4:	eb 0b	jmp	0x1000148f1
1000148e6:	4c 8d 35 c9 4f 03 00	leaq	217033(%rip), %r14 ## literal pool for: "Failed to dirname_r() a socket path: error=%s (%d)"
1000148ed:	eb 52	jmp	0x100014941
1000148ef:	31 ff	xorl	%edi, %edi
1000148f1:	e8 40 d1 02 00	callq	0x100041a36 ## symbol stub for: _freeaddrinfo
1000148f6:	41 89 9f c0 00 00 00	movl	%ebx, 192(%r15)
1000148fd:	85 db	testl	%ebx, %ebx
1000148ff:	75 78	jne	0x100014979
100014901:	31 db	xorl	%ebx, %ebx
100014903:	41 f6 87 c4 00 00 00 10	testb	$16, 196(%r15)
10001490b:	74 6c	je	0x100014979
10001490d:	4c 89 ff	movq	%r15, %rdi
100014910:	be 2c 00 00 00	movl	$44, %esi
100014915:	e8 b4 df ff ff	callq	0x1000128ce
10001491a:	e8 db 9b ff ff	callq	0x10000e4fa
10001491f:	48 8d 15 64 0b 00 00	leaq	2916(%rip), %rdx
100014926:	48 89 c7	movq	%rax, %rdi
100014929:	4c 89 fe	movq	%r15, %rsi
10001492c:	e8 af cf 02 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
100014931:	41 8b 9f c0 00 00 00	movl	192(%r15), %ebx
100014938:	eb 3f	jmp	0x100014979
10001493a:	4c 8d 35 a8 4f 03 00	leaq	217000(%rip), %r14 ## literal pool for: "Failed to open() socket directory: error=%s (%d)"
100014941:	e8 1a ce 02 00	callq	0x100041760 ## symbol stub for: ___error
100014946:	8b 38	movl	(%rax), %edi
100014948:	e8 c1 d7 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001494d:	48 89 c3	movq	%rax, %rbx
100014950:	e8 0b ce 02 00	callq	0x100041760 ## symbol stub for: ___error
100014955:	44 8b 00	movl	(%rax), %r8d
100014958:	4c 89 ff	movq	%r15, %rdi
10001495b:	be 03 00 00 00	movl	$3, %esi
100014960:	4c 89 f2	movq	%r14, %rdx
100014963:	48 89 d9	movq	%rbx, %rcx
100014966:	31 c0	xorl	%eax, %eax
100014968:	e8 f5 e9 ff ff	callq	0x100013362
10001496d:	bb 6c 00 00 00	movl	$108, %ebx
100014972:	41 89 9f c0 00 00 00	movl	%ebx, 192(%r15)
100014979:	41 80 8f c4 00 00 00 04	orb	$4, 196(%r15)
100014981:	31 f6	xorl	%esi, %esi
100014983:	85 db	testl	%ebx, %ebx
100014985:	40 0f 95 c6	setne	%sil
100014989:	4c 89 ff	movq	%r15, %rdi
10001498c:	e8 7b f3 ff ff	callq	0x100013d0c
100014991:	4c 89 ff	movq	%r15, %rdi
100014994:	be 2a 00 00 00	movl	$42, %esi
100014999:	e8 b3 df ff ff	callq	0x100012951
10001499e:	48 8b 05 83 36 04 00	movq	276099(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000149a5:	48 8b 00	movq	(%rax), %rax
1000149a8:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000149ac:	0f 85 71 01 00 00	jne	0x100014b23
1000149b2:	48 81 c4 18 09 00 00	addq	$2328, %rsp
1000149b9:	5b	popq	%rbx
1000149ba:	41 5c	popq	%r12
1000149bc:	41 5d	popq	%r13
1000149be:	41 5e	popq	%r14
1000149c0:	41 5f	popq	%r15
1000149c2:	5d	popq	%rbp
1000149c3:	c3	retq
1000149c4:	e8 97 cd 02 00	callq	0x100041760 ## symbol stub for: ___error
1000149c9:	8b 38	movl	(%rax), %edi
1000149cb:	e8 3e d7 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000149d0:	48 89 c3	movq	%rax, %rbx
1000149d3:	e8 88 cd 02 00	callq	0x100041760 ## symbol stub for: ___error
1000149d8:	44 8b 00	movl	(%rax), %r8d
1000149db:	48 8d 15 a0 4e 03 00	leaq	216736(%rip), %rdx ## literal pool for: "Failed to basename_r() a socket path: error=%s (%d)"
1000149e2:	4c 89 ff	movq	%r15, %rdi
1000149e5:	be 03 00 00 00	movl	$3, %esi
1000149ea:	e9 74 ff ff ff	jmp	0x100014963
1000149ef:	49 83 bf 80 00 00 00 00	cmpq	$0, 128(%r15)
1000149f7:	74 26	je	0x100014a1f
1000149f9:	41 8b 77 60	movl	96(%r15), %esi
1000149fd:	85 f6	testl	%esi, %esi
1000149ff:	74 1e	je	0x100014a1f
100014a01:	48 8d bd 40 f7 ff ff	leaq	-2240(%rbp), %rdi
100014a08:	31 d2	xorl	%edx, %edx
100014a0a:	e8 1d ce 02 00	callq	0x10004182c ## symbol stub for: _chown
100014a0f:	85 c0	testl	%eax, %eax
100014a11:	74 0c	je	0x100014a1f
100014a13:	4c 8d 35 2b 4f 03 00	leaq	216875(%rip), %r14 ## literal pool for: "Failed to chown() secure socket directory: error=%s (%d)"
100014a1a:	e9 45 f6 ff ff	jmp	0x100014064
100014a1f:	66 b8 b6 01	movw	$438, %ax
100014a23:	41 f6 87 c4 00 00 00 08	testb	$8, 196(%r15)
100014a2b:	74 08	je	0x100014a35
100014a2d:	41 0f b7 87 90 00 00 00	movzwl	144(%r15), %eax
100014a35:	0f b7 d0	movzwl	%ax, %edx
100014a38:	48 8d b5 40 fb ff ff	leaq	-1216(%rbp), %rsi
100014a3f:	44 89 e7	movl	%r12d, %edi
100014a42:	b9 20 00 00 00	movl	$32, %ecx
100014a47:	e8 ae cf 02 00	callq	0x1000419fa ## symbol stub for: _fchmodat
100014a4c:	85 c0	testl	%eax, %eax
100014a4e:	74 4d	je	0x100014a9d
100014a50:	e8 0b cd 02 00	callq	0x100041760 ## symbol stub for: ___error
100014a55:	8b 38	movl	(%rax), %edi
100014a57:	e8 b2 d6 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100014a5c:	48 89 c3	movq	%rax, %rbx
100014a5f:	e8 fc cc 02 00	callq	0x100041760 ## symbol stub for: ___error
100014a64:	44 8b 00	movl	(%rax), %r8d
100014a67:	48 8d 15 10 4f 03 00	leaq	216848(%rip), %rdx ## literal pool for: "Failed to fchmodat() a socket: error=%s (%d)"
100014a6e:	4c 89 ff	movq	%r15, %rdi
100014a71:	be 03 00 00 00	movl	$3, %esi
100014a76:	48 89 d9	movq	%rbx, %rcx
100014a79:	31 c0	xorl	%eax, %eax
100014a7b:	e8 e2 e8 ff ff	callq	0x100013362
100014a80:	e8 db cc 02 00	callq	0x100041760 ## symbol stub for: ___error
100014a85:	8b 18	movl	(%rax), %ebx
100014a87:	eb 16	jmp	0x100014a9f
100014a89:	48 8d 3d b1 e8 ff ff	leaq	-5967(%rip), %rdi
100014a90:	4c 89 fe	movq	%r15, %rsi
100014a93:	e8 10 cd 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100014a98:	e9 43 f3 ff ff	jmp	0x100013de0
100014a9d:	31 db	xorl	%ebx, %ebx
100014a9f:	44 89 e7	movl	%r12d, %edi
100014aa2:	e8 0d dd 01 00	callq	0x1000327b4
100014aa7:	85 db	testl	%ebx, %ebx
100014aa9:	0f 85 c3 fe ff ff	jne	0x100014972
100014aaf:	41 8b 47 5c	movl	92(%r15), %eax
100014ab3:	31 db	xorl	%ebx, %ebx
100014ab5:	83 c8 04	orl	$4, %eax
100014ab8:	83 f8 05	cmpl	$5, %eax
100014abb:	0f 85 b1 fe ff ff	jne	0x100014972
100014ac1:	49 8b 47 38	movq	56(%r15), %rax
100014ac5:	8b 38	movl	(%rax), %edi
100014ac7:	be ff ff ff ff	movl	$4294967295, %esi
100014acc:	e8 5b d0 02 00	callq	0x100041b2c ## symbol stub for: _listen
100014ad1:	e9 01 f4 ff ff	jmp	0x100013ed7
100014ad6:	41 89 c6	movl	%eax, %r14d
100014ad9:	48 63 d0	movslq	%eax, %rdx
100014adc:	48 8d 3d 5e e8 ff ff	leaq	-6050(%rip), %rdi
100014ae3:	4c 89 fe	movq	%r15, %rsi
100014ae6:	e8 bd cc 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100014aeb:	44 89 f7	movl	%r14d, %edi
100014aee:	e8 79 cf 02 00	callq	0x100041a6c ## symbol stub for: _gai_strerror
100014af3:	48 8d 15 b1 4e 03 00	leaq	216753(%rip), %rdx ## literal pool for: "getaddrinfo(3): %d: %s"
100014afa:	4c 89 ff	movq	%r15, %rdi
100014afd:	be 03 00 00 00	movl	$3, %esi
100014b02:	44 89 f1	movl	%r14d, %ecx
100014b05:	49 89 c0	movq	%rax, %r8
100014b08:	31 c0	xorl	%eax, %eax
100014b0a:	e8 53 e8 ff ff	callq	0x100013362
100014b0f:	44 89 f7	movl	%r14d, %edi
100014b12:	e8 b6 09 00 00	callq	0x1000154cd
100014b17:	89 c3	movl	%eax, %ebx
100014b19:	e9 d8 fd ff ff	jmp	0x1000148f6
100014b1e:	e8 39 b6 02 00	callq	0x10004015c
100014b23:	e8 4a cc 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100014b28:	0f 0b	ud2
100014b2a:	55	pushq	%rbp
100014b2b:	48 89 e5	movq	%rsp, %rbp
100014b2e:	48 8b 8f 80 00 00 00	movq	128(%rdi), %rcx
100014b35:	48 85 c9	testq	%rcx, %rcx
100014b38:	74 0c	je	0x100014b46
100014b3a:	48 8b 87 88 00 00 00	movq	136(%rdi), %rax
100014b41:	48 89 0e	movq	%rcx, (%rsi)
100014b44:	eb 02	jmp	0x100014b48
100014b46:	31 c0	xorl	%eax, %eax
100014b48:	5d	popq	%rbp
100014b49:	c3	retq
100014b4a:	55	pushq	%rbp
100014b4b:	48 89 e5	movq	%rsp, %rbp
100014b4e:	41 57	pushq	%r15
100014b50:	41 56	pushq	%r14
100014b52:	41 55	pushq	%r13
100014b54:	41 54	pushq	%r12
100014b56:	53	pushq	%rbx
100014b57:	48 83 ec 58	subq	$88, %rsp
100014b5b:	8b 87 c4 00 00 00	movl	196(%rdi), %eax
100014b61:	0f ba e0 08	btl	$8, %eax
100014b65:	0f 82 6b 01 00 00	jb	0x100014cd6
100014b6b:	84 c0	testb	%al, %al
100014b6d:	0f 88 6c 01 00 00	js	0x100014cdf
100014b73:	49 89 fd	movq	%rdi, %r13
100014b76:	48 83 7f 48 00	cmpq	$0, 72(%rdi)
100014b7b:	0f 85 50 01 00 00	jne	0x100014cd1
100014b81:	b8 08 00 00 00	movl	$8, %eax
100014b86:	49 f7 65 50	mulq	80(%r13)
100014b8a:	0f 80 5d 01 00 00	jo	0x100014ced
100014b90:	48 89 c7	movq	%rax, %rdi
100014b93:	e8 4d 89 ff ff	callq	0x10000d4e5
100014b98:	49 89 45 48	movq	%rax, 72(%r13)
100014b9c:	49 8b 45 50	movq	80(%r13), %rax
100014ba0:	48 85 c0	testq	%rax, %rax
100014ba3:	0f 84 11 01 00 00	je	0x100014cba
100014ba9:	45 31 ff	xorl	%r15d, %r15d
100014bac:	49 8b 4d 38	movq	56(%r13), %rcx
100014bb0:	46 8b 24 b9	movl	(%rcx,%r15,4), %r12d
100014bb4:	41 83 fc ff	cmpl	$-1, %r12d
100014bb8:	0f 84 f0 00 00 00	je	0x100014cae
100014bbe:	44 89 e7	movl	%r12d, %edi
100014bc1:	e8 1c ce 02 00	callq	0x1000419e2 ## symbol stub for: _dup
100014bc6:	83 f8 ff	cmpl	$-1, %eax
100014bc9:	0f 84 b2 00 00 00	je	0x100014c81
100014bcf:	85 c0	testl	%eax, %eax
100014bd1:	0f 88 af 00 00 00	js	0x100014c86
100014bd7:	48 63 d8	movslq	%eax, %rbx
100014bda:	e8 1b 99 ff ff	callq	0x10000e4fa
100014bdf:	48 8b 3d 82 34 04 00	movq	275586(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_read
100014be6:	48 89 de	movq	%rbx, %rsi
100014be9:	31 d2	xorl	%edx, %edx
100014beb:	48 89 c1	movq	%rax, %rcx
100014bee:	e8 8f cd 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100014bf3:	49 89 c6	movq	%rax, %r14
100014bf6:	48 89 c7	movq	%rax, %rdi
100014bf9:	4c 89 ee	movq	%r13, %rsi
100014bfc:	e8 75 cd 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100014c01:	48 8b 1d 10 34 04 00	movq	275472(%rip), %rbx ## literal pool symbol address: __NSConcreteStackBlock
100014c08:	48 89 5d a8	movq	%rbx, -88(%rbp)
100014c0c:	b8 00 00 00 40	movl	$1073741824, %eax
100014c11:	48 89 45 b0	movq	%rax, -80(%rbp)
100014c15:	48 8d 05 48 09 00 00	leaq	2376(%rip), %rax
100014c1c:	48 89 45 b8	movq	%rax, -72(%rbp)
100014c20:	48 8d 05 41 5f 04 00	leaq	286529(%rip), %rax
100014c27:	48 89 45 c0	movq	%rax, -64(%rbp)
100014c2b:	4c 89 75 c8	movq	%r14, -56(%rbp)
100014c2f:	44 89 65 d0	movl	%r12d, -48(%rbp)
100014c33:	4c 89 f7	movq	%r14, %rdi
100014c36:	48 8d 75 a8	leaq	-88(%rbp), %rsi
100014c3a:	e8 61 cd 02 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
100014c3f:	48 89 5d 80	movq	%rbx, -128(%rbp)
100014c43:	b8 00 00 00 40	movl	$1073741824, %eax
100014c48:	48 89 45 88	movq	%rax, -120(%rbp)
100014c4c:	48 8d 05 64 09 00 00	leaq	2404(%rip), %rax
100014c53:	48 89 45 90	movq	%rax, -112(%rbp)
100014c57:	48 8d 05 2a 5f 04 00	leaq	286506(%rip), %rax
100014c5e:	48 89 45 98	movq	%rax, -104(%rbp)
100014c62:	4c 89 75 a0	movq	%r14, -96(%rbp)
100014c66:	4c 89 f7	movq	%r14, %rdi
100014c69:	48 8d 75 80	leaq	-128(%rbp), %rsi
100014c6d:	e8 3a cd 02 00	callq	0x1000419ac ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler
100014c72:	4c 89 f7	movq	%r14, %rdi
100014c75:	e8 48 cc 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100014c7a:	4d 85 f6	testq	%r14, %r14
100014c7d:	75 23	jne	0x100014ca2
100014c7f:	eb 05	jmp	0x100014c86
100014c81:	e8 eb b4 02 00	callq	0x100040171
100014c86:	4c 89 ef	movq	%r13, %rdi
100014c89:	be 04 00 00 00	movl	$4, %esi
100014c8e:	48 8d 15 46 48 03 00	leaq	215110(%rip), %rdx ## literal pool for: "Unable to monitor socket #%zu"
100014c95:	4c 89 f9	movq	%r15, %rcx
100014c98:	31 c0	xorl	%eax, %eax
100014c9a:	e8 c3 e6 ff ff	callq	0x100013362
100014c9f:	45 31 f6	xorl	%r14d, %r14d
100014ca2:	49 8b 45 48	movq	72(%r13), %rax
100014ca6:	4e 89 34 f8	movq	%r14, (%rax,%r15,8)
100014caa:	49 8b 45 50	movq	80(%r13), %rax
100014cae:	49 ff c7	incq	%r15
100014cb1:	49 39 c7	cmpq	%rax, %r15
100014cb4:	0f 82 f2 fe ff ff	jb	0x100014bac
100014cba:	41 80 8d c5 00 00 00 01	orb	$1, 197(%r13)
100014cc2:	48 83 c4 58	addq	$88, %rsp
100014cc6:	5b	popq	%rbx
100014cc7:	41 5c	popq	%r12
100014cc9:	41 5d	popq	%r13
100014ccb:	41 5e	popq	%r14
100014ccd:	41 5f	popq	%r15
100014ccf:	5d	popq	%rbp
100014cd0:	c3	retq
100014cd1:	e8 ae b4 02 00	callq	0x100040184
100014cd6:	48 8d 3d ad 47 03 00	leaq	214957(%rip), %rdi ## literal pool for: "attempt to watch socket that is already watched"
100014cdd:	eb 07	jmp	0x100014ce6
100014cdf:	48 8d 3d d4 47 03 00	leaq	214996(%rip), %rdi ## literal pool for: "attempt to watch canceled socket"
100014ce6:	31 c0	xorl	%eax, %eax
100014ce8:	e8 25 f7 01 00	callq	0x100034412
100014ced:	0f 0b	ud2
100014cef:	55	pushq	%rbp
100014cf0:	48 89 e5	movq	%rsp, %rbp
100014cf3:	41 56	pushq	%r14
100014cf5:	53	pushq	%rbx
100014cf6:	8b 87 c4 00 00 00	movl	196(%rdi), %eax
100014cfc:	0f ba e0 08	btl	$8, %eax
100014d00:	0f 83 82 00 00 00	jae	0x100014d88
100014d06:	84 c0	testb	%al, %al
100014d08:	0f 88 83 00 00 00	js	0x100014d91
100014d0e:	49 89 fe	movq	%rdi, %r14
100014d11:	48 8b 7f 48	movq	72(%rdi), %rdi
100014d15:	48 85 ff	testq	%rdi, %rdi
100014d18:	74 69	je	0x100014d83
100014d1a:	49 8b 46 50	movq	80(%r14), %rax
100014d1e:	48 85 c0	testq	%rax, %rax
100014d21:	74 41	je	0x100014d64
100014d23:	31 db	xorl	%ebx, %ebx
100014d25:	49 8b 4e 38	movq	56(%r14), %rcx
100014d29:	49 8b 56 48	movq	72(%r14), %rdx
100014d2d:	83 3c 99 ff	cmpl	$-1, (%rcx,%rbx,4)
100014d31:	48 8b 3c da	movq	(%rdx,%rbx,8), %rdi
100014d35:	74 1c	je	0x100014d53
100014d37:	48 85 ff	testq	%rdi, %rdi
100014d3a:	74 1c	je	0x100014d58
100014d3c:	e8 3b cc 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100014d41:	49 8b 46 48	movq	72(%r14), %rax
100014d45:	48 c7 04 d8 00 00 00 00	movq	$0, (%rax,%rbx,8)
100014d4d:	49 8b 46 50	movq	80(%r14), %rax
100014d51:	eb 05	jmp	0x100014d58
100014d53:	48 85 ff	testq	%rdi, %rdi
100014d56:	75 26	jne	0x100014d7e
100014d58:	48 ff c3	incq	%rbx
100014d5b:	48 39 c3	cmpq	%rax, %rbx
100014d5e:	72 c5	jb	0x100014d25
100014d60:	49 8b 7e 48	movq	72(%r14), %rdi
100014d64:	e8 c7 cc 02 00	callq	0x100041a30 ## symbol stub for: _free
100014d69:	49 c7 46 48 00 00 00 00	movq	$0, 72(%r14)
100014d71:	41 80 a6 c5 00 00 00 fe	andb	$-2, 197(%r14)
100014d79:	5b	popq	%rbx
100014d7a:	41 5e	popq	%r14
100014d7c:	5d	popq	%rbp
100014d7d:	c3	retq
100014d7e:	e8 2b b4 02 00	callq	0x1000401ae
100014d83:	e8 11 b4 02 00	callq	0x100040199
100014d88:	48 8d 3d 6a 47 03 00	leaq	214890(%rip), %rdi ## literal pool for: "attempt to ignore socket that is already ignored"
100014d8f:	eb 07	jmp	0x100014d98
100014d91:	48 8d 3d 92 47 03 00	leaq	214930(%rip), %rdi ## literal pool for: "attempt to ignore canceled socket"
100014d98:	31 c0	xorl	%eax, %eax
100014d9a:	e8 73 f6 01 00	callq	0x100034412
100014d9f:	55	pushq	%rbp
100014da0:	48 89 e5	movq	%rsp, %rbp
100014da3:	41 56	pushq	%r14
100014da5:	53	pushq	%rbx
100014da6:	b8 25 00 00 00	movl	$37, %eax
100014dab:	f6 87 c4 00 00 00 01	testb	$1, 196(%rdi)
100014db2:	75 61	jne	0x100014e15
100014db4:	49 89 fe	movq	%rdi, %r14
100014db7:	48 8b 47 38	movq	56(%rdi), %rax
100014dbb:	48 89 06	movq	%rax, (%rsi)
100014dbe:	48 8b 47 50	movq	80(%rdi), %rax
100014dc2:	48 89 01	movq	%rax, (%rcx)
100014dc5:	48 85 d2	testq	%rdx, %rdx
100014dc8:	74 07	je	0x100014dd1
100014dca:	49 8b 46 40	movq	64(%r14), %rax
100014dce:	48 89 02	movq	%rax, (%rdx)
100014dd1:	49 83 7e 50 00	cmpq	$0, 80(%r14)
100014dd6:	74 33	je	0x100014e0b
100014dd8:	31 db	xorl	%ebx, %ebx
100014dda:	49 8b 46 38	movq	56(%r14), %rax
100014dde:	8b 3c 98	movl	(%rax,%rbx,4), %edi
100014de1:	83 ff ff	cmpl	$-1, %edi
100014de4:	74 13	je	0x100014df9
100014de6:	be 04 00 00 00	movl	$4, %esi
100014deb:	31 d2	xorl	%edx, %edx
100014ded:	31 c0	xorl	%eax, %eax
100014def:	e8 18 cc 02 00	callq	0x100041a0c ## symbol stub for: _fcntl
100014df4:	83 f8 ff	cmpl	$-1, %eax
100014df7:	74 0b	je	0x100014e04
100014df9:	48 ff c3	incq	%rbx
100014dfc:	49 3b 5e 50	cmpq	80(%r14), %rbx
100014e00:	72 d8	jb	0x100014dda
100014e02:	eb 07	jmp	0x100014e0b
100014e04:	e8 ba b3 02 00	callq	0x1000401c3
100014e09:	eb ee	jmp	0x100014df9
100014e0b:	41 80 8e c4 00 00 00 01	orb	$1, 196(%r14)
100014e13:	31 c0	xorl	%eax, %eax
100014e15:	5b	popq	%rbx
100014e16:	41 5e	popq	%r14
100014e18:	5d	popq	%rbp
100014e19:	c3	retq
100014e1a:	55	pushq	%rbp
100014e1b:	48 89 e5	movq	%rsp, %rbp
100014e1e:	48 8b 47 38	movq	56(%rdi), %rax
100014e22:	48 89 06	movq	%rax, (%rsi)
100014e25:	48 8b 47 50	movq	80(%rdi), %rax
100014e29:	48 89 02	movq	%rax, (%rdx)
100014e2c:	5d	popq	%rbp
100014e2d:	c3	retq
100014e2e:	55	pushq	%rbp
100014e2f:	48 89 e5	movq	%rsp, %rbp
100014e32:	8b 87 c0 00 00 00	movl	192(%rdi), %eax
100014e38:	5d	popq	%rbp
100014e39:	c3	retq
100014e3a:	55	pushq	%rbp
100014e3b:	48 89 e5	movq	%rsp, %rbp
100014e3e:	41 56	pushq	%r14
100014e40:	53	pushq	%rbx
100014e41:	80 a7 c4 00 00 00 fe	andb	$-2, 196(%rdi)
100014e48:	48 8b 47 50	movq	80(%rdi), %rax
100014e4c:	48 85 c0	testq	%rax, %rax
100014e4f:	74 44	je	0x100014e95
100014e51:	49 89 fe	movq	%rdi, %r14
100014e54:	31 db	xorl	%ebx, %ebx
100014e56:	49 8b 4e 38	movq	56(%r14), %rcx
100014e5a:	8b 3c 99	movl	(%rcx,%rbx,4), %edi
100014e5d:	83 ff ff	cmpl	$-1, %edi
100014e60:	74 22	je	0x100014e84
100014e62:	be 04 00 00 00	movl	$4, %esi
100014e67:	ba 04 00 00 00	movl	$4, %edx
100014e6c:	31 c0	xorl	%eax, %eax
100014e6e:	e8 99 cb 02 00	callq	0x100041a0c ## symbol stub for: _fcntl
100014e73:	83 f8 ff	cmpl	$-1, %eax
100014e76:	74 16	je	0x100014e8e
100014e78:	49 8b 46 40	movq	64(%r14), %rax
100014e7c:	c6 04 18 00	movb	$0, (%rax,%rbx)
100014e80:	49 8b 46 50	movq	80(%r14), %rax
100014e84:	48 ff c3	incq	%rbx
100014e87:	48 39 c3	cmpq	%rax, %rbx
100014e8a:	72 ca	jb	0x100014e56
100014e8c:	eb 07	jmp	0x100014e95
100014e8e:	e8 43 b3 02 00	callq	0x1000401d6
100014e93:	eb e3	jmp	0x100014e78
100014e95:	5b	popq	%rbx
100014e96:	41 5e	popq	%r14
100014e98:	5d	popq	%rbp
100014e99:	c3	retq
100014e9a:	55	pushq	%rbp
100014e9b:	48 89 e5	movq	%rsp, %rbp
100014e9e:	53	pushq	%rbx
100014e9f:	50	pushq	%rax
100014ea0:	48 89 fb	movq	%rdi, %rbx
100014ea3:	8b 87 c4 00 00 00	movl	196(%rdi), %eax
100014ea9:	0f ba e0 08	btl	$8, %eax
100014ead:	73 0f	jae	0x100014ebe
100014eaf:	48 89 df	movq	%rbx, %rdi
100014eb2:	e8 38 fe ff ff	callq	0x100014cef
100014eb7:	0f b7 83 c4 00 00 00	movzwl	196(%rbx), %eax
100014ebe:	0d 80 00 00 00	orl	$128, %eax
100014ec3:	66 89 83 c4 00 00 00	movw	%ax, 196(%rbx)
100014eca:	48 83 c4 08	addq	$8, %rsp
100014ece:	5b	popq	%rbx
100014ecf:	5d	popq	%rbp
100014ed0:	c3	retq
100014ed1:	55	pushq	%rbp
100014ed2:	48 89 e5	movq	%rsp, %rbp
100014ed5:	41 57	pushq	%r15
100014ed7:	41 56	pushq	%r14
100014ed9:	41 55	pushq	%r13
100014edb:	41 54	pushq	%r12
100014edd:	53	pushq	%rbx
100014ede:	48 81 ec a8 00 00 00	subq	$168, %rsp
100014ee5:	48 89 d1	movq	%rdx, %rcx
100014ee8:	48 8b 05 39 31 04 00	movq	274745(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100014eef:	48 8b 00	movq	(%rax), %rax
100014ef2:	48 89 45 d0	movq	%rax, -48(%rbp)
100014ef6:	b8 04 00 00 00	movl	$4, %eax
100014efb:	48 f7 67 50	mulq	80(%rdi)
100014eff:	0f 80 45 01 00 00	jo	0x10001504a
100014f05:	48 89 fb	movq	%rdi, %rbx
100014f08:	48 89 b5 40 ff ff ff	movq	%rsi, -192(%rbp)
100014f0f:	48 89 8d 38 ff ff ff	movq	%rcx, -200(%rbp)
100014f16:	48 89 c7	movq	%rax, %rdi
100014f19:	e8 c7 85 ff ff	callq	0x10000d4e5
100014f1e:	49 89 c5	movq	%rax, %r13
100014f21:	48 8b 43 50	movq	80(%rbx), %rax
100014f25:	45 31 ff	xorl	%r15d, %r15d
100014f28:	48 85 c0	testq	%rax, %rax
100014f2b:	0f 84 ad 00 00 00	je	0x100014fde
100014f31:	45 31 e4	xorl	%r12d, %r12d
100014f34:	48 8b 4b 38	movq	56(%rbx), %rcx
100014f38:	42 83 3c a1 ff	cmpl	$-1, (%rcx,%r12,4)
100014f3d:	0f 84 86 00 00 00	je	0x100014fc9
100014f43:	0f 28 05 36 e3 02 00	movaps	189238(%rip), %xmm0
100014f4a:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100014f4e:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100014f52:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100014f56:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100014f5a:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100014f5e:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100014f65:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100014f6c:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100014f73:	c7 85 4c ff ff ff 80 00 00 00	movl	$128, -180(%rbp)
100014f7d:	42 8b 3c a1	movl	(%rcx,%r12,4), %edi
100014f81:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
100014f88:	48 8d 95 4c ff ff ff	leaq	-180(%rbp), %rdx
100014f8f:	e8 4a c8 02 00	callq	0x1000417de ## symbol stub for: _accept
100014f94:	83 f8 ff	cmpl	$-1, %eax
100014f97:	74 22	je	0x100014fbb
100014f99:	41 89 c6	movl	%eax, %r14d
100014f9c:	89 c7	movl	%eax, %edi
100014f9e:	be 04 00 00 00	movl	$4, %esi
100014fa3:	31 d2	xorl	%edx, %edx
100014fa5:	31 c0	xorl	%eax, %eax
100014fa7:	e8 60 ca 02 00	callq	0x100041a0c ## symbol stub for: _fcntl
100014fac:	83 f8 ff	cmpl	$-1, %eax
100014faf:	74 26	je	0x100014fd7
100014fb1:	47 89 74 bd 00	movl	%r14d, (%r13,%r15,4)
100014fb6:	49 ff c7	incq	%r15
100014fb9:	eb 0a	jmp	0x100014fc5
100014fbb:	e8 a0 c7 02 00	callq	0x100041760 ## symbol stub for: ___error
100014fc0:	83 38 23	cmpl	$35, (%rax)
100014fc3:	75 5a	jne	0x10001501f
100014fc5:	48 8b 43 50	movq	80(%rbx), %rax
100014fc9:	49 ff c4	incq	%r12
100014fcc:	49 39 c4	cmpq	%rax, %r12
100014fcf:	0f 82 5f ff ff ff	jb	0x100014f34
100014fd5:	eb 07	jmp	0x100014fde
100014fd7:	e8 0d b2 02 00	callq	0x1000401e9
100014fdc:	eb d3	jmp	0x100014fb1
100014fde:	4d 85 ed	testq	%r13, %r13
100014fe1:	74 14	je	0x100014ff7
100014fe3:	48 8b 85 40 ff ff ff	movq	-192(%rbp), %rax
100014fea:	4c 89 28	movq	%r13, (%rax)
100014fed:	48 8b 85 38 ff ff ff	movq	-200(%rbp), %rax
100014ff4:	4c 89 38	movq	%r15, (%rax)
100014ff7:	45 31 f6	xorl	%r14d, %r14d
100014ffa:	48 8b 05 27 30 04 00	movq	274471(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100015001:	48 8b 00	movq	(%rax), %rax
100015004:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100015008:	75 42	jne	0x10001504c
10001500a:	44 89 f0	movl	%r14d, %eax
10001500d:	48 81 c4 a8 00 00 00	addq	$168, %rsp
100015014:	5b	popq	%rbx
100015015:	41 5c	popq	%r12
100015017:	41 5d	popq	%r13
100015019:	41 5e	popq	%r14
10001501b:	41 5f	popq	%r15
10001501d:	5d	popq	%rbp
10001501e:	c3	retq
10001501f:	e8 3c c7 02 00	callq	0x100041760 ## symbol stub for: ___error
100015024:	44 8b 30	movl	(%rax), %r14d
100015027:	4d 85 ff	testq	%r15, %r15
10001502a:	74 14	je	0x100015040
10001502c:	31 db	xorl	%ebx, %ebx
10001502e:	41 8b 7c 9d 00	movl	(%r13,%rbx,4), %edi
100015033:	e8 7c d7 01 00	callq	0x1000327b4
100015038:	48 ff c3	incq	%rbx
10001503b:	49 39 df	cmpq	%rbx, %r15
10001503e:	75 ee	jne	0x10001502e
100015040:	4c 89 ef	movq	%r13, %rdi
100015043:	e8 e8 c9 02 00	callq	0x100041a30 ## symbol stub for: _free
100015048:	eb b0	jmp	0x100014ffa
10001504a:	0f 0b	ud2
10001504c:	e8 21 c7 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100015051:	55	pushq	%rbp
100015052:	48 89 e5	movq	%rsp, %rbp
100015055:	41 57	pushq	%r15
100015057:	41 56	pushq	%r14
100015059:	41 55	pushq	%r13
10001505b:	41 54	pushq	%r12
10001505d:	53	pushq	%rbx
10001505e:	48 83 ec 18	subq	$24, %rsp
100015062:	49 89 d4	movq	%rdx, %r12
100015065:	48 89 f3	movq	%rsi, %rbx
100015068:	49 89 fe	movq	%rdi, %r14
10001506b:	48 8d 8f c8 00 00 00	leaq	200(%rdi), %rcx
100015072:	48 8d 15 d3 44 03 00	leaq	214227(%rip), %rdx ## literal pool for: "\"%s\" = {"
100015079:	48 89 f7	movq	%rsi, %rdi
10001507c:	4c 89 e6	movq	%r12, %rsi
10001507f:	31 c0	xorl	%eax, %eax
100015081:	e8 ec 3b 02 00	callq	0x100038c72
100015086:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
10001508e:	a8 04	testb	$4, %al
100015090:	75 11	jne	0x1000150a3
100015092:	49 8d 74 24 01	leaq	1(%r12), %rsi
100015097:	48 8d 15 b7 44 03 00	leaq	214199(%rip), %rdx ## literal pool for: "(animating)"
10001509e:	48 89 df	movq	%rbx, %rdi
1000150a1:	eb 30	jmp	0x1000150d3
1000150a3:	4d 8d 7c 24 01	leaq	1(%r12), %r15
1000150a8:	a8 40	testb	$64, %al
1000150aa:	75 1a	jne	0x1000150c6
1000150ac:	41 8b 46 5c	movl	92(%r14), %eax
1000150b0:	ff c8	decl	%eax
1000150b2:	83 f8 04	cmpl	$4, %eax
1000150b5:	77 28	ja	0x1000150df
1000150b7:	48 98	cltq
1000150b9:	48 8d 0d e8 5a 04 00	leaq	285416(%rip), %rcx
1000150c0:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
1000150c4:	eb 20	jmp	0x1000150e6
1000150c6:	48 8d 15 94 44 03 00	leaq	214164(%rip), %rdx ## literal pool for: "(system logger socket)"
1000150cd:	48 89 df	movq	%rbx, %rdi
1000150d0:	4c 89 fe	movq	%r15, %rsi
1000150d3:	31 c0	xorl	%eax, %eax
1000150d5:	e8 98 3b 02 00	callq	0x100038c72
1000150da:	e9 56 03 00 00	jmp	0x100015435
1000150df:	48 8d 0d ab 24 03 00	leaq	205995(%rip), %rcx ## literal pool for: "(unknown)"
1000150e6:	48 8d 15 8b 44 03 00	leaq	214155(%rip), %rdx ## literal pool for: "type = %s"
1000150ed:	48 89 df	movq	%rbx, %rdi
1000150f0:	4c 89 fe	movq	%r15, %rsi
1000150f3:	31 c0	xorl	%eax, %eax
1000150f5:	e8 78 3b 02 00	callq	0x100038c72
1000150fa:	49 8b 8e 88 00 00 00	movq	136(%r14), %rcx
100015101:	48 85 c9	testq	%rcx, %rcx
100015104:	75 0e	jne	0x100015114
100015106:	49 83 be 80 00 00 00 00	cmpq	$0, 128(%r14)
10001510e:	0f 84 a2 00 00 00	je	0x1000151b6
100015114:	48 8d 15 67 44 03 00	leaq	214119(%rip), %rdx ## literal pool for: "path = %s"
10001511b:	48 89 df	movq	%rbx, %rdi
10001511e:	4c 89 fe	movq	%r15, %rsi
100015121:	31 c0	xorl	%eax, %eax
100015123:	e8 4a 3b 02 00	callq	0x100038c72
100015128:	41 f6 86 c4 00 00 00 08	testb	$8, 196(%r14)
100015130:	74 1c	je	0x10001514e
100015132:	41 0f b7 8e 90 00 00 00	movzwl	144(%r14), %ecx
10001513a:	48 8d 15 4b 44 03 00	leaq	214091(%rip), %rdx ## literal pool for: "mode = %o"
100015141:	48 89 df	movq	%rbx, %rdi
100015144:	4c 89 fe	movq	%r15, %rsi
100015147:	31 c0	xorl	%eax, %eax
100015149:	e8 24 3b 02 00	callq	0x100038c72
10001514e:	49 8b 8e 80 00 00 00	movq	128(%r14), %rcx
100015155:	48 85 c9	testq	%rcx, %rcx
100015158:	74 14	je	0x10001516e
10001515a:	48 8d 15 35 44 03 00	leaq	214069(%rip), %rdx ## literal pool for: "secure key = %s"
100015161:	48 89 df	movq	%rbx, %rdi
100015164:	4c 89 fe	movq	%r15, %rsi
100015167:	31 c0	xorl	%eax, %eax
100015169:	e8 04 3b 02 00	callq	0x100038c72
10001516e:	41 8b 4e 60	movl	96(%r14), %ecx
100015172:	85 c9	testl	%ecx, %ecx
100015174:	0f 84 33 01 00 00	je	0x1000152ad
10001517a:	48 8d 15 25 44 03 00	leaq	214053(%rip), %rdx ## literal pool for: "owner uid = %u"
100015181:	48 89 df	movq	%rbx, %rdi
100015184:	4c 89 fe	movq	%r15, %rsi
100015187:	31 c0	xorl	%eax, %eax
100015189:	e8 e4 3a 02 00	callq	0x100038c72
10001518e:	41 83 7e 60 00	cmpl	$0, 96(%r14)
100015193:	0f 84 14 01 00 00	je	0x1000152ad
100015199:	41 8b 4e 64	movl	100(%r14), %ecx
10001519d:	48 8d 15 11 44 03 00	leaq	214033(%rip), %rdx ## literal pool for: "group id = %u"
1000151a4:	48 89 df	movq	%rbx, %rdi
1000151a7:	4c 89 fe	movq	%r15, %rsi
1000151aa:	31 c0	xorl	%eax, %eax
1000151ac:	e8 c1 3a 02 00	callq	0x100038c72
1000151b1:	e9 f7 00 00 00	jmp	0x1000152ad
1000151b6:	49 8b 8e 98 00 00 00	movq	152(%r14), %rcx
1000151bd:	48 85 c9	testq	%rcx, %rcx
1000151c0:	74 14	je	0x1000151d6
1000151c2:	48 8d 15 fa 43 03 00	leaq	214010(%rip), %rdx ## literal pool for: "node name = %s"
1000151c9:	48 89 df	movq	%rbx, %rdi
1000151cc:	4c 89 fe	movq	%r15, %rsi
1000151cf:	31 c0	xorl	%eax, %eax
1000151d1:	e8 9c 3a 02 00	callq	0x100038c72
1000151d6:	49 8b 8e a0 00 00 00	movq	160(%r14), %rcx
1000151dd:	48 85 c9	testq	%rcx, %rcx
1000151e0:	74 14	je	0x1000151f6
1000151e2:	48 8d 15 e9 43 03 00	leaq	213993(%rip), %rdx ## literal pool for: "multicast group = %s"
1000151e9:	48 89 df	movq	%rbx, %rdi
1000151ec:	4c 89 fe	movq	%r15, %rsi
1000151ef:	31 c0	xorl	%eax, %eax
1000151f1:	e8 7c 3a 02 00	callq	0x100038c72
1000151f6:	49 8b 8e a8 00 00 00	movq	168(%r14), %rcx
1000151fd:	48 85 c9	testq	%rcx, %rcx
100015200:	74 14	je	0x100015216
100015202:	48 8d 15 de 43 03 00	leaq	213982(%rip), %rdx ## literal pool for: "service name = %s"
100015209:	48 89 df	movq	%rbx, %rdi
10001520c:	4c 89 fe	movq	%r15, %rsi
10001520f:	31 c0	xorl	%eax, %eax
100015211:	e8 5c 3a 02 00	callq	0x100038c72
100015216:	41 8b 86 b0 00 00 00	movl	176(%r14), %eax
10001521d:	83 f8 01	cmpl	$1, %eax
100015220:	7f 12	jg	0x100015234
100015222:	85 c0	testl	%eax, %eax
100015224:	74 45	je	0x10001526b
100015226:	83 f8 01	cmpl	$1, %eax
100015229:	75 25	jne	0x100015250
10001522b:	48 8d 0d 75 49 03 00	leaq	215413(%rip), %rcx ## literal pool for: "unix"
100015232:	eb 23	jmp	0x100015257
100015234:	83 f8 02	cmpl	$2, %eax
100015237:	74 0e	je	0x100015247
100015239:	83 f8 1e	cmpl	$30, %eax
10001523c:	75 12	jne	0x100015250
10001523e:	48 8d 0d 5d 49 03 00	leaq	215389(%rip), %rcx ## literal pool for: "ipv6"
100015245:	eb 10	jmp	0x100015257
100015247:	48 8d 0d 4f 49 03 00	leaq	215375(%rip), %rcx ## literal pool for: "ipv4"
10001524e:	eb 07	jmp	0x100015257
100015250:	48 8d 0d 3a 23 03 00	leaq	205626(%rip), %rcx ## literal pool for: "(unknown)"
100015257:	48 8d 15 9b 43 03 00	leaq	213915(%rip), %rdx ## literal pool for: "family = %s"
10001525e:	48 89 df	movq	%rbx, %rdi
100015261:	4c 89 fe	movq	%r15, %rsi
100015264:	31 c0	xorl	%eax, %eax
100015266:	e8 07 3a 02 00	callq	0x100038c72
10001526b:	41 8b 86 b4 00 00 00	movl	180(%r14), %eax
100015272:	85 c0	testl	%eax, %eax
100015274:	74 37	je	0x1000152ad
100015276:	83 f8 11	cmpl	$17, %eax
100015279:	48 8d 0d 30 49 03 00	leaq	215344(%rip), %rcx ## literal pool for: "udp"
100015280:	48 8d 15 0a 23 03 00	leaq	205578(%rip), %rdx ## literal pool for: "(unknown)"
100015287:	48 0f 44 d1	cmoveq	%rcx, %rdx
10001528b:	83 f8 06	cmpl	$6, %eax
10001528e:	48 8d 0d 17 49 03 00	leaq	215319(%rip), %rcx ## literal pool for: "tcp"
100015295:	48 0f 45 ca	cmovneq	%rdx, %rcx
100015299:	48 8d 15 65 43 03 00	leaq	213861(%rip), %rdx ## literal pool for: "protocol = %s"
1000152a0:	48 89 df	movq	%rbx, %rdi
1000152a3:	4c 89 fe	movq	%r15, %rsi
1000152a6:	31 c0	xorl	%eax, %eax
1000152a8:	e8 c5 39 02 00	callq	0x100038c72
1000152ad:	4c 89 65 d0	movq	%r12, -48(%rbp)
1000152b1:	41 8b 8e c0 00 00 00	movl	192(%r14), %ecx
1000152b8:	85 c9	testl	%ecx, %ecx
1000152ba:	74 14	je	0x1000152d0
1000152bc:	48 8d 15 50 43 03 00	leaq	213840(%rip), %rdx ## literal pool for: "error = %d"
1000152c3:	48 89 df	movq	%rbx, %rdi
1000152c6:	4c 89 fe	movq	%r15, %rsi
1000152c9:	31 c0	xorl	%eax, %eax
1000152cb:	e8 a2 39 02 00	callq	0x100038c72
1000152d0:	48 89 df	movq	%rbx, %rdi
1000152d3:	e8 95 3a 02 00	callq	0x100038d6d
1000152d8:	48 8d 15 3f 43 03 00	leaq	213823(%rip), %rdx ## literal pool for: "sockets = {"
1000152df:	48 89 df	movq	%rbx, %rdi
1000152e2:	4c 89 7d c8	movq	%r15, -56(%rbp)
1000152e6:	4c 89 fe	movq	%r15, %rsi
1000152e9:	31 c0	xorl	%eax, %eax
1000152eb:	e8 82 39 02 00	callq	0x100038c72
1000152f0:	49 83 7e 50 00	cmpq	$0, 80(%r14)
1000152f5:	49 89 df	movq	%rbx, %r15
1000152f8:	74 4e	je	0x100015348
1000152fa:	48 8b 45 d0	movq	-48(%rbp), %rax
1000152fe:	48 8d 58 02	leaq	2(%rax), %rbx
100015302:	4c 8d 2d 21 43 03 00	leaq	213793(%rip), %r13 ## literal pool for: "%d (%sbytes to read)"
100015309:	45 31 e4	xorl	%r12d, %r12d
10001530c:	49 8b 46 38	movq	56(%r14), %rax
100015310:	49 8b 56 40	movq	64(%r14), %rdx
100015314:	42 8b 0c a0	movl	(%rax,%r12,4), %ecx
100015318:	42 80 3c 22 00	cmpb	$0, (%rdx,%r12)
10001531d:	4c 8d 05 67 3c 03 00	leaq	212071(%rip), %r8 ## literal pool for: ""
100015324:	48 8d 05 14 43 03 00	leaq	213780(%rip), %rax ## literal pool for: "no "
10001532b:	4c 0f 44 c0	cmoveq	%rax, %r8
10001532f:	4c 89 ff	movq	%r15, %rdi
100015332:	48 89 de	movq	%rbx, %rsi
100015335:	4c 89 ea	movq	%r13, %rdx
100015338:	31 c0	xorl	%eax, %eax
10001533a:	e8 33 39 02 00	callq	0x100038c72
10001533f:	49 ff c4	incq	%r12
100015342:	4d 3b 66 50	cmpq	80(%r14), %r12
100015346:	72 c4	jb	0x10001530c
100015348:	48 8d 15 2f 37 03 00	leaq	210735(%rip), %rdx ## literal pool for: "}"
10001534f:	4c 89 ff	movq	%r15, %rdi
100015352:	48 8b 5d c8	movq	-56(%rbp), %rbx
100015356:	48 89 de	movq	%rbx, %rsi
100015359:	31 c0	xorl	%eax, %eax
10001535b:	e8 12 39 02 00	callq	0x100038c72
100015360:	4c 89 ff	movq	%r15, %rdi
100015363:	e8 05 3a 02 00	callq	0x100038d6d
100015368:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
100015370:	a8 01	testb	$1, %al
100015372:	4c 8d 25 f5 23 03 00	leaq	205813(%rip), %r12 ## literal pool for: "0"
100015379:	4c 8d 2d b8 e0 02 00	leaq	188600(%rip), %r13 ## literal pool for: "1"
100015380:	4c 89 e9	movq	%r13, %rcx
100015383:	49 0f 44 cc	cmoveq	%r12, %rcx
100015387:	48 8d 15 b5 42 03 00	leaq	213685(%rip), %rdx ## literal pool for: "active = %s"
10001538e:	4c 89 ff	movq	%r15, %rdi
100015391:	48 89 de	movq	%rbx, %rsi
100015394:	31 c0	xorl	%eax, %eax
100015396:	e8 d7 38 02 00	callq	0x100038c72
10001539b:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
1000153a3:	a8 02	testb	$2, %al
1000153a5:	4c 89 e9	movq	%r13, %rcx
1000153a8:	49 0f 44 cc	cmoveq	%r12, %rcx
1000153ac:	48 8d 15 9c 42 03 00	leaq	213660(%rip), %rdx ## literal pool for: "passive = %s"
1000153b3:	4c 89 ff	movq	%r15, %rdi
1000153b6:	48 89 de	movq	%rbx, %rsi
1000153b9:	31 c0	xorl	%eax, %eax
1000153bb:	e8 b2 38 02 00	callq	0x100038c72
1000153c0:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
1000153c8:	a8 10	testb	$16, %al
1000153ca:	4c 89 e9	movq	%r13, %rcx
1000153cd:	49 0f 44 cc	cmoveq	%r12, %rcx
1000153d1:	48 8d 15 84 42 03 00	leaq	213636(%rip), %rdx ## literal pool for: "bonjour = %s"
1000153d8:	4c 89 ff	movq	%r15, %rdi
1000153db:	48 89 de	movq	%rbx, %rsi
1000153de:	31 c0	xorl	%eax, %eax
1000153e0:	e8 8d 38 02 00	callq	0x100038c72
1000153e5:	41 0f b7 86 c4 00 00 00	movzwl	196(%r14), %eax
1000153ed:	a8 20	testb	$32, %al
1000153ef:	4c 89 e9	movq	%r13, %rcx
1000153f2:	49 0f 44 cc	cmoveq	%r12, %rcx
1000153f6:	48 8d 15 6c 42 03 00	leaq	213612(%rip), %rdx ## literal pool for: "ipv4v6 = %s"
1000153fd:	4c 89 ff	movq	%r15, %rdi
100015400:	48 89 de	movq	%rbx, %rsi
100015403:	31 c0	xorl	%eax, %eax
100015405:	e8 68 38 02 00	callq	0x100038c72
10001540a:	41 0f ba a6 c4 00 00 00 09	btl	$9, 196(%r14)
100015413:	4d 0f 43 ec	cmovaeq	%r12, %r13
100015417:	48 8d 15 57 42 03 00	leaq	213591(%rip), %rdx ## literal pool for: "receive_packet_info = %s"
10001541e:	4c 89 ff	movq	%r15, %rdi
100015421:	48 89 de	movq	%rbx, %rsi
100015424:	4c 89 e9	movq	%r13, %rcx
100015427:	31 c0	xorl	%eax, %eax
100015429:	e8 44 38 02 00	callq	0x100038c72
10001542e:	4c 8b 65 d0	movq	-48(%rbp), %r12
100015432:	4c 89 fb	movq	%r15, %rbx
100015435:	48 8d 15 42 36 03 00	leaq	210498(%rip), %rdx ## literal pool for: "}"
10001543c:	48 89 df	movq	%rbx, %rdi
10001543f:	4c 89 e6	movq	%r12, %rsi
100015442:	31 c0	xorl	%eax, %eax
100015444:	48 83 c4 18	addq	$24, %rsp
100015448:	5b	popq	%rbx
100015449:	41 5c	popq	%r12
10001544b:	41 5d	popq	%r13
10001544d:	41 5e	popq	%r14
10001544f:	41 5f	popq	%r15
100015451:	5d	popq	%rbp
100015452:	e9 1b 38 02 00	jmp	0x100038c72
100015457:	55	pushq	%rbp
100015458:	48 89 e5	movq	%rsp, %rbp
10001545b:	41 56	pushq	%r14
10001545d:	53	pushq	%rbx
10001545e:	49 89 fe	movq	%rdi, %r14
100015461:	48 8b 1f	movq	(%rdi), %rbx
100015464:	8b 77 08	movl	8(%rdi), %esi
100015467:	48 8b 53 78	movq	120(%rbx), %rdx
10001546b:	48 89 df	movq	%rbx, %rdi
10001546e:	ff 53 70	callq	*112(%rbx)
100015471:	48 89 df	movq	%rbx, %rdi
100015474:	be 2b 00 00 00	movl	$43, %esi
100015479:	e8 d3 d4 ff ff	callq	0x100012951
10001547e:	4c 89 f7	movq	%r14, %rdi
100015481:	5b	popq	%rbx
100015482:	41 5e	popq	%r14
100015484:	5d	popq	%rbp
100015485:	e9 a6 c5 02 00	jmp	0x100041a30 ## symbol stub for: _free
10001548a:	55	pushq	%rbp
10001548b:	48 89 e5	movq	%rsp, %rbp
10001548e:	53	pushq	%rbx
10001548f:	50	pushq	%rax
100015490:	48 89 fb	movq	%rdi, %rbx
100015493:	80 bf c4 00 00 00 00	cmpb	$0, 196(%rdi)
10001549a:	78 1e	js	0x1000154ba
10001549c:	48 8d 93 c8 00 00 00	leaq	200(%rbx), %rdx
1000154a3:	48 8b 7b 30	movq	48(%rbx), %rdi
1000154a7:	48 8b 8b b8 00 00 00	movq	184(%rbx), %rcx
1000154ae:	48 8d 35 b0 46 03 00	leaq	214704(%rip), %rsi ## literal pool for: "com.apple.bonjour.registration"
1000154b5:	e8 ad c9 01 00	callq	0x100031e67
1000154ba:	48 89 df	movq	%rbx, %rdi
1000154bd:	be 2c 00 00 00	movl	$44, %esi
1000154c2:	48 83 c4 08	addq	$8, %rsp
1000154c6:	5b	popq	%rbx
1000154c7:	5d	popq	%rbp
1000154c8:	e9 84 d4 ff ff	jmp	0x100012951
1000154cd:	55	pushq	%rbp
1000154ce:	48 89 e5	movq	%rsp, %rbp
1000154d1:	ff cf	decl	%edi
1000154d3:	83 ff 0d	cmpl	$13, %edi
1000154d6:	77 25	ja	0x1000154fd
1000154d8:	48 8d 05 4d 00 00 00	leaq	77(%rip), %rax
1000154df:	48 63 0c b8	movslq	(%rax,%rdi,4), %rcx
1000154e3:	48 01 c1	addq	%rax, %rcx
1000154e6:	ff e1	jmpq	*%rcx
1000154e8:	b8 2d 00 00 00	movl	$45, %eax
1000154ed:	eb 38	jmp	0x100015527
1000154ef:	b8 16 00 00 00	movl	$22, %eax
1000154f4:	eb 31	jmp	0x100015527
1000154f6:	b8 03 00 00 00	movl	$3, %eax
1000154fb:	eb 2a	jmp	0x100015527
1000154fd:	b8 ff ff ff ff	movl	$4294967295, %eax
100015502:	eb 23	jmp	0x100015527
100015504:	b8 23 00 00 00	movl	$35, %eax
100015509:	eb 1c	jmp	0x100015527
10001550b:	b8 99 00 00 00	movl	$153, %eax
100015510:	eb 15	jmp	0x100015527
100015512:	b8 0c 00 00 00	movl	$12, %eax
100015517:	eb 0e	jmp	0x100015527
100015519:	e8 42 c2 02 00	callq	0x100041760 ## symbol stub for: ___error
10001551e:	8b 00	movl	(%rax), %eax
100015520:	eb 05	jmp	0x100015527
100015522:	b8 22 00 00 00	movl	$34, %eax
100015527:	5d	popq	%rbp
100015528:	c3	retq
100015529:	0f 1f 00	nopl	(%rax)
10001552c:	bc ff ff ff d8	movl	$3640655871, %esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015533:	ff c3	incl	%ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdf #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001553c:	bc ff ff ff e6	movl	$3875536895, %esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015543:	ff ca	decl	%edx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015547:	ff ca	decl	%edx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001554c:	bc ff ff ff bc	movl	$3170893823, %esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015554:	ed	inl	%dx, %eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015557:	ff c3	incl	%ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001555b:	ff c3	incl	%ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001555f:	ff f6	pushq	%rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015563:	ff 55 48	callq	*72(%rbp)
100015566:	89 e5	movl	%esp, %ebp
100015568:	53	pushq	%rbx
100015569:	50	pushq	%rax
10001556a:	48 89 fb	movq	%rdi, %rbx
10001556d:	48 8b 7f 20	movq	32(%rdi), %rdi
100015571:	e8 7c c3 02 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
100015576:	48 8b 48 50	movq	80(%rax), %rcx
10001557a:	48 85 c9	testq	%rcx, %rcx
10001557d:	74 20	je	0x10001559f
10001557f:	8b 73 28	movl	40(%rbx), %esi
100015582:	48 8b 78 38	movq	56(%rax), %rdi
100015586:	31 d2	xorl	%edx, %edx
100015588:	39 34 97	cmpl	%esi, (%rdi,%rdx,4)
10001558b:	74 0a	je	0x100015597
10001558d:	48 ff c2	incq	%rdx
100015590:	48 39 d1	cmpq	%rdx, %rcx
100015593:	75 f3	jne	0x100015588
100015595:	eb 08	jmp	0x10001559f
100015597:	48 8b 48 40	movq	64(%rax), %rcx
10001559b:	c6 04 11 01	movb	$1, (%rcx,%rdx)
10001559f:	48 8b 48 70	movq	112(%rax), %rcx
1000155a3:	48 8b 50 78	movq	120(%rax), %rdx
1000155a7:	48 89 c7	movq	%rax, %rdi
1000155aa:	be 02 00 00 00	movl	$2, %esi
1000155af:	48 83 c4 08	addq	$8, %rsp
1000155b3:	5b	popq	%rbx
1000155b4:	5d	popq	%rbp
1000155b5:	ff e1	jmpq	*%rcx
1000155b7:	55	pushq	%rbp
1000155b8:	48 89 e5	movq	%rsp, %rbp
1000155bb:	53	pushq	%rbx
1000155bc:	50	pushq	%rax
1000155bd:	48 89 fb	movq	%rdi, %rbx
1000155c0:	48 8b 7f 20	movq	32(%rdi), %rdi
1000155c4:	e8 c5 c3 02 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
1000155c9:	89 c7	movl	%eax, %edi
1000155cb:	e8 e4 d1 01 00	callq	0x1000327b4
1000155d0:	48 8b 7b 20	movq	32(%rbx), %rdi
1000155d4:	48 83 c4 08	addq	$8, %rsp
1000155d8:	5b	popq	%rbx
1000155d9:	5d	popq	%rbp
1000155da:	e9 79 c3 02 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
1000155df:	48 85 ff	testq	%rdi, %rdi
1000155e2:	74 06	je	0x1000155ea
1000155e4:	48 89 f8	movq	%rdi, %rax
1000155e7:	31 d2	xorl	%edx, %edx
1000155e9:	c3	retq
1000155ea:	55	pushq	%rbp
1000155eb:	48 89 e5	movq	%rsp, %rbp
1000155ee:	e8 09 ac 02 00	callq	0x1000401fc
1000155f3:	85 ff	testl	%edi, %edi
1000155f5:	74 05	je	0x1000155fc
1000155f7:	31 c0	xorl	%eax, %eax
1000155f9:	89 fa	movl	%edi, %edx
1000155fb:	c3	retq
1000155fc:	55	pushq	%rbp
1000155fd:	48 89 e5	movq	%rsp, %rbp
100015600:	e8 09 ac 02 00	callq	0x10004020e
100015605:	55	pushq	%rbp
100015606:	48 89 e5	movq	%rsp, %rbp
100015609:	31 c0	xorl	%eax, %eax
10001560b:	48 89 05 46 d8 04 00	movq	%rax, 317510(%rip)
100015612:	c6 05 47 d8 04 00 00	movb	$0, 317511(%rip)
100015619:	48 89 05 48 d8 04 00	movq	%rax, 317512(%rip)
100015620:	48 89 05 49 d8 04 00	movq	%rax, 317513(%rip)
100015627:	48 89 05 4a d8 04 00	movq	%rax, 317514(%rip)
10001562e:	5d	popq	%rbp
10001562f:	c3	retq
100015630:	55	pushq	%rbp
100015631:	48 89 e5	movq	%rsp, %rbp
100015634:	53	pushq	%rbx
100015635:	48 83 ec 28	subq	$40, %rsp
100015639:	48 85 ff	testq	%rdi, %rdi
10001563c:	74 40	je	0x10001567e
10001563e:	48 89 fb	movq	%rdi, %rbx
100015641:	e8 52 00 00 00	callq	0x100015698
100015646:	48 8b 0d cb 29 04 00	movq	272843(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10001564d:	48 8d 75 d0	leaq	-48(%rbp), %rsi
100015651:	48 89 0e	movq	%rcx, (%rsi)
100015654:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10001565c:	48 8d 0d 58 00 00 00	leaq	88(%rip), %rcx
100015663:	48 89 4e 10	movq	%rcx, 16(%rsi)
100015667:	48 8d 0d 62 55 04 00	leaq	284002(%rip), %rcx
10001566e:	48 89 4e 18	movq	%rcx, 24(%rsi)
100015672:	48 89 5e 20	movq	%rbx, 32(%rsi)
100015676:	48 89 c7	movq	%rax, %rdi
100015679:	e8 43 da ff ff	callq	0x1000130c1
10001567e:	e8 15 00 00 00	callq	0x100015698
100015683:	48 89 c7	movq	%rax, %rdi
100015686:	e8 9c da ff ff	callq	0x100013127
10001568b:	48 85 c0	testq	%rax, %rax
10001568e:	0f 95 c0	setne	%al
100015691:	48 83 c4 28	addq	$40, %rsp
100015695:	5b	popq	%rbx
100015696:	5d	popq	%rbp
100015697:	c3	retq
100015698:	55	pushq	%rbp
100015699:	48 89 e5	movq	%rsp, %rbp
10001569c:	e8 8d 8e ff ff	callq	0x10000e52e
1000156a1:	48 8b 05 c8 d7 04 00	movq	317384(%rip), %rax
1000156a8:	48 85 c0	testq	%rax, %rax
1000156ab:	75 0c	jne	0x1000156b9
1000156ad:	e8 8e da ff ff	callq	0x100013140
1000156b2:	48 89 05 b7 d7 04 00	movq	%rax, 317367(%rip)
1000156b9:	5d	popq	%rbp
1000156ba:	c3	retq
1000156bb:	55	pushq	%rbp
1000156bc:	48 89 e5	movq	%rsp, %rbp
1000156bf:	48 8b 7f 20	movq	32(%rdi), %rdi
1000156c3:	48 8b 47 10	movq	16(%rdi), %rax
1000156c7:	48 89 d6	movq	%rdx, %rsi
1000156ca:	5d	popq	%rbp
1000156cb:	ff e0	jmpq	*%rax
1000156cd:	55	pushq	%rbp
1000156ce:	48 89 e5	movq	%rsp, %rbp
1000156d1:	41 57	pushq	%r15
1000156d3:	41 56	pushq	%r14
1000156d5:	41 55	pushq	%r13
1000156d7:	41 54	pushq	%r12
1000156d9:	53	pushq	%rbx
1000156da:	50	pushq	%rax
1000156db:	49 89 f6	movq	%rsi, %r14
1000156de:	49 89 fd	movq	%rdi, %r13
1000156e1:	48 8d 35 d8 44 03 00	leaq	214232(%rip), %rsi ## literal pool for: "cid"
1000156e8:	e8 73 c9 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000156ed:	41 bf 16 00 00 00	movl	$22, %r15d
1000156f3:	48 85 c0	testq	%rax, %rax
1000156f6:	74 44	je	0x10001573c
1000156f8:	48 89 c3	movq	%rax, %rbx
1000156fb:	e8 98 ff ff ff	callq	0x100015698
100015700:	48 89 c7	movq	%rax, %rdi
100015703:	48 89 de	movq	%rbx, %rsi
100015706:	e8 7f d9 ff ff	callq	0x10001308a
10001570b:	48 85 c0	testq	%rax, %rax
10001570e:	74 26	je	0x100015736
100015710:	49 89 c4	movq	%rax, %r12
100015713:	4c 89 ef	movq	%r13, %rdi
100015716:	e8 03 c9 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001571b:	48 85 c0	testq	%rax, %rax
10001571e:	74 1c	je	0x10001573c
100015720:	48 89 c3	movq	%rax, %rbx
100015723:	48 89 c7	movq	%rax, %rdi
100015726:	4c 89 e6	movq	%r12, %rsi
100015729:	e8 20 00 00 00	callq	0x10001574e
10001572e:	49 89 1e	movq	%rbx, (%r14)
100015731:	45 31 ff	xorl	%r15d, %r15d
100015734:	eb 06	jmp	0x10001573c
100015736:	41 bf 03 00 00 00	movl	$3, %r15d
10001573c:	44 89 f8	movl	%r15d, %eax
10001573f:	48 83 c4 08	addq	$8, %rsp
100015743:	5b	popq	%rbx
100015744:	41 5c	popq	%r12
100015746:	41 5d	popq	%r13
100015748:	41 5e	popq	%r14
10001574a:	41 5f	popq	%r15
10001574c:	5d	popq	%rbp
10001574d:	c3	retq
10001574e:	55	pushq	%rbp
10001574f:	48 89 e5	movq	%rsp, %rbp
100015752:	41 57	pushq	%r15
100015754:	41 56	pushq	%r14
100015756:	41 54	pushq	%r12
100015758:	53	pushq	%rbx
100015759:	48 89 f3	movq	%rsi, %rbx
10001575c:	49 89 fe	movq	%rdi, %r14
10001575f:	48 89 f7	movq	%rsi, %rdi
100015762:	e8 aa 79 ff ff	callq	0x10000d111
100015767:	48 8d 35 52 44 03 00	leaq	214098(%rip), %rsi ## literal pool for: "cid"
10001576e:	4c 89 f7	movq	%r14, %rdi
100015771:	48 89 c2	movq	%rax, %rdx
100015774:	e8 29 c9 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100015779:	48 89 df	movq	%rbx, %rdi
10001577c:	e8 9a 79 ff ff	callq	0x10000d11b
100015781:	49 89 c4	movq	%rax, %r12
100015784:	48 89 df	movq	%rbx, %rdi
100015787:	e8 99 79 ff ff	callq	0x10000d125
10001578c:	49 89 c7	movq	%rax, %r15
10001578f:	4d 85 e4	testq	%r12, %r12
100015792:	74 12	je	0x1000157a6
100015794:	48 8d 35 62 44 03 00	leaq	214114(%rip), %rsi ## literal pool for: "name"
10001579b:	4c 89 f7	movq	%r14, %rdi
10001579e:	4c 89 e2	movq	%r12, %rdx
1000157a1:	e8 f6 c8 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
1000157a6:	4d 85 ff	testq	%r15, %r15
1000157a9:	74 12	je	0x1000157bd
1000157ab:	48 8d 35 50 44 03 00	leaq	214096(%rip), %rsi ## literal pool for: "bundle_identifier"
1000157b2:	4c 89 f7	movq	%r14, %rdi
1000157b5:	4c 89 fa	movq	%r15, %rdx
1000157b8:	e8 df c8 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
1000157bd:	48 89 df	movq	%rbx, %rdi
1000157c0:	e8 6a 79 ff ff	callq	0x10000d12f
1000157c5:	48 85 c0	testq	%rax, %rax
1000157c8:	74 1f	je	0x1000157e9
1000157ca:	48 8d 35 43 44 03 00	leaq	214083(%rip), %rsi ## literal pool for: "resource-usage-blob"
1000157d1:	b9 18 01 00 00	movl	$280, %ecx
1000157d6:	4c 89 f7	movq	%r14, %rdi
1000157d9:	48 89 c2	movq	%rax, %rdx
1000157dc:	5b	popq	%rbx
1000157dd:	41 5c	popq	%r12
1000157df:	41 5e	popq	%r14
1000157e1:	41 5f	popq	%r15
1000157e3:	5d	popq	%rbp
1000157e4:	e9 95 c8 02 00	jmp	0x10004207e ## symbol stub for: _xpc_dictionary_set_data
1000157e9:	5b	popq	%rbx
1000157ea:	41 5c	popq	%r12
1000157ec:	41 5e	popq	%r14
1000157ee:	41 5f	popq	%r15
1000157f0:	5d	popq	%rbp
1000157f1:	c3	retq
1000157f2:	55	pushq	%rbp
1000157f3:	48 89 e5	movq	%rsp, %rbp
1000157f6:	41 57	pushq	%r15
1000157f8:	41 56	pushq	%r14
1000157fa:	41 54	pushq	%r12
1000157fc:	53	pushq	%rbx
1000157fd:	49 89 f6	movq	%rsi, %r14
100015800:	48 89 fb	movq	%rdi, %rbx
100015803:	c6 05 56 d6 04 00 01	movb	$1, 317014(%rip)
10001580a:	48 8b 3d 67 d6 04 00	movq	317031(%rip), %rdi
100015811:	48 85 ff	testq	%rdi, %rdi
100015814:	75 0f	jne	0x100015825
100015816:	e8 12 75 ff ff	callq	0x10000cd2d
10001581b:	48 89 c7	movq	%rax, %rdi
10001581e:	48 89 05 53 d6 04 00	movq	%rax, 317011(%rip)
100015825:	e8 7e 76 ff ff	callq	0x10000cea8
10001582a:	48 85 c0	testq	%rax, %rax
10001582d:	74 7b	je	0x1000158aa
10001582f:	48 89 df	movq	%rbx, %rdi
100015832:	e8 e7 c7 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100015837:	48 85 c0	testq	%rax, %rax
10001583a:	0f 84 8e 00 00 00	je	0x1000158ce
100015840:	49 89 c7	movq	%rax, %r15
100015843:	48 8b 3d 2e d6 04 00	movq	316974(%rip), %rdi
10001584a:	48 85 ff	testq	%rdi, %rdi
10001584d:	75 0f	jne	0x10001585e
10001584f:	e8 d9 74 ff ff	callq	0x10000cd2d
100015854:	48 89 c7	movq	%rax, %rdi
100015857:	48 89 05 1a d6 04 00	movq	%rax, 316954(%rip)
10001585e:	45 31 e4	xorl	%r12d, %r12d
100015861:	31 f6	xorl	%esi, %esi
100015863:	e8 27 76 ff ff	callq	0x10000ce8f
100015868:	48 89 c3	movq	%rax, %rbx
10001586b:	48 89 c7	movq	%rax, %rdi
10001586e:	be 02 00 00 00	movl	$2, %esi
100015873:	e8 ca 78 ff ff	callq	0x10000d142
100015878:	4c 89 ff	movq	%r15, %rdi
10001587b:	48 89 de	movq	%rbx, %rsi
10001587e:	e8 cb fe ff ff	callq	0x10001574e
100015883:	48 8b 3d ee d5 04 00	movq	316910(%rip), %rdi
10001588a:	48 85 ff	testq	%rdi, %rdi
10001588d:	75 0f	jne	0x10001589e
10001588f:	e8 99 74 ff ff	callq	0x10000cd2d
100015894:	48 89 c7	movq	%rax, %rdi
100015897:	48 89 05 da d5 04 00	movq	%rax, 316890(%rip)
10001589e:	31 f6	xorl	%esi, %esi
1000158a0:	e8 8b 75 ff ff	callq	0x10000ce30
1000158a5:	4d 89 3e	movq	%r15, (%r14)
1000158a8:	eb 2a	jmp	0x1000158d4
1000158aa:	41 bc 25 00 00 00	movl	$37, %r12d
1000158b0:	48 83 3d a0 d5 04 00 00	cmpq	$0, 316832(%rip)
1000158b8:	75 1a	jne	0x1000158d4
1000158ba:	48 89 df	movq	%rbx, %rdi
1000158bd:	e8 5c c7 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000158c2:	48 89 05 8f d5 04 00	movq	%rax, 316815(%rip)
1000158c9:	45 31 e4	xorl	%r12d, %r12d
1000158cc:	eb 06	jmp	0x1000158d4
1000158ce:	41 bc 16 00 00 00	movl	$22, %r12d
1000158d4:	44 89 e0	movl	%r12d, %eax
1000158d7:	5b	popq	%rbx
1000158d8:	41 5c	popq	%r12
1000158da:	41 5e	popq	%r14
1000158dc:	41 5f	popq	%r15
1000158de:	5d	popq	%rbp
1000158df:	c3	retq
1000158e0:	55	pushq	%rbp
1000158e1:	48 89 e5	movq	%rsp, %rbp
1000158e4:	41 57	pushq	%r15
1000158e6:	41 56	pushq	%r14
1000158e8:	41 54	pushq	%r12
1000158ea:	53	pushq	%rbx
1000158eb:	48 81 ec 20 01 00 00	subq	$288, %rsp
1000158f2:	49 89 fe	movq	%rdi, %r14
1000158f5:	e8 9e fd ff ff	callq	0x100015698
1000158fa:	48 89 c7	movq	%rax, %rdi
1000158fd:	4c 89 f6	movq	%r14, %rsi
100015900:	e8 85 d7 ff ff	callq	0x10001308a
100015905:	48 85 c0	testq	%rax, %rax
100015908:	74 2b	je	0x100015935
10001590a:	48 89 c3	movq	%rax, %rbx
10001590d:	48 89 c7	movq	%rax, %rdi
100015910:	be 01 00 00 00	movl	$1, %esi
100015915:	e8 28 78 ff ff	callq	0x10000d142
10001591a:	48 89 df	movq	%rbx, %rdi
10001591d:	e8 17 78 ff ff	callq	0x10000d139
100015922:	85 c0	testl	%eax, %eax
100015924:	74 19	je	0x10001593f
100015926:	48 89 df	movq	%rbx, %rdi
100015929:	31 f6	xorl	%esi, %esi
10001592b:	e8 9d 77 ff ff	callq	0x10000d0cd
100015930:	e9 93 00 00 00	jmp	0x1000159c8
100015935:	bb 05 00 00 00	movl	$5, %ebx
10001593a:	e9 dd 00 00 00	jmp	0x100015a1c
10001593f:	4c 8d bd c8 fe ff ff	leaq	-312(%rbp), %r15
100015946:	ba 18 01 00 00	movl	$280, %edx
10001594b:	4c 89 ff	movq	%r15, %rdi
10001594e:	be aa 00 00 00	movl	$170, %esi
100015953:	e8 82 c2 02 00	callq	0x100041bda ## symbol stub for: _memset
100015958:	ba 18 01 00 00	movl	$280, %edx
10001595d:	4c 89 f7	movq	%r14, %rdi
100015960:	4c 89 fe	movq	%r15, %rsi
100015963:	e8 e2 be 02 00	callq	0x10004184a ## symbol stub for: _coalition_info_resource_usage
100015968:	83 f8 ff	cmpl	$-1, %eax
10001596b:	0f 84 bd 00 00 00	je	0x100015a2e
100015971:	48 8d b5 c8 fe ff ff	leaq	-312(%rbp), %rsi
100015978:	48 89 df	movq	%rbx, %rdi
10001597b:	e8 4d 77 ff ff	callq	0x10000d0cd
100015980:	4c 8b 3d d1 d4 04 00	movq	316625(%rip), %r15
100015987:	4d 85 ff	testq	%r15, %r15
10001598a:	74 34	je	0x1000159c0
10001598c:	48 c7 05 c1 d4 04 00 00 00 00 00	movq	$0, 316609(%rip)
100015997:	4c 89 ff	movq	%r15, %rdi
10001599a:	48 89 de	movq	%rbx, %rsi
10001599d:	e8 ac fd ff ff	callq	0x10001574e
1000159a2:	4c 89 ff	movq	%r15, %rdi
1000159a5:	e8 46 c7 02 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
1000159aa:	41 89 c4	movl	%eax, %r12d
1000159ad:	4c 89 ff	movq	%r15, %rdi
1000159b0:	e8 47 c7 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000159b5:	45 85 e4	testl	%r12d, %r12d
1000159b8:	74 0e	je	0x1000159c8
1000159ba:	41 83 fc 20	cmpl	$32, %r12d
1000159be:	75 78	jne	0x100015a38
1000159c0:	48 89 df	movq	%rbx, %rdi
1000159c3:	e8 ee 01 00 00	callq	0x100015bb6
1000159c8:	48 8d 05 1b ce 04 00	leaq	314907(%rip), %rax
1000159cf:	80 38 00	cmpb	$0, (%rax)
1000159d2:	74 21	je	0x1000159f5
1000159d4:	48 89 df	movq	%rbx, %rdi
1000159d7:	e8 3f 77 ff ff	callq	0x10000d11b
1000159dc:	48 8d 35 e1 41 03 00	leaq	213473(%rip), %rsi ## literal pool for: "coalition_reap(%llu) [%s]"
1000159e3:	bf 05 00 01 00	movl	$65541, %edi
1000159e8:	4c 89 f2	movq	%r14, %rdx
1000159eb:	48 89 c1	movq	%rax, %rcx
1000159ee:	31 c0	xorl	%eax, %eax
1000159f0:	e8 d3 fb 01 00	callq	0x1000355c8
1000159f5:	4c 89 f7	movq	%r14, %rdi
1000159f8:	e8 1b 62 ff ff	callq	0x10000bc18
1000159fd:	e8 96 fc ff ff	callq	0x100015698
100015a02:	49 89 c6	movq	%rax, %r14
100015a05:	48 89 df	movq	%rbx, %rdi
100015a08:	e8 04 77 ff ff	callq	0x10000d111
100015a0d:	31 db	xorl	%ebx, %ebx
100015a0f:	4c 89 f7	movq	%r14, %rdi
100015a12:	48 89 c6	movq	%rax, %rsi
100015a15:	31 d2	xorl	%edx, %edx
100015a17:	e8 d6 d5 ff ff	callq	0x100012ff2
100015a1c:	89 d8	movl	%ebx, %eax
100015a1e:	48 81 c4 20 01 00 00	addq	$288, %rsp
100015a25:	5b	popq	%rbx
100015a26:	41 5c	popq	%r12
100015a28:	41 5e	popq	%r14
100015a2a:	41 5f	popq	%r15
100015a2c:	5d	popq	%rbp
100015a2d:	c3	retq
100015a2e:	e8 ed a7 02 00	callq	0x100040220
100015a33:	e9 39 ff ff ff	jmp	0x100015971
100015a38:	49 63 fc	movslq	%r12d, %rdi
100015a3b:	e8 62 bd 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100015a40:	eb 86	jmp	0x1000159c8
100015a42:	55	pushq	%rbp
100015a43:	48 89 e5	movq	%rsp, %rbp
100015a46:	41 56	pushq	%r14
100015a48:	53	pushq	%rbx
100015a49:	48 89 fb	movq	%rdi, %rbx
100015a4c:	e8 13 61 ff ff	callq	0x10000bb64
100015a51:	48 8b 73 08	movq	8(%rbx), %rsi
100015a55:	48 8b 53 10	movq	16(%rbx), %rdx
100015a59:	8b 0b	movl	(%rbx), %ecx
100015a5b:	4c 8d 05 9d 61 ff ff	leaq	-40547(%rip), %r8
100015a62:	48 89 c7	movq	%rax, %rdi
100015a65:	e8 1b 75 ff ff	callq	0x10000cf85
100015a6a:	48 89 c3	movq	%rax, %rbx
100015a6d:	e8 26 fc ff ff	callq	0x100015698
100015a72:	49 89 c6	movq	%rax, %r14
100015a75:	48 89 df	movq	%rbx, %rdi
100015a78:	e8 94 76 ff ff	callq	0x10000d111
100015a7d:	4c 89 f7	movq	%r14, %rdi
100015a80:	48 89 c6	movq	%rax, %rsi
100015a83:	48 89 da	movq	%rbx, %rdx
100015a86:	e8 67 d5 ff ff	callq	0x100012ff2
100015a8b:	48 89 d8	movq	%rbx, %rax
100015a8e:	5b	popq	%rbx
100015a8f:	41 5e	popq	%r14
100015a91:	5d	popq	%rbp
100015a92:	c3	retq
100015a93:	55	pushq	%rbp
100015a94:	48 89 e5	movq	%rsp, %rbp
100015a97:	41 57	pushq	%r15
100015a99:	41 56	pushq	%r14
100015a9b:	53	pushq	%rbx
100015a9c:	50	pushq	%rax
100015a9d:	83 3e 00	cmpl	$0, (%rsi)
100015aa0:	0f 85 af 00 00 00	jne	0x100015b55
100015aa6:	49 89 ff	movq	%rdi, %r15
100015aa9:	48 85 ff	testq	%rdi, %rdi
100015aac:	0f 84 a8 00 00 00	je	0x100015b5a
100015ab2:	49 89 f6	movq	%rsi, %r14
100015ab5:	48 8b 3d ac d3 04 00	movq	316332(%rip), %rdi
100015abc:	48 85 ff	testq	%rdi, %rdi
100015abf:	75 1b	jne	0x100015adc
100015ac1:	48 8d 35 97 00 00 00	leaq	151(%rip), %rsi
100015ac8:	bf 20 00 00 00	movl	$32, %edi
100015acd:	e8 03 2d 02 00	callq	0x1000387d5
100015ad2:	48 89 c7	movq	%rax, %rdi
100015ad5:	48 89 05 8c d3 04 00	movq	%rax, 316300(%rip)
100015adc:	4c 89 fe	movq	%r15, %rsi
100015adf:	e8 99 2c 02 00	callq	0x10003877d
100015ae4:	48 85 c0	testq	%rax, %rax
100015ae7:	74 36	je	0x100015b1f
100015ae9:	48 89 c3	movq	%rax, %rbx
100015aec:	48 89 c7	movq	%rax, %rdi
100015aef:	e8 1d 76 ff ff	callq	0x10000d111
100015af4:	48 8d 35 e3 40 03 00	leaq	213219(%rip), %rsi ## literal pool for: "Coalition Cache Hit: %s [%llu]"
100015afb:	bf 05 00 00 00	movl	$5, %edi
100015b00:	4c 89 fa	movq	%r15, %rdx
100015b03:	48 89 c1	movq	%rax, %rcx
100015b06:	31 c0	xorl	%eax, %eax
100015b08:	e8 bb fa 01 00	callq	0x1000355c8
100015b0d:	48 89 df	movq	%rbx, %rdi
100015b10:	48 83 c4 08	addq	$8, %rsp
100015b14:	5b	popq	%rbx
100015b15:	41 5e	popq	%r14
100015b17:	41 5f	popq	%r15
100015b19:	5d	popq	%rbp
100015b1a:	e9 45 75 ff ff	jmp	0x10000d064
100015b1f:	4c 89 f7	movq	%r14, %rdi
100015b22:	e8 1b ff ff ff	callq	0x100015a42
100015b27:	48 89 c3	movq	%rax, %rbx
100015b2a:	4c 8b 35 37 d3 04 00	movq	316215(%rip), %r14
100015b31:	48 89 c7	movq	%rax, %rdi
100015b34:	e8 2b 75 ff ff	callq	0x10000d064
100015b39:	4c 89 f7	movq	%r14, %rdi
100015b3c:	4c 89 fe	movq	%r15, %rsi
100015b3f:	48 89 c2	movq	%rax, %rdx
100015b42:	e8 66 2a 02 00	callq	0x1000385ad
100015b47:	48 89 d8	movq	%rbx, %rax
100015b4a:	48 83 c4 08	addq	$8, %rsp
100015b4e:	5b	popq	%rbx
100015b4f:	41 5e	popq	%r14
100015b51:	41 5f	popq	%r15
100015b53:	5d	popq	%rbp
100015b54:	c3	retq
100015b55:	e8 ee a6 02 00	callq	0x100040248
100015b5a:	e8 d4 a6 02 00	callq	0x100040233
100015b5f:	55	pushq	%rbp
100015b60:	48 89 e5	movq	%rsp, %rbp
100015b63:	41 56	pushq	%r14
100015b65:	53	pushq	%rbx
100015b66:	48 89 f3	movq	%rsi, %rbx
100015b69:	49 89 fe	movq	%rdi, %r14
100015b6c:	48 89 f7	movq	%rsi, %rdi
100015b6f:	e8 9d 75 ff ff	callq	0x10000d111
100015b74:	48 8d 35 ad 40 03 00	leaq	213165(%rip), %rsi ## literal pool for: "Coalition Cache Evicted: %s [%llu]"
100015b7b:	bf 05 00 00 00	movl	$5, %edi
100015b80:	4c 89 f2	movq	%r14, %rdx
100015b83:	48 89 c1	movq	%rax, %rcx
100015b86:	31 c0	xorl	%eax, %eax
100015b88:	e8 3b fa 01 00	callq	0x1000355c8
100015b8d:	48 89 df	movq	%rbx, %rdi
100015b90:	5b	popq	%rbx
100015b91:	41 5e	popq	%r14
100015b93:	5d	popq	%rbp
100015b94:	e9 f4 74 ff ff	jmp	0x10000d08d
100015b99:	55	pushq	%rbp
100015b9a:	48 89 e5	movq	%rsp, %rbp
100015b9d:	48 8b 3d c4 d2 04 00	movq	316100(%rip), %rdi
100015ba4:	e8 af c0 02 00	callq	0x100041c58 ## symbol stub for: _os_release
100015ba9:	48 c7 05 b4 d2 04 00 00 00 00 00	movq	$0, 316084(%rip)
100015bb4:	5d	popq	%rbp
100015bb5:	c3	retq
100015bb6:	55	pushq	%rbp
100015bb7:	48 89 e5	movq	%rsp, %rbp
100015bba:	53	pushq	%rbx
100015bbb:	50	pushq	%rax
100015bbc:	48 89 fb	movq	%rdi, %rbx
100015bbf:	be 02 00 00 00	movl	$2, %esi
100015bc4:	e8 79 75 ff ff	callq	0x10000d142
100015bc9:	80 3d 90 d2 04 00 01	cmpb	$1, 316048(%rip)
100015bd0:	75 29	jne	0x100015bfb
100015bd2:	48 8b 3d 9f d2 04 00	movq	316063(%rip), %rdi
100015bd9:	48 85 ff	testq	%rdi, %rdi
100015bdc:	75 0f	jne	0x100015bed
100015bde:	e8 4a 71 ff ff	callq	0x10000cd2d
100015be3:	48 89 c7	movq	%rax, %rdi
100015be6:	48 89 05 8b d2 04 00	movq	%rax, 316043(%rip)
100015bed:	48 89 de	movq	%rbx, %rsi
100015bf0:	48 83 c4 08	addq	$8, %rsp
100015bf4:	5b	popq	%rbx
100015bf5:	5d	popq	%rbp
100015bf6:	e9 98 71 ff ff	jmp	0x10000cd93
100015bfb:	48 83 c4 08	addq	$8, %rsp
100015bff:	5b	popq	%rbx
100015c00:	5d	popq	%rbp
100015c01:	c3	retq
100015c02:	48 85 ff	testq	%rdi, %rdi
100015c05:	74 06	je	0x100015c0d
100015c07:	48 89 f8	movq	%rdi, %rax
100015c0a:	31 d2	xorl	%edx, %edx
100015c0c:	c3	retq
100015c0d:	55	pushq	%rbp
100015c0e:	48 89 e5	movq	%rsp, %rbp
100015c11:	e8 47 a6 02 00	callq	0x10004025d
100015c16:	85 ff	testl	%edi, %edi
100015c18:	74 05	je	0x100015c1f
100015c1a:	31 c0	xorl	%eax, %eax
100015c1c:	89 fa	movl	%edi, %edx
100015c1e:	c3	retq
100015c1f:	55	pushq	%rbp
100015c20:	48 89 e5	movq	%rsp, %rbp
100015c23:	e8 47 a6 02 00	callq	0x10004026f
100015c28:	55	pushq	%rbp
100015c29:	48 89 e5	movq	%rsp, %rbp
100015c2c:	bf 50 00 00 00	movl	$80, %edi
100015c31:	5d	popq	%rbp
100015c32:	e9 ae 78 ff ff	jmp	0x10000d4e5
100015c37:	55	pushq	%rbp
100015c38:	48 89 e5	movq	%rsp, %rbp
100015c3b:	5d	popq	%rbp
100015c3c:	e9 ef bd 02 00	jmp	0x100041a30 ## symbol stub for: _free
100015c41:	55	pushq	%rbp
100015c42:	48 89 e5	movq	%rsp, %rbp
100015c45:	48 8b 07	movq	(%rdi), %rax
100015c48:	48 85 c0	testq	%rax, %rax
100015c4b:	74 29	je	0x100015c76
100015c4d:	8b 4f 4c	movl	76(%rdi), %ecx
100015c50:	03 4f 48	addl	72(%rdi), %ecx
100015c53:	83 e1 0f	andl	$15, %ecx
100015c56:	29 c6	subl	%eax, %esi
100015c58:	89 74 8f 08	movl	%esi, 8(%rdi,%rcx,4)
100015c5c:	8b 47 4c	movl	76(%rdi), %eax
100015c5f:	83 f8 0f	cmpl	$15, %eax
100015c62:	77 07	ja	0x100015c6b
100015c64:	ff c0	incl	%eax
100015c66:	89 47 4c	movl	%eax, 76(%rdi)
100015c69:	eb 0b	jmp	0x100015c76
100015c6b:	8b 47 48	movl	72(%rdi), %eax
100015c6e:	ff c0	incl	%eax
100015c70:	83 e0 0f	andl	$15, %eax
100015c73:	89 47 48	movl	%eax, 72(%rdi)
100015c76:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
100015c7d:	5d	popq	%rbp
100015c7e:	c3	retq
100015c7f:	55	pushq	%rbp
100015c80:	48 89 e5	movq	%rsp, %rbp
100015c83:	48 89 37	movq	%rsi, (%rdi)
100015c86:	5d	popq	%rbp
100015c87:	c3	retq
100015c88:	55	pushq	%rbp
100015c89:	48 89 e5	movq	%rsp, %rbp
100015c8c:	8b 47 4c	movl	76(%rdi), %eax
100015c8f:	5d	popq	%rbp
100015c90:	c3	retq
100015c91:	55	pushq	%rbp
100015c92:	48 89 e5	movq	%rsp, %rbp
100015c95:	03 77 48	addl	72(%rdi), %esi
100015c98:	83 e6 0f	andl	$15, %esi
100015c9b:	8b 44 b7 08	movl	8(%rdi,%rsi,4), %eax
100015c9f:	5d	popq	%rbp
100015ca0:	c3	retq
100015ca1:	90	nop
100015ca2:	90	nop
100015ca3:	90	nop
100015ca4:	48 85 ff	testq	%rdi, %rdi
100015ca7:	74 06	je	0x100015caf
100015ca9:	48 89 f8	movq	%rdi, %rax
100015cac:	31 d2	xorl	%edx, %edx
100015cae:	c3	retq
100015caf:	55	pushq	%rbp
100015cb0:	48 89 e5	movq	%rsp, %rbp
100015cb3:	e8 cb a5 02 00	callq	0x100040283
100015cb8:	85 ff	testl	%edi, %edi
100015cba:	74 05	je	0x100015cc1
100015cbc:	31 c0	xorl	%eax, %eax
100015cbe:	89 fa	movl	%edi, %edx
100015cc0:	c3	retq
100015cc1:	55	pushq	%rbp
100015cc2:	48 89 e5	movq	%rsp, %rbp
100015cc5:	e8 cb a5 02 00	callq	0x100040295
100015cca:	55	pushq	%rbp
100015ccb:	48 89 e5	movq	%rsp, %rbp
100015cce:	53	pushq	%rbx
100015ccf:	50	pushq	%rax
100015cd0:	48 89 f3	movq	%rsi, %rbx
100015cd3:	e8 84 54 01 00	callq	0x10002b15c
100015cd8:	31 c9	xorl	%ecx, %ecx
100015cda:	48 3b 05 b7 23 04 00	cmpq	271287(%rip), %rax
100015ce1:	74 2a	je	0x100015d0d
100015ce3:	b9 01 00 00 00	movl	$1, %ecx
100015ce8:	48 3b 05 b1 23 04 00	cmpq	271281(%rip), %rax
100015cef:	74 1c	je	0x100015d0d
100015cf1:	48 3b 05 b0 23 04 00	cmpq	271280(%rip), %rax
100015cf8:	74 13	je	0x100015d0d
100015cfa:	b9 16 00 00 00	movl	$22, %ecx
100015cff:	48 3b 05 8a 23 04 00	cmpq	271242(%rip), %rax
100015d06:	75 0a	jne	0x100015d12
100015d08:	b9 03 00 00 00	movl	$3, %ecx
100015d0d:	48 89 0b	movq	%rcx, (%rbx)
100015d10:	31 c9	xorl	%ecx, %ecx
100015d12:	89 c8	movl	%ecx, %eax
100015d14:	48 83 c4 08	addq	$8, %rsp
100015d18:	5b	popq	%rbx
100015d19:	5d	popq	%rbp
100015d1a:	c3	retq
100015d1b:	55	pushq	%rbp
100015d1c:	48 89 e5	movq	%rsp, %rbp
100015d1f:	53	pushq	%rbx
100015d20:	50	pushq	%rax
100015d21:	48 8d 0d b9 ca 04 00	leaq	314041(%rip), %rcx
100015d28:	31 c0	xorl	%eax, %eax
100015d2a:	80 39 00	cmpb	$0, (%rcx)
100015d2d:	75 26	jne	0x100015d55
100015d2f:	0f ba a7 0d 05 00 00 18	btl	$24, 1293(%rdi)
100015d37:	72 1c	jb	0x100015d55
100015d39:	48 89 f3	movq	%rsi, %rbx
100015d3c:	48 81 c7 f0 03 00 00	addq	$1008, %rdi
100015d43:	e8 a2 37 02 00	callq	0x1000394ea
100015d48:	31 c9	xorl	%ecx, %ecx
100015d4a:	38 43 28	cmpb	%al, 40(%rbx)
100015d4d:	b8 06 00 00 00	movl	$6, %eax
100015d52:	0f 45 c1	cmovnel	%ecx, %eax
100015d55:	48 83 c4 08	addq	$8, %rsp
100015d59:	5b	popq	%rbx
100015d5a:	5d	popq	%rbp
100015d5b:	c3	retq
100015d5c:	55	pushq	%rbp
100015d5d:	48 89 e5	movq	%rsp, %rbp
100015d60:	41 57	pushq	%r15
100015d62:	41 56	pushq	%r14
100015d64:	53	pushq	%rbx
100015d65:	50	pushq	%rax
100015d66:	48 8d 0d 74 ca 04 00	leaq	313972(%rip), %rcx
100015d6d:	31 c0	xorl	%eax, %eax
100015d6f:	80 39 00	cmpb	$0, (%rcx)
100015d72:	75 63	jne	0x100015dd7
100015d74:	48 89 fb	movq	%rdi, %rbx
100015d77:	0f ba a7 0d 05 00 00 18	btl	$24, 1293(%rdi)
100015d7f:	72 56	jb	0x100015dd7
100015d81:	49 89 f6	movq	%rsi, %r14
100015d84:	4c 8d bb f0 03 00 00	leaq	1008(%rbx), %r15
100015d8b:	4c 89 ff	movq	%r15, %rdi
100015d8e:	e8 15 38 02 00	callq	0x1000395a8
100015d93:	b1 01	movb	$1, %cl
100015d95:	84 c0	testb	%al, %al
100015d97:	75 30	jne	0x100015dc9
100015d99:	4c 89 ff	movq	%r15, %rdi
100015d9c:	e8 33 36 02 00	callq	0x1000393d4
100015da1:	84 c0	testb	%al, %al
100015da3:	74 0f	je	0x100015db4
100015da5:	4c 89 ff	movq	%r15, %rdi
100015da8:	e8 43 36 02 00	callq	0x1000393f0
100015dad:	85 c0	testl	%eax, %eax
100015daf:	0f 94 c1	sete	%cl
100015db2:	eb 15	jmp	0x100015dc9
100015db4:	83 bb 98 03 00 00 00	cmpl	$0, 920(%rbx)
100015dbb:	74 04	je	0x100015dc1
100015dbd:	31 c9	xorl	%ecx, %ecx
100015dbf:	eb 08	jmp	0x100015dc9
100015dc1:	41 80 7e 28 00	cmpb	$0, 40(%r14)
100015dc6:	0f 95 c1	setne	%cl
100015dc9:	31 d2	xorl	%edx, %edx
100015dcb:	41 38 4e 28	cmpb	%cl, 40(%r14)
100015dcf:	b8 06 00 00 00	movl	$6, %eax
100015dd4:	0f 45 c2	cmovnel	%edx, %eax
100015dd7:	48 83 c4 08	addq	$8, %rsp
100015ddb:	5b	popq	%rbx
100015ddc:	41 5e	popq	%r14
100015dde:	41 5f	popq	%r15
100015de0:	5d	popq	%rbp
100015de1:	c3	retq
100015de2:	55	pushq	%rbp
100015de3:	48 89 e5	movq	%rsp, %rbp
100015de6:	41 57	pushq	%r15
100015de8:	41 56	pushq	%r14
100015dea:	41 54	pushq	%r12
100015dec:	53	pushq	%rbx
100015ded:	49 89 f6	movq	%rsi, %r14
100015df0:	48 8b 9f 80 00 00 00	movq	128(%rdi), %rbx
100015df7:	45 31 ff	xorl	%r15d, %r15d
100015dfa:	41 bc 00 00 00 00	movl	$0, %r12d
100015e00:	48 85 db	testq	%rbx, %rbx
100015e03:	74 1a	je	0x100015e1f
100015e05:	45 31 e4	xorl	%r12d, %r12d
100015e08:	48 89 df	movq	%rbx, %rdi
100015e0b:	e8 44 bd 01 00	callq	0x100031b54
100015e10:	0f b6 c0	movzbl	%al, %eax
100015e13:	41 09 c4	orl	%eax, %r12d
100015e16:	48 8b 5b 08	movq	8(%rbx), %rbx
100015e1a:	48 85 db	testq	%rbx, %rbx
100015e1d:	75 e9	jne	0x100015e08
100015e1f:	41 0f b6 46 28	movzbl	40(%r14), %eax
100015e24:	41 39 c4	cmpl	%eax, %r12d
100015e27:	b8 0e 00 00 00	movl	$14, %eax
100015e2c:	44 0f 44 f8	cmovel	%eax, %r15d
100015e30:	44 89 f8	movl	%r15d, %eax
100015e33:	5b	popq	%rbx
100015e34:	41 5c	popq	%r12
100015e36:	41 5e	popq	%r14
100015e38:	41 5f	popq	%r15
100015e3a:	5d	popq	%rbp
100015e3b:	c3	retq
100015e3c:	55	pushq	%rbp
100015e3d:	48 89 e5	movq	%rsp, %rbp
100015e40:	41 56	pushq	%r14
100015e42:	53	pushq	%rbx
100015e43:	48 8d 0d 97 c9 04 00	leaq	313751(%rip), %rcx
100015e4a:	31 c0	xorl	%eax, %eax
100015e4c:	80 39 00	cmpb	$0, (%rcx)
100015e4f:	75 55	jne	0x100015ea6
100015e51:	0f ba a7 0d 05 00 00 18	btl	$24, 1293(%rdi)
100015e59:	72 4b	jb	0x100015ea6
100015e5b:	48 89 f3	movq	%rsi, %rbx
100015e5e:	4c 8b b7 e8 00 00 00	movq	232(%rdi), %r14
100015e65:	48 8b 76 20	movq	32(%rsi), %rsi
100015e69:	4c 89 f7	movq	%r14, %rdi
100015e6c:	e8 b0 e3 00 00	callq	0x100024221
100015e71:	48 85 c0	testq	%rax, %rax
100015e74:	75 1d	jne	0x100015e93
100015e76:	4c 89 f7	movq	%r14, %rdi
100015e79:	e8 a9 55 01 00	callq	0x10002b427
100015e7e:	48 85 c0	testq	%rax, %rax
100015e81:	74 0e	je	0x100015e91
100015e83:	48 8b 73 20	movq	32(%rbx), %rsi
100015e87:	48 89 c7	movq	%rax, %rdi
100015e8a:	e8 92 e3 00 00	callq	0x100024221
100015e8f:	eb 02	jmp	0x100015e93
100015e91:	31 c0	xorl	%eax, %eax
100015e93:	48 85 c0	testq	%rax, %rax
100015e96:	0f 95 c0	setne	%al
100015e99:	31 c9	xorl	%ecx, %ecx
100015e9b:	38 43 28	cmpb	%al, 40(%rbx)
100015e9e:	b8 06 00 00 00	movl	$6, %eax
100015ea3:	0f 45 c1	cmovnel	%ecx, %eax
100015ea6:	5b	popq	%rbx
100015ea7:	41 5e	popq	%r14
100015ea9:	5d	popq	%rbp
100015eaa:	c3	retq
100015eab:	55	pushq	%rbp
100015eac:	48 89 e5	movq	%rsp, %rbp
100015eaf:	41 57	pushq	%r15
100015eb1:	41 56	pushq	%r14
100015eb3:	41 55	pushq	%r13
100015eb5:	41 54	pushq	%r12
100015eb7:	53	pushq	%rbx
100015eb8:	50	pushq	%rax
100015eb9:	48 89 55 d0	movq	%rdx, -48(%rbp)
100015ebd:	41 89 f4	movl	%esi, %r12d
100015ec0:	49 89 ff	movq	%rdi, %r15
100015ec3:	48 8b 9f f8 01 00 00	movq	504(%rdi), %rbx
100015eca:	48 85 db	testq	%rbx, %rbx
100015ecd:	74 61	je	0x100015f30
100015ecf:	4c 8d 2d 38 84 00 00	leaq	33848(%rip), %r13
100015ed6:	4c 8b 33	movq	(%rbx), %r14
100015ed9:	41 83 fc 09	cmpl	$9, %r12d
100015edd:	74 06	je	0x100015ee5
100015edf:	44 39 63 20	cmpl	%r12d, 32(%rbx)
100015ee3:	75 43	jne	0x100015f28
100015ee5:	4c 89 ff	movq	%r15, %rdi
100015ee8:	be 1c 00 00 00	movl	$28, %esi
100015eed:	e8 dc c9 ff ff	callq	0x1000128ce
100015ef2:	48 89 43 28	movq	%rax, 40(%rbx)
100015ef6:	e8 ff 85 ff ff	callq	0x10000e4fa
100015efb:	48 89 c7	movq	%rax, %rdi
100015efe:	48 89 de	movq	%rbx, %rsi
100015f01:	4c 89 ea	movq	%r13, %rdx
100015f04:	e8 d7 b9 02 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
100015f09:	48 8b 03	movq	(%rbx), %rax
100015f0c:	48 85 c0	testq	%rax, %rax
100015f0f:	74 08	je	0x100015f19
100015f11:	48 8b 4b 08	movq	8(%rbx), %rcx
100015f15:	48 89 48 08	movq	%rcx, 8(%rax)
100015f19:	48 8b 4b 08	movq	8(%rbx), %rcx
100015f1d:	48 89 01	movq	%rax, (%rcx)
100015f20:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100015f24:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
100015f28:	4c 89 f3	movq	%r14, %rbx
100015f2b:	4d 85 f6	testq	%r14, %r14
100015f2e:	75 a6	jne	0x100015ed6
100015f30:	4c 89 ff	movq	%r15, %rdi
100015f33:	be 21 00 00 00	movl	$33, %esi
100015f38:	e8 91 c9 ff ff	callq	0x1000128ce
100015f3d:	41 8d 44 24 ff	leal	-1(%r12), %eax
100015f42:	83 f8 08	cmpl	$8, %eax
100015f45:	77 0f	ja	0x100015f56
100015f47:	48 98	cltq
100015f49:	48 8d 0d c8 4f 04 00	leaq	282568(%rip), %rcx
100015f50:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
100015f54:	eb 07	jmp	0x100015f5d
100015f56:	48 8d 0d 8f 40 03 00	leaq	213135(%rip), %rcx ## literal pool for: "WILL_SPAWN"
100015f5d:	48 8d 15 e7 3c 03 00	leaq	212199(%rip), %rdx ## literal pool for: "internal event: %s, code = %ld"
100015f64:	4c 89 ff	movq	%r15, %rdi
100015f67:	be 05 00 00 00	movl	$5, %esi
100015f6c:	48 8b 5d d0	movq	-48(%rbp), %rbx
100015f70:	49 89 d8	movq	%rbx, %r8
100015f73:	31 c0	xorl	%eax, %eax
100015f75:	e8 40 00 00 00	callq	0x100015fba
100015f7a:	4c 89 ff	movq	%r15, %rdi
100015f7d:	44 89 e6	movl	%r12d, %esi
100015f80:	48 89 da	movq	%rbx, %rdx
100015f83:	e8 f8 d6 01 00	callq	0x100033680
100015f88:	49 8b 8f 30 02 00 00	movq	560(%r15), %rcx
100015f8f:	4c 89 ff	movq	%r15, %rdi
100015f92:	44 89 e6	movl	%r12d, %esi
100015f95:	48 89 da	movq	%rbx, %rdx
100015f98:	41 ff 97 00 02 00 00	callq	*512(%r15)
100015f9f:	4c 89 ff	movq	%r15, %rdi
100015fa2:	be 21 00 00 00	movl	$33, %esi
100015fa7:	48 83 c4 08	addq	$8, %rsp
100015fab:	5b	popq	%rbx
100015fac:	41 5c	popq	%r12
100015fae:	41 5d	popq	%r13
100015fb0:	41 5e	popq	%r14
100015fb2:	41 5f	popq	%r15
100015fb4:	5d	popq	%rbp
100015fb5:	e9 97 c9 ff ff	jmp	0x100012951
100015fba:	55	pushq	%rbp
100015fbb:	48 89 e5	movq	%rsp, %rbp
100015fbe:	41 57	pushq	%r15
100015fc0:	41 56	pushq	%r14
100015fc2:	41 54	pushq	%r12
100015fc4:	53	pushq	%rbx
100015fc5:	48 81 ec d0 00 00 00	subq	$208, %rsp
100015fcc:	49 89 d6	movq	%rdx, %r14
100015fcf:	41 89 f7	movl	%esi, %r15d
100015fd2:	4c 8d a5 10 ff ff ff	leaq	-240(%rbp), %r12
100015fd9:	49 89 4c 24 18	movq	%rcx, 24(%r12)
100015fde:	4d 89 44 24 20	movq	%r8, 32(%r12)
100015fe3:	4d 89 4c 24 28	movq	%r9, 40(%r12)
100015fe8:	84 c0	testb	%al, %al
100015fea:	74 2c	je	0x100016018
100015fec:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100015ff3:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
100015ffa:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
100016001:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
100016008:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
10001600c:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
100016010:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
100016014:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
100016018:	48 8b 05 09 20 04 00	movq	270345(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001601f:	48 8b 00	movq	(%rax), %rax
100016022:	48 89 45 d8	movq	%rax, -40(%rbp)
100016026:	be 02 00 00 00	movl	$2, %esi
10001602b:	e8 f8 22 00 00	callq	0x100018328
100016030:	48 89 c3	movq	%rax, %rbx
100016033:	0f 28 05 46 d2 02 00	movaps	184902(%rip), %xmm0
10001603a:	48 8d 4d c0	leaq	-64(%rbp), %rcx
10001603e:	0f 29 01	movaps	%xmm0, (%rcx)
100016041:	4c 89 61 10	movq	%r12, 16(%rcx)
100016045:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
10001604f:	48 89 01	movq	%rax, (%rcx)
100016052:	48 8d 45 10	leaq	16(%rbp), %rax
100016056:	48 89 41 08	movq	%rax, 8(%rcx)
10001605a:	4c 8b 45 08	movq	8(%rbp), %r8
10001605e:	48 89 df	movq	%rbx, %rdi
100016061:	44 89 fe	movl	%r15d, %esi
100016064:	4c 89 f2	movq	%r14, %rdx
100016067:	e8 f7 f6 01 00	callq	0x100035763
10001606c:	48 89 df	movq	%rbx, %rdi
10001606f:	e8 bc b9 02 00	callq	0x100041a30 ## symbol stub for: _free
100016074:	48 8b 05 ad 1f 04 00	movq	270253(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001607b:	48 8b 00	movq	(%rax), %rax
10001607e:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100016082:	75 10	jne	0x100016094
100016084:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10001608b:	5b	popq	%rbx
10001608c:	41 5c	popq	%r12
10001608e:	41 5e	popq	%r14
100016090:	41 5f	popq	%r15
100016092:	5d	popq	%rbp
100016093:	c3	retq
100016094:	e8 d9 b6 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100016099:	55	pushq	%rbp
10001609a:	48 89 e5	movq	%rsp, %rbp
10001609d:	41 57	pushq	%r15
10001609f:	41 56	pushq	%r14
1000160a1:	41 55	pushq	%r13
1000160a3:	41 54	pushq	%r12
1000160a5:	53	pushq	%rbx
1000160a6:	48 81 ec 58 06 00 00	subq	$1624, %rsp
1000160ad:	41 89 f6	movl	%esi, %r14d
1000160b0:	48 89 fb	movq	%rdi, %rbx
1000160b3:	48 8b 05 6e 1f 04 00	movq	270190(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000160ba:	48 8b 00	movq	(%rax), %rax
1000160bd:	48 89 45 d0	movq	%rax, -48(%rbp)
1000160c1:	48 8b 97 30 02 00 00	movq	560(%rdi), %rdx
1000160c8:	ff 97 08 02 00 00	callq	*520(%rdi)
1000160ce:	83 f8 7c	cmpl	$124, %eax
1000160d1:	74 7c	je	0x10001614f
1000160d3:	41 89 c7	movl	%eax, %r15d
1000160d6:	85 c0	testl	%eax, %eax
1000160d8:	0f 85 d1 01 00 00	jne	0x1000162af
1000160de:	0f ba a3 0d 05 00 00 14	btl	$20, 1293(%rbx)
1000160e6:	72 6f	jb	0x100016157
1000160e8:	44 89 b5 a0 f9 ff ff	movl	%r14d, -1632(%rbp)
1000160ef:	49 89 dc	movq	%rbx, %r12
1000160f2:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000160f9:	e8 5e 50 01 00	callq	0x10002b15c
1000160fe:	48 3b 05 8b 1f 04 00	cmpq	270219(%rip), %rax
100016105:	0f 84 8a 00 00 00	je	0x100016195
10001610b:	4d 89 e6	movq	%r12, %r14
10001610e:	41 8b 84 24 b4 03 00 00	movl	948(%r12), %eax
100016116:	85 c0	testl	%eax, %eax
100016118:	8b 9d a0 f9 ff ff	movl	-1632(%rbp), %ebx
10001611e:	74 58	je	0x100016178
100016120:	39 d8	cmpl	%ebx, %eax
100016122:	74 54	je	0x100016178
100016124:	89 df	movl	%ebx, %edi
100016126:	e8 90 80 00 00	callq	0x10001e1bb
10001612b:	48 8d 15 84 3f 03 00	leaq	212868(%rip), %rdx ## literal pool for: "ignoring spawn reason '%s' due to filter"
100016132:	4c 89 f7	movq	%r14, %rdi
100016135:	be 05 00 00 00	movl	$5, %esi
10001613a:	48 89 c1	movq	%rax, %rcx
10001613d:	31 c0	xorl	%eax, %eax
10001613f:	e8 76 fe ff ff	callq	0x100015fba
100016144:	41 bf 66 00 00 00	movl	$102, %r15d
10001614a:	e9 60 01 00 00	jmp	0x1000162af
10001614f:	45 31 ff	xorl	%r15d, %r15d
100016152:	e9 58 01 00 00	jmp	0x1000162af
100016157:	48 8d 15 eb 3e 03 00	leaq	212715(%rip), %rdx ## literal pool for: "cannot spawn: service is in penalty box"
10001615e:	48 89 df	movq	%rbx, %rdi
100016161:	be 05 00 00 00	movl	$5, %esi
100016166:	31 c0	xorl	%eax, %eax
100016168:	e8 4d fe ff ff	callq	0x100015fba
10001616d:	41 bf 8b 00 00 00	movl	$139, %r15d
100016173:	e9 37 01 00 00	jmp	0x1000162af
100016178:	49 83 be d8 02 00 00 00	cmpq	$0, 728(%r14)
100016180:	0f 84 52 01 00 00	je	0x1000162d8
100016186:	48 8d 15 52 3f 03 00	leaq	212818(%rip), %rdx ## literal pool for: "cannot spawn: service is throttled"
10001618d:	4c 89 f7	movq	%r14, %rdi
100016190:	e9 08 01 00 00	jmp	0x10001629d
100016195:	48 8b 1d e4 cc 04 00	movq	314596(%rip), %rbx
10001619c:	4d 8d bc 24 18 05 00 00	leaq	1304(%r12), %r15
1000161a4:	4c 8d 2d 76 3f 03 00	leaq	212854(%rip), %r13 ## literal pool for: "evaluating against global attach: %s"
1000161ab:	48 85 db	testq	%rbx, %rbx
1000161ae:	0f 84 57 ff ff ff	je	0x10001610b
1000161b4:	49 89 de	movq	%rbx, %r14
1000161b7:	48 8b 1b	movq	(%rbx), %rbx
1000161ba:	49 8b 4e 10	movq	16(%r14), %rcx
1000161be:	4c 89 e7	movq	%r12, %rdi
1000161c1:	be 05 00 00 00	movl	$5, %esi
1000161c6:	4c 89 ea	movq	%r13, %rdx
1000161c9:	31 c0	xorl	%eax, %eax
1000161cb:	e8 ea fd ff ff	callq	0x100015fba
1000161d0:	49 8b 76 10	movq	16(%r14), %rsi
1000161d4:	4c 89 ff	movq	%r15, %rdi
1000161d7:	e8 50 bc 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000161dc:	85 c0	testl	%eax, %eax
1000161de:	75 cb	jne	0x1000161ab
1000161e0:	4c 89 e3	movq	%r12, %rbx
1000161e3:	49 8b bc 24 e8 00 00 00	movq	232(%r12), %rdi
1000161eb:	e8 76 4f 01 00	callq	0x10002b166
1000161f0:	49 89 c7	movq	%rax, %r15
1000161f3:	49 8b 7e 18	movq	24(%r14), %rdi
1000161f7:	48 8d 35 48 3f 03 00	leaq	212808(%rip), %rsi ## literal pool for: "handle"
1000161fe:	48 89 c2	movq	%rax, %rdx
100016201:	e8 9c be 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100016206:	48 8d 15 40 3f 03 00	leaq	212800(%rip), %rdx ## literal pool for: "sending request back through server: new handle = %lu"
10001620d:	4c 89 e7	movq	%r12, %rdi
100016210:	be 05 00 00 00	movl	$5, %esi
100016215:	4c 89 f9	movq	%r15, %rcx
100016218:	31 c0	xorl	%eax, %eax
10001621a:	e8 9b fd ff ff	callq	0x100015fba
10001621f:	48 8d 05 4a c5 04 00	leaq	312650(%rip), %rax
100016226:	8b 38	movl	(%rax), %edi
100016228:	49 8b 76 18	movq	24(%r14), %rsi
10001622c:	e8 03 3d 02 00	callq	0x100039f34
100016231:	49 8b 7e 18	movq	24(%r14), %rdi
100016235:	e8 c2 be 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001623a:	49 8b 06	movq	(%r14), %rax
10001623d:	48 85 c0	testq	%rax, %rax
100016240:	74 08	je	0x10001624a
100016242:	49 8b 4e 08	movq	8(%r14), %rcx
100016246:	48 89 48 08	movq	%rcx, 8(%rax)
10001624a:	49 8b 4e 08	movq	8(%r14), %rcx
10001624e:	48 89 01	movq	%rax, (%rcx)
100016251:	4c 89 f7	movq	%r14, %rdi
100016254:	e8 d7 b7 02 00	callq	0x100041a30 ## symbol stub for: _free
100016259:	8b 85 a0 f9 ff ff	movl	-1632(%rbp), %eax
10001625f:	41 89 84 24 d4 02 00 00	movl	%eax, 724(%r12)
100016267:	41 80 8c 24 ea 04 00 00 08	orb	$8, 1258(%r12)
100016270:	48 8d 15 0c 3f 03 00	leaq	212748(%rip), %rdx ## literal pool for: "service spawn pended until controller attaches"
100016277:	4c 89 e7	movq	%r12, %rdi
10001627a:	be 05 00 00 00	movl	$5, %esi
10001627f:	31 c0	xorl	%eax, %eax
100016281:	e8 34 fd ff ff	callq	0x100015fba
100016286:	4c 89 e7	movq	%r12, %rdi
100016289:	be 01 00 00 00	movl	$1, %esi
10001628e:	e8 48 82 00 00	callq	0x10001e4db
100016293:	48 8d 15 d7 3d 03 00	leaq	212439(%rip), %rdx ## literal pool for: "matched pending controller attach; deferring spawn for configuration"
10001629a:	4c 89 e7	movq	%r12, %rdi
10001629d:	be 05 00 00 00	movl	$5, %esi
1000162a2:	31 c0	xorl	%eax, %eax
1000162a4:	e8 11 fd ff ff	callq	0x100015fba
1000162a9:	41 bf 24 00 00 00	movl	$36, %r15d
1000162af:	48 8b 05 72 1d 04 00	movq	269682(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000162b6:	48 8b 00	movq	(%rax), %rax
1000162b9:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000162bd:	0f 85 fd 0e 00 00	jne	0x1000171c0
1000162c3:	44 89 f8	movl	%r15d, %eax
1000162c6:	48 81 c4 58 06 00 00	addq	$1624, %rsp
1000162cd:	5b	popq	%rbx
1000162ce:	41 5c	popq	%r12
1000162d0:	41 5d	popq	%r13
1000162d2:	41 5e	popq	%r14
1000162d4:	41 5f	popq	%r15
1000162d6:	5d	popq	%rbp
1000162d7:	c3	retq
1000162d8:	49 8b 86 0d 05 00 00	movq	1293(%r14), %rax
1000162df:	0f ba e0 12	btl	$18, %eax
1000162e3:	72 13	jb	0x1000162f8
1000162e5:	66 85 c0	testw	%ax, %ax
1000162e8:	78 0e	js	0x1000162f8
1000162ea:	89 d8	movl	%ebx, %eax
1000162ec:	83 c8 08	orl	$8, %eax
1000162ef:	83 f8 0b	cmpl	$11, %eax
1000162f2:	0f 85 ca 02 00 00	jne	0x1000165c2
1000162f8:	41 80 be a0 01 00 00 02	cmpb	$2, 416(%r14)
100016300:	0f 83 90 01 00 00	jae	0x100016496
100016306:	4c 89 f7	movq	%r14, %rdi
100016309:	be 01 00 00 00	movl	$1, %esi
10001630e:	e8 c8 81 00 00	callq	0x10001e4db
100016313:	41 80 be a0 01 00 00 01	cmpb	$1, 416(%r14)
10001631b:	0f 85 5d 0e 00 00	jne	0x10001717e
100016321:	4c 89 f7	movq	%r14, %rdi
100016324:	be 02 00 00 00	movl	$2, %esi
100016329:	e8 ad 81 00 00	callq	0x10001e4db
10001632e:	41 80 be a0 01 00 00 02	cmpb	$2, 416(%r14)
100016336:	0f 85 47 0e 00 00	jne	0x100017183
10001633c:	49 83 be 60 03 00 00 00	cmpq	$0, 864(%r14)
100016344:	74 2a	je	0x100016370
100016346:	bf 08 00 00 00	movl	$8, %edi
10001634b:	e8 e8 b4 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
100016350:	48 b9 db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %rcx
10001635a:	48 f7 e1	mulq	%rcx
10001635d:	48 c1 ea 12	shrq	$18, %rdx
100016361:	49 8b be 60 03 00 00	movq	864(%r14), %rdi
100016368:	48 89 d6	movq	%rdx, %rsi
10001636b:	e8 d1 f8 ff ff	callq	0x100015c41
100016370:	49 81 a6 0d 05 00 00 ff ff fb fe	andq	$-17039361, 1293(%r14)
10001637b:	41 89 9e cc 03 00 00	movl	%ebx, 972(%r14)
100016382:	41 0f b6 86 ea 04 00 00	movzbl	1258(%r14), %eax
10001638a:	83 e0 02	andl	$2, %eax
10001638d:	b9 77 ff ff ff	movl	$4294967159, %ecx
100016392:	41 23 8e e8 03 00 00	andl	1000(%r14), %ecx
100016399:	8d 04 81	leal	(%rcx,%rax,4), %eax
10001639c:	66 41 89 86 e8 03 00 00	movw	%ax, 1000(%r14)
1000163a4:	48 8d 9d a8 f9 ff ff	leaq	-1624(%rbp), %rbx
1000163ab:	ba 98 05 00 00	movl	$1432, %edx
1000163b0:	48 89 df	movq	%rbx, %rdi
1000163b3:	be aa 00 00 00	movl	$170, %esi
1000163b8:	e8 1d b8 02 00	callq	0x100041bda ## symbol stub for: _memset
1000163bd:	45 31 ff	xorl	%r15d, %r15d
1000163c0:	48 89 df	movq	%rbx, %rdi
1000163c3:	31 f6	xorl	%esi, %esi
1000163c5:	e8 6e 70 ff ff	callq	0x10000d438
1000163ca:	4c 89 b3 d8 04 00 00	movq	%r14, 1240(%rbx)
1000163d1:	49 8b 9e 88 00 00 00	movq	136(%r14), %rbx
1000163d8:	48 85 db	testq	%rbx, %rbx
1000163db:	74 3c	je	0x100016419
1000163dd:	45 31 ff	xorl	%r15d, %r15d
1000163e0:	48 89 df	movq	%rbx, %rdi
1000163e3:	be 01 00 00 00	movl	$1, %esi
1000163e8:	e8 77 47 02 00	callq	0x10003ab64
1000163ed:	42 89 84 bd a8 fe ff ff	movl	%eax, -344(%rbp,%r15,4)
1000163f5:	49 83 ff 1f	cmpq	$31, %r15
1000163f9:	0f 84 bc 00 00 00	je	0x1000164bb
1000163ff:	48 8b 5b 08	movq	8(%rbx), %rbx
100016403:	49 ff c7	incq	%r15
100016406:	48 85 db	testq	%rbx, %rbx
100016409:	75 d5	jne	0x1000163e0
10001640b:	49 8d 47 ff	leaq	-1(%r15), %rax
10001640f:	48 83 f8 1e	cmpq	$30, %rax
100016413:	0f 87 be 00 00 00	ja	0x1000164d7
100016419:	49 8b 9e a0 00 00 00	movq	160(%r14), %rbx
100016420:	48 85 db	testq	%rbx, %rbx
100016423:	74 39	je	0x10001645e
100016425:	48 89 df	movq	%rbx, %rdi
100016428:	be 01 00 00 00	movl	$1, %esi
10001642d:	e8 32 47 02 00	callq	0x10003ab64
100016432:	42 89 84 bd a8 fe ff ff	movl	%eax, -344(%rbp,%r15,4)
10001643a:	49 83 ff 1f	cmpq	$31, %r15
10001643e:	0f 84 8d 00 00 00	je	0x1000164d1
100016444:	48 8b 5b 08	movq	8(%rbx), %rbx
100016448:	49 ff c7	incq	%r15
10001644b:	48 85 db	testq	%rbx, %rbx
10001644e:	75 d5	jne	0x100016425
100016450:	49 8d 47 ff	leaq	-1(%r15), %rax
100016454:	48 83 f8 1e	cmpq	$30, %rax
100016458:	0f 87 8f 00 00 00	ja	0x1000164ed
10001645e:	49 8b 9e a8 00 00 00	movq	168(%r14), %rbx
100016465:	48 85 db	testq	%rbx, %rbx
100016468:	0f 84 95 00 00 00	je	0x100016503
10001646e:	48 89 df	movq	%rbx, %rdi
100016471:	be 01 00 00 00	movl	$1, %esi
100016476:	e8 e9 46 02 00	callq	0x10003ab64
10001647b:	42 89 84 bd a8 fe ff ff	movl	%eax, -344(%rbp,%r15,4)
100016483:	49 83 ff 1f	cmpq	$31, %r15
100016487:	0f 84 88 0a 00 00	je	0x100016f15
10001648d:	48 8b 5b 08	movq	8(%rbx), %rbx
100016491:	49 ff c7	incq	%r15
100016494:	eb cf	jmp	0x100016465
100016496:	41 bf 24 00 00 00	movl	$36, %r15d
10001649c:	0f 84 0d fe ff ff	je	0x1000162af
1000164a2:	4c 89 f7	movq	%r14, %rdi
1000164a5:	e8 d7 80 00 00	callq	0x10001e581
1000164aa:	48 8d 3d 51 3c 03 00	leaq	212049(%rip), %rdi ## literal pool for: "Spawning a service in state %s"
1000164b1:	48 89 c6	movq	%rax, %rsi
1000164b4:	31 c0	xorl	%eax, %eax
1000164b6:	e8 57 df 01 00	callq	0x100034412
1000164bb:	48 8d 15 80 3e 03 00	leaq	212608(%rip), %rdx ## literal pool for: "Skipping remaining service endpoints for importance boosting."
1000164c2:	4c 89 f7	movq	%r14, %rdi
1000164c5:	be 04 00 00 00	movl	$4, %esi
1000164ca:	31 c0	xorl	%eax, %eax
1000164cc:	e8 e9 fa ff ff	callq	0x100015fba
1000164d1:	41 bf 20 00 00 00	movl	$32, %r15d
1000164d7:	48 8d 15 a2 3e 03 00	leaq	212642(%rip), %rdx ## literal pool for: "Skipping remaining event endpoints for importance boosting."
1000164de:	4c 89 f7	movq	%r14, %rdi
1000164e1:	be 04 00 00 00	movl	$4, %esi
1000164e6:	31 c0	xorl	%eax, %eax
1000164e8:	e8 cd fa ff ff	callq	0x100015fba
1000164ed:	48 8d 15 c8 3e 03 00	leaq	212680(%rip), %rdx ## literal pool for: "Skipping remaining instance endpoints for importance boosting."
1000164f4:	4c 89 f7	movq	%r14, %rdi
1000164f7:	be 04 00 00 00	movl	$4, %esi
1000164fc:	31 c0	xorl	%eax, %eax
1000164fe:	e8 b7 fa ff ff	callq	0x100015fba
100016503:	4c 89 bd 28 ff ff ff	movq	%r15, -216(%rbp)
10001650a:	49 8b b6 18 03 00 00	movq	792(%r14), %rsi
100016511:	48 85 f6	testq	%rsi, %rsi
100016514:	74 3a	je	0x100016550
100016516:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
10001651d:	e8 e0 e5 00 00	callq	0x100024b02
100016522:	48 85 c0	testq	%rax, %rax
100016525:	74 7c	je	0x1000165a3
100016527:	48 89 c7	movq	%rax, %rdi
10001652a:	be 01 00 00 00	movl	$1, %esi
10001652f:	e8 30 46 02 00	callq	0x10003ab64
100016534:	89 85 30 ff ff ff	movl	%eax, -208(%rbp)
10001653a:	89 c7	movl	%eax, %edi
10001653c:	e8 dc 37 ff ff	callq	0x100009d1d
100016541:	85 c0	testl	%eax, %eax
100016543:	0f 84 e1 00 00 00	je	0x10001662a
100016549:	89 c7	movl	%eax, %edi
10001654b:	e8 5b 9e 02 00	callq	0x1000403ab
100016550:	31 c0	xorl	%eax, %eax
100016552:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
100016559:	48 89 06	movq	%rax, (%rsi)
10001655c:	4c 8d 7d b0	leaq	-80(%rbp), %r15
100016560:	49 89 07	movq	%rax, (%r15)
100016563:	48 8d 5d 90	leaq	-112(%rbp), %rbx
100016567:	48 89 03	movq	%rax, (%rbx)
10001656a:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
100016571:	4c 89 fa	movq	%r15, %rdx
100016574:	48 89 d9	movq	%rbx, %rcx
100016577:	45 31 c0	xorl	%r8d, %r8d
10001657a:	e8 66 56 01 00	callq	0x10002bbe5
10001657f:	48 8b 03	movq	(%rbx), %rax
100016582:	49 8b 3f	movq	(%r15), %rdi
100016585:	48 85 c0	testq	%rax, %rax
100016588:	0f 84 8b 00 00 00	je	0x100016619
10001658e:	31 f6	xorl	%esi, %esi
100016590:	81 3c b7 80 00 00 00	cmpl	$128, (%rdi,%rsi,4)
100016597:	74 6a	je	0x100016603
100016599:	48 ff c6	incq	%rsi
10001659c:	48 39 f0	cmpq	%rsi, %rax
10001659f:	75 ef	jne	0x100016590
1000165a1:	eb 76	jmp	0x100016619
1000165a3:	49 8b 8e 18 03 00 00	movq	792(%r14), %rcx
1000165aa:	48 8d 15 82 d0 02 00	leaq	184450(%rip), %rdx ## literal pool for: "Could not find exception endpoint for service: %s"
1000165b1:	4c 89 f7	movq	%r14, %rdi
1000165b4:	be 03 00 00 00	movl	$3, %esi
1000165b9:	31 c0	xorl	%eax, %eax
1000165bb:	e8 fa f9 ff ff	callq	0x100015fba
1000165c0:	eb 68	jmp	0x10001662a
1000165c2:	49 8b be a0 03 00 00	movq	928(%r14), %rdi
1000165c9:	e8 7c 35 ff ff	callq	0x100009b4a
1000165ce:	48 c1 e8 09	shrq	$9, %rax
1000165d2:	48 b9 53 5a 9b a0 2f b8 44 00	movabsq	$19342813113834067, %rcx
1000165dc:	48 f7 e1	mulq	%rcx
1000165df:	48 c1 ea 0b	shrq	$11, %rdx
1000165e3:	4c 89 f7	movq	%r14, %rdi
1000165e6:	48 89 d6	movq	%rdx, %rsi
1000165e9:	89 da	movl	%ebx, %edx
1000165eb:	e8 65 7d 00 00	callq	0x10001e355
1000165f0:	41 bf 24 00 00 00	movl	$36, %r15d
1000165f6:	84 c0	testb	%al, %al
1000165f8:	0f 85 b1 fc ff ff	jne	0x1000162af
1000165fe:	e9 f5 fc ff ff	jmp	0x1000162f8
100016603:	48 8b bd 40 ff ff ff	movq	-192(%rbp), %rdi
10001660a:	e8 2b b9 02 00	callq	0x100041f3a ## symbol stub for: _xpc_array_copy_mach_send
10001660f:	89 85 30 ff ff ff	movl	%eax, -208(%rbp)
100016615:	48 8b 7d b0	movq	-80(%rbp), %rdi
100016619:	e8 12 b4 02 00	callq	0x100041a30 ## symbol stub for: _free
10001661e:	48 8b bd 40 ff ff ff	movq	-192(%rbp), %rdi
100016625:	e8 d2 ba 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001662a:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016631:	48 8b 9f 80 05 00 00	movq	1408(%rdi), %rbx
100016638:	44 8b a7 88 05 00 00	movl	1416(%rdi), %r12d
10001663f:	41 0f b7 b6 e8 03 00 00	movzwl	1000(%r14), %esi
100016647:	83 e6 08	andl	$8, %esi
10001664a:	c1 e6 04	shll	$4, %esi
10001664d:	81 ce 0c 40 00 00	orl	$16396, %esi
100016653:	e8 c0 b6 02 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
100016658:	85 c0	testl	%eax, %eax
10001665a:	0f 85 db 08 00 00	jne	0x100016f3b
100016660:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100016664:	c7 06 00 00 00 00	movl	$0, (%rsi)
10001666a:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016671:	e8 ba b6 02 00	callq	0x100041d30 ## symbol stub for: _posix_spawnattr_setsigmask
100016676:	85 c0	testl	%eax, %eax
100016678:	0f 85 d4 08 00 00	jne	0x100016f52
10001667e:	4c 8d 7d 90	leaq	-112(%rbp), %r15
100016682:	41 c7 07 ff ff ff ff	movl	$4294967295, (%r15)
100016689:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016690:	4c 89 fe	movq	%r15, %rsi
100016693:	e8 92 b6 02 00	callq	0x100041d2a ## symbol stub for: _posix_spawnattr_setsigdefault
100016698:	85 c0	testl	%eax, %eax
10001669a:	0f 85 c9 08 00 00	jne	0x100016f69
1000166a0:	41 8b 86 20 03 00 00	movl	800(%r14), %eax
1000166a7:	3d 00 07 00 00	cmpl	$1792, %eax
1000166ac:	be 00 04 00 00	movl	$1024, %esi
1000166b1:	0f 45 f0	cmovnel	%eax, %esi
1000166b4:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
1000166bb:	e8 64 b6 02 00	callq	0x100041d24 ## symbol stub for: _posix_spawnattr_setprocesstype_np
1000166c0:	85 c0	testl	%eax, %eax
1000166c2:	0f 85 b8 08 00 00	jne	0x100016f80
1000166c8:	41 8b b6 24 03 00 00	movl	804(%r14), %esi
1000166cf:	48 85 f6	testq	%rsi, %rsi
1000166d2:	74 14	je	0x1000166e8
1000166d4:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
1000166db:	e8 02 b6 02 00	callq	0x100041ce2 ## symbol stub for: _posix_spawnattr_set_darwin_role_np
1000166e0:	85 c0	testl	%eax, %eax
1000166e2:	0f 85 af 0a 00 00	jne	0x100017197
1000166e8:	48 8d 95 a8 fe ff ff	leaq	-344(%rbp), %rdx
1000166ef:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
1000166f6:	89 de	movl	%ebx, %esi
1000166f8:	e8 eb b5 02 00	callq	0x100041ce8 ## symbol stub for: _posix_spawnattr_set_importancewatch_port_np
1000166fd:	85 c0	testl	%eax, %eax
1000166ff:	0f 85 92 08 00 00	jne	0x100016f97
100016705:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
10001670c:	be 01 00 00 00	movl	$1, %esi
100016711:	ba 15 00 00 00	movl	$21, %edx
100016716:	b9 ff ff ff ff	movl	$4294967295, %ecx
10001671b:	41 b8 ff ff ff ff	movl	$4294967295, %r8d
100016721:	e8 f8 b5 02 00	callq	0x100041d1e ## symbol stub for: _posix_spawnattr_setjetsam_ext
100016726:	85 c0	testl	%eax, %eax
100016728:	0f 85 80 08 00 00	jne	0x100016fae
10001672e:	49 8b be 60 03 00 00	movq	864(%r14), %rdi
100016735:	48 85 ff	testq	%rdi, %rdi
100016738:	74 6c	je	0x1000167a6
10001673a:	e8 49 f5 ff ff	callq	0x100015c88
10001673f:	85 c0	testl	%eax, %eax
100016741:	74 63	je	0x1000167a6
100016743:	41 89 c5	movl	%eax, %r13d
100016746:	0f 28 05 33 cb 02 00	movaps	183091(%rip), %xmm0
10001674d:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100016754:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10001675b:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100016762:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100016769:	31 db	xorl	%ebx, %ebx
10001676b:	49 8b be 60 03 00 00	movq	864(%r14), %rdi
100016772:	89 de	movl	%ebx, %esi
100016774:	e8 18 f5 ff ff	callq	0x100015c91
100016779:	89 84 9d 40 ff ff ff	movl	%eax, -192(%rbp,%rbx,4)
100016780:	48 ff c3	incq	%rbx
100016783:	49 39 dd	cmpq	%rbx, %r13
100016786:	75 e3	jne	0x10001676b
100016788:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
10001678f:	48 8d 95 40 ff ff ff	leaq	-192(%rbp), %rdx
100016796:	44 89 ee	movl	%r13d, %esi
100016799:	e8 50 b5 02 00	callq	0x100041cee ## symbol stub for: _posix_spawnattr_set_jetsam_ttr_np
10001679e:	85 c0	testl	%eax, %eax
1000167a0:	0f 85 b5 08 00 00	jne	0x10001705b
1000167a6:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
1000167b0:	48 8d 9d 40 ff ff ff	leaq	-192(%rbp), %rbx
1000167b7:	48 89 43 08	movq	%rax, 8(%rbx)
1000167bb:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
1000167c2:	49 8b 96 0d 05 00 00	movq	1293(%r14), %rdx
1000167c9:	48 c1 ea 22	shrq	$34, %rdx
1000167cd:	83 e2 01	andl	$1, %edx
1000167d0:	4c 89 f6	movq	%r14, %rsi
1000167d3:	e8 f3 4c 01 00	callq	0x10002b4cb
1000167d8:	48 89 03	movq	%rax, (%rbx)
1000167db:	89 53 08	movl	%edx, 8(%rbx)
1000167de:	4c 8d ad a8 f9 ff ff	leaq	-1624(%rbp), %r13
1000167e5:	4c 89 f7	movq	%r14, %rdi
1000167e8:	4c 89 ee	movq	%r13, %rsi
1000167eb:	31 d2	xorl	%edx, %edx
1000167ed:	48 89 d9	movq	%rbx, %rcx
1000167f0:	e8 3c 54 ff ff	callq	0x10000bc31
1000167f5:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
1000167fc:	49 8b 96 0d 05 00 00	movq	1293(%r14), %rdx
100016803:	48 c1 ea 22	shrq	$34, %rdx
100016807:	83 e2 01	andl	$1, %edx
10001680a:	4c 89 f6	movq	%r14, %rsi
10001680d:	e8 0e 4e 01 00	callq	0x10002b620
100016812:	48 89 03	movq	%rax, (%rbx)
100016815:	89 53 08	movl	%edx, 8(%rbx)
100016818:	4c 89 f7	movq	%r14, %rdi
10001681b:	4c 89 ee	movq	%r13, %rsi
10001681e:	ba 01 00 00 00	movl	$1, %edx
100016823:	48 89 d9	movq	%rbx, %rcx
100016826:	e8 06 54 ff ff	callq	0x10000bc31
10001682b:	49 0f ba a6 0d 05 00 00 35	btq	$53, 1293(%r14)
100016834:	73 4c	jae	0x100016882
100016836:	41 8b b6 f8 04 00 00	movl	1272(%r14), %esi
10001683d:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016844:	ba 01 00 00 00	movl	$1, %edx
100016849:	e8 ac b4 02 00	callq	0x100041cfa ## symbol stub for: _posix_spawnattr_set_persona_np
10001684e:	85 c0	testl	%eax, %eax
100016850:	0f 85 a6 07 00 00	jne	0x100016ffc
100016856:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
10001685d:	31 f6	xorl	%esi, %esi
10001685f:	e8 9c b4 02 00	callq	0x100041d00 ## symbol stub for: _posix_spawnattr_set_persona_uid_np
100016864:	85 c0	testl	%eax, %eax
100016866:	0f 85 a7 07 00 00	jne	0x100017013
10001686c:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016873:	31 f6	xorl	%esi, %esi
100016875:	e8 7a b4 02 00	callq	0x100041cf4 ## symbol stub for: _posix_spawnattr_set_persona_gid_np
10001687a:	85 c0	testl	%eax, %eax
10001687c:	0f 85 a8 07 00 00	jne	0x10001702a
100016882:	41 8d 44 24 01	leal	1(%r12), %eax
100016887:	83 f8 02	cmpl	$2, %eax
10001688a:	72 17	jb	0x1000168a3
10001688c:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016893:	44 89 e6	movl	%r12d, %esi
100016896:	e8 40 35 ff ff	callq	0x100009ddb
10001689b:	85 c0	testl	%eax, %eax
10001689d:	0f 85 fb 08 00 00	jne	0x10001719e
1000168a3:	41 ff 86 98 03 00 00	incl	920(%r14)
1000168aa:	e8 89 b2 02 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
1000168af:	49 89 86 a0 03 00 00	movq	%rax, 928(%r14)
1000168b6:	49 8d 9e f0 03 00 00	leaq	1008(%r14), %rbx
1000168bd:	48 89 df	movq	%rbx, %rdi
1000168c0:	e8 25 2c 02 00	callq	0x1000394ea
1000168c5:	84 c0	testb	%al, %al
1000168c7:	74 52	je	0x10001691b
1000168c9:	48 89 df	movq	%rbx, %rdi
1000168cc:	e8 83 2c 02 00	callq	0x100039554
1000168d1:	84 c0	testb	%al, %al
1000168d3:	75 46	jne	0x10001691b
1000168d5:	49 0f ba a6 0d 05 00 00 39	btq	$57, 1293(%r14)
1000168de:	73 3b	jae	0x10001691b
1000168e0:	49 8b 9e a8 03 00 00	movq	936(%r14), %rbx
1000168e7:	48 85 db	testq	%rbx, %rbx
1000168ea:	75 13	jne	0x1000168ff
1000168ec:	31 ff	xorl	%edi, %edi
1000168ee:	31 f6	xorl	%esi, %esi
1000168f0:	e8 4b b6 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
1000168f5:	48 89 c3	movq	%rax, %rbx
1000168f8:	49 89 86 a8 03 00 00	movq	%rax, 936(%r14)
1000168ff:	bf 06 00 00 00	movl	$6, %edi
100016904:	e8 2f af 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
100016909:	48 89 df	movq	%rbx, %rdi
10001690c:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100016913:	48 89 c2	movq	%rax, %rdx
100016916:	e8 61 b6 02 00	callq	0x100041f7c ## symbol stub for: _xpc_array_set_uint64
10001691b:	41 8b be cc 03 00 00	movl	972(%r14), %edi
100016922:	e8 94 78 00 00	callq	0x10001e1bb
100016927:	48 8d 15 06 3a 03 00	leaq	211462(%rip), %rdx ## literal pool for: "launching: %s"
10001692e:	4c 89 f7	movq	%r14, %rdi
100016931:	be 05 00 00 00	movl	$5, %esi
100016936:	48 89 c1	movq	%rax, %rcx
100016939:	31 c0	xorl	%eax, %eax
10001693b:	e8 7a f6 ff ff	callq	0x100015fba
100016940:	c7 85 a4 f9 ff ff 00 00 00 00	movl	$0, -1628(%rbp)
10001694a:	4c 8d 2d f7 bc 04 00	leaq	310519(%rip), %r13
100016951:	4d 8b 65 00	movq	(%r13), %r12
100016955:	48 8d 05 2e 19 03 00	leaq	203054(%rip), %rax ## literal pool for: "xpcproxy"
10001695c:	48 89 45 b0	movq	%rax, -80(%rbp)
100016960:	49 8d 86 18 05 00 00	leaq	1304(%r14), %rax
100016967:	48 89 45 b8	movq	%rax, -72(%rbp)
10001696b:	0f 57 c0	xorps	%xmm0, %xmm0
10001696e:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100016972:	48 bb aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rbx
10001697c:	48 89 5d a0	movq	%rbx, -96(%rbp)
100016980:	0f 28 05 f9 c8 02 00	movaps	182521(%rip), %xmm0
100016987:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
10001698b:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
100016992:	e8 c5 47 01 00	callq	0x10002b15c
100016997:	48 3b 05 f2 16 04 00	cmpq	268018(%rip), %rax
10001699e:	75 29	jne	0x1000169c9
1000169a0:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
1000169a7:	e8 ba 47 01 00	callq	0x10002b166
1000169ac:	48 8d 15 48 3a 03 00	leaq	211528(%rip), %rdx ## literal pool for: "%lu"
1000169b3:	be 18 00 00 00	movl	$24, %esi
1000169b8:	4c 89 ff	movq	%r15, %rdi
1000169bb:	48 89 c1	movq	%rax, %rcx
1000169be:	31 c0	xorl	%eax, %eax
1000169c0:	e8 3d b4 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
1000169c5:	4c 89 7d c0	movq	%r15, -64(%rbp)
1000169c9:	4c 8d bd b0 f9 ff ff	leaq	-1616(%rbp), %r15
1000169d0:	48 8d 15 5f 10 03 00	leaq	200799(%rip), %rdx ## literal pool for: "/dev/console"
1000169d7:	4c 89 ff	movq	%r15, %rdi
1000169da:	31 f6	xorl	%esi, %esi
1000169dc:	31 c9	xorl	%ecx, %ecx
1000169de:	45 31 c0	xorl	%r8d, %r8d
1000169e1:	e8 de b2 02 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
1000169e6:	83 f8 ff	cmpl	$-1, %eax
1000169e9:	0f 84 99 07 00 00	je	0x100017188
1000169ef:	48 8d 15 40 10 03 00	leaq	200768(%rip), %rdx ## literal pool for: "/dev/console"
1000169f6:	4c 89 ff	movq	%r15, %rdi
1000169f9:	be 01 00 00 00	movl	$1, %esi
1000169fe:	b9 01 00 00 00	movl	$1, %ecx
100016a03:	45 31 c0	xorl	%r8d, %r8d
100016a06:	e8 b9 b2 02 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100016a0b:	83 f8 ff	cmpl	$-1, %eax
100016a0e:	0f 84 79 07 00 00	je	0x10001718d
100016a14:	48 8d 15 1b 10 03 00	leaq	200731(%rip), %rdx ## literal pool for: "/dev/console"
100016a1b:	4c 89 ff	movq	%r15, %rdi
100016a1e:	be 02 00 00 00	movl	$2, %esi
100016a23:	b9 02 00 00 00	movl	$2, %ecx
100016a28:	45 31 c0	xorl	%r8d, %r8d
100016a2b:	e8 94 b2 02 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100016a30:	83 f8 ff	cmpl	$-1, %eax
100016a33:	0f 84 59 07 00 00	je	0x100017192
100016a39:	48 89 5d 88	movq	%rbx, -120(%rbp)
100016a3d:	48 8d 9d 40 ff ff ff	leaq	-192(%rbp), %rbx
100016a44:	0f 28 05 35 c8 02 00	movaps	182325(%rip), %xmm0
100016a4b:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100016a4f:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100016a53:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100016a57:	0f 29 03	movaps	%xmm0, (%rbx)
100016a5a:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
100016a61:	e8 f6 46 01 00	callq	0x10002b15c
100016a66:	31 c9	xorl	%ecx, %ecx
100016a68:	48 3b 05 29 16 04 00	cmpq	267817(%rip), %rax
100016a6f:	0f 95 c1	setne	%cl
100016a72:	48 c1 e1 08	shlq	$8, %rcx
100016a76:	49 8b be 0d 05 00 00	movq	1293(%r14), %rdi
100016a7d:	48 c1 ef 1c	shrq	$28, %rdi
100016a81:	81 e7 00 04 00 00	andl	$1024, %edi
100016a87:	48 09 cf	orq	%rcx, %rdi
100016a8a:	48 89 de	movq	%rbx, %rsi
100016a8d:	e8 5d 66 02 00	callq	0x10003d0ef
100016a92:	49 8b 86 f0 00 00 00	movq	240(%r14), %rax
100016a99:	48 85 c0	testq	%rax, %rax
100016a9c:	49 0f 44 c6	cmoveq	%r14, %rax
100016aa0:	8b b8 a4 02 00 00	movl	676(%rax), %edi
100016aa6:	8d 47 01	leal	1(%rdi), %eax
100016aa9:	83 f8 01	cmpl	$1, %eax
100016aac:	76 3c	jbe	0x100016aea
100016aae:	48 8d 05 bb bc 04 00	leaq	310459(%rip), %rax
100016ab5:	8b 00	movl	(%rax), %eax
100016ab7:	89 45 88	movl	%eax, -120(%rbp)
100016aba:	89 7d 8c	movl	%edi, -116(%rbp)
100016abd:	e8 5b 32 ff ff	callq	0x100009d1d
100016ac2:	85 c0	testl	%eax, %eax
100016ac4:	0f 85 77 05 00 00	jne	0x100017041
100016aca:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016ad1:	48 8d 75 88	leaq	-120(%rbp), %rsi
100016ad5:	ba 02 00 00 00	movl	$2, %edx
100016ada:	e8 27 b2 02 00	callq	0x100041d06 ## symbol stub for: _posix_spawnattr_set_registered_ports_np
100016adf:	85 c0	testl	%eax, %eax
100016ae1:	74 0f	je	0x100016af2
100016ae3:	89 c7	movl	%eax, %edi
100016ae5:	e8 7f 98 02 00	callq	0x100040369
100016aea:	48 c7 45 88 00 00 00 00	movq	$0, -120(%rbp)
100016af2:	48 8d 05 9f bc 04 00	leaq	310431(%rip), %rax
100016af9:	4c 8b 08	movq	(%rax), %r9
100016afc:	48 8d bd a4 f9 ff ff	leaq	-1628(%rbp), %rdi
100016b03:	48 8d 8d a8 f9 ff ff	leaq	-1624(%rbp), %rcx
100016b0a:	4c 8d 45 b0	leaq	-80(%rbp), %r8
100016b0e:	4c 89 e6	movq	%r12, %rsi
100016b11:	4c 89 fa	movq	%r15, %rdx
100016b14:	e8 1d b2 02 00	callq	0x100041d36 ## symbol stub for: _posix_spawnp
100016b19:	41 89 c7	movl	%eax, %r15d
100016b1c:	85 c0	testl	%eax, %eax
100016b1e:	75 26	jne	0x100016b46
100016b20:	8b 8d a4 f9 ff ff	movl	-1628(%rbp), %ecx
100016b26:	85 c9	testl	%ecx, %ecx
100016b28:	7f 1c	jg	0x100016b46
100016b2a:	48 8d 15 ce 38 03 00	leaq	211150(%rip), %rdx ## literal pool for: "posix_spawnp() returned 0 but pid=%d"
100016b31:	4c 89 f7	movq	%r14, %rdi
100016b34:	be 03 00 00 00	movl	$3, %esi
100016b39:	31 c0	xorl	%eax, %eax
100016b3b:	e8 7a f4 ff ff	callq	0x100015fba
100016b40:	41 bf 99 00 00 00	movl	$153, %r15d
100016b46:	8b 7d 8c	movl	-116(%rbp), %edi
100016b49:	8d 47 01	leal	1(%rdi), %eax
100016b4c:	83 f8 02	cmpl	$2, %eax
100016b4f:	72 0d	jb	0x100016b5e
100016b51:	e8 e3 31 ff ff	callq	0x100009d39
100016b56:	85 c0	testl	%eax, %eax
100016b58:	0f 85 f0 04 00 00	jne	0x10001704e
100016b5e:	45 85 ff	testl	%r15d, %r15d
100016b61:	74 45	je	0x100016ba8
100016b63:	48 83 bd 28 ff ff ff 00	cmpq	$0, -216(%rbp)
100016b6b:	74 3b	je	0x100016ba8
100016b6d:	31 db	xorl	%ebx, %ebx
100016b6f:	4c 8d 25 91 17 00 00	leaq	6033(%rip), %r12
100016b76:	8b bc 9d a8 fe ff ff	movl	-344(%rbp,%rbx,4), %edi
100016b7d:	e8 e6 31 ff ff	callq	0x100009d68
100016b82:	85 c0	testl	%eax, %eax
100016b84:	75 0e	jne	0x100016b94
100016b86:	48 ff c3	incq	%rbx
100016b89:	48 3b 9d 28 ff ff ff	cmpq	-216(%rbp), %rbx
100016b90:	72 e4	jb	0x100016b76
100016b92:	eb 14	jmp	0x100016ba8
100016b94:	48 63 d0	movslq	%eax, %rdx
100016b97:	48 8b b5 80 fe ff ff	movq	-384(%rbp), %rsi
100016b9e:	4c 89 e7	movq	%r12, %rdi
100016ba1:	e8 02 ac 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016ba6:	eb de	jmp	0x100016b86
100016ba8:	8b bd 30 ff ff ff	movl	-208(%rbp), %edi
100016bae:	8d 47 01	leal	1(%rdi), %eax
100016bb1:	83 f8 02	cmpl	$2, %eax
100016bb4:	72 0d	jb	0x100016bc3
100016bb6:	e8 7e 31 ff ff	callq	0x100009d39
100016bbb:	85 c0	testl	%eax, %eax
100016bbd:	0f 85 ec 05 00 00	jne	0x1000171af
100016bc3:	48 8b bd 98 fe ff ff	movq	-360(%rbp), %rdi
100016bca:	e8 61 ae 02 00	callq	0x100041a30 ## symbol stub for: _free
100016bcf:	48 8b bd 88 fe ff ff	movq	-376(%rbp), %rdi
100016bd6:	48 85 ff	testq	%rdi, %rdi
100016bd9:	74 05	je	0x100016be0
100016bdb:	e8 1c b5 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100016be0:	48 8b bd 90 fe ff ff	movq	-368(%rbp), %rdi
100016be7:	48 85 ff	testq	%rdi, %rdi
100016bea:	74 05	je	0x100016bf1
100016bec:	e8 0b b5 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100016bf1:	48 8d bd a8 f9 ff ff	leaq	-1624(%rbp), %rdi
100016bf8:	e8 96 68 ff ff	callq	0x10000d493
100016bfd:	45 85 ff	testl	%r15d, %r15d
100016c00:	0f 84 fe 00 00 00	je	0x100016d04
100016c06:	49 8b 5d 00	movq	(%r13), %rbx
100016c0a:	45 8b a6 cc 03 00 00	movl	972(%r14), %r12d
100016c11:	44 89 ff	movl	%r15d, %edi
100016c14:	e8 25 b2 02 00	callq	0x100041e3e ## symbol stub for: _strerror
100016c19:	48 8d 15 d1 38 03 00	leaq	211153(%rip), %rdx ## literal pool for: "%s spawn failed: %d: %s"
100016c20:	48 8d 0d bf 38 03 00	leaq	211135(%rip), %rcx ## literal pool for: "trampoline"
100016c27:	4c 89 f7	movq	%r14, %rdi
100016c2a:	be 05 00 00 00	movl	$5, %esi
100016c2f:	45 89 f8	movl	%r15d, %r8d
100016c32:	49 89 c1	movq	%rax, %r9
100016c35:	31 c0	xorl	%eax, %eax
100016c37:	e8 7e f3 ff ff	callq	0x100015fba
100016c3c:	4c 89 f7	movq	%r14, %rdi
100016c3f:	be 22 00 00 00	movl	$34, %esi
100016c44:	e8 85 bc ff ff	callq	0x1000128ce
100016c49:	49 63 d7	movslq	%r15d, %rdx
100016c4c:	4c 89 f7	movq	%r14, %rdi
100016c4f:	be 01 00 00 00	movl	$1, %esi
100016c54:	e8 52 f2 ff ff	callq	0x100015eab
100016c59:	44 89 ff	movl	%r15d, %edi
100016c5c:	e8 dd b1 02 00	callq	0x100041e3e ## symbol stub for: _strerror
100016c61:	48 8d 15 a1 38 03 00	leaq	211105(%rip), %rdx ## literal pool for: "Could not spawn process %s: %d: %s"
100016c68:	4c 89 f7	movq	%r14, %rdi
100016c6b:	be 03 00 00 00	movl	$3, %esi
100016c70:	48 89 d9	movq	%rbx, %rcx
100016c73:	45 89 f8	movl	%r15d, %r8d
100016c76:	49 89 c1	movq	%rax, %r9
100016c79:	31 c0	xorl	%eax, %eax
100016c7b:	e8 3a f3 ff ff	callq	0x100015fba
100016c80:	41 0f ba a6 0d 05 00 00 1c	btl	$28, 1293(%r14)
100016c89:	0f 82 2f 02 00 00	jb	0x100016ebe
100016c8f:	4c 89 f7	movq	%r14, %rdi
100016c92:	be 22 00 00 00	movl	$34, %esi
100016c97:	e8 b5 bc ff ff	callq	0x100012951
100016c9c:	41 80 be a0 01 00 00 00	cmpb	$0, 416(%r14)
100016ca4:	74 25	je	0x100016ccb
100016ca6:	41 c6 86 a0 01 00 00 00	movb	$0, 416(%r14)
100016cae:	48 8d 15 19 36 03 00	leaq	210457(%rip), %rdx ## literal pool for: "service state: %s"
100016cb5:	48 8d 0d 24 36 03 00	leaq	210468(%rip), %rcx ## literal pool for: "not running"
100016cbc:	4c 89 f7	movq	%r14, %rdi
100016cbf:	be 05 00 00 00	movl	$5, %esi
100016cc4:	31 c0	xorl	%eax, %eax
100016cc6:	e8 ef f2 ff ff	callq	0x100015fba
100016ccb:	41 0f b7 be 64 01 00 00	movzwl	356(%r14), %edi
100016cd3:	66 83 e7 10	andw	$16, %di
100016cd7:	0f 85 d9 04 00 00	jne	0x1000171b6
100016cdd:	4c 89 f7	movq	%r14, %rdi
100016ce0:	31 f6	xorl	%esi, %esi
100016ce2:	44 89 e2	movl	%r12d, %edx
100016ce5:	e8 6b 76 00 00	callq	0x10001e355
100016cea:	84 c0	testb	%al, %al
100016cec:	0f 84 c9 04 00 00	je	0x1000171bb
100016cf2:	4c 89 f7	movq	%r14, %rdi
100016cf5:	44 89 fe	movl	%r15d, %esi
100016cf8:	31 d2	xorl	%edx, %edx
100016cfa:	e8 be 79 00 00	callq	0x10001e6bd
100016cff:	e9 ab f5 ff ff	jmp	0x1000162af
100016d04:	44 8b 85 a4 f9 ff ff	movl	-1628(%rbp), %r8d
100016d0b:	49 63 9e cc 03 00 00	movslq	972(%r14), %rbx
100016d12:	4d 8d a6 c8 03 00 00	leaq	968(%r14), %r12
100016d19:	45 89 86 c8 03 00 00	movl	%r8d, 968(%r14)
100016d20:	48 8d 15 fd 36 03 00	leaq	210685(%rip), %rdx ## literal pool for: "%s spawned with pid %d"
100016d27:	48 8d 0d 5c 15 03 00	leaq	202076(%rip), %rcx ## literal pool for: "xpcproxy"
100016d2e:	4c 89 f7	movq	%r14, %rdi
100016d31:	be 05 00 00 00	movl	$5, %esi
100016d36:	31 c0	xorl	%eax, %eax
100016d38:	e8 7d f2 ff ff	callq	0x100015fba
100016d3d:	49 63 b6 c8 03 00 00	movslq	968(%r14), %rsi
100016d44:	bf 04 00 00 22	movl	$570425348, %edi
100016d49:	e8 81 61 ff ff	callq	0x10000cecf
100016d4e:	41 8b be c8 03 00 00	movl	968(%r14), %edi
100016d55:	90	nop
100016d56:	0f 1f 40 00	nopl	(%rax)
100016d5a:	49 63 b6 c8 03 00 00	movslq	968(%r14), %rsi
100016d61:	bf 48 00 00 22	movl	$570425416, %edi
100016d66:	48 89 da	movq	%rbx, %rdx
100016d69:	31 c9	xorl	%ecx, %ecx
100016d6b:	45 31 c0	xorl	%r8d, %r8d
100016d6e:	e8 3f 61 ff ff	callq	0x10000ceb2
100016d73:	be 04 00 00 00	movl	$4, %esi
100016d78:	4c 89 e7	movq	%r12, %rdi
100016d7b:	e8 f9 85 ff ff	callq	0x10000f379
100016d80:	48 89 c1	movq	%rax, %rcx
100016d83:	48 ba 53 13 8c b7 b2 cf 21 35	movabsq	$3828569524732171091, %rdx
100016d8d:	48 f7 e2	mulq	%rdx
100016d90:	48 89 c8	movq	%rcx, %rax
100016d93:	48 29 d0	subq	%rdx, %rax
100016d96:	48 d1 e8	shrq	%rax
100016d99:	48 01 d0	addq	%rdx, %rax
100016d9c:	48 c1 e8 05	shrq	$5, %rax
100016da0:	48 6b c0 35	imulq	$53, %rax, %rax
100016da4:	48 29 c1	subq	%rax, %rcx
100016da7:	48 8d 05 e2 c0 04 00	leaq	311522(%rip), %rax
100016dae:	48 8d 04 c8	leaq	(%rax,%rcx,8), %rax
100016db2:	48 8b 08	movq	(%rax), %rcx
100016db5:	49 89 4e 08	movq	%rcx, 8(%r14)
100016db9:	48 85 c9	testq	%rcx, %rcx
100016dbc:	74 08	je	0x100016dc6
100016dbe:	49 8d 56 08	leaq	8(%r14), %rdx
100016dc2:	48 89 51 10	movq	%rdx, 16(%rcx)
100016dc6:	4c 89 30	movq	%r14, (%rax)
100016dc9:	49 89 46 10	movq	%rax, 16(%r14)
100016dcd:	49 63 9e c8 03 00 00	movslq	968(%r14), %rbx
100016dd4:	e8 21 77 ff ff	callq	0x10000e4fa
100016dd9:	48 8b 3d 80 12 04 00	movq	266880(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_proc
100016de0:	ba 00 00 00 e0	movl	$3758096384, %edx
100016de5:	48 89 de	movq	%rbx, %rsi
100016de8:	48 89 c1	movq	%rax, %rcx
100016deb:	e8 92 ab 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100016df0:	49 89 86 d0 03 00 00	movq	%rax, 976(%r14)
100016df7:	4c 89 f7	movq	%r14, %rdi
100016dfa:	be 1e 00 00 00	movl	$30, %esi
100016dff:	48 89 c2	movq	%rax, %rdx
100016e02:	31 c9	xorl	%ecx, %ecx
100016e04:	e8 7f ba ff ff	callq	0x100012888
100016e09:	49 8b be d0 03 00 00	movq	976(%r14), %rdi
100016e10:	48 89 c6	movq	%rax, %rsi
100016e13:	e8 5e ab 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100016e18:	49 8b be d0 03 00 00	movq	976(%r14), %rdi
100016e1f:	48 8d 35 9e 11 00 00	leaq	4510(%rip), %rsi
100016e26:	e8 7b ab 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100016e2b:	49 8b be d0 03 00 00	movq	976(%r14), %rdi
100016e32:	48 8d 35 43 78 00 00	leaq	30787(%rip), %rsi
100016e39:	e8 7a ab 02 00	callq	0x1000419b8 ## symbol stub for: _dispatch_source_set_registration_handler_f
100016e3e:	49 8b be d0 03 00 00	movq	976(%r14), %rdi
100016e45:	48 8d 35 67 78 00 00	leaq	30823(%rip), %rsi
100016e4c:	e8 61 ab 02 00	callq	0x1000419b2 ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler_f
100016e51:	49 8b be d0 03 00 00	movq	976(%r14), %rdi
100016e58:	e8 65 aa 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100016e5d:	41 0f ba a6 0d 05 00 00 10	btl	$16, 1293(%r14)
100016e66:	0f 83 4f 02 00 00	jae	0x1000170bb
100016e6c:	49 8b be b0 00 00 00	movq	176(%r14), %rdi
100016e73:	48 85 ff	testq	%rdi, %rdi
100016e76:	0f 84 a4 00 00 00	je	0x100016f20
100016e7c:	31 c0	xorl	%eax, %eax
100016e7e:	48 8d b5 88 f9 ff ff	leaq	-1656(%rbp), %rsi
100016e85:	48 89 06	movq	%rax, (%rsi)
100016e88:	48 8d 95 90 f9 ff ff	leaq	-1648(%rbp), %rdx
100016e8f:	48 89 02	movq	%rax, (%rdx)
100016e92:	48 8d 8d 98 f9 ff ff	leaq	-1640(%rbp), %rcx
100016e99:	48 89 01	movq	%rax, (%rcx)
100016e9c:	e8 fe de ff ff	callq	0x100014d9f
100016ea1:	85 c0	testl	%eax, %eax
100016ea3:	0f 84 1c 01 00 00	je	0x100016fc5
100016ea9:	89 c3	movl	%eax, %ebx
100016eab:	89 c7	movl	%eax, %edi
100016ead:	e8 5c b2 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100016eb2:	48 8d 15 db 35 03 00	leaq	210395(%rip), %rdx ## literal pool for: "Could not activate inetd socket: %d: %s"
100016eb9:	e9 e9 01 00 00	jmp	0x1000170a7
100016ebe:	48 8d 15 67 36 03 00	leaq	210535(%rip), %rdx ## literal pool for: "Removed service on spawn failure"
100016ec5:	4c 89 f7	movq	%r14, %rdi
100016ec8:	be 03 00 00 00	movl	$3, %esi
100016ecd:	31 c0	xorl	%eax, %eax
100016ecf:	e8 e6 f0 ff ff	callq	0x100015fba
100016ed4:	41 80 be a0 01 00 00 00	cmpb	$0, 416(%r14)
100016edc:	74 25	je	0x100016f03
100016ede:	41 c6 86 a0 01 00 00 00	movb	$0, 416(%r14)
100016ee6:	48 8d 15 e1 33 03 00	leaq	209889(%rip), %rdx ## literal pool for: "service state: %s"
100016eed:	48 8d 0d ec 33 03 00	leaq	209900(%rip), %rcx ## literal pool for: "not running"
100016ef4:	4c 89 f7	movq	%r14, %rdi
100016ef7:	be 05 00 00 00	movl	$5, %esi
100016efc:	31 c0	xorl	%eax, %eax
100016efe:	e8 b7 f0 ff ff	callq	0x100015fba
100016f03:	4c 89 f7	movq	%r14, %rdi
100016f06:	be 22 00 00 00	movl	$34, %esi
100016f0b:	e8 41 ba ff ff	callq	0x100012951
100016f10:	e9 9a f3 ff ff	jmp	0x1000162af
100016f15:	41 bf 20 00 00 00	movl	$32, %r15d
100016f1b:	e9 cd f5 ff ff	jmp	0x1000164ed
100016f20:	48 8d 15 43 35 03 00	leaq	210243(%rip), %rdx ## literal pool for: "inetd-compatible service with no sockets."
100016f27:	4c 89 f7	movq	%r14, %rdi
100016f2a:	be 03 00 00 00	movl	$3, %esi
100016f2f:	31 c0	xorl	%eax, %eax
100016f31:	e8 84 f0 ff ff	callq	0x100015fba
100016f36:	e9 80 01 00 00	jmp	0x1000170bb
100016f3b:	48 63 d0	movslq	%eax, %rdx
100016f3e:	48 8d 3d c2 13 00 00	leaq	5058(%rip), %rdi
100016f45:	4c 89 f6	movq	%r14, %rsi
100016f48:	e8 5b a8 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016f4d:	e9 0e f7 ff ff	jmp	0x100016660
100016f52:	48 63 d0	movslq	%eax, %rdx
100016f55:	48 8d 3d ab 13 00 00	leaq	5035(%rip), %rdi
100016f5c:	4c 89 f6	movq	%r14, %rsi
100016f5f:	e8 44 a8 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016f64:	e9 15 f7 ff ff	jmp	0x10001667e
100016f69:	48 63 d0	movslq	%eax, %rdx
100016f6c:	48 8d 3d 94 13 00 00	leaq	5012(%rip), %rdi
100016f73:	4c 89 f6	movq	%r14, %rsi
100016f76:	e8 2d a8 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016f7b:	e9 20 f7 ff ff	jmp	0x1000166a0
100016f80:	48 63 d0	movslq	%eax, %rdx
100016f83:	48 8d 3d 7d 13 00 00	leaq	4989(%rip), %rdi
100016f8a:	4c 89 f6	movq	%r14, %rsi
100016f8d:	e8 16 a8 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016f92:	e9 31 f7 ff ff	jmp	0x1000166c8
100016f97:	48 63 d0	movslq	%eax, %rdx
100016f9a:	48 8d 3d 66 13 00 00	leaq	4966(%rip), %rdi
100016fa1:	4c 89 f6	movq	%r14, %rsi
100016fa4:	e8 ff a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016fa9:	e9 57 f7 ff ff	jmp	0x100016705
100016fae:	48 63 d0	movslq	%eax, %rdx
100016fb1:	48 8d 3d 4f 13 00 00	leaq	4943(%rip), %rdi
100016fb8:	4c 89 f6	movq	%r14, %rsi
100016fbb:	e8 e8 a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100016fc0:	e9 69 f7 ff ff	jmp	0x10001672e
100016fc5:	48 8b 85 88 f9 ff ff	movq	-1656(%rbp), %rax
100016fcc:	44 8b 00	movl	(%rax), %r8d
100016fcf:	48 8b 8d 98 f9 ff ff	movq	-1640(%rbp), %rcx
100016fd6:	48 85 c9	testq	%rcx, %rcx
100016fd9:	0f 84 97 00 00 00	je	0x100017076
100016fdf:	48 8b b5 90 f9 ff ff	movq	-1648(%rbp), %rsi
100016fe6:	31 d2	xorl	%edx, %edx
100016fe8:	80 3c 16 00	cmpb	$0, (%rsi,%rdx)
100016fec:	0f 85 80 00 00 00	jne	0x100017072
100016ff2:	48 ff c2	incq	%rdx
100016ff5:	48 39 d1	cmpq	%rdx, %rcx
100016ff8:	75 ee	jne	0x100016fe8
100016ffa:	eb 7a	jmp	0x100017076
100016ffc:	48 63 d0	movslq	%eax, %rdx
100016fff:	48 8d 3d 01 13 00 00	leaq	4865(%rip), %rdi
100017006:	4c 89 f6	movq	%r14, %rsi
100017009:	e8 9a a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001700e:	e9 43 f8 ff ff	jmp	0x100016856
100017013:	48 63 d0	movslq	%eax, %rdx
100017016:	48 8d 3d ea 12 00 00	leaq	4842(%rip), %rdi
10001701d:	4c 89 f6	movq	%r14, %rsi
100017020:	e8 83 a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100017025:	e9 42 f8 ff ff	jmp	0x10001686c
10001702a:	48 63 d0	movslq	%eax, %rdx
10001702d:	48 8d 3d d3 12 00 00	leaq	4819(%rip), %rdi
100017034:	4c 89 f6	movq	%r14, %rsi
100017037:	e8 6c a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001703c:	e9 41 f8 ff ff	jmp	0x100016882
100017041:	48 63 f8	movslq	%eax, %rdi
100017044:	e8 59 a7 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100017049:	e9 7c fa ff ff	jmp	0x100016aca
10001704e:	48 63 f8	movslq	%eax, %rdi
100017051:	e8 4c a7 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100017056:	e9 03 fb ff ff	jmp	0x100016b5e
10001705b:	48 63 d0	movslq	%eax, %rdx
10001705e:	48 8d 3d a2 12 00 00	leaq	4770(%rip), %rdi
100017065:	4c 89 f6	movq	%r14, %rsi
100017068:	e8 3b a7 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001706d:	e9 34 f7 ff ff	jmp	0x1000167a6
100017072:	44 8b 04 90	movl	(%rax,%rdx,4), %r8d
100017076:	49 8b b6 b8 01 00 00	movq	440(%r14), %rsi
10001707d:	49 8b 96 c0 01 00 00	movq	448(%r14), %rdx
100017084:	49 8b 8e c8 01 00 00	movq	456(%r14), %rcx
10001708b:	4c 89 f7	movq	%r14, %rdi
10001708e:	e8 6a 04 00 00	callq	0x1000174fd
100017093:	85 c0	testl	%eax, %eax
100017095:	74 24	je	0x1000170bb
100017097:	89 c3	movl	%eax, %ebx
100017099:	89 c7	movl	%eax, %edi
10001709b:	e8 9e ad 02 00	callq	0x100041e3e ## symbol stub for: _strerror
1000170a0:	48 8d 15 15 34 03 00	leaq	209941(%rip), %rdx ## literal pool for: "Could not setup inetd descriptors: %d: %s"
1000170a7:	4c 89 f7	movq	%r14, %rdi
1000170aa:	be 03 00 00 00	movl	$3, %esi
1000170af:	89 d9	movl	%ebx, %ecx
1000170b1:	49 89 c0	movq	%rax, %r8
1000170b4:	31 c0	xorl	%eax, %eax
1000170b6:	e8 ff ee ff ff	callq	0x100015fba
1000170bb:	4c 89 f7	movq	%r14, %rdi
1000170be:	be 01 00 00 00	movl	$1, %esi
1000170c3:	31 d2	xorl	%edx, %edx
1000170c5:	e8 e1 ed ff ff	callq	0x100015eab
1000170ca:	41 80 be a0 01 00 00 02	cmpb	$2, 416(%r14)
1000170d2:	0f 85 cd 00 00 00	jne	0x1000171a5
1000170d8:	41 c6 86 a0 01 00 00 03	movb	$3, 416(%r14)
1000170e0:	48 8d 15 e7 31 03 00	leaq	209383(%rip), %rdx ## literal pool for: "service state: %s"
1000170e7:	48 8d 0d 9c 11 03 00	leaq	201116(%rip), %rcx ## literal pool for: "xpcproxy"
1000170ee:	4c 89 f7	movq	%r14, %rdi
1000170f1:	be 05 00 00 00	movl	$5, %esi
1000170f6:	31 c0	xorl	%eax, %eax
1000170f8:	e8 bd ee ff ff	callq	0x100015fba
1000170fd:	41 80 be a0 01 00 00 03	cmpb	$3, 416(%r14)
100017105:	0f 85 9f 00 00 00	jne	0x1000171aa
10001710b:	4c 8d 25 ee b5 04 00	leaq	308718(%rip), %r12
100017112:	49 8b 3c 24	movq	(%r12), %rdi
100017116:	48 85 ff	testq	%rdi, %rdi
100017119:	0f 84 90 f1 ff ff	je	0x1000162af
10001711f:	49 8b 9e 68 03 00 00	movq	872(%r14), %rbx
100017126:	48 85 db	testq	%rbx, %rbx
100017129:	75 27	jne	0x100017152
10001712b:	49 8b b6 f0 00 00 00	movq	240(%r14), %rsi
100017132:	48 85 f6	testq	%rsi, %rsi
100017135:	49 0f 44 f6	cmoveq	%r14, %rsi
100017139:	48 81 c6 18 05 00 00	addq	$1304, %rsi
100017140:	4c 89 f2	movq	%r14, %rdx
100017143:	e8 4e a2 fe ff	callq	0x100001396
100017148:	48 89 c3	movq	%rax, %rbx
10001714b:	49 89 86 68 03 00 00	movq	%rax, 872(%r14)
100017152:	bf 08 00 00 00	movl	$8, %edi
100017157:	e8 dc a6 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
10001715c:	48 b9 db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %rcx
100017166:	48 f7 e1	mulq	%rcx
100017169:	48 c1 ea 12	shrq	$18, %rdx
10001716d:	49 8b 34 24	movq	(%r12), %rsi
100017171:	48 89 df	movq	%rbx, %rdi
100017174:	e8 d5 a2 fe ff	callq	0x10000144e
100017179:	e9 31 f1 ff ff	jmp	0x1000162af
10001717e:	e8 53 92 02 00	callq	0x1000403d6
100017183:	e8 39 92 02 00	callq	0x1000403c1
100017188:	e8 1a 91 02 00	callq	0x1000402a7
10001718d:	e8 30 91 02 00	callq	0x1000402c2
100017192:	e8 46 91 02 00	callq	0x1000402dd
100017197:	89 c7	movl	%eax, %edi
100017199:	e8 f7 91 02 00	callq	0x100040395
10001719e:	89 c7	movl	%eax, %edi
1000171a0:	e8 da 91 02 00	callq	0x10004037f
1000171a5:	e8 63 91 02 00	callq	0x10004030d
1000171aa:	e8 49 91 02 00	callq	0x1000402f8
1000171af:	89 c7	movl	%eax, %edi
1000171b1:	e8 9d 91 02 00	callq	0x100040353
1000171b6:	e8 7c 91 02 00	callq	0x100040337
1000171bb:	e8 62 91 02 00	callq	0x100040322
1000171c0:	e8 ad a5 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000171c5:	55	pushq	%rbp
1000171c6:	48 89 e5	movq	%rsp, %rbp
1000171c9:	48 8b 87 f0 00 00 00	movq	240(%rdi), %rax
1000171d0:	48 85 c0	testq	%rax, %rax
1000171d3:	48 0f 44 c7	cmoveq	%rdi, %rax
1000171d7:	8b 80 a4 02 00 00	movl	676(%rax), %eax
1000171dd:	5d	popq	%rbp
1000171de:	c3	retq
1000171df:	55	pushq	%rbp
1000171e0:	48 89 e5	movq	%rsp, %rbp
1000171e3:	41 57	pushq	%r15
1000171e5:	41 56	pushq	%r14
1000171e7:	41 55	pushq	%r13
1000171e9:	41 54	pushq	%r12
1000171eb:	53	pushq	%rbx
1000171ec:	50	pushq	%rax
1000171ed:	48 89 fb	movq	%rdi, %rbx
1000171f0:	48 83 bf a8 03 00 00 00	cmpq	$0, 936(%rdi)
1000171f8:	0f 84 f2 00 00 00	je	0x1000172f0
1000171fe:	bf 06 00 00 00	movl	$6, %edi
100017203:	e8 30 a6 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
100017208:	49 89 c4	movq	%rax, %r12
10001720b:	48 89 5d d0	movq	%rbx, -48(%rbp)
10001720f:	4c 8b ab a8 03 00 00	movq	936(%rbx), %r13
100017216:	4c 89 ef	movq	%r13, %rdi
100017219:	e8 2e ad 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001721e:	45 31 ff	xorl	%r15d, %r15d
100017221:	48 85 c0	testq	%rax, %rax
100017224:	74 66	je	0x10001728c
100017226:	31 db	xorl	%ebx, %ebx
100017228:	4c 89 ef	movq	%r13, %rdi
10001722b:	48 89 de	movq	%rbx, %rsi
10001722e:	e8 25 ad 02 00	callq	0x100041f58 ## symbol stub for: _xpc_array_get_uint64
100017233:	49 89 c6	movq	%rax, %r14
100017236:	4c 89 e0	movq	%r12, %rax
100017239:	4c 29 f0	subq	%r14, %rax
10001723c:	73 0f	jae	0x10001724d
10001723e:	4d 29 e6	subq	%r12, %r14
100017241:	74 39	je	0x10001727c
100017243:	4c 89 f7	movq	%r14, %rdi
100017246:	e8 57 a5 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001724b:	eb 2f	jmp	0x10001727c
10001724d:	48 8d 0d 14 b4 04 00	leaq	308244(%rip), %rcx
100017254:	48 3b 01	cmpq	(%rcx), %rax
100017257:	73 23	jae	0x10001727c
100017259:	4d 85 ff	testq	%r15, %r15
10001725c:	75 0c	jne	0x10001726a
10001725e:	31 ff	xorl	%edi, %edi
100017260:	31 f6	xorl	%esi, %esi
100017262:	e8 d9 ac 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100017267:	49 89 c7	movq	%rax, %r15
10001726a:	4c 89 ff	movq	%r15, %rdi
10001726d:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100017274:	4c 89 f2	movq	%r14, %rdx
100017277:	e8 00 ad 02 00	callq	0x100041f7c ## symbol stub for: _xpc_array_set_uint64
10001727c:	48 ff c3	incq	%rbx
10001727f:	4c 89 ef	movq	%r13, %rdi
100017282:	e8 c5 ac 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100017287:	48 39 c3	cmpq	%rax, %rbx
10001728a:	72 9c	jb	0x100017228
10001728c:	4c 89 ef	movq	%r13, %rdi
10001728f:	e8 68 ae 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100017294:	48 8b 5d d0	movq	-48(%rbp), %rbx
100017298:	4c 89 bb a8 03 00 00	movq	%r15, 936(%rbx)
10001729f:	48 0f ba a3 0d 05 00 00 39	btq	$57, 1293(%rbx)
1000172a8:	73 46	jae	0x1000172f0
1000172aa:	4d 85 ff	testq	%r15, %r15
1000172ad:	74 41	je	0x1000172f0
1000172af:	44 0f b7 b3 b0 03 00 00	movzwl	944(%rbx), %r14d
1000172b7:	4c 89 ff	movq	%r15, %rdi
1000172ba:	e8 8d ac 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000172bf:	48 89 c1	movq	%rax, %rcx
1000172c2:	44 29 f1	subl	%r14d, %ecx
1000172c5:	76 29	jbe	0x1000172f0
1000172c7:	b8 b0 04 00 00	movl	$1200, %eax
1000172cc:	83 f9 0b	cmpl	$11, %ecx
1000172cf:	77 25	ja	0x1000172f6
1000172d1:	8b 93 e4 02 00 00	movl	740(%rbx), %edx
1000172d7:	48 d3 e2	shlq	%cl, %rdx
1000172da:	48 85 d2	testq	%rdx, %rdx
1000172dd:	74 26	je	0x100017305
1000172df:	48 81 fa b0 04 00 00	cmpq	$1200, %rdx
1000172e6:	b8 b0 04 00 00	movl	$1200, %eax
1000172eb:	0f 42 c2	cmovbl	%edx, %eax
1000172ee:	eb 06	jmp	0x1000172f6
1000172f0:	8b 83 e4 02 00 00	movl	740(%rbx), %eax
1000172f6:	48 83 c4 08	addq	$8, %rsp
1000172fa:	5b	popq	%rbx
1000172fb:	41 5c	popq	%r12
1000172fd:	41 5d	popq	%r13
1000172ff:	41 5e	popq	%r14
100017301:	41 5f	popq	%r15
100017303:	5d	popq	%rbp
100017304:	c3	retq
100017305:	e8 e1 90 02 00	callq	0x1000403eb
10001730a:	55	pushq	%rbp
10001730b:	48 89 e5	movq	%rsp, %rbp
10001730e:	41 57	pushq	%r15
100017310:	41 56	pushq	%r14
100017312:	53	pushq	%rbx
100017313:	50	pushq	%rax
100017314:	49 89 fe	movq	%rdi, %r14
100017317:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10001731e:	a9 00 00 88 00	testl	$8912896, %eax
100017323:	74 3c	je	0x100017361
100017325:	48 0f ba e0 2d	btq	$45, %rax
10001732a:	41 bf 07 00 00 00	movl	$7, %r15d
100017330:	0f 83 14 01 00 00	jae	0x10001744a
100017336:	48 8d 05 2b b4 04 00	leaq	308267(%rip), %rax
10001733d:	80 38 00	cmpb	$0, (%rax)
100017340:	0f 85 04 01 00 00	jne	0x10001744a
100017346:	49 8b 5e 78	movq	120(%r14), %rbx
10001734a:	48 85 db	testq	%rbx, %rbx
10001734d:	74 4f	je	0x10001739e
10001734f:	48 89 df	movq	%rbx, %rdi
100017352:	e8 2e ad 01 00	callq	0x100032085
100017357:	84 c0	testb	%al, %al
100017359:	75 7c	jne	0x1000173d7
10001735b:	48 8b 5b 08	movq	8(%rbx), %rbx
10001735f:	eb e9	jmp	0x10001734a
100017361:	a8 04	testb	$4, %al
100017363:	75 5e	jne	0x1000173c3
100017365:	a8 08	testb	$8, %al
100017367:	74 0e	je	0x100017377
100017369:	41 83 be 98 03 00 00 00	cmpl	$0, 920(%r14)
100017371:	0f 84 cd 00 00 00	je	0x100017444
100017377:	41 f6 86 a0 04 00 00 02	testb	$2, 1184(%r14)
10001737f:	74 c5	je	0x100017346
100017381:	49 8d 9e f0 03 00 00	leaq	1008(%r14), %rbx
100017388:	48 89 df	movq	%rbx, %rdi
10001738b:	e8 18 22 02 00	callq	0x1000395a8
100017390:	84 c0	testb	%al, %al
100017392:	74 50	je	0x1000173e4
100017394:	41 80 8e 0f 05 00 00 04	orb	$4, 1295(%r14)
10001739c:	eb a8	jmp	0x100017346
10001739e:	49 8b 9e 88 02 00 00	movq	648(%r14), %rbx
1000173a5:	45 31 ff	xorl	%r15d, %r15d
1000173a8:	48 85 db	testq	%rbx, %rbx
1000173ab:	0f 84 c1 00 00 00	je	0x100017472
1000173b1:	4c 89 f7	movq	%r14, %rdi
1000173b4:	48 89 de	movq	%rbx, %rsi
1000173b7:	ff 53 10	callq	*16(%rbx)
1000173ba:	85 c0	testl	%eax, %eax
1000173bc:	75 21	jne	0x1000173df
1000173be:	48 8b 1b	movq	(%rbx), %rbx
1000173c1:	eb e5	jmp	0x1000173a8
1000173c3:	41 83 be 98 03 00 00 01	cmpl	$1, 920(%r14)
1000173cb:	41 bf 05 00 00 00	movl	$5, %r15d
1000173d1:	41 83 df 00	sbbl	$0, %r15d
1000173d5:	eb 73	jmp	0x10001744a
1000173d7:	41 bf 08 00 00 00	movl	$8, %r15d
1000173dd:	eb 6b	jmp	0x10001744a
1000173df:	41 89 c7	movl	%eax, %r15d
1000173e2:	eb 66	jmp	0x10001744a
1000173e4:	48 89 df	movq	%rbx, %rdi
1000173e7:	e8 68 21 02 00	callq	0x100039554
1000173ec:	48 89 df	movq	%rbx, %rdi
1000173ef:	84 c0	testb	%al, %al
1000173f1:	0f 84 b3 00 00 00	je	0x1000174aa
1000173f7:	e8 76 21 02 00	callq	0x100039572
1000173fc:	84 c0	testb	%al, %al
1000173fe:	0f 85 42 ff ff ff	jne	0x100017346
100017404:	41 83 be 38 03 00 00 04	cmpl	$4, 824(%r14)
10001740c:	49 8b 86 0d 05 00 00	movq	1293(%r14), %rax
100017413:	7c 1c	jl	0x100017431
100017415:	41 0f b6 8e 15 05 00 00	movzbl	1301(%r14), %ecx
10001741d:	48 0d 00 00 04 00	orq	$262144, %rax
100017423:	49 89 86 0d 05 00 00	movq	%rax, 1293(%r14)
10001742a:	41 88 8e 15 05 00 00	movb	%cl, 1301(%r14)
100017431:	41 bf 03 00 00 00	movl	$3, %r15d
100017437:	48 0f ba e0 26	btq	$38, %rax
10001743c:	0f 82 04 ff ff ff	jb	0x100017346
100017442:	eb 06	jmp	0x10001744a
100017444:	41 bf 04 00 00 00	movl	$4, %r15d
10001744a:	48 8d 05 90 b3 04 00	leaq	308112(%rip), %rax
100017451:	80 38 00	cmpb	$0, (%rax)
100017454:	74 1c	je	0x100017472
100017456:	31 c0	xorl	%eax, %eax
100017458:	48 8d 0d 21 ad 04 00	leaq	306465(%rip), %rcx
10001745f:	44 39 3c 08	cmpl	%r15d, (%rax,%rcx)
100017463:	74 0d	je	0x100017472
100017465:	48 83 c0 04	addq	$4, %rax
100017469:	48 83 f8 1c	cmpq	$28, %rax
10001746d:	75 f0	jne	0x10001745f
10001746f:	45 31 ff	xorl	%r15d, %r15d
100017472:	49 8b 86 0d 05 00 00	movq	1293(%r14), %rax
100017479:	48 0f ba e0 26	btq	$38, %rax
10001747e:	73 1c	jae	0x10001749c
100017480:	41 0f b6 8e 15 05 00 00	movzbl	1301(%r14), %ecx
100017488:	48 0d 00 00 04 00	orq	$262144, %rax
10001748e:	49 89 86 0d 05 00 00	movq	%rax, 1293(%r14)
100017495:	41 88 8e 15 05 00 00	movb	%cl, 1301(%r14)
10001749c:	44 89 f8	movl	%r15d, %eax
10001749f:	48 83 c4 08	addq	$8, %rsp
1000174a3:	5b	popq	%rbx
1000174a4:	41 5e	popq	%r14
1000174a6:	41 5f	popq	%r15
1000174a8:	5d	popq	%rbp
1000174a9:	c3	retq
1000174aa:	e8 3b 20 02 00	callq	0x1000394ea
1000174af:	84 c0	testb	%al, %al
1000174b1:	0f 84 8f fe ff ff	je	0x100017346
1000174b7:	41 f6 86 a0 04 00 00 01	testb	$1, 1184(%r14)
1000174bf:	0f 84 81 fe ff ff	je	0x100017346
1000174c5:	41 83 be 9c 03 00 00 02	cmpl	$2, 924(%r14)
1000174cd:	77 13	ja	0x1000174e2
1000174cf:	41 80 8e 0f 05 00 00 04	orb	$4, 1295(%r14)
1000174d7:	41 bf 03 00 00 00	movl	$3, %r15d
1000174dd:	e9 68 ff ff ff	jmp	0x10001744a
1000174e2:	48 8d 15 81 27 03 00	leaq	206721(%rip), %rdx ## literal pool for: "service exceeded successive crash limit. launch will be throttled"
1000174e9:	4c 89 f7	movq	%r14, %rdi
1000174ec:	be 05 00 00 00	movl	$5, %esi
1000174f1:	31 c0	xorl	%eax, %eax
1000174f3:	e8 c2 ea ff ff	callq	0x100015fba
1000174f8:	e9 49 fe ff ff	jmp	0x100017346
1000174fd:	55	pushq	%rbp
1000174fe:	48 89 e5	movq	%rsp, %rbp
100017501:	41 57	pushq	%r15
100017503:	41 56	pushq	%r14
100017505:	41 55	pushq	%r13
100017507:	41 54	pushq	%r12
100017509:	53	pushq	%rbx
10001750a:	50	pushq	%rax
10001750b:	45 89 c7	movl	%r8d, %r15d
10001750e:	49 89 cc	movq	%rcx, %r12
100017511:	49 89 d5	movq	%rdx, %r13
100017514:	48 89 fb	movq	%rdi, %rbx
100017517:	48 85 f6	testq	%rsi, %rsi
10001751a:	74 16	je	0x100017532
10001751c:	48 8d 15 89 27 03 00	leaq	206729(%rip), %rdx ## literal pool for: "Overriding specified stdin path for inetd-compatible service."
100017523:	48 89 df	movq	%rbx, %rdi
100017526:	be 04 00 00 00	movl	$4, %esi
10001752b:	31 c0	xorl	%eax, %eax
10001752d:	e8 88 ea ff ff	callq	0x100015fba
100017532:	44 89 ff	movl	%r15d, %edi
100017535:	e8 a8 a4 02 00	callq	0x1000419e2 ## symbol stub for: _dup
10001753a:	83 f8 ff	cmpl	$-1, %eax
10001753d:	74 5a	je	0x100017599
10001753f:	41 89 c6	movl	%eax, %r14d
100017542:	4c 89 65 d0	movq	%r12, -48(%rbp)
100017546:	41 bc ff ff ff ff	movl	$4294967295, %r12d
10001754c:	b8 ff ff ff ff	movl	$4294967295, %eax
100017551:	4d 85 ed	testq	%r13, %r13
100017554:	75 0d	jne	0x100017563
100017556:	44 89 ff	movl	%r15d, %edi
100017559:	e8 84 a4 02 00	callq	0x1000419e2 ## symbol stub for: _dup
10001755e:	83 f8 ff	cmpl	$-1, %eax
100017561:	74 3f	je	0x1000175a2
100017563:	48 83 7d d0 00	cmpq	$0, -48(%rbp)
100017568:	75 17	jne	0x100017581
10001756a:	44 89 ff	movl	%r15d, %edi
10001756d:	41 89 c7	movl	%eax, %r15d
100017570:	e8 6d a4 02 00	callq	0x1000419e2 ## symbol stub for: _dup
100017575:	41 89 c4	movl	%eax, %r12d
100017578:	44 89 f8	movl	%r15d, %eax
10001757b:	41 83 fc ff	cmpl	$-1, %r12d
10001757f:	74 2d	je	0x1000175ae
100017581:	44 89 b3 98 02 00 00	movl	%r14d, 664(%rbx)
100017588:	89 83 9c 02 00 00	movl	%eax, 668(%rbx)
10001758e:	44 89 a3 a0 02 00 00	movl	%r12d, 672(%rbx)
100017595:	31 db	xorl	%ebx, %ebx
100017597:	eb 32	jmp	0x1000175cb
100017599:	e8 c2 a1 02 00	callq	0x100041760 ## symbol stub for: ___error
10001759e:	8b 18	movl	(%rax), %ebx
1000175a0:	eb 29	jmp	0x1000175cb
1000175a2:	e8 b9 a1 02 00	callq	0x100041760 ## symbol stub for: ___error
1000175a7:	8b 18	movl	(%rax), %ebx
1000175a9:	44 89 f7	movl	%r14d, %edi
1000175ac:	eb 18	jmp	0x1000175c6
1000175ae:	e8 ad a1 02 00	callq	0x100041760 ## symbol stub for: ___error
1000175b3:	8b 18	movl	(%rax), %ebx
1000175b5:	44 89 f7	movl	%r14d, %edi
1000175b8:	e8 f7 b1 01 00	callq	0x1000327b4
1000175bd:	41 83 ff ff	cmpl	$-1, %r15d
1000175c1:	74 08	je	0x1000175cb
1000175c3:	44 89 ff	movl	%r15d, %edi
1000175c6:	e8 e9 b1 01 00	callq	0x1000327b4
1000175cb:	89 d8	movl	%ebx, %eax
1000175cd:	48 83 c4 08	addq	$8, %rsp
1000175d1:	5b	popq	%rbx
1000175d2:	41 5c	popq	%r12
1000175d4:	41 5d	popq	%r13
1000175d6:	41 5e	popq	%r14
1000175d8:	41 5f	popq	%r15
1000175da:	5d	popq	%rbp
1000175db:	c3	retq
1000175dc:	55	pushq	%rbp
1000175dd:	48 89 e5	movq	%rsp, %rbp
1000175e0:	41 56	pushq	%r14
1000175e2:	53	pushq	%rbx
1000175e3:	48 89 fb	movq	%rdi, %rbx
1000175e6:	8b 8f c8 03 00 00	movl	968(%rdi), %ecx
1000175ec:	85 c9	testl	%ecx, %ecx
1000175ee:	74 56	je	0x100017646
1000175f0:	48 8d 15 f3 26 03 00	leaq	206579(%rip), %rdx ## literal pool for: "Abandoning PID %d and its process group"
1000175f7:	45 31 f6	xorl	%r14d, %r14d
1000175fa:	48 89 df	movq	%rbx, %rdi
1000175fd:	be 05 00 00 00	movl	$5, %esi
100017602:	31 c0	xorl	%eax, %eax
100017604:	e8 b1 e9 ff ff	callq	0x100015fba
100017609:	48 89 df	movq	%rbx, %rdi
10001760c:	be 1d 00 00 00	movl	$29, %esi
100017611:	e8 b8 b2 ff ff	callq	0x1000128ce
100017616:	80 8b e8 03 00 00 20	orb	$32, 1000(%rbx)
10001761d:	48 89 df	movq	%rbx, %rdi
100017620:	be 01 00 00 00	movl	$1, %esi
100017625:	e8 24 00 00 00	callq	0x10001764e
10001762a:	0f ba a3 0d 05 00 00 1c	btl	$28, 1293(%rbx)
100017632:	4c 0f 43 f3	cmovaeq	%rbx, %r14
100017636:	48 89 df	movq	%rbx, %rdi
100017639:	be 1d 00 00 00	movl	$29, %esi
10001763e:	e8 0e b3 ff ff	callq	0x100012951
100017643:	4c 89 f3	movq	%r14, %rbx
100017646:	48 89 d8	movq	%rbx, %rax
100017649:	5b	popq	%rbx
10001764a:	41 5e	popq	%r14
10001764c:	5d	popq	%rbp
10001764d:	c3	retq
10001764e:	55	pushq	%rbp
10001764f:	48 89 e5	movq	%rsp, %rbp
100017652:	41 57	pushq	%r15
100017654:	41 56	pushq	%r14
100017656:	41 55	pushq	%r13
100017658:	41 54	pushq	%r12
10001765a:	53	pushq	%rbx
10001765b:	48 83 ec 18	subq	$24, %rsp
10001765f:	49 89 fd	movq	%rdi, %r13
100017662:	0f ba a7 0d 05 00 00 11	btl	$17, 1293(%rdi)
10001766a:	72 3b	jb	0x1000176a7
10001766c:	83 e6 01	andl	$1, %esi
10001766f:	75 36	jne	0x1000176a7
100017671:	41 8b bd c8 03 00 00	movl	968(%r13), %edi
100017678:	be 0f 00 00 00	movl	$15, %esi
10001767d:	e8 92 a4 02 00	callq	0x100041b14 ## symbol stub for: _killpg
100017682:	85 c0	testl	%eax, %eax
100017684:	74 21	je	0x1000176a7
100017686:	41 89 c6	movl	%eax, %r14d
100017689:	e8 d2 a0 02 00	callq	0x100041760 ## symbol stub for: ___error
10001768e:	83 38 03	cmpl	$3, (%rax)
100017691:	74 14	je	0x1000176a7
100017693:	e8 c8 a0 02 00	callq	0x100041760 ## symbol stub for: ___error
100017698:	83 38 01	cmpl	$1, (%rax)
10001769b:	74 0a	je	0x1000176a7
10001769d:	41 83 fe ff	cmpl	$-1, %r14d
1000176a1:	0f 84 01 09 00 00	je	0x100017fa8
1000176a7:	4d 8d b5 f0 03 00 00	leaq	1008(%r13), %r14
1000176ae:	41 f6 85 e8 03 00 00 20	testb	$32, 1000(%r13)
1000176b6:	75 14	jne	0x1000176cc
1000176b8:	41 8b b5 c8 03 00 00	movl	968(%r13), %esi
1000176bf:	4c 89 f7	movq	%r14, %rdi
1000176c2:	e8 df 16 02 00	callq	0x100038da6
1000176c7:	49 89 c7	movq	%rax, %r15
1000176ca:	eb 0b	jmp	0x1000176d7
1000176cc:	4c 89 f7	movq	%r14, %rdi
1000176cf:	e8 3c 1d 02 00	callq	0x100039410
1000176d4:	45 31 ff	xorl	%r15d, %r15d
1000176d7:	41 8b 06	movl	(%r14), %eax
1000176da:	83 f8 02	cmpl	$2, %eax
1000176dd:	74 09	je	0x1000176e8
1000176df:	85 c0	testl	%eax, %eax
1000176e1:	75 1b	jne	0x1000176fe
1000176e3:	e8 57 8d 02 00	callq	0x10004043f
1000176e8:	48 8d 15 b0 2f 03 00	leaq	208816(%rip), %rdx ## literal pool for: "wait4() failed"
1000176ef:	4c 89 ef	movq	%r13, %rdi
1000176f2:	be 03 00 00 00	movl	$3, %esi
1000176f7:	31 c0	xorl	%eax, %eax
1000176f9:	e8 bc e8 ff ff	callq	0x100015fba
1000176fe:	41 f6 85 e8 03 00 00 02	testb	$2, 1000(%r13)
100017706:	0f 85 b4 00 00 00	jne	0x1000177c0
10001770c:	41 83 3e 01	cmpl	$1, (%r14)
100017710:	75 1b	jne	0x10001772d
100017712:	48 8d 15 95 2f 03 00	leaq	208789(%rip), %rdx ## literal pool for: "abandoned xpcproxy before exec"
100017719:	4c 89 ef	movq	%r13, %rdi
10001771c:	be 04 00 00 00	movl	$4, %esi
100017721:	31 c0	xorl	%eax, %eax
100017723:	e8 92 e8 ff ff	callq	0x100015fba
100017728:	e9 93 00 00 00	jmp	0x1000177c0
10001772d:	4c 89 f7	movq	%r14, %rdi
100017730:	e8 9f 1c 02 00	callq	0x1000393d4
100017735:	84 c0	testb	%al, %al
100017737:	74 2a	je	0x100017763
100017739:	4c 89 f7	movq	%r14, %rdi
10001773c:	e8 af 1c 02 00	callq	0x1000393f0
100017741:	41 89 c4	movl	%eax, %r12d
100017744:	83 f8 4e	cmpl	$78, %eax
100017747:	74 5e	je	0x1000177a7
100017749:	44 89 e0	movl	%r12d, %eax
10001774c:	83 c0 c0	addl	$-64, %eax
10001774f:	83 f8 0e	cmpl	$14, %eax
100017752:	77 2a	ja	0x10001777e
100017754:	89 c0	movl	%eax, %eax
100017756:	48 8d 0d 63 35 04 00	leaq	275811(%rip), %rcx
10001775d:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
100017761:	eb 1d	jmp	0x100017780
100017763:	48 8d 15 a3 2f 03 00	leaq	208803(%rip), %rdx ## literal pool for: "xpcproxy exited due to %s"
10001776a:	4c 89 ef	movq	%r13, %rdi
10001776d:	be 05 00 00 00	movl	$5, %esi
100017772:	4c 89 f9	movq	%r15, %rcx
100017775:	31 c0	xorl	%eax, %eax
100017777:	e8 3e e8 ff ff	callq	0x100015fba
10001777c:	eb 42	jmp	0x1000177c0
10001777e:	31 c0	xorl	%eax, %eax
100017780:	48 85 c0	testq	%rax, %rax
100017783:	4c 8d 05 8a 27 03 00	leaq	206730(%rip), %r8 ## literal pool for: "?"
10001778a:	4c 0f 45 c0	cmovneq	%rax, %r8
10001778e:	48 8d 15 38 2f 03 00	leaq	208696(%rip), %rdx ## literal pool for: "xpcproxy could not exec: %d: %s"
100017795:	4c 89 ef	movq	%r13, %rdi
100017798:	be 04 00 00 00	movl	$4, %esi
10001779d:	44 89 e1	movl	%r12d, %ecx
1000177a0:	31 c0	xorl	%eax, %eax
1000177a2:	e8 13 e8 ff ff	callq	0x100015fba
1000177a7:	48 8d 15 3f 2f 03 00	leaq	208703(%rip), %rdx ## literal pool for: "xpcproxy exited due to exit(%d)"
1000177ae:	4c 89 ef	movq	%r13, %rdi
1000177b1:	be 05 00 00 00	movl	$5, %esi
1000177b6:	44 89 e1	movl	%r12d, %ecx
1000177b9:	31 c0	xorl	%eax, %eax
1000177bb:	e8 fa e7 ff ff	callq	0x100015fba
1000177c0:	4c 89 f7	movq	%r14, %rdi
1000177c3:	e8 96 1c 02 00	callq	0x10003945e
1000177c8:	84 c0	testb	%al, %al
1000177ca:	74 19	je	0x1000177e5
1000177cc:	48 8d 15 54 2f 03 00	leaq	208724(%rip), %rdx ## literal pool for: "removing service since it exited with consistent failure - %s"
1000177d3:	4c 89 ef	movq	%r13, %rdi
1000177d6:	be 04 00 00 00	movl	$4, %esi
1000177db:	4c 89 f9	movq	%r15, %rcx
1000177de:	31 c0	xorl	%eax, %eax
1000177e0:	e8 d5 e7 ff ff	callq	0x100015fba
1000177e5:	49 63 b5 c8 03 00 00	movslq	968(%r13), %rsi
1000177ec:	bf 54 00 00 22	movl	$570425428, %edi
1000177f1:	e8 d9 56 ff ff	callq	0x10000cecf
1000177f6:	bf 80 00 00 00	movl	$128, %edi
1000177fb:	e8 61 48 ff ff	callq	0x10000c061
100017800:	49 89 c4	movq	%rax, %r12
100017803:	4c 89 f7	movq	%r14, %rdi
100017806:	e8 c9 1b 02 00	callq	0x1000393d4
10001780b:	4c 89 f7	movq	%r14, %rdi
10001780e:	84 c0	testb	%al, %al
100017810:	74 1a	je	0x10001782c
100017812:	e8 d9 1b 02 00	callq	0x1000393f0
100017817:	48 8d 35 47 2f 03 00	leaq	208711(%rip), %rsi ## literal pool for: "exited due to exit(%d)"
10001781e:	4c 89 e7	movq	%r12, %rdi
100017821:	89 c2	movl	%eax, %edx
100017823:	31 c0	xorl	%eax, %eax
100017825:	e8 a6 48 ff ff	callq	0x10000c0d0
10001782a:	eb 45	jmp	0x100017871
10001782c:	e8 59 1c 02 00	callq	0x10003948a
100017831:	84 c0	testb	%al, %al
100017833:	74 16	je	0x10001784b
100017835:	48 8d 35 40 2f 03 00	leaq	208704(%rip), %rsi ## literal pool for: "exited due to %s"
10001783c:	4c 89 e7	movq	%r12, %rdi
10001783f:	4c 89 fa	movq	%r15, %rdx
100017842:	31 c0	xorl	%eax, %eax
100017844:	e8 87 48 ff ff	callq	0x10000c0d0
100017849:	eb 26	jmp	0x100017871
10001784b:	41 8b 95 f4 03 00 00	movl	1012(%r13), %edx
100017852:	85 d2	testl	%edx, %edx
100017854:	74 1b	je	0x100017871
100017856:	49 8b 8d f8 03 00 00	movq	1016(%r13), %rcx
10001785d:	48 8d 35 29 2f 03 00	leaq	208681(%rip), %rsi ## literal pool for: "exited with exit reason (namespace: %d code: 0x%llx) - %s"
100017864:	4c 89 e7	movq	%r12, %rdi
100017867:	4d 89 f8	movq	%r15, %r8
10001786a:	31 c0	xorl	%eax, %eax
10001786c:	e8 5f 48 ff ff	callq	0x10000c0d0
100017871:	49 8b bd e8 00 00 00	movq	232(%r13), %rdi
100017878:	e8 03 49 01 00	callq	0x10002c180
10001787d:	48 85 c0	testq	%rax, %rax
100017880:	74 14	je	0x100017896
100017882:	48 8d 35 3e 2f 03 00	leaq	208702(%rip), %rsi ## literal pool for: " during %s"
100017889:	4c 89 e7	movq	%r12, %rdi
10001788c:	48 89 c2	movq	%rax, %rdx
10001788f:	31 c0	xorl	%eax, %eax
100017891:	e8 3a 48 ff ff	callq	0x10000c0d0
100017896:	49 8b 0c 24	movq	(%r12), %rcx
10001789a:	48 8d 15 75 fd 02 00	leaq	195957(%rip), %rdx ## literal pool for: "%s"
1000178a1:	4c 89 ef	movq	%r13, %rdi
1000178a4:	be 05 00 00 00	movl	$5, %esi
1000178a9:	31 c0	xorl	%eax, %eax
1000178ab:	e8 0a e7 ff ff	callq	0x100015fba
1000178b0:	4c 89 e7	movq	%r12, %rdi
1000178b3:	e8 f9 47 ff ff	callq	0x10000c0b1
1000178b8:	41 8a 85 a0 04 00 00	movb	1184(%r13), %al
1000178bf:	f6 d0	notb	%al
1000178c1:	a8 03	testb	$3, %al
1000178c3:	75 16	jne	0x1000178db
1000178c5:	48 8d 15 06 2f 03 00	leaq	208646(%rip), %rdx ## literal pool for: "process exited in a dirty state"
1000178cc:	4c 89 ef	movq	%r13, %rdi
1000178cf:	be 05 00 00 00	movl	$5, %esi
1000178d4:	31 c0	xorl	%eax, %eax
1000178d6:	e8 df e6 ff ff	callq	0x100015fba
1000178db:	4c 89 ff	movq	%r15, %rdi
1000178de:	e8 4d a1 02 00	callq	0x100041a30 ## symbol stub for: _free
1000178e3:	49 83 bd e8 02 00 00 00	cmpq	$0, 744(%r13)
1000178eb:	74 30	je	0x10001791d
1000178ed:	4c 89 ef	movq	%r13, %rdi
1000178f0:	be 23 00 00 00	movl	$35, %esi
1000178f5:	e8 90 b3 ff ff	callq	0x100012c8a
1000178fa:	49 8b bd e8 02 00 00	movq	744(%r13), %rdi
100017901:	e8 76 a0 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100017906:	49 8b bd e8 02 00 00	movq	744(%r13), %rdi
10001790d:	e8 46 a0 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100017912:	49 c7 85 e8 02 00 00 00 00 00 00	movq	$0, 744(%r13)
10001791d:	49 83 bd f0 02 00 00 00	cmpq	$0, 752(%r13)
100017925:	74 30	je	0x100017957
100017927:	4c 89 ef	movq	%r13, %rdi
10001792a:	be 24 00 00 00	movl	$36, %esi
10001792f:	e8 56 b3 ff ff	callq	0x100012c8a
100017934:	49 8b bd f0 02 00 00	movq	752(%r13), %rdi
10001793b:	e8 3c a0 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100017940:	49 8b bd f0 02 00 00	movq	752(%r13), %rdi
100017947:	e8 0c a0 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001794c:	49 c7 85 f0 02 00 00 00 00 00 00	movq	$0, 752(%r13)
100017957:	48 8d 05 ad ae 04 00	leaq	306861(%rip), %rax
10001795e:	80 38 00	cmpb	$0, (%rax)
100017961:	0f 84 39 01 00 00	je	0x100017aa0
100017967:	4c 89 f7	movq	%r14, %rdi
10001796a:	e8 07 1b 02 00	callq	0x100039476
10001796f:	84 c0	testb	%al, %al
100017971:	0f 84 29 01 00 00	je	0x100017aa0
100017977:	49 83 bd f0 04 00 00 00	cmpq	$0, 1264(%r13)
10001797f:	75 10	jne	0x100017991
100017981:	31 ff	xorl	%edi, %edi
100017983:	31 f6	xorl	%esi, %esi
100017985:	e8 b6 a5 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10001798a:	49 89 85 f0 04 00 00	movq	%rax, 1264(%r13)
100017991:	31 ff	xorl	%edi, %edi
100017993:	31 f6	xorl	%esi, %esi
100017995:	31 d2	xorl	%edx, %edx
100017997:	e8 76 a6 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10001799c:	49 89 c7	movq	%rax, %r15
10001799f:	49 63 95 c8 03 00 00	movslq	968(%r13), %rdx
1000179a6:	48 8d 35 e8 2e 03 00	leaq	208616(%rip), %rsi ## literal pool for: "pid"
1000179ad:	48 89 c7	movq	%rax, %rdi
1000179b0:	e8 cf a6 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000179b5:	49 63 95 cc 03 00 00	movslq	972(%r13), %rdx
1000179bc:	48 8d 35 d6 2e 03 00	leaq	208598(%rip), %rsi ## literal pool for: "run-reason"
1000179c3:	4c 89 ff	movq	%r15, %rdi
1000179c6:	e8 b9 a6 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000179cb:	49 8b 95 a0 03 00 00	movq	928(%r13), %rdx
1000179d2:	48 8d 35 cb 2e 03 00	leaq	208587(%rip), %rsi ## literal pool for: "start"
1000179d9:	4c 89 ff	movq	%r15, %rdi
1000179dc:	e8 c1 a6 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
1000179e1:	e8 52 a1 02 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
1000179e6:	48 8d 35 bd 2e 03 00	leaq	208573(%rip), %rsi ## literal pool for: "end"
1000179ed:	4c 89 ff	movq	%r15, %rdi
1000179f0:	48 89 c2	movq	%rax, %rdx
1000179f3:	e8 aa a6 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
1000179f8:	49 8d 95 10 04 00 00	leaq	1040(%r13), %rdx
1000179ff:	48 8d 35 a8 2e 03 00	leaq	208552(%rip), %rsi ## literal pool for: "rusage"
100017a06:	b9 90 00 00 00	movl	$144, %ecx
100017a0b:	4c 89 ff	movq	%r15, %rdi
100017a0e:	e8 6b a6 02 00	callq	0x10004207e ## symbol stub for: _xpc_dictionary_set_data
100017a13:	41 0f b7 95 e0 03 00 00	movzwl	992(%r13), %edx
100017a1b:	48 8d 35 93 2e 03 00	leaq	208531(%rip), %rsi ## literal pool for: "forks"
100017a22:	4c 89 ff	movq	%r15, %rdi
100017a25:	e8 78 a6 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100017a2a:	41 0f b7 95 e2 03 00 00	movzwl	994(%r13), %edx
100017a32:	48 8d 35 82 2e 03 00	leaq	208514(%rip), %rsi ## literal pool for: "execs"
100017a39:	4c 89 ff	movq	%r15, %rdi
100017a3c:	e8 61 a6 02 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100017a41:	41 0f b6 95 a0 04 00 00	movzbl	1184(%r13), %edx
100017a49:	83 e2 01	andl	$1, %edx
100017a4c:	48 8d 35 6e 2e 03 00	leaq	208494(%rip), %rsi ## literal pool for: "dirty-exit"
100017a53:	4c 89 ff	movq	%r15, %rdi
100017a56:	e8 1d a6 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100017a5b:	41 8a 85 a0 04 00 00	movb	1184(%r13), %al
100017a62:	24 02	andb	$2, %al
100017a64:	d0 e8	shrb	%al
100017a66:	0f b6 d0	movzbl	%al, %edx
100017a69:	48 8d 35 5c 2e 03 00	leaq	208476(%rip), %rsi ## literal pool for: "idle-exit"
100017a70:	4c 89 ff	movq	%r15, %rdi
100017a73:	e8 00 a6 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100017a78:	48 8d 35 57 2e 03 00	leaq	208471(%rip), %rsi ## literal pool for: "jettisoned"
100017a7f:	4c 89 ff	movq	%r15, %rdi
100017a82:	31 d2	xorl	%edx, %edx
100017a84:	e8 ef a5 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100017a89:	49 8b bd f0 04 00 00	movq	1264(%r13), %rdi
100017a90:	4c 89 fe	movq	%r15, %rsi
100017a93:	e8 96 a4 02 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
100017a98:	4c 89 ff	movq	%r15, %rdi
100017a9b:	e8 5c a6 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100017aa0:	49 0f ba a5 0d 05 00 00 26	btq	$38, 1293(%r13)
100017aa9:	73 3b	jae	0x100017ae6
100017aab:	4c 89 f7	movq	%r14, %rdi
100017aae:	e8 a1 1a 02 00	callq	0x100039554
100017ab3:	84 c0	testb	%al, %al
100017ab5:	74 08	je	0x100017abf
100017ab7:	4c 89 ef	movq	%r13, %rdi
100017aba:	e8 58 39 00 00	callq	0x10001b417
100017abf:	49 8b 5d 78	movq	120(%r13), %rbx
100017ac3:	48 85 db	testq	%rbx, %rbx
100017ac6:	74 1e	je	0x100017ae6
100017ac8:	4c 8b 7b 08	movq	8(%rbx), %r15
100017acc:	48 89 df	movq	%rbx, %rdi
100017acf:	e8 c9 a5 01 00	callq	0x10003209d
100017ad4:	48 89 df	movq	%rbx, %rdi
100017ad7:	31 f6	xorl	%esi, %esi
100017ad9:	e8 73 ae ff ff	callq	0x100012951
100017ade:	4c 89 fb	movq	%r15, %rbx
100017ae1:	4d 85 ff	testq	%r15, %r15
100017ae4:	75 e2	jne	0x100017ac8
100017ae6:	41 f6 85 e8 03 00 00 02	testb	$2, 1000(%r13)
100017aee:	75 48	jne	0x100017b38
100017af0:	48 8d 05 eb ac 04 00	leaq	306411(%rip), %rax
100017af7:	80 38 00	cmpb	$0, (%rax)
100017afa:	74 0c	je	0x100017b08
100017afc:	48 8d 3d de 2d 03 00	leaq	208350(%rip), %rdi ## literal pool for: "xpcproxy exited before exec"
100017b03:	e8 7b ca 01 00	callq	0x100034583
100017b08:	be 59 00 00 00	movl	$89, %esi
100017b0d:	41 83 bd e4 03 00 00 00	cmpl	$0, 996(%r13)
100017b15:	75 17	jne	0x100017b2e
100017b17:	4c 89 f7	movq	%r14, %rdi
100017b1a:	e8 b3 1a 02 00	callq	0x1000395d2
100017b1f:	84 c0	testb	%al, %al
100017b21:	b8 50 00 00 00	movl	$80, %eax
100017b26:	be 99 00 00 00	movl	$153, %esi
100017b2b:	0f 45 f0	cmovnel	%eax, %esi
100017b2e:	4c 89 ef	movq	%r13, %rdi
100017b31:	31 d2	xorl	%edx, %edx
100017b33:	e8 85 6b 00 00	callq	0x10001e6bd
100017b38:	4c 89 f7	movq	%r14, %rdi
100017b3b:	e8 94 18 02 00	callq	0x1000393d4
100017b40:	84 c0	testb	%al, %al
100017b42:	74 38	je	0x100017b7c
100017b44:	4c 89 f7	movq	%r14, %rdi
100017b47:	e8 a4 18 02 00	callq	0x1000393f0
100017b4c:	49 0f ba a5 0d 05 00 00 26	btq	$38, 1293(%r13)
100017b55:	73 25	jae	0x100017b7c
100017b57:	3d ad 00 00 00	cmpl	$173, %eax
100017b5c:	75 1e	jne	0x100017b7c
100017b5e:	48 8d 15 46 2a 03 00	leaq	207430(%rip), %rdx ## literal pool for: "extension receipt validation failed, removing"
100017b65:	4c 89 ef	movq	%r13, %rdi
100017b68:	be 05 00 00 00	movl	$5, %esi
100017b6d:	31 c0	xorl	%eax, %eax
100017b6f:	e8 46 e4 ff ff	callq	0x100015fba
100017b74:	41 80 8d 64 01 00 00 10	orb	$16, 356(%r13)
100017b7c:	41 0f ba a5 0d 05 00 00 16	btl	$22, 1293(%r13)
100017b85:	72 1e	jb	0x100017ba5
100017b87:	4c 89 f7	movq	%r14, %rdi
100017b8a:	e8 cf 18 02 00	callq	0x10003945e
100017b8f:	84 c0	testb	%al, %al
100017b91:	74 30	je	0x100017bc3
100017b93:	4c 89 ef	movq	%r13, %rdi
100017b96:	31 f6	xorl	%esi, %esi
100017b98:	31 d2	xorl	%edx, %edx
100017b9a:	e8 ba 06 00 00	callq	0x100018259
100017b9f:	85 c0	testl	%eax, %eax
100017ba1:	75 18	jne	0x100017bbb
100017ba3:	eb 1e	jmp	0x100017bc3
100017ba5:	48 8d 15 2d 2a 03 00	leaq	207405(%rip), %rdx ## literal pool for: "service only configured to run once, removing"
100017bac:	4c 89 ef	movq	%r13, %rdi
100017baf:	be 05 00 00 00	movl	$5, %esi
100017bb4:	31 c0	xorl	%eax, %eax
100017bb6:	e8 ff e3 ff ff	callq	0x100015fba
100017bbb:	41 80 8d 64 01 00 00 10	orb	$16, 356(%r13)
100017bc3:	4c 89 f7	movq	%r14, %rdi
100017bc6:	e8 1f 19 02 00	callq	0x1000394ea
100017bcb:	84 c0	testb	%al, %al
100017bcd:	0f 84 c0 00 00 00	je	0x100017c93
100017bd3:	41 8b 8d 9c 03 00 00	movl	924(%r13), %ecx
100017bda:	ff c1	incl	%ecx
100017bdc:	41 89 8d 9c 03 00 00	movl	%ecx, 924(%r13)
100017be3:	48 8d 15 1d 2a 03 00	leaq	207389(%rip), %rdx ## literal pool for: "service has crashed %u times in a row"
100017bea:	4c 89 ef	movq	%r13, %rdi
100017bed:	be 05 00 00 00	movl	$5, %esi
100017bf2:	31 c0	xorl	%eax, %eax
100017bf4:	e8 c1 e3 ff ff	callq	0x100015fba
100017bf9:	4c 89 f7	movq	%r14, %rdi
100017bfc:	e8 45 19 02 00	callq	0x100039546
100017c01:	84 c0	testb	%al, %al
100017c03:	0f 84 95 00 00 00	je	0x100017c9e
100017c09:	48 8d 15 1d 2a 03 00	leaq	207389(%rip), %rdx ## literal pool for: "service has crashed into the shared cache area"
100017c10:	4c 89 ef	movq	%r13, %rdi
100017c13:	be 05 00 00 00	movl	$5, %esi
100017c18:	31 c0	xorl	%eax, %eax
100017c1a:	e8 9b e3 ff ff	callq	0x100015fba
100017c1f:	49 8b 85 f0 00 00 00	movq	240(%r13), %rax
100017c26:	48 85 c0	testq	%rax, %rax
100017c29:	74 3d	je	0x100017c68
100017c2b:	48 8b 88 0d 05 00 00	movq	1293(%rax), %rcx
100017c32:	48 0f ba e1 3b	btq	$59, %rcx
100017c37:	72 2f	jb	0x100017c68
100017c39:	0f b6 90 15 05 00 00	movzbl	1301(%rax), %edx
100017c40:	48 0f ba e9 3a	btsq	$58, %rcx
100017c45:	48 89 88 0d 05 00 00	movq	%rcx, 1293(%rax)
100017c4c:	88 90 15 05 00 00	movb	%dl, 1301(%rax)
100017c52:	48 8d 15 03 2a 03 00	leaq	207363(%rip), %rdx ## literal pool for: "recorded reslide request for this instance in the original service"
100017c59:	4c 89 ef	movq	%r13, %rdi
100017c5c:	be 05 00 00 00	movl	$5, %esi
100017c61:	31 c0	xorl	%eax, %eax
100017c63:	e8 52 e3 ff ff	callq	0x100015fba
100017c68:	49 8b 85 0d 05 00 00	movq	1293(%r13), %rax
100017c6f:	48 0f ba e0 3b	btq	$59, %rax
100017c74:	72 28	jb	0x100017c9e
100017c76:	41 0f b6 8d 15 05 00 00	movzbl	1301(%r13), %ecx
100017c7e:	48 0f ba e8 3a	btsq	$58, %rax
100017c83:	49 89 85 0d 05 00 00	movq	%rax, 1293(%r13)
100017c8a:	41 88 8d 15 05 00 00	movb	%cl, 1301(%r13)
100017c91:	eb 0b	jmp	0x100017c9e
100017c93:	41 c7 85 9c 03 00 00 00 00 00 00	movl	$0, 924(%r13)
100017c9e:	bb a6 00 00 00	movl	$166, %ebx
100017ca3:	41 8b 7c 9d 00	movl	(%r13,%rbx,4), %edi
100017ca8:	83 ff ff	cmpl	$-1, %edi
100017cab:	74 0e	je	0x100017cbb
100017cad:	e8 02 ab 01 00	callq	0x1000327b4
100017cb2:	41 c7 44 9d 00 ff ff ff ff	movl	$4294967295, (%r13,%rbx,4)
100017cbb:	48 ff c3	incq	%rbx
100017cbe:	48 81 fb a9 00 00 00	cmpq	$169, %rbx
100017cc5:	75 dc	jne	0x100017ca3
100017cc7:	4c 89 ef	movq	%r13, %rdi
100017cca:	be 08 00 00 00	movl	$8, %esi
100017ccf:	e8 07 68 00 00	callq	0x10001e4db
100017cd4:	41 80 bd a0 01 00 00 08	cmpb	$8, 416(%r13)
100017cdc:	0f 85 d3 02 00 00	jne	0x100017fb5
100017ce2:	4c 89 f7	movq	%r14, %rdi
100017ce5:	e8 6a 18 02 00	callq	0x100039554
100017cea:	84 c0	testb	%al, %al
100017cec:	74 4c	je	0x100017d3a
100017cee:	4c 89 f7	movq	%r14, %rdi
100017cf1:	e8 7c 18 02 00	callq	0x100039572
100017cf6:	84 c0	testb	%al, %al
100017cf8:	75 40	jne	0x100017d3a
100017cfa:	49 83 bd 60 03 00 00 00	cmpq	$0, 864(%r13)
100017d02:	75 0c	jne	0x100017d10
100017d04:	e8 1f df ff ff	callq	0x100015c28
100017d09:	49 89 85 60 03 00 00	movq	%rax, 864(%r13)
100017d10:	bf 08 00 00 00	movl	$8, %edi
100017d15:	e8 1e 9b 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
100017d1a:	48 b9 db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %rcx
100017d24:	48 f7 e1	mulq	%rcx
100017d27:	48 c1 ea 12	shrq	$18, %rdx
100017d2b:	49 8b bd 60 03 00 00	movq	864(%r13), %rdi
100017d32:	48 89 d6	movq	%rdx, %rsi
100017d35:	e8 45 df ff ff	callq	0x100015c7f
100017d3a:	41 80 bd a0 01 00 00 08	cmpb	$8, 416(%r13)
100017d42:	0f 85 72 02 00 00	jne	0x100017fba
100017d48:	4d 8b bd 68 03 00 00	movq	872(%r13), %r15
100017d4f:	4d 85 ff	testq	%r15, %r15
100017d52:	0f 84 a6 00 00 00	je	0x100017dfe
100017d58:	45 8b a5 c8 03 00 00	movl	968(%r13), %r12d
100017d5f:	45 85 e4	testl	%r12d, %r12d
100017d62:	0f 84 57 02 00 00	je	0x100017fbf
100017d68:	49 8b bd 60 03 00 00	movq	864(%r13), %rdi
100017d6f:	bb ff ff ff ff	movl	$4294967295, %ebx
100017d74:	48 85 ff	testq	%rdi, %rdi
100017d77:	74 1b	je	0x100017d94
100017d79:	e8 0a df ff ff	callq	0x100015c88
100017d7e:	85 c0	testl	%eax, %eax
100017d80:	74 12	je	0x100017d94
100017d82:	49 8b bd 60 03 00 00	movq	864(%r13), %rdi
100017d89:	ff c8	decl	%eax
100017d8b:	89 c6	movl	%eax, %esi
100017d8d:	e8 ff de ff ff	callq	0x100015c91
100017d92:	89 c3	movl	%eax, %ebx
100017d94:	89 5d d4	movl	%ebx, -44(%rbp)
100017d97:	4c 89 f7	movq	%r14, %rdi
100017d9a:	e8 35 16 02 00	callq	0x1000393d4
100017d9f:	84 c0	testb	%al, %al
100017da1:	74 10	je	0x100017db3
100017da3:	4c 89 f7	movq	%r14, %rdi
100017da6:	e8 45 16 02 00	callq	0x1000393f0
100017dab:	48 63 d8	movslq	%eax, %rbx
100017dae:	45 31 f6	xorl	%r14d, %r14d
100017db1:	eb 0e	jmp	0x100017dc1
100017db3:	45 8b b5 f4 03 00 00	movl	1012(%r13), %r14d
100017dba:	49 8b 9d f8 03 00 00	movq	1016(%r13), %rbx
100017dc1:	bf 08 00 00 00	movl	$8, %edi
100017dc6:	e8 6d 9a 02 00	callq	0x100041838 ## symbol stub for: _clock_gettime_nsec_np
100017dcb:	48 b9 db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %rcx
100017dd5:	48 f7 e1	mulq	%rcx
100017dd8:	49 89 d0	movq	%rdx, %r8
100017ddb:	49 c1 e8 12	shrq	$18, %r8
100017ddf:	48 8d 05 1a a9 04 00	leaq	305434(%rip), %rax
100017de6:	48 8b 30	movq	(%rax), %rsi
100017de9:	48 89 1c 24	movq	%rbx, (%rsp)
100017ded:	4c 89 ff	movq	%r15, %rdi
100017df0:	44 89 e2	movl	%r12d, %edx
100017df3:	8b 4d d4	movl	-44(%rbp), %ecx
100017df6:	4d 89 f1	movq	%r14, %r9
100017df9:	e8 70 96 fe ff	callq	0x10000146e
100017dfe:	4c 89 ef	movq	%r13, %rdi
100017e01:	be 1d 00 00 00	movl	$29, %esi
100017e06:	e8 c3 aa ff ff	callq	0x1000128ce
100017e0b:	4c 89 ef	movq	%r13, %rdi
100017e0e:	be 05 00 00 00	movl	$5, %esi
100017e13:	31 d2	xorl	%edx, %edx
100017e15:	e8 91 e0 ff ff	callq	0x100015eab
100017e1a:	49 8b bd b8 03 00 00	movq	952(%r13), %rdi
100017e21:	e8 0a 9c 02 00	callq	0x100041a30 ## symbol stub for: _free
100017e26:	49 c7 85 b8 03 00 00 00 00 00 00	movq	$0, 952(%r13)
100017e31:	41 80 bd a0 01 00 00 00	cmpb	$0, 416(%r13)
100017e39:	74 25	je	0x100017e60
100017e3b:	41 c6 85 a0 01 00 00 00	movb	$0, 416(%r13)
100017e43:	48 8d 15 84 24 03 00	leaq	205956(%rip), %rdx ## literal pool for: "service state: %s"
100017e4a:	48 8d 0d 8f 24 03 00	leaq	205967(%rip), %rcx ## literal pool for: "not running"
100017e51:	4c 89 ef	movq	%r13, %rdi
100017e54:	be 05 00 00 00	movl	$5, %esi
100017e59:	31 c0	xorl	%eax, %eax
100017e5b:	e8 5a e1 ff ff	callq	0x100015fba
100017e60:	48 b8 00 00 00 00 0f 00 00 00	movabsq	$64424509440, %rax
100017e6a:	49 89 85 c8 03 00 00	movq	%rax, 968(%r13)
100017e71:	49 8b bd d0 03 00 00	movq	976(%r13), %rdi
100017e78:	48 85 ff	testq	%rdi, %rdi
100017e7b:	74 1c	je	0x100017e99
100017e7d:	e8 fa 9a 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100017e82:	49 8b bd d0 03 00 00	movq	976(%r13), %rdi
100017e89:	e8 ca 9a 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100017e8e:	49 c7 85 d0 03 00 00 00 00 00 00	movq	$0, 976(%r13)
100017e99:	49 83 bd d8 03 00 00 00	cmpq	$0, 984(%r13)
100017ea1:	74 30	je	0x100017ed3
100017ea3:	4c 89 ef	movq	%r13, %rdi
100017ea6:	be 20 00 00 00	movl	$32, %esi
100017eab:	e8 da ad ff ff	callq	0x100012c8a
100017eb0:	49 8b bd d8 03 00 00	movq	984(%r13), %rdi
100017eb7:	e8 c0 9a 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100017ebc:	49 8b bd d8 03 00 00	movq	984(%r13), %rdi
100017ec3:	e8 90 9a 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100017ec8:	49 c7 85 d8 03 00 00 00 00 00 00	movq	$0, 984(%r13)
100017ed3:	49 c7 85 e0 03 00 00 00 00 00 00	movq	$0, 992(%r13)
100017ede:	41 80 a5 e8 03 00 00 80	andb	$-128, 1000(%r13)
100017ee6:	49 8d 45 08	leaq	8(%r13), %rax
100017eea:	49 8b 4d 08	movq	8(%r13), %rcx
100017eee:	48 85 c9	testq	%rcx, %rcx
100017ef1:	74 08	je	0x100017efb
100017ef3:	49 8b 55 10	movq	16(%r13), %rdx
100017ef7:	48 89 51 10	movq	%rdx, 16(%rcx)
100017efb:	49 8b 55 10	movq	16(%r13), %rdx
100017eff:	48 89 0a	movq	%rcx, (%rdx)
100017f02:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100017f06:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100017f0a:	41 f6 85 64 01 00 00 10	testb	$16, 356(%r13)
100017f12:	75 57	jne	0x100017f6b
100017f14:	41 0f ba a5 0d 05 00 00 14	btl	$20, 1293(%r13)
100017f1d:	72 4c	jb	0x100017f6b
100017f1f:	4c 89 ef	movq	%r13, %rdi
100017f22:	e8 e3 f3 ff ff	callq	0x10001730a
100017f27:	85 c0	testl	%eax, %eax
100017f29:	74 40	je	0x100017f6b
100017f2b:	4c 89 ef	movq	%r13, %rdi
100017f2e:	89 c6	movl	%eax, %esi
100017f30:	e8 64 e1 ff ff	callq	0x100016099
100017f35:	85 c0	testl	%eax, %eax
100017f37:	74 32	je	0x100017f6b
100017f39:	41 89 c6	movl	%eax, %r14d
100017f3c:	83 f8 24	cmpl	$36, %eax
100017f3f:	74 2a	je	0x100017f6b
100017f41:	41 83 fe 7c	cmpl	$124, %r14d
100017f45:	74 24	je	0x100017f6b
100017f47:	44 89 f7	movl	%r14d, %edi
100017f4a:	e8 bf a1 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100017f4f:	48 8d 15 a7 29 03 00	leaq	207271(%rip), %rdx ## literal pool for: "Failed to respawn: %d: %s"
100017f56:	4c 89 ef	movq	%r13, %rdi
100017f59:	be 04 00 00 00	movl	$4, %esi
100017f5e:	44 89 f1	movl	%r14d, %ecx
100017f61:	49 89 c0	movq	%rax, %r8
100017f64:	31 c0	xorl	%eax, %eax
100017f66:	e8 4f e0 ff ff	callq	0x100015fba
100017f6b:	41 f6 85 64 01 00 00 10	testb	$16, 356(%r13)
100017f73:	75 18	jne	0x100017f8d
100017f75:	41 0f ba a5 0d 05 00 00 14	btl	$20, 1293(%r13)
100017f7e:	73 0d	jae	0x100017f8d
100017f80:	4c 89 ef	movq	%r13, %rdi
100017f83:	be 01 00 00 00	movl	$1, %esi
100017f88:	e8 4e 65 00 00	callq	0x10001e4db
100017f8d:	4c 89 ef	movq	%r13, %rdi
100017f90:	be 1d 00 00 00	movl	$29, %esi
100017f95:	48 83 c4 18	addq	$24, %rsp
100017f99:	5b	popq	%rbx
100017f9a:	41 5c	popq	%r12
100017f9c:	41 5d	popq	%r13
100017f9e:	41 5e	popq	%r14
100017fa0:	41 5f	popq	%r15
100017fa2:	5d	popq	%rbp
100017fa3:	e9 a9 a9 ff ff	jmp	0x100012951
100017fa8:	4c 89 ef	movq	%r13, %rdi
100017fab:	e8 a4 84 02 00	callq	0x100040454
100017fb0:	e9 f2 f6 ff ff	jmp	0x1000176a7
100017fb5:	e8 70 84 02 00	callq	0x10004042a
100017fba:	e8 56 84 02 00	callq	0x100040415
100017fbf:	e8 3c 84 02 00	callq	0x100040400
100017fc4:	55	pushq	%rbp
100017fc5:	48 89 e5	movq	%rsp, %rbp
100017fc8:	41 57	pushq	%r15
100017fca:	41 56	pushq	%r14
100017fcc:	41 54	pushq	%r12
100017fce:	53	pushq	%rbx
100017fcf:	48 81 ec d0 00 00 00	subq	$208, %rsp
100017fd6:	48 8b 05 4b 00 04 00	movq	262219(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100017fdd:	48 8b 00	movq	(%rax), %rax
100017fe0:	48 89 45 d8	movq	%rax, -40(%rbp)
100017fe4:	48 8b 1f	movq	(%rdi), %rbx
100017fe7:	48 8b bb d0 03 00 00	movq	976(%rbx), %rdi
100017fee:	e8 95 99 02 00	callq	0x100041988 ## symbol stub for: _dispatch_source_get_data
100017ff3:	49 89 c6	movq	%rax, %r14
100017ff6:	41 0f ba e6 1e	btl	$30, %r14d
100017ffb:	73 07	jae	0x100018004
100017ffd:	66 ff 83 e0 03 00 00	incw	992(%rbx)
100018004:	41 0f ba e6 1d	btl	$29, %r14d
100018009:	0f 83 f5 01 00 00	jae	0x100018204
10001800f:	0f 28 05 6a b2 02 00	movaps	176746(%rip), %xmm0
100018016:	48 8d b5 10 ff ff ff	leaq	-240(%rbp), %rsi
10001801d:	0f 29 86 b0 00 00 00	movaps	%xmm0, 176(%rsi)
100018024:	0f 29 86 a0 00 00 00	movaps	%xmm0, 160(%rsi)
10001802b:	0f 29 86 90 00 00 00	movaps	%xmm0, 144(%rsi)
100018032:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
100018039:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
10001803d:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
100018041:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
100018045:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
100018049:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10001804d:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100018051:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100018055:	0f 29 06	movaps	%xmm0, (%rsi)
100018058:	8b bb c8 03 00 00	movl	968(%rbx), %edi
10001805e:	e8 c9 c7 01 00	callq	0x10003482c
100018063:	85 c0	testl	%eax, %eax
100018065:	0f 85 c8 01 00 00	jne	0x100018233
10001806b:	48 8b 45 a8	movq	-88(%rbp), %rax
10001806f:	48 89 83 c0 03 00 00	movq	%rax, 960(%rbx)
100018076:	f6 83 e8 03 00 00 02	testb	$2, 1000(%rbx)
10001807d:	0f 85 5b 01 00 00	jne	0x1000181de
100018083:	80 bb a0 01 00 00 04	cmpb	$4, 416(%rbx)
10001808a:	0f 87 74 01 00 00	ja	0x100018204
100018090:	48 89 df	movq	%rbx, %rdi
100018093:	be 04 00 00 00	movl	$4, %esi
100018098:	e8 3e 64 00 00	callq	0x10001e4db
10001809d:	80 8b e8 03 00 00 02	orb	$2, 1000(%rbx)
1000180a4:	48 8b 83 0d 05 00 00	movq	1293(%rbx), %rax
1000180ab:	48 b9 00 00 00 80 00 40 00 00	movabsq	$70370891661312, %rcx
1000180b5:	48 85 c8	testq	%rcx, %rax
1000180b8:	74 0a	je	0x1000180c4
1000180ba:	48 8d 0d a7 a6 04 00	leaq	304807(%rip), %rcx
1000180c1:	c6 01 00	movb	$0, (%rcx)
1000180c4:	48 0f ba e0 26	btq	$38, %rax
1000180c9:	0f 83 a1 00 00 00	jae	0x100018170
1000180cf:	48 8d 05 8a a7 04 00	leaq	305034(%rip), %rax
1000180d6:	49 c7 c7 ff ff ff ff	movq	$-1, %r15
1000180dd:	80 38 00	cmpb	$0, (%rax)
1000180e0:	74 1c	je	0x1000180fe
1000180e2:	8b 83 fc 02 00 00	movl	764(%rbx), %eax
1000180e8:	48 85 c0	testq	%rax, %rax
1000180eb:	74 11	je	0x1000180fe
1000180ed:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
1000180f4:	31 ff	xorl	%edi, %edi
1000180f6:	e8 db 98 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
1000180fb:	49 89 c7	movq	%rax, %r15
1000180fe:	e8 f7 63 ff ff	callq	0x10000e4fa
100018103:	48 8b 3d 6e ff 03 00	movq	261998(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10001810a:	31 f6	xorl	%esi, %esi
10001810c:	31 d2	xorl	%edx, %edx
10001810e:	48 89 c1	movq	%rax, %rcx
100018111:	e8 6c 98 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100018116:	48 89 83 f0 02 00 00	movq	%rax, 752(%rbx)
10001811d:	48 89 df	movq	%rbx, %rdi
100018120:	be 24 00 00 00	movl	$36, %esi
100018125:	e8 57 ab ff ff	callq	0x100012c81
10001812a:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
100018131:	48 89 de	movq	%rbx, %rsi
100018134:	e8 3d 98 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100018139:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
100018140:	4c 89 fe	movq	%r15, %rsi
100018143:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10001814a:	31 c9	xorl	%ecx, %ecx
10001814c:	e8 6d 98 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
100018151:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
100018158:	48 8d 35 1a 67 00 00	leaq	26394(%rip), %rsi
10001815f:	e8 42 98 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100018164:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
10001816b:	e8 52 97 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100018170:	48 89 df	movq	%rbx, %rdi
100018173:	be 04 00 00 00	movl	$4, %esi
100018178:	31 d2	xorl	%edx, %edx
10001817a:	e8 2c dd ff ff	callq	0x100015eab
10001817f:	48 89 df	movq	%rbx, %rdi
100018182:	e8 fc 65 00 00	callq	0x10001e783
100018187:	48 89 df	movq	%rbx, %rdi
10001818a:	e8 e0 3b 00 00	callq	0x10001bd6f
10001818f:	49 89 c7	movq	%rax, %r15
100018192:	8b bb cc 03 00 00	movl	972(%rbx), %edi
100018198:	e8 1e 60 00 00	callq	0x10001e1bb
10001819d:	48 8d 3d 72 f4 02 00	leaq	193650(%rip), %rdi ## literal pool for: "%s"
1000181a4:	48 89 c6	movq	%rax, %rsi
1000181a7:	31 c0	xorl	%eax, %eax
1000181a9:	e8 87 6f ff ff	callq	0x10000f135
1000181ae:	49 89 c4	movq	%rax, %r12
1000181b1:	44 8b 83 c8 03 00 00	movl	968(%rbx), %r8d
1000181b8:	48 8d 15 58 27 03 00	leaq	206680(%rip), %rdx ## literal pool for: "Successfully spawned %s[%d] because %s"
1000181bf:	48 89 df	movq	%rbx, %rdi
1000181c2:	be 05 00 00 00	movl	$5, %esi
1000181c7:	4c 89 f9	movq	%r15, %rcx
1000181ca:	49 89 c1	movq	%rax, %r9
1000181cd:	31 c0	xorl	%eax, %eax
1000181cf:	e8 e6 dd ff ff	callq	0x100015fba
1000181d4:	4c 89 e7	movq	%r12, %rdi
1000181d7:	e8 54 98 02 00	callq	0x100041a30 ## symbol stub for: _free
1000181dc:	eb 1f	jmp	0x1000181fd
1000181de:	48 8b bb b8 03 00 00	movq	952(%rbx), %rdi
1000181e5:	e8 46 98 02 00	callq	0x100041a30 ## symbol stub for: _free
1000181ea:	48 8d bd 40 ff ff ff	leaq	-192(%rbp), %rdi
1000181f1:	e8 ec 6d ff ff	callq	0x10000efe2
1000181f6:	48 89 83 b8 03 00 00	movq	%rax, 952(%rbx)
1000181fd:	66 ff 83 e2 03 00 00	incw	994(%rbx)
100018204:	45 85 f6	testl	%r14d, %r14d
100018207:	79 0a	jns	0x100018213
100018209:	48 89 df	movq	%rbx, %rdi
10001820c:	31 f6	xorl	%esi, %esi
10001820e:	e8 3b f4 ff ff	callq	0x10001764e
100018213:	48 8b 05 0e fe 03 00	movq	261646(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001821a:	48 8b 00	movq	(%rax), %rax
10001821d:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100018221:	75 31	jne	0x100018254
100018223:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10001822a:	5b	popq	%rbx
10001822b:	41 5c	popq	%r12
10001822d:	41 5e	popq	%r14
10001822f:	41 5f	popq	%r15
100018231:	5d	popq	%rbp
100018232:	c3	retq
100018233:	48 63 d0	movslq	%eax, %rdx
100018236:	48 8d 3d ca 00 00 00	leaq	202(%rip), %rdi
10001823d:	48 89 de	movq	%rbx, %rsi
100018240:	e8 63 95 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100018245:	f6 83 e8 03 00 00 02	testb	$2, 1000(%rbx)
10001824c:	0f 84 31 fe ff ff	je	0x100018083
100018252:	eb a9	jmp	0x1000181fd
100018254:	e8 19 95 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100018259:	55	pushq	%rbp
10001825a:	48 89 e5	movq	%rsp, %rbp
10001825d:	41 57	pushq	%r15
10001825f:	41 56	pushq	%r14
100018261:	53	pushq	%rbx
100018262:	50	pushq	%rax
100018263:	48 8d 05 26 a4 04 00	leaq	304166(%rip), %rax
10001826a:	45 31 ff	xorl	%r15d, %r15d
10001826d:	80 38 00	cmpb	$0, (%rax)
100018270:	74 73	je	0x1000182e5
100018272:	49 89 f6	movq	%rsi, %r14
100018275:	48 89 fb	movq	%rdi, %rbx
100018278:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10001827f:	48 0f ba e0 33	btq	$51, %rax
100018284:	72 24	jb	0x1000182aa
100018286:	48 0f ba e0 34	btq	$52, %rax
10001828b:	73 58	jae	0x1000182e5
10001828d:	84 d2	testb	%dl, %dl
10001828f:	74 11	je	0x1000182a2
100018291:	be 1a 00 00 00	movl	$26, %esi
100018296:	4c 89 f7	movq	%r14, %rdi
100018299:	e8 18 37 ff ff	callq	0x10000b9b6
10001829e:	84 c0	testb	%al, %al
1000182a0:	75 43	jne	0x1000182e5
1000182a2:	41 bf 01 00 00 00	movl	$1, %r15d
1000182a8:	eb 3b	jmp	0x1000182e5
1000182aa:	48 81 c3 18 05 00 00	addq	$1304, %rbx
1000182b1:	48 89 df	movq	%rbx, %rdi
1000182b4:	e8 6a 4b 02 00	callq	0x10003ce23
1000182b9:	84 c0	testb	%al, %al
1000182bb:	75 28	jne	0x1000182e5
1000182bd:	48 89 df	movq	%rbx, %rdi
1000182c0:	e8 84 4b 02 00	callq	0x10003ce49
1000182c5:	84 c0	testb	%al, %al
1000182c7:	74 16	je	0x1000182df
1000182c9:	4d 85 f6	testq	%r14, %r14
1000182cc:	74 11	je	0x1000182df
1000182ce:	4c 89 f7	movq	%r14, %rdi
1000182d1:	be 08 00 00 00	movl	$8, %esi
1000182d6:	e8 76 cd 01 00	callq	0x100035051
1000182db:	84 c0	testb	%al, %al
1000182dd:	75 06	jne	0x1000182e5
1000182df:	41 bf 96 00 00 00	movl	$150, %r15d
1000182e5:	44 89 f8	movl	%r15d, %eax
1000182e8:	48 83 c4 08	addq	$8, %rsp
1000182ec:	5b	popq	%rbx
1000182ed:	41 5e	popq	%r14
1000182ef:	41 5f	popq	%r15
1000182f1:	5d	popq	%rbp
1000182f2:	c3	retq
1000182f3:	55	pushq	%rbp
1000182f4:	48 89 e5	movq	%rsp, %rbp
1000182f7:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
1000182fe:	48 c1 e8 33	shrq	$51, %rax
100018302:	83 e0 01	andl	$1, %eax
100018305:	5d	popq	%rbp
100018306:	c3	retq
100018307:	55	pushq	%rbp
100018308:	48 89 e5	movq	%rsp, %rbp
10001830b:	48 89 d1	movq	%rdx, %rcx
10001830e:	48 89 f7	movq	%rsi, %rdi
100018311:	48 8d 15 fe f2 02 00	leaq	193278(%rip), %rdx ## literal pool for: "%s"
100018318:	be 03 00 00 00	movl	$3, %esi
10001831d:	31 c0	xorl	%eax, %eax
10001831f:	e8 96 dc ff ff	callq	0x100015fba
100018324:	b0 01	movb	$1, %al
100018326:	5d	popq	%rbp
100018327:	c3	retq
100018328:	55	pushq	%rbp
100018329:	48 89 e5	movq	%rsp, %rbp
10001832c:	41 57	pushq	%r15
10001832e:	41 56	pushq	%r14
100018330:	41 55	pushq	%r13
100018332:	41 54	pushq	%r12
100018334:	53	pushq	%rbx
100018335:	50	pushq	%rax
100018336:	41 89 f7	movl	%esi, %r15d
100018339:	41 8d 47 ff	leal	-1(%r15), %eax
10001833d:	83 f8 02	cmpl	$2, %eax
100018340:	0f 83 af 00 00 00	jae	0x1000183f5
100018346:	49 89 fe	movq	%rdi, %r14
100018349:	bf 40 00 00 00	movl	$64, %edi
10001834e:	e8 0e 3d ff ff	callq	0x10000c061
100018353:	49 89 c5	movq	%rax, %r13
100018356:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
10001835d:	48 85 ff	testq	%rdi, %rdi
100018360:	74 29	je	0x10001838b
100018362:	be 01 00 00 00	movl	$1, %esi
100018367:	e8 9c 81 00 00	callq	0x100020508
10001836c:	49 89 c4	movq	%rax, %r12
10001836f:	48 8d 35 46 e4 02 00	leaq	189510(%rip), %rsi ## literal pool for: "%s/"
100018376:	4c 89 ef	movq	%r13, %rdi
100018379:	48 89 c2	movq	%rax, %rdx
10001837c:	31 c0	xorl	%eax, %eax
10001837e:	e8 4d 3d ff ff	callq	0x10000c0d0
100018383:	4c 89 e7	movq	%r12, %rdi
100018386:	e8 a5 96 02 00	callq	0x100041a30 ## symbol stub for: _free
10001838b:	49 8d 96 18 05 00 00	leaq	1304(%r14), %rdx
100018392:	48 8d 35 7d f2 02 00	leaq	193149(%rip), %rsi ## literal pool for: "%s"
100018399:	4c 89 ef	movq	%r13, %rdi
10001839c:	31 c0	xorl	%eax, %eax
10001839e:	e8 2d 3d ff ff	callq	0x10000c0d0
1000183a3:	41 83 ff 02	cmpl	$2, %r15d
1000183a7:	75 27	jne	0x1000183d0
1000183a9:	41 8b 96 18 01 00 00	movl	280(%r14), %edx
1000183b0:	85 d2	testl	%edx, %edx
1000183b2:	7f 0b	jg	0x1000183bf
1000183b4:	41 8b 96 c8 03 00 00	movl	968(%r14), %edx
1000183bb:	85 d2	testl	%edx, %edx
1000183bd:	7e 11	jle	0x1000183d0
1000183bf:	48 8d 35 20 1c 03 00	leaq	203808(%rip), %rsi ## literal pool for: " [%d]"
1000183c6:	4c 89 ef	movq	%r13, %rdi
1000183c9:	31 c0	xorl	%eax, %eax
1000183cb:	e8 00 3d ff ff	callq	0x10000c0d0
1000183d0:	4c 89 ef	movq	%r13, %rdi
1000183d3:	e8 cc 3c ff ff	callq	0x10000c0a4
1000183d8:	48 89 c3	movq	%rax, %rbx
1000183db:	4c 89 ef	movq	%r13, %rdi
1000183de:	e8 ce 3c ff ff	callq	0x10000c0b1
1000183e3:	48 89 d8	movq	%rbx, %rax
1000183e6:	48 83 c4 08	addq	$8, %rsp
1000183ea:	5b	popq	%rbx
1000183eb:	41 5c	popq	%r12
1000183ed:	41 5d	popq	%r13
1000183ef:	41 5e	popq	%r14
1000183f1:	41 5f	popq	%r15
1000183f3:	5d	popq	%rbp
1000183f4:	c3	retq
1000183f5:	e8 81 80 02 00	callq	0x10004047b
1000183fa:	55	pushq	%rbp
1000183fb:	48 89 e5	movq	%rsp, %rbp
1000183fe:	48 8d 35 1c 00 00 00	leaq	28(%rip), %rsi
100018405:	bf 02 00 00 00	movl	$2, %edi
10001840a:	e8 4b 15 02 00	callq	0x10003995a
10001840f:	48 8d 35 4e 20 00 00	leaq	8270(%rip), %rsi
100018416:	bf 06 00 00 00	movl	$6, %edi
10001841b:	5d	popq	%rbp
10001841c:	e9 39 15 02 00	jmp	0x10003995a
100018421:	55	pushq	%rbp
100018422:	48 89 e5	movq	%rsp, %rbp
100018425:	41 57	pushq	%r15
100018427:	41 56	pushq	%r14
100018429:	41 55	pushq	%r13
10001842b:	41 54	pushq	%r12
10001842d:	53	pushq	%rbx
10001842e:	48 81 ec 28 01 00 00	subq	$296, %rsp
100018435:	49 89 cd	movq	%rcx, %r13
100018438:	49 89 d4	movq	%rdx, %r12
10001843b:	41 89 f6	movl	%esi, %r14d
10001843e:	48 8b 05 e3 fb 03 00	movq	261091(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100018445:	48 8b 00	movq	(%rax), %rax
100018448:	48 89 45 d0	movq	%rax, -48(%rbp)
10001844c:	48 8d 9d 14 ff ff ff	leaq	-236(%rbp), %rbx
100018453:	c7 03 ff ff ff ff	movl	$4294967295, (%rbx)
100018459:	48 89 d7	movq	%rdx, %rdi
10001845c:	48 89 de	movq	%rbx, %rsi
10001845f:	e8 0c 65 00 00	callq	0x10001e970
100018464:	8b 13	movl	(%rbx), %edx
100018466:	83 fa 24	cmpl	$36, %edx
100018469:	75 18	jne	0x100018483
10001846b:	48 8d 35 73 25 03 00	leaq	206195(%rip), %rsi ## literal pool for: "domain deferral"
100018472:	31 db	xorl	%ebx, %ebx
100018474:	4c 89 e7	movq	%r12, %rdi
100018477:	31 c0	xorl	%eax, %eax
100018479:	e8 3b 1c 02 00	callq	0x10003a0b9
10001847e:	e9 45 12 00 00	jmp	0x1000196c8
100018483:	49 89 c7	movq	%rax, %r15
100018486:	48 85 c0	testq	%rax, %rax
100018489:	74 3e	je	0x1000184c9
10001848b:	41 80 bf a0 01 00 00 02	cmpb	$2, 416(%r15)
100018493:	0f 85 2e 01 00 00	jne	0x1000185c7
100018499:	48 8d 15 6b 25 03 00	leaq	206187(%rip), %rdx ## literal pool for: "Deferring IPC (%d) while service is spawning"
1000184a0:	31 db	xorl	%ebx, %ebx
1000184a2:	4c 89 ff	movq	%r15, %rdi
1000184a5:	be 05 00 00 00	movl	$5, %esi
1000184aa:	44 89 f1	movl	%r14d, %ecx
1000184ad:	31 c0	xorl	%eax, %eax
1000184af:	e8 06 db ff ff	callq	0x100015fba
1000184b4:	4c 89 ff	movq	%r15, %rdi
1000184b7:	4c 89 e6	movq	%r12, %rsi
1000184ba:	ba 01 00 00 00	movl	$1, %edx
1000184bf:	e8 24 66 00 00	callq	0x10001eae8
1000184c4:	e9 ff 11 00 00	jmp	0x1000196c8
1000184c9:	48 8d 35 25 25 03 00	leaq	206117(%rip), %rsi ## literal pool for: "no service, code = %d"
1000184d0:	4c 89 e7	movq	%r12, %rdi
1000184d3:	31 c0	xorl	%eax, %eax
1000184d5:	e8 df 1b 02 00	callq	0x10003a0b9
1000184da:	8b 9d 14 ff ff ff	movl	-236(%rbp), %ebx
1000184e0:	41 81 fe c0 02 00 00	cmpl	$704, %r14d
1000184e7:	0f 85 db 11 00 00	jne	0x1000196c8
1000184ed:	4c 89 ad 18 ff ff ff	movq	%r13, -232(%rbp)
1000184f4:	89 d8	movl	%ebx, %eax
1000184f6:	83 e0 fe	andl	$-2, %eax
1000184f9:	83 f8 70	cmpl	$112, %eax
1000184fc:	0f 85 c6 11 00 00	jne	0x1000196c8
100018502:	e8 1d 14 02 00	callq	0x100039924
100018507:	49 89 c5	movq	%rax, %r13
10001850a:	c7 85 f4 fe ff ff ff ff ff ff	movl	$4294967295, -268(%rbp)
100018514:	4c 89 e7	movq	%r12, %rdi
100018517:	e8 08 9b 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10001851c:	84 c0	testb	%al, %al
10001851e:	0f 84 ec 00 00 00	je	0x100018610
100018524:	48 8d 35 d2 16 03 00	leaq	202450(%rip), %rsi ## literal pool for: "name"
10001852b:	4c 89 e7	movq	%r12, %rdi
10001852e:	e8 27 9b 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100018533:	48 85 c0	testq	%rax, %rax
100018536:	0f 84 dd 00 00 00	je	0x100018619
10001853c:	49 89 c6	movq	%rax, %r14
10001853f:	be 0d 00 00 00	movl	$13, %esi
100018544:	4c 89 ef	movq	%r13, %rdi
100018547:	e8 6a 34 ff ff	callq	0x10000b9b6
10001854c:	84 c0	testb	%al, %al
10001854e:	0f 84 e2 00 00 00	je	0x100018636
100018554:	48 8d 35 87 2b 03 00	leaq	207751(%rip), %rsi ## literal pool for: "type"
10001855b:	4c 89 e7	movq	%r12, %rdi
10001855e:	e8 fd 9a 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100018563:	48 89 c3	movq	%rax, %rbx
100018566:	48 8d 35 d9 1b 03 00	leaq	203737(%rip), %rsi ## literal pool for: "handle"
10001856d:	4c 89 e7	movq	%r12, %rdi
100018570:	e8 eb 9a 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100018575:	48 83 fb 05	cmpq	$5, %rbx
100018579:	0f 85 08 01 00 00	jne	0x100018687
10001857f:	48 85 c0	testq	%rax, %rax
100018582:	0f 85 ff 00 00 00	jne	0x100018687
100018588:	48 8d 35 58 2b 03 00	leaq	207704(%rip), %rsi ## literal pool for: "%s: global attachment deferral"
10001858f:	bf 05 00 00 00	movl	$5, %edi
100018594:	4c 89 f2	movq	%r14, %rdx
100018597:	31 c0	xorl	%eax, %eax
100018599:	e8 2a d0 01 00	callq	0x1000355c8
10001859e:	48 8b 1d db a8 04 00	movq	305371(%rip), %rbx
1000185a5:	48 85 db	testq	%rbx, %rbx
1000185a8:	0f 84 d4 0d 00 00	je	0x100019382
1000185ae:	48 8b 7b 10	movq	16(%rbx), %rdi
1000185b2:	4c 89 f6	movq	%r14, %rsi
1000185b5:	e8 72 98 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000185ba:	85 c0	testl	%eax, %eax
1000185bc:	0f 84 75 0d 00 00	je	0x100019337
1000185c2:	48 8b 1b	movq	(%rbx), %rbx
1000185c5:	eb de	jmp	0x1000185a5
1000185c7:	4c 89 ad 18 ff ff ff	movq	%r13, -232(%rbp)
1000185ce:	bb 21 00 00 00	movl	$33, %ebx
1000185d3:	e8 4c 13 02 00	callq	0x100039924
1000185d8:	41 81 c6 44 fd ff ff	addl	$4294966596, %r14d
1000185df:	41 83 fe 17	cmpl	$23, %r14d
1000185e3:	0f 87 df 10 00 00	ja	0x1000196c8
1000185e9:	49 89 c5	movq	%rax, %r13
1000185ec:	48 8d 05 11 1e 00 00	leaq	7697(%rip), %rax
1000185f3:	4a 63 0c b0	movslq	(%rax,%r14,4), %rcx
1000185f7:	48 01 c1	addq	%rax, %rcx
1000185fa:	ff e1	jmpq	*%rcx
1000185fc:	c7 85 14 ff ff ff 2d 00 00 00	movl	$45, -236(%rbp)
100018606:	bb 2d 00 00 00	movl	$45, %ebx
10001860b:	e9 b8 10 00 00	jmp	0x1000196c8
100018610:	48 8d 35 65 2a 03 00	leaq	207461(%rip), %rsi ## literal pool for: "no reply expected, failing"
100018617:	eb 07	jmp	0x100018620
100018619:	48 8d 35 77 2a 03 00	leaq	207479(%rip), %rsi ## literal pool for: "no name, failing"
100018620:	bf 03 00 00 00	movl	$3, %edi
100018625:	31 c0	xorl	%eax, %eax
100018627:	e8 9c cf 01 00	callq	0x1000355c8
10001862c:	bb 16 00 00 00	movl	$22, %ebx
100018631:	e9 92 10 00 00	jmp	0x1000196c8
100018636:	66 0f 6f 05 42 ac 02 00	movdqa	175170(%rip), %xmm0
10001863e:	48 8d b5 20 ff ff ff	leaq	-224(%rbp), %rsi
100018645:	66 0f 7f 46 30	movdqa	%xmm0, 48(%rsi)
10001864a:	66 0f 7f 46 20	movdqa	%xmm0, 32(%rsi)
10001864f:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
100018654:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
100018658:	4c 89 ef	movq	%r13, %rdi
10001865b:	e8 fd c1 01 00	callq	0x10003485d
100018660:	45 8b 45 14	movl	20(%r13), %r8d
100018664:	48 8d 35 3d 2a 03 00	leaq	207421(%rip), %rsi ## literal pool for: "Non-entitled process tried to control service \"%s\": %s.%d"
10001866b:	bf 03 00 00 00	movl	$3, %edi
100018670:	4c 89 f2	movq	%r14, %rdx
100018673:	48 89 c1	movq	%rax, %rcx
100018676:	31 c0	xorl	%eax, %eax
100018678:	e8 4b cf 01 00	callq	0x1000355c8
10001867d:	bb 90 00 00 00	movl	$144, %ebx
100018682:	e9 41 10 00 00	jmp	0x1000196c8
100018687:	4d 85 ff	testq	%r15, %r15
10001868a:	0f 84 44 0c 00 00	je	0x1000192d4
100018690:	49 83 bf f0 00 00 00 00	cmpq	$0, 240(%r15)
100018698:	0f 84 0a 0e 00 00	je	0x1000194a8
10001869e:	c7 85 f4 fe ff ff 16 00 00 00	movl	$22, -268(%rbp)
1000186a8:	bb 16 00 00 00	movl	$22, %ebx
1000186ad:	e9 d8 15 00 00	jmp	0x100019c8a
1000186b2:	48 c7 85 20 ff ff ff 00 00 00 00	movq	$0, -224(%rbp)
1000186bd:	49 63 b7 c8 03 00 00	movslq	968(%r15), %rsi
1000186c4:	bf 08 00 00 22	movl	$570425352, %edi
1000186c9:	e8 01 48 ff ff	callq	0x10000cecf
1000186ce:	49 63 bf c8 03 00 00	movslq	968(%r15), %rdi
1000186d5:	90	nop
1000186d6:	0f 1f 40 00	nopl	(%rax)
1000186da:	41 8b 87 c8 03 00 00	movl	968(%r15), %eax
1000186e1:	bb 01 00 00 00	movl	$1, %ebx
1000186e6:	41 3b 45 14	cmpl	20(%r13), %eax
1000186ea:	0f 85 d8 0f 00 00	jne	0x1000196c8
1000186f0:	49 8b 87 f0 00 00 00	movq	240(%r15), %rax
1000186f7:	48 85 c0	testq	%rax, %rax
1000186fa:	4c 89 f9	movq	%r15, %rcx
1000186fd:	48 0f 45 c8	cmovneq	%rax, %rcx
100018701:	44 8b a9 a4 02 00 00	movl	676(%rcx), %r13d
100018708:	41 8d 45 01	leal	1(%r13), %eax
10001870c:	83 f8 02	cmpl	$2, %eax
10001870f:	0f 82 b6 0c 00 00	jb	0x1000193cb
100018715:	41 f6 87 ea 04 00 00 04	testb	$4, 1258(%r15)
10001871d:	0f 85 a8 0c 00 00	jne	0x1000193cb
100018723:	4c 89 ff	movq	%r15, %rdi
100018726:	4c 89 e6	movq	%r12, %rsi
100018729:	ba 03 00 00 00	movl	$3, %edx
10001872e:	e9 37 17 00 00	jmp	0x100019e6a
100018733:	41 8b 87 c8 03 00 00	movl	968(%r15), %eax
10001873a:	bb 01 00 00 00	movl	$1, %ebx
10001873f:	41 3b 45 14	cmpl	20(%r13), %eax
100018743:	0f 85 7f 0f 00 00	jne	0x1000196c8
100018749:	bb 83 00 00 00	movl	$131, %ebx
10001874e:	41 f6 87 e8 03 00 00 02	testb	$2, 1000(%r15)
100018756:	0f 85 6c 0f 00 00	jne	0x1000196c8
10001875c:	48 8d 35 fe 22 03 00	leaq	205566(%rip), %rsi ## literal pool for: "pc"
100018763:	4c 89 e7	movq	%r12, %rdi
100018766:	e8 f5 98 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10001876b:	48 85 c0	testq	%rax, %rax
10001876e:	0f 84 e0 11 00 00	je	0x100019954
100018774:	48 89 c3	movq	%rax, %rbx
100018777:	48 8d 35 fe 22 03 00	leaq	205566(%rip), %rsi ## literal pool for: "line"
10001877e:	4c 89 e7	movq	%r12, %rdi
100018781:	e8 da 98 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100018786:	48 85 c0	testq	%rax, %rax
100018789:	0f 84 ca 14 00 00	je	0x100019c59
10001878f:	49 89 c5	movq	%rax, %r13
100018792:	48 8d 35 09 23 03 00	leaq	205577(%rip), %rsi ## literal pool for: "uuid"
100018799:	4c 89 e7	movq	%r12, %rdi
10001879c:	e8 c5 98 02 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
1000187a1:	48 85 c0	testq	%rax, %rax
1000187a4:	0f 84 68 16 00 00	je	0x100019e12
1000187aa:	49 89 c6	movq	%rax, %r14
1000187ad:	48 8d 35 13 23 03 00	leaq	205587(%rip), %rsi ## literal pool for: "setup-event"
1000187b4:	4c 89 e7	movq	%r12, %rdi
1000187b7:	e8 7a 98 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000187bc:	88 85 07 ff ff ff	movb	%al, -249(%rbp)
1000187c2:	48 8d 35 0a 23 03 00	leaq	205578(%rip), %rsi ## literal pool for: "string"
1000187c9:	4c 89 e7	movq	%r12, %rdi
1000187cc:	e8 89 98 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000187d1:	48 89 85 c8 fe ff ff	movq	%rax, -312(%rbp)
1000187d8:	48 8d 35 fb 22 03 00	leaq	205563(%rip), %rsi ## literal pool for: "code"
1000187df:	4c 89 e7	movq	%r12, %rdi
1000187e2:	e8 67 98 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
1000187e7:	48 85 c0	testq	%rax, %rax
1000187ea:	0f 84 3c fe ff ff	je	0x10001862c
1000187f0:	48 89 85 08 ff ff ff	movq	%rax, -248(%rbp)
1000187f7:	48 8d 35 e1 22 03 00	leaq	205537(%rip), %rsi ## literal pool for: "subcode"
1000187fe:	4c 89 e7	movq	%r12, %rdi
100018801:	e8 48 98 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100018806:	48 89 85 e8 fe ff ff	movq	%rax, -280(%rbp)
10001880d:	48 8d 05 ce 9f 04 00	leaq	303054(%rip), %rax
100018814:	80 38 00	cmpb	$0, (%rax)
100018817:	74 0c	je	0x100018825
100018819:	48 8d 3d c7 22 03 00	leaq	205511(%rip), %rdi ## literal pool for: "xpcproxy failed"
100018820:	e8 5e bd 01 00	callq	0x100034583
100018825:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10001882f:	48 8d 75 a0	leaq	-96(%rbp), %rsi
100018833:	48 89 46 1d	movq	%rax, 29(%rsi)
100018837:	66 0f 6f 05 41 aa 02 00	movdqa	174657(%rip), %xmm0
10001883f:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
100018844:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
100018848:	4c 89 f7	movq	%r14, %rdi
10001884b:	e8 ae 96 02 00	callq	0x100041efe ## symbol stub for: _uuid_unparse
100018850:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
100018857:	49 83 fe 55	cmpq	$85, %r14
10001885b:	4c 89 ad f8 fe ff ff	movq	%r13, -264(%rbp)
100018862:	48 89 9d d0 fe ff ff	movq	%rbx, -304(%rbp)
100018869:	0f 8f f3 16 00 00	jg	0x100019f62
10001886f:	49 83 fe 2c	cmpq	$44, %r14
100018873:	0f 8e 92 17 00 00	jle	0x10001a00b
100018879:	49 83 fe 2d	cmpq	$45, %r14
10001887d:	0f 84 35 18 00 00	je	0x10001a0b8
100018883:	49 83 fe 50	cmpq	$80, %r14
100018887:	0f 84 7f 18 00 00	je	0x10001a10c
10001888d:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
100018894:	49 83 fe 55	cmpq	$85, %r14
100018898:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
10001889f:	0f 85 86 1a 00 00	jne	0x10001a32b
1000188a5:	48 8d 15 1a 24 03 00	leaq	205850(%rip), %rdx ## literal pool for: "Program specified by service is malformed."
1000188ac:	4c 89 ff	movq	%r15, %rdi
1000188af:	be 03 00 00 00	movl	$3, %esi
1000188b4:	e9 a5 17 00 00	jmp	0x10001a05e
1000188b9:	4c 89 e7	movq	%r12, %rdi
1000188bc:	e8 63 97 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000188c1:	bb 16 00 00 00	movl	$22, %ebx
1000188c6:	84 c0	testb	%al, %al
1000188c8:	0f 84 fa 0d 00 00	je	0x1000196c8
1000188ce:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
1000188d5:	be 03 00 00 00	movl	$3, %esi
1000188da:	31 d2	xorl	%edx, %edx
1000188dc:	4c 89 e9	movq	%r13, %rcx
1000188df:	e8 64 35 01 00	callq	0x10002be48
1000188e4:	85 c0	testl	%eax, %eax
1000188e6:	0f 84 0b 0e 00 00	je	0x1000196f7
1000188ec:	89 c3	movl	%eax, %ebx
1000188ee:	48 8d 0d 56 26 03 00	leaq	206422(%rip), %rcx ## literal pool for: "kickstart service"
1000188f5:	e9 af 03 00 00	jmp	0x100018ca9
1000188fa:	4c 89 e7	movq	%r12, %rdi
1000188fd:	e8 22 97 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018902:	bb 16 00 00 00	movl	$22, %ebx
100018907:	84 c0	testb	%al, %al
100018909:	0f 84 b9 0d 00 00	je	0x1000196c8
10001890f:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
100018916:	be 03 00 00 00	movl	$3, %esi
10001891b:	31 d2	xorl	%edx, %edx
10001891d:	4c 89 e9	movq	%r13, %rcx
100018920:	e8 23 35 01 00	callq	0x10002be48
100018925:	85 c0	testl	%eax, %eax
100018927:	0f 84 5b 0e 00 00	je	0x100019788
10001892d:	89 c3	movl	%eax, %ebx
10001892f:	48 8d 0d 26 27 03 00	leaq	206630(%rip), %rcx ## literal pool for: "kill or attach"
100018936:	e9 6e 03 00 00	jmp	0x100018ca9
10001893b:	4c 89 e7	movq	%r12, %rdi
10001893e:	e8 e1 96 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018943:	bb 16 00 00 00	movl	$22, %ebx
100018948:	84 c0	testb	%al, %al
10001894a:	0f 84 78 0d 00 00	je	0x1000196c8
100018950:	49 8b 87 f0 00 00 00	movq	240(%r15), %rax
100018957:	48 85 c0	testq	%rax, %rax
10001895a:	4c 89 ff	movq	%r15, %rdi
10001895d:	48 0f 45 f8	cmovneq	%rax, %rdi
100018961:	8b 87 a8 02 00 00	movl	680(%rdi), %eax
100018967:	85 c0	testl	%eax, %eax
100018969:	74 12	je	0x10001897d
10001896b:	41 3b 45 14	cmpl	20(%r13), %eax
10001896f:	75 0c	jne	0x10001897d
100018971:	8b 87 ac 02 00 00	movl	684(%rdi), %eax
100018977:	41 3b 45 1c	cmpl	28(%r13), %eax
10001897b:	74 23	je	0x1000189a0
10001897d:	31 f6	xorl	%esi, %esi
10001897f:	31 d2	xorl	%edx, %edx
100018981:	e8 d3 f8 ff ff	callq	0x100018259
100018986:	89 c3	movl	%eax, %ebx
100018988:	85 c0	testl	%eax, %eax
10001898a:	0f 85 38 0d 00 00	jne	0x1000196c8
100018990:	bb 01 00 00 00	movl	$1, %ebx
100018995:	41 83 7d 04 00	cmpl	$0, 4(%r13)
10001899a:	0f 85 28 0d 00 00	jne	0x1000196c8
1000189a0:	bb 25 00 00 00	movl	$37, %ebx
1000189a5:	41 f6 87 ea 04 00 00 04	testb	$4, 1258(%r15)
1000189ad:	0f 85 15 0d 00 00	jne	0x1000196c8
1000189b3:	48 8d 35 f1 14 03 00	leaq	201969(%rip), %rsi ## literal pool for: "program"
1000189ba:	4c 89 e7	movq	%r12, %rdi
1000189bd:	e8 98 96 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000189c2:	48 85 c0	testq	%rax, %rax
1000189c5:	74 0f	je	0x1000189d6
1000189c7:	48 89 c7	movq	%rax, %rdi
1000189ca:	e8 13 66 ff ff	callq	0x10000efe2
1000189cf:	49 89 87 a8 04 00 00	movq	%rax, 1192(%r15)
1000189d6:	48 8d 35 ca 28 03 00	leaq	207050(%rip), %rsi ## literal pool for: "argv"
1000189dd:	4c 89 e7	movq	%r12, %rdi
1000189e0:	e8 87 96 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000189e5:	48 85 c0	testq	%rax, %rax
1000189e8:	74 23	je	0x100018a0d
1000189ea:	48 89 c3	movq	%rax, %rbx
1000189ed:	48 89 c7	movq	%rax, %rdi
1000189f0:	e8 d1 96 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000189f5:	48 3b 05 dc f6 03 00	cmpq	259804(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000189fc:	75 0f	jne	0x100018a0d
1000189fe:	48 89 df	movq	%rbx, %rdi
100018a01:	e8 fc 96 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100018a06:	49 89 87 b0 04 00 00	movq	%rax, 1200(%r15)
100018a0d:	48 8d 35 98 28 03 00	leaq	207000(%rip), %rsi ## literal pool for: "cwd"
100018a14:	4c 89 e7	movq	%r12, %rdi
100018a17:	e8 3e 96 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100018a1c:	48 85 c0	testq	%rax, %rax
100018a1f:	74 0f	je	0x100018a30
100018a21:	48 89 c7	movq	%rax, %rdi
100018a24:	e8 b9 65 ff ff	callq	0x10000efe2
100018a29:	49 89 87 b8 04 00 00	movq	%rax, 1208(%r15)
100018a30:	48 8d 35 79 28 03 00	leaq	206969(%rip), %rsi ## literal pool for: "environment"
100018a37:	4c 89 e7	movq	%r12, %rdi
100018a3a:	e8 2d 96 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100018a3f:	48 85 c0	testq	%rax, %rax
100018a42:	4c 8b b5 18 ff ff ff	movq	-232(%rbp), %r14
100018a49:	74 23	je	0x100018a6e
100018a4b:	48 89 c3	movq	%rax, %rbx
100018a4e:	48 89 c7	movq	%rax, %rdi
100018a51:	e8 70 96 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100018a56:	48 3b 05 a3 f6 03 00	cmpq	259747(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100018a5d:	75 0f	jne	0x100018a6e
100018a5f:	48 89 df	movq	%rbx, %rdi
100018a62:	e8 9b 96 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100018a67:	49 89 87 c0 04 00 00	movq	%rax, 1216(%r15)
100018a6e:	48 8d 35 47 28 03 00	leaq	206919(%rip), %rsi ## literal pool for: "binpref"
100018a75:	4c 89 e7	movq	%r12, %rdi
100018a78:	e8 d1 95 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100018a7d:	48 89 c3	movq	%rax, %rbx
100018a80:	85 db	testl	%ebx, %ebx
100018a82:	74 1b	je	0x100018a9f
100018a84:	e8 f7 8e fe ff	callq	0x100001980
100018a89:	49 89 87 c8 04 00 00	movq	%rax, 1224(%r15)
100018a90:	48 89 c7	movq	%rax, %rdi
100018a93:	89 de	movl	%ebx, %esi
100018a95:	ba ff ff ff ff	movl	$4294967295, %edx
100018a9a:	e8 28 8f fe ff	callq	0x1000019c7
100018a9f:	48 8d 35 b7 1f 03 00	leaq	204727(%rip), %rsi ## literal pool for: "fds"
100018aa6:	4c 89 e7	movq	%r12, %rdi
100018aa9:	e8 be 95 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100018aae:	48 85 c0	testq	%rax, %rax
100018ab1:	74 23	je	0x100018ad6
100018ab3:	48 89 c3	movq	%rax, %rbx
100018ab6:	48 89 c7	movq	%rax, %rdi
100018ab9:	e8 08 96 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100018abe:	48 3b 05 13 f6 03 00	cmpq	259603(%rip), %rax ## literal pool symbol address: __xpc_type_array
100018ac5:	75 0f	jne	0x100018ad6
100018ac7:	48 89 df	movq	%rbx, %rdi
100018aca:	e8 33 96 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100018acf:	49 89 87 d8 04 00 00	movq	%rax, 1240(%r15)
100018ad6:	48 8d 35 e7 27 03 00	leaq	206823(%rip), %rsi ## literal pool for: "endpoint"
100018add:	4c 89 e7	movq	%r12, %rdi
100018ae0:	e8 e7 8c 02 00	callq	0x1000417cc ## symbol stub for: __xpc_dictionary_extract_mach_send
100018ae5:	85 c0	testl	%eax, %eax
100018ae7:	74 19	je	0x100018b02
100018ae9:	41 8b 8f 04 05 00 00	movl	1284(%r15), %ecx
100018af0:	ff c1	incl	%ecx
100018af2:	83 f9 02	cmpl	$2, %ecx
100018af5:	0f 83 df 14 00 00	jae	0x100019fda
100018afb:	41 89 87 d0 04 00 00	movl	%eax, 1232(%r15)
100018b02:	48 8d 35 14 28 03 00	leaq	206868(%rip), %rsi ## literal pool for: "jetsam-flags"
100018b09:	4c 89 e7	movq	%r12, %rdi
100018b0c:	e8 3d 95 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100018b11:	66 85 c0	testw	%ax, %ax
100018b14:	74 08	je	0x100018b1e
100018b16:	66 41 89 87 e8 04 00 00	movw	%ax, 1256(%r15)
100018b1e:	48 8d 35 05 28 03 00	leaq	206853(%rip), %rsi ## literal pool for: "jetsam-priority"
100018b25:	4c 89 e7	movq	%r12, %rdi
100018b28:	e8 21 95 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100018b2d:	85 c0	testl	%eax, %eax
100018b2f:	7e 07	jle	0x100018b38
100018b31:	41 89 87 e0 04 00 00	movl	%eax, 1248(%r15)
100018b38:	48 8d 35 fb 27 03 00	leaq	206843(%rip), %rsi ## literal pool for: "jetsam-memlimit"
100018b3f:	4c 89 e7	movq	%r12, %rdi
100018b42:	e8 07 95 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100018b47:	85 c0	testl	%eax, %eax
100018b49:	74 07	je	0x100018b52
100018b4b:	41 89 87 e4 04 00 00	movl	%eax, 1252(%r15)
100018b52:	48 8d 35 f1 27 03 00	leaq	206833(%rip), %rsi ## literal pool for: "nano-allocator"
100018b59:	4c 89 e7	movq	%r12, %rdi
100018b5c:	e8 d5 94 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100018b61:	41 8a 8f ea 04 00 00	movb	1258(%r15), %cl
100018b68:	84 c0	testb	%al, %al
100018b6a:	74 0a	je	0x100018b76
100018b6c:	80 c9 10	orb	$16, %cl
100018b6f:	41 88 8f ea 04 00 00	movb	%cl, 1258(%r15)
100018b76:	f6 c1 01	testb	$1, %cl
100018b79:	75 1b	jne	0x100018b96
100018b7b:	48 8d 35 e6 23 03 00	leaq	205798(%rip), %rsi ## literal pool for: "suspended"
100018b82:	4c 89 e7	movq	%r12, %rdi
100018b85:	e8 ac 94 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100018b8a:	41 8a 8f ea 04 00 00	movb	1258(%r15), %cl
100018b91:	80 e1 fe	andb	$-2, %cl
100018b94:	08 c1	orb	%al, %cl
100018b96:	80 c9 04	orb	$4, %cl
100018b99:	41 88 8f ea 04 00 00	movb	%cl, 1258(%r15)
100018ba0:	31 db	xorl	%ebx, %ebx
100018ba2:	4c 89 ff	movq	%r15, %rdi
100018ba5:	be 03 00 00 00	movl	$3, %esi
100018baa:	31 d2	xorl	%edx, %edx
100018bac:	e8 fa d2 ff ff	callq	0x100015eab
100018bb1:	4c 89 e7	movq	%r12, %rdi
100018bb4:	e8 65 94 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100018bb9:	49 89 06	movq	%rax, (%r14)
100018bbc:	e9 07 0b 00 00	jmp	0x1000196c8
100018bc1:	4c 89 e7	movq	%r12, %rdi
100018bc4:	e8 5b 94 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018bc9:	bb 16 00 00 00	movl	$22, %ebx
100018bce:	84 c0	testb	%al, %al
100018bd0:	0f 84 f2 0a 00 00	je	0x1000196c8
100018bd6:	41 8b 87 a8 02 00 00	movl	680(%r15), %eax
100018bdd:	bb 01 00 00 00	movl	$1, %ebx
100018be2:	85 c0	testl	%eax, %eax
100018be4:	0f 84 de 0a 00 00	je	0x1000196c8
100018bea:	41 3b 45 14	cmpl	20(%r13), %eax
100018bee:	0f 85 d4 0a 00 00	jne	0x1000196c8
100018bf4:	41 8b 87 ac 02 00 00	movl	684(%r15), %eax
100018bfb:	41 3b 45 1c	cmpl	28(%r13), %eax
100018bff:	0f 85 c3 0a 00 00	jne	0x1000196c8
100018c05:	4c 89 ff	movq	%r15, %rdi
100018c08:	e8 12 61 00 00	callq	0x10001ed1f
100018c0d:	e9 b2 07 00 00	jmp	0x1000193c4
100018c12:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
100018c19:	be 04 00 00 00	movl	$4, %esi
100018c1e:	31 d2	xorl	%edx, %edx
100018c20:	4c 89 e9	movq	%r13, %rcx
100018c23:	e8 20 32 01 00	callq	0x10002be48
100018c28:	85 c0	testl	%eax, %eax
100018c2a:	0f 84 d0 07 00 00	je	0x100019400
100018c30:	89 c3	movl	%eax, %ebx
100018c32:	48 8d 0d 20 27 03 00	leaq	206624(%rip), %rcx ## literal pool for: "service blame"
100018c39:	eb 6e	jmp	0x100018ca9
100018c3b:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
100018c42:	be 04 00 00 00	movl	$4, %esi
100018c47:	31 d2	xorl	%edx, %edx
100018c49:	4c 89 e9	movq	%r13, %rcx
100018c4c:	e8 f7 31 01 00	callq	0x10002be48
100018c51:	85 c0	testl	%eax, %eax
100018c53:	0f 84 06 08 00 00	je	0x10001945f
100018c59:	89 c3	movl	%eax, %ebx
100018c5b:	48 8d 0d 0c 27 03 00	leaq	206604(%rip), %rcx ## literal pool for: "service print"
100018c62:	eb 45	jmp	0x100018ca9
100018c64:	48 8d 05 a0 9b 04 00	leaq	301984(%rip), %rax
100018c6b:	80 38 00	cmpb	$0, (%rax)
100018c6e:	0f 84 92 f9 ff ff	je	0x100018606
100018c74:	49 83 bf f0 04 00 00 00	cmpq	$0, 1264(%r15)
100018c7c:	0f 84 6e 0a 00 00	je	0x1000196f0
100018c82:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
100018c89:	be 04 00 00 00	movl	$4, %esi
100018c8e:	31 d2	xorl	%edx, %edx
100018c90:	4c 89 e9	movq	%r13, %rcx
100018c93:	e8 b0 31 01 00	callq	0x10002be48
100018c98:	85 c0	testl	%eax, %eax
100018c9a:	0f 84 c6 0b 00 00	je	0x100019866
100018ca0:	89 c3	movl	%eax, %ebx
100018ca2:	48 8d 0d 2d 27 03 00	leaq	206637(%rip), %rcx ## literal pool for: "collect service stats"
100018ca9:	4c 89 ff	movq	%r15, %rdi
100018cac:	4c 89 ee	movq	%r13, %rsi
100018caf:	89 da	movl	%ebx, %edx
100018cb1:	e8 8d 5e 00 00	callq	0x10001eb43
100018cb6:	e9 0d 0a 00 00	jmp	0x1000196c8
100018cbb:	4d 8b b7 e8 00 00 00	movq	232(%r15), %r14
100018cc2:	4c 89 f7	movq	%r14, %rdi
100018cc5:	e8 92 24 01 00	callq	0x10002b15c
100018cca:	bb 7d 00 00 00	movl	$125, %ebx
100018ccf:	48 3b 05 ba f3 03 00	cmpq	259002(%rip), %rax
100018cd6:	0f 85 ec 09 00 00	jne	0x1000196c8
100018cdc:	4c 89 f7	movq	%r14, %rdi
100018cdf:	e8 82 24 01 00	callq	0x10002b166
100018ce4:	49 63 4d 14	movslq	20(%r13), %rcx
100018ce8:	bb 01 00 00 00	movl	$1, %ebx
100018ced:	48 39 c8	cmpq	%rcx, %rax
100018cf0:	0f 85 d2 09 00 00	jne	0x1000196c8
100018cf6:	4c 89 e7	movq	%r12, %rdi
100018cf9:	e8 26 93 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018cfe:	bb 16 00 00 00	movl	$22, %ebx
100018d03:	84 c0	testb	%al, %al
100018d05:	0f 84 bd 09 00 00	je	0x1000196c8
100018d0b:	48 8d 35 df 26 03 00	leaq	206559(%rip), %rsi ## literal pool for: "bootstrap"
100018d12:	4c 89 e7	movq	%r12, %rdi
100018d15:	e8 52 93 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100018d1a:	48 89 c3	movq	%rax, %rbx
100018d1d:	49 8b bf 70 02 00 00	movq	624(%r15), %rdi
100018d24:	48 85 ff	testq	%rdi, %rdi
100018d27:	74 10	je	0x100018d39
100018d29:	e8 ce 93 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100018d2e:	49 c7 87 70 02 00 00 00 00 00 00	movq	$0, 624(%r15)
100018d39:	48 85 db	testq	%rbx, %rbx
100018d3c:	4c 8b b5 18 ff ff ff	movq	-232(%rbp), %r14
100018d43:	74 0f	je	0x100018d54
100018d45:	48 89 df	movq	%rbx, %rdi
100018d48:	e8 b5 93 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100018d4d:	49 89 87 70 02 00 00	movq	%rax, 624(%r15)
100018d54:	4c 89 e7	movq	%r12, %rdi
100018d57:	e8 c2 92 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100018d5c:	49 89 06	movq	%rax, (%r14)
100018d5f:	e9 60 06 00 00	jmp	0x1000193c4
100018d64:	4d 8b b7 e8 00 00 00	movq	232(%r15), %r14
100018d6b:	4c 89 f7	movq	%r14, %rdi
100018d6e:	e8 e9 23 01 00	callq	0x10002b15c
100018d73:	bb 7d 00 00 00	movl	$125, %ebx
100018d78:	48 3b 05 11 f3 03 00	cmpq	258833(%rip), %rax
100018d7f:	0f 85 43 09 00 00	jne	0x1000196c8
100018d85:	41 8b 87 c8 03 00 00	movl	968(%r15), %eax
100018d8c:	bb 01 00 00 00	movl	$1, %ebx
100018d91:	41 3b 45 14	cmpl	20(%r13), %eax
100018d95:	0f 85 2d 09 00 00	jne	0x1000196c8
100018d9b:	4c 89 e7	movq	%r12, %rdi
100018d9e:	e8 81 92 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018da3:	bb 16 00 00 00	movl	$22, %ebx
100018da8:	84 c0	testb	%al, %al
100018daa:	0f 84 18 09 00 00	je	0x1000196c8
100018db0:	49 8b 87 f0 00 00 00	movq	240(%r15), %rax
100018db7:	48 85 c0	testq	%rax, %rax
100018dba:	4c 0f 45 f8	cmovneq	%rax, %r15
100018dbe:	49 8b 9f 70 02 00 00	movq	624(%r15), %rbx
100018dc5:	4c 89 e7	movq	%r12, %rdi
100018dc8:	e8 51 92 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100018dcd:	49 89 c7	movq	%rax, %r15
100018dd0:	48 85 db	testq	%rbx, %rbx
100018dd3:	74 12	je	0x100018de7
100018dd5:	48 8d 35 15 26 03 00	leaq	206357(%rip), %rsi ## literal pool for: "bootstrap"
100018ddc:	4c 89 ff	movq	%r15, %rdi
100018ddf:	48 89 da	movq	%rbx, %rdx
100018de2:	e8 c7 92 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100018de7:	66 0f 6f 05 91 a4 02 00	movdqa	173201(%rip), %xmm0
100018def:	48 8d 9d 20 ff ff ff	leaq	-224(%rbp), %rbx
100018df6:	66 0f 7f 43 10	movdqa	%xmm0, 16(%rbx)
100018dfb:	66 0f 7f 03	movdqa	%xmm0, (%rbx)
100018dff:	4c 89 f7	movq	%r14, %rdi
100018e02:	48 89 de	movq	%rbx, %rsi
100018e05:	e8 e9 25 01 00	callq	0x10002b3f3
100018e0a:	48 8d 35 ea 25 03 00	leaq	206314(%rip), %rsi ## literal pool for: "creator"
100018e11:	b9 20 00 00 00	movl	$32, %ecx
100018e16:	4c 89 ff	movq	%r15, %rdi
100018e19:	48 89 da	movq	%rbx, %rdx
100018e1c:	e8 5d 92 02 00	callq	0x10004207e ## symbol stub for: _xpc_dictionary_set_data
100018e21:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100018e28:	4c 89 38	movq	%r15, (%rax)
100018e2b:	e9 94 05 00 00	jmp	0x1000193c4
100018e30:	4c 89 e7	movq	%r12, %rdi
100018e33:	e8 ec 91 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018e38:	bb 16 00 00 00	movl	$22, %ebx
100018e3d:	84 c0	testb	%al, %al
100018e3f:	0f 84 83 08 00 00	je	0x1000196c8
100018e45:	bb 71 00 00 00	movl	$113, %ebx
100018e4a:	41 83 bf 18 01 00 00 00	cmpl	$0, 280(%r15)
100018e52:	0f 85 70 08 00 00	jne	0x1000196c8
100018e58:	4c 89 e7	movq	%r12, %rdi
100018e5b:	e8 be 91 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100018e60:	49 89 c6	movq	%rax, %r14
100018e63:	4c 89 ff	movq	%r15, %rdi
100018e66:	e8 59 2c 00 00	callq	0x10001bac4
100018e6b:	48 89 c3	movq	%rax, %rbx
100018e6e:	48 8d 35 8e 25 03 00	leaq	206222(%rip), %rsi ## literal pool for: "attrs"
100018e75:	4c 89 f7	movq	%r14, %rdi
100018e78:	48 89 c2	movq	%rax, %rdx
100018e7b:	e8 2e 92 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100018e80:	48 89 df	movq	%rbx, %rdi
100018e83:	e8 74 92 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100018e88:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100018e8f:	4c 89 30	movq	%r14, (%rax)
100018e92:	e9 2d 05 00 00	jmp	0x1000193c4
100018e97:	48 8d 35 6b 25 03 00	leaq	206187(%rip), %rsi ## literal pool for: "yesno"
100018e9e:	4c 89 e7	movq	%r12, %rdi
100018ea1:	e8 90 91 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100018ea6:	41 89 c6	movl	%eax, %r14d
100018ea9:	4c 89 e7	movq	%r12, %rdi
100018eac:	e8 73 91 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018eb1:	bb 16 00 00 00	movl	$22, %ebx
100018eb6:	84 c0	testb	%al, %al
100018eb8:	0f 84 04 08 00 00	je	0x1000196c2
100018ebe:	41 8b 87 c8 03 00 00	movl	968(%r15), %eax
100018ec5:	bb 01 00 00 00	movl	$1, %ebx
100018eca:	41 3b 45 14	cmpl	20(%r13), %eax
100018ece:	0f 85 ee 07 00 00	jne	0x1000196c2
100018ed4:	49 8b 87 e8 02 00 00	movq	744(%r15), %rax
100018edb:	45 84 f6	testb	%r14b, %r14b
100018ede:	0f 84 bb 09 00 00	je	0x10001989f
100018ee4:	48 85 c0	testq	%rax, %rax
100018ee7:	48 8b 9d 18 ff ff ff	movq	-232(%rbp), %rbx
100018eee:	0f 84 9a 0e 00 00	je	0x100019d8e
100018ef4:	48 8d 15 14 25 03 00	leaq	206100(%rip), %rdx ## literal pool for: "extension already attempting clean exit"
100018efb:	4c 89 ff	movq	%r15, %rdi
100018efe:	be 05 00 00 00	movl	$5, %esi
100018f03:	31 c0	xorl	%eax, %eax
100018f05:	e8 b0 d0 ff ff	callq	0x100015fba
100018f0a:	bb 24 00 00 00	movl	$36, %ebx
100018f0f:	e9 ae 07 00 00	jmp	0x1000196c2
100018f14:	bb 89 00 00 00	movl	$137, %ebx
100018f19:	49 0f ba a7 0d 05 00 00 26	btq	$38, 1293(%r15)
100018f22:	0f 83 9a 07 00 00	jae	0x1000196c2
100018f28:	41 8b 45 14	movl	20(%r13), %eax
100018f2c:	bb 01 00 00 00	movl	$1, %ebx
100018f31:	41 3b 87 c8 03 00 00	cmpl	968(%r15), %eax
100018f38:	0f 85 84 07 00 00	jne	0x1000196c2
100018f3e:	4c 89 e7	movq	%r12, %rdi
100018f41:	e8 de 90 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018f46:	bb 16 00 00 00	movl	$22, %ebx
100018f4b:	84 c0	testb	%al, %al
100018f4d:	0f 84 6f 07 00 00	je	0x1000196c2
100018f53:	49 83 bf f0 02 00 00 00	cmpq	$0, 752(%r15)
100018f5b:	0f 84 91 0e 00 00	je	0x100019df2
100018f61:	48 8d 15 40 26 03 00	leaq	206400(%rip), %rdx ## literal pool for: "extension checked in as alive"
100018f68:	31 db	xorl	%ebx, %ebx
100018f6a:	4c 89 ff	movq	%r15, %rdi
100018f6d:	be 05 00 00 00	movl	$5, %esi
100018f72:	31 c0	xorl	%eax, %eax
100018f74:	e8 41 d0 ff ff	callq	0x100015fba
100018f79:	4c 89 ff	movq	%r15, %rdi
100018f7c:	be 24 00 00 00	movl	$36, %esi
100018f81:	e8 04 9d ff ff	callq	0x100012c8a
100018f86:	49 8b bf f0 02 00 00	movq	752(%r15), %rdi
100018f8d:	e8 ea 89 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100018f92:	49 8b bf f0 02 00 00	movq	752(%r15), %rdi
100018f99:	e8 ba 89 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100018f9e:	49 c7 87 f0 02 00 00 00 00 00 00	movq	$0, 752(%r15)
100018fa9:	41 80 8f e8 03 00 00 40	orb	$64, 1000(%r15)
100018fb1:	e9 87 09 00 00	jmp	0x10001993d
100018fb6:	4c 89 e7	movq	%r12, %rdi
100018fb9:	e8 66 90 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100018fbe:	bb 16 00 00 00	movl	$22, %ebx
100018fc3:	84 c0	testb	%al, %al
100018fc5:	0f 84 f7 06 00 00	je	0x1000196c2
100018fcb:	be 15 00 00 00	movl	$21, %esi
100018fd0:	4c 89 ef	movq	%r13, %rdi
100018fd3:	e8 de 29 ff ff	callq	0x10000b9b6
100018fd8:	bb 90 00 00 00	movl	$144, %ebx
100018fdd:	84 c0	testb	%al, %al
100018fdf:	0f 84 dd 06 00 00	je	0x1000196c2
100018fe5:	bb 25 00 00 00	movl	$37, %ebx
100018fea:	49 83 bf b8 02 00 00 00	cmpq	$0, 696(%r15)
100018ff2:	0f 85 ca 06 00 00	jne	0x1000196c2
100018ff8:	48 8d 35 e4 21 03 00	leaq	205284(%rip), %rsi ## literal pool for: "port"
100018fff:	4c 89 e7	movq	%r12, %rdi
100019002:	e8 c5 87 02 00	callq	0x1000417cc ## symbol stub for: __xpc_dictionary_extract_mach_send
100019007:	8d 48 01	leal	1(%rax), %ecx
10001900a:	83 f9 01	cmpl	$1, %ecx
10001900d:	0f 86 a9 0d 00 00	jbe	0x100019dbc
100019013:	89 c3	movl	%eax, %ebx
100019015:	e8 e0 54 ff ff	callq	0x10000e4fa
10001901a:	48 8b 3d 37 f0 03 00	movq	258103(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_send
100019021:	ba 01 00 00 00	movl	$1, %edx
100019026:	48 89 de	movq	%rbx, %rsi
100019029:	48 89 c1	movq	%rax, %rcx
10001902c:	e8 51 89 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100019031:	49 89 87 b8 02 00 00	movq	%rax, 696(%r15)
100019038:	48 89 c7	movq	%rax, %rdi
10001903b:	4c 89 fe	movq	%r15, %rsi
10001903e:	e8 33 89 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100019043:	49 8b bf b8 02 00 00	movq	696(%r15), %rdi
10001904a:	48 8d 35 37 5e 00 00	leaq	24119(%rip), %rsi
100019051:	e8 50 89 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100019056:	49 8b bf b8 02 00 00	movq	696(%r15), %rdi
10001905d:	48 8d 35 97 5e 00 00	leaq	24215(%rip), %rsi
100019064:	e8 49 89 02 00	callq	0x1000419b2 ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler_f
100019069:	49 8b bf b8 02 00 00	movq	696(%r15), %rdi
100019070:	e8 4d 88 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100019075:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
10001907c:	4c 89 fe	movq	%r15, %rsi
10001907f:	e8 6d 26 01 00	callq	0x10002b6f1
100019084:	4c 89 e7	movq	%r12, %rdi
100019087:	e8 92 8f 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001908c:	48 8b 8d 18 ff ff ff	movq	-232(%rbp), %rcx
100019093:	48 89 01	movq	%rax, (%rcx)
100019096:	e9 25 06 00 00	jmp	0x1000196c0
10001909b:	41 8b 87 c8 03 00 00	movl	968(%r15), %eax
1000190a2:	bb 01 00 00 00	movl	$1, %ebx
1000190a7:	41 3b 45 14	cmpl	20(%r13), %eax
1000190ab:	0f 85 11 06 00 00	jne	0x1000196c2
1000190b1:	4c 89 e7	movq	%r12, %rdi
1000190b4:	e8 6b 8f 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000190b9:	bb 16 00 00 00	movl	$22, %ebx
1000190be:	84 c0	testb	%al, %al
1000190c0:	0f 84 fc 05 00 00	je	0x1000196c2
1000190c6:	49 8b 87 f0 00 00 00	movq	240(%r15), %rax
1000190cd:	48 85 c0	testq	%rax, %rax
1000190d0:	4c 89 f9	movq	%r15, %rcx
1000190d3:	48 0f 45 c8	cmovneq	%rax, %rcx
1000190d7:	4c 8b b1 78 02 00 00	movq	632(%rcx), %r14
1000190de:	4c 89 e7	movq	%r12, %rdi
1000190e1:	e8 38 8f 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000190e6:	48 89 c3	movq	%rax, %rbx
1000190e9:	4d 85 f6	testq	%r14, %r14
1000190ec:	74 6e	je	0x10001915c
1000190ee:	48 8d 35 fe 24 03 00	leaq	206078(%rip), %rsi ## literal pool for: "xpcservice-dict"
1000190f5:	48 89 df	movq	%rbx, %rdi
1000190f8:	4c 89 f2	movq	%r14, %rdx
1000190fb:	e8 ae 8f 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100019100:	49 8b 97 38 02 00 00	movq	568(%r15), %rdx
100019107:	48 8d 35 f5 24 03 00	leaq	206069(%rip), %rsi ## literal pool for: "identifier"
10001910e:	48 89 df	movq	%rbx, %rdi
100019111:	e8 86 8f 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100019116:	eb 44	jmp	0x10001915c
100019118:	4c 89 e7	movq	%r12, %rdi
10001911b:	e8 04 8f 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100019120:	bb 16 00 00 00	movl	$22, %ebx
100019125:	84 c0	testb	%al, %al
100019127:	0f 84 95 05 00 00	je	0x1000196c2
10001912d:	4c 89 e7	movq	%r12, %rdi
100019130:	e8 e9 8e 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019135:	48 89 c3	movq	%rax, %rbx
100019138:	49 0f ba a7 0d 05 00 00 30	btq	$48, 1293(%r15)
100019141:	73 19	jae	0x10001915c
100019143:	49 81 c7 90 01 00 00	addq	$400, %r15
10001914a:	48 8d 35 2f 0d 03 00	leaq	199983(%rip), %rsi ## literal pool for: "instance"
100019151:	48 89 df	movq	%rbx, %rdi
100019154:	4c 89 fa	movq	%r15, %rdx
100019157:	e8 4c 8f 02 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
10001915c:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100019163:	48 89 18	movq	%rbx, (%rax)
100019166:	e9 55 05 00 00	jmp	0x1000196c0
10001916b:	4c 89 e7	movq	%r12, %rdi
10001916e:	e8 b1 8e 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100019173:	bb 16 00 00 00	movl	$22, %ebx
100019178:	84 c0	testb	%al, %al
10001917a:	0f 84 42 05 00 00	je	0x1000196c2
100019180:	48 8d 35 f9 0c 03 00	leaq	199929(%rip), %rsi ## literal pool for: "instance"
100019187:	4c 89 e7	movq	%r12, %rdi
10001918a:	e8 d7 8e 02 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
10001918f:	48 85 c0	testq	%rax, %rax
100019192:	0f 84 2a 05 00 00	je	0x1000196c2
100019198:	49 89 c6	movq	%rax, %r14
10001919b:	be 1c 00 00 00	movl	$28, %esi
1000191a0:	4c 89 ef	movq	%r13, %rdi
1000191a3:	e8 0e 28 ff ff	callq	0x10000b9b6
1000191a8:	bb 90 00 00 00	movl	$144, %ebx
1000191ad:	84 c0	testb	%al, %al
1000191af:	0f 84 0d 05 00 00	je	0x1000196c2
1000191b5:	49 8b 9f b8 00 00 00	movq	184(%r15), %rbx
1000191bc:	48 85 db	testq	%rbx, %rbx
1000191bf:	0f 84 43 07 00 00	je	0x100019908
1000191c5:	48 8d b3 90 01 00 00	leaq	400(%rbx), %rsi
1000191cc:	4c 89 f7	movq	%r14, %rdi
1000191cf:	e8 18 8d 02 00	callq	0x100041eec ## symbol stub for: _uuid_compare
1000191d4:	85 c0	testl	%eax, %eax
1000191d6:	0f 84 16 0c 00 00	je	0x100019df2
1000191dc:	48 8b 5b 18	movq	24(%rbx), %rbx
1000191e0:	eb da	jmp	0x1000191bc
1000191e2:	4c 89 e7	movq	%r12, %rdi
1000191e5:	e8 3a 8e 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000191ea:	bb 16 00 00 00	movl	$22, %ebx
1000191ef:	84 c0	testb	%al, %al
1000191f1:	0f 84 cb 04 00 00	je	0x1000196c2
1000191f7:	48 8d 35 82 0c 03 00	leaq	199810(%rip), %rsi ## literal pool for: "instance"
1000191fe:	4c 89 e7	movq	%r12, %rdi
100019201:	e8 60 8e 02 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
100019206:	48 89 85 08 ff ff ff	movq	%rax, -248(%rbp)
10001920d:	48 85 c0	testq	%rax, %rax
100019210:	0f 84 ac 04 00 00	je	0x1000196c2
100019216:	be 1c 00 00 00	movl	$28, %esi
10001921b:	4c 89 ef	movq	%r13, %rdi
10001921e:	e8 93 27 ff ff	callq	0x10000b9b6
100019223:	bb 90 00 00 00	movl	$144, %ebx
100019228:	84 c0	testb	%al, %al
10001922a:	0f 84 92 04 00 00	je	0x1000196c2
100019230:	4d 8b b7 b8 00 00 00	movq	184(%r15), %r14
100019237:	bb 71 00 00 00	movl	$113, %ebx
10001923c:	4d 85 f6	testq	%r14, %r14
10001923f:	0f 84 7d 04 00 00	je	0x1000196c2
100019245:	4c 8b bd 08 ff ff ff	movq	-248(%rbp), %r15
10001924c:	49 8d b6 90 01 00 00	leaq	400(%r14), %rsi
100019253:	4c 89 ff	movq	%r15, %rdi
100019256:	e8 91 8c 02 00	callq	0x100041eec ## symbol stub for: _uuid_compare
10001925b:	85 c0	testl	%eax, %eax
10001925d:	0f 84 c8 0a 00 00	je	0x100019d2b
100019263:	4d 8b 76 18	movq	24(%r14), %r14
100019267:	4d 85 f6	testq	%r14, %r14
10001926a:	75 e0	jne	0x10001924c
10001926c:	e9 51 04 00 00	jmp	0x1000196c2
100019271:	4c 89 e7	movq	%r12, %rdi
100019274:	e8 ab 8d 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100019279:	bb 16 00 00 00	movl	$22, %ebx
10001927e:	84 c0	testb	%al, %al
100019280:	0f 84 3c 04 00 00	je	0x1000196c2
100019286:	be 1c 00 00 00	movl	$28, %esi
10001928b:	4c 89 ef	movq	%r13, %rdi
10001928e:	e8 23 27 ff ff	callq	0x10000b9b6
100019293:	bb 90 00 00 00	movl	$144, %ebx
100019298:	84 c0	testb	%al, %al
10001929a:	0f 84 22 04 00 00	je	0x1000196c2
1000192a0:	e8 a1 8c 02 00	callq	0x100041f46 ## symbol stub for: _xpc_array_create_empty
1000192a5:	49 89 c5	movq	%rax, %r13
1000192a8:	49 8b 9f b8 00 00 00	movq	184(%r15), %rbx
1000192af:	48 85 db	testq	%rbx, %rbx
1000192b2:	0f 84 d9 03 00 00	je	0x100019691
1000192b8:	48 8d 93 90 01 00 00	leaq	400(%rbx), %rdx
1000192bf:	4c 89 ef	movq	%r13, %rdi
1000192c2:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
1000192c9:	e8 b4 8c 02 00	callq	0x100041f82 ## symbol stub for: _xpc_array_set_uuid
1000192ce:	48 8b 5b 18	movq	24(%rbx), %rbx
1000192d2:	eb db	jmp	0x1000192af
1000192d4:	48 8d 35 54 1e 03 00	leaq	204372(%rip), %rsi ## literal pool for: "%s: domain attachment deferral"
1000192db:	bf 05 00 00 00	movl	$5, %edi
1000192e0:	4c 89 f2	movq	%r14, %rdx
1000192e3:	31 c0	xorl	%eax, %eax
1000192e5:	e8 de c2 01 00	callq	0x1000355c8
1000192ea:	48 8d 95 f4 fe ff ff	leaq	-268(%rbp), %rdx
1000192f1:	4c 89 e7	movq	%r12, %rdi
1000192f4:	be 01 00 00 00	movl	$1, %esi
1000192f9:	e8 20 1d 01 00	callq	0x10002b01e
1000192fe:	48 85 c0	testq	%rax, %rax
100019301:	0f 84 3e 05 00 00	je	0x100019845
100019307:	49 89 c7	movq	%rax, %r15
10001930a:	49 89 c5	movq	%rax, %r13
10001930d:	49 83 c5 28	addq	$40, %r13
100019311:	48 8b 58 28	movq	40(%rax), %rbx
100019315:	48 85 db	testq	%rbx, %rbx
100019318:	0f 84 ba 08 00 00	je	0x100019bd8
10001931e:	48 8b 7b 10	movq	16(%rbx), %rdi
100019322:	4c 89 f6	movq	%r14, %rsi
100019325:	e8 02 8b 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
10001932a:	85 c0	testl	%eax, %eax
10001932c:	0f 84 58 08 00 00	je	0x100019b8a
100019332:	48 8b 1b	movq	(%rbx), %rbx
100019335:	eb de	jmp	0x100019315
100019337:	48 8d 35 c8 1d 03 00	leaq	204232(%rip), %rsi ## literal pool for: "canceling old global attachment deferral"
10001933e:	bf 05 00 00 00	movl	$5, %edi
100019343:	31 c0	xorl	%eax, %eax
100019345:	e8 7e c2 01 00	callq	0x1000355c8
10001934a:	48 89 df	movq	%rbx, %rdi
10001934d:	e8 7a 59 00 00	callq	0x10001eccc
100019352:	48 8b 03	movq	(%rbx), %rax
100019355:	48 85 c0	testq	%rax, %rax
100019358:	74 08	je	0x100019362
10001935a:	48 8b 4b 08	movq	8(%rbx), %rcx
10001935e:	48 89 48 08	movq	%rcx, 8(%rax)
100019362:	48 8b 4b 08	movq	8(%rbx), %rcx
100019366:	48 89 01	movq	%rax, (%rcx)
100019369:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10001936d:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
100019371:	48 8b 7b 18	movq	24(%rbx), %rdi
100019375:	e8 82 8d 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001937a:	48 89 df	movq	%rbx, %rdi
10001937d:	e8 ae 86 02 00	callq	0x100041a30 ## symbol stub for: _free
100019382:	bf 20 00 00 00	movl	$32, %edi
100019387:	e8 59 41 ff ff	callq	0x10000d4e5
10001938c:	48 89 c3	movq	%rax, %rbx
10001938f:	48 8b 05 ea 9a 04 00	movq	301802(%rip), %rax
100019396:	48 89 03	movq	%rax, (%rbx)
100019399:	48 85 c0	testq	%rax, %rax
10001939c:	74 04	je	0x1000193a2
10001939e:	48 89 58 08	movq	%rbx, 8(%rax)
1000193a2:	48 89 1d d7 9a 04 00	movq	%rbx, 301783(%rip)
1000193a9:	48 8d 05 d0 9a 04 00	leaq	301776(%rip), %rax
1000193b0:	48 89 43 08	movq	%rax, 8(%rbx)
1000193b4:	4c 89 73 10	movq	%r14, 16(%rbx)
1000193b8:	4c 89 e7	movq	%r12, %rdi
1000193bb:	e8 42 8d 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000193c0:	48 89 43 18	movq	%rax, 24(%rbx)
1000193c4:	31 db	xorl	%ebx, %ebx
1000193c6:	e9 fd 02 00 00	jmp	0x1000196c8
1000193cb:	4c 89 e7	movq	%r12, %rdi
1000193ce:	e8 51 8c 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000193d3:	bb 16 00 00 00	movl	$22, %ebx
1000193d8:	84 c0	testb	%al, %al
1000193da:	0f 84 e8 02 00 00	je	0x1000196c8
1000193e0:	41 0f b7 87 e8 03 00 00	movzwl	1000(%r15), %eax
1000193e8:	a8 10	testb	$16, %al
1000193ea:	0f 85 70 05 00 00	jne	0x100019960
1000193f0:	4c 89 ff	movq	%r15, %rdi
1000193f3:	4c 89 e6	movq	%r12, %rsi
1000193f6:	ba 02 00 00 00	movl	$2, %edx
1000193fb:	e9 6a 0a 00 00	jmp	0x100019e6a
100019400:	4c 89 e7	movq	%r12, %rdi
100019403:	e8 16 8c 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019408:	48 85 c0	testq	%rax, %rax
10001940b:	0f 84 1b f2 ff ff	je	0x10001862c
100019411:	49 89 c6	movq	%rax, %r14
100019414:	41 8b bf cc 03 00 00	movl	972(%r15), %edi
10001941b:	e8 9b 4d 00 00	callq	0x10001e1bb
100019420:	48 8d 3d ef e1 02 00	leaq	188911(%rip), %rdi ## literal pool for: "%s"
100019427:	31 db	xorl	%ebx, %ebx
100019429:	48 89 c6	movq	%rax, %rsi
10001942c:	31 c0	xorl	%eax, %eax
10001942e:	e8 02 5d ff ff	callq	0x10000f135
100019433:	49 89 c7	movq	%rax, %r15
100019436:	48 8d 35 2a 1f 03 00	leaq	204586(%rip), %rsi ## literal pool for: "reason"
10001943d:	4c 89 f7	movq	%r14, %rdi
100019440:	48 89 c2	movq	%rax, %rdx
100019443:	e8 54 8c 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100019448:	4c 89 ff	movq	%r15, %rdi
10001944b:	e8 e0 85 02 00	callq	0x100041a30 ## symbol stub for: _free
100019450:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100019457:	4c 89 30	movq	%r14, (%rax)
10001945a:	e9 69 02 00 00	jmp	0x1000196c8
10001945f:	48 8b 05 b2 eb 03 00	movq	256946(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100019466:	48 8d 95 20 ff ff ff	leaq	-224(%rbp), %rdx
10001946d:	48 89 02	movq	%rax, (%rdx)
100019470:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100019478:	48 8d 05 18 59 00 00	leaq	22808(%rip), %rax
10001947f:	48 89 42 10	movq	%rax, 16(%rdx)
100019483:	48 8d 05 ee 19 04 00	leaq	268782(%rip), %rax
10001948a:	48 89 42 18	movq	%rax, 24(%rdx)
10001948e:	4c 89 7a 20	movq	%r15, 32(%rdx)
100019492:	4c 89 e7	movq	%r12, %rdi
100019495:	48 8b b5 18 ff ff ff	movq	-232(%rbp), %rsi
10001949c:	e8 e9 f4 01 00	callq	0x10003898a
1000194a1:	89 c3	movl	%eax, %ebx
1000194a3:	e9 20 02 00 00	jmp	0x1000196c8
1000194a8:	4c 89 ff	movq	%r15, %rdi
1000194ab:	31 f6	xorl	%esi, %esi
1000194ad:	31 d2	xorl	%edx, %edx
1000194af:	e8 a5 ed ff ff	callq	0x100018259
1000194b4:	89 c3	movl	%eax, %ebx
1000194b6:	85 c0	testl	%eax, %eax
1000194b8:	0f 85 cc 07 00 00	jne	0x100019c8a
1000194be:	41 83 bf a4 02 00 00 00	cmpl	$0, 676(%r15)
1000194c6:	0f 84 d7 00 00 00	je	0x1000195a3
1000194cc:	66 0f 6f 05 ac 9d 02 00	movdqa	171436(%rip), %xmm0
1000194d4:	4c 8d b5 20 ff ff ff	leaq	-224(%rbp), %r14
1000194db:	66 41 0f 7f 46 30	movdqa	%xmm0, 48(%r14)
1000194e1:	66 41 0f 7f 46 20	movdqa	%xmm0, 32(%r14)
1000194e7:	66 41 0f 7f 46 10	movdqa	%xmm0, 16(%r14)
1000194ed:	66 41 0f 7f 06	movdqa	%xmm0, (%r14)
1000194f2:	66 0f ef c0	pxor	%xmm0, %xmm0
1000194f6:	48 8d 5d a0	leaq	-96(%rbp), %rbx
1000194fa:	f3 0f 7f 43 0c	movdqu	%xmm0, 12(%rbx)
1000194ff:	66 0f 7f 03	movdqa	%xmm0, (%rbx)
100019503:	41 8b 87 a8 02 00 00	movl	680(%r15), %eax
10001950a:	89 43 14	movl	%eax, 20(%rbx)
10001950d:	41 8b 87 ac 02 00 00	movl	684(%r15), %eax
100019514:	89 43 1c	movl	%eax, 28(%rbx)
100019517:	4c 89 ef	movq	%r13, %rdi
10001951a:	4c 89 f6	movq	%r14, %rsi
10001951d:	e8 3b b3 01 00	callq	0x10003485d
100019522:	48 89 85 08 ff ff ff	movq	%rax, -248(%rbp)
100019529:	41 8b 45 14	movl	20(%r13), %eax
10001952d:	89 85 e8 fe ff ff	movl	%eax, -280(%rbp)
100019533:	48 89 df	movq	%rbx, %rdi
100019536:	4c 89 f6	movq	%r14, %rsi
100019539:	e8 1f b3 01 00	callq	0x10003485d
10001953e:	8b 4b 14	movl	20(%rbx), %ecx
100019541:	89 0c 24	movl	%ecx, (%rsp)
100019544:	48 8d 15 3f 1c 03 00	leaq	203839(%rip), %rdx ## literal pool for: "already controlled: requestor = %s.%d, controller = %s.%d"
10001954b:	4c 89 ff	movq	%r15, %rdi
10001954e:	be 05 00 00 00	movl	$5, %esi
100019553:	48 8b 8d 08 ff ff ff	movq	-248(%rbp), %rcx
10001955a:	44 8b 85 e8 fe ff ff	movl	-280(%rbp), %r8d
100019561:	49 89 c1	movq	%rax, %r9
100019564:	31 c0	xorl	%eax, %eax
100019566:	e8 4f ca ff ff	callq	0x100015fba
10001956b:	41 8b 87 a8 02 00 00	movl	680(%r15), %eax
100019572:	41 3b 45 14	cmpl	20(%r13), %eax
100019576:	75 2b	jne	0x1000195a3
100019578:	41 8b 87 ac 02 00 00	movl	684(%r15), %eax
10001957f:	41 3b 45 1c	cmpl	28(%r13), %eax
100019583:	75 1e	jne	0x1000195a3
100019585:	48 8d 15 38 1c 03 00	leaq	203832(%rip), %rdx ## literal pool for: "dethroning previous controller"
10001958c:	4c 89 ff	movq	%r15, %rdi
10001958f:	be 05 00 00 00	movl	$5, %esi
100019594:	31 c0	xorl	%eax, %eax
100019596:	e8 1f ca ff ff	callq	0x100015fba
10001959b:	4c 89 ff	movq	%r15, %rdi
10001959e:	e8 7c 57 00 00	callq	0x10001ed1f
1000195a3:	48 8d 35 39 1c 03 00	leaq	203833(%rip), %rsi ## literal pool for: "port"
1000195aa:	4c 89 e7	movq	%r12, %rdi
1000195ad:	e8 1a 82 02 00	callq	0x1000417cc ## symbol stub for: __xpc_dictionary_extract_mach_send
1000195b2:	89 c3	movl	%eax, %ebx
1000195b4:	8d 43 01	leal	1(%rbx), %eax
1000195b7:	83 f8 01	cmpl	$1, %eax
1000195ba:	0f 86 a5 06 00 00	jbe	0x100019c65
1000195c0:	4c 89 e7	movq	%r12, %rdi
1000195c3:	e8 56 8a 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000195c8:	49 89 c6	movq	%rax, %r14
1000195cb:	41 8b 45 14	movl	20(%r13), %eax
1000195cf:	41 89 87 a8 02 00 00	movl	%eax, 680(%r15)
1000195d6:	41 8b 45 1c	movl	28(%r13), %eax
1000195da:	41 89 87 ac 02 00 00	movl	%eax, 684(%r15)
1000195e1:	41 89 9f a4 02 00 00	movl	%ebx, 676(%r15)
1000195e8:	89 db	movl	%ebx, %ebx
1000195ea:	e8 0b 4f ff ff	callq	0x10000e4fa
1000195ef:	48 8b 3d 62 ea 03 00	movq	256610(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_send
1000195f6:	ba 01 00 00 00	movl	$1, %edx
1000195fb:	48 89 de	movq	%rbx, %rsi
1000195fe:	48 89 c1	movq	%rax, %rcx
100019601:	e8 7c 83 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100019606:	49 89 87 b0 02 00 00	movq	%rax, 688(%r15)
10001960d:	48 89 c7	movq	%rax, %rdi
100019610:	4c 89 fe	movq	%r15, %rsi
100019613:	e8 5e 83 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100019618:	49 8b bf b0 02 00 00	movq	688(%r15), %rdi
10001961f:	48 8d 35 36 57 00 00	leaq	22326(%rip), %rsi
100019626:	e8 7b 83 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001962b:	49 8b bf b0 02 00 00	movq	688(%r15), %rdi
100019632:	48 8d 35 2d 57 00 00	leaq	22317(%rip), %rsi
100019639:	e8 74 83 02 00	callq	0x1000419b2 ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler_f
10001963e:	49 8b bf b0 02 00 00	movq	688(%r15), %rdi
100019645:	e8 78 82 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001964a:	49 63 97 c8 03 00 00	movslq	968(%r15), %rdx
100019651:	48 85 d2	testq	%rdx, %rdx
100019654:	74 20	je	0x100019676
100019656:	48 8d 35 38 12 03 00	leaq	201272(%rip), %rsi ## literal pool for: "pid"
10001965d:	4c 89 f7	movq	%r14, %rdi
100019660:	e8 1f 8a 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100019665:	48 8d 35 92 1b 03 00	leaq	203666(%rip), %rsi ## literal pool for: "configurable"
10001966c:	4c 89 f7	movq	%r14, %rdi
10001966f:	31 d2	xorl	%edx, %edx
100019671:	e8 02 8a 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100019676:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
10001967d:	4c 89 30	movq	%r14, (%rax)
100019680:	c7 85 f4 fe ff ff 00 00 00 00	movl	$0, -268(%rbp)
10001968a:	31 db	xorl	%ebx, %ebx
10001968c:	e9 f9 05 00 00	jmp	0x100019c8a
100019691:	4c 89 e7	movq	%r12, %rdi
100019694:	e8 85 89 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019699:	49 89 c6	movq	%rax, %r14
10001969c:	48 8d 35 73 1f 03 00	leaq	204659(%rip), %rsi ## literal pool for: "uuids"
1000196a3:	48 89 c7	movq	%rax, %rdi
1000196a6:	4c 89 ea	movq	%r13, %rdx
1000196a9:	e8 00 8a 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000196ae:	4c 89 ef	movq	%r13, %rdi
1000196b1:	e8 46 8a 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000196b6:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
1000196bd:	4c 89 30	movq	%r14, (%rax)
1000196c0:	31 db	xorl	%ebx, %ebx
1000196c2:	89 9d 14 ff ff ff	movl	%ebx, -236(%rbp)
1000196c8:	48 8b 05 59 e9 03 00	movq	256345(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000196cf:	48 8b 00	movq	(%rax), %rax
1000196d2:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000196d6:	0f 85 0e 0d 00 00	jne	0x10001a3ea
1000196dc:	89 d8	movl	%ebx, %eax
1000196de:	48 81 c4 28 01 00 00	addq	$296, %rsp
1000196e5:	5b	popq	%rbx
1000196e6:	41 5c	popq	%r12
1000196e8:	41 5d	popq	%r13
1000196ea:	41 5e	popq	%r14
1000196ec:	41 5f	popq	%r15
1000196ee:	5d	popq	%rbp
1000196ef:	c3	retq
1000196f0:	bb 02 00 00 00	movl	$2, %ebx
1000196f5:	eb d1	jmp	0x1000196c8
1000196f7:	48 8d 35 5f 18 03 00	leaq	202847(%rip), %rsi ## literal pool for: "unthrottle"
1000196fe:	4c 89 e7	movq	%r12, %rdi
100019701:	e8 30 89 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100019706:	89 c3	movl	%eax, %ebx
100019708:	84 c0	testb	%al, %al
10001970a:	74 08	je	0x100019714
10001970c:	41 80 8f 0f 05 00 00 04	orb	$4, 1295(%r15)
100019714:	48 8d 35 4d 18 03 00	leaq	202829(%rip), %rsi ## literal pool for: "suspended"
10001971b:	4c 89 e7	movq	%r12, %rdi
10001971e:	e8 13 89 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100019723:	41 89 c6	movl	%eax, %r14d
100019726:	48 8d 35 45 18 03 00	leaq	202821(%rip), %rsi ## literal pool for: "kill"
10001972d:	4c 89 e7	movq	%r12, %rdi
100019730:	e8 01 89 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100019735:	41 8b 8f c8 03 00 00	movl	968(%r15), %ecx
10001973c:	84 c0	testb	%al, %al
10001973e:	4c 8b ad 18 ff ff ff	movq	-232(%rbp), %r13
100019745:	0f 84 c6 03 00 00	je	0x100019b11
10001974b:	85 c9	testl	%ecx, %ecx
10001974d:	0f 84 c6 03 00 00	je	0x100019b19
100019753:	4c 89 ff	movq	%r15, %rdi
100019756:	e8 63 18 00 00	callq	0x10001afbe
10001975b:	89 c3	movl	%eax, %ebx
10001975d:	85 c0	testl	%eax, %eax
10001975f:	0f 85 63 ff ff ff	jne	0x1000196c8
100019765:	48 8d 35 06 18 03 00	leaq	202758(%rip), %rsi ## literal pool for: "kill"
10001976c:	31 db	xorl	%ebx, %ebx
10001976e:	4c 89 e7	movq	%r12, %rdi
100019771:	31 d2	xorl	%edx, %edx
100019773:	e8 00 89 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100019778:	4c 89 ff	movq	%r15, %rdi
10001977b:	4c 89 e6	movq	%r12, %rsi
10001977e:	ba 05 00 00 00	movl	$5, %edx
100019783:	e9 37 ed ff ff	jmp	0x1000184bf
100019788:	48 8d 35 e3 17 03 00	leaq	202723(%rip), %rsi ## literal pool for: "kill"
10001978f:	4c 89 e7	movq	%r12, %rdi
100019792:	e8 9f 88 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100019797:	41 89 c5	movl	%eax, %r13d
10001979a:	48 8d 35 ca 18 03 00	leaq	202954(%rip), %rsi ## literal pool for: "run"
1000197a1:	4c 89 e7	movq	%r12, %rdi
1000197a4:	e8 8d 88 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000197a9:	41 89 c6	movl	%eax, %r14d
1000197ac:	48 8d 35 bc 18 03 00	leaq	202940(%rip), %rsi ## literal pool for: "proxy"
1000197b3:	4c 89 e7	movq	%r12, %rdi
1000197b6:	e8 7b 88 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000197bb:	89 c3	movl	%eax, %ebx
1000197bd:	48 8d 35 b1 18 03 00	leaq	202929(%rip), %rsi ## literal pool for: "pended"
1000197c4:	4c 89 e7	movq	%r12, %rdi
1000197c7:	e8 6a 88 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000197cc:	34 01	xorb	$1, %al
1000197ce:	20 c3	andb	%al, %bl
1000197d0:	41 8a 8f ea 04 00 00	movb	1258(%r15), %cl
1000197d7:	89 ca	movl	%ecx, %edx
1000197d9:	80 ca 01	orb	$1, %dl
1000197dc:	80 e1 fc	andb	$-4, %cl
1000197df:	80 c9 02	orb	$2, %cl
1000197e2:	0f b6 d2	movzbl	%dl, %edx
1000197e5:	0f b6 c9	movzbl	%cl, %ecx
1000197e8:	84 db	testb	%bl, %bl
1000197ea:	0f 44 ca	cmovel	%edx, %ecx
1000197ed:	41 88 8f ea 04 00 00	movb	%cl, 1258(%r15)
1000197f4:	41 8b 8f c8 03 00 00	movl	968(%r15), %ecx
1000197fb:	44 84 e8	testb	%r13b, %al
1000197fe:	0f 85 3c 03 00 00	jne	0x100019b40
100019804:	84 db	testb	%bl, %bl
100019806:	0f 85 34 03 00 00	jne	0x100019b40
10001980c:	85 c9	testl	%ecx, %ecx
10001980e:	4c 8b ad 18 ff ff ff	movq	-232(%rbp), %r13
100019815:	0f 84 e7 03 00 00	je	0x100019c02
10001981b:	4c 89 e7	movq	%r12, %rdi
10001981e:	e8 fb 87 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019823:	48 89 c3	movq	%rax, %rbx
100019826:	49 63 97 c8 03 00 00	movslq	968(%r15), %rdx
10001982d:	48 8d 35 61 10 03 00	leaq	200801(%rip), %rsi ## literal pool for: "pid"
100019834:	48 89 c7	movq	%rax, %rdi
100019837:	e8 48 88 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001983c:	49 89 5d 00	movq	%rbx, (%r13)
100019840:	e9 7f fb ff ff	jmp	0x1000193c4
100019845:	48 8d 35 02 19 03 00	leaq	203010(%rip), %rsi ## literal pool for: "%s: no domain found"
10001984c:	bf 03 00 00 00	movl	$3, %edi
100019851:	4c 89 f2	movq	%r14, %rdx
100019854:	31 c0	xorl	%eax, %eax
100019856:	e8 6d bd 01 00	callq	0x1000355c8
10001985b:	8b 9d f4 fe ff ff	movl	-268(%rbp), %ebx
100019861:	e9 62 fe ff ff	jmp	0x1000196c8
100019866:	4c 89 e7	movq	%r12, %rdi
100019869:	e8 b0 87 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001986e:	48 85 c0	testq	%rax, %rax
100019871:	0f 84 b5 ed ff ff	je	0x10001862c
100019877:	48 89 c3	movq	%rax, %rbx
10001987a:	49 8b 97 f0 04 00 00	movq	1264(%r15), %rdx
100019881:	48 8d 35 64 1b 03 00	leaq	203620(%rip), %rsi ## literal pool for: "runs"
100019888:	48 89 c7	movq	%rax, %rdi
10001988b:	e8 1e 88 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100019890:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100019897:	48 89 18	movq	%rbx, (%rax)
10001989a:	e9 25 fb ff ff	jmp	0x1000193c4
10001989f:	48 85 c0	testq	%rax, %rax
1000198a2:	48 8b 9d 18 ff ff ff	movq	-232(%rbp), %rbx
1000198a9:	0f 84 2d 05 00 00	je	0x100019ddc
1000198af:	41 80 bf a0 01 00 00 05	cmpb	$5, 416(%r15)
1000198b7:	0f 83 df 04 00 00	jae	0x100019d9c
1000198bd:	48 8d 15 e4 1b 03 00	leaq	203748(%rip), %rdx ## literal pool for: "extension canceled clean exit attempt"
1000198c4:	4c 89 ff	movq	%r15, %rdi
1000198c7:	be 05 00 00 00	movl	$5, %esi
1000198cc:	31 c0	xorl	%eax, %eax
1000198ce:	e8 e7 c6 ff ff	callq	0x100015fba
1000198d3:	4c 89 ff	movq	%r15, %rdi
1000198d6:	be 23 00 00 00	movl	$35, %esi
1000198db:	e8 aa 93 ff ff	callq	0x100012c8a
1000198e0:	49 8b bf e8 02 00 00	movq	744(%r15), %rdi
1000198e7:	e8 90 80 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
1000198ec:	49 8b bf e8 02 00 00	movq	744(%r15), %rdi
1000198f3:	e8 60 80 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000198f8:	49 c7 87 e8 02 00 00 00 00 00 00	movq	$0, 744(%r15)
100019903:	e9 0c 06 00 00	jmp	0x100019f14
100019908:	48 8d 9d 20 ff ff ff	leaq	-224(%rbp), %rbx
10001990f:	c7 03 00 00 00 00	movl	$0, (%rbx)
100019915:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
10001991c:	48 89 1c 24	movq	%rbx, (%rsp)
100019920:	4c 89 fe	movq	%r15, %rsi
100019923:	4c 89 f2	movq	%r14, %rdx
100019926:	31 c9	xorl	%ecx, %ecx
100019928:	45 31 c0	xorl	%r8d, %r8d
10001992b:	4d 89 e9	movq	%r13, %r9
10001992e:	e8 db 81 00 00	callq	0x100021b0e
100019933:	8b 1b	movl	(%rbx), %ebx
100019935:	85 db	testl	%ebx, %ebx
100019937:	0f 85 85 fd ff ff	jne	0x1000196c2
10001993d:	4c 89 e7	movq	%r12, %rdi
100019940:	e8 d9 86 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019945:	48 8b 8d 18 ff ff ff	movq	-232(%rbp), %rcx
10001994c:	48 89 01	movq	%rax, (%rcx)
10001994f:	e9 6e fd ff ff	jmp	0x1000196c2
100019954:	48 8d 15 09 11 03 00	leaq	200969(%rip), %rdx ## literal pool for: "Failure info has no PC."
10001995b:	e9 b9 04 00 00	jmp	0x100019e19
100019960:	bb 25 00 00 00	movl	$37, %ebx
100019965:	a8 01	testb	$1, %al
100019967:	0f 85 5b fd ff ff	jne	0x1000196c8
10001996d:	4c 89 e7	movq	%r12, %rdi
100019970:	e8 a9 86 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019975:	49 89 c4	movq	%rax, %r12
100019978:	48 8d 5d a0	leaq	-96(%rbp), %rbx
10001997c:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100019983:	48 8d b5 20 ff ff ff	leaq	-224(%rbp), %rsi
10001998a:	4c 89 ff	movq	%r15, %rdi
10001998d:	48 89 da	movq	%rbx, %rdx
100019990:	e8 3d 82 fe ff	callq	0x100001bd2
100019995:	48 8b 3b	movq	(%rbx), %rdi
100019998:	0f b6 4f 68	movzbl	104(%rdi), %ecx
10001999c:	41 8b 97 e8 03 00 00	movl	1000(%r15), %edx
1000199a3:	c1 e1 02	shll	$2, %ecx
1000199a6:	83 e2 fb	andl	$-5, %edx
1000199a9:	09 ca	orl	%ecx, %edx
1000199ab:	66 41 89 97 e8 03 00 00	movw	%dx, 1000(%r15)
1000199b3:	48 8b 0d 7e e6 03 00	movq	255614(%rip), %rcx ## literal pool symbol address: __dispatch_data_destructor_free
1000199ba:	48 8b 09	movq	(%rcx), %rcx
1000199bd:	48 89 c6	movq	%rax, %rsi
1000199c0:	31 d2	xorl	%edx, %edx
1000199c2:	e8 1f 7f 02 00	callq	0x1000418e6 ## symbol stub for: _dispatch_data_create
1000199c7:	48 89 c3	movq	%rax, %rbx
1000199ca:	48 89 c7	movq	%rax, %rdi
1000199cd:	e8 16 86 02 00	callq	0x100041fe8 ## symbol stub for: _xpc_data_create_with_dispatch_data
1000199d2:	49 89 c6	movq	%rax, %r14
1000199d5:	48 89 df	movq	%rbx, %rdi
1000199d8:	e8 7b 7f 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000199dd:	48 8d 35 66 10 03 00	leaq	200806(%rip), %rsi ## literal pool for: "blob"
1000199e4:	4c 89 e7	movq	%r12, %rdi
1000199e7:	4c 89 f2	movq	%r14, %rdx
1000199ea:	e8 bf 86 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000199ef:	4c 89 f7	movq	%r14, %rdi
1000199f2:	e8 05 87 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000199f7:	48 8d 9d 20 ff ff ff	leaq	-224(%rbp), %rbx
1000199fe:	48 8b 13	movq	(%rbx), %rdx
100019a01:	48 8d 35 47 10 03 00	leaq	200775(%rip), %rsi ## literal pool for: "ports"
100019a08:	4c 89 e7	movq	%r12, %rdi
100019a0b:	e8 9e 86 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100019a10:	48 8b 3b	movq	(%rbx), %rdi
100019a13:	e8 e4 86 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100019a18:	45 85 ed	testl	%r13d, %r13d
100019a1b:	74 12	je	0x100019a2f
100019a1d:	48 8d 35 31 10 03 00	leaq	200753(%rip), %rsi ## literal pool for: "control"
100019a24:	4c 89 e7	movq	%r12, %rdi
100019a27:	44 89 ea	movl	%r13d, %edx
100019a2a:	e8 61 86 02 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
100019a2f:	31 db	xorl	%ebx, %ebx
100019a31:	31 ff	xorl	%edi, %edi
100019a33:	31 f6	xorl	%esi, %esi
100019a35:	e8 06 85 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100019a3a:	49 89 c6	movq	%rax, %r14
100019a3d:	4c 8b ad 18 ff ff ff	movq	-232(%rbp), %r13
100019a44:	41 8b 94 9f 98 02 00 00	movl	664(%r15,%rbx,4), %edx
100019a4c:	83 fa ff	cmpl	$-1, %edx
100019a4f:	74 21	je	0x100019a72
100019a51:	4c 89 f7	movq	%r14, %rdi
100019a54:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100019a5b:	e8 04 85 02 00	callq	0x100041f64 ## symbol stub for: _xpc_array_set_fd
100019a60:	4c 89 f7	movq	%r14, %rdi
100019a63:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100019a6a:	48 89 da	movq	%rbx, %rdx
100019a6d:	e8 f8 84 02 00	callq	0x100041f6a ## symbol stub for: _xpc_array_set_int64
100019a72:	48 ff c3	incq	%rbx
100019a75:	48 83 fb 03	cmpq	$3, %rbx
100019a79:	75 c9	jne	0x100019a44
100019a7b:	49 8b bf d8 04 00 00	movq	1240(%r15), %rdi
100019a82:	48 85 ff	testq	%rdi, %rdi
100019a85:	74 3a	je	0x100019ac1
100019a87:	e8 c0 84 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100019a8c:	48 85 c0	testq	%rax, %rax
100019a8f:	74 30	je	0x100019ac1
100019a91:	31 db	xorl	%ebx, %ebx
100019a93:	49 8b bf d8 04 00 00	movq	1240(%r15), %rdi
100019a9a:	48 89 de	movq	%rbx, %rsi
100019a9d:	e8 bc 84 02 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
100019aa2:	4c 89 f7	movq	%r14, %rdi
100019aa5:	48 89 c6	movq	%rax, %rsi
100019aa8:	e8 81 84 02 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
100019aad:	48 ff c3	incq	%rbx
100019ab0:	49 8b bf d8 04 00 00	movq	1240(%r15), %rdi
100019ab7:	e8 90 84 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100019abc:	48 39 c3	cmpq	%rax, %rbx
100019abf:	72 d2	jb	0x100019a93
100019ac1:	48 8d 35 95 0f 03 00	leaq	200597(%rip), %rsi ## literal pool for: "fds"
100019ac8:	4c 89 e7	movq	%r12, %rdi
100019acb:	4c 89 f2	movq	%r14, %rdx
100019ace:	e8 db 85 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100019ad3:	4c 89 f7	movq	%r14, %rdi
100019ad6:	e8 21 86 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100019adb:	49 63 b7 c8 03 00 00	movslq	968(%r15), %rsi
100019ae2:	bf 0c 00 00 22	movl	$570425356, %edi
100019ae7:	e8 e3 33 ff ff	callq	0x10000cecf
100019aec:	49 63 bf c8 03 00 00	movslq	968(%r15), %rdi
100019af3:	90	nop
100019af4:	0f 1f 40 00	nopl	(%rax)
100019af8:	4c 89 ff	movq	%r15, %rdi
100019afb:	e8 83 4c 00 00	callq	0x10001e783
100019b00:	41 80 8f e8 03 00 00 01	orb	$1, 1000(%r15)
100019b08:	4d 89 65 00	movq	%r12, (%r13)
100019b0c:	e9 b3 f8 ff ff	jmp	0x1000193c4
100019b11:	85 c9	testl	%ecx, %ecx
100019b13:	0f 85 28 03 00 00	jne	0x100019e41
100019b19:	45 84 f6	testb	%r14b, %r14b
100019b1c:	74 08	je	0x100019b26
100019b1e:	41 80 8f ea 04 00 00 01	orb	$1, 1258(%r15)
100019b26:	4c 89 ff	movq	%r15, %rdi
100019b29:	be 09 00 00 00	movl	$9, %esi
100019b2e:	84 db	testb	%bl, %bl
100019b30:	0f 84 f7 02 00 00	je	0x100019e2d
100019b36:	e8 61 12 00 00	callq	0x10001ad9c
100019b3b:	e9 f2 02 00 00	jmp	0x100019e32
100019b40:	85 c9	testl	%ecx, %ecx
100019b42:	4c 8b ad 18 ff ff ff	movq	-232(%rbp), %r13
100019b49:	0f 84 b3 00 00 00	je	0x100019c02
100019b4f:	4c 89 ff	movq	%r15, %rdi
100019b52:	e8 67 14 00 00	callq	0x10001afbe
100019b57:	83 f8 25	cmpl	$37, %eax
100019b5a:	74 0a	je	0x100019b66
100019b5c:	89 c3	movl	%eax, %ebx
100019b5e:	85 c0	testl	%eax, %eax
100019b60:	0f 85 ef 03 00 00	jne	0x100019f55
100019b66:	48 8d 35 08 15 03 00	leaq	201992(%rip), %rsi ## literal pool for: "pended"
100019b6d:	4c 89 e7	movq	%r12, %rdi
100019b70:	ba 01 00 00 00	movl	$1, %edx
100019b75:	e8 fe 84 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100019b7a:	4c 89 ff	movq	%r15, %rdi
100019b7d:	4c 89 e6	movq	%r12, %rsi
100019b80:	ba 05 00 00 00	movl	$5, %edx
100019b85:	e9 e0 02 00 00	jmp	0x100019e6a
100019b8a:	48 8d 15 d1 15 03 00	leaq	202193(%rip), %rdx ## literal pool for: "canceling old local attachment deferral"
100019b91:	4c 89 ff	movq	%r15, %rdi
100019b94:	be 05 00 00 00	movl	$5, %esi
100019b99:	31 c0	xorl	%eax, %eax
100019b9b:	e8 89 68 00 00	callq	0x100020429
100019ba0:	48 89 df	movq	%rbx, %rdi
100019ba3:	e8 24 51 00 00	callq	0x10001eccc
100019ba8:	48 8b 03	movq	(%rbx), %rax
100019bab:	48 85 c0	testq	%rax, %rax
100019bae:	74 08	je	0x100019bb8
100019bb0:	48 8b 4b 08	movq	8(%rbx), %rcx
100019bb4:	48 89 48 08	movq	%rcx, 8(%rax)
100019bb8:	48 8b 4b 08	movq	8(%rbx), %rcx
100019bbc:	48 89 01	movq	%rax, (%rcx)
100019bbf:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100019bc3:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
100019bc7:	48 8b 7b 18	movq	24(%rbx), %rdi
100019bcb:	e8 2c 85 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100019bd0:	48 89 df	movq	%rbx, %rdi
100019bd3:	e8 58 7e 02 00	callq	0x100041a30 ## symbol stub for: _free
100019bd8:	bf 20 00 00 00	movl	$32, %edi
100019bdd:	e8 03 39 ff ff	callq	0x10000d4e5
100019be2:	48 89 c3	movq	%rax, %rbx
100019be5:	49 8b 45 00	movq	(%r13), %rax
100019be9:	48 89 03	movq	%rax, (%rbx)
100019bec:	48 85 c0	testq	%rax, %rax
100019bef:	74 04	je	0x100019bf5
100019bf1:	48 89 58 08	movq	%rbx, 8(%rax)
100019bf5:	49 89 5d 00	movq	%rbx, (%r13)
100019bf9:	4c 89 6b 08	movq	%r13, 8(%rbx)
100019bfd:	e9 b2 f7 ff ff	jmp	0x1000193b4
100019c02:	45 84 f6	testb	%r14b, %r14b
100019c05:	0f 84 f1 01 00 00	je	0x100019dfc
100019c0b:	4c 89 ff	movq	%r15, %rdi
100019c0e:	be 09 00 00 00	movl	$9, %esi
100019c13:	e8 81 c4 ff ff	callq	0x100016099
100019c18:	83 f8 24	cmpl	$36, %eax
100019c1b:	0f 84 db 01 00 00	je	0x100019dfc
100019c21:	89 c3	movl	%eax, %ebx
100019c23:	85 c0	testl	%eax, %eax
100019c25:	0f 84 f0 fb ff ff	je	0x10001981b
100019c2b:	4c 89 e7	movq	%r12, %rdi
100019c2e:	e8 eb 83 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019c33:	49 89 c6	movq	%rax, %r14
100019c36:	48 63 d3	movslq	%ebx, %rdx
100019c39:	48 8d 35 37 13 03 00	leaq	201527(%rip), %rsi ## literal pool for: "error"
100019c40:	48 89 c7	movq	%rax, %rdi
100019c43:	e8 3c 84 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100019c48:	4d 89 75 00	movq	%r14, (%r13)
100019c4c:	4c 89 ff	movq	%r15, %rdi
100019c4f:	e8 2f 4b 00 00	callq	0x10001e783
100019c54:	e9 6b f7 ff ff	jmp	0x1000193c4
100019c59:	48 8d 15 21 0e 03 00	leaq	200225(%rip), %rdx ## literal pool for: "Failure info has no line number."
100019c60:	e9 b4 01 00 00	jmp	0x100019e19
100019c65:	48 8d 15 7c 15 03 00	leaq	202108(%rip), %rdx ## literal pool for: "got dead control port"
100019c6c:	4c 89 ff	movq	%r15, %rdi
100019c6f:	be 05 00 00 00	movl	$5, %esi
100019c74:	31 c0	xorl	%eax, %eax
100019c76:	e8 3f c3 ff ff	callq	0x100015fba
100019c7b:	c7 85 f4 fe ff ff 39 00 00 00	movl	$57, -268(%rbp)
100019c85:	bb 39 00 00 00	movl	$57, %ebx
100019c8a:	41 f6 87 ea 04 00 00 08	testb	$8, 1258(%r15)
100019c92:	0f 84 30 fa ff ff	je	0x1000196c8
100019c98:	41 8b b7 d4 02 00 00	movl	724(%r15), %esi
100019c9f:	41 c7 87 d4 02 00 00 00 00 00 00	movl	$0, 724(%r15)
100019caa:	4c 89 ff	movq	%r15, %rdi
100019cad:	e8 e7 c3 ff ff	callq	0x100016099
100019cb2:	41 89 c6	movl	%eax, %r14d
100019cb5:	85 db	testl	%ebx, %ebx
100019cb7:	48 8d 05 cd f2 02 00	leaq	193229(%rip), %rax ## literal pool for: ""
100019cbe:	48 8d 0d 80 15 03 00	leaq	202112(%rip), %rcx ## literal pool for: "not "
100019cc5:	48 0f 44 c8	cmoveq	%rax, %rcx
100019cc9:	48 8d 15 3b 15 03 00	leaq	202043(%rip), %rdx ## literal pool for: "controller %sattached to spawn: domain spawn response: %d"
100019cd0:	4c 89 ff	movq	%r15, %rdi
100019cd3:	be 05 00 00 00	movl	$5, %esi
100019cd8:	45 89 f0	movl	%r14d, %r8d
100019cdb:	31 c0	xorl	%eax, %eax
100019cdd:	e8 d8 c2 ff ff	callq	0x100015fba
100019ce2:	45 85 f6	testl	%r14d, %r14d
100019ce5:	74 37	je	0x100019d1e
100019ce7:	41 83 fe 24	cmpl	$36, %r14d
100019ceb:	74 31	je	0x100019d1e
100019ced:	41 81 fe 8b 00 00 00	cmpl	$139, %r14d
100019cf4:	0f 84 fc 06 00 00	je	0x10001a3f6
100019cfa:	44 89 f7	movl	%r14d, %edi
100019cfd:	e8 0c 84 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100019d02:	48 8d 15 72 15 03 00	leaq	202098(%rip), %rdx ## literal pool for: "Post-attach spawn of service failed: %d: %s"
100019d09:	4c 89 ff	movq	%r15, %rdi
100019d0c:	be 03 00 00 00	movl	$3, %esi
100019d11:	44 89 f1	movl	%r14d, %ecx
100019d14:	49 89 c0	movq	%rax, %r8
100019d17:	31 c0	xorl	%eax, %eax
100019d19:	e8 9c c2 ff ff	callq	0x100015fba
100019d1e:	41 80 a7 ea 04 00 00 f7	andb	$-9, 1258(%r15)
100019d26:	e9 9d f9 ff ff	jmp	0x1000196c8
100019d2b:	49 8b be e8 00 00 00	movq	232(%r14), %rdi
100019d32:	4c 89 f6	movq	%r14, %rsi
100019d35:	e8 08 7c 00 00	callq	0x100021942
100019d3a:	85 c0	testl	%eax, %eax
100019d3c:	0f 84 7e 02 00 00	je	0x100019fc0
100019d42:	89 c3	movl	%eax, %ebx
100019d44:	83 f8 24	cmpl	$36, %eax
100019d47:	0f 85 75 f9 ff ff	jne	0x1000196c2
100019d4d:	4c 89 e7	movq	%r12, %rdi
100019d50:	e8 c9 82 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019d55:	49 89 c7	movq	%rax, %r15
100019d58:	4c 89 f7	movq	%r14, %rdi
100019d5b:	e8 d8 44 00 00	callq	0x10001e238
100019d60:	89 c7	movl	%eax, %edi
100019d62:	be 14 00 00 00	movl	$20, %esi
100019d67:	e8 78 83 02 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
100019d6c:	48 89 c3	movq	%rax, %rbx
100019d6f:	48 8d 35 98 18 03 00	leaq	202904(%rip), %rsi ## literal pool for: "monitor"
100019d76:	4c 89 ff	movq	%r15, %rdi
100019d79:	48 89 c2	movq	%rax, %rdx
100019d7c:	e8 2d 83 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100019d81:	48 89 df	movq	%rbx, %rdi
100019d84:	e8 73 83 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100019d89:	e9 3d 02 00 00	jmp	0x100019fcb
100019d8e:	41 80 bf a0 01 00 00 04	cmpb	$4, 416(%r15)
100019d96:	0f 86 d8 00 00 00	jbe	0x100019e74
100019d9c:	48 8d 15 c5 16 03 00	leaq	202437(%rip), %rdx ## literal pool for: "extension is being stopped"
100019da3:	4c 89 ff	movq	%r15, %rdi
100019da6:	be 05 00 00 00	movl	$5, %esi
100019dab:	31 c0	xorl	%eax, %eax
100019dad:	e8 08 c2 ff ff	callq	0x100015fba
100019db2:	bb 7c 00 00 00	movl	$124, %ebx
100019db7:	e9 06 f9 ff ff	jmp	0x1000196c2
100019dbc:	48 8d 15 25 14 03 00	leaq	201765(%rip), %rdx ## literal pool for: "got dead control port"
100019dc3:	4c 89 ff	movq	%r15, %rdi
100019dc6:	be 05 00 00 00	movl	$5, %esi
100019dcb:	31 c0	xorl	%eax, %eax
100019dcd:	e8 e8 c1 ff ff	callq	0x100015fba
100019dd2:	bb 39 00 00 00	movl	$57, %ebx
100019dd7:	e9 e6 f8 ff ff	jmp	0x1000196c2
100019ddc:	48 8d 15 54 16 03 00	leaq	202324(%rip), %rdx ## literal pool for: "extension already interrupted clean exit attempt"
100019de3:	4c 89 ff	movq	%r15, %rdi
100019de6:	be 05 00 00 00	movl	$5, %esi
100019deb:	31 c0	xorl	%eax, %eax
100019ded:	e8 c8 c1 ff ff	callq	0x100015fba
100019df2:	bb 25 00 00 00	movl	$37, %ebx
100019df7:	e9 c6 f8 ff ff	jmp	0x1000196c2
100019dfc:	48 8d 35 72 12 03 00	leaq	201330(%rip), %rsi ## literal pool for: "pended"
100019e03:	4c 89 e7	movq	%r12, %rdi
100019e06:	ba 01 00 00 00	movl	$1, %edx
100019e0b:	e8 68 82 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100019e10:	eb 4d	jmp	0x100019e5f
100019e12:	48 8d 15 8e 0c 03 00	leaq	199822(%rip), %rdx ## literal pool for: "Failure info has no image UUID."
100019e19:	4c 89 ff	movq	%r15, %rdi
100019e1c:	be 03 00 00 00	movl	$3, %esi
100019e21:	31 c0	xorl	%eax, %eax
100019e23:	e8 92 c1 ff ff	callq	0x100015fba
100019e28:	e9 ff e7 ff ff	jmp	0x10001862c
100019e2d:	e8 92 10 00 00	callq	0x10001aec4
100019e32:	89 c3	movl	%eax, %ebx
100019e34:	83 f8 24	cmpl	$36, %eax
100019e37:	74 26	je	0x100019e5f
100019e39:	85 db	testl	%ebx, %ebx
100019e3b:	0f 85 e3 00 00 00	jne	0x100019f24
100019e41:	4c 89 e7	movq	%r12, %rdi
100019e44:	e8 d5 81 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019e49:	49 89 c6	movq	%rax, %r14
100019e4c:	49 63 97 c8 03 00 00	movslq	968(%r15), %rdx
100019e53:	48 8d 35 3b 0a 03 00	leaq	199227(%rip), %rsi ## literal pool for: "pid"
100019e5a:	e9 da 00 00 00	jmp	0x100019f39
100019e5f:	4c 89 ff	movq	%r15, %rdi
100019e62:	4c 89 e6	movq	%r12, %rsi
100019e65:	ba 01 00 00 00	movl	$1, %edx
100019e6a:	e8 79 4c 00 00	callq	0x10001eae8
100019e6f:	e9 50 f5 ff ff	jmp	0x1000193c4
100019e74:	48 8d 15 08 16 03 00	leaq	202248(%rip), %rdx ## literal pool for: "extension attempting to exit cleanly"
100019e7b:	4c 89 ff	movq	%r15, %rdi
100019e7e:	be 05 00 00 00	movl	$5, %esi
100019e83:	31 c0	xorl	%eax, %eax
100019e85:	e8 30 c1 ff ff	callq	0x100015fba
100019e8a:	e8 6b 46 ff ff	callq	0x10000e4fa
100019e8f:	48 8b 3d e2 e1 03 00	movq	254434(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
100019e96:	31 f6	xorl	%esi, %esi
100019e98:	31 d2	xorl	%edx, %edx
100019e9a:	48 89 c1	movq	%rax, %rcx
100019e9d:	e8 e0 7a 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100019ea2:	49 89 87 e8 02 00 00	movq	%rax, 744(%r15)
100019ea9:	4c 89 ff	movq	%r15, %rdi
100019eac:	be 23 00 00 00	movl	$35, %esi
100019eb1:	e8 cb 8d ff ff	callq	0x100012c81
100019eb6:	49 8b bf e8 02 00 00	movq	744(%r15), %rdi
100019ebd:	4c 89 fe	movq	%r15, %rsi
100019ec0:	e8 b1 7a 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100019ec5:	4d 8b b7 e8 02 00 00	movq	744(%r15), %r14
100019ecc:	41 8b 87 f8 02 00 00	movl	760(%r15), %eax
100019ed3:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
100019eda:	31 ff	xorl	%edi, %edi
100019edc:	e8 f5 7a 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
100019ee1:	4c 89 f7	movq	%r14, %rdi
100019ee4:	48 89 c6	movq	%rax, %rsi
100019ee7:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
100019eee:	31 c9	xorl	%ecx, %ecx
100019ef0:	e8 c9 7a 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
100019ef5:	49 8b bf e8 02 00 00	movq	744(%r15), %rdi
100019efc:	48 8d 35 a4 4e 00 00	leaq	20132(%rip), %rsi
100019f03:	e8 9e 7a 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100019f08:	49 8b bf e8 02 00 00	movq	744(%r15), %rdi
100019f0f:	e8 ae 79 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100019f14:	4c 89 e7	movq	%r12, %rdi
100019f17:	e8 02 81 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019f1c:	48 89 03	movq	%rax, (%rbx)
100019f1f:	e9 9c f7 ff ff	jmp	0x1000196c0
100019f24:	4c 89 e7	movq	%r12, %rdi
100019f27:	e8 f2 80 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019f2c:	49 89 c6	movq	%rax, %r14
100019f2f:	48 63 d3	movslq	%ebx, %rdx
100019f32:	48 8d 35 3e 10 03 00	leaq	200766(%rip), %rsi ## literal pool for: "error"
100019f39:	48 89 c7	movq	%rax, %rdi
100019f3c:	e8 43 81 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100019f41:	31 db	xorl	%ebx, %ebx
100019f43:	4d 85 f6	testq	%r14, %r14
100019f46:	0f 84 7c f7 ff ff	je	0x1000196c8
100019f4c:	4d 89 75 00	movq	%r14, (%r13)
100019f50:	e9 73 f7 ff ff	jmp	0x1000196c8
100019f55:	4c 89 ff	movq	%r15, %rdi
100019f58:	e8 26 48 00 00	callq	0x10001e783
100019f5d:	e9 66 f7 ff ff	jmp	0x1000196c8
100019f62:	49 8d 46 8e	leaq	-114(%r14), %rax
100019f66:	48 83 f8 02	cmpq	$2, %rax
100019f6a:	0f 82 fa 00 00 00	jb	0x10001a06a
100019f70:	49 83 fe 56	cmpq	$86, %r14
100019f74:	0f 84 9e 01 00 00	je	0x10001a118
100019f7a:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
100019f81:	49 83 fe 6f	cmpq	$111, %r14
100019f85:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
100019f8c:	0f 85 99 03 00 00	jne	0x10001a32b
100019f92:	83 bd e8 fe ff ff 00	cmpl	$0, -280(%rbp)
100019f99:	0f 8e 00 03 00 00	jle	0x10001a29f
100019f9f:	83 bd e8 fe ff ff 4b	cmpl	$75, -280(%rbp)
100019fa6:	0f 85 41 03 00 00	jne	0x10001a2ed
100019fac:	48 8d 15 8e 0b 03 00	leaq	199566(%rip), %rdx ## literal pool for: "LaunchServices returned a bundle URL that does not match with the LoginItem's known association."
100019fb3:	4c 89 ff	movq	%r15, %rdi
100019fb6:	be 04 00 00 00	movl	$4, %esi
100019fbb:	e9 24 03 00 00	jmp	0x10001a2e4
100019fc0:	4c 89 e7	movq	%r12, %rdi
100019fc3:	e8 56 80 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100019fc8:	49 89 c7	movq	%rax, %r15
100019fcb:	48 8b 85 18 ff ff ff	movq	-232(%rbp), %rax
100019fd2:	4c 89 38	movq	%r15, (%rax)
100019fd5:	e9 e6 f6 ff ff	jmp	0x1000196c0
100019fda:	89 c7	movl	%eax, %edi
100019fdc:	e8 58 fd fe ff	callq	0x100009d39
100019fe1:	85 c0	testl	%eax, %eax
100019fe3:	0f 85 06 04 00 00	jne	0x10001a3ef
100019fe9:	41 8b 8f 04 05 00 00	movl	1284(%r15), %ecx
100019ff0:	48 8d 15 d6 12 03 00	leaq	201430(%rip), %rdx ## literal pool for: "Cannot set configure key endpoint on service: service has dext checkin port %#x"
100019ff7:	4c 89 ff	movq	%r15, %rdi
100019ffa:	be 03 00 00 00	movl	$3, %esi
100019fff:	31 c0	xorl	%eax, %eax
10001a001:	e8 b4 bf ff ff	callq	0x100015fba
10001a006:	e9 21 e6 ff ff	jmp	0x10001862c
10001a00b:	49 83 fe 08	cmpq	$8, %r14
10001a00f:	0f 84 57 02 00 00	je	0x10001a26c
10001a015:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
10001a01c:	49 83 fe 20	cmpq	$32, %r14
10001a020:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
10001a027:	0f 85 fe 02 00 00	jne	0x10001a32b
10001a02d:	49 8b 87 f0 00 00 00	movq	240(%r15), %rax
10001a034:	48 85 c0	testq	%rax, %rax
10001a037:	4c 89 f9	movq	%r15, %rcx
10001a03a:	48 0f 45 c8	cmovneq	%rax, %rcx
10001a03e:	8b 81 a4 02 00 00	movl	676(%rcx), %eax
10001a044:	ff c0	incl	%eax
10001a046:	83 f8 02	cmpl	$2, %eax
10001a049:	0f 82 dc 02 00 00	jb	0x10001a32b
10001a04f:	48 8d 15 4b 0c 03 00	leaq	199755(%rip), %rdx ## literal pool for: "Service could not notify controller."
10001a056:	4c 89 ff	movq	%r15, %rdi
10001a059:	be 04 00 00 00	movl	$4, %esi
10001a05e:	31 c0	xorl	%eax, %eax
10001a060:	e8 55 bf ff ff	callq	0x100015fba
10001a065:	e9 ba 02 00 00	jmp	0x10001a324
10001a06a:	49 8b 87 e8 00 00 00	movq	232(%r15), %rax
10001a071:	8b 58 30	movl	48(%rax), %ebx
10001a074:	48 8b bd e8 fe ff ff	movq	-280(%rbp), %rdi
10001a07b:	e8 8e 80 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001a080:	85 db	testl	%ebx, %ebx
10001a082:	0f 84 ed 01 00 00	je	0x10001a275
10001a088:	49 8b 8f e8 00 00 00	movq	232(%r15), %rcx
10001a08f:	44 8b 49 30	movl	48(%rcx), %r9d
10001a093:	48 8d 15 91 0b 03 00	leaq	199569(%rip), %rdx ## literal pool for: "Could not find uid associated with service: %d: %s %u"
10001a09a:	4c 89 ff	movq	%r15, %rdi
10001a09d:	be 04 00 00 00	movl	$4, %esi
10001a0a2:	48 8b 8d e8 fe ff ff	movq	-280(%rbp), %rcx
10001a0a9:	49 89 c0	movq	%rax, %r8
10001a0ac:	31 c0	xorl	%eax, %eax
10001a0ae:	e8 07 bf ff ff	callq	0x100015fba
10001a0b3:	e9 65 02 00 00	jmp	0x10001a31d
10001a0b8:	49 0f ba a7 0d 05 00 00 21	btq	$33, 1293(%r15)
10001a0c1:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
10001a0c8:	0f 83 5d 02 00 00	jae	0x10001a32b
10001a0ce:	48 8d 15 33 0d 03 00	leaq	199987(%rip), %rdx ## literal pool for: "Bundle is not supported by the OS. Removing."
10001a0d5:	4c 89 ff	movq	%r15, %rdi
10001a0d8:	be 03 00 00 00	movl	$3, %esi
10001a0dd:	31 c0	xorl	%eax, %eax
10001a0df:	e8 d6 be ff ff	callq	0x100015fba
10001a0e4:	41 80 8f 64 01 00 00 10	orb	$16, 356(%r15)
10001a0ec:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
10001a0f3:	4c 89 fe	movq	%r15, %rsi
10001a0f6:	48 81 c6 18 05 00 00	addq	$1304, %rsi
10001a0fd:	ba 01 00 00 00	movl	$1, %edx
10001a102:	e8 a4 a2 00 00	callq	0x1000243ab
10001a107:	e9 18 02 00 00	jmp	0x10001a324
10001a10c:	48 8d 15 de 0b 03 00	leaq	199646(%rip), %rdx ## literal pool for: "FairPlay decryption failed on binary."
10001a113:	e9 c4 01 00 00	jmp	0x10001a2dc
10001a118:	49 8b 87 28 03 00 00	movq	808(%r15), %rax
10001a11f:	48 89 85 d8 fe ff ff	movq	%rax, -296(%rbp)
10001a126:	48 85 c0	testq	%rax, %rax
10001a129:	0f 84 a6 01 00 00	je	0x10001a2d5
10001a12f:	66 0f 6f 05 49 91 02 00	movdqa	168265(%rip), %xmm0
10001a137:	66 0f 7f 45 90	movdqa	%xmm0, -112(%rbp)
10001a13c:	66 0f 7f 45 80	movdqa	%xmm0, -128(%rbp)
10001a141:	66 0f 7f 85 70 ff ff ff	movdqa	%xmm0, -144(%rbp)
10001a149:	66 0f 7f 85 60 ff ff ff	movdqa	%xmm0, -160(%rbp)
10001a151:	66 0f 7f 85 50 ff ff ff	movdqa	%xmm0, -176(%rbp)
10001a159:	66 0f 7f 85 40 ff ff ff	movdqa	%xmm0, -192(%rbp)
10001a161:	66 0f 7f 85 30 ff ff ff	movdqa	%xmm0, -208(%rbp)
10001a169:	66 0f 7f 85 20 ff ff ff	movdqa	%xmm0, -224(%rbp)
10001a171:	4c 8b b5 d8 fe ff ff	movq	-296(%rbp), %r14
10001a178:	4c 89 f7	movq	%r14, %rdi
10001a17b:	e8 6c 78 fe ff	callq	0x1000019ec
10001a180:	85 c0	testl	%eax, %eax
10001a182:	0f 84 c2 00 00 00	je	0x10001a24a
10001a188:	bb 80 00 00 00	movl	$128, %ebx
10001a18d:	48 8d 85 20 ff ff ff	leaq	-224(%rbp), %rax
10001a194:	48 89 85 e0 fe ff ff	movq	%rax, -288(%rbp)
10001a19b:	45 31 ed	xorl	%r13d, %r13d
10001a19e:	4c 89 f7	movq	%r14, %rdi
10001a1a1:	44 89 ee	movl	%r13d, %esi
10001a1a4:	e8 4c 78 fe ff	callq	0x1000019f5
10001a1a9:	48 83 fb 02	cmpq	$2, %rbx
10001a1ad:	72 6a	jb	0x10001a219
10001a1af:	89 c1	movl	%eax, %ecx
10001a1b1:	81 e1 ff ff ff fe	andl	$4278190079, %ecx
10001a1b7:	8d 51 ff	leal	-1(%rcx), %edx
10001a1ba:	4c 8d 05 e0 0c 03 00	leaq	199904(%rip), %r8 ## literal pool for: "(invalid)"
10001a1c1:	83 fa 11	cmpl	$17, %edx
10001a1c4:	4c 8b b5 e0 fe ff ff	movq	-288(%rbp), %r14
10001a1cb:	77 26	ja	0x10001a1f3
10001a1cd:	0f ba e0 18	btl	$24, %eax
10001a1d1:	89 c9	movl	%ecx, %ecx
10001a1d3:	48 8d 15 66 0b 04 00	leaq	265062(%rip), %rdx
10001a1da:	48 8d 0c ca	leaq	(%rdx,%rcx,8), %rcx
10001a1de:	48 63 d0	movslq	%eax, %rdx
10001a1e1:	48 8d 35 f8 0b 04 00	leaq	265208(%rip), %rsi
10001a1e8:	48 8d 14 d6	leaq	(%rsi,%rdx,8), %rdx
10001a1ec:	48 0f 42 d1	cmovbq	%rcx, %rdx
10001a1f0:	4c 8b 02	movq	(%rdx), %r8
10001a1f3:	4c 89 f7	movq	%r14, %rdi
10001a1f6:	48 89 de	movq	%rbx, %rsi
10001a1f9:	48 8d 15 55 0b 03 00	leaq	199509(%rip), %rdx ## literal pool for: "%u:%s "
10001a200:	89 c1	movl	%eax, %ecx
10001a202:	31 c0	xorl	%eax, %eax
10001a204:	e8 f9 7b 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001a209:	48 63 c8	movslq	%eax, %rcx
10001a20c:	48 8d 43 ff	leaq	-1(%rbx), %rax
10001a210:	48 39 cb	cmpq	%rcx, %rbx
10001a213:	48 0f 47 c1	cmovaq	%rcx, %rax
10001a217:	eb 09	jmp	0x10001a222
10001a219:	31 c0	xorl	%eax, %eax
10001a21b:	4c 8b b5 e0 fe ff ff	movq	-288(%rbp), %r14
10001a222:	49 01 c6	addq	%rax, %r14
10001a225:	4c 89 b5 e0 fe ff ff	movq	%r14, -288(%rbp)
10001a22c:	48 29 c3	subq	%rax, %rbx
10001a22f:	41 ff c5	incl	%r13d
10001a232:	4c 8b b5 d8 fe ff ff	movq	-296(%rbp), %r14
10001a239:	4c 89 f7	movq	%r14, %rdi
10001a23c:	e8 ab 77 fe ff	callq	0x1000019ec
10001a241:	41 39 c5	cmpl	%eax, %r13d
10001a244:	0f 82 54 ff ff ff	jb	0x10001a19e
10001a24a:	48 8d 15 0b 0b 03 00	leaq	199435(%rip), %rdx ## literal pool for: "Program specified by service does not contain one of the requested architectures: %s"
10001a251:	48 8d 8d 20 ff ff ff	leaq	-224(%rbp), %rcx
10001a258:	4c 89 ff	movq	%r15, %rdi
10001a25b:	be 03 00 00 00	movl	$3, %esi
10001a260:	31 c0	xorl	%eax, %eax
10001a262:	e8 53 bd ff ff	callq	0x100015fba
10001a267:	e9 b1 00 00 00	jmp	0x10001a31d
10001a26c:	48 8d 15 a4 0a 03 00	leaq	199332(%rip), %rdx ## literal pool for: "Program specified by service is not a Mach-O executable file."
10001a273:	eb 67	jmp	0x10001a2dc
10001a275:	4d 8b 8f c0 02 00 00	movq	704(%r15), %r9
10001a27c:	49 8b 8f c8 02 00 00	movq	712(%r15), %rcx
10001a283:	48 89 0c 24	movq	%rcx, (%rsp)
10001a287:	48 8d 15 d3 09 03 00	leaq	199123(%rip), %rdx ## literal pool for: "Could not find user/group associated with service: %d: %s %s/%s"
10001a28e:	4c 89 ff	movq	%r15, %rdi
10001a291:	be 04 00 00 00	movl	$4, %esi
10001a296:	48 8b 8d e8 fe ff ff	movq	-280(%rbp), %rcx
10001a29d:	eb 74	jmp	0x10001a313
10001a29f:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
10001a2a6:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
10001a2ad:	79 7c	jns	0x10001a32b
10001a2af:	4d 8b 87 58 02 00 00	movq	600(%r15), %r8
10001a2b6:	48 8d 15 2c 09 03 00	leaq	198956(%rip), %rdx ## literal pool for: "Could not resolve CFBundleIdentifier specified by service: %d: %s"
10001a2bd:	4c 89 ff	movq	%r15, %rdi
10001a2c0:	be 04 00 00 00	movl	$4, %esi
10001a2c5:	48 8b 8d e8 fe ff ff	movq	-280(%rbp), %rcx
10001a2cc:	31 c0	xorl	%eax, %eax
10001a2ce:	e8 e7 bc ff ff	callq	0x100015fba
10001a2d3:	eb 4f	jmp	0x10001a324
10001a2d5:	48 8d 15 d5 0a 03 00	leaq	199381(%rip), %rdx ## literal pool for: "Program specified by service does not contain any valid architectures for this system."
10001a2dc:	4c 89 ff	movq	%r15, %rdi
10001a2df:	be 03 00 00 00	movl	$3, %esi
10001a2e4:	31 c0	xorl	%eax, %eax
10001a2e6:	e8 cf bc ff ff	callq	0x100015fba
10001a2eb:	eb 30	jmp	0x10001a31d
10001a2ed:	48 8b 9d e8 fe ff ff	movq	-280(%rbp), %rbx
10001a2f4:	89 df	movl	%ebx, %edi
10001a2f6:	e8 13 7e 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001a2fb:	4d 8b 8f 58 02 00 00	movq	600(%r15), %r9
10001a302:	48 8d 15 99 08 03 00	leaq	198809(%rip), %rdx ## literal pool for: "Could not find and/or execute program specified by service: %d: %s: %s"
10001a309:	4c 89 ff	movq	%r15, %rdi
10001a30c:	be 04 00 00 00	movl	$4, %esi
10001a311:	89 d9	movl	%ebx, %ecx
10001a313:	49 89 c0	movq	%rax, %r8
10001a316:	31 c0	xorl	%eax, %eax
10001a318:	e8 9d bc ff ff	callq	0x100015fba
10001a31d:	4c 8b ad f8 fe ff ff	movq	-264(%rbp), %r13
10001a324:	4c 8b b5 08 ff ff ff	movq	-248(%rbp), %r14
10001a32b:	44 89 f7	movl	%r14d, %edi
10001a32e:	e8 db 7d 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001a333:	48 8d 15 fb 0a 03 00	leaq	199419(%rip), %rdx ## literal pool for: "Service could not initialize: %s error: 0x%llx: %s"
10001a33a:	31 db	xorl	%ebx, %ebx
10001a33c:	4c 89 ff	movq	%r15, %rdi
10001a33f:	be 03 00 00 00	movl	$3, %esi
10001a344:	48 8b 8d c8 fe ff ff	movq	-312(%rbp), %rcx
10001a34b:	4d 89 f0	movq	%r14, %r8
10001a34e:	49 89 c1	movq	%rax, %r9
10001a351:	31 c0	xorl	%eax, %eax
10001a353:	e8 62 bc ff ff	callq	0x100015fba
10001a358:	e8 c3 27 ff ff	callq	0x10000cb20
10001a35d:	4c 89 74 24 10	movq	%r14, 16(%rsp)
10001a362:	48 8d 4d a0	leaq	-96(%rbp), %rcx
10001a366:	48 89 4c 24 08	movq	%rcx, 8(%rsp)
10001a36b:	4c 89 2c 24	movq	%r13, (%rsp)
10001a36f:	48 8d 15 f2 0a 03 00	leaq	199410(%rip), %rdx ## literal pool for: "initialization failure: %s: %s + %llu [%llu][%s]: 0x%llx"
10001a376:	4c 8d 05 0d df 02 00	leaq	188173(%rip), %r8 ## literal pool for: "xpcproxy"
10001a37d:	4c 89 ff	movq	%r15, %rdi
10001a380:	be 03 00 00 00	movl	$3, %esi
10001a385:	48 89 c1	movq	%rax, %rcx
10001a388:	4c 8b 8d d0 fe ff ff	movq	-304(%rbp), %r9
10001a38f:	31 c0	xorl	%eax, %eax
10001a391:	e8 24 bc ff ff	callq	0x100015fba
10001a396:	80 bd 07 ff ff ff 00	cmpb	$0, -249(%rbp)
10001a39d:	74 1e	je	0x10001a3bd
10001a39f:	48 8d 15 51 07 03 00	leaq	198481(%rip), %rdx ## literal pool for: "Service setup event to handle failure and will not launch until it fires."
10001a3a6:	4c 89 ff	movq	%r15, %rdi
10001a3a9:	be 05 00 00 00	movl	$5, %esi
10001a3ae:	31 c0	xorl	%eax, %eax
10001a3b0:	e8 05 bc ff ff	callq	0x100015fba
10001a3b5:	41 80 8f 0f 05 00 00 10	orb	$16, 1295(%r15)
10001a3bd:	4c 89 ff	movq	%r15, %rdi
10001a3c0:	48 8b b5 08 ff ff ff	movq	-248(%rbp), %rsi
10001a3c7:	48 8b 95 e8 fe ff ff	movq	-280(%rbp), %rdx
10001a3ce:	e8 ea 42 00 00	callq	0x10001e6bd
10001a3d3:	4c 89 e7	movq	%r12, %rdi
10001a3d6:	e8 43 7c 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001a3db:	48 8b 8d 18 ff ff ff	movq	-232(%rbp), %rcx
10001a3e2:	48 89 01	movq	%rax, (%rcx)
10001a3e5:	e9 de f2 ff ff	jmp	0x1000196c8
10001a3ea:	e8 83 73 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001a3ef:	89 c7	movl	%eax, %edi
10001a3f1:	e8 9a 60 02 00	callq	0x100040490
10001a3f6:	48 8d 3d 4d 0e 03 00	leaq	200269(%rip), %rdi ## literal pool for: "deferral event on service waiting for controller"
10001a3fd:	31 c0	xorl	%eax, %eax
10001a3ff:	e8 0e a0 01 00	callq	0x100034412
10001a404:	ae	scasb	%es:(%rdi), %al
10001a405:	e2 ff	loop	0x10001a406
10001a407:	ff 2f	ljmpl	*(%rdi)
10001a409:	e3 ff	jrcxz	0x10001a40a
10001a40b:	ff b5 e4 ff ff f6	pushq	-150994972(%rbp)
10001a411:	e4 ff	inb	$255, %al
10001a413:	ff 06	incl	(%rsi)
10001a415:	e1 ff	loope	0x10001a416
10001a417:	ff 37	pushq	(%rdi)
10001a419:	e5 ff	inl	$255, %eax
	.byte 0xff #bad opcode
10001a41c:	bd e7 ff ff 0e	movl	$251658215, %ebp
10001a421:	e8 ff ff 37 e8	callq	0xe839a425
	.byte 0xff #bad opcode
10001a427:	ff 60 e8	jmpq	*-24(%rax)
	.byte 0xff #bad opcode
10001a42b:	ff b7 e8 ff ff 60	pushq	1627389928(%rdi)
10001a431:	e9 ff ff 2c ea	jmp	0xea2ea435
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001a438:	f8	clc
10001a439:	e1 ff	loope	0x10001a43a
10001a43b:	ff c4	incl	%esp
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
10001a43f:	ff 93 ea ff ff 10	callq	*285212650(%rbx)
10001a445:	eb ff	jmp	0x10001a446
10001a447:	ff b2 eb ff ff 97	pushq	-1744830485(%rdx)
10001a44d:	ec	inb	%dx, %al
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001a450:	f8	clc
10001a451:	e1 ff	loope	0x10001a452
10001a453:	ff 14 ed ff ff 67 ed	callq	*-311951361(,%rbp,8)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001a45c:	de ed	fsubrp	%st, %st(5)
	.byte 0xff #bad opcode
10001a45f:	ff 6d ee	ljmpl	*-18(%rbp)
	.byte 0xff #bad opcode
10001a463:	ff 55 48	callq	*72(%rbp)
10001a466:	89 e5	movl	%esp, %ebp
10001a468:	41 57	pushq	%r15
10001a46a:	41 56	pushq	%r14
10001a46c:	41 55	pushq	%r13
10001a46e:	41 54	pushq	%r12
10001a470:	53	pushq	%rbx
10001a471:	48 83 ec 28	subq	$40, %rsp
10001a475:	48 89 4d c0	movq	%rcx, -64(%rbp)
10001a479:	49 89 d5	movq	%rdx, %r13
10001a47c:	41 89 f6	movl	%esi, %r14d
10001a47f:	e8 a0 f4 01 00	callq	0x100039924
10001a484:	8b 40 14	movl	20(%rax), %eax
10001a487:	89 05 c3 8c 04 00	movl	%eax, 298179(%rip)
10001a48d:	e8 0b 0b 01 00	callq	0x10002af9d
10001a492:	48 89 05 87 8c 04 00	movq	%rax, 298119(%rip)
10001a499:	48 8d 5d cc	leaq	-52(%rbp), %rbx
10001a49d:	c7 03 ff ff ff ff	movl	$4294967295, (%rbx)
10001a4a3:	4c 89 ef	movq	%r13, %rdi
10001a4a6:	48 89 de	movq	%rbx, %rsi
10001a4a9:	e8 c2 44 00 00	callq	0x10001e970
10001a4ae:	48 89 c1	movq	%rax, %rcx
10001a4b1:	8b 03	movl	(%rbx), %eax
10001a4b3:	45 31 ff	xorl	%r15d, %r15d
10001a4b6:	83 f8 24	cmpl	$36, %eax
10001a4b9:	0f 84 0c 06 00 00	je	0x10001aacb
10001a4bf:	3d 87 00 00 00	cmpl	$135, %eax
10001a4c4:	75 7c	jne	0x10001a542
10001a4c6:	41 81 fe 2d 01 00 00	cmpl	$301, %r14d
10001a4cd:	75 73	jne	0x10001a542
10001a4cf:	48 8d 55 cc	leaq	-52(%rbp), %rdx
10001a4d3:	4c 89 ef	movq	%r13, %rdi
10001a4d6:	be 01 00 00 00	movl	$1, %esi
10001a4db:	e8 3e 0b 01 00	callq	0x10002b01e
10001a4e0:	48 8d 0d 51 8b 04 00	leaq	297809(%rip), %rcx
10001a4e7:	48 85 c0	testq	%rax, %rax
10001a4ea:	74 07	je	0x10001a4f3
10001a4ec:	48 89 05 2d 8c 04 00	movq	%rax, 298029(%rip)
10001a4f3:	48 89 4d d0	movq	%rcx, -48(%rbp)
10001a4f7:	4c 8b a1 e8 00 00 00	movq	232(%rcx), %r12
10001a4fe:	4c 89 e7	movq	%r12, %rdi
10001a501:	e8 56 0c 01 00	callq	0x10002b15c
10001a506:	49 89 c6	movq	%rax, %r14
10001a509:	48 3b 05 80 db 03 00	cmpq	252800(%rip), %rax
10001a510:	0f 85 85 00 00 00	jne	0x10001a59b
10001a516:	48 8d 55 bc	leaq	-68(%rbp), %rdx
10001a51a:	c7 02 00 00 00 00	movl	$0, (%rdx)
10001a520:	4c 89 ef	movq	%r13, %rdi
10001a523:	be 01 00 00 00	movl	$1, %esi
10001a528:	e8 f1 0a 01 00	callq	0x10002b01e
10001a52d:	48 85 c0	testq	%rax, %rax
10001a530:	74 57	je	0x10001a589
10001a532:	49 89 c4	movq	%rax, %r12
10001a535:	48 89 c7	movq	%rax, %rdi
10001a538:	e8 1f 0c 01 00	callq	0x10002b15c
10001a53d:	49 89 c6	movq	%rax, %r14
10001a540:	eb 59	jmp	0x10001a59b
10001a542:	41 89 c7	movl	%eax, %r15d
10001a545:	48 85 c9	testq	%rcx, %rcx
10001a548:	0f 84 7d 05 00 00	je	0x10001aacb
10001a54e:	41 bf 2d 00 00 00	movl	$45, %r15d
10001a554:	41 8d 86 d2 fe ff ff	leal	-302(%r14), %eax
10001a55b:	83 f8 08	cmpl	$8, %eax
10001a55e:	0f 82 67 05 00 00	jb	0x10001aacb
10001a564:	41 81 fe 2c 01 00 00	cmpl	$300, %r14d
10001a56b:	0f 84 5a 05 00 00	je	0x10001aacb
10001a571:	41 81 fe 2d 01 00 00	cmpl	$301, %r14d
10001a578:	0f 84 75 ff ff ff	je	0x10001a4f3
10001a57e:	41 bf 21 00 00 00	movl	$33, %r15d
10001a584:	e9 42 05 00 00	jmp	0x10001aacb
10001a589:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a58d:	4c 8b a0 e8 00 00 00	movq	232(%rax), %r12
10001a594:	4c 8d 35 9d 7d 04 00	leaq	294301(%rip), %r14
10001a59b:	4c 89 ef	movq	%r13, %rdi
10001a59e:	e8 81 7a 02 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10001a5a3:	41 bf 16 00 00 00	movl	$22, %r15d
10001a5a9:	84 c0	testb	%al, %al
10001a5ab:	0f 84 1a 05 00 00	je	0x10001aacb
10001a5b1:	48 8d 35 64 10 03 00	leaq	200804(%rip), %rsi ## literal pool for: "outgsk"
10001a5b8:	4c 89 ef	movq	%r13, %rdi
10001a5bb:	e8 a0 7a 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10001a5c0:	41 bf 2d 00 00 00	movl	$45, %r15d
10001a5c6:	48 83 f8 1a	cmpq	$26, %rax
10001a5ca:	77 18	ja	0x10001a5e4
10001a5cc:	31 d2	xorl	%edx, %edx
10001a5ce:	48 8d 0d 1b 05 00 00	leaq	1307(%rip), %rcx
10001a5d5:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
10001a5d9:	48 01 c8	addq	%rcx, %rax
10001a5dc:	ff e0	jmpq	*%rax
10001a5de:	41 bf 7e 00 00 00	movl	$126, %r15d
10001a5e4:	48 8d 35 38 10 03 00	leaq	200760(%rip), %rsi ## literal pool for: "ingsk"
10001a5eb:	4c 89 ef	movq	%r13, %rdi
10001a5ee:	e8 6d 7a 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10001a5f3:	48 85 c0	testq	%rax, %rax
10001a5f6:	0f 84 cf 04 00 00	je	0x10001aacb
10001a5fc:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a600:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a607:	b8 87 00 00 00	movl	$135, %eax
10001a60c:	44 0f 45 f8	cmovnel	%eax, %r15d
10001a610:	e9 b6 04 00 00	jmp	0x10001aacb
10001a615:	41 bf 87 00 00 00	movl	$135, %r15d
10001a61b:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a61f:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a626:	75 bc	jne	0x10001a5e4
10001a628:	48 8b 4d d0	movq	-48(%rbp), %rcx
10001a62c:	8b 81 f0 03 00 00	movl	1008(%rcx), %eax
10001a632:	83 f8 02	cmpl	$2, %eax
10001a635:	0f 84 d9 02 00 00	je	0x10001a914
10001a63b:	85 c0	testl	%eax, %eax
10001a63d:	0f 85 db 02 00 00	jne	0x10001a91e
10001a643:	31 ff	xorl	%edi, %edi
10001a645:	e9 08 02 00 00	jmp	0x10001a852
10001a64a:	4c 3b 35 47 da 03 00	cmpq	252487(%rip), %r14
10001a651:	0f 84 8d 02 00 00	je	0x10001a8e4
10001a657:	4c 3b 35 42 da 03 00	cmpq	252482(%rip), %r14
10001a65e:	74 0d	je	0x10001a66d
10001a660:	4c 3b 35 41 da 03 00	cmpq	252481(%rip), %r14
10001a667:	0f 85 77 ff ff ff	jne	0x10001a5e4
10001a66d:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a671:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
10001a678:	8b 78 30	movl	48(%rax), %edi
10001a67b:	e9 d2 01 00 00	jmp	0x10001a852
10001a680:	e8 11 74 02 00	callq	0x100041a96 ## symbol stub for: _getpid
10001a685:	48 63 f8	movslq	%eax, %rdi
10001a688:	e9 c5 01 00 00	jmp	0x10001a852
10001a68d:	4c 89 e7	movq	%r12, %rdi
10001a690:	e8 c7 0a 01 00	callq	0x10002b15c
10001a695:	48 3b 05 fc d9 03 00	cmpq	252412(%rip), %rax
10001a69c:	0f 84 4e 02 00 00	je	0x10001a8f0
10001a6a2:	4c 89 e7	movq	%r12, %rdi
10001a6a5:	e8 c6 0a 01 00	callq	0x10002b170
10001a6aa:	48 85 c0	testq	%rax, %rax
10001a6ad:	0f 84 56 02 00 00	je	0x10001a909
10001a6b3:	48 89 c7	movq	%rax, %rdi
10001a6b6:	e9 3c 02 00 00	jmp	0x10001a8f7
10001a6bb:	41 bf 87 00 00 00	movl	$135, %r15d
10001a6c1:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a6c5:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a6cc:	0f 85 12 ff ff ff	jne	0x10001a5e4
10001a6d2:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a6d6:	8b b8 0d 05 00 00	movl	1293(%rax), %edi
10001a6dc:	c1 ef 02	shrl	$2, %edi
10001a6df:	e9 6b 01 00 00	jmp	0x10001a84f
10001a6e4:	41 bf 87 00 00 00	movl	$135, %r15d
10001a6ea:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a6ee:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a6f5:	0f 85 e9 fe ff ff	jne	0x10001a5e4
10001a6fb:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a6ff:	8b b8 08 03 00 00	movl	776(%rax), %edi
10001a705:	e9 48 01 00 00	jmp	0x10001a852
10001a70a:	41 bf 87 00 00 00	movl	$135, %r15d
10001a710:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a714:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a71b:	0f 85 c3 fe ff ff	jne	0x10001a5e4
10001a721:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a725:	8b b8 e0 02 00 00	movl	736(%rax), %edi
10001a72b:	e9 22 01 00 00	jmp	0x10001a852
10001a730:	41 bf 87 00 00 00	movl	$135, %r15d
10001a736:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a73a:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a741:	0f 85 9d fe ff ff	jne	0x10001a5e4
10001a747:	31 ff	xorl	%edi, %edi
10001a749:	31 f6	xorl	%esi, %esi
10001a74b:	31 d2	xorl	%edx, %edx
10001a74d:	e8 c0 78 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10001a752:	49 89 c4	movq	%rax, %r12
10001a755:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a759:	48 8b 98 80 03 00 00	movq	896(%rax), %rbx
10001a760:	48 85 db	testq	%rbx, %rbx
10001a763:	0f 84 98 01 00 00	je	0x10001a901
10001a769:	4c 8d 73 18	leaq	24(%rbx), %r14
10001a76d:	4c 89 f7	movq	%r14, %rdi
10001a770:	be 3d 00 00 00	movl	$61, %esi
10001a775:	e8 f4 76 02 00	callq	0x100041e6e ## symbol stub for: _strrchr
10001a77a:	49 89 c7	movq	%rax, %r15
10001a77d:	c6 00 00	movb	$0, (%rax)
10001a780:	48 8d 50 01	leaq	1(%rax), %rdx
10001a784:	4c 89 e7	movq	%r12, %rdi
10001a787:	4c 89 f6	movq	%r14, %rsi
10001a78a:	e8 0d 79 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001a78f:	41 c6 07 3d	movb	$61, (%r15)
10001a793:	48 8b 1b	movq	(%rbx), %rbx
10001a796:	eb c8	jmp	0x10001a760
10001a798:	bf 20 00 00 00	movl	$32, %edi
10001a79d:	e9 b0 00 00 00	jmp	0x10001a852
10001a7a2:	41 bf 87 00 00 00	movl	$135, %r15d
10001a7a8:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a7ac:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a7b3:	0f 85 2b fe ff ff	jne	0x10001a5e4
10001a7b9:	41 bf 03 00 00 00	movl	$3, %r15d
10001a7bf:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a7c3:	48 0f ba a0 0d 05 00 00 24	btq	$36, 1293(%rax)
10001a7cc:	0f 83 12 fe ff ff	jae	0x10001a5e4
10001a7d2:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a7d6:	0f b7 b8 d0 02 00 00	movzwl	720(%rax), %edi
10001a7dd:	eb 73	jmp	0x10001a852
10001a7df:	41 bf 87 00 00 00	movl	$135, %r15d
10001a7e5:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a7e9:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a7f0:	0f 85 ee fd ff ff	jne	0x10001a5e4
10001a7f6:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a7fa:	8b b8 0d 05 00 00	movl	1293(%rax), %edi
10001a800:	c1 ef 11	shrl	$17, %edi
10001a803:	eb 4a	jmp	0x10001a84f
10001a805:	41 bf 87 00 00 00	movl	$135, %r15d
10001a80b:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a80f:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a816:	0f 85 c8 fd ff ff	jne	0x10001a5e4
10001a81c:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a820:	8b b8 0d 05 00 00	movl	1293(%rax), %edi
10001a826:	c1 ef 08	shrl	$8, %edi
10001a829:	eb 24	jmp	0x10001a84f
10001a82b:	41 bf 87 00 00 00	movl	$135, %r15d
10001a831:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a835:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a83c:	0f 85 a2 fd ff ff	jne	0x10001a5e4
10001a842:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a846:	8b b8 0d 05 00 00	movl	1293(%rax), %edi
10001a84c:	c1 ef 0b	shrl	$11, %edi
10001a84f:	83 e7 01	andl	$1, %edi
10001a852:	e8 75 78 02 00	callq	0x1000420cc ## symbol stub for: _xpc_int64_create
10001a857:	48 89 c2	movq	%rax, %rdx
10001a85a:	48 8d 35 c2 0d 03 00	leaq	200130(%rip), %rsi ## literal pool for: "ingsk"
10001a861:	4c 89 ef	movq	%r13, %rdi
10001a864:	49 89 d6	movq	%rdx, %r14
10001a867:	e8 f4 77 02 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10001a86c:	48 85 c0	testq	%rax, %rax
10001a86f:	0f 84 22 02 00 00	je	0x10001aa97
10001a875:	48 89 c3	movq	%rax, %rbx
10001a878:	41 bf 87 00 00 00	movl	$135, %r15d
10001a87e:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a882:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
10001a889:	74 16	je	0x10001a8a1
10001a88b:	4d 85 f6	testq	%r14, %r14
10001a88e:	0f 84 37 02 00 00	je	0x10001aacb
10001a894:	4c 89 f7	movq	%r14, %rdi
10001a897:	e8 60 78 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001a89c:	e9 2a 02 00 00	jmp	0x10001aacb
10001a8a1:	48 8d 35 81 0d 03 00	leaq	200065(%rip), %rsi ## literal pool for: "in"
10001a8a8:	4c 89 ef	movq	%r13, %rdi
10001a8ab:	e8 bc 77 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10001a8b0:	48 85 c0	testq	%rax, %rax
10001a8b3:	0f 84 de 01 00 00	je	0x10001aa97
10001a8b9:	41 bf 2d 00 00 00	movl	$45, %r15d
10001a8bf:	48 83 c3 fe	addq	$-2, %rbx
10001a8c3:	48 83 fb 15	cmpq	$21, %rbx
10001a8c7:	77 c2	ja	0x10001a88b
10001a8c9:	49 89 c4	movq	%rax, %r12
10001a8cc:	48 8d 05 89 02 00 00	leaq	649(%rip), %rax
10001a8d3:	48 63 0c 98	movslq	(%rax,%rbx,4), %rcx
10001a8d7:	48 01 c1	addq	%rax, %rcx
10001a8da:	ff e1	jmpq	*%rcx
10001a8dc:	41 bf 7e 00 00 00	movl	$126, %r15d
10001a8e2:	eb a7	jmp	0x10001a88b
10001a8e4:	e8 d7 71 02 00	callq	0x100041ac0 ## symbol stub for: _getuid
10001a8e9:	89 c7	movl	%eax, %edi
10001a8eb:	e9 62 ff ff ff	jmp	0x10001a852
10001a8f0:	48 8d 3d 75 cd 02 00	leaq	183669(%rip), %rdi ## literal pool for: "System"
10001a8f7:	e8 18 78 02 00	callq	0x100042114 ## symbol stub for: _xpc_string_create
10001a8fc:	e9 56 ff ff ff	jmp	0x10001a857
10001a901:	4c 89 e2	movq	%r12, %rdx
10001a904:	e9 51 ff ff ff	jmp	0x10001a85a
10001a909:	41 bf 7d 00 00 00	movl	$125, %r15d
10001a90f:	e9 d0 fc ff ff	jmp	0x10001a5e4
10001a914:	bf 0b 00 00 00	movl	$11, %edi
10001a919:	e9 34 ff ff ff	jmp	0x10001a852
10001a91e:	48 63 b9 0c 04 00 00	movslq	1036(%rcx), %rdi
10001a925:	e9 28 ff ff ff	jmp	0x10001a852
10001a92a:	4c 89 e7	movq	%r12, %rdi
10001a92d:	e8 94 77 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001a932:	41 bf 16 00 00 00	movl	$22, %r15d
10001a938:	48 3b 05 d1 d7 03 00	cmpq	251857(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001a93f:	0f 85 46 ff ff ff	jne	0x10001a88b
10001a945:	4c 89 e7	movq	%r12, %rdi
10001a948:	e8 85 77 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001a94d:	31 c9	xorl	%ecx, %ecx
10001a94f:	48 85 c0	testq	%rax, %rax
10001a952:	0f 95 c1	setne	%cl
10001a955:	48 8b 55 d0	movq	-48(%rbp), %rdx
10001a959:	48 8b 82 0d 05 00 00	movq	1293(%rdx), %rax
10001a960:	48 83 e0 fb	andq	$-5, %rax
10001a964:	48 8d 04 88	leaq	(%rax,%rcx,4), %rax
10001a968:	e9 f8 00 00 00	jmp	0x10001aa65
10001a96d:	4c 89 e7	movq	%r12, %rdi
10001a970:	e8 51 77 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001a975:	41 bf 16 00 00 00	movl	$22, %r15d
10001a97b:	48 3b 05 8e d7 03 00	cmpq	251790(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001a982:	0f 85 03 ff ff ff	jne	0x10001a88b
10001a988:	48 8b 45 d0	movq	-48(%rbp), %rax
10001a98c:	83 b8 c8 03 00 00 00	cmpl	$0, 968(%rax)
10001a993:	0f 84 fe 00 00 00	je	0x10001aa97
10001a999:	48 8b 5d d0	movq	-48(%rbp), %rbx
10001a99d:	48 83 bb 00 03 00 00 00	cmpq	$0, 768(%rbx)
10001a9a5:	0f 85 3d 01 00 00	jne	0x10001aae8
10001a9ab:	4c 89 e7	movq	%r12, %rdi
10001a9ae:	e8 1f 77 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001a9b3:	89 83 08 03 00 00	movl	%eax, 776(%rbx)
10001a9b9:	e9 d9 00 00 00	jmp	0x10001aa97
10001a9be:	4c 89 e7	movq	%r12, %rdi
10001a9c1:	e8 00 77 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001a9c6:	41 bf 16 00 00 00	movl	$22, %r15d
10001a9cc:	48 3b 05 3d d7 03 00	cmpq	251709(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001a9d3:	0f 85 b2 fe ff ff	jne	0x10001a88b
10001a9d9:	4c 89 e7	movq	%r12, %rdi
10001a9dc:	e8 f1 76 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001a9e1:	48 8b 4d d0	movq	-48(%rbp), %rcx
10001a9e5:	89 81 e0 02 00 00	movl	%eax, 736(%rcx)
10001a9eb:	e9 a7 00 00 00	jmp	0x10001aa97
10001a9f0:	4c 89 e7	movq	%r12, %rdi
10001a9f3:	e8 ce 76 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001a9f8:	41 bf 16 00 00 00	movl	$22, %r15d
10001a9fe:	48 3b 05 0b d7 03 00	cmpq	251659(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001aa05:	0f 85 80 fe ff ff	jne	0x10001a88b
10001aa0b:	48 8b 5d d0	movq	-48(%rbp), %rbx
10001aa0f:	80 8b 11 05 00 00 10	orb	$16, 1297(%rbx)
10001aa16:	4c 89 e7	movq	%r12, %rdi
10001aa19:	e8 b4 76 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001aa1e:	66 89 83 d0 02 00 00	movw	%ax, 720(%rbx)
10001aa25:	eb 70	jmp	0x10001aa97
10001aa27:	4c 89 e7	movq	%r12, %rdi
10001aa2a:	e8 97 76 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001aa2f:	48 3b 05 da d6 03 00	cmpq	251610(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001aa36:	0f 84 a1 00 00 00	je	0x10001aadd
10001aa3c:	4c 89 e7	movq	%r12, %rdi
10001aa3f:	e8 8e 76 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001aa44:	31 c9	xorl	%ecx, %ecx
10001aa46:	48 85 c0	testq	%rax, %rax
10001aa49:	0f 95 c1	setne	%cl
10001aa4c:	48 c1 e1 11	shlq	$17, %rcx
10001aa50:	48 c7 c0 ff ff fd ff	movq	$-131073, %rax
10001aa57:	48 8b 55 d0	movq	-48(%rbp), %rdx
10001aa5b:	48 23 82 0d 05 00 00	andq	1293(%rdx), %rax
10001aa62:	48 09 c8	orq	%rcx, %rax
10001aa65:	48 89 82 0d 05 00 00	movq	%rax, 1293(%rdx)
10001aa6c:	eb 29	jmp	0x10001aa97
10001aa6e:	4c 89 e7	movq	%r12, %rdi
10001aa71:	e8 50 76 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001aa76:	48 3b 05 93 d6 03 00	cmpq	251539(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10001aa7d:	75 18	jne	0x10001aa97
10001aa7f:	4c 89 e7	movq	%r12, %rdi
10001aa82:	e8 4b 76 02 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10001aa87:	48 85 c0	testq	%rax, %rax
10001aa8a:	74 0b	je	0x10001aa97
10001aa8c:	48 8b 45 d0	movq	-48(%rbp), %rax
10001aa90:	80 88 0e 05 00 00 01	orb	$1, 1294(%rax)
10001aa97:	4c 89 ef	movq	%r13, %rdi
10001aa9a:	e8 7f 75 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001aa9f:	48 89 c3	movq	%rax, %rbx
10001aaa2:	4d 85 f6	testq	%r14, %r14
10001aaa5:	74 1a	je	0x10001aac1
10001aaa7:	48 8d 35 7e 0b 03 00	leaq	199550(%rip), %rsi ## literal pool for: "out"
10001aaae:	48 89 df	movq	%rbx, %rdi
10001aab1:	4c 89 f2	movq	%r14, %rdx
10001aab4:	e8 f5 75 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001aab9:	4c 89 f7	movq	%r14, %rdi
10001aabc:	e8 3b 76 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001aac1:	48 8b 45 c0	movq	-64(%rbp), %rax
10001aac5:	48 89 18	movq	%rbx, (%rax)
10001aac8:	45 31 ff	xorl	%r15d, %r15d
10001aacb:	44 89 f8	movl	%r15d, %eax
10001aace:	48 83 c4 28	addq	$40, %rsp
10001aad2:	5b	popq	%rbx
10001aad3:	41 5c	popq	%r12
10001aad5:	41 5d	popq	%r13
10001aad7:	41 5e	popq	%r14
10001aad9:	41 5f	popq	%r15
10001aadb:	5d	popq	%rbp
10001aadc:	c3	retq
10001aadd:	41 bf 16 00 00 00	movl	$22, %r15d
10001aae3:	e9 a3 fd ff ff	jmp	0x10001a88b
10001aae8:	e8 b9 59 02 00	callq	0x1000404a6
10001aaed:	0f 1f 00	nopl	(%rax)
10001aaf0:	6a fd	pushq	$-3
	.byte 0xff #bad opcode
10001aaf3:	ff 25 fb ff ff f4	jmpq	*-184549381(%rip)
10001aaf9:	fa	cli
	.byte 0xff #bad opcode
10001aafb:	ff 5a fb	lcalll	*-5(%rdx)
	.byte 0xff #bad opcode
10001aaff:	ff 90 fb ff ff f4	callq	*-184549381(%rax)
10001ab05:	fa	cli
	.byte 0xff #bad opcode
10001ab07:	ff 9d fb ff ff cb	lcalll	*-872415237(%rbp)
10001ab0d:	fb	sti
	.byte 0xff #bad opcode
10001ab0f:	ff f4	pushq	%rsp
10001ab11:	fb	sti
	.byte 0xff #bad opcode
10001ab13:	ff 53 fb	callq	*-5(%rbx)
	.byte 0xff #bad opcode
10001ab17:	ff 1a	lcalll	*(%rdx)
10001ab19:	fc	cld
	.byte 0xff #bad opcode
10001ab1b:	ff 40 fc	incl	-4(%rax)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab20:	ee	outb	%al, %dx
10001ab21:	fa	cli
	.byte 0xff #bad opcode
10001ab23:	ff a8 fc ff ff b2	ljmpl	*-1291845636(%rax)
10001ab29:	fc	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab2c:	ef	outl	%eax, %dx
10001ab2d:	fc	cld
	.byte 0xff #bad opcode
10001ab2f:	ff 15 fd ff ff f4	callq	*-184549379(%rip)
10001ab35:	fa	cli
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab38:	3b fd	cmpl	%ebp, %edi
	.byte 0xff #bad opcode
10001ab3b:	ff f4	pushq	%rsp
10001ab3d:	fa	cli
	.byte 0xff #bad opcode
10001ab3f:	ff f4	pushq	%rsp
10001ab41:	fa	cli
	.byte 0xff #bad opcode
10001ab43:	ff f4	pushq	%rsp
10001ab45:	fa	cli
	.byte 0xff #bad opcode
10001ab47:	ff f4	pushq	%rsp
10001ab49:	fa	cli
	.byte 0xff #bad opcode
10001ab4b:	ff f4	pushq	%rsp
10001ab4d:	fa	cli
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab50:	ee	outb	%al, %dx
10001ab51:	fa	cli
	.byte 0xff #bad opcode
10001ab53:	ff f4	pushq	%rsp
10001ab55:	fa	cli
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab58:	ee	outb	%al, %dx
10001ab59:	fa	cli
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab5c:	3b ff	cmpl	%edi, %edi
	.byte 0xff #bad opcode
10001ab5f:	ff 2f	ljmpl	*(%rdi)
10001ab61:	fd	std
	.byte 0xff #bad opcode
10001ab63:	ff 2f	ljmpl	*(%rdi)
10001ab65:	fd	std
	.byte 0xff #bad opcode
10001ab67:	ff 2f	ljmpl	*(%rdi)
10001ab69:	fd	std
	.byte 0xff #bad opcode
10001ab6b:	ff 2f	ljmpl	*(%rdi)
10001ab6d:	fd	std
	.byte 0xff #bad opcode
10001ab6f:	ff ce	decl	%esi
10001ab71:	fd	std
	.byte 0xff #bad opcode
10001ab73:	ff 11	callq	*(%rcx)
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10001ab77:	ff 2f	ljmpl	*(%rdi)
10001ab79:	fd	std
	.byte 0xff #bad opcode
10001ab7b:	ff 62 fe	jmpq	*-2(%rdx)
	.byte 0xff #bad opcode
10001ab7f:	ff 2f	ljmpl	*(%rdi)
10001ab81:	fd	std
	.byte 0xff #bad opcode
10001ab83:	ff 2f	ljmpl	*(%rdi)
10001ab85:	fd	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab88:	3b ff	cmpl	%edi, %edi
	.byte 0xff #bad opcode
10001ab8b:	ff 94 fe ff ff cb fe	callq	*-20185089(%rsi,%rdi,8)
	.byte 0xff #bad opcode
10001ab93:	ff 12	callq	*(%rdx)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001ab97:	ff 80 fd ff ff 80	incl	-2130706435(%rax)
10001ab9d:	fd	std
	.byte 0xff #bad opcode
10001ab9f:	ff 2f	ljmpl	*(%rdi)
10001aba1:	fd	std
	.byte 0xff #bad opcode
10001aba3:	ff 2f	ljmpl	*(%rdi)
10001aba5:	fd	std
	.byte 0xff #bad opcode
10001aba7:	ff 2f	ljmpl	*(%rdi)
10001aba9:	fd	std
	.byte 0xff #bad opcode
10001abab:	ff 80 fd ff ff 80	incl	-2130706435(%rax)
10001abb1:	fd	std
	.byte 0xff #bad opcode
10001abb3:	ff 55 48	callq	*72(%rbp)
10001abb6:	89 e5	movl	%esp, %ebp
10001abb8:	41 57	pushq	%r15
10001abba:	41 56	pushq	%r14
10001abbc:	53	pushq	%rbx
10001abbd:	50	pushq	%rax
10001abbe:	48 8d 1d 43 7b 04 00	leaq	293699(%rip), %rbx
10001abc5:	48 8b 03	movq	(%rbx), %rax
10001abc8:	48 85 c0	testq	%rax, %rax
10001abcb:	74 55	je	0x10001ac22
10001abcd:	8b b8 c8 03 00 00	movl	968(%rax), %edi
10001abd3:	85 ff	testl	%edi, %edi
10001abd5:	74 41	je	0x10001ac18
10001abd7:	be 13 00 00 00	movl	$19, %esi
10001abdc:	e8 2d 6f 02 00	callq	0x100041b0e ## symbol stub for: _kill
10001abe1:	85 c0	testl	%eax, %eax
10001abe3:	74 33	je	0x10001ac18
10001abe5:	4c 8b 33	movq	(%rbx), %r14
10001abe8:	e8 73 6b 02 00	callq	0x100041760 ## symbol stub for: ___error
10001abed:	44 8b 38	movl	(%rax), %r15d
10001abf0:	e8 6b 6b 02 00	callq	0x100041760 ## symbol stub for: ___error
10001abf5:	8b 38	movl	(%rax), %edi
10001abf7:	e8 42 72 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001abfc:	48 8d 15 0f f1 02 00	leaq	192783(%rip), %rdx ## literal pool for: "Could not send SIGCONT: %d: %s"
10001ac03:	4c 89 f7	movq	%r14, %rdi
10001ac06:	be 03 00 01 00	movl	$65539, %esi
10001ac0b:	44 89 f9	movl	%r15d, %ecx
10001ac0e:	49 89 c0	movq	%rax, %r8
10001ac11:	31 c0	xorl	%eax, %eax
10001ac13:	e8 a2 b3 ff ff	callq	0x100015fba
10001ac18:	48 8b 03	movq	(%rbx), %rax
10001ac1b:	80 a0 ea 04 00 00 fe	andb	$-2, 1258(%rax)
10001ac22:	48 8d 1d e7 7a 04 00	leaq	293607(%rip), %rbx
10001ac29:	48 8b 03	movq	(%rbx), %rax
10001ac2c:	48 85 c0	testq	%rax, %rax
10001ac2f:	74 55	je	0x10001ac86
10001ac31:	8b b8 c8 03 00 00	movl	968(%rax), %edi
10001ac37:	85 ff	testl	%edi, %edi
10001ac39:	74 41	je	0x10001ac7c
10001ac3b:	be 13 00 00 00	movl	$19, %esi
10001ac40:	e8 c9 6e 02 00	callq	0x100041b0e ## symbol stub for: _kill
10001ac45:	85 c0	testl	%eax, %eax
10001ac47:	74 33	je	0x10001ac7c
10001ac49:	4c 8b 33	movq	(%rbx), %r14
10001ac4c:	e8 0f 6b 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ac51:	44 8b 38	movl	(%rax), %r15d
10001ac54:	e8 07 6b 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ac59:	8b 38	movl	(%rax), %edi
10001ac5b:	e8 de 71 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001ac60:	48 8d 15 ab f0 02 00	leaq	192683(%rip), %rdx ## literal pool for: "Could not send SIGCONT: %d: %s"
10001ac67:	4c 89 f7	movq	%r14, %rdi
10001ac6a:	be 03 00 01 00	movl	$65539, %esi
10001ac6f:	44 89 f9	movl	%r15d, %ecx
10001ac72:	49 89 c0	movq	%rax, %r8
10001ac75:	31 c0	xorl	%eax, %eax
10001ac77:	e8 3e b3 ff ff	callq	0x100015fba
10001ac7c:	48 8b 03	movq	(%rbx), %rax
10001ac7f:	80 a0 ea 04 00 00 fe	andb	$-2, 1258(%rax)
10001ac86:	48 83 c4 08	addq	$8, %rsp
10001ac8a:	5b	popq	%rbx
10001ac8b:	41 5e	popq	%r14
10001ac8d:	41 5f	popq	%r15
10001ac8f:	5d	popq	%rbp
10001ac90:	c3	retq
10001ac91:	55	pushq	%rbp
10001ac92:	48 89 e5	movq	%rsp, %rbp
10001ac95:	48 89 fa	movq	%rdi, %rdx
10001ac98:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001ac9e:	85 f6	testl	%esi, %esi
10001aca0:	75 0c	jne	0x10001acae
10001aca2:	0f b7 82 13 05 00 00	movzwl	1299(%rdx), %eax
10001aca9:	83 e0 01	andl	$1, %eax
10001acac:	5d	popq	%rbp
10001acad:	c3	retq
10001acae:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001acb5:	48 8d 3d 00 8c 02 00	leaq	166912(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001acbc:	31 c0	xorl	%eax, %eax
10001acbe:	e8 4f 97 01 00	callq	0x100034412
10001acc3:	90	nop
10001acc4:	90	nop
10001acc5:	90	nop
10001acc6:	55	pushq	%rbp
10001acc7:	48 89 e5	movq	%rsp, %rbp
10001acca:	48 83 ec 10	subq	$16, %rsp
10001acce:	48 8d 45 fc	leaq	-4(%rbp), %rax
10001acd2:	89 38	movl	%edi, (%rax)
10001acd4:	be 04 00 00 00	movl	$4, %esi
10001acd9:	48 89 c7	movq	%rax, %rdi
10001acdc:	e8 98 46 ff ff	callq	0x10000f379
10001ace1:	48 89 c1	movq	%rax, %rcx
10001ace4:	48 ba 53 13 8c b7 b2 cf 21 35	movabsq	$3828569524732171091, %rdx
10001acee:	48 f7 e2	mulq	%rdx
10001acf1:	48 89 c8	movq	%rcx, %rax
10001acf4:	48 29 d0	subq	%rdx, %rax
10001acf7:	48 d1 e8	shrq	%rax
10001acfa:	48 01 d0	addq	%rdx, %rax
10001acfd:	48 c1 e8 05	shrq	$5, %rax
10001ad01:	48 6b c0 35	imulq	$53, %rax, %rax
10001ad05:	48 29 c1	subq	%rax, %rcx
10001ad08:	48 8d 05 81 81 04 00	leaq	295297(%rip), %rax
10001ad0f:	48 8b 04 c8	movq	(%rax,%rcx,8), %rax
10001ad13:	48 85 c0	testq	%rax, %rax
10001ad16:	74 14	je	0x10001ad2c
10001ad18:	8b 4d fc	movl	-4(%rbp), %ecx
10001ad1b:	39 88 c8 03 00 00	cmpl	%ecx, 968(%rax)
10001ad21:	74 0b	je	0x10001ad2e
10001ad23:	48 8b 40 08	movq	8(%rax), %rax
10001ad27:	48 85 c0	testq	%rax, %rax
10001ad2a:	75 ef	jne	0x10001ad1b
10001ad2c:	31 c0	xorl	%eax, %eax
10001ad2e:	48 83 c4 10	addq	$16, %rsp
10001ad32:	5d	popq	%rbp
10001ad33:	c3	retq
10001ad34:	55	pushq	%rbp
10001ad35:	48 89 e5	movq	%rsp, %rbp
10001ad38:	31 c0	xorl	%eax, %eax
10001ad3a:	5d	popq	%rbp
10001ad3b:	c3	retq
10001ad3c:	55	pushq	%rbp
10001ad3d:	48 89 e5	movq	%rsp, %rbp
10001ad40:	53	pushq	%rbx
10001ad41:	50	pushq	%rax
10001ad42:	48 89 fb	movq	%rdi, %rbx
10001ad45:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001ad4b:	85 f6	testl	%esi, %esi
10001ad4d:	75 35	jne	0x10001ad84
10001ad4f:	83 bb c8 03 00 00 00	cmpl	$0, 968(%rbx)
10001ad56:	75 25	jne	0x10001ad7d
10001ad58:	f6 83 64 01 00 00 10	testb	$16, 356(%rbx)
10001ad5f:	75 1c	jne	0x10001ad7d
10001ad61:	48 89 df	movq	%rbx, %rdi
10001ad64:	e8 a1 c5 ff ff	callq	0x10001730a
10001ad69:	85 c0	testl	%eax, %eax
10001ad6b:	74 10	je	0x10001ad7d
10001ad6d:	48 89 df	movq	%rbx, %rdi
10001ad70:	89 c6	movl	%eax, %esi
10001ad72:	48 83 c4 08	addq	$8, %rsp
10001ad76:	5b	popq	%rbx
10001ad77:	5d	popq	%rbp
10001ad78:	e9 1c b3 ff ff	jmp	0x100016099
10001ad7d:	48 83 c4 08	addq	$8, %rsp
10001ad81:	5b	popq	%rbx
10001ad82:	5d	popq	%rbp
10001ad83:	c3	retq
10001ad84:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10001ad8b:	48 8d 3d 2a 8b 02 00	leaq	166698(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001ad92:	48 89 da	movq	%rbx, %rdx
10001ad95:	31 c0	xorl	%eax, %eax
10001ad97:	e8 76 96 01 00	callq	0x100034412
10001ad9c:	55	pushq	%rbp
10001ad9d:	48 89 e5	movq	%rsp, %rbp
10001ada0:	41 56	pushq	%r14
10001ada2:	53	pushq	%rbx
10001ada3:	41 89 f6	movl	%esi, %r14d
10001ada6:	48 89 fb	movq	%rdi, %rbx
10001ada9:	80 bf a0 01 00 00 01	cmpb	$1, 416(%rdi)
10001adb0:	75 0d	jne	0x10001adbf
10001adb2:	48 89 df	movq	%rbx, %rdi
10001adb5:	be 01 00 00 00	movl	$1, %esi
10001adba:	e8 16 00 00 00	callq	0x10001add5
10001adbf:	80 8b 0f 05 00 00 04	orb	$4, 1295(%rbx)
10001adc6:	48 89 df	movq	%rbx, %rdi
10001adc9:	44 89 f6	movl	%r14d, %esi
10001adcc:	5b	popq	%rbx
10001adcd:	41 5e	popq	%r14
10001adcf:	5d	popq	%rbp
10001add0:	e9 ef 00 00 00	jmp	0x10001aec4
10001add5:	55	pushq	%rbp
10001add6:	48 89 e5	movq	%rsp, %rbp
10001add9:	41 57	pushq	%r15
10001addb:	41 56	pushq	%r14
10001addd:	41 54	pushq	%r12
10001addf:	53	pushq	%rbx
10001ade0:	80 bf a0 01 00 00 01	cmpb	$1, 416(%rdi)
10001ade7:	0f 85 d2 00 00 00	jne	0x10001aebf
10001aded:	41 89 f6	movl	%esi, %r14d
10001adf0:	49 89 ff	movq	%rdi, %r15
10001adf3:	c6 87 a0 01 00 00 00	movb	$0, 416(%rdi)
10001adfa:	48 8d 15 cd f4 02 00	leaq	193741(%rip), %rdx ## literal pool for: "service state: %s"
10001ae01:	48 8d 0d d8 f4 02 00	leaq	193752(%rip), %rcx ## literal pool for: "not running"
10001ae08:	be 05 00 00 00	movl	$5, %esi
10001ae0d:	31 c0	xorl	%eax, %eax
10001ae0f:	e8 a6 b1 ff ff	callq	0x100015fba
10001ae14:	41 0f ba a7 0d 05 00 00 14	btl	$20, 1293(%r15)
10001ae1d:	72 30	jb	0x10001ae4f
10001ae1f:	49 8b bf d8 02 00 00	movq	728(%r15), %rdi
10001ae26:	48 85 ff	testq	%rdi, %rdi
10001ae29:	74 7a	je	0x10001aea5
10001ae2b:	e8 4c 6b 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001ae30:	49 c7 87 d8 02 00 00 00 00 00 00	movq	$0, 728(%r15)
10001ae3b:	41 c7 87 d4 02 00 00 00 00 00 00	movl	$0, 724(%r15)
10001ae46:	48 8d 15 ff 07 03 00	leaq	198655(%rip), %rdx ## literal pool for: "canceling throttled spawn"
10001ae4d:	eb 47	jmp	0x10001ae96
10001ae4f:	49 8b 5f 78	movq	120(%r15), %rbx
10001ae53:	48 85 db	testq	%rbx, %rbx
10001ae56:	74 2a	je	0x10001ae82
10001ae58:	4c 8b 63 08	movq	8(%rbx), %r12
10001ae5c:	48 89 df	movq	%rbx, %rdi
10001ae5f:	e8 2c 72 01 00	callq	0x100032090
10001ae64:	84 c0	testb	%al, %al
10001ae66:	74 12	je	0x10001ae7a
10001ae68:	48 89 df	movq	%rbx, %rdi
10001ae6b:	e8 2d 72 01 00	callq	0x10003209d
10001ae70:	48 89 df	movq	%rbx, %rdi
10001ae73:	31 f6	xorl	%esi, %esi
10001ae75:	e8 d7 7a ff ff	callq	0x100012951
10001ae7a:	4c 89 e3	movq	%r12, %rbx
10001ae7d:	4d 85 e4	testq	%r12, %r12
10001ae80:	75 d6	jne	0x10001ae58
10001ae82:	48 8d 15 a7 07 03 00	leaq	198567(%rip), %rdx ## literal pool for: "canceling penalty-box spawn"
10001ae89:	45 84 f6	testb	%r14b, %r14b
10001ae8c:	74 08	je	0x10001ae96
10001ae8e:	41 80 a7 0f 05 00 00 ef	andb	$-17, 1295(%r15)
10001ae96:	4c 89 ff	movq	%r15, %rdi
10001ae99:	be 05 00 00 00	movl	$5, %esi
10001ae9e:	31 c0	xorl	%eax, %eax
10001aea0:	e8 15 b1 ff ff	callq	0x100015fba
10001aea5:	ba 59 00 00 00	movl	$89, %edx
10001aeaa:	4c 89 ff	movq	%r15, %rdi
10001aead:	be 01 00 00 00	movl	$1, %esi
10001aeb2:	5b	popq	%rbx
10001aeb3:	41 5c	popq	%r12
10001aeb5:	41 5e	popq	%r14
10001aeb7:	41 5f	popq	%r15
10001aeb9:	5d	popq	%rbp
10001aeba:	e9 ec af ff ff	jmp	0x100015eab
10001aebf:	e8 f7 55 02 00	callq	0x1000404bb
10001aec4:	55	pushq	%rbp
10001aec5:	48 89 e5	movq	%rsp, %rbp
10001aec8:	41 56	pushq	%r14
10001aeca:	53	pushq	%rbx
10001aecb:	41 89 f6	movl	%esi, %r14d
10001aece:	48 89 fb	movq	%rdi, %rbx
10001aed1:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001aed7:	85 f6	testl	%esi, %esi
10001aed9:	0f 85 b9 00 00 00	jne	0x10001af98
10001aedf:	41 83 fe 0b	cmpl	$11, %r14d
10001aee3:	75 43	jne	0x10001af28
10001aee5:	48 8b 83 0d 05 00 00	movq	1293(%rbx), %rax
10001aeec:	0f ba e0 14	btl	$20, %eax
10001aef0:	0f 83 ba 00 00 00	jae	0x10001afb0
10001aef6:	0f b6 8b 15 05 00 00	movzbl	1301(%rbx), %ecx
10001aefd:	48 25 ff ff ef ff	andq	$-1048577, %rax
10001af03:	48 89 83 0d 05 00 00	movq	%rax, 1293(%rbx)
10001af0a:	88 8b 15 05 00 00	movb	%cl, 1301(%rbx)
10001af10:	48 8d 15 48 ee 02 00	leaq	192072(%rip), %rdx ## literal pool for: "retry launch"
10001af17:	48 89 df	movq	%rbx, %rdi
10001af1a:	be 05 00 00 00	movl	$5, %esi
10001af1f:	31 c0	xorl	%eax, %eax
10001af21:	e8 94 b0 ff ff	callq	0x100015fba
10001af26:	eb 29	jmp	0x10001af51
10001af28:	8a 83 a0 01 00 00	movb	416(%rbx), %al
10001af2e:	fe c8	decb	%al
10001af30:	3c 01	cmpb	$1, %al
10001af32:	77 1d	ja	0x10001af51
10001af34:	48 8d 15 31 ee 02 00	leaq	192049(%rip), %rdx ## literal pool for: "launch already in progress"
10001af3b:	48 89 df	movq	%rbx, %rdi
10001af3e:	be 05 00 00 00	movl	$5, %esi
10001af43:	31 c0	xorl	%eax, %eax
10001af45:	e8 70 b0 ff ff	callq	0x100015fba
10001af4a:	b8 24 00 00 00	movl	$36, %eax
10001af4f:	eb 42	jmp	0x10001af93
10001af51:	0f ba a3 0d 05 00 00 14	btl	$20, 1293(%rbx)
10001af59:	72 1d	jb	0x10001af78
10001af5b:	b8 25 00 00 00	movl	$37, %eax
10001af60:	83 bb c8 03 00 00 00	cmpl	$0, 968(%rbx)
10001af67:	75 2a	jne	0x10001af93
10001af69:	48 89 df	movq	%rbx, %rdi
10001af6c:	44 89 f6	movl	%r14d, %esi
10001af6f:	5b	popq	%rbx
10001af70:	41 5e	popq	%r14
10001af72:	5d	popq	%rbp
10001af73:	e9 21 b1 ff ff	jmp	0x100016099
10001af78:	48 8d 15 08 ee 02 00	leaq	192008(%rip), %rdx ## literal pool for: "attempt to launch while in penalty box"
10001af7f:	48 89 df	movq	%rbx, %rdi
10001af82:	be 05 00 00 00	movl	$5, %esi
10001af87:	31 c0	xorl	%eax, %eax
10001af89:	e8 2c b0 ff ff	callq	0x100015fba
10001af8e:	b8 8b 00 00 00	movl	$139, %eax
10001af93:	5b	popq	%rbx
10001af94:	41 5e	popq	%r14
10001af96:	5d	popq	%rbp
10001af97:	c3	retq
10001af98:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10001af9f:	48 8d 3d 16 89 02 00	leaq	166166(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001afa6:	48 89 da	movq	%rbx, %rdx
10001afa9:	31 c0	xorl	%eax, %eax
10001afab:	e8 62 94 01 00	callq	0x100034412
10001afb0:	48 8d 3d 7a ed 02 00	leaq	191866(%rip), %rdi ## literal pool for: "retry launch on service that was not deferred"
10001afb7:	31 c0	xorl	%eax, %eax
10001afb9:	e8 54 94 01 00	callq	0x100034412
10001afbe:	55	pushq	%rbp
10001afbf:	48 89 e5	movq	%rsp, %rbp
10001afc2:	41 57	pushq	%r15
10001afc4:	41 56	pushq	%r14
10001afc6:	53	pushq	%rbx
10001afc7:	50	pushq	%rax
10001afc8:	49 89 ff	movq	%rdi, %r15
10001afcb:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001afd1:	85 f6	testl	%esi, %esi
10001afd3:	0f 85 19 01 00 00	jne	0x10001b0f2
10001afd9:	41 f6 87 64 01 00 00 10	testb	$16, 356(%r15)
10001afe1:	74 2a	je	0x10001b00d
10001afe3:	49 8b 9f 80 00 00 00	movq	128(%r15), %rbx
10001afea:	48 85 db	testq	%rbx, %rbx
10001afed:	74 1e	je	0x10001b00d
10001afef:	4c 8b 73 08	movq	8(%rbx), %r14
10001aff3:	48 89 df	movq	%rbx, %rdi
10001aff6:	e8 64 6b 01 00	callq	0x100031b5f
10001affb:	48 89 df	movq	%rbx, %rdi
10001affe:	31 f6	xorl	%esi, %esi
10001b000:	e8 4c 79 ff ff	callq	0x100012951
10001b005:	4c 89 f3	movq	%r14, %rbx
10001b008:	4d 85 f6	testq	%r14, %r14
10001b00b:	75 e2	jne	0x10001afef
10001b00d:	41 8a 87 a0 01 00 00	movb	416(%r15), %al
10001b014:	3c 01	cmpb	$1, %al
10001b016:	75 15	jne	0x10001b02d
10001b018:	4c 89 ff	movq	%r15, %rdi
10001b01b:	31 f6	xorl	%esi, %esi
10001b01d:	e8 b3 fd ff ff	callq	0x10001add5
10001b022:	41 be 59 00 00 00	movl	$89, %r14d
10001b028:	e9 b7 00 00 00	jmp	0x10001b0e4
10001b02d:	41 83 bf c8 03 00 00 00	cmpl	$0, 968(%r15)
10001b035:	74 5a	je	0x10001b091
10001b037:	3c 07	cmpb	$7, %al
10001b039:	75 74	jne	0x10001b0af
10001b03b:	49 8b b7 30 02 00 00	movq	560(%r15), %rsi
10001b042:	4c 89 ff	movq	%r15, %rdi
10001b045:	41 ff 97 10 02 00 00	callq	*528(%r15)
10001b04c:	85 c0	testl	%eax, %eax
10001b04e:	74 73	je	0x10001b0c3
10001b050:	41 89 c6	movl	%eax, %r14d
10001b053:	48 8d 15 95 ed 02 00	leaq	191893(%rip), %rdx ## literal pool for: "cannot abandon languishing service: %d"
10001b05a:	4c 89 ff	movq	%r15, %rdi
10001b05d:	be 05 00 00 00	movl	$5, %esi
10001b062:	89 c1	movl	%eax, %ecx
10001b064:	31 c0	xorl	%eax, %eax
10001b066:	e8 4f af ff ff	callq	0x100015fba
10001b06b:	44 89 f7	movl	%r14d, %edi
10001b06e:	e8 9b 70 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001b073:	48 8d 15 9c ed 02 00	leaq	191900(%rip), %rdx ## literal pool for: "Cannot abandon languishing service: %d: %s"
10001b07a:	4c 89 ff	movq	%r15, %rdi
10001b07d:	be 04 00 00 00	movl	$4, %esi
10001b082:	44 89 f1	movl	%r14d, %ecx
10001b085:	49 89 c0	movq	%rax, %r8
10001b088:	31 c0	xorl	%eax, %eax
10001b08a:	e8 2b af ff ff	callq	0x100015fba
10001b08f:	eb 53	jmp	0x10001b0e4
10001b091:	48 8d 15 16 ed 02 00	leaq	191766(%rip), %rdx ## literal pool for: "service not running, not stopping"
10001b098:	4c 89 ff	movq	%r15, %rdi
10001b09b:	be 05 00 00 00	movl	$5, %esi
10001b0a0:	31 c0	xorl	%eax, %eax
10001b0a2:	e8 13 af ff ff	callq	0x100015fba
10001b0a7:	41 be 25 00 00 00	movl	$37, %r14d
10001b0ad:	eb 35	jmp	0x10001b0e4
10001b0af:	4c 89 ff	movq	%r15, %rdi
10001b0b2:	31 f6	xorl	%esi, %esi
10001b0b4:	48 83 c4 08	addq	$8, %rsp
10001b0b8:	5b	popq	%rbx
10001b0b9:	41 5e	popq	%r14
10001b0bb:	41 5f	popq	%r15
10001b0bd:	5d	popq	%rbp
10001b0be:	e9 47 00 00 00	jmp	0x10001b10a
10001b0c3:	48 8d 15 06 ed 02 00	leaq	191750(%rip), %rdx ## literal pool for: "abandoning languishing service"
10001b0ca:	45 31 f6	xorl	%r14d, %r14d
10001b0cd:	4c 89 ff	movq	%r15, %rdi
10001b0d0:	be 05 00 00 00	movl	$5, %esi
10001b0d5:	31 c0	xorl	%eax, %eax
10001b0d7:	e8 de ae ff ff	callq	0x100015fba
10001b0dc:	4c 89 ff	movq	%r15, %rdi
10001b0df:	e8 f8 c4 ff ff	callq	0x1000175dc
10001b0e4:	44 89 f0	movl	%r14d, %eax
10001b0e7:	48 83 c4 08	addq	$8, %rsp
10001b0eb:	5b	popq	%rbx
10001b0ec:	41 5e	popq	%r14
10001b0ee:	41 5f	popq	%r15
10001b0f0:	5d	popq	%rbp
10001b0f1:	c3	retq
10001b0f2:	49 81 c7 18 05 00 00	addq	$1304, %r15
10001b0f9:	48 8d 3d bc 87 02 00	leaq	165820(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001b100:	4c 89 fa	movq	%r15, %rdx
10001b103:	31 c0	xorl	%eax, %eax
10001b105:	e8 08 93 01 00	callq	0x100034412
10001b10a:	55	pushq	%rbp
10001b10b:	48 89 e5	movq	%rsp, %rbp
10001b10e:	41 57	pushq	%r15
10001b110:	41 56	pushq	%r14
10001b112:	41 54	pushq	%r12
10001b114:	53	pushq	%rbx
10001b115:	48 83 ec 10	subq	$16, %rsp
10001b119:	48 89 fb	movq	%rdi, %rbx
10001b11c:	8a 87 a0 01 00 00	movb	416(%rdi), %al
10001b122:	04 fd	addb	$-3, %al
10001b124:	3c 02	cmpb	$2, %al
10001b126:	73 4e	jae	0x10001b176
10001b128:	8b bb c8 03 00 00	movl	968(%rbx), %edi
10001b12e:	85 ff	testl	%edi, %edi
10001b130:	0f 84 c4 02 00 00	je	0x10001b3fa
10001b136:	f6 83 e8 03 00 00 02	testb	$2, 1000(%rbx)
10001b13d:	4c 8d 35 71 76 04 00	leaq	292465(%rip), %r14
10001b144:	74 51	je	0x10001b197
10001b146:	41 80 3e 00	cmpb	$0, (%r14)
10001b14a:	75 4b	jne	0x10001b197
10001b14c:	83 fe 01	cmpl	$1, %esi
10001b14f:	0f 84 83 00 00 00	je	0x10001b1d8
10001b155:	83 fe 02	cmpl	$2, %esi
10001b158:	0f 85 d0 01 00 00	jne	0x10001b32e
10001b15e:	48 8d 15 24 05 03 00	leaq	197924(%rip), %rdx ## literal pool for: "extension check-in timeout"
10001b165:	b9 01 00 00 00	movl	$1, %ecx
10001b16a:	be 03 00 00 00	movl	$3, %esi
10001b16f:	e8 45 9e 01 00	callq	0x100034fb9
10001b174:	eb 71	jmp	0x10001b1e7
10001b176:	48 8d 15 e9 04 03 00	leaq	197865(%rip), %rdx ## literal pool for: "service already stopped"
10001b17d:	48 89 df	movq	%rbx, %rdi
10001b180:	be 05 00 00 00	movl	$5, %esi
10001b185:	31 c0	xorl	%eax, %eax
10001b187:	e8 2e ae ff ff	callq	0x100015fba
10001b18c:	41 be 25 00 00 00	movl	$37, %r14d
10001b192:	e9 87 01 00 00	jmp	0x10001b31e
10001b197:	48 8d 75 dc	leaq	-36(%rbp), %rsi
10001b19b:	c7 06 aa aa aa aa	movl	$2863311530, (%rsi)
10001b1a1:	e8 a1 9e 01 00	callq	0x100035047
10001b1a6:	85 c0	testl	%eax, %eax
10001b1a8:	74 09	je	0x10001b1b3
10001b1aa:	83 f8 03	cmpl	$3, %eax
10001b1ad:	0f 85 3a 02 00 00	jne	0x10001b3ed
10001b1b3:	f6 83 e8 03 00 00 02	testb	$2, 1000(%rbx)
10001b1ba:	75 09	jne	0x10001b1c5
10001b1bc:	48 8d 35 f6 04 03 00	leaq	197878(%rip), %rsi ## literal pool for: "aborting trampoline"
10001b1c3:	eb 1a	jmp	0x10001b1df
10001b1c5:	41 80 3e 00	cmpb	$0, (%r14)
10001b1c9:	0f 84 30 02 00 00	je	0x10001b3ff
10001b1cf:	48 8d 35 f7 04 03 00	leaq	197879(%rip), %rsi ## literal pool for: "sudden shutdown"
10001b1d6:	eb 07	jmp	0x10001b1df
10001b1d8:	48 8d 35 9f 04 03 00	leaq	197791(%rip), %rsi ## literal pool for: "force-kill"
10001b1df:	48 89 df	movq	%rbx, %rdi
10001b1e2:	e8 45 3d 00 00	callq	0x10001ef2c
10001b1e7:	41 89 c6	movl	%eax, %r14d
10001b1ea:	c7 83 e4 03 00 00 09 00 00 00	movl	$9, 996(%rbx)
10001b1f4:	85 c0	testl	%eax, %eax
10001b1f6:	74 51	je	0x10001b249
10001b1f8:	44 89 f7	movl	%r14d, %edi
10001b1fb:	e8 3e 6c 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001b200:	4c 8d 3d d6 04 03 00	leaq	197846(%rip), %r15 ## literal pool for: "could not terminate service: %d: %s"
10001b207:	48 89 df	movq	%rbx, %rdi
10001b20a:	be 05 00 00 00	movl	$5, %esi
10001b20f:	4c 89 fa	movq	%r15, %rdx
10001b212:	44 89 f1	movl	%r14d, %ecx
10001b215:	49 89 c0	movq	%rax, %r8
10001b218:	31 c0	xorl	%eax, %eax
10001b21a:	e8 9b ad ff ff	callq	0x100015fba
10001b21f:	44 89 f7	movl	%r14d, %edi
10001b222:	e8 17 6c 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001b227:	48 89 df	movq	%rbx, %rdi
10001b22a:	be 03 00 00 00	movl	$3, %esi
10001b22f:	4c 89 fa	movq	%r15, %rdx
10001b232:	44 89 f1	movl	%r14d, %ecx
10001b235:	49 89 c0	movq	%rax, %r8
10001b238:	31 c0	xorl	%eax, %eax
10001b23a:	e8 7b ad ff ff	callq	0x100015fba
10001b23f:	c7 83 e4 03 00 00 09 00 00 00	movl	$9, 996(%rbx)
10001b249:	48 89 df	movq	%rbx, %rdi
10001b24c:	be 06 00 00 00	movl	$6, %esi
10001b251:	e8 85 32 00 00	callq	0x10001e4db
10001b256:	48 8d 05 ff 73 04 00	leaq	291839(%rip), %rax
10001b25d:	4c 63 38	movslq	(%rax), %r15
10001b260:	4c 8d 25 8d 3d 00 00	leaq	15757(%rip), %r12
10001b267:	8b bb e4 03 00 00	movl	996(%rbx), %edi
10001b26d:	e8 08 6c 02 00	callq	0x100041e7a ## symbol stub for: _strsignal
10001b272:	48 8d 15 af 04 03 00	leaq	197807(%rip), %rdx ## literal pool for: "scheduling cleanup in %llu sec after sending %s"
10001b279:	45 31 f6	xorl	%r14d, %r14d
10001b27c:	48 89 df	movq	%rbx, %rdi
10001b27f:	be 05 00 00 00	movl	$5, %esi
10001b284:	4c 89 f9	movq	%r15, %rcx
10001b287:	49 89 c0	movq	%rax, %r8
10001b28a:	31 c0	xorl	%eax, %eax
10001b28c:	e8 29 ad ff ff	callq	0x100015fba
10001b291:	48 83 bb d8 03 00 00 00	cmpq	$0, 984(%rbx)
10001b299:	0f 85 6a 01 00 00	jne	0x10001b409
10001b29f:	e8 56 32 ff ff	callq	0x10000e4fa
10001b2a4:	48 8b 3d cd cd 03 00	movq	249293(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10001b2ab:	31 f6	xorl	%esi, %esi
10001b2ad:	31 d2	xorl	%edx, %edx
10001b2af:	48 89 c1	movq	%rax, %rcx
10001b2b2:	e8 cb 66 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001b2b7:	48 89 83 d8 03 00 00	movq	%rax, 984(%rbx)
10001b2be:	48 89 df	movq	%rbx, %rdi
10001b2c1:	be 20 00 00 00	movl	$32, %esi
10001b2c6:	e8 b6 79 ff ff	callq	0x100012c81
10001b2cb:	48 8b bb d8 03 00 00	movq	984(%rbx), %rdi
10001b2d2:	48 89 de	movq	%rbx, %rsi
10001b2d5:	e8 9c 66 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10001b2da:	48 8b bb d8 03 00 00	movq	984(%rbx), %rdi
10001b2e1:	4c 89 e6	movq	%r12, %rsi
10001b2e4:	e8 bd 66 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001b2e9:	4c 8b a3 d8 03 00 00	movq	984(%rbx), %r12
10001b2f0:	49 69 f7 00 ca 9a 3b	imulq	$1000000000, %r15, %rsi
10001b2f7:	31 ff	xorl	%edi, %edi
10001b2f9:	e8 d8 66 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10001b2fe:	4c 89 e7	movq	%r12, %rdi
10001b301:	48 89 c6	movq	%rax, %rsi
10001b304:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10001b30b:	31 c9	xorl	%ecx, %ecx
10001b30d:	e8 ac 66 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10001b312:	48 8b bb d8 03 00 00	movq	984(%rbx), %rdi
10001b319:	e8 a4 65 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001b31e:	44 89 f0	movl	%r14d, %eax
10001b321:	48 83 c4 10	addq	$16, %rsp
10001b325:	5b	popq	%rbx
10001b326:	41 5c	popq	%r12
10001b328:	41 5e	popq	%r14
10001b32a:	41 5f	popq	%r15
10001b32c:	5d	popq	%rbp
10001b32d:	c3	retq
10001b32e:	85 f6	testl	%esi, %esi
10001b330:	0f 85 ce 00 00 00	jne	0x10001b404
10001b336:	48 8d b3 e4 03 00 00	leaq	996(%rbx), %rsi
10001b33d:	e8 05 9d 01 00	callq	0x100035047
10001b342:	41 89 c6	movl	%eax, %r14d
10001b345:	85 c0	testl	%eax, %eax
10001b347:	0f 85 ab fe ff ff	jne	0x10001b1f8
10001b34d:	48 63 b3 c8 03 00 00	movslq	968(%rbx), %rsi
10001b354:	48 63 93 e4 03 00 00	movslq	996(%rbx), %rdx
10001b35b:	bf 50 00 00 22	movl	$570425424, %edi
10001b360:	e8 7b 1b ff ff	callq	0x10000cee0
10001b365:	8b bb e4 03 00 00	movl	996(%rbx), %edi
10001b36b:	e8 0a 6b 02 00	callq	0x100041e7a ## symbol stub for: _strsignal
10001b370:	48 8d 15 2d 03 03 00	leaq	197421(%rip), %rdx ## literal pool for: "signaled service: %s"
10001b377:	48 89 df	movq	%rbx, %rdi
10001b37a:	be 05 00 00 00	movl	$5, %esi
10001b37f:	48 89 c1	movq	%rax, %rcx
10001b382:	31 c0	xorl	%eax, %eax
10001b384:	e8 31 ac ff ff	callq	0x100015fba
10001b389:	8b bb e4 03 00 00	movl	996(%rbx), %edi
10001b38f:	83 ff 0f	cmpl	$15, %edi
10001b392:	74 39	je	0x10001b3cd
10001b394:	83 ff 09	cmpl	$9, %edi
10001b397:	0f 84 ac fe ff ff	je	0x10001b249
10001b39d:	e8 d8 6a 02 00	callq	0x100041e7a ## symbol stub for: _strsignal
10001b3a2:	48 8d 15 58 03 03 00	leaq	197464(%rip), %rdx ## literal pool for: "Service was sent unexpected signal: %s"
10001b3a9:	48 89 df	movq	%rbx, %rdi
10001b3ac:	be 04 00 00 00	movl	$4, %esi
10001b3b1:	48 89 c1	movq	%rax, %rcx
10001b3b4:	31 c0	xorl	%eax, %eax
10001b3b6:	e8 ff ab ff ff	callq	0x100015fba
10001b3bb:	4c 8d 25 32 3c 00 00	leaq	15410(%rip), %r12
10001b3c2:	41 bf 01 00 00 00	movl	$1, %r15d
10001b3c8:	e9 9a fe ff ff	jmp	0x10001b267
10001b3cd:	48 89 df	movq	%rbx, %rdi
10001b3d0:	be 05 00 00 00	movl	$5, %esi
10001b3d5:	e8 01 31 00 00	callq	0x10001e4db
10001b3da:	44 8b bb e0 02 00 00	movl	736(%rbx), %r15d
10001b3e1:	4c 8d 25 df 3d 00 00	leaq	15839(%rip), %r12
10001b3e8:	e9 7a fe ff ff	jmp	0x10001b267
10001b3ed:	48 63 f8	movslq	%eax, %rdi
10001b3f0:	e8 ad 63 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001b3f5:	e9 b9 fd ff ff	jmp	0x10001b1b3
10001b3fa:	e8 d1 50 02 00	callq	0x1000404d0
10001b3ff:	e8 f6 50 02 00	callq	0x1000404fa
10001b404:	e8 dc 50 02 00	callq	0x1000404e5
10001b409:	48 8d 3d 48 03 03 00	leaq	197448(%rip), %rdi ## literal pool for: "tried to overwrite service timeout_source"
10001b410:	31 c0	xorl	%eax, %eax
10001b412:	e8 fb 8f 01 00	callq	0x100034412
10001b417:	55	pushq	%rbp
10001b418:	48 89 e5	movq	%rsp, %rbp
10001b41b:	48 89 fa	movq	%rdi, %rdx
10001b41e:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001b424:	85 f6	testl	%esi, %esi
10001b426:	75 16	jne	0x10001b43e
10001b428:	48 0f ba a2 0d 05 00 00 28	btq	$40, 1293(%rdx)
10001b431:	72 02	jb	0x10001b435
10001b433:	5d	popq	%rbp
10001b434:	c3	retq
10001b435:	48 89 d7	movq	%rdx, %rdi
10001b438:	5d	popq	%rbp
10001b439:	e9 15 00 00 00	jmp	0x10001b453
10001b43e:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001b445:	48 8d 3d 70 84 02 00	leaq	164976(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001b44c:	31 c0	xorl	%eax, %eax
10001b44e:	e8 bf 8f 01 00	callq	0x100034412
10001b453:	55	pushq	%rbp
10001b454:	48 89 e5	movq	%rsp, %rbp
10001b457:	41 57	pushq	%r15
10001b459:	41 56	pushq	%r14
10001b45b:	53	pushq	%rbx
10001b45c:	50	pushq	%rax
10001b45d:	49 89 fe	movq	%rdi, %r14
10001b460:	48 8b 9f 88 00 00 00	movq	136(%rdi), %rbx
10001b467:	48 85 db	testq	%rbx, %rbx
10001b46a:	74 31	je	0x10001b49d
10001b46c:	4c 8d 3d af 05 03 00	leaq	198063(%rip), %r15 ## literal pool for: "draining messages from %s"
10001b473:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
10001b47a:	4c 89 f7	movq	%r14, %rdi
10001b47d:	be 05 00 00 00	movl	$5, %esi
10001b482:	4c 89 fa	movq	%r15, %rdx
10001b485:	31 c0	xorl	%eax, %eax
10001b487:	e8 2e ab ff ff	callq	0x100015fba
10001b48c:	48 89 df	movq	%rbx, %rdi
10001b48f:	e8 6c 08 02 00	callq	0x10003bd00
10001b494:	48 8b 5b 08	movq	8(%rbx), %rbx
10001b498:	48 85 db	testq	%rbx, %rbx
10001b49b:	75 d6	jne	0x10001b473
10001b49d:	49 8b 9e a8 00 00 00	movq	168(%r14), %rbx
10001b4a4:	48 85 db	testq	%rbx, %rbx
10001b4a7:	74 31	je	0x10001b4da
10001b4a9:	4c 8d 3d 72 05 03 00	leaq	198002(%rip), %r15 ## literal pool for: "draining messages from %s"
10001b4b0:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
10001b4b7:	4c 89 f7	movq	%r14, %rdi
10001b4ba:	be 05 00 00 00	movl	$5, %esi
10001b4bf:	4c 89 fa	movq	%r15, %rdx
10001b4c2:	31 c0	xorl	%eax, %eax
10001b4c4:	e8 f1 aa ff ff	callq	0x100015fba
10001b4c9:	48 89 df	movq	%rbx, %rdi
10001b4cc:	e8 2f 08 02 00	callq	0x10003bd00
10001b4d1:	48 8b 5b 08	movq	8(%rbx), %rbx
10001b4d5:	48 85 db	testq	%rbx, %rbx
10001b4d8:	75 d6	jne	0x10001b4b0
10001b4da:	48 83 c4 08	addq	$8, %rsp
10001b4de:	5b	popq	%rbx
10001b4df:	41 5e	popq	%r14
10001b4e1:	41 5f	popq	%r15
10001b4e3:	5d	popq	%rbp
10001b4e4:	c3	retq
10001b4e5:	55	pushq	%rbp
10001b4e6:	48 89 e5	movq	%rsp, %rbp
10001b4e9:	41 56	pushq	%r14
10001b4eb:	53	pushq	%rbx
10001b4ec:	48 89 fb	movq	%rdi, %rbx
10001b4ef:	83 bf 08 03 00 00 00	cmpl	$0, 776(%rdi)
10001b4f6:	0f 84 86 00 00 00	je	0x10001b582
10001b4fc:	48 83 bb 00 03 00 00 00	cmpq	$0, 768(%rbx)
10001b504:	0f 85 e2 00 00 00	jne	0x10001b5ec
10001b50a:	e8 eb 2f ff ff	callq	0x10000e4fa
10001b50f:	48 8b 3d 62 cb 03 00	movq	248674(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10001b516:	31 f6	xorl	%esi, %esi
10001b518:	31 d2	xorl	%edx, %edx
10001b51a:	48 89 c1	movq	%rax, %rcx
10001b51d:	e8 60 64 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001b522:	48 89 83 00 03 00 00	movq	%rax, 768(%rbx)
10001b529:	48 89 c7	movq	%rax, %rdi
10001b52c:	48 89 de	movq	%rbx, %rsi
10001b52f:	e8 42 64 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10001b534:	4c 8b b3 00 03 00 00	movq	768(%rbx), %r14
10001b53b:	8b 83 08 03 00 00	movl	776(%rbx), %eax
10001b541:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
10001b548:	31 ff	xorl	%edi, %edi
10001b54a:	e8 87 64 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10001b54f:	4c 89 f7	movq	%r14, %rdi
10001b552:	48 89 c6	movq	%rax, %rsi
10001b555:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10001b55c:	31 c9	xorl	%ecx, %ecx
10001b55e:	e8 5b 64 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10001b563:	48 8b bb 00 03 00 00	movq	768(%rbx), %rdi
10001b56a:	48 8d 35 85 00 00 00	leaq	133(%rip), %rsi
10001b571:	e8 30 64 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001b576:	48 8b bb 00 03 00 00	movq	768(%rbx), %rdi
10001b57d:	e8 40 63 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001b582:	48 0f ba a3 0d 05 00 00 2b	btq	$43, 1293(%rbx)
10001b58b:	72 05	jb	0x10001b592
10001b58d:	5b	popq	%rbx
10001b58e:	41 5e	popq	%r14
10001b590:	5d	popq	%rbp
10001b591:	c3	retq
10001b592:	48 83 bb 10 03 00 00 00	cmpq	$0, 784(%rbx)
10001b59a:	75 55	jne	0x10001b5f1
10001b59c:	e8 59 2f ff ff	callq	0x10000e4fa
10001b5a1:	48 8b 3d d8 ca 03 00	movq	248536(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_vfs
10001b5a8:	ba 08 00 00 00	movl	$8, %edx
10001b5ad:	31 f6	xorl	%esi, %esi
10001b5af:	48 89 c1	movq	%rax, %rcx
10001b5b2:	e8 cb 63 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001b5b7:	48 89 83 10 03 00 00	movq	%rax, 784(%rbx)
10001b5be:	48 89 c7	movq	%rax, %rdi
10001b5c1:	48 89 de	movq	%rbx, %rsi
10001b5c4:	e8 ad 63 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10001b5c9:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b5d0:	48 8d 35 86 00 00 00	leaq	134(%rip), %rsi
10001b5d7:	e8 ca 63 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001b5dc:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b5e3:	5b	popq	%rbx
10001b5e4:	41 5e	popq	%r14
10001b5e6:	5d	popq	%rbp
10001b5e7:	e9 d6 62 02 00	jmp	0x1000418c2 ## symbol stub for: _dispatch_activate
10001b5ec:	e8 33 4f 02 00	callq	0x100040524
10001b5f1:	e8 19 4f 02 00	callq	0x10004050f
10001b5f6:	55	pushq	%rbp
10001b5f7:	48 89 e5	movq	%rsp, %rbp
10001b5fa:	41 56	pushq	%r14
10001b5fc:	53	pushq	%rbx
10001b5fd:	49 89 fe	movq	%rdi, %r14
10001b600:	be 0c 00 00 00	movl	$12, %esi
10001b605:	e8 8f aa ff ff	callq	0x100016099
10001b60a:	89 c3	movl	%eax, %ebx
10001b60c:	48 8d 15 29 04 03 00	leaq	197673(%rip), %rdx ## literal pool for: "interval event: domain response: %d"
10001b613:	4c 89 f7	movq	%r14, %rdi
10001b616:	be 05 00 00 00	movl	$5, %esi
10001b61b:	89 c1	movl	%eax, %ecx
10001b61d:	31 c0	xorl	%eax, %eax
10001b61f:	e8 96 a9 ff ff	callq	0x100015fba
10001b624:	85 db	testl	%ebx, %ebx
10001b626:	74 0a	je	0x10001b632
10001b628:	83 fb 24	cmpl	$36, %ebx
10001b62b:	74 05	je	0x10001b632
10001b62d:	83 fb 7c	cmpl	$124, %ebx
10001b630:	75 05	jne	0x10001b637
10001b632:	5b	popq	%rbx
10001b633:	41 5e	popq	%r14
10001b635:	5d	popq	%rbp
10001b636:	c3	retq
10001b637:	89 df	movl	%ebx, %edi
10001b639:	e8 d0 6a 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001b63e:	48 8d 15 1b 04 03 00	leaq	197659(%rip), %rdx ## literal pool for: "Interval spawn of service failed: %d: %s"
10001b645:	4c 89 f7	movq	%r14, %rdi
10001b648:	be 03 00 00 00	movl	$3, %esi
10001b64d:	89 d9	movl	%ebx, %ecx
10001b64f:	49 89 c0	movq	%rax, %r8
10001b652:	31 c0	xorl	%eax, %eax
10001b654:	5b	popq	%rbx
10001b655:	41 5e	popq	%r14
10001b657:	5d	popq	%rbp
10001b658:	e9 5d a9 ff ff	jmp	0x100015fba
10001b65d:	55	pushq	%rbp
10001b65e:	48 89 e5	movq	%rsp, %rbp
10001b661:	41 56	pushq	%r14
10001b663:	53	pushq	%rbx
10001b664:	49 89 fe	movq	%rdi, %r14
10001b667:	be 0d 00 00 00	movl	$13, %esi
10001b66c:	e8 28 aa ff ff	callq	0x100016099
10001b671:	89 c3	movl	%eax, %ebx
10001b673:	48 8d 15 0f 04 03 00	leaq	197647(%rip), %rdx ## literal pool for: "fs mount event: domain response: %d"
10001b67a:	4c 89 f7	movq	%r14, %rdi
10001b67d:	be 05 00 00 00	movl	$5, %esi
10001b682:	89 c1	movl	%eax, %ecx
10001b684:	31 c0	xorl	%eax, %eax
10001b686:	e8 2f a9 ff ff	callq	0x100015fba
10001b68b:	85 db	testl	%ebx, %ebx
10001b68d:	74 0a	je	0x10001b699
10001b68f:	83 fb 24	cmpl	$36, %ebx
10001b692:	74 05	je	0x10001b699
10001b694:	83 fb 7c	cmpl	$124, %ebx
10001b697:	75 05	jne	0x10001b69e
10001b699:	5b	popq	%rbx
10001b69a:	41 5e	popq	%r14
10001b69c:	5d	popq	%rbp
10001b69d:	c3	retq
10001b69e:	89 df	movl	%ebx, %edi
10001b6a0:	e8 69 6a 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001b6a5:	48 8d 15 01 04 03 00	leaq	197633(%rip), %rdx ## literal pool for: "Filesystem mount spawn of service failed: %d: %s"
10001b6ac:	4c 89 f7	movq	%r14, %rdi
10001b6af:	be 03 00 00 00	movl	$3, %esi
10001b6b4:	89 d9	movl	%ebx, %ecx
10001b6b6:	49 89 c0	movq	%rax, %r8
10001b6b9:	31 c0	xorl	%eax, %eax
10001b6bb:	5b	popq	%rbx
10001b6bc:	41 5e	popq	%r14
10001b6be:	5d	popq	%rbp
10001b6bf:	e9 f6 a8 ff ff	jmp	0x100015fba
10001b6c4:	55	pushq	%rbp
10001b6c5:	48 89 e5	movq	%rsp, %rbp
10001b6c8:	53	pushq	%rbx
10001b6c9:	50	pushq	%rax
10001b6ca:	48 89 fb	movq	%rdi, %rbx
10001b6cd:	83 bf 08 03 00 00 00	cmpl	$0, 776(%rdi)
10001b6d4:	74 28	je	0x10001b6fe
10001b6d6:	48 8b bb 00 03 00 00	movq	768(%rbx), %rdi
10001b6dd:	48 85 ff	testq	%rdi, %rdi
10001b6e0:	74 56	je	0x10001b738
10001b6e2:	e8 95 62 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001b6e7:	48 8b bb 00 03 00 00	movq	768(%rbx), %rdi
10001b6ee:	e8 65 62 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001b6f3:	48 c7 83 00 03 00 00 00 00 00 00	movq	$0, 768(%rbx)
10001b6fe:	48 0f ba a3 0d 05 00 00 2b	btq	$43, 1293(%rbx)
10001b707:	73 28	jae	0x10001b731
10001b709:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b710:	48 85 ff	testq	%rdi, %rdi
10001b713:	74 28	je	0x10001b73d
10001b715:	e8 62 62 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001b71a:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b721:	e8 32 62 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001b726:	48 c7 83 10 03 00 00 00 00 00 00	movq	$0, 784(%rbx)
10001b731:	48 83 c4 08	addq	$8, %rsp
10001b735:	5b	popq	%rbx
10001b736:	5d	popq	%rbp
10001b737:	c3	retq
10001b738:	e8 11 4e 02 00	callq	0x10004054e
10001b73d:	e8 f7 4d 02 00	callq	0x100040539
10001b742:	55	pushq	%rbp
10001b743:	48 89 e5	movq	%rsp, %rbp
10001b746:	53	pushq	%rbx
10001b747:	50	pushq	%rax
10001b748:	48 89 fb	movq	%rdi, %rbx
10001b74b:	48 8b bf 00 03 00 00	movq	768(%rdi), %rdi
10001b752:	48 85 ff	testq	%rdi, %rdi
10001b755:	74 1c	je	0x10001b773
10001b757:	e8 20 62 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001b75c:	48 8b bb 00 03 00 00	movq	768(%rbx), %rdi
10001b763:	e8 f0 61 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001b768:	48 c7 83 00 03 00 00 00 00 00 00	movq	$0, 768(%rbx)
10001b773:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b77a:	48 85 ff	testq	%rdi, %rdi
10001b77d:	74 1c	je	0x10001b79b
10001b77f:	e8 f8 61 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001b784:	48 8b bb 10 03 00 00	movq	784(%rbx), %rdi
10001b78b:	e8 c8 61 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001b790:	48 c7 83 10 03 00 00 00 00 00 00	movq	$0, 784(%rbx)
10001b79b:	48 83 c4 08	addq	$8, %rsp
10001b79f:	5b	popq	%rbx
10001b7a0:	5d	popq	%rbp
10001b7a1:	c3	retq
10001b7a2:	55	pushq	%rbp
10001b7a3:	48 89 e5	movq	%rsp, %rbp
10001b7a6:	48 89 f8	movq	%rdi, %rax
10001b7a9:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001b7af:	85 f6	testl	%esi, %esi
10001b7b1:	75 08	jne	0x10001b7bb
10001b7b3:	48 05 70 01 00 00	addq	$368, %rax
10001b7b9:	5d	popq	%rbp
10001b7ba:	c3	retq
10001b7bb:	48 05 18 05 00 00	addq	$1304, %rax
10001b7c1:	48 8d 3d f4 80 02 00	leaq	164084(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001b7c8:	48 89 c2	movq	%rax, %rdx
10001b7cb:	31 c0	xorl	%eax, %eax
10001b7cd:	e8 40 8c 01 00	callq	0x100034412
10001b7d2:	55	pushq	%rbp
10001b7d3:	48 89 e5	movq	%rsp, %rbp
10001b7d6:	48 89 fa	movq	%rdi, %rdx
10001b7d9:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001b7df:	85 f6	testl	%esi, %esi
10001b7e1:	75 09	jne	0x10001b7ec
10001b7e3:	48 8b 82 68 01 00 00	movq	360(%rdx), %rax
10001b7ea:	5d	popq	%rbp
10001b7eb:	c3	retq
10001b7ec:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001b7f3:	48 8d 3d c2 80 02 00	leaq	164034(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001b7fa:	31 c0	xorl	%eax, %eax
10001b7fc:	e8 11 8c 01 00	callq	0x100034412
10001b801:	55	pushq	%rbp
10001b802:	48 89 e5	movq	%rsp, %rbp
10001b805:	48 89 fa	movq	%rdi, %rdx
10001b808:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001b80e:	85 f6	testl	%esi, %esi
10001b810:	75 08	jne	0x10001b81a
10001b812:	8b 82 c8 03 00 00	movl	968(%rdx), %eax
10001b818:	5d	popq	%rbp
10001b819:	c3	retq
10001b81a:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001b821:	48 8d 3d 94 80 02 00	leaq	163988(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001b828:	31 c0	xorl	%eax, %eax
10001b82a:	e8 e3 8b 01 00	callq	0x100034412
10001b82f:	55	pushq	%rbp
10001b830:	48 89 e5	movq	%rsp, %rbp
10001b833:	41 57	pushq	%r15
10001b835:	41 56	pushq	%r14
10001b837:	41 54	pushq	%r12
10001b839:	53	pushq	%rbx
10001b83a:	49 89 ff	movq	%rdi, %r15
10001b83d:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001b843:	85 f6	testl	%esi, %esi
10001b845:	0f 85 61 02 00 00	jne	0x10001baac
10001b84b:	31 ff	xorl	%edi, %edi
10001b84d:	31 f6	xorl	%esi, %esi
10001b84f:	31 d2	xorl	%edx, %edx
10001b851:	e8 bc 67 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10001b856:	49 89 c6	movq	%rax, %r14
10001b859:	49 8d 97 18 05 00 00	leaq	1304(%r15), %rdx
10001b860:	48 8d 35 6d 81 02 00	leaq	164205(%rip), %rsi ## literal pool for: "Label"
10001b867:	48 89 c7	movq	%rax, %rdi
10001b86a:	e8 2d 68 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001b86f:	31 d2	xorl	%edx, %edx
10001b871:	41 f6 87 0d 05 00 00 04	testb	$4, 1293(%r15)
10001b879:	0f 94 c2	sete	%dl
10001b87c:	48 8d 35 7e 9c 02 00	leaq	171134(%rip), %rsi ## literal pool for: "OnDemand"
10001b883:	4c 89 f7	movq	%r14, %rdi
10001b886:	e8 ed 67 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001b88b:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
10001b892:	e8 c5 f8 00 00	callq	0x10002b15c
10001b897:	48 3b 05 fa c7 03 00	cmpq	247802(%rip), %rax
10001b89e:	74 1b	je	0x10001b8bb
10001b8a0:	48 3b 05 f9 c7 03 00	cmpq	247801(%rip), %rax
10001b8a7:	74 1b	je	0x10001b8c4
10001b8a9:	48 3b 05 f8 c7 03 00	cmpq	247800(%rip), %rax
10001b8b0:	75 28	jne	0x10001b8da
10001b8b2:	48 8d 15 88 e5 02 00	leaq	189832(%rip), %rdx ## literal pool for: "Aqua"
10001b8b9:	eb 10	jmp	0x10001b8cb
10001b8bb:	48 8d 15 aa bd 02 00	leaq	179626(%rip), %rdx ## literal pool for: "System"
10001b8c2:	eb 07	jmp	0x10001b8cb
10001b8c4:	48 8d 15 a8 7f 02 00	leaq	163752(%rip), %rdx ## literal pool for: "Background"
10001b8cb:	48 8d 35 de 8e 02 00	leaq	167646(%rip), %rsi ## literal pool for: "LimitLoadToSessionType"
10001b8d2:	4c 89 f7	movq	%r14, %rdi
10001b8d5:	e8 c2 67 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001b8da:	49 8d 9f f0 03 00 00	leaq	1008(%r15), %rbx
10001b8e1:	48 89 df	movq	%rbx, %rdi
10001b8e4:	e8 e9 dc 01 00	callq	0x1000395d2
10001b8e9:	84 c0	testb	%al, %al
10001b8eb:	74 0c	je	0x10001b8f9
10001b8ed:	48 ba ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rdx
10001b8f7:	eb 17	jmp	0x10001b910
10001b8f9:	48 89 df	movq	%rbx, %rdi
10001b8fc:	e8 75 db 01 00	callq	0x100039476
10001b901:	84 c0	testb	%al, %al
10001b903:	74 09	je	0x10001b90e
10001b905:	49 63 97 0c 04 00 00	movslq	1036(%r15), %rdx
10001b90c:	eb 02	jmp	0x10001b910
10001b90e:	31 d2	xorl	%edx, %edx
10001b910:	48 8d 35 2f e5 02 00	leaq	189743(%rip), %rsi ## literal pool for: "LastExitStatus"
10001b917:	4c 89 f7	movq	%r14, %rdi
10001b91a:	e8 65 67 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001b91f:	49 63 97 c8 03 00 00	movslq	968(%r15), %rdx
10001b926:	48 85 d2	testq	%rdx, %rdx
10001b929:	74 0f	je	0x10001b93a
10001b92b:	48 8d 35 23 e5 02 00	leaq	189731(%rip), %rsi ## literal pool for: "PID"
10001b932:	4c 89 f7	movq	%r14, %rdi
10001b935:	e8 4a 67 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001b93a:	49 8b 97 b8 01 00 00	movq	440(%r15), %rdx
10001b941:	48 85 d2	testq	%rdx, %rdx
10001b944:	74 0f	je	0x10001b955
10001b946:	48 8d 35 13 ae 02 00	leaq	175635(%rip), %rsi ## literal pool for: "StandardInPath"
10001b94d:	4c 89 f7	movq	%r14, %rdi
10001b950:	e8 47 67 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001b955:	49 8b 97 c0 01 00 00	movq	448(%r15), %rdx
10001b95c:	48 85 d2	testq	%rdx, %rdx
10001b95f:	74 0f	je	0x10001b970
10001b961:	48 8d 35 d6 ad 02 00	leaq	175574(%rip), %rsi ## literal pool for: "StandardOutPath"
10001b968:	4c 89 f7	movq	%r14, %rdi
10001b96b:	e8 2c 67 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001b970:	49 8b 97 c8 01 00 00	movq	456(%r15), %rdx
10001b977:	48 85 d2	testq	%rdx, %rdx
10001b97a:	74 0f	je	0x10001b98b
10001b97c:	48 8d 35 cb ad 02 00	leaq	175563(%rip), %rsi ## literal pool for: "StandardErrorPath"
10001b983:	4c 89 f7	movq	%r14, %rdi
10001b986:	e8 11 67 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001b98b:	49 8b 87 0d 05 00 00	movq	1293(%r15), %rax
10001b992:	0f ba e0 08	btl	$8, %eax
10001b996:	73 1b	jae	0x10001b9b3
10001b998:	48 8d 35 9e 87 02 00	leaq	165790(%rip), %rsi ## literal pool for: "EnableTransactions"
10001b99f:	4c 89 f7	movq	%r14, %rdi
10001b9a2:	ba 01 00 00 00	movl	$1, %edx
10001b9a7:	e8 cc 66 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001b9ac:	49 8b 87 0d 05 00 00	movq	1293(%r15), %rax
10001b9b3:	0f ba e0 0e	btl	$14, %eax
10001b9b7:	73 1c	jae	0x10001b9d5
10001b9b9:	48 8d 35 14 9c 02 00	leaq	171028(%rip), %rsi ## literal pool for: "SessionCreate"
10001b9c0:	4c 89 f7	movq	%r14, %rdi
10001b9c3:	ba 01 00 00 00	movl	$1, %edx
10001b9c8:	e8 ab 66 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001b9cd:	41 0f b7 87 0d 05 00 00	movzwl	1293(%r15), %eax
10001b9d5:	66 85 c0	testw	%ax, %ax
10001b9d8:	79 30	jns	0x10001ba0a
10001b9da:	48 8d 35 7a b5 02 00	leaq	177530(%rip), %rsi ## literal pool for: "inetdCompatibility"
10001b9e1:	4c 89 f7	movq	%r14, %rdi
10001b9e4:	ba 01 00 00 00	movl	$1, %edx
10001b9e9:	e8 8a 66 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001b9ee:	41 8b 97 0d 05 00 00	movl	1293(%r15), %edx
10001b9f5:	c1 ea 10	shrl	$16, %edx
10001b9f8:	83 e2 01	andl	$1, %edx
10001b9fb:	48 8d 35 d0 b9 02 00	leaq	178640(%rip), %rsi ## literal pool for: "Wait"
10001ba02:	4c 89 f7	movq	%r14, %rdi
10001ba05:	e8 6e 66 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001ba0a:	49 8b 97 80 02 00 00	movq	640(%r15), %rdx
10001ba11:	48 85 d2	testq	%rdx, %rdx
10001ba14:	74 0f	je	0x10001ba25
10001ba16:	48 8d 35 63 8c 02 00	leaq	167011(%rip), %rsi ## literal pool for: "_AdditionalProperties"
10001ba1d:	4c 89 f7	movq	%r14, %rdi
10001ba20:	e8 89 66 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001ba25:	49 8b 97 58 02 00 00	movq	600(%r15), %rdx
10001ba2c:	48 8d 35 f2 7e 02 00	leaq	163570(%rip), %rsi ## literal pool for: "Program"
10001ba33:	4c 89 f7	movq	%r14, %rdi
10001ba36:	e8 61 66 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001ba3b:	41 83 bf a4 01 00 00 00	cmpl	$0, 420(%r15)
10001ba43:	74 5b	je	0x10001baa0
10001ba45:	31 ff	xorl	%edi, %edi
10001ba47:	31 f6	xorl	%esi, %esi
10001ba49:	e8 f2 64 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10001ba4e:	49 89 c4	movq	%rax, %r12
10001ba51:	41 83 bf a4 01 00 00 00	cmpl	$0, 420(%r15)
10001ba59:	74 2b	je	0x10001ba86
10001ba5b:	31 db	xorl	%ebx, %ebx
10001ba5d:	49 8b 87 a8 01 00 00	movq	424(%r15), %rax
10001ba64:	48 8b 14 d8	movq	(%rax,%rbx,8), %rdx
10001ba68:	4c 89 e7	movq	%r12, %rdi
10001ba6b:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10001ba72:	e8 ff 64 02 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
10001ba77:	48 ff c3	incq	%rbx
10001ba7a:	41 8b 87 a4 01 00 00	movl	420(%r15), %eax
10001ba81:	48 39 c3	cmpq	%rax, %rbx
10001ba84:	72 d7	jb	0x10001ba5d
10001ba86:	48 8d 35 a0 7e 02 00	leaq	163488(%rip), %rsi ## literal pool for: "ProgramArguments"
10001ba8d:	4c 89 f7	movq	%r14, %rdi
10001ba90:	4c 89 e2	movq	%r12, %rdx
10001ba93:	e8 16 66 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001ba98:	4c 89 e7	movq	%r12, %rdi
10001ba9b:	e8 5c 66 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001baa0:	4c 89 f0	movq	%r14, %rax
10001baa3:	5b	popq	%rbx
10001baa4:	41 5c	popq	%r12
10001baa6:	41 5e	popq	%r14
10001baa8:	41 5f	popq	%r15
10001baaa:	5d	popq	%rbp
10001baab:	c3	retq
10001baac:	49 81 c7 18 05 00 00	addq	$1304, %r15
10001bab3:	48 8d 3d 02 7e 02 00	leaq	163330(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001baba:	4c 89 fa	movq	%r15, %rdx
10001babd:	31 c0	xorl	%eax, %eax
10001babf:	e8 4e 89 01 00	callq	0x100034412
10001bac4:	55	pushq	%rbp
10001bac5:	48 89 e5	movq	%rsp, %rbp
10001bac8:	41 57	pushq	%r15
10001baca:	41 56	pushq	%r14
10001bacc:	41 55	pushq	%r13
10001bace:	41 54	pushq	%r12
10001bad0:	53	pushq	%rbx
10001bad1:	50	pushq	%rax
10001bad2:	49 89 ff	movq	%rdi, %r15
10001bad5:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001badb:	85 f6	testl	%esi, %esi
10001badd:	0f 85 45 02 00 00	jne	0x10001bd28
10001bae3:	31 ff	xorl	%edi, %edi
10001bae5:	31 f6	xorl	%esi, %esi
10001bae7:	31 d2	xorl	%edx, %edx
10001bae9:	e8 24 65 02 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10001baee:	49 89 c6	movq	%rax, %r14
10001baf1:	49 8b 97 0d 05 00 00	movq	1293(%r15), %rdx
10001baf8:	48 c1 ea 26	shrq	$38, %rdx
10001bafc:	83 e2 01	andl	$1, %edx
10001baff:	48 8d 35 53 e3 02 00	leaq	189267(%rip), %rsi ## literal pool for: "extension"
10001bb06:	48 89 c7	movq	%rax, %rdi
10001bb09:	e8 6a 65 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001bb0e:	48 8b 05 5b c6 03 00	movq	247387(%rip), %rax ## literal pool symbol address: _launch_extension_property_xpc_bundle
10001bb15:	48 8b 30	movq	(%rax), %rsi
10001bb18:	49 8b 97 0d 05 00 00	movq	1293(%r15), %rdx
10001bb1f:	83 e2 02	andl	$2, %edx
10001bb22:	48 d1 ea	shrq	%rdx
10001bb25:	4c 89 f7	movq	%r14, %rdi
10001bb28:	e8 4b 65 02 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10001bb2d:	49 8b 97 38 02 00 00	movq	568(%r15), %rdx
10001bb34:	48 85 d2	testq	%rdx, %rdx
10001bb37:	74 0f	je	0x10001bb48
10001bb39:	48 8d 35 23 e3 02 00	leaq	189219(%rip), %rsi ## literal pool for: "bundle-id"
10001bb40:	4c 89 f7	movq	%r14, %rdi
10001bb43:	e8 54 65 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bb48:	49 8b 97 40 02 00 00	movq	576(%r15), %rdx
10001bb4f:	48 85 d2	testq	%rdx, %rdx
10001bb52:	74 0f	je	0x10001bb63
10001bb54:	48 8d 35 12 e3 02 00	leaq	189202(%rip), %rsi ## literal pool for: "version"
10001bb5b:	4c 89 f7	movq	%r14, %rdi
10001bb5e:	e8 39 65 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bb63:	48 8b 05 fe c5 03 00	movq	247294(%rip), %rax ## literal pool symbol address: _launch_extension_property_pid
10001bb6a:	48 8b 30	movq	(%rax), %rsi
10001bb6d:	49 63 97 c8 03 00 00	movslq	968(%r15), %rdx
10001bb74:	4c 89 f7	movq	%r14, %rdi
10001bb77:	e8 08 65 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001bb7c:	49 8b 97 68 01 00 00	movq	360(%r15), %rdx
10001bb83:	80 3a 2f	cmpb	$47, (%rdx)
10001bb86:	75 0f	jne	0x10001bb97
10001bb88:	48 8d 35 e6 e2 02 00	leaq	189158(%rip), %rsi ## literal pool for: "path"
10001bb8f:	4c 89 f7	movq	%r14, %rdi
10001bb92:	e8 05 65 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bb97:	49 8b 9f e8 00 00 00	movq	232(%r15), %rbx
10001bb9e:	48 89 df	movq	%rbx, %rdi
10001bba1:	e8 b6 f5 00 00	callq	0x10002b15c
10001bba6:	48 3b 05 e3 c4 03 00	cmpq	247011(%rip), %rax
10001bbad:	75 4a	jne	0x10001bbf9
10001bbaf:	48 89 df	movq	%rbx, %rdi
10001bbb2:	e8 af f5 00 00	callq	0x10002b166
10001bbb7:	48 89 c3	movq	%rax, %rbx
10001bbba:	89 df	movl	%ebx, %edi
10001bbbc:	e8 05 f1 ff ff	callq	0x10001acc6
10001bbc1:	48 85 c0	testq	%rax, %rax
10001bbc4:	74 1e	je	0x10001bbe4
10001bbc6:	48 8b 90 38 02 00 00	movq	568(%rax), %rdx
10001bbcd:	48 85 d2	testq	%rdx, %rdx
10001bbd0:	74 12	je	0x10001bbe4
10001bbd2:	48 8b 05 7f c5 03 00	movq	247167(%rip), %rax ## literal pool symbol address: _launch_extension_property_host_bundle_id
10001bbd9:	48 8b 30	movq	(%rax), %rsi
10001bbdc:	4c 89 f7	movq	%r14, %rdi
10001bbdf:	e8 b8 64 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bbe4:	48 8b 05 75 c5 03 00	movq	247157(%rip), %rax ## literal pool symbol address: _launch_extension_property_host_pid
10001bbeb:	48 8b 30	movq	(%rax), %rsi
10001bbee:	48 63 d3	movslq	%ebx, %rdx
10001bbf1:	4c 89 f7	movq	%r14, %rdi
10001bbf4:	e8 8b 64 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001bbf9:	31 ff	xorl	%edi, %edi
10001bbfb:	31 f6	xorl	%esi, %esi
10001bbfd:	e8 3e 63 02 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10001bc02:	49 89 c4	movq	%rax, %r12
10001bc05:	49 8b 9f 88 00 00 00	movq	136(%r15), %rbx
10001bc0c:	48 85 db	testq	%rbx, %rbx
10001bc0f:	74 24	je	0x10001bc35
10001bc11:	48 89 df	movq	%rbx, %rdi
10001bc14:	e8 b4 f7 01 00	callq	0x10003b3cd
10001bc19:	49 89 c5	movq	%rax, %r13
10001bc1c:	4c 89 e7	movq	%r12, %rdi
10001bc1f:	48 89 c6	movq	%rax, %rsi
10001bc22:	e8 07 63 02 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
10001bc27:	4c 89 ef	movq	%r13, %rdi
10001bc2a:	e8 cd 64 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001bc2f:	48 8b 5b 08	movq	8(%rbx), %rbx
10001bc33:	eb d7	jmp	0x10001bc0c
10001bc35:	49 8b 9f a0 00 00 00	movq	160(%r15), %rbx
10001bc3c:	48 85 db	testq	%rbx, %rbx
10001bc3f:	74 24	je	0x10001bc65
10001bc41:	48 89 df	movq	%rbx, %rdi
10001bc44:	e8 84 f7 01 00	callq	0x10003b3cd
10001bc49:	49 89 c5	movq	%rax, %r13
10001bc4c:	4c 89 e7	movq	%r12, %rdi
10001bc4f:	48 89 c6	movq	%rax, %rsi
10001bc52:	e8 d7 62 02 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
10001bc57:	4c 89 ef	movq	%r13, %rdi
10001bc5a:	e8 9d 64 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001bc5f:	48 8b 5b 08	movq	8(%rbx), %rbx
10001bc63:	eb d7	jmp	0x10001bc3c
10001bc65:	4c 89 e7	movq	%r12, %rdi
10001bc68:	e8 df 62 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001bc6d:	48 85 c0	testq	%rax, %rax
10001bc70:	74 15	je	0x10001bc87
10001bc72:	48 8b 05 1f c5 03 00	movq	247071(%rip), %rax ## literal pool symbol address: _launch_perfcheck_property_endpoints
10001bc79:	48 8b 30	movq	(%rax), %rsi
10001bc7c:	4c 89 f7	movq	%r14, %rdi
10001bc7f:	4c 89 e2	movq	%r12, %rdx
10001bc82:	e8 27 64 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001bc87:	4c 89 e7	movq	%r12, %rdi
10001bc8a:	e8 6d 64 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001bc8f:	49 8b 97 f0 00 00 00	movq	240(%r15), %rdx
10001bc96:	48 85 d2	testq	%rdx, %rdx
10001bc99:	49 0f 44 d7	cmoveq	%r15, %rdx
10001bc9d:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001bca4:	48 8d 35 cf e1 02 00	leaq	188879(%rip), %rsi ## literal pool for: "label"
10001bcab:	4c 89 f7	movq	%r14, %rdi
10001bcae:	e8 e9 63 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bcb3:	49 0f ba a7 0d 05 00 00 30	btq	$48, 1293(%r15)
10001bcbc:	73 16	jae	0x10001bcd4
10001bcbe:	49 8d 97 90 01 00 00	leaq	400(%r15), %rdx
10001bcc5:	48 8d 35 b4 e1 02 00	leaq	188852(%rip), %rsi ## literal pool for: "instance"
10001bccc:	4c 89 f7	movq	%r14, %rdi
10001bccf:	e8 d4 63 02 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
10001bcd4:	49 63 97 38 03 00 00	movslq	824(%r15), %rdx
10001bcdb:	48 8d 35 a7 e1 02 00	leaq	188839(%rip), %rsi ## literal pool for: "jp-priority"
10001bce2:	4c 89 f7	movq	%r14, %rdi
10001bce5:	e8 9a 63 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001bcea:	49 8b 97 80 02 00 00	movq	640(%r15), %rdx
10001bcf1:	48 8d 35 9d e1 02 00	leaq	188829(%rip), %rsi ## literal pool for: "additional-properties"
10001bcf8:	4c 89 f7	movq	%r14, %rdi
10001bcfb:	e8 ae 63 02 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10001bd00:	49 8b 97 58 02 00 00	movq	600(%r15), %rdx
10001bd07:	48 8d 35 9d e1 02 00	leaq	188829(%rip), %rsi ## literal pool for: "program"
10001bd0e:	4c 89 f7	movq	%r14, %rdi
10001bd11:	e8 86 63 02 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10001bd16:	4c 89 f0	movq	%r14, %rax
10001bd19:	48 83 c4 08	addq	$8, %rsp
10001bd1d:	5b	popq	%rbx
10001bd1e:	41 5c	popq	%r12
10001bd20:	41 5d	popq	%r13
10001bd22:	41 5e	popq	%r14
10001bd24:	41 5f	popq	%r15
10001bd26:	5d	popq	%rbp
10001bd27:	c3	retq
10001bd28:	49 81 c7 18 05 00 00	addq	$1304, %r15
10001bd2f:	48 8d 3d 86 7b 02 00	leaq	162694(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001bd36:	4c 89 fa	movq	%r15, %rdx
10001bd39:	31 c0	xorl	%eax, %eax
10001bd3b:	e8 d2 86 01 00	callq	0x100034412
10001bd40:	55	pushq	%rbp
10001bd41:	48 89 e5	movq	%rsp, %rbp
10001bd44:	48 89 fa	movq	%rdi, %rdx
10001bd47:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001bd4d:	85 f6	testl	%esi, %esi
10001bd4f:	75 09	jne	0x10001bd5a
10001bd51:	48 8b 82 58 02 00 00	movq	600(%rdx), %rax
10001bd58:	5d	popq	%rbp
10001bd59:	c3	retq
10001bd5a:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001bd61:	48 8d 3d 54 7b 02 00	leaq	162644(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001bd68:	31 c0	xorl	%eax, %eax
10001bd6a:	e8 a3 86 01 00	callq	0x100034412
10001bd6f:	55	pushq	%rbp
10001bd70:	48 89 e5	movq	%rsp, %rbp
10001bd73:	41 57	pushq	%r15
10001bd75:	41 56	pushq	%r14
10001bd77:	53	pushq	%rbx
10001bd78:	50	pushq	%rax
10001bd79:	48 89 fa	movq	%rdi, %rdx
10001bd7c:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001bd82:	85 f6	testl	%esi, %esi
10001bd84:	75 70	jne	0x10001bdf6
10001bd86:	48 8b 9a b8 03 00 00	movq	952(%rdx), %rbx
10001bd8d:	48 85 db	testq	%rbx, %rbx
10001bd90:	74 0a	je	0x10001bd9c
10001bd92:	66 83 ba e2 03 00 00 01	cmpw	$1, 994(%rdx)
10001bd9a:	77 4c	ja	0x10001bde8
10001bd9c:	44 8a ba 0d 05 00 00	movb	1293(%rdx), %r15b
10001bda3:	48 8b 9a 58 02 00 00	movq	600(%rdx), %rbx
10001bdaa:	48 89 df	movq	%rbx, %rdi
10001bdad:	be 2f 00 00 00	movl	$47, %esi
10001bdb2:	e8 b7 60 02 00	callq	0x100041e6e ## symbol stub for: _strrchr
10001bdb7:	49 89 c6	movq	%rax, %r14
10001bdba:	41 f6 c7 02	testb	$2, %r15b
10001bdbe:	75 09	jne	0x10001bdc9
10001bdc0:	4d 85 f6	testq	%r14, %r14
10001bdc3:	49 0f 45 de	cmovneq	%r14, %rbx
10001bdc7:	eb 1c	jmp	0x10001bde5
10001bdc9:	4d 85 f6	testq	%r14, %r14
10001bdcc:	74 17	je	0x10001bde5
10001bdce:	4c 89 f7	movq	%r14, %rdi
10001bdd1:	be 2e 00 00 00	movl	$46, %esi
10001bdd6:	e8 93 60 02 00	callq	0x100041e6e ## symbol stub for: _strrchr
10001bddb:	48 89 c3	movq	%rax, %rbx
10001bdde:	48 85 c0	testq	%rax, %rax
10001bde1:	49 0f 44 de	cmoveq	%r14, %rbx
10001bde5:	48 ff c3	incq	%rbx
10001bde8:	48 89 d8	movq	%rbx, %rax
10001bdeb:	48 83 c4 08	addq	$8, %rsp
10001bdef:	5b	popq	%rbx
10001bdf0:	41 5e	popq	%r14
10001bdf2:	41 5f	popq	%r15
10001bdf4:	5d	popq	%rbp
10001bdf5:	c3	retq
10001bdf6:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001bdfd:	48 8d 3d b8 7a 02 00	leaq	162488(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001be04:	31 c0	xorl	%eax, %eax
10001be06:	e8 07 86 01 00	callq	0x100034412
10001be0b:	55	pushq	%rbp
10001be0c:	48 89 e5	movq	%rsp, %rbp
10001be0f:	48 89 fa	movq	%rdi, %rdx
10001be12:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001be18:	85 f6	testl	%esi, %esi
10001be1a:	75 09	jne	0x10001be25
10001be1c:	48 8b 82 40 02 00 00	movq	576(%rdx), %rax
10001be23:	5d	popq	%rbp
10001be24:	c3	retq
10001be25:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001be2c:	48 8d 3d 89 7a 02 00	leaq	162441(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001be33:	31 c0	xorl	%eax, %eax
10001be35:	e8 d8 85 01 00	callq	0x100034412
10001be3a:	90	nop
10001be3b:	90	nop
10001be3c:	90	nop
10001be3d:	55	pushq	%rbp
10001be3e:	48 89 e5	movq	%rsp, %rbp
10001be41:	48 89 fa	movq	%rdi, %rdx
10001be44:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001be4a:	85 f6	testl	%esi, %esi
10001be4c:	75 09	jne	0x10001be57
10001be4e:	48 8b 82 38 02 00 00	movq	568(%rdx), %rax
10001be55:	5d	popq	%rbp
10001be56:	c3	retq
10001be57:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001be5e:	48 8d 3d 57 7a 02 00	leaq	162391(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001be65:	31 c0	xorl	%eax, %eax
10001be67:	e8 a6 85 01 00	callq	0x100034412
10001be6c:	55	pushq	%rbp
10001be6d:	48 89 e5	movq	%rsp, %rbp
10001be70:	48 8d 87 f0 03 00 00	leaq	1008(%rdi), %rax
10001be77:	5d	popq	%rbp
10001be78:	c3	retq
10001be79:	55	pushq	%rbp
10001be7a:	48 89 e5	movq	%rsp, %rbp
10001be7d:	48 89 f0	movq	%rsi, %rax
10001be80:	48 89 fa	movq	%rdi, %rdx
10001be83:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001be89:	85 f6	testl	%esi, %esi
10001be8b:	75 17	jne	0x10001bea4
10001be8d:	8a 8a 0f 05 00 00	movb	1295(%rdx), %cl
10001be93:	80 e1 01	andb	$1, %cl
10001be96:	88 08	movb	%cl, (%rax)
10001be98:	0f b7 82 0d 05 00 00	movzwl	1293(%rdx), %eax
10001be9f:	c1 e8 0f	shrl	$15, %eax
10001bea2:	5d	popq	%rbp
10001bea3:	c3	retq
10001bea4:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001beab:	48 8d 3d 0a 7a 02 00	leaq	162314(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001beb2:	31 c0	xorl	%eax, %eax
10001beb4:	e8 59 85 01 00	callq	0x100034412
10001beb9:	55	pushq	%rbp
10001beba:	48 89 e5	movq	%rsp, %rbp
10001bebd:	48 89 fa	movq	%rdi, %rdx
10001bec0:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001bec6:	85 f6	testl	%esi, %esi
10001bec8:	75 0c	jne	0x10001bed6
10001beca:	8a 82 e8 03 00 00	movb	1000(%rdx), %al
10001bed0:	24 02	andb	$2, %al
10001bed2:	d0 e8	shrb	%al
10001bed4:	5d	popq	%rbp
10001bed5:	c3	retq
10001bed6:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001bedd:	48 8d 3d d8 79 02 00	leaq	162264(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001bee4:	31 c0	xorl	%eax, %eax
10001bee6:	e8 27 85 01 00	callq	0x100034412
10001beeb:	55	pushq	%rbp
10001beec:	48 89 e5	movq	%rsp, %rbp
10001beef:	48 89 fa	movq	%rdi, %rdx
10001bef2:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001bef8:	85 f6	testl	%esi, %esi
10001befa:	75 0e	jne	0x10001bf0a
10001befc:	8b 82 0d 05 00 00	movl	1293(%rdx), %eax
10001bf02:	c1 e8 0c	shrl	$12, %eax
10001bf05:	83 e0 01	andl	$1, %eax
10001bf08:	5d	popq	%rbp
10001bf09:	c3	retq
10001bf0a:	48 81 c2 18 05 00 00	addq	$1304, %rdx
10001bf11:	48 8d 3d a4 79 02 00	leaq	162212(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001bf18:	31 c0	xorl	%eax, %eax
10001bf1a:	e8 f3 84 01 00	callq	0x100034412
10001bf1f:	55	pushq	%rbp
10001bf20:	48 89 e5	movq	%rsp, %rbp
10001bf23:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10001bf2a:	48 c1 e8 32	shrq	$50, %rax
10001bf2e:	83 e0 01	andl	$1, %eax
10001bf31:	5d	popq	%rbp
10001bf32:	c3	retq
10001bf33:	90	nop
10001bf34:	90	nop
10001bf35:	90	nop
10001bf36:	55	pushq	%rbp
10001bf37:	48 89 e5	movq	%rsp, %rbp
10001bf3a:	41 57	pushq	%r15
10001bf3c:	41 56	pushq	%r14
10001bf3e:	41 55	pushq	%r13
10001bf40:	41 54	pushq	%r12
10001bf42:	53	pushq	%rbx
10001bf43:	50	pushq	%rax
10001bf44:	48 83 3d 34 6f 04 00 00	cmpq	$0, 290612(%rip)
10001bf4c:	74 70	je	0x10001bfbe
10001bf4e:	49 89 f5	movq	%rsi, %r13
10001bf51:	49 89 fe	movq	%rdi, %r14
10001bf54:	4c 8d 7e 01	leaq	1(%rsi), %r15
10001bf58:	48 8d 15 54 df 02 00	leaq	188244(%rip), %rdx ## literal pool for: "pending global attachments = {"
10001bf5f:	4c 89 fe	movq	%r15, %rsi
10001bf62:	31 c0	xorl	%eax, %eax
10001bf64:	e8 09 cd 01 00	callq	0x100038c72
10001bf69:	48 8b 1d 10 6f 04 00	movq	290576(%rip), %rbx
10001bf70:	48 85 db	testq	%rbx, %rbx
10001bf73:	74 27	je	0x10001bf9c
10001bf75:	49 83 c5 02	addq	$2, %r13
10001bf79:	4c 8d 25 96 b6 02 00	leaq	177814(%rip), %r12 ## literal pool for: "%s"
10001bf80:	48 8b 4b 10	movq	16(%rbx), %rcx
10001bf84:	4c 89 f7	movq	%r14, %rdi
10001bf87:	4c 89 ee	movq	%r13, %rsi
10001bf8a:	4c 89 e2	movq	%r12, %rdx
10001bf8d:	31 c0	xorl	%eax, %eax
10001bf8f:	e8 de cc 01 00	callq	0x100038c72
10001bf94:	48 8b 1b	movq	(%rbx), %rbx
10001bf97:	48 85 db	testq	%rbx, %rbx
10001bf9a:	75 e4	jne	0x10001bf80
10001bf9c:	48 8d 15 db ca 02 00	leaq	183003(%rip), %rdx ## literal pool for: "}"
10001bfa3:	4c 89 f7	movq	%r14, %rdi
10001bfa6:	4c 89 fe	movq	%r15, %rsi
10001bfa9:	31 c0	xorl	%eax, %eax
10001bfab:	48 83 c4 08	addq	$8, %rsp
10001bfaf:	5b	popq	%rbx
10001bfb0:	41 5c	popq	%r12
10001bfb2:	41 5d	popq	%r13
10001bfb4:	41 5e	popq	%r14
10001bfb6:	41 5f	popq	%r15
10001bfb8:	5d	popq	%rbp
10001bfb9:	e9 b4 cc 01 00	jmp	0x100038c72
10001bfbe:	48 83 c4 08	addq	$8, %rsp
10001bfc2:	5b	popq	%rbx
10001bfc3:	41 5c	popq	%r12
10001bfc5:	41 5d	popq	%r13
10001bfc7:	41 5e	popq	%r14
10001bfc9:	41 5f	popq	%r15
10001bfcb:	5d	popq	%rbp
10001bfcc:	c3	retq
10001bfcd:	55	pushq	%rbp
10001bfce:	48 89 e5	movq	%rsp, %rbp
10001bfd1:	48 89 f1	movq	%rsi, %rcx
10001bfd4:	48 89 f8	movq	%rdi, %rax
10001bfd7:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001bfdd:	85 f6	testl	%esi, %esi
10001bfdf:	75 0c	jne	0x10001bfed
10001bfe1:	48 89 c7	movq	%rax, %rdi
10001bfe4:	48 89 ce	movq	%rcx, %rsi
10001bfe7:	5d	popq	%rbp
10001bfe8:	e9 17 00 00 00	jmp	0x10001c004
10001bfed:	48 05 18 05 00 00	addq	$1304, %rax
10001bff3:	48 8d 3d c2 78 02 00	leaq	161986(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001bffa:	48 89 c2	movq	%rax, %rdx
10001bffd:	31 c0	xorl	%eax, %eax
10001bfff:	e8 0e 84 01 00	callq	0x100034412
10001c004:	55	pushq	%rbp
10001c005:	48 89 e5	movq	%rsp, %rbp
10001c008:	41 57	pushq	%r15
10001c00a:	41 56	pushq	%r14
10001c00c:	41 55	pushq	%r13
10001c00e:	41 54	pushq	%r12
10001c010:	53	pushq	%rbx
10001c011:	48 81 ec 48 01 00 00	subq	$328, %rsp
10001c018:	49 89 d4	movq	%rdx, %r12
10001c01b:	49 89 f6	movq	%rsi, %r14
10001c01e:	49 89 ff	movq	%rdi, %r15
10001c021:	48 8b 05 00 c0 03 00	movq	245760(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001c028:	48 8b 00	movq	(%rax), %rax
10001c02b:	48 89 45 d0	movq	%rax, -48(%rbp)
10001c02f:	be 01 00 00 00	movl	$1, %esi
10001c034:	e8 ef c2 ff ff	callq	0x100018328
10001c039:	48 89 c3	movq	%rax, %rbx
10001c03c:	48 8d 15 9b fa 02 00	leaq	195227(%rip), %rdx ## literal pool for: "%s = {"
10001c043:	4c 89 f7	movq	%r14, %rdi
10001c046:	4c 89 e6	movq	%r12, %rsi
10001c049:	48 89 c1	movq	%rax, %rcx
10001c04c:	31 c0	xorl	%eax, %eax
10001c04e:	e8 1f cc 01 00	callq	0x100038c72
10001c053:	48 89 df	movq	%rbx, %rdi
10001c056:	e8 d5 59 02 00	callq	0x100041a30 ## symbol stub for: _free
10001c05b:	4c 89 a5 b8 fe ff ff	movq	%r12, -328(%rbp)
10001c062:	4d 8d 6c 24 01	leaq	1(%r12), %r13
10001c067:	49 0f ba a7 0d 05 00 00 30	btq	$48, 1293(%r15)
10001c070:	73 20	jae	0x10001c092
10001c072:	b9 18 05 00 00	movl	$1304, %ecx
10001c077:	49 03 8f f0 00 00 00	addq	240(%r15), %rcx
10001c07e:	48 8d 15 60 fa 02 00	leaq	195168(%rip), %rdx ## literal pool for: "original = %s"
10001c085:	4c 89 f7	movq	%r14, %rdi
10001c088:	4c 89 ee	movq	%r13, %rsi
10001c08b:	31 c0	xorl	%eax, %eax
10001c08d:	e8 e0 cb 01 00	callq	0x100038c72
10001c092:	41 0f bf 8f 1c 01 00 00	movswl	284(%r15), %ecx
10001c09a:	48 8d 15 52 fa 02 00	leaq	195154(%rip), %rdx ## literal pool for: "active count = %d"
10001c0a1:	4c 89 f7	movq	%r14, %rdi
10001c0a4:	4c 89 ee	movq	%r13, %rsi
10001c0a7:	31 c0	xorl	%eax, %eax
10001c0a9:	e8 c4 cb 01 00	callq	0x100038c72
10001c0ae:	41 8b 8f f8 00 00 00	movl	248(%r15), %ecx
10001c0b5:	85 c9	testl	%ecx, %ecx
10001c0b7:	74 14	je	0x10001c0cd
10001c0b9:	48 8d 15 45 fa 02 00	leaq	195141(%rip), %rdx ## literal pool for: "copy count = %d"
10001c0c0:	4c 89 f7	movq	%r14, %rdi
10001c0c3:	4c 89 ee	movq	%r13, %rsi
10001c0c6:	31 c0	xorl	%eax, %eax
10001c0c8:	e8 a5 cb 01 00	callq	0x100038c72
10001c0cd:	49 8b 8f 68 01 00 00	movq	360(%r15), %rcx
10001c0d4:	48 85 c9	testq	%rcx, %rcx
10001c0d7:	74 14	je	0x10001c0ed
10001c0d9:	48 8d 15 a2 d4 02 00	leaq	185506(%rip), %rdx ## literal pool for: "path = %s"
10001c0e0:	4c 89 f7	movq	%r14, %rdi
10001c0e3:	4c 89 ee	movq	%r13, %rsi
10001c0e6:	31 c0	xorl	%eax, %eax
10001c0e8:	e8 85 cb 01 00	callq	0x100038c72
10001c0ed:	41 8a 87 a0 01 00 00	movb	416(%r15), %al
10001c0f4:	fe c8	decb	%al
10001c0f6:	3c 07	cmpb	$7, %al
10001c0f8:	77 11	ja	0x10001c10b
10001c0fa:	48 0f be c0	movsbq	%al, %rax
10001c0fe:	48 8d 0d 5b ee 03 00	leaq	257627(%rip), %rcx
10001c105:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
10001c109:	eb 07	jmp	0x10001c112
10001c10b:	48 8d 0d ce e1 02 00	leaq	188878(%rip), %rcx ## literal pool for: "not running"
10001c112:	48 8d 15 fc f9 02 00	leaq	195068(%rip), %rdx ## literal pool for: "state = %s"
10001c119:	4c 89 f7	movq	%r14, %rdi
10001c11c:	4c 89 ee	movq	%r13, %rsi
10001c11f:	31 c0	xorl	%eax, %eax
10001c121:	e8 4c cb 01 00	callq	0x100038c72
10001c126:	49 8b 8f 38 02 00 00	movq	568(%r15), %rcx
10001c12d:	48 85 c9	testq	%rcx, %rcx
10001c130:	74 14	je	0x10001c146
10001c132:	48 8d 15 e7 f9 02 00	leaq	195047(%rip), %rdx ## literal pool for: "bundle id = %s"
10001c139:	4c 89 f7	movq	%r14, %rdi
10001c13c:	4c 89 ee	movq	%r13, %rsi
10001c13f:	31 c0	xorl	%eax, %eax
10001c141:	e8 2c cb 01 00	callq	0x100038c72
10001c146:	49 8b 8f 40 02 00 00	movq	576(%r15), %rcx
10001c14d:	48 85 c9	testq	%rcx, %rcx
10001c150:	74 14	je	0x10001c166
10001c152:	48 8d 15 d6 f9 02 00	leaq	195030(%rip), %rdx ## literal pool for: "bundle version = %s"
10001c159:	4c 89 f7	movq	%r14, %rdi
10001c15c:	4c 89 ee	movq	%r13, %rsi
10001c15f:	31 c0	xorl	%eax, %eax
10001c161:	e8 0c cb 01 00	callq	0x100038c72
10001c166:	49 0f ba a7 0d 05 00 00 26	btq	$38, 1293(%r15)
10001c16f:	73 1b	jae	0x10001c18c
10001c171:	49 8b 8f 48 02 00 00	movq	584(%r15), %rcx
10001c178:	48 8d 15 c4 f9 02 00	leaq	195012(%rip), %rdx ## literal pool for: "extension point = %s"
10001c17f:	4c 89 f7	movq	%r14, %rdi
10001c182:	4c 89 ee	movq	%r13, %rsi
10001c185:	31 c0	xorl	%eax, %eax
10001c187:	e8 e6 ca 01 00	callq	0x100038c72
10001c18c:	41 8b 87 a8 02 00 00	movl	680(%r15), %eax
10001c193:	85 c0	testl	%eax, %eax
10001c195:	74 54	je	0x10001c1eb
10001c197:	0f 57 c0	xorps	%xmm0, %xmm0
10001c19a:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
10001c1a1:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
10001c1a5:	0f 29 07	movaps	%xmm0, (%rdi)
10001c1a8:	89 47 14	movl	%eax, 20(%rdi)
10001c1ab:	0f 28 05 ce 70 02 00	movaps	159950(%rip), %xmm0
10001c1b2:	48 8d b5 d0 fe ff ff	leaq	-304(%rbp), %rsi
10001c1b9:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10001c1bd:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10001c1c1:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10001c1c5:	0f 29 06	movaps	%xmm0, (%rsi)
10001c1c8:	e8 90 86 01 00	callq	0x10003485d
10001c1cd:	45 8b 87 a8 02 00 00	movl	680(%r15), %r8d
10001c1d4:	48 8d 15 7d f9 02 00	leaq	194941(%rip), %rdx ## literal pool for: "controller = %s.%d"
10001c1db:	4c 89 f7	movq	%r14, %rdi
10001c1de:	4c 89 ee	movq	%r13, %rsi
10001c1e1:	48 89 c1	movq	%rax, %rcx
10001c1e4:	31 c0	xorl	%eax, %eax
10001c1e6:	e8 87 ca 01 00	callq	0x100038c72
10001c1eb:	4c 89 f7	movq	%r14, %rdi
10001c1ee:	e8 7a cb 01 00	callq	0x100038d6d
10001c1f3:	49 0f ba a7 0d 05 00 00 21	btq	$33, 1293(%r15)
10001c1fc:	49 8b 8f 58 02 00 00	movq	600(%r15), %rcx
10001c203:	48 8d 05 79 f9 02 00	leaq	194937(%rip), %rax ## literal pool for: "program = %s"
10001c20a:	48 8d 15 5a f9 02 00	leaq	194906(%rip), %rdx ## literal pool for: "program identifier = %s"
10001c211:	48 0f 43 d0	cmovaeq	%rax, %rdx
10001c215:	4c 89 f7	movq	%r14, %rdi
10001c218:	4c 89 ee	movq	%r13, %rsi
10001c21b:	31 c0	xorl	%eax, %eax
10001c21d:	e8 50 ca 01 00	callq	0x100038c72
10001c222:	49 8b 8f a8 04 00 00	movq	1192(%r15), %rcx
10001c229:	48 85 c9	testq	%rcx, %rcx
10001c22c:	74 1c	je	0x10001c24a
10001c22e:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c235:	48 8d 70 02	leaq	2(%rax), %rsi
10001c239:	48 8d 15 50 f9 02 00	leaq	194896(%rip), %rdx ## literal pool for: "+ %s"
10001c240:	4c 89 f7	movq	%r14, %rdi
10001c243:	31 c0	xorl	%eax, %eax
10001c245:	e8 28 ca 01 00	callq	0x100038c72
10001c24a:	49 8b 8f 60 02 00 00	movq	608(%r15), %rcx
10001c251:	48 85 c9	testq	%rcx, %rcx
10001c254:	74 14	je	0x10001c26a
10001c256:	48 8d 15 38 f9 02 00	leaq	194872(%rip), %rdx ## literal pool for: "parent bundle identifier = %s"
10001c25d:	4c 89 f7	movq	%r14, %rdi
10001c260:	4c 89 ee	movq	%r13, %rsi
10001c263:	31 c0	xorl	%eax, %eax
10001c265:	e8 08 ca 01 00	callq	0x100038c72
10001c26a:	49 8b 8f 68 02 00 00	movq	616(%r15), %rcx
10001c271:	48 85 c9	testq	%rcx, %rcx
10001c274:	74 14	je	0x10001c28a
10001c276:	48 8d 15 36 f9 02 00	leaq	194870(%rip), %rdx ## literal pool for: "parent bundle version = %s"
10001c27d:	4c 89 f7	movq	%r14, %rdi
10001c280:	4c 89 ee	movq	%r13, %rsi
10001c283:	31 c0	xorl	%eax, %eax
10001c285:	e8 e8 c9 01 00	callq	0x100038c72
10001c28a:	41 83 bf a4 01 00 00 00	cmpl	$0, 420(%r15)
10001c292:	4c 89 bd c8 fe ff ff	movq	%r15, -312(%rbp)
10001c299:	4c 89 ad c0 fe ff ff	movq	%r13, -320(%rbp)
10001c2a0:	75 0e	jne	0x10001c2b0
10001c2a2:	49 83 bf b0 04 00 00 00	cmpq	$0, 1200(%r15)
10001c2aa:	0f 84 29 01 00 00	je	0x10001c3d9
10001c2b0:	48 8d 15 17 f9 02 00	leaq	194839(%rip), %rdx ## literal pool for: "arguments = {"
10001c2b7:	4c 89 f7	movq	%r14, %rdi
10001c2ba:	4c 89 ee	movq	%r13, %rsi
10001c2bd:	31 c0	xorl	%eax, %eax
10001c2bf:	e8 ae c9 01 00	callq	0x100038c72
10001c2c4:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c2cb:	4c 8d 60 02	leaq	2(%rax), %r12
10001c2cf:	41 83 bf a4 01 00 00 00	cmpl	$0, 420(%r15)
10001c2d7:	74 33	je	0x10001c30c
10001c2d9:	4c 8d 2d 36 b3 02 00	leaq	176950(%rip), %r13 ## literal pool for: "%s"
10001c2e0:	31 db	xorl	%ebx, %ebx
10001c2e2:	49 8b 87 a8 01 00 00	movq	424(%r15), %rax
10001c2e9:	48 8b 0c d8	movq	(%rax,%rbx,8), %rcx
10001c2ed:	4c 89 f7	movq	%r14, %rdi
10001c2f0:	4c 89 e6	movq	%r12, %rsi
10001c2f3:	4c 89 ea	movq	%r13, %rdx
10001c2f6:	31 c0	xorl	%eax, %eax
10001c2f8:	e8 75 c9 01 00	callq	0x100038c72
10001c2fd:	48 ff c3	incq	%rbx
10001c300:	41 8b 87 a4 01 00 00	movl	420(%r15), %eax
10001c307:	48 39 c3	cmpq	%rax, %rbx
10001c30a:	72 d6	jb	0x10001c2e2
10001c30c:	48 8d 15 6b c7 02 00	leaq	182123(%rip), %rdx ## literal pool for: "}"
10001c313:	4c 89 f7	movq	%r14, %rdi
10001c316:	4c 8b ad c0 fe ff ff	movq	-320(%rbp), %r13
10001c31d:	4c 89 ee	movq	%r13, %rsi
10001c320:	31 c0	xorl	%eax, %eax
10001c322:	e8 4b c9 01 00	callq	0x100038c72
10001c327:	49 83 bf b0 04 00 00 00	cmpq	$0, 1200(%r15)
10001c32f:	0f 84 9c 00 00 00	je	0x10001c3d1
10001c335:	4c 89 f7	movq	%r14, %rdi
10001c338:	e8 30 ca 01 00	callq	0x100038d6d
10001c33d:	48 8d 15 98 f8 02 00	leaq	194712(%rip), %rdx ## literal pool for: "controller-supplied arguments = {"
10001c344:	4c 89 f7	movq	%r14, %rdi
10001c347:	4c 89 ee	movq	%r13, %rsi
10001c34a:	31 c0	xorl	%eax, %eax
10001c34c:	e8 21 c9 01 00	callq	0x100038c72
10001c351:	49 8b bf b0 04 00 00	movq	1200(%r15), %rdi
10001c358:	e8 ef 5b 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001c35d:	48 85 c0	testq	%rax, %rax
10001c360:	4d 89 fd	movq	%r15, %r13
10001c363:	74 4b	je	0x10001c3b0
10001c365:	4c 8d 3d aa b2 02 00	leaq	176810(%rip), %r15 ## literal pool for: "%s"
10001c36c:	31 db	xorl	%ebx, %ebx
10001c36e:	49 8b bd b0 04 00 00	movq	1200(%r13), %rdi
10001c375:	48 89 de	movq	%rbx, %rsi
10001c378:	e8 d5 5b 02 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
10001c37d:	48 85 c0	testq	%rax, %rax
10001c380:	74 13	je	0x10001c395
10001c382:	4c 89 f7	movq	%r14, %rdi
10001c385:	4c 89 e6	movq	%r12, %rsi
10001c388:	4c 89 fa	movq	%r15, %rdx
10001c38b:	48 89 c1	movq	%rax, %rcx
10001c38e:	31 c0	xorl	%eax, %eax
10001c390:	e8 dd c8 01 00	callq	0x100038c72
10001c395:	48 ff c3	incq	%rbx
10001c398:	4c 8b ad c8 fe ff ff	movq	-312(%rbp), %r13
10001c39f:	49 8b bd b0 04 00 00	movq	1200(%r13), %rdi
10001c3a6:	e8 a1 5b 02 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10001c3ab:	48 39 c3	cmpq	%rax, %rbx
10001c3ae:	72 be	jb	0x10001c36e
10001c3b0:	48 8d 15 c7 c6 02 00	leaq	181959(%rip), %rdx ## literal pool for: "}"
10001c3b7:	4c 89 f7	movq	%r14, %rdi
10001c3ba:	48 8b 9d c0 fe ff ff	movq	-320(%rbp), %rbx
10001c3c1:	48 89 de	movq	%rbx, %rsi
10001c3c4:	31 c0	xorl	%eax, %eax
10001c3c6:	e8 a7 c8 01 00	callq	0x100038c72
10001c3cb:	4d 89 ef	movq	%r13, %r15
10001c3ce:	49 89 dd	movq	%rbx, %r13
10001c3d1:	4c 89 f7	movq	%r14, %rdi
10001c3d4:	e8 94 c9 01 00	callq	0x100038d6d
10001c3d9:	49 8b 8f b0 01 00 00	movq	432(%r15), %rcx
10001c3e0:	48 85 c9	testq	%rcx, %rcx
10001c3e3:	75 11	jne	0x10001c3f6
10001c3e5:	49 83 bf b8 04 00 00 00	cmpq	$0, 1208(%r15)
10001c3ed:	74 4b	je	0x10001c43a
10001c3ef:	48 8d 0d 1f f8 02 00	leaq	194591(%rip), %rcx ## literal pool for: "(unspecified)"
10001c3f6:	48 8d 15 01 f8 02 00	leaq	194561(%rip), %rdx ## literal pool for: "working directory = %s"
10001c3fd:	4c 89 f7	movq	%r14, %rdi
10001c400:	4c 89 ee	movq	%r13, %rsi
10001c403:	31 c0	xorl	%eax, %eax
10001c405:	e8 68 c8 01 00	callq	0x100038c72
10001c40a:	49 8b 8f b8 04 00 00	movq	1208(%r15), %rcx
10001c411:	48 85 c9	testq	%rcx, %rcx
10001c414:	74 1c	je	0x10001c432
10001c416:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c41d:	48 8d 70 02	leaq	2(%rax), %rsi
10001c421:	48 8d 15 68 f7 02 00	leaq	194408(%rip), %rdx ## literal pool for: "+ %s"
10001c428:	4c 89 f7	movq	%r14, %rdi
10001c42b:	31 c0	xorl	%eax, %eax
10001c42d:	e8 40 c8 01 00	callq	0x100038c72
10001c432:	4c 89 f7	movq	%r14, %rdi
10001c435:	e8 33 c9 01 00	callq	0x100038d6d
10001c43a:	49 8b 8f b8 01 00 00	movq	440(%r15), %rcx
10001c441:	48 85 c9	testq	%rcx, %rcx
10001c444:	74 14	je	0x10001c45a
10001c446:	48 8d 15 d6 f7 02 00	leaq	194518(%rip), %rdx ## literal pool for: "stdin path = %s"
10001c44d:	4c 89 f7	movq	%r14, %rdi
10001c450:	4c 89 ee	movq	%r13, %rsi
10001c453:	31 c0	xorl	%eax, %eax
10001c455:	e8 18 c8 01 00	callq	0x100038c72
10001c45a:	49 8b 8f c0 01 00 00	movq	448(%r15), %rcx
10001c461:	48 85 c9	testq	%rcx, %rcx
10001c464:	74 14	je	0x10001c47a
10001c466:	48 8d 15 c6 f7 02 00	leaq	194502(%rip), %rdx ## literal pool for: "stdout path = %s"
10001c46d:	4c 89 f7	movq	%r14, %rdi
10001c470:	4c 89 ee	movq	%r13, %rsi
10001c473:	31 c0	xorl	%eax, %eax
10001c475:	e8 f8 c7 01 00	callq	0x100038c72
10001c47a:	49 8b 8f c8 01 00 00	movq	456(%r15), %rcx
10001c481:	48 85 c9	testq	%rcx, %rcx
10001c484:	74 14	je	0x10001c49a
10001c486:	48 8d 15 b7 f7 02 00	leaq	194487(%rip), %rdx ## literal pool for: "stderr path = %s"
10001c48d:	4c 89 f7	movq	%r14, %rdi
10001c490:	4c 89 ee	movq	%r13, %rsi
10001c493:	31 c0	xorl	%eax, %eax
10001c495:	e8 d8 c7 01 00	callq	0x100038c72
10001c49a:	49 8b 8f d0 01 00 00	movq	464(%r15), %rcx
10001c4a1:	48 85 c9	testq	%rcx, %rcx
10001c4a4:	74 14	je	0x10001c4ba
10001c4a6:	48 8d 15 a8 f7 02 00	leaq	194472(%rip), %rdx ## literal pool for: "container id = %s"
10001c4ad:	4c 89 f7	movq	%r14, %rdi
10001c4b0:	4c 89 ee	movq	%r13, %rsi
10001c4b3:	31 c0	xorl	%eax, %eax
10001c4b5:	e8 b8 c7 01 00	callq	0x100038c72
10001c4ba:	49 8b 8f d8 01 00 00	movq	472(%r15), %rcx
10001c4c1:	48 85 c9	testq	%rcx, %rcx
10001c4c4:	74 14	je	0x10001c4da
10001c4c6:	48 8d 15 9a f7 02 00	leaq	194458(%rip), %rdx ## literal pool for: "sandbox profile = %s"
10001c4cd:	4c 89 f7	movq	%r14, %rdi
10001c4d0:	4c 89 ee	movq	%r13, %rsi
10001c4d3:	31 c0	xorl	%eax, %eax
10001c4d5:	e8 98 c7 01 00	callq	0x100038c72
10001c4da:	49 8b 8f e0 01 00 00	movq	480(%r15), %rcx
10001c4e1:	48 85 c9	testq	%rcx, %rcx
10001c4e4:	74 14	je	0x10001c4fa
10001c4e6:	48 8d 15 8f f7 02 00	leaq	194447(%rip), %rdx ## literal pool for: "subsystem root = %s"
10001c4ed:	4c 89 f7	movq	%r14, %rdi
10001c4f0:	4c 89 ee	movq	%r13, %rsi
10001c4f3:	31 c0	xorl	%eax, %eax
10001c4f5:	e8 78 c7 01 00	callq	0x100038c72
10001c4fa:	49 83 bf c0 04 00 00 00	cmpq	$0, 1216(%r15)
10001c502:	74 64	je	0x10001c568
10001c504:	48 8d 15 85 f7 02 00	leaq	194437(%rip), %rdx ## literal pool for: "controller-supplied environment = {"
10001c50b:	4c 89 f7	movq	%r14, %rdi
10001c50e:	4c 89 ee	movq	%r13, %rsi
10001c511:	31 c0	xorl	%eax, %eax
10001c513:	e8 5a c7 01 00	callq	0x100038c72
10001c518:	48 8d b5 d0 fe ff ff	leaq	-304(%rbp), %rsi
10001c51f:	4c 89 36	movq	%r14, (%rsi)
10001c522:	48 c7 46 08 00 00 00 00	movq	$0, 8(%rsi)
10001c52a:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c531:	48 83 c0 02	addq	$2, %rax
10001c535:	48 89 46 10	movq	%rax, 16(%rsi)
10001c539:	49 8b bf c0 04 00 00	movq	1216(%r15), %rdi
10001c540:	48 8d 15 e6 2d 00 00	leaq	11750(%rip), %rdx
10001c547:	e8 ba 5a 02 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10001c54c:	48 8d 15 2b c5 02 00	leaq	181547(%rip), %rdx ## literal pool for: "}"
10001c553:	4c 89 f7	movq	%r14, %rdi
10001c556:	4c 89 ee	movq	%r13, %rsi
10001c559:	31 c0	xorl	%eax, %eax
10001c55b:	e8 12 c7 01 00	callq	0x100038c72
10001c560:	4c 89 f7	movq	%r14, %rdi
10001c563:	e8 05 c8 01 00	callq	0x100038d6d
10001c568:	4c 8d 25 f9 62 04 00	leaq	287481(%rip), %r12
10001c56f:	49 83 3c 24 00	cmpq	$0, (%r12)
10001c574:	74 61	je	0x10001c5d7
10001c576:	48 8d 15 37 f7 02 00	leaq	194359(%rip), %rdx ## literal pool for: "global environment = {"
10001c57d:	4c 89 f7	movq	%r14, %rdi
10001c580:	4c 89 ee	movq	%r13, %rsi
10001c583:	31 c0	xorl	%eax, %eax
10001c585:	e8 e8 c6 01 00	callq	0x100038c72
10001c58a:	49 8b 1c 24	movq	(%r12), %rbx
10001c58e:	48 85 db	testq	%rbx, %rbx
10001c591:	74 21	je	0x10001c5b4
10001c593:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c59a:	4c 8d 78 02	leaq	2(%rax), %r15
10001c59e:	48 89 df	movq	%rbx, %rdi
10001c5a1:	4c 89 fe	movq	%r15, %rsi
10001c5a4:	4c 89 f2	movq	%r14, %rdx
10001c5a7:	e8 04 65 ff ff	callq	0x100012ab0
10001c5ac:	48 8b 1b	movq	(%rbx), %rbx
10001c5af:	48 85 db	testq	%rbx, %rbx
10001c5b2:	75 ea	jne	0x10001c59e
10001c5b4:	48 8d 15 c3 c4 02 00	leaq	181443(%rip), %rdx ## literal pool for: "}"
10001c5bb:	4c 89 f7	movq	%r14, %rdi
10001c5be:	4c 89 ee	movq	%r13, %rsi
10001c5c1:	31 c0	xorl	%eax, %eax
10001c5c3:	e8 aa c6 01 00	callq	0x100038c72
10001c5c8:	4c 89 f7	movq	%r14, %rdi
10001c5cb:	e8 9d c7 01 00	callq	0x100038d6d
10001c5d0:	4c 8b bd c8 fe ff ff	movq	-312(%rbp), %r15
10001c5d7:	49 8b 87 e8 00 00 00	movq	232(%r15), %rax
10001c5de:	48 83 78 50 00	cmpq	$0, 80(%rax)
10001c5e3:	74 68	je	0x10001c64d
10001c5e5:	48 8d 15 df f6 02 00	leaq	194271(%rip), %rdx ## literal pool for: "inherited environment = {"
10001c5ec:	4c 89 f7	movq	%r14, %rdi
10001c5ef:	4c 89 ee	movq	%r13, %rsi
10001c5f2:	31 c0	xorl	%eax, %eax
10001c5f4:	e8 79 c6 01 00	callq	0x100038c72
10001c5f9:	49 8b 87 e8 00 00 00	movq	232(%r15), %rax
10001c600:	48 8b 58 50	movq	80(%rax), %rbx
10001c604:	48 85 db	testq	%rbx, %rbx
10001c607:	74 21	je	0x10001c62a
10001c609:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c610:	4c 8d 78 02	leaq	2(%rax), %r15
10001c614:	48 89 df	movq	%rbx, %rdi
10001c617:	4c 89 fe	movq	%r15, %rsi
10001c61a:	4c 89 f2	movq	%r14, %rdx
10001c61d:	e8 8e 64 ff ff	callq	0x100012ab0
10001c622:	48 8b 1b	movq	(%rbx), %rbx
10001c625:	48 85 db	testq	%rbx, %rbx
10001c628:	75 ea	jne	0x10001c614
10001c62a:	48 8d 15 4d c4 02 00	leaq	181325(%rip), %rdx ## literal pool for: "}"
10001c631:	4c 89 f7	movq	%r14, %rdi
10001c634:	4c 89 ee	movq	%r13, %rsi
10001c637:	31 c0	xorl	%eax, %eax
10001c639:	e8 34 c6 01 00	callq	0x100038c72
10001c63e:	4c 89 f7	movq	%r14, %rdi
10001c641:	e8 27 c7 01 00	callq	0x100038d6d
10001c646:	4c 8b bd c8 fe ff ff	movq	-312(%rbp), %r15
10001c64d:	49 83 7c 24 08 00	cmpq	$0, 8(%r12)
10001c653:	74 62	je	0x10001c6b7
10001c655:	48 8d 15 89 f6 02 00	leaq	194185(%rip), %rdx ## literal pool for: "default environment = {"
10001c65c:	4c 89 f7	movq	%r14, %rdi
10001c65f:	4c 89 ee	movq	%r13, %rsi
10001c662:	31 c0	xorl	%eax, %eax
10001c664:	e8 09 c6 01 00	callq	0x100038c72
10001c669:	49 8b 5c 24 08	movq	8(%r12), %rbx
10001c66e:	48 85 db	testq	%rbx, %rbx
10001c671:	74 21	je	0x10001c694
10001c673:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c67a:	4c 8d 78 02	leaq	2(%rax), %r15
10001c67e:	48 89 df	movq	%rbx, %rdi
10001c681:	4c 89 fe	movq	%r15, %rsi
10001c684:	4c 89 f2	movq	%r14, %rdx
10001c687:	e8 24 64 ff ff	callq	0x100012ab0
10001c68c:	48 8b 1b	movq	(%rbx), %rbx
10001c68f:	48 85 db	testq	%rbx, %rbx
10001c692:	75 ea	jne	0x10001c67e
10001c694:	48 8d 15 e3 c3 02 00	leaq	181219(%rip), %rdx ## literal pool for: "}"
10001c69b:	4c 89 f7	movq	%r14, %rdi
10001c69e:	4c 89 ee	movq	%r13, %rsi
10001c6a1:	31 c0	xorl	%eax, %eax
10001c6a3:	e8 ca c5 01 00	callq	0x100038c72
10001c6a8:	4c 89 f7	movq	%r14, %rdi
10001c6ab:	e8 bd c6 01 00	callq	0x100038d6d
10001c6b0:	4c 8b bd c8 fe ff ff	movq	-312(%rbp), %r15
10001c6b7:	66 41 83 bf 88 03 00 00 00	cmpw	$0, 904(%r15)
10001c6c0:	74 64	je	0x10001c726
10001c6c2:	48 8d 15 34 f6 02 00	leaq	194100(%rip), %rdx ## literal pool for: "environment = {"
10001c6c9:	4c 89 f7	movq	%r14, %rdi
10001c6cc:	4c 89 ee	movq	%r13, %rsi
10001c6cf:	31 c0	xorl	%eax, %eax
10001c6d1:	e8 9c c5 01 00	callq	0x100038c72
10001c6d6:	49 8b 9f 80 03 00 00	movq	896(%r15), %rbx
10001c6dd:	48 85 db	testq	%rbx, %rbx
10001c6e0:	74 21	je	0x10001c703
10001c6e2:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001c6e9:	4c 8d 78 02	leaq	2(%rax), %r15
10001c6ed:	48 89 df	movq	%rbx, %rdi
10001c6f0:	4c 89 fe	movq	%r15, %rsi
10001c6f3:	4c 89 f2	movq	%r14, %rdx
10001c6f6:	e8 b5 63 ff ff	callq	0x100012ab0
10001c6fb:	48 8b 1b	movq	(%rbx), %rbx
10001c6fe:	48 85 db	testq	%rbx, %rbx
10001c701:	75 ea	jne	0x10001c6ed
10001c703:	48 8d 15 74 c3 02 00	leaq	181108(%rip), %rdx ## literal pool for: "}"
10001c70a:	4c 89 f7	movq	%r14, %rdi
10001c70d:	4c 89 ee	movq	%r13, %rsi
10001c710:	31 c0	xorl	%eax, %eax
10001c712:	e8 5b c5 01 00	callq	0x100038c72
10001c717:	4c 89 f7	movq	%r14, %rdi
10001c71a:	e8 4e c6 01 00	callq	0x100038d6d
10001c71f:	4c 8b bd c8 fe ff ff	movq	-312(%rbp), %r15
10001c726:	49 8b bf e8 00 00 00	movq	232(%r15), %rdi
10001c72d:	be 02 00 00 00	movl	$2, %esi
10001c732:	e8 d1 3d 00 00	callq	0x100020508
10001c737:	48 89 c3	movq	%rax, %rbx
10001c73a:	48 8d 15 cc f5 02 00	leaq	193996(%rip), %rdx ## literal pool for: "domain = %s"
10001c741:	4c 89 f7	movq	%r14, %rdi
10001c744:	4c 89 ee	movq	%r13, %rsi
10001c747:	48 89 c1	movq	%rax, %rcx
10001c74a:	31 c0	xorl	%eax, %eax
10001c74c:	e8 21 c5 01 00	callq	0x100038c72
10001c751:	48 89 df	movq	%rbx, %rdi
10001c754:	e8 d7 52 02 00	callq	0x100041a30 ## symbol stub for: _free
10001c759:	49 8b 8f c0 02 00 00	movq	704(%r15), %rcx
10001c760:	48 85 c9	testq	%rcx, %rcx
10001c763:	74 22	je	0x10001c787
10001c765:	48 8d 15 ad f5 02 00	leaq	193965(%rip), %rdx ## literal pool for: "username = %s"
10001c76c:	4c 89 f7	movq	%r14, %rdi
10001c76f:	4c 89 ee	movq	%r13, %rsi
10001c772:	31 c0	xorl	%eax, %eax
10001c774:	e8 f9 c4 01 00	callq	0x100038c72
10001c779:	49 8b 8f c8 02 00 00	movq	712(%r15), %rcx
10001c780:	48 85 c9	testq	%rcx, %rcx
10001c783:	75 0e	jne	0x10001c793
10001c785:	eb 20	jmp	0x10001c7a7
10001c787:	49 8b 8f c8 02 00 00	movq	712(%r15), %rcx
10001c78e:	48 85 c9	testq	%rcx, %rcx
10001c791:	74 1c	je	0x10001c7af
10001c793:	48 8d 15 8d f5 02 00	leaq	193933(%rip), %rdx ## literal pool for: "group = %s"
10001c79a:	4c 89 f7	movq	%r14, %rdi
10001c79d:	4c 89 ee	movq	%r13, %rsi
10001c7a0:	31 c0	xorl	%eax, %eax
10001c7a2:	e8 cb c4 01 00	callq	0x100038c72
10001c7a7:	4c 89 f7	movq	%r14, %rdi
10001c7aa:	e8 be c5 01 00	callq	0x100038d6d
10001c7af:	41 8b 8f 94 03 00 00	movl	916(%r15), %ecx
10001c7b6:	85 c9	testl	%ecx, %ecx
10001c7b8:	74 14	je	0x10001c7ce
10001c7ba:	48 8d 15 71 f5 02 00	leaq	193905(%rip), %rdx ## literal pool for: "euid hack = %d"
10001c7c1:	4c 89 f7	movq	%r14, %rdi
10001c7c4:	4c 89 ee	movq	%r13, %rsi
10001c7c7:	31 c0	xorl	%eax, %eax
10001c7c9:	e8 a4 c4 01 00	callq	0x100038c72
10001c7ce:	49 8b 87 e8 00 00 00	movq	232(%r15), %rax
10001c7d5:	f6 40 58 01	testb	$1, 88(%rax)
10001c7d9:	74 18	je	0x10001c7f3
10001c7db:	0f b7 48 38	movzwl	56(%rax), %ecx
10001c7df:	48 8d 15 5b f5 02 00	leaq	193883(%rip), %rdx ## literal pool for: "domain umask = %o"
10001c7e6:	4c 89 f7	movq	%r14, %rdi
10001c7e9:	4c 89 ee	movq	%r13, %rsi
10001c7ec:	31 c0	xorl	%eax, %eax
10001c7ee:	e8 7f c4 01 00	callq	0x100038c72
10001c7f3:	49 0f ba a7 0d 05 00 00 24	btq	$36, 1293(%r15)
10001c7fc:	73 1c	jae	0x10001c81a
10001c7fe:	41 0f b7 8f d0 02 00 00	movzwl	720(%r15), %ecx
10001c806:	48 8d 15 46 f5 02 00	leaq	193862(%rip), %rdx ## literal pool for: "umask = %o"
10001c80d:	4c 89 f7	movq	%r14, %rdi
10001c810:	4c 89 ee	movq	%r13, %rsi
10001c813:	31 c0	xorl	%eax, %eax
10001c815:	e8 58 c4 01 00	callq	0x100038c72
10001c81a:	49 8b 87 e8 00 00 00	movq	232(%r15), %rax
10001c821:	8b 48 34	movl	52(%rax), %ecx
10001c824:	85 c9	testl	%ecx, %ecx
10001c826:	74 14	je	0x10001c83c
10001c828:	48 8d 15 2f f5 02 00	leaq	193839(%rip), %rdx ## literal pool for: "asid = %u"
10001c82f:	4c 89 f7	movq	%r14, %rdi
10001c832:	4c 89 ee	movq	%r13, %rsi
10001c835:	31 c0	xorl	%eax, %eax
10001c837:	e8 36 c4 01 00	callq	0x100038c72
10001c83c:	4c 89 ff	movq	%r15, %rdi
10001c83f:	e8 9b a9 ff ff	callq	0x1000171df
10001c844:	48 8d 15 1d f5 02 00	leaq	193821(%rip), %rdx ## literal pool for: "minimum runtime = %u"
10001c84b:	4c 89 f7	movq	%r14, %rdi
10001c84e:	4c 89 ee	movq	%r13, %rsi
10001c851:	89 c1	movl	%eax, %ecx
10001c853:	31 c0	xorl	%eax, %eax
10001c855:	e8 18 c4 01 00	callq	0x100038c72
10001c85a:	49 0f ba a7 0d 05 00 00 39	btq	$57, 1293(%r15)
10001c863:	73 1b	jae	0x10001c880
10001c865:	41 8b 8f e4 02 00 00	movl	740(%r15), %ecx
10001c86c:	48 8d 15 0a f5 02 00	leaq	193802(%rip), %rdx ## literal pool for: "base minimum runtime = %u"
10001c873:	4c 89 f7	movq	%r14, %rdi
10001c876:	4c 89 ee	movq	%r13, %rsi
10001c879:	31 c0	xorl	%eax, %eax
10001c87b:	e8 f2 c3 01 00	callq	0x100038c72
10001c880:	41 8b 8f e0 02 00 00	movl	736(%r15), %ecx
10001c887:	48 8d 15 09 f5 02 00	leaq	193801(%rip), %rdx ## literal pool for: "exit timeout = %u"
10001c88e:	4c 89 f7	movq	%r14, %rdi
10001c891:	4c 89 ee	movq	%r13, %rsi
10001c894:	31 c0	xorl	%eax, %eax
10001c896:	e8 d7 c3 01 00	callq	0x100038c72
10001c89b:	49 0f ba a7 0d 05 00 00 26	btq	$38, 1293(%r15)
10001c8a4:	73 58	jae	0x10001c8fe
10001c8a6:	41 8b 8f f8 02 00 00	movl	760(%r15), %ecx
10001c8ad:	48 8d 15 f5 f4 02 00	leaq	193781(%rip), %rdx ## literal pool for: "voluntary exit timeout = %u"
10001c8b4:	4c 89 f7	movq	%r14, %rdi
10001c8b7:	4c 89 ee	movq	%r13, %rsi
10001c8ba:	31 c0	xorl	%eax, %eax
10001c8bc:	e8 b1 c3 01 00	callq	0x100038c72
10001c8c1:	48 8d 05 98 5f 04 00	leaq	286616(%rip), %rax
10001c8c8:	80 38 00	cmpb	$0, (%rax)
10001c8cb:	74 1d	je	0x10001c8ea
10001c8cd:	41 8b 8f fc 02 00 00	movl	764(%r15), %ecx
10001c8d4:	48 8d 15 ea f4 02 00	leaq	193770(%rip), %rdx ## literal pool for: "launch watchdog timeout = %u"
10001c8db:	4c 89 f7	movq	%r14, %rdi
10001c8de:	4c 89 ee	movq	%r13, %rsi
10001c8e1:	31 c0	xorl	%eax, %eax
10001c8e3:	e8 8a c3 01 00	callq	0x100038c72
10001c8e8:	eb 14	jmp	0x10001c8fe
10001c8ea:	48 8d 15 f1 f4 02 00	leaq	193777(%rip), %rdx ## literal pool for: "launch watchdog timeout = (globally disabled)"
10001c8f1:	4c 89 f7	movq	%r14, %rdi
10001c8f4:	4c 89 ee	movq	%r13, %rsi
10001c8f7:	31 c0	xorl	%eax, %eax
10001c8f9:	e8 74 c3 01 00	callq	0x100038c72
10001c8fe:	49 0f ba a7 0d 05 00 00 2a	btq	$42, 1293(%r15)
10001c907:	73 1b	jae	0x10001c924
10001c909:	41 8b 8f 90 03 00 00	movl	912(%r15), %ecx
10001c910:	48 8d 15 f9 f4 02 00	leaq	193785(%rip), %rdx ## literal pool for: "nice = %d"
10001c917:	4c 89 f7	movq	%r14, %rdi
10001c91a:	4c 89 ee	movq	%r13, %rsi
10001c91d:	31 c0	xorl	%eax, %eax
10001c91f:	e8 4e c3 01 00	callq	0x100038c72
10001c924:	49 8b 8f 18 03 00 00	movq	792(%r15), %rcx
10001c92b:	48 85 c9	testq	%rcx, %rcx
10001c92e:	74 14	je	0x10001c944
10001c930:	48 8d 15 e3 f4 02 00	leaq	193763(%rip), %rdx ## literal pool for: "exception handler endpoint = %s"
10001c937:	4c 89 f7	movq	%r14, %rdi
10001c93a:	4c 89 ee	movq	%r13, %rsi
10001c93d:	31 c0	xorl	%eax, %eax
10001c93f:	e8 2e c3 01 00	callq	0x100038c72
10001c944:	41 8b 8f 98 03 00 00	movl	920(%r15), %ecx
10001c94b:	48 8d 15 e8 f4 02 00	leaq	193768(%rip), %rdx ## literal pool for: "runs = %u"
10001c952:	4c 89 f7	movq	%r14, %rdi
10001c955:	4c 89 ee	movq	%r13, %rsi
10001c958:	31 c0	xorl	%eax, %eax
10001c95a:	e8 13 c3 01 00	callq	0x100038c72
10001c95f:	41 8b 8f 9c 03 00 00	movl	924(%r15), %ecx
10001c966:	85 c9	testl	%ecx, %ecx
10001c968:	74 14	je	0x10001c97e
10001c96a:	48 8d 15 d3 f4 02 00	leaq	193747(%rip), %rdx ## literal pool for: "successive crashes = %u"
10001c971:	4c 89 f7	movq	%r14, %rdi
10001c974:	4c 89 ee	movq	%r13, %rsi
10001c977:	31 c0	xorl	%eax, %eax
10001c979:	e8 f4 c2 01 00	callq	0x100038c72
10001c97e:	41 8b 8f c8 03 00 00	movl	968(%r15), %ecx
10001c985:	85 c9	testl	%ecx, %ecx
10001c987:	4c 89 fb	movq	%r15, %rbx
10001c98a:	0f 84 39 01 00 00	je	0x10001cac9
10001c990:	48 8d 15 c5 f4 02 00	leaq	193733(%rip), %rdx ## literal pool for: "pid = %d"
10001c997:	4c 89 f7	movq	%r14, %rdi
10001c99a:	4c 89 ee	movq	%r13, %rsi
10001c99d:	31 c0	xorl	%eax, %eax
10001c99f:	e8 ce c2 01 00	callq	0x100038c72
10001c9a4:	8b bb cc 03 00 00	movl	972(%rbx), %edi
10001c9aa:	e8 0c 18 00 00	callq	0x10001e1bb
10001c9af:	48 8d 15 af f4 02 00	leaq	193711(%rip), %rdx ## literal pool for: "immediate reason = %s"
10001c9b6:	4c 89 f7	movq	%r14, %rdi
10001c9b9:	4c 89 ee	movq	%r13, %rsi
10001c9bc:	48 89 c1	movq	%rax, %rcx
10001c9bf:	31 c0	xorl	%eax, %eax
10001c9c1:	e8 ac c2 01 00	callq	0x100038c72
10001c9c6:	0f b7 8b e0 03 00 00	movzwl	992(%rbx), %ecx
10001c9cd:	48 8d 15 a7 f4 02 00	leaq	193703(%rip), %rdx ## literal pool for: "forks = %hu"
10001c9d4:	4c 89 f7	movq	%r14, %rdi
10001c9d7:	4c 89 ee	movq	%r13, %rsi
10001c9da:	31 c0	xorl	%eax, %eax
10001c9dc:	e8 91 c2 01 00	callq	0x100038c72
10001c9e1:	0f b7 8b e2 03 00 00	movzwl	994(%rbx), %ecx
10001c9e8:	48 8d 15 98 f4 02 00	leaq	193688(%rip), %rdx ## literal pool for: "execs = %hu"
10001c9ef:	4c 89 f7	movq	%r14, %rdi
10001c9f2:	4c 89 ee	movq	%r13, %rsi
10001c9f5:	31 c0	xorl	%eax, %eax
10001c9f7:	e8 76 c2 01 00	callq	0x100038c72
10001c9fc:	0f b7 83 e8 03 00 00	movzwl	1000(%rbx), %eax
10001ca03:	a8 01	testb	$1, %al
10001ca05:	4c 8d 3d 62 ad 02 00	leaq	175458(%rip), %r15 ## literal pool for: "0"
10001ca0c:	4c 8d 25 25 6a 02 00	leaq	158245(%rip), %r12 ## literal pool for: "1"
10001ca13:	4c 89 e1	movq	%r12, %rcx
10001ca16:	49 0f 44 cf	cmoveq	%r15, %rcx
10001ca1a:	48 8d 15 72 f4 02 00	leaq	193650(%rip), %rdx ## literal pool for: "initialized = %s"
10001ca21:	4c 89 f7	movq	%r14, %rdi
10001ca24:	4c 89 ee	movq	%r13, %rsi
10001ca27:	31 c0	xorl	%eax, %eax
10001ca29:	e8 44 c2 01 00	callq	0x100038c72
10001ca2e:	0f b7 83 e8 03 00 00	movzwl	1000(%rbx), %eax
10001ca35:	a8 02	testb	$2, %al
10001ca37:	4c 89 e1	movq	%r12, %rcx
10001ca3a:	49 0f 44 cf	cmoveq	%r15, %rcx
10001ca3e:	48 8d 15 5f f4 02 00	leaq	193631(%rip), %rdx ## literal pool for: "trampolined = %s"
10001ca45:	4c 89 f7	movq	%r14, %rdi
10001ca48:	4c 89 ee	movq	%r13, %rsi
10001ca4b:	31 c0	xorl	%eax, %eax
10001ca4d:	e8 20 c2 01 00	callq	0x100038c72
10001ca52:	0f b7 83 e8 03 00 00	movzwl	1000(%rbx), %eax
10001ca59:	a8 04	testb	$4, %al
10001ca5b:	4c 89 e1	movq	%r12, %rcx
10001ca5e:	49 0f 44 cf	cmoveq	%r15, %rcx
10001ca62:	48 8d 15 4c f4 02 00	leaq	193612(%rip), %rdx ## literal pool for: "started suspended = %s"
10001ca69:	4c 89 f7	movq	%r14, %rdi
10001ca6c:	4c 89 ee	movq	%r13, %rsi
10001ca6f:	31 c0	xorl	%eax, %eax
10001ca71:	e8 fc c1 01 00	callq	0x100038c72
10001ca76:	0f b7 83 e8 03 00 00	movzwl	1000(%rbx), %eax
10001ca7d:	a8 08	testb	$8, %al
10001ca7f:	4c 89 e1	movq	%r12, %rcx
10001ca82:	49 0f 44 cf	cmoveq	%r15, %rcx
10001ca86:	48 8d 15 3f f4 02 00	leaq	193599(%rip), %rdx ## literal pool for: "proxy started suspended = %s"
10001ca8d:	4c 89 f7	movq	%r14, %rdi
10001ca90:	4c 89 ee	movq	%r13, %rsi
10001ca93:	31 c0	xorl	%eax, %eax
10001ca95:	e8 d8 c1 01 00	callq	0x100038c72
10001ca9a:	48 0f ba a3 0d 05 00 00 26	btq	$38, 1293(%rbx)
10001caa3:	73 24	jae	0x10001cac9
10001caa5:	0f b7 83 e8 03 00 00	movzwl	1000(%rbx), %eax
10001caac:	a8 40	testb	$64, %al
10001caae:	4d 0f 44 e7	cmoveq	%r15, %r12
10001cab2:	48 8d 15 30 f4 02 00	leaq	193584(%rip), %rdx ## literal pool for: "extension alive = %s"
10001cab9:	4c 89 f7	movq	%r14, %rdi
10001cabc:	4c 89 ee	movq	%r13, %rsi
10001cabf:	4c 89 e1	movq	%r12, %rcx
10001cac2:	31 c0	xorl	%eax, %eax
10001cac4:	e8 a9 c1 01 00	callq	0x100038c72
10001cac9:	8b bb 10 01 00 00	movl	272(%rbx), %edi
10001cacf:	85 ff	testl	%edi, %edi
10001cad1:	74 1c	je	0x10001caef
10001cad3:	e8 e3 16 00 00	callq	0x10001e1bb
10001cad8:	48 8d 15 1f f4 02 00	leaq	193567(%rip), %rdx ## literal pool for: "pended spawn = %s"
10001cadf:	4c 89 f7	movq	%r14, %rdi
10001cae2:	4c 89 ee	movq	%r13, %rsi
10001cae5:	48 89 c1	movq	%rax, %rcx
10001cae8:	31 c0	xorl	%eax, %eax
10001caea:	e8 83 c1 01 00	callq	0x100038c72
10001caef:	8b bb 14 01 00 00	movl	276(%rbx), %edi
10001caf5:	85 ff	testl	%edi, %edi
10001caf7:	74 1c	je	0x10001cb15
10001caf9:	e8 bd 16 00 00	callq	0x10001e1bb
10001cafe:	48 8d 15 0b f4 02 00	leaq	193547(%rip), %rdx ## literal pool for: "pended nondemand spawn = %s"
10001cb05:	4c 89 f7	movq	%r14, %rdi
10001cb08:	4c 89 ee	movq	%r13, %rsi
10001cb0b:	48 89 c1	movq	%rax, %rcx
10001cb0e:	31 c0	xorl	%eax, %eax
10001cb10:	e8 5d c1 01 00	callq	0x100038c72
10001cb15:	8b bb b4 03 00 00	movl	948(%rbx), %edi
10001cb1b:	85 ff	testl	%edi, %edi
10001cb1d:	74 1c	je	0x10001cb3b
10001cb1f:	e8 97 16 00 00	callq	0x10001e1bb
10001cb24:	48 8d 15 01 f4 02 00	leaq	193537(%rip), %rdx ## literal pool for: "spawn reason filter = %s"
10001cb2b:	4c 89 f7	movq	%r14, %rdi
10001cb2e:	4c 89 ee	movq	%r13, %rsi
10001cb31:	48 89 c1	movq	%rax, %rcx
10001cb34:	31 c0	xorl	%eax, %eax
10001cb36:	e8 37 c1 01 00	callq	0x100038c72
10001cb3b:	4c 8d ab f0 03 00 00	leaq	1008(%rbx), %r13
10001cb42:	8b 83 f0 03 00 00	movl	1008(%rbx), %eax
10001cb48:	83 f8 02	cmpl	$2, %eax
10001cb4b:	74 16	je	0x10001cb63
10001cb4d:	83 f8 01	cmpl	$1, %eax
10001cb50:	74 1a	je	0x10001cb6c
10001cb52:	85 c0	testl	%eax, %eax
10001cb54:	0f 85 42 05 00 00	jne	0x10001d09c
10001cb5a:	48 8d 15 e4 f3 02 00	leaq	193508(%rip), %rdx ## literal pool for: "last exit code = (never exited)"
10001cb61:	eb 10	jmp	0x10001cb73
10001cb63:	48 8d 15 18 f4 02 00	leaq	193560(%rip), %rdx ## literal pool for: "last exit code = (failed reap)"
10001cb6a:	eb 07	jmp	0x10001cb73
10001cb6c:	48 8d 15 f2 f3 02 00	leaq	193522(%rip), %rdx ## literal pool for: "last exit code = (abandoned)"
10001cb73:	4c 89 f7	movq	%r14, %rdi
10001cb76:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001cb7d:	31 c0	xorl	%eax, %eax
10001cb7f:	e8 ee c0 01 00	callq	0x100038c72
10001cb84:	4c 89 ef	movq	%r13, %rdi
10001cb87:	e8 c8 c9 01 00	callq	0x100039554
10001cb8c:	84 c0	testb	%al, %al
10001cb8e:	74 2e	je	0x10001cbbe
10001cb90:	4c 89 ef	movq	%r13, %rdi
10001cb93:	e8 5f c7 01 00	callq	0x1000392f7
10001cb98:	48 85 c0	testq	%rax, %rax
10001cb9b:	48 8d 0d ef a9 02 00	leaq	174575(%rip), %rcx ## literal pool for: "(unknown)"
10001cba2:	48 0f 45 c8	cmovneq	%rax, %rcx
10001cba6:	48 8d 15 7c f4 02 00	leaq	193660(%rip), %rdx ## literal pool for: "last jetsam exit details = %s"
10001cbad:	4c 89 f7	movq	%r14, %rdi
10001cbb0:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001cbb7:	31 c0	xorl	%eax, %eax
10001cbb9:	e8 b4 c0 01 00	callq	0x100038c72
10001cbbe:	48 83 bb 88 02 00 00 00	cmpq	$0, 648(%rbx)
10001cbc6:	4c 8b ad c0 fe ff ff	movq	-320(%rbp), %r13
10001cbcd:	0f 84 12 01 00 00	je	0x10001cce5
10001cbd3:	4c 89 f7	movq	%r14, %rdi
10001cbd6:	e8 92 c1 01 00	callq	0x100038d6d
10001cbdb:	48 8d 15 65 f4 02 00	leaq	193637(%rip), %rdx ## literal pool for: "semaphores = {"
10001cbe2:	4c 89 f7	movq	%r14, %rdi
10001cbe5:	4c 89 ee	movq	%r13, %rsi
10001cbe8:	31 c0	xorl	%eax, %eax
10001cbea:	e8 83 c0 01 00	callq	0x100038c72
10001cbef:	48 8b 9b 88 02 00 00	movq	648(%rbx), %rbx
10001cbf6:	48 85 db	testq	%rbx, %rbx
10001cbf9:	0f 84 c4 00 00 00	je	0x10001ccc3
10001cbff:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001cc06:	4c 8d 78 02	leaq	2(%rax), %r15
10001cc0a:	4c 8d 25 4a f4 02 00	leaq	193610(%rip), %r12 ## literal pool for: "%s%s => %u"
10001cc11:	4c 8d ad d0 fe ff ff	leaq	-304(%rbp), %r13
10001cc18:	0f 57 c0	xorps	%xmm0, %xmm0
10001cc1b:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10001cc1f:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10001cc23:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10001cc27:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
10001cc2b:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
10001cc2f:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
10001cc36:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10001cc3d:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
10001cc44:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
10001cc4b:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
10001cc52:	0f 29 85 20 ff ff ff	movaps	%xmm0, -224(%rbp)
10001cc59:	0f 29 85 10 ff ff ff	movaps	%xmm0, -240(%rbp)
10001cc60:	0f 29 85 00 ff ff ff	movaps	%xmm0, -256(%rbp)
10001cc67:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
10001cc6e:	0f 29 85 e0 fe ff ff	movaps	%xmm0, -288(%rbp)
10001cc75:	0f 29 85 d0 fe ff ff	movaps	%xmm0, -304(%rbp)
10001cc7c:	48 8b 4b 20	movq	32(%rbx), %rcx
10001cc80:	48 85 c9	testq	%rcx, %rcx
10001cc83:	74 16	je	0x10001cc9b
10001cc85:	be 00 01 00 00	movl	$256, %esi
10001cc8a:	4c 89 ef	movq	%r13, %rdi
10001cc8d:	48 8d 15 c2 f3 02 00	leaq	193474(%rip), %rdx ## literal pool for: ": %s"
10001cc94:	31 c0	xorl	%eax, %eax
10001cc96:	e8 67 51 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001cc9b:	48 8b 4b 18	movq	24(%rbx), %rcx
10001cc9f:	44 0f b6 4b 28	movzbl	40(%rbx), %r9d
10001cca4:	4c 89 f7	movq	%r14, %rdi
10001cca7:	4c 89 fe	movq	%r15, %rsi
10001ccaa:	4c 89 e2	movq	%r12, %rdx
10001ccad:	4d 89 e8	movq	%r13, %r8
10001ccb0:	31 c0	xorl	%eax, %eax
10001ccb2:	e8 bb bf 01 00	callq	0x100038c72
10001ccb7:	48 8b 1b	movq	(%rbx), %rbx
10001ccba:	48 85 db	testq	%rbx, %rbx
10001ccbd:	0f 85 55 ff ff ff	jne	0x10001cc18
10001ccc3:	48 8d 15 b4 bd 02 00	leaq	179636(%rip), %rdx ## literal pool for: "}"
10001ccca:	4c 89 f7	movq	%r14, %rdi
10001cccd:	4c 8b ad c0 fe ff ff	movq	-320(%rbp), %r13
10001ccd4:	4c 89 ee	movq	%r13, %rsi
10001ccd7:	31 c0	xorl	%eax, %eax
10001ccd9:	e8 94 bf 01 00	callq	0x100038c72
10001ccde:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cce5:	48 83 7b 78 00	cmpq	$0, 120(%rbx)
10001ccea:	4c 8b a5 b8 fe ff ff	movq	-328(%rbp), %r12
10001ccf1:	74 5c	je	0x10001cd4f
10001ccf3:	4c 89 f7	movq	%r14, %rdi
10001ccf6:	e8 72 c0 01 00	callq	0x100038d6d
10001ccfb:	48 8d 15 64 f3 02 00	leaq	193380(%rip), %rdx ## literal pool for: "event triggers = {"
10001cd02:	4c 89 f7	movq	%r14, %rdi
10001cd05:	4c 89 ee	movq	%r13, %rsi
10001cd08:	31 c0	xorl	%eax, %eax
10001cd0a:	e8 63 bf 01 00	callq	0x100038c72
10001cd0f:	48 8b 5b 78	movq	120(%rbx), %rbx
10001cd13:	48 85 db	testq	%rbx, %rbx
10001cd16:	74 1c	je	0x10001cd34
10001cd18:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cd1d:	48 89 df	movq	%rbx, %rdi
10001cd20:	4c 89 f6	movq	%r14, %rsi
10001cd23:	4c 89 fa	movq	%r15, %rdx
10001cd26:	e8 32 50 01 00	callq	0x100031d5d
10001cd2b:	48 8b 5b 08	movq	8(%rbx), %rbx
10001cd2f:	48 85 db	testq	%rbx, %rbx
10001cd32:	75 e9	jne	0x10001cd1d
10001cd34:	48 8d 15 43 bd 02 00	leaq	179523(%rip), %rdx ## literal pool for: "}"
10001cd3b:	4c 89 f7	movq	%r14, %rdi
10001cd3e:	4c 89 ee	movq	%r13, %rsi
10001cd41:	31 c0	xorl	%eax, %eax
10001cd43:	e8 2a bf 01 00	callq	0x100038c72
10001cd48:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cd4f:	48 83 bb 88 00 00 00 00	cmpq	$0, 136(%rbx)
10001cd57:	74 5f	je	0x10001cdb8
10001cd59:	4c 89 f7	movq	%r14, %rdi
10001cd5c:	e8 0c c0 01 00	callq	0x100038d6d
10001cd61:	48 8d 15 11 f3 02 00	leaq	193297(%rip), %rdx ## literal pool for: "endpoints = {"
10001cd68:	4c 89 f7	movq	%r14, %rdi
10001cd6b:	4c 89 ee	movq	%r13, %rsi
10001cd6e:	31 c0	xorl	%eax, %eax
10001cd70:	e8 fd be 01 00	callq	0x100038c72
10001cd75:	48 8b 9b 88 00 00 00	movq	136(%rbx), %rbx
10001cd7c:	48 85 db	testq	%rbx, %rbx
10001cd7f:	74 1c	je	0x10001cd9d
10001cd81:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cd86:	48 89 df	movq	%rbx, %rdi
10001cd89:	4c 89 f6	movq	%r14, %rsi
10001cd8c:	4c 89 fa	movq	%r15, %rdx
10001cd8f:	e8 7c e9 01 00	callq	0x10003b710
10001cd94:	48 8b 5b 08	movq	8(%rbx), %rbx
10001cd98:	48 85 db	testq	%rbx, %rbx
10001cd9b:	75 e9	jne	0x10001cd86
10001cd9d:	48 8d 15 da bc 02 00	leaq	179418(%rip), %rdx ## literal pool for: "}"
10001cda4:	4c 89 f7	movq	%r14, %rdi
10001cda7:	4c 89 ee	movq	%r13, %rsi
10001cdaa:	31 c0	xorl	%eax, %eax
10001cdac:	e8 c1 be 01 00	callq	0x100038c72
10001cdb1:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cdb8:	48 83 bb 90 00 00 00 00	cmpq	$0, 144(%rbx)
10001cdc0:	74 5f	je	0x10001ce21
10001cdc2:	4c 89 f7	movq	%r14, %rdi
10001cdc5:	e8 a3 bf 01 00	callq	0x100038d6d
10001cdca:	48 8d 15 b6 f2 02 00	leaq	193206(%rip), %rdx ## literal pool for: "dynamic endpoints = {"
10001cdd1:	4c 89 f7	movq	%r14, %rdi
10001cdd4:	4c 89 ee	movq	%r13, %rsi
10001cdd7:	31 c0	xorl	%eax, %eax
10001cdd9:	e8 94 be 01 00	callq	0x100038c72
10001cdde:	48 8b 9b 90 00 00 00	movq	144(%rbx), %rbx
10001cde5:	48 85 db	testq	%rbx, %rbx
10001cde8:	74 1c	je	0x10001ce06
10001cdea:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cdef:	48 89 df	movq	%rbx, %rdi
10001cdf2:	4c 89 f6	movq	%r14, %rsi
10001cdf5:	4c 89 fa	movq	%r15, %rdx
10001cdf8:	e8 13 e9 01 00	callq	0x10003b710
10001cdfd:	48 8b 5b 08	movq	8(%rbx), %rbx
10001ce01:	48 85 db	testq	%rbx, %rbx
10001ce04:	75 e9	jne	0x10001cdef
10001ce06:	48 8d 15 71 bc 02 00	leaq	179313(%rip), %rdx ## literal pool for: "}"
10001ce0d:	4c 89 f7	movq	%r14, %rdi
10001ce10:	4c 89 ee	movq	%r13, %rsi
10001ce13:	31 c0	xorl	%eax, %eax
10001ce15:	e8 58 be 01 00	callq	0x100038c72
10001ce1a:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001ce21:	48 83 bb 98 00 00 00 00	cmpq	$0, 152(%rbx)
10001ce29:	74 5f	je	0x10001ce8a
10001ce2b:	4c 89 f7	movq	%r14, %rdi
10001ce2e:	e8 3a bf 01 00	callq	0x100038d6d
10001ce33:	48 8d 15 63 f2 02 00	leaq	193123(%rip), %rdx ## literal pool for: "pid-local endpoints = {"
10001ce3a:	4c 89 f7	movq	%r14, %rdi
10001ce3d:	4c 89 ee	movq	%r13, %rsi
10001ce40:	31 c0	xorl	%eax, %eax
10001ce42:	e8 2b be 01 00	callq	0x100038c72
10001ce47:	48 8b 9b 98 00 00 00	movq	152(%rbx), %rbx
10001ce4e:	48 85 db	testq	%rbx, %rbx
10001ce51:	74 1c	je	0x10001ce6f
10001ce53:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001ce58:	48 89 df	movq	%rbx, %rdi
10001ce5b:	4c 89 f6	movq	%r14, %rsi
10001ce5e:	4c 89 fa	movq	%r15, %rdx
10001ce61:	e8 aa e8 01 00	callq	0x10003b710
10001ce66:	48 8b 5b 08	movq	8(%rbx), %rbx
10001ce6a:	48 85 db	testq	%rbx, %rbx
10001ce6d:	75 e9	jne	0x10001ce58
10001ce6f:	48 8d 15 08 bc 02 00	leaq	179208(%rip), %rdx ## literal pool for: "}"
10001ce76:	4c 89 f7	movq	%r14, %rdi
10001ce79:	4c 89 ee	movq	%r13, %rsi
10001ce7c:	31 c0	xorl	%eax, %eax
10001ce7e:	e8 ef bd 01 00	callq	0x100038c72
10001ce83:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001ce8a:	48 83 bb a8 00 00 00 00	cmpq	$0, 168(%rbx)
10001ce92:	74 5f	je	0x10001cef3
10001ce94:	4c 89 f7	movq	%r14, %rdi
10001ce97:	e8 d1 be 01 00	callq	0x100038d6d
10001ce9c:	48 8d 15 12 f2 02 00	leaq	193042(%rip), %rdx ## literal pool for: "instance-specific endpoints = {"
10001cea3:	4c 89 f7	movq	%r14, %rdi
10001cea6:	4c 89 ee	movq	%r13, %rsi
10001cea9:	31 c0	xorl	%eax, %eax
10001ceab:	e8 c2 bd 01 00	callq	0x100038c72
10001ceb0:	48 8b 9b a8 00 00 00	movq	168(%rbx), %rbx
10001ceb7:	48 85 db	testq	%rbx, %rbx
10001ceba:	74 1c	je	0x10001ced8
10001cebc:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cec1:	48 89 df	movq	%rbx, %rdi
10001cec4:	4c 89 f6	movq	%r14, %rsi
10001cec7:	4c 89 fa	movq	%r15, %rdx
10001ceca:	e8 41 e8 01 00	callq	0x10003b710
10001cecf:	48 8b 5b 08	movq	8(%rbx), %rbx
10001ced3:	48 85 db	testq	%rbx, %rbx
10001ced6:	75 e9	jne	0x10001cec1
10001ced8:	48 8d 15 9f bb 02 00	leaq	179103(%rip), %rdx ## literal pool for: "}"
10001cedf:	4c 89 f7	movq	%r14, %rdi
10001cee2:	4c 89 ee	movq	%r13, %rsi
10001cee5:	31 c0	xorl	%eax, %eax
10001cee7:	e8 86 bd 01 00	callq	0x100038c72
10001ceec:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cef3:	48 83 bb a0 00 00 00 00	cmpq	$0, 160(%rbx)
10001cefb:	74 5f	je	0x10001cf5c
10001cefd:	4c 89 f7	movq	%r14, %rdi
10001cf00:	e8 68 be 01 00	callq	0x100038d6d
10001cf05:	48 8d 15 c9 f1 02 00	leaq	192969(%rip), %rdx ## literal pool for: "event channels = {"
10001cf0c:	4c 89 f7	movq	%r14, %rdi
10001cf0f:	4c 89 ee	movq	%r13, %rsi
10001cf12:	31 c0	xorl	%eax, %eax
10001cf14:	e8 59 bd 01 00	callq	0x100038c72
10001cf19:	48 8b 9b a0 00 00 00	movq	160(%rbx), %rbx
10001cf20:	48 85 db	testq	%rbx, %rbx
10001cf23:	74 1c	je	0x10001cf41
10001cf25:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cf2a:	48 89 df	movq	%rbx, %rdi
10001cf2d:	4c 89 f6	movq	%r14, %rsi
10001cf30:	4c 89 fa	movq	%r15, %rdx
10001cf33:	e8 d8 e7 01 00	callq	0x10003b710
10001cf38:	48 8b 5b 08	movq	8(%rbx), %rbx
10001cf3c:	48 85 db	testq	%rbx, %rbx
10001cf3f:	75 e9	jne	0x10001cf2a
10001cf41:	48 8d 15 36 bb 02 00	leaq	178998(%rip), %rdx ## literal pool for: "}"
10001cf48:	4c 89 f7	movq	%r14, %rdi
10001cf4b:	4c 89 ee	movq	%r13, %rsi
10001cf4e:	31 c0	xorl	%eax, %eax
10001cf50:	e8 1d bd 01 00	callq	0x100038c72
10001cf55:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cf5c:	48 83 bb b0 00 00 00 00	cmpq	$0, 176(%rbx)
10001cf64:	74 5f	je	0x10001cfc5
10001cf66:	4c 89 f7	movq	%r14, %rdi
10001cf69:	e8 ff bd 01 00	callq	0x100038d6d
10001cf6e:	48 8d 15 a9 c6 02 00	leaq	181929(%rip), %rdx ## literal pool for: "sockets = {"
10001cf75:	4c 89 f7	movq	%r14, %rdi
10001cf78:	4c 89 ee	movq	%r13, %rsi
10001cf7b:	31 c0	xorl	%eax, %eax
10001cf7d:	e8 f0 bc 01 00	callq	0x100038c72
10001cf82:	48 8b 9b b0 00 00 00	movq	176(%rbx), %rbx
10001cf89:	48 85 db	testq	%rbx, %rbx
10001cf8c:	74 1c	je	0x10001cfaa
10001cf8e:	4d 8d 7c 24 02	leaq	2(%r12), %r15
10001cf93:	48 89 df	movq	%rbx, %rdi
10001cf96:	4c 89 f6	movq	%r14, %rsi
10001cf99:	4c 89 fa	movq	%r15, %rdx
10001cf9c:	e8 b0 80 ff ff	callq	0x100015051
10001cfa1:	48 8b 5b 08	movq	8(%rbx), %rbx
10001cfa5:	48 85 db	testq	%rbx, %rbx
10001cfa8:	75 e9	jne	0x10001cf93
10001cfaa:	48 8d 15 cd ba 02 00	leaq	178893(%rip), %rdx ## literal pool for: "}"
10001cfb1:	4c 89 f7	movq	%r14, %rdi
10001cfb4:	4c 89 ee	movq	%r13, %rsi
10001cfb7:	31 c0	xorl	%eax, %eax
10001cfb9:	e8 b4 bc 01 00	callq	0x100038c72
10001cfbe:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001cfc5:	48 83 bb b8 00 00 00 00	cmpq	$0, 184(%rbx)
10001cfcd:	74 6e	je	0x10001d03d
10001cfcf:	4c 89 f7	movq	%r14, %rdi
10001cfd2:	e8 96 bd 01 00	callq	0x100038d6d
10001cfd7:	48 8d 15 0a f1 02 00	leaq	192778(%rip), %rdx ## literal pool for: "instances = {"
10001cfde:	4c 89 f7	movq	%r14, %rdi
10001cfe1:	4c 89 ee	movq	%r13, %rsi
10001cfe4:	31 c0	xorl	%eax, %eax
10001cfe6:	e8 87 bc 01 00	callq	0x100038c72
10001cfeb:	48 8b 9b b8 00 00 00	movq	184(%rbx), %rbx
10001cff2:	48 85 db	testq	%rbx, %rbx
10001cff5:	74 2b	je	0x10001d022
10001cff7:	49 83 c4 02	addq	$2, %r12
10001cffb:	4c 8d 3d f4 f0 02 00	leaq	192756(%rip), %r15 ## literal pool for: "%s,"
10001d002:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
10001d009:	4c 89 f7	movq	%r14, %rdi
10001d00c:	4c 89 e6	movq	%r12, %rsi
10001d00f:	4c 89 fa	movq	%r15, %rdx
10001d012:	31 c0	xorl	%eax, %eax
10001d014:	e8 59 bc 01 00	callq	0x100038c72
10001d019:	48 8b 5b 18	movq	24(%rbx), %rbx
10001d01d:	48 85 db	testq	%rbx, %rbx
10001d020:	75 e0	jne	0x10001d002
10001d022:	48 8d 15 55 ba 02 00	leaq	178773(%rip), %rdx ## literal pool for: "}"
10001d029:	4c 89 f7	movq	%r14, %rdi
10001d02c:	4c 89 ee	movq	%r13, %rsi
10001d02f:	31 c0	xorl	%eax, %eax
10001d031:	e8 3c bc 01 00	callq	0x100038c72
10001d036:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001d03d:	4c 89 f7	movq	%r14, %rdi
10001d040:	e8 28 bd 01 00	callq	0x100038d6d
10001d045:	8b b3 04 05 00 00	movl	1284(%rbx), %esi
10001d04b:	8d 46 01	leal	1(%rsi), %eax
10001d04e:	83 f8 02	cmpl	$2, %eax
10001d051:	0f 82 ae 00 00 00	jb	0x10001d105
10001d057:	b8 aa aa aa aa	movl	$2863311530, %eax
10001d05c:	48 8d 95 d0 fe ff ff	leaq	-304(%rbp), %rdx
10001d063:	89 02	movl	%eax, (%rdx)
10001d065:	48 8d 8d 90 fe ff ff	leaq	-368(%rbp), %rcx
10001d06c:	89 01	movl	%eax, (%rcx)
10001d06e:	48 8b 05 33 b1 03 00	movq	241971(%rip), %rax ## literal pool symbol address: _mach_task_self_
10001d075:	8b 38	movl	(%rax), %edi
10001d077:	e8 04 4b 02 00	callq	0x100041b80 ## symbol stub for: _mach_port_kernel_object
10001d07c:	8b 8b 04 05 00 00	movl	1284(%rbx), %ecx
10001d082:	85 c0	testl	%eax, %eax
10001d084:	74 55	je	0x10001d0db
10001d086:	48 8d 15 9b f0 02 00	leaq	192667(%rip), %rdx ## literal pool for: "dext checkin port = %#x [unable to get port information]"
10001d08d:	4c 89 f7	movq	%r14, %rdi
10001d090:	4c 89 ee	movq	%r13, %rsi
10001d093:	31 c0	xorl	%eax, %eax
10001d095:	e8 d8 bb 01 00	callq	0x100038c72
10001d09a:	eb 61	jmp	0x10001d0fd
10001d09c:	4c 89 ef	movq	%r13, %rdi
10001d09f:	e8 e6 c3 01 00	callq	0x10003948a
10001d0a4:	4c 89 ef	movq	%r13, %rdi
10001d0a7:	84 c0	testb	%al, %al
10001d0a9:	0f 84 67 0d 00 00	je	0x10001de16
10001d0af:	e8 08 c4 01 00	callq	0x1000394bc
10001d0b4:	89 c7	movl	%eax, %edi
10001d0b6:	e8 bf 4d 02 00	callq	0x100041e7a ## symbol stub for: _strsignal
10001d0bb:	48 8d 15 df ee 02 00	leaq	192223(%rip), %rdx ## literal pool for: "last terminating signal = %s"
10001d0c2:	4c 89 f7	movq	%r14, %rdi
10001d0c5:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001d0cc:	48 89 c1	movq	%rax, %rcx
10001d0cf:	31 c0	xorl	%eax, %eax
10001d0d1:	e8 9c bb 01 00	callq	0x100038c72
10001d0d6:	e9 a9 fa ff ff	jmp	0x10001cb84
10001d0db:	44 8b 85 d0 fe ff ff	movl	-304(%rbp), %r8d
10001d0e2:	44 8b 8d 90 fe ff ff	movl	-368(%rbp), %r9d
10001d0e9:	48 8d 15 0a f0 02 00	leaq	192522(%rip), %rdx ## literal pool for: "dext checkin port = %#x [type %u, object %#x]"
10001d0f0:	4c 89 f7	movq	%r14, %rdi
10001d0f3:	4c 89 ee	movq	%r13, %rsi
10001d0f6:	31 c0	xorl	%eax, %eax
10001d0f8:	e8 75 bb 01 00	callq	0x100038c72
10001d0fd:	4c 89 f7	movq	%r14, %rdi
10001d100:	e8 68 bc 01 00	callq	0x100038d6d
10001d105:	44 8b 83 20 03 00 00	movl	800(%rbx), %r8d
10001d10c:	49 81 f8 00 01 00 00	cmpq	$256, %r8
10001d113:	72 36	jb	0x10001d14b
10001d115:	44 89 c0	movl	%r8d, %eax
10001d118:	49 c1 e8 08	shrq	$8, %r8
10001d11c:	3d ff 06 00 00	cmpl	$1791, %eax
10001d121:	77 0d	ja	0x10001d130
10001d123:	48 8d 05 76 dd 03 00	leaq	253302(%rip), %rax
10001d12a:	4a 8b 0c c0	movq	(%rax,%r8,8), %rcx
10001d12e:	eb 07	jmp	0x10001d137
10001d130:	48 8d 0d 54 be 02 00	leaq	179796(%rip), %rcx ## literal pool for: ""
10001d137:	48 8d 15 23 f0 02 00	leaq	192547(%rip), %rdx ## literal pool for: "spawn type = %s (%lu)"
10001d13e:	4c 89 f7	movq	%r14, %rdi
10001d141:	4c 89 ee	movq	%r13, %rsi
10001d144:	31 c0	xorl	%eax, %eax
10001d146:	e8 27 bb 01 00	callq	0x100038c72
10001d14b:	44 8b 83 24 03 00 00	movl	804(%rbx), %r8d
10001d152:	4d 85 c0	testq	%r8, %r8
10001d155:	74 2e	je	0x10001d185
10001d157:	41 83 f8 06	cmpl	$6, %r8d
10001d15b:	77 0d	ja	0x10001d16a
10001d15d:	48 8d 05 7c dd 03 00	leaq	253308(%rip), %rax
10001d164:	4a 8b 0c c0	movq	(%rax,%r8,8), %rcx
10001d168:	eb 07	jmp	0x10001d171
10001d16a:	48 8d 0d 1a be 02 00	leaq	179738(%rip), %rcx ## literal pool for: ""
10001d171:	48 8d 15 ff ef 02 00	leaq	192511(%rip), %rdx ## literal pool for: "spawn role = %s (%lu)"
10001d178:	4c 89 f7	movq	%r14, %rdi
10001d17b:	4c 89 ee	movq	%r13, %rsi
10001d17e:	31 c0	xorl	%eax, %eax
10001d180:	e8 ed ba 01 00	callq	0x100038c72
10001d185:	48 83 bb 28 03 00 00 00	cmpq	$0, 808(%rbx)
10001d18d:	75 0e	jne	0x10001d19d
10001d18f:	48 83 bb c8 04 00 00 00	cmpq	$0, 1224(%rbx)
10001d197:	0f 84 71 01 00 00	je	0x10001d30e
10001d19d:	48 8d 15 e9 ef 02 00	leaq	192489(%rip), %rdx ## literal pool for: "binary order preference = {"
10001d1a4:	4c 89 f7	movq	%r14, %rdi
10001d1a7:	4c 89 ee	movq	%r13, %rsi
10001d1aa:	31 c0	xorl	%eax, %eax
10001d1ac:	e8 c1 ba 01 00	callq	0x100038c72
10001d1b1:	48 8b 9b 28 03 00 00	movq	808(%rbx), %rbx
10001d1b8:	48 85 db	testq	%rbx, %rbx
10001d1bb:	0f 84 88 00 00 00	je	0x10001d249
10001d1c1:	48 89 df	movq	%rbx, %rdi
10001d1c4:	e8 23 48 fe ff	callq	0x1000019ec
10001d1c9:	85 c0	testl	%eax, %eax
10001d1cb:	74 7c	je	0x10001d249
10001d1cd:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001d1d4:	4c 8d 60 02	leaq	2(%rax), %r12
10001d1d8:	4c 8d 2d 37 a4 02 00	leaq	173111(%rip), %r13 ## literal pool for: "%s"
10001d1df:	45 31 ff	xorl	%r15d, %r15d
10001d1e2:	48 89 df	movq	%rbx, %rdi
10001d1e5:	44 89 fe	movl	%r15d, %esi
10001d1e8:	e8 08 48 fe ff	callq	0x1000019f5
10001d1ed:	89 c2	movl	%eax, %edx
10001d1ef:	81 e2 ff ff ff fe	andl	$4278190079, %edx
10001d1f5:	8d 72 ff	leal	-1(%rdx), %esi
10001d1f8:	48 8d 0d a2 dc 02 00	leaq	187554(%rip), %rcx ## literal pool for: "(invalid)"
10001d1ff:	83 fe 11	cmpl	$17, %esi
10001d202:	77 25	ja	0x10001d229
10001d204:	0f ba e0 18	btl	$24, %eax
10001d208:	89 d1	movl	%edx, %ecx
10001d20a:	48 8d 15 2f db 03 00	leaq	252719(%rip), %rdx
10001d211:	48 8d 0c ca	leaq	(%rdx,%rcx,8), %rcx
10001d215:	48 98	cltq
10001d217:	48 8d 15 c2 db 03 00	leaq	252866(%rip), %rdx
10001d21e:	48 8d 04 c2	leaq	(%rdx,%rax,8), %rax
10001d222:	48 0f 42 c1	cmovbq	%rcx, %rax
10001d226:	48 8b 08	movq	(%rax), %rcx
10001d229:	4c 89 f7	movq	%r14, %rdi
10001d22c:	4c 89 e6	movq	%r12, %rsi
10001d22f:	4c 89 ea	movq	%r13, %rdx
10001d232:	31 c0	xorl	%eax, %eax
10001d234:	e8 39 ba 01 00	callq	0x100038c72
10001d239:	41 ff c7	incl	%r15d
10001d23c:	48 89 df	movq	%rbx, %rdi
10001d23f:	e8 a8 47 fe ff	callq	0x1000019ec
10001d244:	41 39 c7	cmpl	%eax, %r15d
10001d247:	72 99	jb	0x10001d1e2
10001d249:	48 8b 85 c8 fe ff ff	movq	-312(%rbp), %rax
10001d250:	4c 8b b8 c8 04 00 00	movq	1224(%rax), %r15
10001d257:	4d 85 ff	testq	%r15, %r15
10001d25a:	0f 84 84 00 00 00	je	0x10001d2e4
10001d260:	4c 89 ff	movq	%r15, %rdi
10001d263:	e8 84 47 fe ff	callq	0x1000019ec
10001d268:	85 c0	testl	%eax, %eax
10001d26a:	74 78	je	0x10001d2e4
10001d26c:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001d273:	4c 8d 60 02	leaq	2(%rax), %r12
10001d277:	4c 8d 2d 12 e9 02 00	leaq	190738(%rip), %r13 ## literal pool for: "+ %s"
10001d27e:	31 db	xorl	%ebx, %ebx
10001d280:	4c 89 ff	movq	%r15, %rdi
10001d283:	89 de	movl	%ebx, %esi
10001d285:	e8 6b 47 fe ff	callq	0x1000019f5
10001d28a:	89 c2	movl	%eax, %edx
10001d28c:	81 e2 ff ff ff fe	andl	$4278190079, %edx
10001d292:	8d 72 ff	leal	-1(%rdx), %esi
10001d295:	48 8d 0d 05 dc 02 00	leaq	187397(%rip), %rcx ## literal pool for: "(invalid)"
10001d29c:	83 fe 11	cmpl	$17, %esi
10001d29f:	77 25	ja	0x10001d2c6
10001d2a1:	0f ba e0 18	btl	$24, %eax
10001d2a5:	89 d1	movl	%edx, %ecx
10001d2a7:	48 8d 15 92 da 03 00	leaq	252562(%rip), %rdx
10001d2ae:	48 8d 0c ca	leaq	(%rdx,%rcx,8), %rcx
10001d2b2:	48 98	cltq
10001d2b4:	48 8d 15 25 db 03 00	leaq	252709(%rip), %rdx
10001d2bb:	48 8d 04 c2	leaq	(%rdx,%rax,8), %rax
10001d2bf:	48 0f 42 c1	cmovbq	%rcx, %rax
10001d2c3:	48 8b 08	movq	(%rax), %rcx
10001d2c6:	4c 89 f7	movq	%r14, %rdi
10001d2c9:	4c 89 e6	movq	%r12, %rsi
10001d2cc:	4c 89 ea	movq	%r13, %rdx
10001d2cf:	31 c0	xorl	%eax, %eax
10001d2d1:	e8 9c b9 01 00	callq	0x100038c72
10001d2d6:	ff c3	incl	%ebx
10001d2d8:	4c 89 ff	movq	%r15, %rdi
10001d2db:	e8 0c 47 fe ff	callq	0x1000019ec
10001d2e0:	39 c3	cmpl	%eax, %ebx
10001d2e2:	72 9c	jb	0x10001d280
10001d2e4:	48 8d 15 93 b7 02 00	leaq	178067(%rip), %rdx ## literal pool for: "}"
10001d2eb:	4c 89 f7	movq	%r14, %rdi
10001d2ee:	4c 8b ad c0 fe ff ff	movq	-320(%rbp), %r13
10001d2f5:	4c 89 ee	movq	%r13, %rsi
10001d2f8:	31 c0	xorl	%eax, %eax
10001d2fa:	e8 73 b9 01 00	callq	0x100038c72
10001d2ff:	4c 89 f7	movq	%r14, %rdi
10001d302:	e8 66 ba 01 00	callq	0x100038d6d
10001d307:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001d30e:	8b 8b 38 03 00 00	movl	824(%rbx), %ecx
10001d314:	48 8d 15 8e ee 02 00	leaq	192142(%rip), %rdx ## literal pool for: "jetsam priority = %d"
10001d31b:	4c 89 f7	movq	%r14, %rdi
10001d31e:	4c 89 ee	movq	%r13, %rsi
10001d321:	31 c0	xorl	%eax, %eax
10001d323:	e8 4a b9 01 00	callq	0x100038c72
10001d328:	8b 8b e0 04 00 00	movl	1248(%rbx), %ecx
10001d32e:	85 c9	testl	%ecx, %ecx
10001d330:	78 14	js	0x10001d346
10001d332:	48 8d 15 85 ee 02 00	leaq	192133(%rip), %rdx ## literal pool for: "+ %d"
10001d339:	4c 89 f7	movq	%r14, %rdi
10001d33c:	4c 89 ee	movq	%r13, %rsi
10001d33f:	31 c0	xorl	%eax, %eax
10001d341:	e8 2c b9 01 00	callq	0x100038c72
10001d346:	44 8b 83 3c 03 00 00	movl	828(%rbx), %r8d
10001d34d:	45 85 c0	testl	%r8d, %r8d
10001d350:	7e 2f	jle	0x10001d381
10001d352:	f6 83 34 03 00 00 04	testb	$4, 820(%rbx)
10001d359:	48 8d 05 91 ee 02 00	leaq	192145(%rip), %rax ## literal pool for: "soft"
10001d360:	48 8d 0d 85 ee 02 00	leaq	192133(%rip), %rcx ## literal pool for: "hard"
10001d367:	48 0f 44 c8	cmoveq	%rax, %rcx
10001d36b:	48 8d 15 51 ee 02 00	leaq	192081(%rip), %rdx ## literal pool for: "jetsam memory limit (active, %s) = %d MB"
10001d372:	4c 89 f7	movq	%r14, %rdi
10001d375:	4c 89 ee	movq	%r13, %rsi
10001d378:	31 c0	xorl	%eax, %eax
10001d37a:	e8 f3 b8 01 00	callq	0x100038c72
10001d37f:	eb 1a	jmp	0x10001d39b
10001d381:	0f 84 2d 0a 00 00	je	0x10001ddb4
10001d387:	48 8d 15 68 ee 02 00	leaq	192104(%rip), %rdx ## literal pool for: "jetsam memory limit (active) = (unlimited)"
10001d38e:	4c 89 f7	movq	%r14, %rdi
10001d391:	4c 89 ee	movq	%r13, %rsi
10001d394:	31 c0	xorl	%eax, %eax
10001d396:	e8 d7 b8 01 00	callq	0x100038c72
10001d39b:	8b 8b e4 04 00 00	movl	1252(%rbx), %ecx
10001d3a1:	85 c9	testl	%ecx, %ecx
10001d3a3:	7e 16	jle	0x10001d3bb
10001d3a5:	48 8d 15 75 ee 02 00	leaq	192117(%rip), %rdx ## literal pool for: "+ %d MB"
10001d3ac:	4c 89 f7	movq	%r14, %rdi
10001d3af:	4c 89 ee	movq	%r13, %rsi
10001d3b2:	31 c0	xorl	%eax, %eax
10001d3b4:	e8 b9 b8 01 00	callq	0x100038c72
10001d3b9:	eb 16	jmp	0x10001d3d1
10001d3bb:	79 14	jns	0x10001d3d1
10001d3bd:	48 8d 15 65 ee 02 00	leaq	192101(%rip), %rdx ## literal pool for: "+ (unlimited)"
10001d3c4:	4c 89 f7	movq	%r14, %rdi
10001d3c7:	4c 89 ee	movq	%r13, %rsi
10001d3ca:	31 c0	xorl	%eax, %eax
10001d3cc:	e8 a1 b8 01 00	callq	0x100038c72
10001d3d1:	44 8b 83 40 03 00 00	movl	832(%rbx), %r8d
10001d3d8:	45 85 c0	testl	%r8d, %r8d
10001d3db:	7e 2f	jle	0x10001d40c
10001d3dd:	f6 83 34 03 00 00 08	testb	$8, 820(%rbx)
10001d3e4:	48 8d 05 06 ee 02 00	leaq	192006(%rip), %rax ## literal pool for: "soft"
10001d3eb:	48 8d 0d fa ed 02 00	leaq	191994(%rip), %rcx ## literal pool for: "hard"
10001d3f2:	48 0f 44 c8	cmoveq	%rax, %rcx
10001d3f6:	48 8d 15 3a ee 02 00	leaq	192058(%rip), %rdx ## literal pool for: "jetsam memory limit (inactive, %s) = %d MB"
10001d3fd:	4c 89 f7	movq	%r14, %rdi
10001d400:	4c 89 ee	movq	%r13, %rsi
10001d403:	31 c0	xorl	%eax, %eax
10001d405:	e8 68 b8 01 00	callq	0x100038c72
10001d40a:	eb 1a	jmp	0x10001d426
10001d40c:	0f 84 d3 09 00 00	je	0x10001dde5
10001d412:	48 8d 15 49 ee 02 00	leaq	192073(%rip), %rdx ## literal pool for: "jetsam memory limit (inactive) = (unlimited)"
10001d419:	4c 89 f7	movq	%r14, %rdi
10001d41c:	4c 89 ee	movq	%r13, %rsi
10001d41f:	31 c0	xorl	%eax, %eax
10001d421:	e8 4c b8 01 00	callq	0x100038c72
10001d426:	8b 8b e4 04 00 00	movl	1252(%rbx), %ecx
10001d42c:	85 c9	testl	%ecx, %ecx
10001d42e:	7e 16	jle	0x10001d446
10001d430:	48 8d 15 ea ed 02 00	leaq	191978(%rip), %rdx ## literal pool for: "+ %d MB"
10001d437:	4c 89 f7	movq	%r14, %rdi
10001d43a:	4c 89 ee	movq	%r13, %rsi
10001d43d:	31 c0	xorl	%eax, %eax
10001d43f:	e8 2e b8 01 00	callq	0x100038c72
10001d444:	eb 16	jmp	0x10001d45c
10001d446:	79 14	jns	0x10001d45c
10001d448:	48 8d 15 da ed 02 00	leaq	191962(%rip), %rdx ## literal pool for: "+ (unlimited)"
10001d44f:	4c 89 f7	movq	%r14, %rdi
10001d452:	4c 89 ee	movq	%r13, %rsi
10001d455:	31 c0	xorl	%eax, %eax
10001d457:	e8 16 b8 01 00	callq	0x100038c72
10001d45c:	48 89 df	movq	%rbx, %rdi
10001d45f:	e8 5e 0a 00 00	callq	0x10001dec2
10001d464:	48 8d 15 24 ee 02 00	leaq	192036(%rip), %rdx ## literal pool for: "jetsamproperties category = %s"
10001d46b:	4c 89 f7	movq	%r14, %rdi
10001d46e:	4c 89 ee	movq	%r13, %rsi
10001d471:	48 89 c1	movq	%rax, %rcx
10001d474:	31 c0	xorl	%eax, %eax
10001d476:	e8 f7 b7 01 00	callq	0x100038c72
10001d47b:	48 0f ba a3 0d 05 00 00 31	btq	$49, 1293(%rbx)
10001d484:	73 14	jae	0x10001d49a
10001d486:	48 8d 15 21 ee 02 00	leaq	192033(%rip), %rdx ## literal pool for: "submitted job. ignore execute allowed"
10001d48d:	4c 89 f7	movq	%r14, %rdi
10001d490:	4c 89 ee	movq	%r13, %rsi
10001d493:	31 c0	xorl	%eax, %eax
10001d495:	e8 d8 b7 01 00	callq	0x100038c72
10001d49a:	8b 8b 44 03 00 00	movl	836(%rbx), %ecx
10001d4a0:	85 c9	testl	%ecx, %ecx
10001d4a2:	74 14	je	0x10001d4b8
10001d4a4:	48 8d 15 29 ee 02 00	leaq	192041(%rip), %rdx ## literal pool for: "jetsam thread limit = %d"
10001d4ab:	4c 89 f7	movq	%r14, %rdi
10001d4ae:	4c 89 ee	movq	%r13, %rsi
10001d4b1:	31 c0	xorl	%eax, %eax
10001d4b3:	e8 ba b7 01 00	callq	0x100038c72
10001d4b8:	48 8b 8b 48 03 00 00	movq	840(%rbx), %rcx
10001d4bf:	48 85 c9	testq	%rcx, %rcx
10001d4c2:	74 14	je	0x10001d4d8
10001d4c4:	48 8d 15 22 ee 02 00	leaq	192034(%rip), %rdx ## literal pool for: "jetsam address limit = %llu"
10001d4cb:	4c 89 f7	movq	%r14, %rdi
10001d4ce:	4c 89 ee	movq	%r13, %rsi
10001d4d1:	31 c0	xorl	%eax, %eax
10001d4d3:	e8 9a b7 01 00	callq	0x100038c72
10001d4d8:	8b 8b 50 03 00 00	movl	848(%rbx), %ecx
10001d4de:	85 c9	testl	%ecx, %ecx
10001d4e0:	74 14	je	0x10001d4f6
10001d4e2:	48 8d 15 20 ee 02 00	leaq	192032(%rip), %rdx ## literal pool for: "jetsam soft port limit = %u"
10001d4e9:	4c 89 f7	movq	%r14, %rdi
10001d4ec:	4c 89 ee	movq	%r13, %rsi
10001d4ef:	31 c0	xorl	%eax, %eax
10001d4f1:	e8 7c b7 01 00	callq	0x100038c72
10001d4f6:	8b 8b 54 03 00 00	movl	852(%rbx), %ecx
10001d4fc:	85 c9	testl	%ecx, %ecx
10001d4fe:	74 14	je	0x10001d514
10001d500:	48 8d 15 1e ee 02 00	leaq	192030(%rip), %rdx ## literal pool for: "jetsam hard port limit = %u"
10001d507:	4c 89 f7	movq	%r14, %rdi
10001d50a:	4c 89 ee	movq	%r13, %rsi
10001d50d:	31 c0	xorl	%eax, %eax
10001d50f:	e8 5e b7 01 00	callq	0x100038c72
10001d514:	8b 8b 58 03 00 00	movl	856(%rbx), %ecx
10001d51a:	85 c9	testl	%ecx, %ecx
10001d51c:	74 14	je	0x10001d532
10001d51e:	48 8d 15 1c ee 02 00	leaq	192028(%rip), %rdx ## literal pool for: "jetsam soft file descriptor limit = %u"
10001d525:	4c 89 f7	movq	%r14, %rdi
10001d528:	4c 89 ee	movq	%r13, %rsi
10001d52b:	31 c0	xorl	%eax, %eax
10001d52d:	e8 40 b7 01 00	callq	0x100038c72
10001d532:	8b 8b 5c 03 00 00	movl	860(%rbx), %ecx
10001d538:	85 c9	testl	%ecx, %ecx
10001d53a:	74 14	je	0x10001d550
10001d53c:	48 8d 15 25 ee 02 00	leaq	192037(%rip), %rdx ## literal pool for: "jetsam hard file descriptor limit = %u"
10001d543:	4c 89 f7	movq	%r14, %rdi
10001d546:	4c 89 ee	movq	%r13, %rsi
10001d549:	31 c0	xorl	%eax, %eax
10001d54b:	e8 22 b7 01 00	callq	0x100038c72
10001d550:	0f b6 8b 8a 03 00 00	movzbl	906(%rbx), %ecx
10001d557:	44 8b 83 8c 03 00 00	movl	908(%rbx), %r8d
10001d55e:	85 c9	testl	%ecx, %ecx
10001d560:	75 1b	jne	0x10001d57d
10001d562:	45 85 c0	testl	%r8d, %r8d
10001d565:	75 16	jne	0x10001d57d
10001d567:	48 8d 15 3f ee 02 00	leaq	192063(%rip), %rdx ## literal pool for: "cpumon = default"
10001d56e:	4c 89 f7	movq	%r14, %rdi
10001d571:	4c 89 ee	movq	%r13, %rsi
10001d574:	31 c0	xorl	%eax, %eax
10001d576:	e8 f7 b6 01 00	callq	0x100038c72
10001d57b:	eb 14	jmp	0x10001d591
10001d57d:	48 8d 15 0b ee 02 00	leaq	192011(%rip), %rdx ## literal pool for: "cpumon = %d%% over %u seconds"
10001d584:	4c 89 f7	movq	%r14, %rdi
10001d587:	4c 89 ee	movq	%r13, %rsi
10001d58a:	31 c0	xorl	%eax, %eax
10001d58c:	e8 e1 b6 01 00	callq	0x100038c72
10001d591:	48 83 bb 90 02 00 00 00	cmpq	$0, 656(%rbx)
10001d599:	0f 84 8e 01 00 00	je	0x10001d72d
10001d59f:	48 8d 15 18 ee 02 00	leaq	192024(%rip), %rdx ## literal pool for: "resource limits = {"
10001d5a6:	4c 89 f7	movq	%r14, %rdi
10001d5a9:	4c 89 ee	movq	%r13, %rsi
10001d5ac:	31 c0	xorl	%eax, %eax
10001d5ae:	e8 bf b6 01 00	callq	0x100038c72
10001d5b3:	48 8b 9b 90 02 00 00	movq	656(%rbx), %rbx
10001d5ba:	48 85 db	testq	%rbx, %rbx
10001d5bd:	0f 84 40 01 00 00	je	0x10001d703
10001d5c3:	48 8b 85 b8 fe ff ff	movq	-328(%rbp), %rax
10001d5ca:	4c 8d 78 02	leaq	2(%rax), %r15
10001d5ce:	49 bd ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %r13
10001d5d8:	4c 8d a5 d0 fe ff ff	leaq	-304(%rbp), %r12
10001d5df:	80 7b 23 00	cmpb	$0, 35(%rbx)
10001d5e3:	0f 84 82 00 00 00	je	0x10001d66b
10001d5e9:	0f 28 05 90 5c 02 00	movaps	154768(%rip), %xmm0
10001d5f0:	0f 29 85 00 ff ff ff	movaps	%xmm0, -256(%rbp)
10001d5f7:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
10001d5fe:	0f 29 85 e0 fe ff ff	movaps	%xmm0, -288(%rbp)
10001d605:	0f 29 85 d0 fe ff ff	movaps	%xmm0, -304(%rbp)
10001d60c:	48 8b 4b 10	movq	16(%rbx), %rcx
10001d610:	4c 39 e9	cmpq	%r13, %rcx
10001d613:	75 1d	jne	0x10001d632
10001d615:	48 b8 28 69 6e 66 69 6e 69 74	movabsq	$8388357179923392808, %rax
10001d61f:	48 89 85 d0 fe ff ff	movq	%rax, -304(%rbp)
10001d626:	c7 85 d7 fe ff ff 74 79 29 00	movl	$2718068, -297(%rbp)
10001d630:	eb 16	jmp	0x10001d648
10001d632:	be 40 00 00 00	movl	$64, %esi
10001d637:	4c 89 e7	movq	%r12, %rdi
10001d63a:	48 8d 15 01 b4 02 00	leaq	177153(%rip), %rdx ## literal pool for: "%llu"
10001d641:	31 c0	xorl	%eax, %eax
10001d643:	e8 ba 47 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001d648:	0f b7 7b 20	movzwl	32(%rbx), %edi
10001d64c:	e8 49 78 01 00	callq	0x100034e9a
10001d651:	4c 89 f7	movq	%r14, %rdi
10001d654:	4c 89 fe	movq	%r15, %rsi
10001d657:	48 8d 15 74 ed 02 00	leaq	191860(%rip), %rdx ## literal pool for: "%s (soft) => %s"
10001d65e:	48 89 c1	movq	%rax, %rcx
10001d661:	4d 89 e0	movq	%r12, %r8
10001d664:	31 c0	xorl	%eax, %eax
10001d666:	e8 07 b6 01 00	callq	0x100038c72
10001d66b:	80 7b 22 00	cmpb	$0, 34(%rbx)
10001d66f:	0f 84 82 00 00 00	je	0x10001d6f7
10001d675:	0f 28 05 04 5c 02 00	movaps	154628(%rip), %xmm0
10001d67c:	0f 29 85 00 ff ff ff	movaps	%xmm0, -256(%rbp)
10001d683:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
10001d68a:	0f 29 85 e0 fe ff ff	movaps	%xmm0, -288(%rbp)
10001d691:	0f 29 85 d0 fe ff ff	movaps	%xmm0, -304(%rbp)
10001d698:	48 8b 4b 18	movq	24(%rbx), %rcx
10001d69c:	4c 39 e9	cmpq	%r13, %rcx
10001d69f:	75 1d	jne	0x10001d6be
10001d6a1:	48 b8 28 69 6e 66 69 6e 69 74	movabsq	$8388357179923392808, %rax
10001d6ab:	48 89 85 d0 fe ff ff	movq	%rax, -304(%rbp)
10001d6b2:	c7 85 d7 fe ff ff 74 79 29 00	movl	$2718068, -297(%rbp)
10001d6bc:	eb 16	jmp	0x10001d6d4
10001d6be:	be 40 00 00 00	movl	$64, %esi
10001d6c3:	4c 89 e7	movq	%r12, %rdi
10001d6c6:	48 8d 15 75 b3 02 00	leaq	177013(%rip), %rdx ## literal pool for: "%llu"
10001d6cd:	31 c0	xorl	%eax, %eax
10001d6cf:	e8 2e 47 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001d6d4:	0f b7 7b 20	movzwl	32(%rbx), %edi
10001d6d8:	e8 bd 77 01 00	callq	0x100034e9a
10001d6dd:	4c 89 f7	movq	%r14, %rdi
10001d6e0:	4c 89 fe	movq	%r15, %rsi
10001d6e3:	48 8d 15 f8 ec 02 00	leaq	191736(%rip), %rdx ## literal pool for: "%s (hard) => %s"
10001d6ea:	48 89 c1	movq	%rax, %rcx
10001d6ed:	4d 89 e0	movq	%r12, %r8
10001d6f0:	31 c0	xorl	%eax, %eax
10001d6f2:	e8 7b b5 01 00	callq	0x100038c72
10001d6f7:	48 8b 1b	movq	(%rbx), %rbx
10001d6fa:	48 85 db	testq	%rbx, %rbx
10001d6fd:	0f 85 dc fe ff ff	jne	0x10001d5df
10001d703:	48 8d 15 74 b3 02 00	leaq	177012(%rip), %rdx ## literal pool for: "}"
10001d70a:	4c 89 f7	movq	%r14, %rdi
10001d70d:	4c 8b ad c0 fe ff ff	movq	-320(%rbp), %r13
10001d714:	4c 89 ee	movq	%r13, %rsi
10001d717:	31 c0	xorl	%eax, %eax
10001d719:	e8 54 b5 01 00	callq	0x100038c72
10001d71e:	4c 89 f7	movq	%r14, %rdi
10001d721:	e8 47 b6 01 00	callq	0x100038d6d
10001d726:	48 8b 9d c8 fe ff ff	movq	-312(%rbp), %rbx
10001d72d:	8b 8b 08 03 00 00	movl	776(%rbx), %ecx
10001d733:	85 c9	testl	%ecx, %ecx
10001d735:	74 14	je	0x10001d74b
10001d737:	48 8d 15 b4 ec 02 00	leaq	191668(%rip), %rdx ## literal pool for: "run interval = %u seconds"
10001d73e:	4c 89 f7	movq	%r14, %rdi
10001d741:	4c 89 ee	movq	%r13, %rsi
10001d744:	31 c0	xorl	%eax, %eax
10001d746:	e8 27 b5 01 00	callq	0x100038c72
10001d74b:	48 89 df	movq	%rbx, %rdi
10001d74e:	e8 8f 61 01 00	callq	0x1000338e2
10001d753:	48 85 c0	testq	%rax, %rax
10001d756:	74 17	je	0x10001d76f
10001d758:	48 8d 15 ad ec 02 00	leaq	191661(%rip), %rdx ## literal pool for: "job state = %s"
10001d75f:	4c 89 f7	movq	%r14, %rdi
10001d762:	4c 89 ee	movq	%r13, %rsi
10001d765:	48 89 c1	movq	%rax, %rcx
10001d768:	31 c0	xorl	%eax, %eax
10001d76a:	e8 03 b5 01 00	callq	0x100038c72
10001d76f:	48 0f ba a3 0d 05 00 00 35	btq	$53, 1293(%rbx)
10001d778:	73 1a	jae	0x10001d794
10001d77a:	8b 8b f8 04 00 00	movl	1272(%rbx), %ecx
10001d780:	48 8d 15 94 ec 02 00	leaq	191636(%rip), %rdx ## literal pool for: "persona set at = %u"
10001d787:	4c 89 f7	movq	%r14, %rdi
10001d78a:	4c 89 ee	movq	%r13, %rsi
10001d78d:	31 c0	xorl	%eax, %eax
10001d78f:	e8 de b4 01 00	callq	0x100038c72
10001d794:	8b 8b 08 05 00 00	movl	1288(%rbx), %ecx
10001d79a:	85 c9	testl	%ecx, %ecx
10001d79c:	74 14	je	0x10001d7b2
10001d79e:	48 8d 15 8a ec 02 00	leaq	191626(%rip), %rdx ## literal pool for: "platform = %d"
10001d7a5:	4c 89 f7	movq	%r14, %rdi
10001d7a8:	4c 89 ee	movq	%r13, %rsi
10001d7ab:	31 c0	xorl	%eax, %eax
10001d7ad:	e8 c0 b4 01 00	callq	0x100038c72
10001d7b2:	8a 83 0c 05 00 00	movb	1292(%rbx), %al
10001d7b8:	84 c0	testb	%al, %al
10001d7ba:	74 35	je	0x10001d7f1
10001d7bc:	3c 01	cmpb	$1, %al
10001d7be:	48 8d 0d 73 5c 02 00	leaq	154739(%rip), %rcx ## literal pool for: "1"
10001d7c5:	48 8d 15 a2 9f 02 00	leaq	171938(%rip), %rdx ## literal pool for: "0"
10001d7cc:	48 0f 44 d1	cmoveq	%rcx, %rdx
10001d7d0:	3c 02	cmpb	$2, %al
10001d7d2:	48 8d 0d 24 f0 02 00	leaq	192548(%rip), %rcx ## literal pool for: "managed"
10001d7d9:	48 0f 45 ca	cmovneq	%rdx, %rcx
10001d7dd:	48 8d 15 59 ec 02 00	leaq	191577(%rip), %rdx ## literal pool for: "multiple instances = %s"
10001d7e4:	4c 89 f7	movq	%r14, %rdi
10001d7e7:	4c 89 ee	movq	%r13, %rsi
10001d7ea:	31 c0	xorl	%eax, %eax
10001d7ec:	e8 81 b4 01 00	callq	0x100038c72
10001d7f1:	bf 80 00 00 00	movl	$128, %edi
10001d7f6:	e8 66 e8 fe ff	callq	0x10000c061
10001d7fb:	4d 89 ef	movq	%r13, %r15
10001d7fe:	49 89 c5	movq	%rax, %r13
10001d801:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d807:	83 e2 01	andl	$1, %edx
10001d80a:	48 8d 35 44 ec 02 00	leaq	191556(%rip), %rsi ## literal pool for: "partial import"
10001d811:	48 89 c7	movq	%rax, %rdi
10001d814:	e8 70 1b 00 00	callq	0x10001f389
10001d819:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d820:	83 e2 02	andl	$2, %edx
10001d823:	48 d1 ea	shrq	%rdx
10001d826:	48 8d 35 37 ec 02 00	leaq	191543(%rip), %rsi ## literal pool for: "xpc bundle"
10001d82d:	4c 89 ef	movq	%r13, %rdi
10001d830:	e8 54 1b 00 00	callq	0x10001f389
10001d835:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d83c:	83 e2 04	andl	$4, %edx
10001d83f:	48 c1 ea 02	shrq	$2, %rdx
10001d843:	48 8d 35 25 ec 02 00	leaq	191525(%rip), %rsi ## literal pool for: "keepalive"
10001d84a:	4c 89 ef	movq	%r13, %rdi
10001d84d:	e8 37 1b 00 00	callq	0x10001f389
10001d852:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d859:	83 e2 08	andl	$8, %edx
10001d85c:	48 c1 ea 03	shrq	$3, %rdx
10001d860:	48 8d 35 12 ec 02 00	leaq	191506(%rip), %rsi ## literal pool for: "runatload"
10001d867:	4c 89 ef	movq	%r13, %rdi
10001d86a:	e8 1a 1b 00 00	callq	0x10001f389
10001d86f:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d876:	83 e2 10	andl	$16, %edx
10001d879:	48 c1 ea 04	shrq	$4, %rdx
10001d87d:	48 8d 35 ff eb 02 00	leaq	191487(%rip), %rsi ## literal pool for: "low priority i/o"
10001d884:	4c 89 ef	movq	%r13, %rdi
10001d887:	e8 fd 1a 00 00	callq	0x10001f389
10001d88c:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d893:	83 e2 20	andl	$32, %edx
10001d896:	48 c1 ea 05	shrq	$5, %rdx
10001d89a:	48 8d 35 f3 eb 02 00	leaq	191475(%rip), %rsi ## literal pool for: "low priority background i/o"
10001d8a1:	4c 89 ef	movq	%r13, %rdi
10001d8a4:	e8 e0 1a 00 00	callq	0x10001f389
10001d8a9:	31 d2	xorl	%edx, %edx
10001d8ab:	80 bb fc 04 00 00 00	cmpb	$0, 1276(%rbx)
10001d8b2:	0f 95 c2	setne	%dl
10001d8b5:	48 8d 35 f4 eb 02 00	leaq	191476(%rip), %rsi ## literal pool for: "dataless file mode"
10001d8bc:	4c 89 ef	movq	%r13, %rdi
10001d8bf:	e8 c5 1a 00 00	callq	0x10001f389
10001d8c4:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d8cb:	83 e2 40	andl	$64, %edx
10001d8ce:	48 c1 ea 06	shrq	$6, %rdx
10001d8d2:	48 8d 35 ea eb 02 00	leaq	191466(%rip), %rsi ## literal pool for: "legacy timer behavior"
10001d8d9:	4c 89 ef	movq	%r13, %rdi
10001d8dc:	e8 a8 1a 00 00	callq	0x10001f389
10001d8e1:	8a 83 0d 05 00 00	movb	1293(%rbx), %al
10001d8e7:	c0 e8 07	shrb	$7, %al
10001d8ea:	0f b6 d0	movzbl	%al, %edx
10001d8ed:	48 8d 35 e5 eb 02 00	leaq	191461(%rip), %rsi ## literal pool for: "exception handler"
10001d8f4:	4c 89 ef	movq	%r13, %rdi
10001d8f7:	e8 8d 1a 00 00	callq	0x10001f389
10001d8fc:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d902:	c1 ea 08	shrl	$8, %edx
10001d905:	83 e2 01	andl	$1, %edx
10001d908:	48 8d 35 dc eb 02 00	leaq	191452(%rip), %rsi ## literal pool for: "supports transactions"
10001d90f:	4c 89 ef	movq	%r13, %rdi
10001d912:	e8 72 1a 00 00	callq	0x10001f389
10001d917:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d91d:	c1 ea 09	shrl	$9, %edx
10001d920:	83 e2 01	andl	$1, %edx
10001d923:	48 8d 35 d7 eb 02 00	leaq	191447(%rip), %rsi ## literal pool for: "supports pressured exit"
10001d92a:	4c 89 ef	movq	%r13, %rdi
10001d92d:	e8 57 1a 00 00	callq	0x10001f389
10001d932:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001d939:	48 c1 ea 36	shrq	$54, %rdx
10001d93d:	83 e2 01	andl	$1, %edx
10001d940:	48 8d 35 d2 eb 02 00	leaq	191442(%rip), %rsi ## literal pool for: "supports idle hysteresis"
10001d947:	4c 89 ef	movq	%r13, %rdi
10001d94a:	e8 3a 1a 00 00	callq	0x10001f389
10001d94f:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d955:	c1 ea 0a	shrl	$10, %edx
10001d958:	83 e2 01	andl	$1, %edx
10001d95b:	48 8d 35 d0 eb 02 00	leaq	191440(%rip), %rsi ## literal pool for: "enter kdp before kill"
10001d962:	4c 89 ef	movq	%r13, %rdi
10001d965:	e8 1f 1a 00 00	callq	0x10001f389
10001d96a:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d970:	c1 ea 0b	shrl	$11, %edx
10001d973:	83 e2 01	andl	$1, %edx
10001d976:	48 8d 35 cb eb 02 00	leaq	191435(%rip), %rsi ## literal pool for: "wait for debugger"
10001d97d:	4c 89 ef	movq	%r13, %rdi
10001d980:	e8 04 1a 00 00	callq	0x10001f389
10001d985:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d98b:	c1 ea 0c	shrl	$12, %edx
10001d98e:	83 e2 01	andl	$1, %edx
10001d991:	48 8d 35 62 c5 02 00	leaq	181602(%rip), %rsi ## literal pool for: "app"
10001d998:	4c 89 ef	movq	%r13, %rdi
10001d99b:	e8 e9 19 00 00	callq	0x10001f389
10001d9a0:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d9a6:	c1 ea 0d	shrl	$13, %edx
10001d9a9:	83 e2 01	andl	$1, %edx
10001d9ac:	48 8d 35 3c c5 02 00	leaq	181564(%rip), %rsi ## literal pool for: "system app"
10001d9b3:	4c 89 ef	movq	%r13, %rdi
10001d9b6:	e8 ce 19 00 00	callq	0x10001f389
10001d9bb:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d9c1:	c1 ea 0e	shrl	$14, %edx
10001d9c4:	83 e2 01	andl	$1, %edx
10001d9c7:	48 8d 35 8c eb 02 00	leaq	191372(%rip), %rsi ## literal pool for: "creates session"
10001d9ce:	4c 89 ef	movq	%r13, %rdi
10001d9d1:	e8 b3 19 00 00	callq	0x10001f389
10001d9d6:	0f b7 93 0d 05 00 00	movzwl	1293(%rbx), %edx
10001d9dd:	c1 ea 0f	shrl	$15, %edx
10001d9e0:	48 8d 35 83 eb 02 00	leaq	191363(%rip), %rsi ## literal pool for: "inetd-compatible"
10001d9e7:	4c 89 ef	movq	%r13, %rdi
10001d9ea:	e8 9a 19 00 00	callq	0x10001f389
10001d9ef:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001d9f5:	c1 ea 10	shrl	$16, %edx
10001d9f8:	83 e2 01	andl	$1, %edx
10001d9fb:	48 8d 35 79 eb 02 00	leaq	191353(%rip), %rsi ## literal pool for: "inetd listener"
10001da02:	4c 89 ef	movq	%r13, %rdi
10001da05:	e8 7f 19 00 00	callq	0x10001f389
10001da0a:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da10:	c1 ea 11	shrl	$17, %edx
10001da13:	83 e2 01	andl	$1, %edx
10001da16:	48 8d 35 6d eb 02 00	leaq	191341(%rip), %rsi ## literal pool for: "abandon process group"
10001da1d:	4c 89 ef	movq	%r13, %rdi
10001da20:	e8 64 19 00 00	callq	0x10001f389
10001da25:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da2b:	c1 ea 13	shrl	$19, %edx
10001da2e:	83 e2 01	andl	$1, %edx
10001da31:	48 8d 35 68 eb 02 00	leaq	191336(%rip), %rsi ## literal pool for: "event monitor"
10001da38:	4c 89 ef	movq	%r13, %rdi
10001da3b:	e8 49 19 00 00	callq	0x10001f389
10001da40:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da46:	c1 ea 14	shrl	$20, %edx
10001da49:	83 e2 01	andl	$1, %edx
10001da4c:	48 8d 35 5b eb 02 00	leaq	191323(%rip), %rsi ## literal pool for: "penalty box"
10001da53:	4c 89 ef	movq	%r13, %rdi
10001da56:	e8 2e 19 00 00	callq	0x10001f389
10001da5b:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da61:	c1 ea 15	shrl	$21, %edx
10001da64:	83 e2 01	andl	$1, %edx
10001da67:	48 8d 35 4c eb 02 00	leaq	191308(%rip), %rsi ## literal pool for: "role account"
10001da6e:	4c 89 ef	movq	%r13, %rdi
10001da71:	e8 13 19 00 00	callq	0x10001f389
10001da76:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da7c:	c1 ea 16	shrl	$22, %edx
10001da7f:	83 e2 01	andl	$1, %edx
10001da82:	48 8d 35 3e eb 02 00	leaq	191294(%rip), %rsi ## literal pool for: "launch only once"
10001da89:	4c 89 ef	movq	%r13, %rdi
10001da8c:	e8 f8 18 00 00	callq	0x10001f389
10001da91:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001da97:	c1 ea 17	shrl	$23, %edx
10001da9a:	83 e2 01	andl	$1, %edx
10001da9d:	48 8d 35 d6 c4 02 00	leaq	181462(%rip), %rsi ## literal pool for: "system support"
10001daa4:	4c 89 ef	movq	%r13, %rdi
10001daa7:	e8 dd 18 00 00	callq	0x10001f389
10001daac:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001dab2:	c1 ea 19	shrl	$25, %edx
10001dab5:	83 e2 01	andl	$1, %edx
10001dab8:	48 8d 35 19 eb 02 00	leaq	191257(%rip), %rsi ## literal pool for: "inferred program"
10001dabf:	4c 89 ef	movq	%r13, %rdi
10001dac2:	e8 c2 18 00 00	callq	0x10001f389
10001dac7:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001dacd:	c1 ea 1d	shrl	$29, %edx
10001dad0:	83 e2 01	andl	$1, %edx
10001dad3:	48 8d 35 0f eb 02 00	leaq	191247(%rip), %rsi ## literal pool for: "joins gui session"
10001dada:	4c 89 ef	movq	%r13, %rdi
10001dadd:	e8 a7 18 00 00	callq	0x10001f389
10001dae2:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001dae8:	c1 ea 1e	shrl	$30, %edx
10001daeb:	83 e2 01	andl	$1, %edx
10001daee:	48 8d 35 06 eb 02 00	leaq	191238(%rip), %rsi ## literal pool for: "joins host session"
10001daf5:	4c 89 ef	movq	%r13, %rdi
10001daf8:	e8 8c 18 00 00	callq	0x10001f389
10001dafd:	8b 93 11 05 00 00	movl	1297(%rbx), %edx
10001db03:	83 e2 01	andl	$1, %edx
10001db06:	48 8d 35 01 eb 02 00	leaq	191233(%rip), %rsi ## literal pool for: "parameterized sandbox"
10001db0d:	4c 89 ef	movq	%r13, %rdi
10001db10:	e8 74 18 00 00	callq	0x10001f389
10001db15:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001db1c:	48 c1 ea 21	shrq	$33, %rdx
10001db20:	83 e2 01	andl	$1, %edx
10001db23:	48 8d 35 fa ea 02 00	leaq	191226(%rip), %rsi ## literal pool for: "resolve program"
10001db2a:	4c 89 ef	movq	%r13, %rdi
10001db2d:	e8 57 18 00 00	callq	0x10001f389
10001db32:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001db39:	48 c1 ea 22	shrq	$34, %rdx
10001db3d:	83 e2 01	andl	$1, %edx
10001db40:	48 8d 35 ed ea 02 00	leaq	191213(%rip), %rsi ## literal pool for: "abandon coalition"
10001db47:	4c 89 ef	movq	%r13, %rdi
10001db4a:	e8 3a 18 00 00	callq	0x10001f389
10001db4f:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001db56:	48 c1 ea 3d	shrq	$61, %rdx
10001db5a:	83 e2 01	andl	$1, %edx
10001db5d:	48 8d 35 e2 ea 02 00	leaq	191202(%rip), %rsi ## literal pool for: "disable pointer auth"
10001db64:	4c 89 ef	movq	%r13, %rdi
10001db67:	e8 1d 18 00 00	callq	0x10001f389
10001db6c:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001db73:	48 c1 ea 25	shrq	$37, %rdx
10001db77:	83 e2 01	andl	$1, %edx
10001db7a:	48 8d 35 da ea 02 00	leaq	191194(%rip), %rsi ## literal pool for: "high bits aslr"
10001db81:	4c 89 ef	movq	%r13, %rdi
10001db84:	e8 00 18 00 00	callq	0x10001f389
10001db89:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001db90:	48 c1 ea 3a	shrq	$58, %rdx
10001db94:	83 e2 01	andl	$1, %edx
10001db97:	48 8d 35 cc ea 02 00	leaq	191180(%rip), %rsi ## literal pool for: "reslide shared cache"
10001db9e:	4c 89 ef	movq	%r13, %rdi
10001dba1:	e8 e3 17 00 00	callq	0x10001f389
10001dba6:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dbad:	48 c1 ea 3b	shrq	$59, %rdx
10001dbb1:	83 e2 01	andl	$1, %edx
10001dbb4:	48 8d 35 c4 ea 02 00	leaq	191172(%rip), %rsi ## literal pool for: "disable resliding"
10001dbbb:	4c 89 ef	movq	%r13, %rdi
10001dbbe:	e8 c6 17 00 00	callq	0x10001f389
10001dbc3:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dbca:	48 c1 ea 26	shrq	$38, %rdx
10001dbce:	83 e2 01	andl	$1, %edx
10001dbd1:	48 8d 35 81 c2 02 00	leaq	180865(%rip), %rsi ## literal pool for: "extension"
10001dbd8:	4c 89 ef	movq	%r13, %rdi
10001dbdb:	e8 a9 17 00 00	callq	0x10001f389
10001dbe0:	8b 93 0d 05 00 00	movl	1293(%rbx), %edx
10001dbe6:	c1 ea 1a	shrl	$26, %edx
10001dbe9:	83 e2 01	andl	$1, %edx
10001dbec:	48 8d 35 9e ea 02 00	leaq	191134(%rip), %rsi ## literal pool for: "nano allocator"
10001dbf3:	4c 89 ef	movq	%r13, %rdi
10001dbf6:	e8 8e 17 00 00	callq	0x10001f389
10001dbfb:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dc02:	48 c1 ea 23	shrq	$35, %rdx
10001dc06:	83 e2 01	andl	$1, %edx
10001dc09:	48 8d 35 90 ea 02 00	leaq	191120(%rip), %rsi ## literal pool for: "no initgroups"
10001dc10:	4c 89 ef	movq	%r13, %rdi
10001dc13:	e8 71 17 00 00	callq	0x10001f389
10001dc18:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dc1f:	48 c1 ea 2b	shrq	$43, %rdx
10001dc23:	83 e2 01	andl	$1, %edx
10001dc26:	48 8d 35 81 ea 02 00	leaq	191105(%rip), %rsi ## literal pool for: "start on fs mount"
10001dc2d:	4c 89 ef	movq	%r13, %rdi
10001dc30:	e8 54 17 00 00	callq	0x10001f389
10001dc35:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dc3c:	48 c1 ea 2c	shrq	$44, %rdx
10001dc40:	83 e2 01	andl	$1, %edx
10001dc43:	48 8d 35 76 ea 02 00	leaq	191094(%rip), %rsi ## literal pool for: "needs implicit endpoint"
10001dc4a:	4c 89 ef	movq	%r13, %rdi
10001dc4d:	e8 37 17 00 00	callq	0x10001f389
10001dc52:	0f b7 93 13 05 00 00	movzwl	1299(%rbx), %edx
10001dc59:	83 e2 01	andl	$1, %edx
10001dc5c:	48 8d 35 75 ea 02 00	leaq	191093(%rip), %rsi ## literal pool for: "is copy"
10001dc63:	4c 89 ef	movq	%r13, %rdi
10001dc66:	e8 1e 17 00 00	callq	0x10001f389
10001dc6b:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dc72:	48 c1 ea 32	shrq	$50, %rdx
10001dc76:	83 e2 01	andl	$1, %edx
10001dc79:	48 8d 35 60 ea 02 00	leaq	191072(%rip), %rsi ## literal pool for: "disallow all lookups"
10001dc80:	4c 89 ef	movq	%r13, %rdi
10001dc83:	e8 01 17 00 00	callq	0x10001f389
10001dc88:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dc8f:	48 c1 ea 33	shrq	$51, %rdx
10001dc93:	83 e2 01	andl	$1, %edx
10001dc96:	48 8d 35 58 ea 02 00	leaq	191064(%rip), %rsi ## literal pool for: "system service"
10001dc9d:	4c 89 ef	movq	%r13, %rdi
10001dca0:	e8 e4 16 00 00	callq	0x10001f389
10001dca5:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dcac:	48 c1 ea 34	shrq	$52, %rdx
10001dcb0:	83 e2 01	andl	$1, %edx
10001dcb3:	48 8d 35 4a ea 02 00	leaq	191050(%rip), %rsi ## literal pool for: "protected by submitter"
10001dcba:	4c 89 ef	movq	%r13, %rdi
10001dcbd:	e8 c7 16 00 00	callq	0x10001f389
10001dcc2:	0f b7 93 64 01 00 00	movzwl	356(%rbx), %edx
10001dcc9:	83 e2 20	andl	$32, %edx
10001dccc:	c1 ea 05	shrl	$5, %edx
10001dccf:	48 8d 35 cc c2 02 00	leaq	180940(%rip), %rsi ## literal pool for: "one-shot"
10001dcd6:	4c 89 ef	movq	%r13, %rdi
10001dcd9:	e8 ab 16 00 00	callq	0x10001f389
10001dcde:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dce5:	48 c1 ea 37	shrq	$55, %rdx
10001dce9:	83 e2 01	andl	$1, %edx
10001dcec:	48 8d 35 28 ea 02 00	leaq	191016(%rip), %rsi ## literal pool for: "use maximum address space limit (for sanitizers)"
10001dcf3:	4c 89 ef	movq	%r13, %rdi
10001dcf6:	e8 8e 16 00 00	callq	0x10001f389
10001dcfb:	0f b6 93 14 05 00 00	movzbl	1300(%rbx), %edx
10001dd02:	83 e2 01	andl	$1, %edx
10001dd05:	48 8d 35 40 ea 02 00	leaq	191040(%rip), %rsi ## literal pool for: "null bootstrap port"
10001dd0c:	4c 89 ef	movq	%r13, %rdi
10001dd0f:	e8 75 16 00 00	callq	0x10001f389
10001dd14:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dd1b:	48 c1 ea 39	shrq	$57, %rdx
10001dd1f:	83 e2 01	andl	$1, %edx
10001dd22:	48 8d 35 37 ea 02 00	leaq	191031(%rip), %rsi ## literal pool for: "exponential throttling"
10001dd29:	4c 89 ef	movq	%r13, %rdi
10001dd2c:	e8 58 16 00 00	callq	0x10001f389
10001dd31:	48 8b 93 0d 05 00 00	movq	1293(%rbx), %rdx
10001dd38:	48 c1 ea 3e	shrq	$62, %rdx
10001dd3c:	83 e2 01	andl	$1, %edx
10001dd3f:	48 8d 35 31 ea 02 00	leaq	191025(%rip), %rsi ## literal pool for: "abandon during shutdown"
10001dd46:	4c 89 ef	movq	%r13, %rdi
10001dd49:	e8 3b 16 00 00	callq	0x10001f389
10001dd4e:	4c 89 f7	movq	%r14, %rdi
10001dd51:	e8 17 b0 01 00	callq	0x100038d6d
10001dd56:	49 8b 4d 00	movq	(%r13), %rcx
10001dd5a:	48 8d 15 2e ea 02 00	leaq	191022(%rip), %rdx ## literal pool for: "properties = %s"
10001dd61:	4c 89 f7	movq	%r14, %rdi
10001dd64:	4c 89 fe	movq	%r15, %rsi
10001dd67:	31 c0	xorl	%eax, %eax
10001dd69:	e8 04 af 01 00	callq	0x100038c72
10001dd6e:	4c 89 ef	movq	%r13, %rdi
10001dd71:	e8 3b e3 fe ff	callq	0x10000c0b1
10001dd76:	48 8d 15 01 ad 02 00	leaq	175361(%rip), %rdx ## literal pool for: "}"
10001dd7d:	4c 89 f7	movq	%r14, %rdi
10001dd80:	48 8b b5 b8 fe ff ff	movq	-328(%rbp), %rsi
10001dd87:	31 c0	xorl	%eax, %eax
10001dd89:	e8 e4 ae 01 00	callq	0x100038c72
10001dd8e:	48 8b 05 93 a2 03 00	movq	238227(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001dd95:	48 8b 00	movq	(%rax), %rax
10001dd98:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10001dd9c:	0f 85 1b 01 00 00	jne	0x10001debd
10001dda2:	48 81 c4 48 01 00 00	addq	$328, %rsp
10001dda9:	5b	popq	%rbx
10001ddaa:	41 5c	popq	%r12
10001ddac:	41 5d	popq	%r13
10001ddae:	41 5e	popq	%r14
10001ddb0:	41 5f	popq	%r15
10001ddb2:	5d	popq	%rbp
10001ddb3:	c3	retq
10001ddb4:	f6 83 34 03 00 00 04	testb	$4, 820(%rbx)
10001ddbb:	48 8d 05 2f e4 02 00	leaq	189487(%rip), %rax ## literal pool for: "soft"
10001ddc2:	48 8d 0d 23 e4 02 00	leaq	189475(%rip), %rcx ## literal pool for: "hard"
10001ddc9:	48 0f 44 c8	cmoveq	%rax, %rcx
10001ddcd:	48 8d 15 ef e3 02 00	leaq	189423(%rip), %rdx ## literal pool for: "jetsam memory limit (active, %s) = %d MB"
10001ddd4:	4c 89 f7	movq	%r14, %rdi
10001ddd7:	4c 89 ee	movq	%r13, %rsi
10001ddda:	41 b8 ff ff ff ff	movl	$4294967295, %r8d
10001dde0:	e9 93 f5 ff ff	jmp	0x10001d378
10001dde5:	f6 83 34 03 00 00 08	testb	$8, 820(%rbx)
10001ddec:	48 8d 05 fe e3 02 00	leaq	189438(%rip), %rax ## literal pool for: "soft"
10001ddf3:	48 8d 0d f2 e3 02 00	leaq	189426(%rip), %rcx ## literal pool for: "hard"
10001ddfa:	48 0f 44 c8	cmoveq	%rax, %rcx
10001ddfe:	48 8d 15 32 e4 02 00	leaq	189490(%rip), %rdx ## literal pool for: "jetsam memory limit (inactive, %s) = %d MB"
10001de05:	4c 89 f7	movq	%r14, %rdi
10001de08:	4c 89 ee	movq	%r13, %rsi
10001de0b:	41 b8 ff ff ff ff	movl	$4294967295, %r8d
10001de11:	e9 ed f5 ff ff	jmp	0x10001d403
10001de16:	e8 b9 b5 01 00	callq	0x1000393d4
10001de1b:	4c 89 ef	movq	%r13, %rdi
10001de1e:	84 c0	testb	%al, %al
10001de20:	74 3b	je	0x10001de5d
10001de22:	e8 c9 b5 01 00	callq	0x1000393f0
10001de27:	89 c1	movl	%eax, %ecx
10001de29:	83 c1 c0	addl	$-64, %ecx
10001de2c:	83 f9 0e	cmpl	$14, %ecx
10001de2f:	77 41	ja	0x10001de72
10001de31:	89 c9	movl	%ecx, %ecx
10001de33:	48 8d 15 86 ce 03 00	leaq	249478(%rip), %rdx
10001de3a:	4c 8b 04 ca	movq	(%rdx,%rcx,8), %r8
10001de3e:	48 8d 15 79 e1 02 00	leaq	188793(%rip), %rdx ## literal pool for: "last exit code = %d: %s"
10001de45:	4c 89 f7	movq	%r14, %rdi
10001de48:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001de4f:	89 c1	movl	%eax, %ecx
10001de51:	31 c0	xorl	%eax, %eax
10001de53:	e8 1a ae 01 00	callq	0x100038c72
10001de58:	e9 27 ed ff ff	jmp	0x10001cb84
10001de5d:	e8 b8 b7 01 00	callq	0x10003961a
10001de62:	84 c0	testb	%al, %al
10001de64:	74 2b	je	0x10001de91
10001de66:	48 8d 15 7d e1 02 00	leaq	188797(%rip), %rdx ## literal pool for: "last exit code = (extension watchdogged)"
10001de6d:	e9 01 ed ff ff	jmp	0x10001cb73
10001de72:	48 8d 15 5d e1 02 00	leaq	188765(%rip), %rdx ## literal pool for: "last exit code = %d"
10001de79:	4c 89 f7	movq	%r14, %rdi
10001de7c:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001de83:	89 c1	movl	%eax, %ecx
10001de85:	31 c0	xorl	%eax, %eax
10001de87:	e8 e6 ad 01 00	callq	0x100038c72
10001de8c:	e9 f3 ec ff ff	jmp	0x10001cb84
10001de91:	4c 89 ef	movq	%r13, %rdi
10001de94:	e8 5e b4 01 00	callq	0x1000392f7
10001de99:	48 85 c0	testq	%rax, %rax
10001de9c:	48 8d 0d ee 96 02 00	leaq	169710(%rip), %rcx ## literal pool for: "(unknown)"
10001dea3:	48 0f 45 c8	cmovneq	%rax, %rcx
10001dea7:	48 8d 15 65 e1 02 00	leaq	188773(%rip), %rdx ## literal pool for: "last exit reason = %s"
10001deae:	4c 89 f7	movq	%r14, %rdi
10001deb1:	48 8b b5 c0 fe ff ff	movq	-320(%rbp), %rsi
10001deb8:	e9 12 f2 ff ff	jmp	0x10001d0cf
10001debd:	e8 b0 38 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001dec2:	55	pushq	%rbp
10001dec3:	48 89 e5	movq	%rsp, %rbp
10001dec6:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10001decd:	48 0f ba e0 26	btq	$38, %rax
10001ded2:	72 1c	jb	0x10001def0
10001ded4:	a8 02	testb	$2, %al
10001ded6:	75 21	jne	0x10001def9
10001ded8:	0f ba e0 0d	btl	$13, %eax
10001dedc:	72 42	jb	0x10001df20
10001dede:	83 bf 08 05 00 00 02	cmpl	$2, 1288(%rdi)
10001dee5:	75 42	jne	0x10001df29
10001dee7:	48 8d 05 ff 9a 02 00	leaq	170751(%rip), %rax ## literal pool for: "iOSAppOnMac"
10001deee:	eb 60	jmp	0x10001df50
10001def0:	48 8d 05 62 bf 02 00	leaq	180066(%rip), %rax ## literal pool for: "extension"
10001def7:	eb 57	jmp	0x10001df50
10001def9:	48 8b bf e8 00 00 00	movq	232(%rdi), %rdi
10001df00:	e8 57 d2 00 00	callq	0x10002b15c
10001df05:	48 3b 05 8c a1 03 00	cmpq	237964(%rip), %rax
10001df0c:	48 8d 0d bf bf 02 00	leaq	180159(%rip), %rcx ## literal pool for: "system xpcservice"
10001df13:	48 8d 05 ca bf 02 00	leaq	180170(%rip), %rax ## literal pool for: "xpcservice"
10001df1a:	48 0f 44 c1	cmoveq	%rcx, %rax
10001df1e:	eb 30	jmp	0x10001df50
10001df20:	48 8d 05 c8 bf 02 00	leaq	180168(%rip), %rax ## literal pool for: "system app"
10001df27:	eb 27	jmp	0x10001df50
10001df29:	0f ba e0 0c	btl	$12, %eax
10001df2d:	72 1a	jb	0x10001df49
10001df2f:	81 bf 20 03 00 00 00 07 00 00	cmpl	$1792, 800(%rdi)
10001df39:	48 8d 0d b9 9a 02 00	leaq	170681(%rip), %rcx ## literal pool for: "DriverKit"
10001df40:	48 8d 05 b7 bf 02 00	leaq	180151(%rip), %rax ## literal pool for: "daemon"
10001df47:	eb d1	jmp	0x10001df1a
10001df49:	48 8d 05 aa bf 02 00	leaq	180138(%rip), %rax ## literal pool for: "app"
10001df50:	5d	popq	%rbp
10001df51:	c3	retq
10001df52:	55	pushq	%rbp
10001df53:	48 89 e5	movq	%rsp, %rbp
10001df56:	41 57	pushq	%r15
10001df58:	41 56	pushq	%r14
10001df5a:	53	pushq	%rbx
10001df5b:	50	pushq	%rax
10001df5c:	49 89 f6	movq	%rsi, %r14
10001df5f:	48 8d 5a 01	leaq	1(%rdx), %rbx
10001df63:	4c 8d bf 18 05 00 00	leaq	1304(%rdi), %r15
10001df6a:	e8 53 ff ff ff	callq	0x10001dec2
10001df6f:	48 8d 15 8f bf 02 00	leaq	180111(%rip), %rdx ## literal pool for: "%s : %s"
10001df76:	4c 89 f7	movq	%r14, %rdi
10001df79:	48 89 de	movq	%rbx, %rsi
10001df7c:	4c 89 f9	movq	%r15, %rcx
10001df7f:	49 89 c0	movq	%rax, %r8
10001df82:	31 c0	xorl	%eax, %eax
10001df84:	48 83 c4 08	addq	$8, %rsp
10001df88:	5b	popq	%rbx
10001df89:	41 5e	popq	%r14
10001df8b:	41 5f	popq	%r15
10001df8d:	5d	popq	%rbp
10001df8e:	e9 df ac 01 00	jmp	0x100038c72
10001df93:	55	pushq	%rbp
10001df94:	48 89 e5	movq	%rsp, %rbp
10001df97:	41 57	pushq	%r15
10001df99:	41 56	pushq	%r14
10001df9b:	41 54	pushq	%r12
10001df9d:	53	pushq	%rbx
10001df9e:	48 83 ec 40	subq	$64, %rsp
10001dfa2:	49 89 f7	movq	%rsi, %r15
10001dfa5:	48 89 fb	movq	%rdi, %rbx
10001dfa8:	48 8b 05 79 a0 03 00	movq	237689(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001dfaf:	48 8b 00	movq	(%rax), %rax
10001dfb2:	48 89 45 d8	movq	%rax, -40(%rbp)
10001dfb6:	8b b7 18 01 00 00	movl	280(%rdi), %esi
10001dfbc:	85 f6	testl	%esi, %esi
10001dfbe:	0f 85 9a 01 00 00	jne	0x10001e15e
10001dfc4:	49 89 d6	movq	%rdx, %r14
10001dfc7:	49 bc aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %r12
10001dfd1:	4c 89 65 d0	movq	%r12, -48(%rbp)
10001dfd5:	0f 28 05 a4 52 02 00	movaps	152228(%rip), %xmm0
10001dfdc:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10001dfe0:	8b 8b c8 03 00 00	movl	968(%rbx), %ecx
10001dfe6:	85 c9	testl	%ecx, %ecx
10001dfe8:	74 20	je	0x10001e00a
10001dfea:	48 8d 15 1c bf 02 00	leaq	179996(%rip), %rdx ## literal pool for: "%d"
10001dff1:	48 8d 7d c0	leaq	-64(%rbp), %rdi
10001dff5:	be 18 00 00 00	movl	$24, %esi
10001dffa:	31 c0	xorl	%eax, %eax
10001dffc:	e8 01 3e 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001e001:	0f 28 05 78 52 02 00	movaps	152184(%rip), %xmm0
10001e008:	eb 06	jmp	0x10001e010
10001e00a:	66 c7 45 c0 30 00	movw	$48, -64(%rbp)
10001e010:	4c 89 65 b0	movq	%r12, -80(%rbp)
10001e014:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10001e018:	8b 83 f0 03 00 00	movl	1008(%rbx), %eax
10001e01e:	83 f8 02	cmpl	$2, %eax
10001e021:	74 1e	je	0x10001e041
10001e023:	83 f8 01	cmpl	$1, %eax
10001e026:	74 0c	je	0x10001e034
10001e028:	85 c0	testl	%eax, %eax
10001e02a:	75 22	jne	0x10001e04e
10001e02c:	66 c7 45 a0 2d 00	movw	$45, -96(%rbp)
10001e032:	eb 6b	jmp	0x10001e09f
10001e034:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e038:	c7 45 a0 28 61 62 29	movl	$694313256, -96(%rbp)
10001e03f:	eb 5e	jmp	0x10001e09f
10001e041:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e045:	c7 45 a0 28 66 72 29	movl	$695363112, -96(%rbp)
10001e04c:	eb 51	jmp	0x10001e09f
10001e04e:	4c 8d a3 f0 03 00 00	leaq	1008(%rbx), %r12
10001e055:	4c 89 e7	movq	%r12, %rdi
10001e058:	e8 77 b3 01 00	callq	0x1000393d4
10001e05d:	84 c0	testb	%al, %al
10001e05f:	74 11	je	0x10001e072
10001e061:	4c 89 e7	movq	%r12, %rdi
10001e064:	e8 87 b3 01 00	callq	0x1000393f0
10001e069:	48 8d 15 9d be 02 00	leaq	179869(%rip), %rdx ## literal pool for: "%d"
10001e070:	eb 1b	jmp	0x10001e08d
10001e072:	4c 89 e7	movq	%r12, %rdi
10001e075:	e8 10 b4 01 00	callq	0x10003948a
10001e07a:	84 c0	testb	%al, %al
10001e07c:	74 68	je	0x10001e0e6
10001e07e:	4c 89 e7	movq	%r12, %rdi
10001e081:	e8 36 b4 01 00	callq	0x1000394bc
10001e086:	48 8d 15 83 be 02 00	leaq	179843(%rip), %rdx ## literal pool for: "-%d"
10001e08d:	48 8d 7d a0	leaq	-96(%rbp), %rdi
10001e091:	be 18 00 00 00	movl	$24, %esi
10001e096:	89 c1	movl	%eax, %ecx
10001e098:	31 c0	xorl	%eax, %eax
10001e09a:	e8 63 3d 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10001e09f:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10001e0a6:	48 8d 15 69 be 02 00	leaq	179817(%rip), %rdx ## literal pool for: "%8s %6s \t%s"
10001e0ad:	48 8d 4d c0	leaq	-64(%rbp), %rcx
10001e0b1:	4c 8d 45 a0	leaq	-96(%rbp), %r8
10001e0b5:	4c 89 ff	movq	%r15, %rdi
10001e0b8:	4c 89 f6	movq	%r14, %rsi
10001e0bb:	49 89 d9	movq	%rbx, %r9
10001e0be:	31 c0	xorl	%eax, %eax
10001e0c0:	e8 ad ab 01 00	callq	0x100038c72
10001e0c5:	48 8b 05 5c 9f 03 00	movq	237404(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001e0cc:	48 8b 00	movq	(%rax), %rax
10001e0cf:	48 3b 45 d8	cmpq	-40(%rbp), %rax
10001e0d3:	0f 85 9d 00 00 00	jne	0x10001e176
10001e0d9:	48 83 c4 40	addq	$64, %rsp
10001e0dd:	5b	popq	%rbx
10001e0de:	41 5c	popq	%r12
10001e0e0:	41 5e	popq	%r14
10001e0e2:	41 5f	popq	%r15
10001e0e4:	5d	popq	%rbp
10001e0e5:	c3	retq
10001e0e6:	4c 89 e7	movq	%r12, %rdi
10001e0e9:	e8 66 b4 01 00	callq	0x100039554
10001e0ee:	84 c0	testb	%al, %al
10001e0f0:	74 19	je	0x10001e10b
10001e0f2:	4c 89 e7	movq	%r12, %rdi
10001e0f5:	e8 ae b4 01 00	callq	0x1000395a8
10001e0fa:	84 c0	testb	%al, %al
10001e0fc:	74 29	je	0x10001e127
10001e0fe:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e102:	c7 45 a0 28 70 65 29	movl	$694513704, -96(%rbp)
10001e109:	eb 94	jmp	0x10001e09f
10001e10b:	4c 89 e7	movq	%r12, %rdi
10001e10e:	e8 e9 b4 01 00	callq	0x1000395fc
10001e113:	84 c0	testb	%al, %al
10001e115:	74 20	je	0x10001e137
10001e117:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e11b:	c7 45 a0 28 63 73 29	movl	$695427880, -96(%rbp)
10001e122:	e9 78 ff ff ff	jmp	0x10001e09f
10001e127:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e12b:	c7 45 a0 28 6a 74 29	movl	$695495208, -96(%rbp)
10001e132:	e9 68 ff ff ff	jmp	0x10001e09f
10001e137:	4c 89 e7	movq	%r12, %rdi
10001e13a:	e8 93 b4 01 00	callq	0x1000395d2
10001e13f:	84 c0	testb	%al, %al
10001e141:	74 10	je	0x10001e153
10001e143:	c6 45 a4 00	movb	$0, -92(%rbp)
10001e147:	c7 45 a0 28 66 70 29	movl	$695232040, -96(%rbp)
10001e14e:	e9 4c ff ff ff	jmp	0x10001e09f
10001e153:	66 c7 45 a0 3f 00	movw	$63, -96(%rbp)
10001e159:	e9 41 ff ff ff	jmp	0x10001e09f
10001e15e:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10001e165:	48 8d 3d 50 57 02 00	leaq	153424(%rip), %rdi ## literal pool for: "unmanaged service given to service interface. pid: %d service: %s"
10001e16c:	48 89 da	movq	%rbx, %rdx
10001e16f:	31 c0	xorl	%eax, %eax
10001e171:	e8 9c 62 01 00	callq	0x100034412
10001e176:	e8 f7 35 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001e17b:	55	pushq	%rbp
10001e17c:	48 89 e5	movq	%rsp, %rbp
10001e17f:	41 56	pushq	%r14
10001e181:	53	pushq	%rbx
10001e182:	48 8b 9f 80 00 00 00	movq	128(%rdi), %rbx
10001e189:	48 85 db	testq	%rbx, %rbx
10001e18c:	74 23	je	0x10001e1b1
10001e18e:	49 89 f6	movq	%rsi, %r14
10001e191:	48 89 df	movq	%rbx, %rdi
10001e194:	e8 ad 39 01 00	callq	0x100031b46
10001e199:	48 89 c7	movq	%rax, %rdi
10001e19c:	4c 89 f6	movq	%r14, %rsi
10001e19f:	e8 88 3c 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
10001e1a4:	85 c0	testl	%eax, %eax
10001e1a6:	74 0b	je	0x10001e1b3
10001e1a8:	48 8b 5b 08	movq	8(%rbx), %rbx
10001e1ac:	48 85 db	testq	%rbx, %rbx
10001e1af:	75 e0	jne	0x10001e191
10001e1b1:	31 db	xorl	%ebx, %ebx
10001e1b3:	48 89 d8	movq	%rbx, %rax
10001e1b6:	5b	popq	%rbx
10001e1b7:	41 5e	popq	%r14
10001e1b9:	5d	popq	%rbp
10001e1ba:	c3	retq
10001e1bb:	55	pushq	%rbp
10001e1bc:	48 89 e5	movq	%rsp, %rbp
10001e1bf:	83 ff 10	cmpl	$16, %edi
10001e1c2:	73 0f	jae	0x10001e1d3
10001e1c4:	89 f8	movl	%edi, %eax
10001e1c6:	48 8d 0d 33 ca 03 00	leaq	248371(%rip), %rcx
10001e1cd:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
10001e1d1:	5d	popq	%rbp
10001e1d2:	c3	retq
10001e1d3:	e8 8b 23 02 00	callq	0x100040563
10001e1d8:	55	pushq	%rbp
10001e1d9:	48 89 e5	movq	%rsp, %rbp
10001e1dc:	89 b7 b4 03 00 00	movl	%esi, 948(%rdi)
10001e1e2:	5d	popq	%rbp
10001e1e3:	c3	retq
10001e1e4:	55	pushq	%rbp
10001e1e5:	48 89 e5	movq	%rsp, %rbp
10001e1e8:	8b 87 b4 03 00 00	movl	948(%rdi), %eax
10001e1ee:	85 c0	testl	%eax, %eax
10001e1f0:	0f 95 c1	setne	%cl
10001e1f3:	39 f0	cmpl	%esi, %eax
10001e1f5:	0f 95 c0	setne	%al
10001e1f8:	20 c8	andb	%cl, %al
10001e1fa:	5d	popq	%rbp
10001e1fb:	c3	retq
10001e1fc:	55	pushq	%rbp
10001e1fd:	48 89 e5	movq	%rsp, %rbp
10001e200:	41 56	pushq	%r14
10001e202:	53	pushq	%rbx
10001e203:	48 8b 9f b8 00 00 00	movq	184(%rdi), %rbx
10001e20a:	48 85 db	testq	%rbx, %rbx
10001e20d:	74 1f	je	0x10001e22e
10001e20f:	49 89 f6	movq	%rsi, %r14
10001e212:	48 8d b3 90 01 00 00	leaq	400(%rbx), %rsi
10001e219:	4c 89 f7	movq	%r14, %rdi
10001e21c:	e8 cb 3c 02 00	callq	0x100041eec ## symbol stub for: _uuid_compare
10001e221:	85 c0	testl	%eax, %eax
10001e223:	74 0b	je	0x10001e230
10001e225:	48 8b 5b 18	movq	24(%rbx), %rbx
10001e229:	48 85 db	testq	%rbx, %rbx
10001e22c:	75 e4	jne	0x10001e212
10001e22e:	31 db	xorl	%ebx, %ebx
10001e230:	48 89 d8	movq	%rbx, %rax
10001e233:	5b	popq	%rbx
10001e234:	41 5e	popq	%r14
10001e236:	5d	popq	%rbp
10001e237:	c3	retq
10001e238:	55	pushq	%rbp
10001e239:	48 89 e5	movq	%rsp, %rbp
10001e23c:	53	pushq	%rbx
10001e23d:	50	pushq	%rax
10001e23e:	48 89 fb	movq	%rdi, %rbx
10001e241:	bf 00 00 00 10	movl	$268435456, %edi
10001e246:	48 23 bb 0d 05 00 00	andq	1293(%rbx), %rdi
10001e24d:	75 26	jne	0x10001e275
10001e24f:	8b 83 00 05 00 00	movl	1280(%rbx), %eax
10001e255:	85 c0	testl	%eax, %eax
10001e257:	75 15	jne	0x10001e26e
10001e259:	bf 01 00 00 00	movl	$1, %edi
10001e25e:	31 f6	xorl	%esi, %esi
10001e260:	48 89 da	movq	%rbx, %rdx
10001e263:	e8 ea b9 fe ff	callq	0x100009c52
10001e268:	89 83 00 05 00 00	movl	%eax, 1280(%rbx)
10001e26e:	48 83 c4 08	addq	$8, %rsp
10001e272:	5b	popq	%rbx
10001e273:	5d	popq	%rbp
10001e274:	c3	retq
10001e275:	31 f6	xorl	%esi, %esi
10001e277:	e8 fc 22 02 00	callq	0x100040578
10001e27c:	55	pushq	%rbp
10001e27d:	48 89 e5	movq	%rsp, %rbp
10001e280:	53	pushq	%rbx
10001e281:	50	pushq	%rax
10001e282:	0f ba a7 0d 05 00 00 1c	btl	$28, 1293(%rdi)
10001e28a:	73 2c	jae	0x10001e2b8
10001e28c:	48 89 fb	movq	%rdi, %rbx
10001e28f:	8b bf 00 05 00 00	movl	1280(%rdi), %edi
10001e295:	85 ff	testl	%edi, %edi
10001e297:	74 18	je	0x10001e2b1
10001e299:	31 f6	xorl	%esi, %esi
10001e29b:	48 89 da	movq	%rbx, %rdx
10001e29e:	e8 ab ba fe ff	callq	0x100009d4e
10001e2a3:	85 c0	testl	%eax, %eax
10001e2a5:	75 16	jne	0x10001e2bd
10001e2a7:	c7 83 00 05 00 00 00 00 00 00	movl	$0, 1280(%rbx)
10001e2b1:	48 83 c4 08	addq	$8, %rsp
10001e2b5:	5b	popq	%rbx
10001e2b6:	5d	popq	%rbp
10001e2b7:	c3	retq
10001e2b8:	e8 db 22 02 00	callq	0x100040598
10001e2bd:	89 c7	movl	%eax, %edi
10001e2bf:	e8 e9 22 02 00	callq	0x1000405ad
10001e2c4:	55	pushq	%rbp
10001e2c5:	48 89 e5	movq	%rsp, %rbp
10001e2c8:	48 8b 87 0d 05 00 00	movq	1293(%rdi), %rax
10001e2cf:	48 c1 e8 3e	shrq	$62, %rax
10001e2d3:	83 e0 01	andl	$1, %eax
10001e2d6:	5d	popq	%rbp
10001e2d7:	c3	retq
10001e2d8:	55	pushq	%rbp
10001e2d9:	48 89 e5	movq	%rsp, %rbp
10001e2dc:	48 8b 47 08	movq	8(%rdi), %rax
10001e2e0:	48 85 c0	testq	%rax, %rax
10001e2e3:	74 14	je	0x10001e2f9
10001e2e5:	48 39 b8 68 03 00 00	cmpq	%rdi, 872(%rax)
10001e2ec:	75 1b	jne	0x10001e309
10001e2ee:	48 c7 80 68 03 00 00 00 00 00 00	movq	$0, 872(%rax)
10001e2f9:	48 8d 05 00 44 04 00	leaq	279552(%rip), %rax
10001e300:	48 8b 30	movq	(%rax), %rsi
10001e303:	5d	popq	%rbp
10001e304:	e9 25 31 fe ff	jmp	0x10000142e
10001e309:	e8 b5 22 02 00	callq	0x1000405c3
10001e30e:	55	pushq	%rbp
10001e30f:	48 89 e5	movq	%rsp, %rbp
10001e312:	41 57	pushq	%r15
10001e314:	41 56	pushq	%r14
10001e316:	53	pushq	%rbx
10001e317:	50	pushq	%rax
10001e318:	48 89 fb	movq	%rdi, %rbx
10001e31b:	4c 8b 77 28	movq	40(%rdi), %r14
10001e31f:	4c 8b 7f 18	movq	24(%rdi), %r15
10001e323:	8b 7f 10	movl	16(%rdi), %edi
10001e326:	4c 89 fe	movq	%r15, %rsi
10001e329:	e8 9c be 01 00	callq	0x10003a1ca
10001e32e:	4c 89 ff	movq	%r15, %rdi
10001e331:	e8 c6 3d 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001e336:	4c 89 f7	movq	%r14, %rdi
10001e339:	be 1c 00 00 00	movl	$28, %esi
10001e33e:	e8 0e 46 ff ff	callq	0x100012951
10001e343:	48 89 df	movq	%rbx, %rdi
10001e346:	48 83 c4 08	addq	$8, %rsp
10001e34a:	5b	popq	%rbx
10001e34b:	41 5e	popq	%r14
10001e34d:	41 5f	popq	%r15
10001e34f:	5d	popq	%rbp
10001e350:	e9 db 36 02 00	jmp	0x100041a30 ## symbol stub for: _free
10001e355:	55	pushq	%rbp
10001e356:	48 89 e5	movq	%rsp, %rbp
10001e359:	41 57	pushq	%r15
10001e35b:	41 56	pushq	%r14
10001e35d:	41 55	pushq	%r13
10001e35f:	41 54	pushq	%r12
10001e361:	53	pushq	%rbx
10001e362:	48 83 ec 68	subq	$104, %rsp
10001e366:	41 89 d5	movl	%edx, %r13d
10001e369:	49 89 f6	movq	%rsi, %r14
10001e36c:	48 89 fb	movq	%rdi, %rbx
10001e36f:	e8 6b 8e ff ff	callq	0x1000171df
10001e374:	41 89 c4	movl	%eax, %r12d
10001e377:	4d 89 e7	movq	%r12, %r15
10001e37a:	4d 29 f7	subq	%r14, %r15
10001e37d:	0f 86 43 01 00 00	jbe	0x10001e4c6
10001e383:	44 89 6d d4	movl	%r13d, -44(%rbp)
10001e387:	48 8d 15 24 be 02 00	leaq	179748(%rip), %rdx ## literal pool for: "Service only ran for %llu seconds. Pushing respawn out by %llu seconds."
10001e38e:	48 89 df	movq	%rbx, %rdi
10001e391:	be 05 00 00 00	movl	$5, %esi
10001e396:	4c 89 f1	movq	%r14, %rcx
10001e399:	4d 89 f8	movq	%r15, %r8
10001e39c:	31 c0	xorl	%eax, %eax
10001e39e:	e8 17 7c ff ff	callq	0x100015fba
10001e3a3:	44 3b a3 e4 02 00 00	cmpl	740(%rbx), %r12d
10001e3aa:	76 19	jbe	0x10001e3c5
10001e3ac:	48 8d 15 47 be 02 00	leaq	179783(%rip), %rdx ## literal pool for: "Exponential throttling is in effect for %llu seconds."
10001e3b3:	48 89 df	movq	%rbx, %rdi
10001e3b6:	be 04 00 00 00	movl	$4, %esi
10001e3bb:	4c 89 f9	movq	%r15, %rcx
10001e3be:	31 c0	xorl	%eax, %eax
10001e3c0:	e8 f5 7b ff ff	callq	0x100015fba
10001e3c5:	e8 30 01 ff ff	callq	0x10000e4fa
10001e3ca:	48 8b 3d a7 9c 03 00	movq	236711(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_timer
10001e3d1:	31 f6	xorl	%esi, %esi
10001e3d3:	31 d2	xorl	%edx, %edx
10001e3d5:	48 89 c1	movq	%rax, %rcx
10001e3d8:	e8 a5 35 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001e3dd:	49 89 c5	movq	%rax, %r13
10001e3e0:	49 69 f7 00 ca 9a 3b	imulq	$1000000000, %r15, %rsi
10001e3e7:	31 ff	xorl	%edi, %edi
10001e3e9:	e8 e8 35 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10001e3ee:	4c 89 ef	movq	%r13, %rdi
10001e3f1:	48 89 c6	movq	%rax, %rsi
10001e3f4:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10001e3fb:	31 c9	xorl	%ecx, %ecx
10001e3fd:	e8 bc 35 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10001e402:	48 89 df	movq	%rbx, %rdi
10001e405:	be 1f 00 00 00	movl	$31, %esi
10001e40a:	e8 bf 44 ff ff	callq	0x1000128ce
10001e40f:	48 8b 05 02 9c 03 00	movq	236546(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10001e416:	48 8d 75 a8	leaq	-88(%rbp), %rsi
10001e41a:	48 89 06	movq	%rax, (%rsi)
10001e41d:	b8 00 00 00 40	movl	$1073741824, %eax
10001e422:	48 89 46 08	movq	%rax, 8(%rsi)
10001e426:	48 8d 05 7e 01 00 00	leaq	382(%rip), %rax
10001e42d:	48 89 46 10	movq	%rax, 16(%rsi)
10001e431:	48 8d 05 48 c8 03 00	leaq	247880(%rip), %rax
10001e438:	48 89 46 18	movq	%rax, 24(%rsi)
10001e43c:	48 89 5e 20	movq	%rbx, 32(%rsi)
10001e440:	4c 89 ef	movq	%r13, %rdi
10001e443:	e8 58 35 02 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
10001e448:	48 8d b5 78 ff ff ff	leaq	-136(%rbp), %rsi
10001e44f:	48 8b 05 c2 9b 03 00	movq	236482(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10001e456:	48 89 06	movq	%rax, (%rsi)
10001e459:	b8 00 00 00 40	movl	$1073741824, %eax
10001e45e:	48 89 46 08	movq	%rax, 8(%rsi)
10001e462:	48 8d 05 ed 01 00 00	leaq	493(%rip), %rax
10001e469:	48 89 46 10	movq	%rax, 16(%rsi)
10001e46d:	48 8d 05 2c c8 03 00	leaq	247852(%rip), %rax
10001e474:	48 89 46 18	movq	%rax, 24(%rsi)
10001e478:	48 89 5e 20	movq	%rbx, 32(%rsi)
10001e47c:	4c 89 6e 28	movq	%r13, 40(%rsi)
10001e480:	4c 89 ef	movq	%r13, %rdi
10001e483:	e8 24 35 02 00	callq	0x1000419ac ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler
10001e488:	4c 89 ef	movq	%r13, %rdi
10001e48b:	e8 32 34 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001e490:	4c 89 ab d8 02 00 00	movq	%r13, 728(%rbx)
10001e497:	8b 45 d4	movl	-44(%rbp), %eax
10001e49a:	89 83 d4 02 00 00	movl	%eax, 724(%rbx)
10001e4a0:	48 89 df	movq	%rbx, %rdi
10001e4a3:	be 01 00 00 00	movl	$1, %esi
10001e4a8:	e8 2e 00 00 00	callq	0x10001e4db
10001e4ad:	48 8d 15 7c bd 02 00	leaq	179580(%rip), %rdx ## literal pool for: "service throttled by %llu seconds"
10001e4b4:	48 89 df	movq	%rbx, %rdi
10001e4b7:	be 05 00 00 00	movl	$5, %esi
10001e4bc:	4c 89 f9	movq	%r15, %rcx
10001e4bf:	31 c0	xorl	%eax, %eax
10001e4c1:	e8 f4 7a ff ff	callq	0x100015fba
10001e4c6:	4d 39 f4	cmpq	%r14, %r12
10001e4c9:	0f 97 c0	seta	%al
10001e4cc:	48 83 c4 68	addq	$104, %rsp
10001e4d0:	5b	popq	%rbx
10001e4d1:	41 5c	popq	%r12
10001e4d3:	41 5d	popq	%r13
10001e4d5:	41 5e	popq	%r14
10001e4d7:	41 5f	popq	%r15
10001e4d9:	5d	popq	%rbp
10001e4da:	c3	retq
10001e4db:	55	pushq	%rbp
10001e4dc:	48 89 e5	movq	%rsp, %rbp
10001e4df:	53	pushq	%rbx
10001e4e0:	50	pushq	%rax
10001e4e1:	8a 87 a0 01 00 00	movb	416(%rdi), %al
10001e4e7:	40 38 f0	cmpb	%sil, %al
10001e4ea:	75 07	jne	0x10001e4f3
10001e4ec:	48 83 c4 08	addq	$8, %rsp
10001e4f0:	5b	popq	%rbx
10001e4f1:	5d	popq	%rbp
10001e4f2:	c3	retq
10001e4f3:	48 89 fb	movq	%rdi, %rbx
10001e4f6:	3c 02	cmpb	$2, %al
10001e4f8:	75 11	jne	0x10001e50b
10001e4fa:	40 80 fe 03	cmpb	$3, %sil
10001e4fe:	0f 94 c0	sete	%al
10001e501:	40 84 f6	testb	%sil, %sil
10001e504:	0f 94 c1	sete	%cl
10001e507:	30 c1	xorb	%al, %cl
10001e509:	74 5d	je	0x10001e568
10001e50b:	40 88 b3 a0 01 00 00	movb	%sil, 416(%rbx)
10001e512:	40 80 fe 01	cmpb	$1, %sil
10001e516:	75 13	jne	0x10001e52b
10001e518:	48 89 df	movq	%rbx, %rdi
10001e51b:	31 f6	xorl	%esi, %esi
10001e51d:	31 d2	xorl	%edx, %edx
10001e51f:	e8 87 79 ff ff	callq	0x100015eab
10001e524:	40 8a b3 a0 01 00 00	movb	416(%rbx), %sil
10001e52b:	40 fe ce	decb	%sil
10001e52e:	40 80 fe 07	cmpb	$7, %sil
10001e532:	77 11	ja	0x10001e545
10001e534:	48 0f be c6	movsbq	%sil, %rax
10001e538:	48 8d 0d 21 ca 03 00	leaq	248353(%rip), %rcx
10001e53f:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
10001e543:	eb 07	jmp	0x10001e54c
10001e545:	48 8d 0d 94 bd 02 00	leaq	179604(%rip), %rcx ## literal pool for: "not running"
10001e54c:	48 8d 15 7b bd 02 00	leaq	179579(%rip), %rdx ## literal pool for: "service state: %s"
10001e553:	48 89 df	movq	%rbx, %rdi
10001e556:	be 05 00 00 00	movl	$5, %esi
10001e55b:	31 c0	xorl	%eax, %eax
10001e55d:	48 83 c4 08	addq	$8, %rsp
10001e561:	5b	popq	%rbx
10001e562:	5d	popq	%rbp
10001e563:	e9 52 7a ff ff	jmp	0x100015fba
10001e568:	31 c0	xorl	%eax, %eax
10001e56a:	40 84 f6	testb	%sil, %sil
10001e56d:	0f 94 c0	sete	%al
10001e570:	31 ff	xorl	%edi, %edi
10001e572:	40 80 fe 03	cmpb	$3, %sil
10001e576:	40 0f 94 c7	sete	%dil
10001e57a:	89 c6	movl	%eax, %esi
10001e57c:	e8 57 20 02 00	callq	0x1000405d8
10001e581:	55	pushq	%rbp
10001e582:	48 89 e5	movq	%rsp, %rbp
10001e585:	8a 87 a0 01 00 00	movb	416(%rdi), %al
10001e58b:	fe c8	decb	%al
10001e58d:	3c 07	cmpb	$7, %al
10001e58f:	77 11	ja	0x10001e5a2
10001e591:	48 0f be c0	movsbq	%al, %rax
10001e595:	48 8d 0d c4 c9 03 00	leaq	248260(%rip), %rcx
10001e59c:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
10001e5a0:	eb 07	jmp	0x10001e5a9
10001e5a2:	48 8d 05 37 bd 02 00	leaq	179511(%rip), %rax ## literal pool for: "not running"
10001e5a9:	5d	popq	%rbp
10001e5aa:	c3	retq
10001e5ab:	55	pushq	%rbp
10001e5ac:	48 89 e5	movq	%rsp, %rbp
10001e5af:	41 56	pushq	%r14
10001e5b1:	53	pushq	%rbx
10001e5b2:	48 8b 5f 20	movq	32(%rdi), %rbx
10001e5b6:	48 8b bb d8 02 00 00	movq	728(%rbx), %rdi
10001e5bd:	e8 ba 33 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001e5c2:	48 c7 83 d8 02 00 00 00 00 00 00	movq	$0, 728(%rbx)
10001e5cd:	80 8b 0f 05 00 00 04	orb	$4, 1295(%rbx)
10001e5d4:	8b b3 d4 02 00 00	movl	724(%rbx), %esi
10001e5da:	c7 83 d4 02 00 00 00 00 00 00	movl	$0, 724(%rbx)
10001e5e4:	48 89 df	movq	%rbx, %rdi
10001e5e7:	e8 ad 7a ff ff	callq	0x100016099
10001e5ec:	41 89 c6	movl	%eax, %r14d
10001e5ef:	48 8d 15 5c bc 02 00	leaq	179292(%rip), %rdx ## literal pool for: "deferred event: domain spawn response: %d"
10001e5f6:	48 89 df	movq	%rbx, %rdi
10001e5f9:	be 05 00 00 00	movl	$5, %esi
10001e5fe:	89 c1	movl	%eax, %ecx
10001e600:	31 c0	xorl	%eax, %eax
10001e602:	e8 b3 79 ff ff	callq	0x100015fba
10001e607:	45 85 f6	testl	%r14d, %r14d
10001e60a:	74 37	je	0x10001e643
10001e60c:	41 83 fe 24	cmpl	$36, %r14d
10001e610:	74 31	je	0x10001e643
10001e612:	41 81 fe 8b 00 00 00	cmpl	$139, %r14d
10001e619:	74 2d	je	0x10001e648
10001e61b:	44 89 f7	movl	%r14d, %edi
10001e61e:	e8 eb 3a 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001e623:	48 8d 15 7b bc 02 00	leaq	179323(%rip), %rdx ## literal pool for: "Deferred spawn of service failed: %d: %s"
10001e62a:	48 89 df	movq	%rbx, %rdi
10001e62d:	be 03 00 00 00	movl	$3, %esi
10001e632:	44 89 f1	movl	%r14d, %ecx
10001e635:	49 89 c0	movq	%rax, %r8
10001e638:	31 c0	xorl	%eax, %eax
10001e63a:	5b	popq	%rbx
10001e63b:	41 5e	popq	%r14
10001e63d:	5d	popq	%rbp
10001e63e:	e9 77 79 ff ff	jmp	0x100015fba
10001e643:	5b	popq	%rbx
10001e644:	41 5e	popq	%r14
10001e646:	5d	popq	%rbp
10001e647:	c3	retq
10001e648:	48 8d 3d 2d bc 02 00	leaq	179245(%rip), %rdi ## literal pool for: "deferral event on service in penalty box"
10001e64f:	31 c0	xorl	%eax, %eax
10001e651:	e8 bc 5d 01 00	callq	0x100034412
10001e656:	55	pushq	%rbp
10001e657:	48 89 e5	movq	%rsp, %rbp
10001e65a:	53	pushq	%rbx
10001e65b:	50	pushq	%rax
10001e65c:	48 89 fb	movq	%rdi, %rbx
10001e65f:	48 8b 7f 20	movq	32(%rdi), %rdi
10001e663:	be 1f 00 00 00	movl	$31, %esi
10001e668:	e8 e4 42 ff ff	callq	0x100012951
10001e66d:	48 8b 7b 28	movq	40(%rbx), %rdi
10001e671:	48 83 c4 08	addq	$8, %rsp
10001e675:	5b	popq	%rbx
10001e676:	5d	popq	%rbp
10001e677:	e9 dc 32 02 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10001e67c:	55	pushq	%rbp
10001e67d:	48 89 e5	movq	%rsp, %rbp
10001e680:	48 8b 3f	movq	(%rdi), %rdi
10001e683:	0f b7 87 e8 03 00 00	movzwl	1000(%rdi), %eax
10001e68a:	a8 10	testb	$16, %al
10001e68c:	75 17	jne	0x10001e6a5
10001e68e:	83 c8 10	orl	$16, %eax
10001e691:	66 89 87 e8 03 00 00	movw	%ax, 1000(%rdi)
10001e698:	be 02 00 00 00	movl	$2, %esi
10001e69d:	31 d2	xorl	%edx, %edx
10001e69f:	5d	popq	%rbp
10001e6a0:	e9 06 78 ff ff	jmp	0x100015eab
10001e6a5:	48 8d 3d 8f bd 02 00	leaq	179599(%rip), %rdi ## literal pool for: "proc source registration handler invoked twice"
10001e6ac:	31 c0	xorl	%eax, %eax
10001e6ae:	e8 5f 5d 01 00	callq	0x100034412
10001e6b3:	55	pushq	%rbp
10001e6b4:	48 89 e5	movq	%rsp, %rbp
10001e6b7:	5d	popq	%rbp
10001e6b8:	e9 6f 42 ff ff	jmp	0x10001292c
10001e6bd:	55	pushq	%rbp
10001e6be:	48 89 e5	movq	%rsp, %rbp
10001e6c1:	41 57	pushq	%r15
10001e6c3:	41 56	pushq	%r14
10001e6c5:	53	pushq	%rbx
10001e6c6:	50	pushq	%rax
10001e6c7:	48 89 fb	movq	%rdi, %rbx
10001e6ca:	0f b7 87 e8 03 00 00	movzwl	1000(%rdi), %eax
10001e6d1:	84 c0	testb	%al, %al
10001e6d3:	78 62	js	0x10001e737
10001e6d5:	41 89 d7	movl	%edx, %r15d
10001e6d8:	41 89 f6	movl	%esi, %r14d
10001e6db:	0d 80 00 00 00	orl	$128, %eax
10001e6e0:	66 89 83 e8 03 00 00	movw	%ax, 1000(%rbx)
10001e6e7:	48 0f ba a3 0d 05 00 00 28	btq	$40, 1293(%rbx)
10001e6f0:	73 08	jae	0x10001e6fa
10001e6f2:	48 89 df	movq	%rbx, %rdi
10001e6f5:	e8 59 cd ff ff	callq	0x10001b453
10001e6fa:	41 83 fe 6f	cmpl	$111, %r14d
10001e6fe:	75 57	jne	0x10001e757
10001e700:	41 83 ff 4b	cmpl	$75, %r15d
10001e704:	74 51	je	0x10001e757
10001e706:	48 0f ba a3 0d 05 00 00 31	btq	$49, 1293(%rbx)
10001e70f:	72 4b	jb	0x10001e75c
10001e711:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
10001e718:	4c 8b 83 58 02 00 00	movq	600(%rbx), %r8
10001e71f:	48 8d 15 4d be 02 00	leaq	179789(%rip), %rdx ## literal pool for: "Missing executable detected. Job: '%s' Executable: '%s'"
10001e726:	48 89 df	movq	%rbx, %rdi
10001e729:	be 03 00 01 00	movl	$65539, %esi
10001e72e:	31 c0	xorl	%eax, %eax
10001e730:	e8 85 78 ff ff	callq	0x100015fba
10001e735:	eb 25	jmp	0x10001e75c
10001e737:	48 8d 15 0f be 02 00	leaq	179727(%rip), %rdx ## literal pool for: "already handled failed init, ignoring"
10001e73e:	48 89 df	movq	%rbx, %rdi
10001e741:	be 05 00 00 00	movl	$5, %esi
10001e746:	31 c0	xorl	%eax, %eax
10001e748:	48 83 c4 08	addq	$8, %rsp
10001e74c:	5b	popq	%rbx
10001e74d:	41 5e	popq	%r14
10001e74f:	41 5f	popq	%r15
10001e751:	5d	popq	%rbp
10001e752:	e9 63 78 ff ff	jmp	0x100015fba
10001e757:	45 85 f6	testl	%r14d, %r14d
10001e75a:	74 22	je	0x10001e77e
10001e75c:	49 63 d6	movslq	%r14d, %rdx
10001e75f:	48 89 df	movq	%rbx, %rdi
10001e762:	be 04 00 00 00	movl	$4, %esi
10001e767:	e8 3f 77 ff ff	callq	0x100015eab
10001e76c:	48 89 df	movq	%rbx, %rdi
10001e76f:	48 83 c4 08	addq	$8, %rsp
10001e773:	5b	popq	%rbx
10001e774:	41 5e	popq	%r14
10001e776:	41 5f	popq	%r15
10001e778:	5d	popq	%rbp
10001e779:	e9 05 00 00 00	jmp	0x10001e783
10001e77e:	e8 6d 1e 02 00	callq	0x1000405f0
10001e783:	55	pushq	%rbp
10001e784:	48 89 e5	movq	%rsp, %rbp
10001e787:	53	pushq	%rbx
10001e788:	50	pushq	%rax
10001e789:	48 89 fb	movq	%rdi, %rbx
10001e78c:	48 8b bf a8 04 00 00	movq	1192(%rdi), %rdi
10001e793:	e8 98 32 02 00	callq	0x100041a30 ## symbol stub for: _free
10001e798:	48 c7 83 a8 04 00 00 00 00 00 00	movq	$0, 1192(%rbx)
10001e7a3:	48 8b bb b0 04 00 00	movq	1200(%rbx), %rdi
10001e7aa:	48 85 ff	testq	%rdi, %rdi
10001e7ad:	74 10	je	0x10001e7bf
10001e7af:	e8 48 39 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001e7b4:	48 c7 83 b0 04 00 00 00 00 00 00	movq	$0, 1200(%rbx)
10001e7bf:	48 8b bb b8 04 00 00	movq	1208(%rbx), %rdi
10001e7c6:	e8 65 32 02 00	callq	0x100041a30 ## symbol stub for: _free
10001e7cb:	48 c7 83 b8 04 00 00 00 00 00 00	movq	$0, 1208(%rbx)
10001e7d6:	48 8b bb c0 04 00 00	movq	1216(%rbx), %rdi
10001e7dd:	48 85 ff	testq	%rdi, %rdi
10001e7e0:	74 10	je	0x10001e7f2
10001e7e2:	e8 15 39 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001e7e7:	48 c7 83 c0 04 00 00 00 00 00 00	movq	$0, 1216(%rbx)
10001e7f2:	48 8b bb c8 04 00 00	movq	1224(%rbx), %rdi
10001e7f9:	e8 32 32 02 00	callq	0x100041a30 ## symbol stub for: _free
10001e7fe:	48 c7 83 c8 04 00 00 00 00 00 00	movq	$0, 1224(%rbx)
10001e809:	48 8b bb d8 04 00 00	movq	1240(%rbx), %rdi
10001e810:	48 85 ff	testq	%rdi, %rdi
10001e813:	74 10	je	0x10001e825
10001e815:	e8 e2 38 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001e81a:	48 c7 83 d8 04 00 00 00 00 00 00	movq	$0, 1240(%rbx)
10001e825:	8b bb d0 04 00 00	movl	1232(%rbx), %edi
10001e82b:	85 ff	testl	%edi, %edi
10001e82d:	74 13	je	0x10001e842
10001e82f:	e8 05 b5 fe ff	callq	0x100009d39
10001e834:	85 c0	testl	%eax, %eax
10001e836:	75 2d	jne	0x10001e865
10001e838:	c7 83 d0 04 00 00 00 00 00 00	movl	$0, 1232(%rbx)
10001e842:	66 c7 83 e8 04 00 00 00 00	movw	$0, 1256(%rbx)
10001e84b:	b8 ff ff ff ff	movl	$4294967295, %eax
10001e850:	48 89 83 e0 04 00 00	movq	%rax, 1248(%rbx)
10001e857:	80 a3 ea 04 00 00 e8	andb	$-24, 1258(%rbx)
10001e85e:	48 83 c4 08	addq	$8, %rsp
10001e862:	5b	popq	%rbx
10001e863:	5d	popq	%rbp
10001e864:	c3	retq
10001e865:	48 63 d0	movslq	%eax, %rdx
10001e868:	48 8d 3d 98 9a ff ff	leaq	-25960(%rip), %rdi
10001e86f:	48 89 de	movq	%rbx, %rsi
10001e872:	e8 31 2f 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001e877:	eb bf	jmp	0x10001e838
10001e879:	55	pushq	%rbp
10001e87a:	48 89 e5	movq	%rsp, %rbp
10001e87d:	41 56	pushq	%r14
10001e87f:	53	pushq	%rbx
10001e880:	48 89 fb	movq	%rdi, %rbx
10001e883:	8b bf c8 03 00 00	movl	968(%rdi), %edi
10001e889:	e8 a9 68 01 00	callq	0x100035137
10001e88e:	84 c0	testb	%al, %al
10001e890:	75 09	jne	0x10001e89b
10001e892:	f6 83 e8 03 00 00 0c	testb	$12, 1000(%rbx)
10001e899:	74 1a	je	0x10001e8b5
10001e89b:	48 8d 15 9c c0 02 00	leaq	180380(%rip), %rdx ## literal pool for: "service is being debugged, not timing out launch"
10001e8a2:	48 89 df	movq	%rbx, %rdi
10001e8a5:	be 05 00 00 00	movl	$5, %esi
10001e8aa:	31 c0	xorl	%eax, %eax
10001e8ac:	5b	popq	%rbx
10001e8ad:	41 5e	popq	%r14
10001e8af:	5d	popq	%rbp
10001e8b0:	e9 05 77 ff ff	jmp	0x100015fba
10001e8b5:	48 83 bb f0 02 00 00 00	cmpq	$0, 752(%rbx)
10001e8bd:	74 30	je	0x10001e8ef
10001e8bf:	48 89 df	movq	%rbx, %rdi
10001e8c2:	be 24 00 00 00	movl	$36, %esi
10001e8c7:	e8 be 43 ff ff	callq	0x100012c8a
10001e8cc:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
10001e8d3:	e8 a4 30 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001e8d8:	48 8b bb f0 02 00 00	movq	752(%rbx), %rdi
10001e8df:	e8 74 30 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001e8e4:	48 c7 83 f0 02 00 00 00 00 00 00	movq	$0, 752(%rbx)
10001e8ef:	48 8d 15 79 c0 02 00	leaq	180345(%rip), %rdx ## literal pool for: "Extension is hanging on launch. Killing."
10001e8f6:	48 89 df	movq	%rbx, %rdi
10001e8f9:	be 04 00 00 00	movl	$4, %esi
10001e8fe:	31 c0	xorl	%eax, %eax
10001e900:	e8 b5 76 ff ff	callq	0x100015fba
10001e905:	48 8d 15 8c c0 02 00	leaq	180364(%rip), %rdx ## literal pool for: "killing extension hanging on launch"
10001e90c:	48 89 df	movq	%rbx, %rdi
10001e90f:	be 05 00 00 00	movl	$5, %esi
10001e914:	31 c0	xorl	%eax, %eax
10001e916:	e8 9f 76 ff ff	callq	0x100015fba
10001e91b:	48 89 df	movq	%rbx, %rdi
10001e91e:	be 02 00 00 00	movl	$2, %esi
10001e923:	e8 e2 c7 ff ff	callq	0x10001b10a
10001e928:	41 89 c6	movl	%eax, %r14d
10001e92b:	83 f8 25	cmpl	$37, %eax
10001e92e:	77 18	ja	0x10001e948
10001e930:	44 89 f0	movl	%r14d, %eax
10001e933:	48 b9 09 00 00 00 20 00 00 00	movabsq	$137438953481, %rcx
10001e93d:	48 0f a3 c1	btq	%rax, %rcx
10001e941:	73 05	jae	0x10001e948
10001e943:	5b	popq	%rbx
10001e944:	41 5e	popq	%r14
10001e946:	5d	popq	%rbp
10001e947:	c3	retq
10001e948:	44 89 f7	movl	%r14d, %edi
10001e94b:	e8 ee 34 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001e950:	48 8d 15 65 c0 02 00	leaq	180325(%rip), %rdx ## literal pool for: "Failed to kill hanging extension: %d: %s"
10001e957:	48 89 df	movq	%rbx, %rdi
10001e95a:	be 04 00 00 00	movl	$4, %esi
10001e95f:	44 89 f1	movl	%r14d, %ecx
10001e962:	49 89 c0	movq	%rax, %r8
10001e965:	31 c0	xorl	%eax, %eax
10001e967:	5b	popq	%rbx
10001e968:	41 5e	popq	%r14
10001e96a:	5d	popq	%rbp
10001e96b:	e9 4a 76 ff ff	jmp	0x100015fba
10001e970:	55	pushq	%rbp
10001e971:	48 89 e5	movq	%rsp, %rbp
10001e974:	41 57	pushq	%r15
10001e976:	41 56	pushq	%r14
10001e978:	53	pushq	%rbx
10001e979:	48 83 ec 28	subq	$40, %rsp
10001e97d:	49 89 f6	movq	%rsi, %r14
10001e980:	49 89 ff	movq	%rdi, %r15
10001e983:	48 8d 35 ae c0 02 00	leaq	180398(%rip), %rsi ## literal pool for: "self"
10001e98a:	e8 a7 36 02 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10001e98f:	84 c0	testb	%al, %al
10001e991:	74 47	je	0x10001e9da
10001e993:	0f 28 05 e6 48 02 00	movaps	149734(%rip), %xmm0
10001e99a:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10001e99e:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10001e9a2:	0f 29 03	movaps	%xmm0, (%rbx)
10001e9a5:	4c 89 ff	movq	%r15, %rdi
10001e9a8:	48 89 de	movq	%rbx, %rsi
10001e9ab:	e8 80 36 02 00	callq	0x100042030 ## symbol stub for: _xpc_dictionary_get_audit_token
10001e9b0:	8b 7b 14	movl	20(%rbx), %edi
10001e9b3:	e8 0e c3 ff ff	callq	0x10001acc6
10001e9b8:	48 85 c0	testq	%rax, %rax
10001e9bb:	74 4e	je	0x10001ea0b
10001e9bd:	48 89 c3	movq	%rax, %rbx
10001e9c0:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
10001e9c7:	4c 89 fe	movq	%r15, %rsi
10001e9ca:	e8 39 c7 00 00	callq	0x10002b108
10001e9cf:	b9 24 00 00 00	movl	$36, %ecx
10001e9d4:	84 c0	testb	%al, %al
10001e9d6:	74 38	je	0x10001ea10
10001e9d8:	eb 3b	jmp	0x10001ea15
10001e9da:	48 8d 35 5c c0 02 00	leaq	180316(%rip), %rsi ## literal pool for: "service-port"
10001e9e1:	4c 89 ff	movq	%r15, %rdi
10001e9e4:	e8 83 36 02 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10001e9e9:	48 85 c0	testq	%rax, %rax
10001e9ec:	74 67	je	0x10001ea55
10001e9ee:	48 89 c3	movq	%rax, %rbx
10001e9f1:	48 89 c7	movq	%rax, %rdi
10001e9f4:	e8 cd 36 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001e9f9:	48 3b 05 18 97 03 00	cmpq	235288(%rip), %rax ## literal pool symbol address: __xpc_type_mach_send
10001ea00:	74 21	je	0x10001ea23
10001ea02:	41 c7 06 16 00 00 00	movl	$22, (%r14)
10001ea09:	eb 08	jmp	0x10001ea13
10001ea0b:	b9 87 00 00 00	movl	$135, %ecx
10001ea10:	41 89 0e	movl	%ecx, (%r14)
10001ea13:	31 db	xorl	%ebx, %ebx
10001ea15:	48 89 d8	movq	%rbx, %rax
10001ea18:	48 83 c4 28	addq	$40, %rsp
10001ea1c:	5b	popq	%rbx
10001ea1d:	41 5e	popq	%r14
10001ea1f:	41 5f	popq	%r15
10001ea21:	5d	popq	%rbp
10001ea22:	c3	retq
10001ea23:	48 89 df	movq	%rbx, %rdi
10001ea26:	e8 bf 36 02 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10001ea2b:	8d 48 01	leal	1(%rax), %ecx
10001ea2e:	83 f9 02	cmpl	$2, %ecx
10001ea31:	72 22	jb	0x10001ea55
10001ea33:	89 c7	movl	%eax, %edi
10001ea35:	e8 0f c2 00 00	callq	0x10002ac49
10001ea3a:	48 85 c0	testq	%rax, %rax
10001ea3d:	0f 84 99 00 00 00	je	0x10001eadc
10001ea43:	48 89 c7	movq	%rax, %rdi
10001ea46:	48 83 c4 28	addq	$40, %rsp
10001ea4a:	5b	popq	%rbx
10001ea4b:	41 5e	popq	%r14
10001ea4d:	41 5f	popq	%r15
10001ea4f:	5d	popq	%rbp
10001ea50:	e9 77 cc 01 00	jmp	0x10003b6cc
10001ea55:	48 8d 35 39 be 02 00	leaq	179769(%rip), %rsi ## literal pool for: "pid"
10001ea5c:	4c 89 ff	movq	%r15, %rdi
10001ea5f:	e8 ea 35 02 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
10001ea64:	85 c0	testl	%eax, %eax
10001ea66:	74 18	je	0x10001ea80
10001ea68:	89 c7	movl	%eax, %edi
10001ea6a:	e8 57 c2 ff ff	callq	0x10001acc6
10001ea6f:	48 89 c3	movq	%rax, %rbx
10001ea72:	48 85 c0	testq	%rax, %rax
10001ea75:	75 9e	jne	0x10001ea15
10001ea77:	41 c7 06 71 00 00 00	movl	$113, (%r14)
10001ea7e:	eb 93	jmp	0x10001ea13
10001ea80:	4c 89 ff	movq	%r15, %rdi
10001ea83:	be 01 00 00 00	movl	$1, %esi
10001ea88:	4c 89 f2	movq	%r14, %rdx
10001ea8b:	e8 8e c5 00 00	callq	0x10002b01e
10001ea90:	48 85 c0	testq	%rax, %rax
10001ea93:	0f 84 7a ff ff ff	je	0x10001ea13
10001ea99:	48 89 c3	movq	%rax, %rbx
10001ea9c:	48 89 c7	movq	%rax, %rdi
10001ea9f:	4c 89 fe	movq	%r15, %rsi
10001eaa2:	e8 61 c6 00 00	callq	0x10002b108
10001eaa7:	84 c0	testb	%al, %al
10001eaa9:	74 25	je	0x10001ead0
10001eaab:	48 8d 35 4b b1 02 00	leaq	176459(%rip), %rsi ## literal pool for: "name"
10001eab2:	4c 89 ff	movq	%r15, %rdi
10001eab5:	e8 a0 35 02 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10001eaba:	48 85 c0	testq	%rax, %rax
10001eabd:	0f 84 3f ff ff ff	je	0x10001ea02
10001eac3:	48 89 df	movq	%rbx, %rdi
10001eac6:	48 89 c6	movq	%rax, %rsi
10001eac9:	e8 53 57 00 00	callq	0x100024221
10001eace:	eb 9f	jmp	0x10001ea6f
10001ead0:	41 c7 06 24 00 00 00	movl	$36, (%r14)
10001ead7:	e9 37 ff ff ff	jmp	0x10001ea13
10001eadc:	41 c7 06 87 00 00 00	movl	$135, (%r14)
10001eae3:	e9 2b ff ff ff	jmp	0x10001ea13
10001eae8:	55	pushq	%rbp
10001eae9:	48 89 e5	movq	%rsp, %rbp
10001eaec:	41 57	pushq	%r15
10001eaee:	41 56	pushq	%r14
10001eaf0:	41 54	pushq	%r12
10001eaf2:	53	pushq	%rbx
10001eaf3:	41 89 d7	movl	%edx, %r15d
10001eaf6:	49 89 f4	movq	%rsi, %r12
10001eaf9:	49 89 fe	movq	%rdi, %r14
10001eafc:	bf 30 00 00 00	movl	$48, %edi
10001eb01:	e8 df e9 fe ff	callq	0x10000d4e5
10001eb06:	48 89 c3	movq	%rax, %rbx
10001eb09:	4c 89 e7	movq	%r12, %rdi
10001eb0c:	e8 f1 35 02 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10001eb11:	48 89 43 18	movq	%rax, 24(%rbx)
10001eb15:	44 89 7b 20	movl	%r15d, 32(%rbx)
10001eb19:	49 8b 86 f8 01 00 00	movq	504(%r14), %rax
10001eb20:	49 81 c6 f8 01 00 00	addq	$504, %r14
10001eb27:	48 89 03	movq	%rax, (%rbx)
10001eb2a:	48 85 c0	testq	%rax, %rax
10001eb2d:	74 04	je	0x10001eb33
10001eb2f:	48 89 58 08	movq	%rbx, 8(%rax)
10001eb33:	49 89 1e	movq	%rbx, (%r14)
10001eb36:	4c 89 73 08	movq	%r14, 8(%rbx)
10001eb3a:	5b	popq	%rbx
10001eb3b:	41 5c	popq	%r12
10001eb3d:	41 5e	popq	%r14
10001eb3f:	41 5f	popq	%r15
10001eb41:	5d	popq	%rbp
10001eb42:	c3	retq
10001eb43:	55	pushq	%rbp
10001eb44:	48 89 e5	movq	%rsp, %rbp
10001eb47:	41 57	pushq	%r15
10001eb49:	41 56	pushq	%r14
10001eb4b:	41 55	pushq	%r13
10001eb4d:	41 54	pushq	%r12
10001eb4f:	53	pushq	%rbx
10001eb50:	48 81 ec 88 00 00 00	subq	$136, %rsp
10001eb57:	48 8b 05 ca 94 03 00	movq	234698(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001eb5e:	48 8b 00	movq	(%rax), %rax
10001eb61:	48 89 45 d0	movq	%rax, -48(%rbp)
10001eb65:	83 fa 7c	cmpl	$124, %edx
10001eb68:	0f 84 37 01 00 00	je	0x10001eca5
10001eb6e:	41 89 d4	movl	%edx, %r12d
10001eb71:	48 89 f3	movq	%rsi, %rbx
10001eb74:	49 89 ff	movq	%rdi, %r15
10001eb77:	48 89 8d 58 ff ff ff	movq	%rcx, -168(%rbp)
10001eb7e:	b8 03 00 00 00	movl	$3, %eax
10001eb83:	81 fa 96 00 00 00	cmpl	$150, %edx
10001eb89:	75 05	jne	0x10001eb90
10001eb8b:	b8 03 00 01 00	movl	$65539, %eax
10001eb90:	89 85 78 ff ff ff	movl	%eax, -136(%rbp)
10001eb96:	0f 28 05 e3 46 02 00	movaps	149219(%rip), %xmm0
10001eb9d:	48 8d 75 90	leaq	-112(%rbp), %rsi
10001eba1:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10001eba5:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10001eba9:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10001ebad:	0f 29 06	movaps	%xmm0, (%rsi)
10001ebb0:	48 89 df	movq	%rbx, %rdi
10001ebb3:	e8 a5 5c 01 00	callq	0x10003485d
10001ebb8:	49 89 c5	movq	%rax, %r13
10001ebbb:	48 89 85 60 ff ff ff	movq	%rax, -160(%rbp)
10001ebc2:	8b 43 14	movl	20(%rbx), %eax
10001ebc5:	89 85 74 ff ff ff	movl	%eax, -140(%rbp)
10001ebcb:	44 89 e7	movl	%r12d, %edi
10001ebce:	e8 3b 35 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001ebd3:	48 89 45 80	movq	%rax, -128(%rbp)
10001ebd7:	8b 43 0c	movl	12(%rbx), %eax
10001ebda:	48 89 45 88	movq	%rax, -120(%rbp)
10001ebde:	44 8b 53 10	movl	16(%rbx), %r10d
10001ebe2:	8b 43 04	movl	4(%rbx), %eax
10001ebe5:	48 89 85 68 ff ff ff	movq	%rax, -152(%rbp)
10001ebec:	44 8b 5b 08	movl	8(%rbx), %r11d
10001ebf0:	44 8b 73 18	movl	24(%rbx), %r14d
10001ebf4:	48 83 ec 08	subq	$8, %rsp
10001ebf8:	48 8d 15 7e c3 02 00	leaq	181118(%rip), %rdx ## literal pool for: "Caller not allowed to perform action: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
10001ebff:	4c 89 ff	movq	%r15, %rdi
10001ec02:	8b b5 78 ff ff ff	movl	-136(%rbp), %esi
10001ec08:	4c 89 e9	movq	%r13, %rcx
10001ec0b:	44 8b 85 74 ff ff ff	movl	-140(%rbp), %r8d
10001ec12:	4c 8b ad 58 ff ff ff	movq	-168(%rbp), %r13
10001ec19:	4d 89 e9	movq	%r13, %r9
10001ec1c:	31 c0	xorl	%eax, %eax
10001ec1e:	41 56	pushq	%r14
10001ec20:	41 53	pushq	%r11
10001ec22:	41 52	pushq	%r10
10001ec24:	ff b5 68 ff ff ff	pushq	-152(%rbp)
10001ec2a:	ff 75 88	pushq	-120(%rbp)
10001ec2d:	ff 75 80	pushq	-128(%rbp)
10001ec30:	41 54	pushq	%r12
10001ec32:	e8 83 73 ff ff	callq	0x100015fba
10001ec37:	48 83 c4 40	addq	$64, %rsp
10001ec3b:	44 8b 73 14	movl	20(%rbx), %r14d
10001ec3f:	44 89 e7	movl	%r12d, %edi
10001ec42:	e8 c7 34 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001ec47:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
10001ec4e:	8b 43 0c	movl	12(%rbx), %eax
10001ec51:	48 89 45 80	movq	%rax, -128(%rbp)
10001ec55:	44 8b 5b 10	movl	16(%rbx), %r11d
10001ec59:	8b 43 04	movl	4(%rbx), %eax
10001ec5c:	48 89 45 88	movq	%rax, -120(%rbp)
10001ec60:	44 8b 53 08	movl	8(%rbx), %r10d
10001ec64:	8b 5b 18	movl	24(%rbx), %ebx
10001ec67:	48 83 ec 08	subq	$8, %rsp
10001ec6b:	48 8d 15 88 c3 02 00	leaq	181128(%rip), %rdx ## literal pool for: "violation: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
10001ec72:	4c 89 ff	movq	%r15, %rdi
10001ec75:	be 05 00 00 00	movl	$5, %esi
10001ec7a:	48 8b 8d 60 ff ff ff	movq	-160(%rbp), %rcx
10001ec81:	45 89 f0	movl	%r14d, %r8d
10001ec84:	4d 89 e9	movq	%r13, %r9
10001ec87:	31 c0	xorl	%eax, %eax
10001ec89:	53	pushq	%rbx
10001ec8a:	41 52	pushq	%r10
10001ec8c:	41 53	pushq	%r11
10001ec8e:	ff 75 88	pushq	-120(%rbp)
10001ec91:	ff 75 80	pushq	-128(%rbp)
10001ec94:	ff b5 78 ff ff ff	pushq	-136(%rbp)
10001ec9a:	41 54	pushq	%r12
10001ec9c:	e8 19 73 ff ff	callq	0x100015fba
10001eca1:	48 83 c4 40	addq	$64, %rsp
10001eca5:	48 8b 05 7c 93 03 00	movq	234364(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001ecac:	48 8b 00	movq	(%rax), %rax
10001ecaf:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10001ecb3:	75 12	jne	0x10001ecc7
10001ecb5:	48 81 c4 88 00 00 00	addq	$136, %rsp
10001ecbc:	5b	popq	%rbx
10001ecbd:	41 5c	popq	%r12
10001ecbf:	41 5d	popq	%r13
10001ecc1:	41 5e	popq	%r14
10001ecc3:	41 5f	popq	%r15
10001ecc5:	5d	popq	%rbp
10001ecc6:	c3	retq
10001ecc7:	e8 a6 2a 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001eccc:	55	pushq	%rbp
10001eccd:	48 89 e5	movq	%rsp, %rbp
10001ecd0:	53	pushq	%rbx
10001ecd1:	50	pushq	%rax
10001ecd2:	48 8b 7f 18	movq	24(%rdi), %rdi
10001ecd6:	e8 43 33 02 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10001ecdb:	48 85 c0	testq	%rax, %rax
10001ecde:	74 2e	je	0x10001ed0e
10001ece0:	48 89 c3	movq	%rax, %rbx
10001ece3:	48 8d 35 8d c2 02 00	leaq	180877(%rip), %rsi ## literal pool for: "error"
10001ecea:	ba 59 00 00 00	movl	$89, %edx
10001ecef:	48 89 c7	movq	%rax, %rdi
10001ecf2:	e8 8d 33 02 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10001ecf7:	48 89 df	movq	%rbx, %rdi
10001ecfa:	e8 f1 33 02 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10001ecff:	a9 df ff ff ff	testl	$4294967263, %eax
10001ed04:	75 0f	jne	0x10001ed15
10001ed06:	48 89 df	movq	%rbx, %rdi
10001ed09:	e8 ee 33 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10001ed0e:	48 83 c4 08	addq	$8, %rsp
10001ed12:	5b	popq	%rbx
10001ed13:	5d	popq	%rbp
10001ed14:	c3	retq
10001ed15:	48 63 f8	movslq	%eax, %rdi
10001ed18:	e8 85 2a 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001ed1d:	eb e7	jmp	0x10001ed06
10001ed1f:	55	pushq	%rbp
10001ed20:	48 89 e5	movq	%rsp, %rbp
10001ed23:	53	pushq	%rbx
10001ed24:	50	pushq	%rax
10001ed25:	48 89 fb	movq	%rdi, %rbx
10001ed28:	c7 87 ac 02 00 00 00 00 00 00	movl	$0, 684(%rdi)
10001ed32:	48 c7 87 a4 02 00 00 00 00 00 00	movq	$0, 676(%rdi)
10001ed3d:	f6 87 ea 04 00 00 04	testb	$4, 1258(%rdi)
10001ed44:	74 08	je	0x10001ed4e
10001ed46:	48 89 df	movq	%rbx, %rdi
10001ed49:	e8 35 fa ff ff	callq	0x10001e783
10001ed4e:	48 89 df	movq	%rbx, %rdi
10001ed51:	48 83 c4 08	addq	$8, %rsp
10001ed55:	5b	popq	%rbx
10001ed56:	5d	popq	%rbp
10001ed57:	e9 43 42 fe ff	jmp	0x100002f9f
10001ed5c:	55	pushq	%rbp
10001ed5d:	48 89 e5	movq	%rsp, %rbp
10001ed60:	5d	popq	%rbp
10001ed61:	e9 b9 ff ff ff	jmp	0x10001ed1f
10001ed66:	55	pushq	%rbp
10001ed67:	48 89 e5	movq	%rsp, %rbp
10001ed6a:	53	pushq	%rbx
10001ed6b:	50	pushq	%rax
10001ed6c:	48 89 fb	movq	%rdi, %rbx
10001ed6f:	e8 1a 2c 02 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
10001ed74:	89 c7	movl	%eax, %edi
10001ed76:	e8 be af fe ff	callq	0x100009d39
10001ed7b:	85 c0	testl	%eax, %eax
10001ed7d:	75 0e	jne	0x10001ed8d
10001ed7f:	48 89 df	movq	%rbx, %rdi
10001ed82:	48 83 c4 08	addq	$8, %rsp
10001ed86:	5b	popq	%rbx
10001ed87:	5d	popq	%rbp
10001ed88:	e9 cb 2b 02 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10001ed8d:	48 63 f8	movslq	%eax, %rdi
10001ed90:	e8 0d 2a 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001ed95:	eb e8	jmp	0x10001ed7f
10001ed97:	55	pushq	%rbp
10001ed98:	48 89 e5	movq	%rsp, %rbp
10001ed9b:	48 8b 7f 20	movq	32(%rdi), %rdi
10001ed9f:	31 d2	xorl	%edx, %edx
10001eda1:	5d	popq	%rbp
10001eda2:	e9 5d d2 ff ff	jmp	0x10001c004
10001eda7:	55	pushq	%rbp
10001eda8:	48 89 e5	movq	%rsp, %rbp
10001edab:	41 56	pushq	%r14
10001edad:	53	pushq	%rbx
10001edae:	48 89 fb	movq	%rdi, %rbx
10001edb1:	be 23 00 00 00	movl	$35, %esi
10001edb6:	e8 cf 3e ff ff	callq	0x100012c8a
10001edbb:	48 8b bb e8 02 00 00	movq	744(%rbx), %rdi
10001edc2:	e8 b5 2b 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10001edc7:	48 8b bb e8 02 00 00	movq	744(%rbx), %rdi
10001edce:	e8 85 2b 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001edd3:	48 c7 83 e8 02 00 00 00 00 00 00	movq	$0, 744(%rbx)
10001edde:	8b bb c8 03 00 00	movl	968(%rbx), %edi
10001ede4:	e8 4e 63 01 00	callq	0x100035137
10001ede9:	84 c0	testb	%al, %al
10001edeb:	74 1a	je	0x10001ee07
10001eded:	48 8d 15 da c6 02 00	leaq	181978(%rip), %rdx ## literal pool for: "extension is being debugged; not timing out exit"
10001edf4:	48 89 df	movq	%rbx, %rdi
10001edf7:	be 05 00 00 00	movl	$5, %esi
10001edfc:	31 c0	xorl	%eax, %eax
10001edfe:	5b	popq	%rbx
10001edff:	41 5e	popq	%r14
10001ee01:	5d	popq	%rbp
10001ee02:	e9 b3 71 ff ff	jmp	0x100015fba
10001ee07:	48 8d 15 f1 c6 02 00	leaq	182001(%rip), %rdx ## literal pool for: "Extension remained dirty for too long after trying to exit. Killing."
10001ee0e:	48 89 df	movq	%rbx, %rdi
10001ee11:	be 04 00 00 00	movl	$4, %esi
10001ee16:	31 c0	xorl	%eax, %eax
10001ee18:	e8 9d 71 ff ff	callq	0x100015fba
10001ee1d:	48 8d 15 20 c7 02 00	leaq	182048(%rip), %rdx ## literal pool for: "extension timed out trying to exit; killing"
10001ee24:	48 89 df	movq	%rbx, %rdi
10001ee27:	be 05 00 00 00	movl	$5, %esi
10001ee2c:	31 c0	xorl	%eax, %eax
10001ee2e:	e8 87 71 ff ff	callq	0x100015fba
10001ee33:	48 89 df	movq	%rbx, %rdi
10001ee36:	be 01 00 00 00	movl	$1, %esi
10001ee3b:	e8 ca c2 ff ff	callq	0x10001b10a
10001ee40:	41 89 c6	movl	%eax, %r14d
10001ee43:	83 f8 25	cmpl	$37, %eax
10001ee46:	77 18	ja	0x10001ee60
10001ee48:	44 89 f0	movl	%r14d, %eax
10001ee4b:	48 b9 09 00 00 00 20 00 00 00	movabsq	$137438953481, %rcx
10001ee55:	48 0f a3 c1	btq	%rax, %rcx
10001ee59:	73 05	jae	0x10001ee60
10001ee5b:	5b	popq	%rbx
10001ee5c:	41 5e	popq	%r14
10001ee5e:	5d	popq	%rbp
10001ee5f:	c3	retq
10001ee60:	44 89 f7	movl	%r14d, %edi
10001ee63:	e8 d6 2f 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001ee68:	48 8d 15 01 c7 02 00	leaq	182017(%rip), %rdx ## literal pool for: "Failed to kill extension. It may linger forever: %d: %s"
10001ee6f:	48 89 df	movq	%rbx, %rdi
10001ee72:	be 04 00 00 00	movl	$4, %esi
10001ee77:	44 89 f1	movl	%r14d, %ecx
10001ee7a:	49 89 c0	movq	%rax, %r8
10001ee7d:	31 c0	xorl	%eax, %eax
10001ee7f:	5b	popq	%rbx
10001ee80:	41 5e	popq	%r14
10001ee82:	5d	popq	%rbp
10001ee83:	e9 32 71 ff ff	jmp	0x100015fba
10001ee88:	55	pushq	%rbp
10001ee89:	48 89 e5	movq	%rsp, %rbp
10001ee8c:	41 56	pushq	%r14
10001ee8e:	53	pushq	%rbx
10001ee8f:	48 89 fb	movq	%rdi, %rbx
10001ee92:	e8 48 41 fe ff	callq	0x100002fdf
10001ee97:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
10001ee9e:	48 89 de	movq	%rbx, %rsi
10001eea1:	e8 b5 c9 00 00	callq	0x10002b85b
10001eea6:	48 89 df	movq	%rbx, %rdi
10001eea9:	e8 5c 84 ff ff	callq	0x10001730a
10001eeae:	85 c0	testl	%eax, %eax
10001eeb0:	74 1c	je	0x10001eece
10001eeb2:	48 89 df	movq	%rbx, %rdi
10001eeb5:	89 c6	movl	%eax, %esi
10001eeb7:	e8 dd 71 ff ff	callq	0x100016099
10001eebc:	85 c0	testl	%eax, %eax
10001eebe:	74 0e	je	0x10001eece
10001eec0:	41 89 c6	movl	%eax, %r14d
10001eec3:	83 f8 24	cmpl	$36, %eax
10001eec6:	74 06	je	0x10001eece
10001eec8:	41 83 fe 7c	cmpl	$124, %r14d
10001eecc:	75 05	jne	0x10001eed3
10001eece:	5b	popq	%rbx
10001eecf:	41 5e	popq	%r14
10001eed1:	5d	popq	%rbp
10001eed2:	c3	retq
10001eed3:	44 89 f7	movl	%r14d, %edi
10001eed6:	e8 33 32 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001eedb:	48 8d 15 e4 c6 02 00	leaq	181988(%rip), %rdx ## literal pool for: "Release-hold spawn of service failed: %d: %s"
10001eee2:	48 89 df	movq	%rbx, %rdi
10001eee5:	be 03 00 00 00	movl	$3, %esi
10001eeea:	44 89 f1	movl	%r14d, %ecx
10001eeed:	49 89 c0	movq	%rax, %r8
10001eef0:	31 c0	xorl	%eax, %eax
10001eef2:	5b	popq	%rbx
10001eef3:	41 5e	popq	%r14
10001eef5:	5d	popq	%rbp
10001eef6:	e9 bf 70 ff ff	jmp	0x100015fba
10001eefb:	55	pushq	%rbp
10001eefc:	48 89 e5	movq	%rsp, %rbp
10001eeff:	53	pushq	%rbx
10001ef00:	50	pushq	%rax
10001ef01:	48 89 fb	movq	%rdi, %rbx
10001ef04:	e8 85 2a 02 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
10001ef09:	89 c7	movl	%eax, %edi
10001ef0b:	e8 29 ae fe ff	callq	0x100009d39
10001ef10:	85 c0	testl	%eax, %eax
10001ef12:	75 0e	jne	0x10001ef22
10001ef14:	48 89 df	movq	%rbx, %rdi
10001ef17:	48 83 c4 08	addq	$8, %rsp
10001ef1b:	5b	popq	%rbx
10001ef1c:	5d	popq	%rbp
10001ef1d:	e9 36 2a 02 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10001ef22:	48 63 f8	movslq	%eax, %rdi
10001ef25:	e8 78 28 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001ef2a:	eb e8	jmp	0x10001ef14
10001ef2c:	55	pushq	%rbp
10001ef2d:	48 89 e5	movq	%rsp, %rbp
10001ef30:	41 57	pushq	%r15
10001ef32:	41 56	pushq	%r14
10001ef34:	53	pushq	%rbx
10001ef35:	50	pushq	%rax
10001ef36:	49 89 f6	movq	%rsi, %r14
10001ef39:	49 89 ff	movq	%rdi, %r15
10001ef3c:	8b bf c8 03 00 00	movl	968(%rdi), %edi
10001ef42:	be 09 00 00 00	movl	$9, %esi
10001ef47:	e8 c2 2b 02 00	callq	0x100041b0e ## symbol stub for: _kill
10001ef4c:	85 c0	testl	%eax, %eax
10001ef4e:	74 48	je	0x10001ef98
10001ef50:	e8 0b 28 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ef55:	8b 18	movl	(%rax), %ebx
10001ef57:	e8 04 28 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ef5c:	8b 38	movl	(%rax), %edi
10001ef5e:	e8 db 2e 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001ef63:	48 8d 15 18 c8 02 00	leaq	182296(%rip), %rdx ## literal pool for: "could not signal service for %s: %d: %s"
10001ef6a:	4c 89 ff	movq	%r15, %rdi
10001ef6d:	be 05 00 00 00	movl	$5, %esi
10001ef72:	4c 89 f1	movq	%r14, %rcx
10001ef75:	41 89 d8	movl	%ebx, %r8d
10001ef78:	49 89 c1	movq	%rax, %r9
10001ef7b:	31 c0	xorl	%eax, %eax
10001ef7d:	e8 38 70 ff ff	callq	0x100015fba
10001ef82:	e8 d9 27 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ef87:	48 63 10	movslq	(%rax), %rdx
10001ef8a:	48 85 d2	testq	%rdx, %rdx
10001ef8d:	75 54	jne	0x10001efe3
10001ef8f:	e8 cc 27 02 00	callq	0x100041760 ## symbol stub for: ___error
10001ef94:	8b 18	movl	(%rax), %ebx
10001ef96:	eb 3e	jmp	0x10001efd6
10001ef98:	49 63 b7 c8 03 00 00	movslq	968(%r15), %rsi
10001ef9f:	ba 09 00 00 00	movl	$9, %edx
10001efa4:	bf 50 00 00 22	movl	$570425424, %edi
10001efa9:	e8 32 df fe ff	callq	0x10000cee0
10001efae:	bf 09 00 00 00	movl	$9, %edi
10001efb3:	e8 c2 2e 02 00	callq	0x100041e7a ## symbol stub for: _strsignal
10001efb8:	48 8d 15 eb c7 02 00	leaq	182251(%rip), %rdx ## literal pool for: "signaled service for %s: %s"
10001efbf:	31 db	xorl	%ebx, %ebx
10001efc1:	4c 89 ff	movq	%r15, %rdi
10001efc4:	be 05 00 00 00	movl	$5, %esi
10001efc9:	4c 89 f1	movq	%r14, %rcx
10001efcc:	49 89 c0	movq	%rax, %r8
10001efcf:	31 c0	xorl	%eax, %eax
10001efd1:	e8 e4 6f ff ff	callq	0x100015fba
10001efd6:	89 d8	movl	%ebx, %eax
10001efd8:	48 83 c4 08	addq	$8, %rsp
10001efdc:	5b	popq	%rbx
10001efdd:	41 5e	popq	%r14
10001efdf:	41 5f	popq	%r15
10001efe1:	5d	popq	%rbp
10001efe2:	c3	retq
10001efe3:	48 8d 3d 1d 93 ff ff	leaq	-27875(%rip), %rdi
10001efea:	4c 89 fe	movq	%r15, %rsi
10001efed:	e8 b6 27 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001eff2:	eb 9b	jmp	0x10001ef8f
10001eff4:	55	pushq	%rbp
10001eff5:	48 89 e5	movq	%rsp, %rbp
10001eff8:	41 56	pushq	%r14
10001effa:	53	pushq	%rbx
10001effb:	48 83 ec 50	subq	$80, %rsp
10001efff:	48 89 fb	movq	%rdi, %rbx
10001f002:	48 8b 05 1f 90 03 00	movq	233503(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001f009:	48 8b 00	movq	(%rax), %rax
10001f00c:	48 89 45 e8	movq	%rax, -24(%rbp)
10001f010:	4c 8d 35 45 36 04 00	leaq	276037(%rip), %r14
10001f017:	41 8b 0e	movl	(%r14), %ecx
10001f01a:	48 8d 15 a5 c7 02 00	leaq	182181(%rip), %rdx ## literal pool for: "exceeded sigkill timeout: %u"
10001f021:	be 05 00 00 00	movl	$5, %esi
10001f026:	31 c0	xorl	%eax, %eax
10001f028:	e8 8d 6f ff ff	callq	0x100015fba
10001f02d:	41 8b 0e	movl	(%r14), %ecx
10001f030:	48 8d 15 ac c7 02 00	leaq	182188(%rip), %rdx ## literal pool for: "Service did not exit %u seconds after SIGKILL."
10001f037:	48 89 df	movq	%rbx, %rdi
10001f03a:	be 04 00 00 00	movl	$4, %esi
10001f03f:	31 c0	xorl	%eax, %eax
10001f041:	e8 74 6f ff ff	callq	0x100015fba
10001f046:	0f 28 05 33 42 02 00	movaps	148019(%rip), %xmm0
10001f04d:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10001f051:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10001f055:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10001f059:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10001f05d:	0f 29 06	movaps	%xmm0, (%rsi)
10001f060:	8b bb c8 03 00 00	movl	968(%rbx), %edi
10001f066:	e8 93 57 01 00	callq	0x1000347fe
10001f06b:	85 c0	testl	%eax, %eax
10001f06d:	75 2b	jne	0x10001f09a
10001f06f:	83 7d ac 05	cmpl	$5, -84(%rbp)
10001f073:	75 2d	jne	0x10001f0a2
10001f075:	48 8d 15 96 c7 02 00	leaq	182166(%rip), %rdx ## literal pool for: "service is already a zombie"
10001f07c:	48 89 df	movq	%rbx, %rdi
10001f07f:	be 05 00 00 00	movl	$5, %esi
10001f084:	31 c0	xorl	%eax, %eax
10001f086:	e8 2f 6f ff ff	callq	0x100015fba
10001f08b:	48 89 df	movq	%rbx, %rdi
10001f08e:	31 f6	xorl	%esi, %esi
10001f090:	e8 b9 85 ff ff	callq	0x10001764e
10001f095:	e9 0f 01 00 00	jmp	0x10001f1a9
10001f09a:	48 63 f8	movslq	%eax, %rdi
10001f09d:	e8 00 27 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001f0a2:	48 8d 15 85 c7 02 00	leaq	182149(%rip), %rdx ## literal pool for: "service is still not a zombie, abandoning"
10001f0a9:	48 89 df	movq	%rbx, %rdi
10001f0ac:	be 05 00 00 00	movl	$5, %esi
10001f0b1:	31 c0	xorl	%eax, %eax
10001f0b3:	e8 02 6f ff ff	callq	0x100015fba
10001f0b8:	48 8b b3 30 02 00 00	movq	560(%rbx), %rsi
10001f0bf:	48 89 df	movq	%rbx, %rdi
10001f0c2:	ff 93 10 02 00 00	callq	*528(%rbx)
10001f0c8:	85 c0	testl	%eax, %eax
10001f0ca:	74 5d	je	0x10001f129
10001f0cc:	41 89 c6	movl	%eax, %r14d
10001f0cf:	89 c7	movl	%eax, %edi
10001f0d1:	e8 38 30 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10001f0d6:	48 8d 15 bf c7 02 00	leaq	182207(%rip), %rdx ## literal pool for: "cannot safely abandon: %d: %s"
10001f0dd:	48 89 df	movq	%rbx, %rdi
10001f0e0:	be 05 00 00 00	movl	$5, %esi
10001f0e5:	44 89 f1	movl	%r14d, %ecx
10001f0e8:	49 89 c0	movq	%rax, %r8
10001f0eb:	31 c0	xorl	%eax, %eax
10001f0ed:	e8 c8 6e ff ff	callq	0x100015fba
10001f0f2:	48 8d 15 c1 c7 02 00	leaq	182209(%rip), %rdx ## literal pool for: "Cannot safely abandon service instance. Leaving it to languish. This may lead to deadlocks."
10001f0f9:	48 89 df	movq	%rbx, %rdi
10001f0fc:	be 04 00 00 00	movl	$4, %esi
10001f101:	31 c0	xorl	%eax, %eax
10001f103:	e8 b2 6e ff ff	callq	0x100015fba
10001f108:	48 89 df	movq	%rbx, %rdi
10001f10b:	be 07 00 00 00	movl	$7, %esi
10001f110:	e8 c6 f3 ff ff	callq	0x10001e4db
10001f115:	48 89 df	movq	%rbx, %rdi
10001f118:	be 06 00 00 00	movl	$6, %esi
10001f11d:	31 d2	xorl	%edx, %edx
10001f11f:	e8 87 6d ff ff	callq	0x100015eab
10001f124:	e9 80 00 00 00	jmp	0x10001f1a9
10001f129:	48 8d 15 28 c7 02 00	leaq	182056(%rip), %rdx ## literal pool for: "abandoning"
10001f130:	48 89 df	movq	%rbx, %rdi
10001f133:	be 05 00 00 00	movl	$5, %esi
10001f138:	31 c0	xorl	%eax, %eax
10001f13a:	e8 7b 6e ff ff	callq	0x100015fba
10001f13f:	48 8d 15 1d c7 02 00	leaq	182045(%rip), %rdx ## literal pool for: "Abandoning service instance. This may lead to deadlocks."
10001f146:	48 89 df	movq	%rbx, %rdi
10001f149:	be 04 00 00 00	movl	$4, %esi
10001f14e:	31 c0	xorl	%eax, %eax
10001f150:	e8 65 6e ff ff	callq	0x100015fba
10001f155:	4c 63 b3 c8 03 00 00	movslq	968(%rbx), %r14
10001f15c:	31 ff	xorl	%edi, %edi
10001f15e:	31 f6	xorl	%esi, %esi
10001f160:	e8 93 27 02 00	callq	0x1000418f8 ## symbol stub for: _dispatch_get_global_queue
10001f165:	48 8b 3d f4 8e 03 00	movq	233204(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_proc
10001f16c:	ba 00 00 00 80	movl	$2147483648, %edx
10001f171:	4c 89 f6	movq	%r14, %rsi
10001f174:	48 89 c1	movq	%rax, %rcx
10001f177:	e8 06 28 02 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10001f17c:	49 89 c6	movq	%rax, %r14
10001f17f:	48 89 c7	movq	%rax, %rdi
10001f182:	48 89 c6	movq	%rax, %rsi
10001f185:	e8 ec 27 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10001f18a:	48 8d 35 33 01 00 00	leaq	307(%rip), %rsi
10001f191:	4c 89 f7	movq	%r14, %rdi
10001f194:	e8 0d 28 02 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001f199:	4c 89 f7	movq	%r14, %rdi
10001f19c:	e8 21 27 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10001f1a1:	48 89 df	movq	%rbx, %rdi
10001f1a4:	e8 33 84 ff ff	callq	0x1000175dc
10001f1a9:	48 8b 05 78 8e 03 00	movq	233080(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10001f1b0:	48 8b 00	movq	(%rax), %rax
10001f1b3:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10001f1b7:	75 09	jne	0x10001f1c2
10001f1b9:	48 83 c4 50	addq	$80, %rsp
10001f1bd:	5b	popq	%rbx
10001f1be:	41 5e	popq	%r14
10001f1c0:	5d	popq	%rbp
10001f1c1:	c3	retq
10001f1c2:	e8 ab 25 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10001f1c7:	55	pushq	%rbp
10001f1c8:	48 89 e5	movq	%rsp, %rbp
10001f1cb:	41 56	pushq	%r14
10001f1cd:	53	pushq	%rbx
10001f1ce:	48 89 fb	movq	%rdi, %rbx
10001f1d1:	48 8d 05 dc 35 04 00	leaq	275932(%rip), %rax
10001f1d8:	80 38 00	cmpb	$0, (%rax)
10001f1db:	8b 8f e0 02 00 00	movl	736(%rdi), %ecx
10001f1e1:	74 5b	je	0x10001f23e
10001f1e3:	48 8d 15 ae c7 02 00	leaq	182190(%rip), %rdx ## literal pool for: "Service did not exit %u seconds after SIGTERM. Terminating with a crash report."
10001f1ea:	48 89 df	movq	%rbx, %rdi
10001f1ed:	be 04 00 00 00	movl	$4, %esi
10001f1f2:	31 c0	xorl	%eax, %eax
10001f1f4:	e8 c1 6d ff ff	callq	0x100015fba
10001f1f9:	8b bb c8 03 00 00	movl	968(%rbx), %edi
10001f1ff:	48 8d 15 82 c7 02 00	leaq	182146(%rip), %rdx ## literal pool for: "SIGTERM timeout"
10001f206:	be 04 00 00 00	movl	$4, %esi
10001f20b:	31 c9	xorl	%ecx, %ecx
10001f20d:	e8 a7 5d 01 00	callq	0x100034fb9
10001f212:	85 c0	testl	%eax, %eax
10001f214:	74 4d	je	0x10001f263
10001f216:	41 89 c6	movl	%eax, %r14d
10001f219:	89 c7	movl	%eax, %edi
10001f21b:	e8 1e 2c 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001f220:	48 8d 15 c1 c7 02 00	leaq	182209(%rip), %rdx ## literal pool for: "could not terminate service after SIGTERM timeout: %d: %s"
10001f227:	48 89 df	movq	%rbx, %rdi
10001f22a:	be 05 00 00 00	movl	$5, %esi
10001f22f:	44 89 f1	movl	%r14d, %ecx
10001f232:	49 89 c0	movq	%rax, %r8
10001f235:	31 c0	xorl	%eax, %eax
10001f237:	e8 7e 6d ff ff	callq	0x100015fba
10001f23c:	eb 25	jmp	0x10001f263
10001f23e:	48 8d 15 03 c7 02 00	leaq	182019(%rip), %rdx ## literal pool for: "Service did not exit %u seconds after SIGTERM. Sending SIGKILL."
10001f245:	48 89 df	movq	%rbx, %rdi
10001f248:	be 04 00 00 00	movl	$4, %esi
10001f24d:	31 c0	xorl	%eax, %eax
10001f24f:	e8 66 6d ff ff	callq	0x100015fba
10001f254:	48 8d 35 2d c7 02 00	leaq	182061(%rip), %rsi ## literal pool for: "SIGTERM timeout"
10001f25b:	48 89 df	movq	%rbx, %rdi
10001f25e:	e8 c9 fc ff ff	callq	0x10001ef2c
10001f263:	c7 83 e4 03 00 00 09 00 00 00	movl	$9, 996(%rbx)
10001f26d:	48 89 df	movq	%rbx, %rdi
10001f270:	be 06 00 00 00	movl	$6, %esi
10001f275:	e8 61 f2 ff ff	callq	0x10001e4db
10001f27a:	4c 8b b3 d8 03 00 00	movq	984(%rbx), %r14
10001f281:	48 8d 05 d4 33 04 00	leaq	275412(%rip), %rax
10001f288:	48 63 00	movslq	(%rax), %rax
10001f28b:	48 69 f0 00 ca 9a 3b	imulq	$1000000000, %rax, %rsi
10001f292:	31 ff	xorl	%edi, %edi
10001f294:	e8 3d 27 02 00	callq	0x1000419d6 ## symbol stub for: _dispatch_time
10001f299:	4c 89 f7	movq	%r14, %rdi
10001f29c:	48 89 c6	movq	%rax, %rsi
10001f29f:	48 c7 c2 ff ff ff ff	movq	$-1, %rdx
10001f2a6:	31 c9	xorl	%ecx, %ecx
10001f2a8:	e8 11 27 02 00	callq	0x1000419be ## symbol stub for: _dispatch_source_set_timer
10001f2ad:	48 8b bb d8 03 00 00	movq	984(%rbx), %rdi
10001f2b4:	48 8d 35 39 fd ff ff	leaq	-711(%rip), %rsi
10001f2bb:	5b	popq	%rbx
10001f2bc:	41 5e	popq	%r14
10001f2be:	5d	popq	%rbp
10001f2bf:	e9 e2 26 02 00	jmp	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10001f2c4:	55	pushq	%rbp
10001f2c5:	48 89 e5	movq	%rsp, %rbp
10001f2c8:	41 56	pushq	%r14
10001f2ca:	53	pushq	%rbx
10001f2cb:	48 83 ec 10	subq	$16, %rsp
10001f2cf:	48 89 fb	movq	%rdi, %rbx
10001f2d2:	e8 b7 26 02 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
10001f2d7:	48 8d 75 ec	leaq	-20(%rbp), %rsi
10001f2db:	c7 06 00 00 00 00	movl	$0, (%rsi)
10001f2e1:	89 c7	movl	%eax, %edi
10001f2e3:	31 d2	xorl	%edx, %edx
10001f2e5:	e8 38 2c 02 00	callq	0x100041f22 ## symbol stub for: _waitpid
10001f2ea:	83 f8 ff	cmpl	$-1, %eax
10001f2ed:	75 2d	jne	0x10001f31c
10001f2ef:	e8 6c 24 02 00	callq	0x100041760 ## symbol stub for: ___error
10001f2f4:	44 8b 30	movl	(%rax), %r14d
10001f2f7:	e8 64 24 02 00	callq	0x100041760 ## symbol stub for: ___error
10001f2fc:	8b 38	movl	(%rax), %edi
10001f2fe:	e8 3b 2b 02 00	callq	0x100041e3e ## symbol stub for: _strerror
10001f303:	48 8d 35 0c c6 02 00	leaq	181772(%rip), %rsi ## literal pool for: "Could not reap abandoned service instance: %d: %s"
10001f30a:	bf 03 00 00 00	movl	$3, %edi
10001f30f:	44 89 f2	movl	%r14d, %edx
10001f312:	48 89 c1	movq	%rax, %rcx
10001f315:	31 c0	xorl	%eax, %eax
10001f317:	e8 ac 62 01 00	callq	0x1000355c8
10001f31c:	48 89 df	movq	%rbx, %rdi
10001f31f:	e8 34 26 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10001f324:	48 83 c4 10	addq	$16, %rsp
10001f328:	5b	popq	%rbx
10001f329:	41 5e	popq	%r14
10001f32b:	5d	popq	%rbp
10001f32c:	c3	retq
10001f32d:	55	pushq	%rbp
10001f32e:	48 89 e5	movq	%rsp, %rbp
10001f331:	41 57	pushq	%r15
10001f333:	41 56	pushq	%r14
10001f335:	41 54	pushq	%r12
10001f337:	53	pushq	%rbx
10001f338:	48 89 f3	movq	%rsi, %rbx
10001f33b:	49 89 fe	movq	%rdi, %r14
10001f33e:	4c 8b 22	movq	(%rdx), %r12
10001f341:	4c 8b 7a 10	movq	16(%rdx), %r15
10001f345:	48 89 f7	movq	%rsi, %rdi
10001f348:	e8 79 2d 02 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10001f34d:	48 3b 05 d4 8d 03 00	cmpq	232916(%rip), %rax ## literal pool symbol address: __xpc_type_string
10001f354:	74 09	je	0x10001f35f
10001f356:	5b	popq	%rbx
10001f357:	41 5c	popq	%r12
10001f359:	41 5e	popq	%r14
10001f35b:	41 5f	popq	%r15
10001f35d:	5d	popq	%rbp
10001f35e:	c3	retq
10001f35f:	48 89 df	movq	%rbx, %rdi
10001f362:	e8 bf 2d 02 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10001f367:	48 8d 15 f2 9e 02 00	leaq	171762(%rip), %rdx ## literal pool for: "%s => %s"
10001f36e:	4c 89 e7	movq	%r12, %rdi
10001f371:	4c 89 fe	movq	%r15, %rsi
10001f374:	4c 89 f1	movq	%r14, %rcx
10001f377:	49 89 c0	movq	%rax, %r8
10001f37a:	31 c0	xorl	%eax, %eax
10001f37c:	5b	popq	%rbx
10001f37d:	41 5c	popq	%r12
10001f37f:	41 5e	popq	%r14
10001f381:	41 5f	popq	%r15
10001f383:	5d	popq	%rbp
10001f384:	e9 e9 98 01 00	jmp	0x100038c72
10001f389:	85 d2	testl	%edx, %edx
10001f38b:	74 3d	je	0x10001f3ca
10001f38d:	55	pushq	%rbp
10001f38e:	48 89 e5	movq	%rsp, %rbp
10001f391:	41 56	pushq	%r14
10001f393:	53	pushq	%rbx
10001f394:	49 89 f6	movq	%rsi, %r14
10001f397:	48 89 fb	movq	%rdi, %rbx
10001f39a:	48 83 7f 10 00	cmpq	$0, 16(%rdi)
10001f39f:	74 11	je	0x10001f3b2
10001f3a1:	48 8d 35 5d d4 02 00	leaq	185437(%rip), %rsi ## literal pool for: " | "
10001f3a8:	48 89 df	movq	%rbx, %rdi
10001f3ab:	31 c0	xorl	%eax, %eax
10001f3ad:	e8 1e cd fe ff	callq	0x10000c0d0
10001f3b2:	48 8d 35 5d 82 02 00	leaq	164445(%rip), %rsi ## literal pool for: "%s"
10001f3b9:	48 89 df	movq	%rbx, %rdi
10001f3bc:	4c 89 f2	movq	%r14, %rdx
10001f3bf:	31 c0	xorl	%eax, %eax
10001f3c1:	5b	popq	%rbx
10001f3c2:	41 5e	popq	%r14
10001f3c4:	5d	popq	%rbp
10001f3c5:	e9 06 cd fe ff	jmp	0x10000c0d0
10001f3ca:	c3	retq
10001f3cb:	48 85 ff	testq	%rdi, %rdi
10001f3ce:	74 06	je	0x10001f3d6
10001f3d0:	48 89 f8	movq	%rdi, %rax
10001f3d3:	31 d2	xorl	%edx, %edx
10001f3d5:	c3	retq
10001f3d6:	55	pushq	%rbp
10001f3d7:	48 89 e5	movq	%rsp, %rbp
10001f3da:	e8 26 12 02 00	callq	0x100040605
10001f3df:	85 ff	testl	%edi, %edi
10001f3e1:	74 05	je	0x10001f3e8
10001f3e3:	31 c0	xorl	%eax, %eax
10001f3e5:	89 fa	movl	%edi, %edx
10001f3e7:	c3	retq
10001f3e8:	55	pushq	%rbp
10001f3e9:	48 89 e5	movq	%rsp, %rbp
10001f3ec:	e8 26 12 02 00	callq	0x100040617
10001f3f1:	55	pushq	%rbp
10001f3f2:	48 89 e5	movq	%rsp, %rbp
10001f3f5:	41 57	pushq	%r15
10001f3f7:	41 56	pushq	%r14
10001f3f9:	53	pushq	%rbx
10001f3fa:	48 83 ec 28	subq	$40, %rsp
10001f3fe:	49 89 fe	movq	%rdi, %r14
10001f401:	bb 08 00 00 00	movl	$8, %ebx
10001f406:	4c 8d 3d 93 bb 03 00	leaq	244627(%rip), %r15
10001f40d:	4a 8b 74 3b f8	movq	-8(%rbx,%r15), %rsi
10001f412:	4c 89 f7	movq	%r14, %rdi
10001f415:	e8 12 2a 02 00	callq	0x100041e2c ## symbol stub for: _strcmp
10001f41a:	85 c0	testl	%eax, %eax
10001f41c:	74 1b	je	0x10001f439
10001f41e:	48 83 c3 10	addq	$16, %rbx
10001f422:	48 83 fb 78	cmpq	$120, %rbx
10001f426:	75 e5	jne	0x10001f40d
10001f428:	48 8d 3d 66 d4 02 00	leaq	185446(%rip), %rdi ## literal pool for: "Unable to find boot task block for: %s"
10001f42f:	4c 89 f6	movq	%r14, %rsi
10001f432:	31 c0	xorl	%eax, %eax
10001f434:	e8 d9 4f 01 00	callq	0x100034412
10001f439:	4a 8b 04 3b	movq	(%rbx,%r15), %rax
10001f43d:	48 8b 0d d4 8b 03 00	movq	232404(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10001f444:	48 8d 7d c0	leaq	-64(%rbp), %rdi
10001f448:	48 89 0f	movq	%rcx, (%rdi)
10001f44b:	48 c7 47 08 00 00 00 40	movq	$1073741824, 8(%rdi)
10001f453:	48 8d 0d dc 01 00 00	leaq	476(%rip), %rcx
10001f45a:	48 89 4f 10	movq	%rcx, 16(%rdi)
10001f45e:	48 8d 0d ab bb 03 00	leaq	244651(%rip), %rcx
10001f465:	48 89 4f 18	movq	%rcx, 24(%rdi)
10001f469:	48 89 47 20	movq	%rax, 32(%rdi)
10001f46d:	e8 b2 22 02 00	callq	0x100041724 ## symbol stub for: __Block_copy
10001f472:	48 83 c4 28	addq	$40, %rsp
10001f476:	5b	popq	%rbx
10001f477:	41 5e	popq	%r14
10001f479:	41 5f	popq	%r15
10001f47b:	5d	popq	%rbp
10001f47c:	c3	retq
10001f47d:	55	pushq	%rbp
10001f47e:	48 89 e5	movq	%rsp, %rbp
10001f481:	41 56	pushq	%r14
10001f483:	53	pushq	%rbx
10001f484:	e8 ac 24 fe ff	callq	0x100001935
10001f489:	84 c0	testb	%al, %al
10001f48b:	74 17	je	0x10001f4a4
10001f48d:	48 8d 35 28 d4 02 00	leaq	185384(%rip), %rsi ## literal pool for: "Boot mode forced."
10001f494:	bf 05 00 01 00	movl	$65541, %edi
10001f499:	31 c0	xorl	%eax, %eax
10001f49b:	5b	popq	%rbx
10001f49c:	41 5e	popq	%r14
10001f49e:	5d	popq	%rbp
10001f49f:	e9 24 61 01 00	jmp	0x1000355c8
10001f4a4:	e8 b0 4c 01 00	callq	0x100034159
10001f4a9:	49 89 c6	movq	%rax, %r14
10001f4ac:	48 8d 1d 3d 33 04 00	leaq	275261(%rip), %rbx
10001f4b3:	48 8b 13	movq	(%rbx), %rdx
10001f4b6:	48 85 d2	testq	%rdx, %rdx
10001f4b9:	74 19	je	0x10001f4d4
10001f4bb:	48 8d 35 0c d4 02 00	leaq	185356(%rip), %rsi ## literal pool for: "Forcing data volume status to %zu (apfs: %zu)"
10001f4c2:	bf 05 00 01 00	movl	$65541, %edi
10001f4c7:	4c 89 f1	movq	%r14, %rcx
10001f4ca:	31 c0	xorl	%eax, %eax
10001f4cc:	e8 f7 60 01 00	callq	0x1000355c8
10001f4d1:	4c 8b 33	movq	(%rbx), %r14
10001f4d4:	48 8d 3d 21 d4 02 00	leaq	185377(%rip), %rdi ## literal pool for: "var/db/.com.apple.eacs"
10001f4db:	e8 fd 4d 01 00	callq	0x1000342dd
10001f4e0:	bb 06 00 00 00	movl	$6, %ebx
10001f4e5:	84 c0	testb	%al, %al
10001f4e7:	75 47	jne	0x10001f530
10001f4e9:	49 83 fe 02	cmpq	$2, %r14
10001f4ed:	75 0e	jne	0x10001f4fd
10001f4ef:	bb 01 00 00 00	movl	$1, %ebx
10001f4f4:	48 8d 35 18 d4 02 00	leaq	185368(%rip), %rsi ## literal pool for: "Data-volume is locked [fvunlock]"
10001f4fb:	eb 27	jmp	0x10001f524
10001f4fd:	48 8d 3d 30 d4 02 00	leaq	185392(%rip), %rdi ## literal pool for: "var/db/.com.apple.templatemigration"
10001f504:	e8 d4 4d 01 00	callq	0x1000342dd
10001f509:	bb 03 00 00 00	movl	$3, %ebx
10001f50e:	84 c0	testb	%al, %al
10001f510:	75 1e	jne	0x10001f530
10001f512:	49 83 fe 01	cmpq	$1, %r14
10001f516:	75 23	jne	0x10001f53b
10001f518:	bb 02 00 00 00	movl	$2, %ebx
10001f51d:	48 8d 35 34 d4 02 00	leaq	185396(%rip), %rsi ## literal pool for: "Data-volume is unlocked [pivot root]"
10001f524:	bf 05 00 01 00	movl	$65541, %edi
10001f529:	31 c0	xorl	%eax, %eax
10001f52b:	e8 98 60 01 00	callq	0x1000355c8
10001f530:	89 df	movl	%ebx, %edi
10001f532:	5b	popq	%rbx
10001f533:	41 5e	popq	%r14
10001f535:	5d	popq	%rbp
10001f536:	e9 95 23 fe ff	jmp	0x1000018d0
10001f53b:	5b	popq	%rbx
10001f53c:	41 5e	popq	%r14
10001f53e:	5d	popq	%rbp
10001f53f:	c3	retq
10001f540:	55	pushq	%rbp
10001f541:	48 89 e5	movq	%rsp, %rbp
10001f544:	bf 02 00 00 00	movl	$2, %edi
10001f549:	e8 f6 22 fe ff	callq	0x100001844
10001f54e:	48 89 c7	movq	%rax, %rdi
10001f551:	e8 ef 23 fe ff	callq	0x100001945
10001f556:	84 c0	testb	%al, %al
10001f558:	75 02	jne	0x10001f55c
10001f55a:	5d	popq	%rbp
10001f55b:	c3	retq
10001f55c:	48 8d 35 1a d4 02 00	leaq	185370(%rip), %rsi ## literal pool for: "Auto pivot root unlock"
10001f563:	bf 05 00 01 00	movl	$65541, %edi
10001f568:	31 c0	xorl	%eax, %eax
10001f56a:	e8 2f 61 01 00	callq	0x10003569e
10001f56f:	48 8d 15 1e d4 02 00	leaq	185374(%rip), %rdx ## literal pool for: "/System/Volumes/macOS"
10001f576:	bf 04 00 00 00	movl	$4, %edi
10001f57b:	31 f6	xorl	%esi, %esi
10001f57d:	e8 1f 8a 01 00	callq	0x100037fa1
10001f582:	55	pushq	%rbp
10001f583:	48 89 e5	movq	%rsp, %rbp
10001f586:	31 ff	xorl	%edi, %edi
10001f588:	31 f6	xorl	%esi, %esi
10001f58a:	ba 20 00 00 00	movl	$32, %edx
10001f58f:	31 c9	xorl	%ecx, %ecx
10001f591:	e8 26 26 02 00	callq	0x100041bbc ## symbol stub for: _macx_triggers
10001f596:	85 c0	testl	%eax, %eax
10001f598:	75 14	jne	0x10001f5ae
10001f59a:	48 8d 35 09 d4 02 00	leaq	185353(%rip), %rsi ## literal pool for: "swap enabled"
10001f5a1:	bf 05 00 01 00	movl	$65541, %edi
10001f5a6:	31 c0	xorl	%eax, %eax
10001f5a8:	5d	popq	%rbp
10001f5a9:	e9 1a 60 01 00	jmp	0x1000355c8
10001f5ae:	e8 76 10 02 00	callq	0x100040629
10001f5b3:	55	pushq	%rbp
10001f5b4:	48 89 e5	movq	%rsp, %rbp
10001f5b7:	53	pushq	%rbx
10001f5b8:	50	pushq	%rax
10001f5b9:	48 8d 3d f7 d3 02 00	leaq	185335(%rip), %rdi ## literal pool for: "/System/Volumes/Data"
10001f5c0:	e8 f5 27 02 00	callq	0x100041dba ## symbol stub for: _sandbox_enable_root_translation
10001f5c5:	85 c0	testl	%eax, %eax
10001f5c7:	74 24	je	0x10001f5ed
10001f5c9:	89 c3	movl	%eax, %ebx
10001f5cb:	e8 90 21 02 00	callq	0x100041760 ## symbol stub for: ___error
10001f5d0:	8b 08	movl	(%rax), %ecx
10001f5d2:	48 8d 35 f3 d3 02 00	leaq	185331(%rip), %rsi ## literal pool for: "sandbox_enable_root_translation failed: %d, %d"
10001f5d9:	bf 05 00 01 00	movl	$65541, %edi
10001f5de:	89 da	movl	%ebx, %edx
10001f5e0:	31 c0	xorl	%eax, %eax
10001f5e2:	48 83 c4 08	addq	$8, %rsp
10001f5e6:	5b	popq	%rbx
10001f5e7:	5d	popq	%rbp
10001f5e8:	e9 b1 60 01 00	jmp	0x10003569e
10001f5ed:	48 83 c4 08	addq	$8, %rsp
10001f5f1:	5b	popq	%rbx
10001f5f2:	5d	popq	%rbp
10001f5f3:	c3	retq
10001f5f4:	55	pushq	%rbp
10001f5f5:	48 89 e5	movq	%rsp, %rbp
10001f5f8:	48 8d 35 fc d3 02 00	leaq	185340(%rip), %rsi ## literal pool for: "allowing non-platform code now"
10001f5ff:	bf 05 00 01 00	movl	$65541, %edi
10001f604:	31 c0	xorl	%eax, %eax
10001f606:	e8 93 60 01 00	callq	0x10003569e
10001f60b:	48 8d 3d 08 d4 02 00	leaq	185352(%rip), %rdi ## literal pool for: "security.mac.amfi.allow_only_platform_code"
10001f612:	31 f6	xorl	%esi, %esi
10001f614:	5d	popq	%rbp
10001f615:	e9 cf 54 01 00	jmp	0x100034ae9
10001f61a:	55	pushq	%rbp
10001f61b:	48 89 e5	movq	%rsp, %rbp
10001f61e:	e8 f6 22 fe ff	callq	0x100001919
10001f623:	48 89 c7	movq	%rax, %rdi
10001f626:	e8 6f 26 02 00	callq	0x100041c9a ## symbol stub for: _os_variant_init_4launchd
10001f62b:	e8 90 21 02 00	callq	0x1000417c0 ## symbol stub for: __os_trace_update_with_datavolume_4launchd
10001f630:	5d	popq	%rbp
10001f631:	e9 39 d8 01 00	jmp	0x10003ce6f
10001f636:	55	pushq	%rbp
10001f637:	48 89 e5	movq	%rsp, %rbp
10001f63a:	5d	popq	%rbp
10001f63b:	ff 67 20	jmpq	*32(%rdi)
10001f63e:	90	nop
10001f63f:	90	nop
10001f640:	48 85 ff	testq	%rdi, %rdi
10001f643:	74 06	je	0x10001f64b
10001f645:	48 89 f8	movq	%rdi, %rax
10001f648:	31 d2	xorl	%edx, %edx
10001f64a:	c3	retq
10001f64b:	55	pushq	%rbp
10001f64c:	48 89 e5	movq	%rsp, %rbp
10001f64f:	e8 ed 0f 02 00	callq	0x100040641
10001f654:	85 ff	testl	%edi, %edi
10001f656:	74 05	je	0x10001f65d
10001f658:	31 c0	xorl	%eax, %eax
10001f65a:	89 fa	movl	%edi, %edx
10001f65c:	c3	retq
10001f65d:	55	pushq	%rbp
10001f65e:	48 89 e5	movq	%rsp, %rbp
10001f661:	e8 ed 0f 02 00	callq	0x100040653
10001f666:	55	pushq	%rbp
10001f667:	48 89 e5	movq	%rsp, %rbp
10001f66a:	31 c0	xorl	%eax, %eax
10001f66c:	5d	popq	%rbp
10001f66d:	c3	retq
10001f66e:	55	pushq	%rbp
10001f66f:	48 89 e5	movq	%rsp, %rbp
10001f672:	5d	popq	%rbp
10001f673:	e9 9a e5 fe ff	jmp	0x10000dc12
10001f678:	55	pushq	%rbp
10001f679:	48 89 e5	movq	%rsp, %rbp
10001f67c:	41 57	pushq	%r15
10001f67e:	41 56	pushq	%r14
10001f680:	41 55	pushq	%r13
10001f682:	41 54	pushq	%r12
10001f684:	53	pushq	%rbx
10001f685:	50	pushq	%rax
10001f686:	bb 01 00 00 00	movl	$1, %ebx
10001f68b:	ff ce	decl	%esi
10001f68d:	83 fe 04	cmpl	$4, %esi
10001f690:	0f 87 12 01 00 00	ja	0x10001f7a8
10001f696:	4d 89 c6	movq	%r8, %r14
10001f699:	49 89 d4	movq	%rdx, %r12
10001f69c:	48 8d 05 bd 01 00 00	leaq	445(%rip), %rax
10001f6a3:	48 63 0c b0	movslq	(%rax,%rsi,4), %rcx
10001f6a7:	48 01 c1	addq	%rax, %rcx
10001f6aa:	ff e1	jmpq	*%rcx
10001f6ac:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001f6b1:	0f 85 f1 00 00 00	jne	0x10001f7a8
10001f6b7:	4c 89 f7	movq	%r14, %rdi
10001f6ba:	48 83 c4 08	addq	$8, %rsp
10001f6be:	5b	popq	%rbx
10001f6bf:	41 5c	popq	%r12
10001f6c1:	41 5d	popq	%r13
10001f6c3:	41 5e	popq	%r14
10001f6c5:	41 5f	popq	%r15
10001f6c7:	5d	popq	%rbp
10001f6c8:	e9 ed cb 00 00	jmp	0x10002c2ba
10001f6cd:	bb 7d 00 00 00	movl	$125, %ebx
10001f6d2:	41 f6 c4 20	testb	$32, %r12b
10001f6d6:	0f 85 cc 00 00 00	jne	0x10001f7a8
10001f6dc:	4d 89 cf	movq	%r9, %r15
10001f6df:	4c 8b 6d 10	movq	16(%rbp), %r13
10001f6e3:	be 04 00 00 00	movl	$4, %esi
10001f6e8:	4c 89 f7	movq	%r14, %rdi
10001f6eb:	e8 c6 c2 fe ff	callq	0x10000b9b6
10001f6f0:	84 c0	testb	%al, %al
10001f6f2:	0f 84 c1 00 00 00	je	0x10001f7b9
10001f6f8:	31 db	xorl	%ebx, %ebx
10001f6fa:	e9 a9 00 00 00	jmp	0x10001f7a8
10001f6ff:	be 04 00 00 00	movl	$4, %esi
10001f704:	4c 89 f7	movq	%r14, %rdi
10001f707:	e8 aa c2 fe ff	callq	0x10000b9b6
10001f70c:	31 db	xorl	%ebx, %ebx
10001f70e:	84 c0	testb	%al, %al
10001f710:	0f 85 92 00 00 00	jne	0x10001f7a8
10001f716:	41 f6 c4 08	testb	$8, %r12b
10001f71a:	74 1d	je	0x10001f739
10001f71c:	48 8d 35 fa dc 02 00	leaq	187642(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001f723:	bb 01 00 00 00	movl	$1, %ebx
10001f728:	4c 89 f7	movq	%r14, %rdi
10001f72b:	ba 01 00 00 00	movl	$1, %edx
10001f730:	e8 d8 25 ff ff	callq	0x100011d0d
10001f735:	84 c0	testb	%al, %al
10001f737:	74 6f	je	0x10001f7a8
10001f739:	41 f6 c4 04	testb	$4, %r12b
10001f73d:	74 0e	je	0x10001f74d
10001f73f:	4c 89 f7	movq	%r14, %rdi
10001f742:	e8 73 cb 00 00	callq	0x10002c2ba
10001f747:	89 c3	movl	%eax, %ebx
10001f749:	85 c0	testl	%eax, %eax
10001f74b:	75 5b	jne	0x10001f7a8
10001f74d:	31 db	xorl	%ebx, %ebx
10001f74f:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001f754:	0f 95 c3	setne	%bl
10001f757:	eb 4f	jmp	0x10001f7a8
10001f759:	be 04 00 00 00	movl	$4, %esi
10001f75e:	4c 89 f7	movq	%r14, %rdi
10001f761:	e8 50 c2 fe ff	callq	0x10000b9b6
10001f766:	31 db	xorl	%ebx, %ebx
10001f768:	84 c0	testb	%al, %al
10001f76a:	75 3c	jne	0x10001f7a8
10001f76c:	41 f6 c4 08	testb	$8, %r12b
10001f770:	74 1d	je	0x10001f78f
10001f772:	48 8d 35 a4 dc 02 00	leaq	187556(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001f779:	bb 01 00 00 00	movl	$1, %ebx
10001f77e:	4c 89 f7	movq	%r14, %rdi
10001f781:	ba 01 00 00 00	movl	$1, %edx
10001f786:	e8 82 25 ff ff	callq	0x100011d0d
10001f78b:	84 c0	testb	%al, %al
10001f78d:	74 19	je	0x10001f7a8
10001f78f:	48 8d 35 a3 dc 02 00	leaq	187555(%rip), %rsi ## literal pool for: "process-info-pidinfo"
10001f796:	4c 89 f7	movq	%r14, %rdi
10001f799:	ba 01 00 00 00	movl	$1, %edx
10001f79e:	e8 6a 25 ff ff	callq	0x100011d0d
10001f7a3:	34 01	xorb	$1, %al
10001f7a5:	0f b6 d8	movzbl	%al, %ebx
10001f7a8:	89 d8	movl	%ebx, %eax
10001f7aa:	48 83 c4 08	addq	$8, %rsp
10001f7ae:	5b	popq	%rbx
10001f7af:	41 5c	popq	%r12
10001f7b1:	41 5d	popq	%r13
10001f7b3:	41 5e	popq	%r14
10001f7b5:	41 5f	popq	%r15
10001f7b7:	5d	popq	%rbp
10001f7b8:	c3	retq
10001f7b9:	41 f6 c4 08	testb	$8, %r12b
10001f7bd:	74 1d	je	0x10001f7dc
10001f7bf:	48 8d 35 4a dc 02 00	leaq	187466(%rip), %rsi ## literal pool for: "job-creation"
10001f7c6:	bb 01 00 00 00	movl	$1, %ebx
10001f7cb:	4c 89 f7	movq	%r14, %rdi
10001f7ce:	ba 01 00 00 00	movl	$1, %edx
10001f7d3:	e8 35 25 ff ff	callq	0x100011d0d
10001f7d8:	84 c0	testb	%al, %al
10001f7da:	74 cc	je	0x10001f7a8
10001f7dc:	4d 85 ff	testq	%r15, %r15
10001f7df:	74 10	je	0x10001f7f1
10001f7e1:	4c 89 ff	movq	%r15, %rdi
10001f7e4:	e8 fd 07 ff ff	callq	0x10000ffe6
10001f7e9:	84 c0	testb	%al, %al
10001f7eb:	0f 85 07 ff ff ff	jne	0x10001f6f8
10001f7f1:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001f7f6:	bb 01 00 00 00	movl	$1, %ebx
10001f7fb:	75 ab	jne	0x10001f7a8
10001f7fd:	41 8b 5e 14	movl	20(%r14), %ebx
10001f801:	e8 90 22 02 00	callq	0x100041a96 ## symbol stub for: _getpid
10001f806:	39 c3	cmpl	%eax, %ebx
10001f808:	75 07	jne	0x10001f811
10001f80a:	bb 00 00 00 00	movl	$0, %ebx
10001f80f:	eb 21	jmp	0x10001f832
10001f811:	48 8d 35 f8 db 02 00	leaq	187384(%rip), %rsi ## literal pool for: "job-creation"
10001f818:	4c 89 f7	movq	%r14, %rdi
10001f81b:	ba 01 00 00 00	movl	$1, %edx
10001f820:	e8 e8 24 ff ff	callq	0x100011d0d
10001f825:	34 01	xorb	$1, %al
10001f827:	0f b6 d8	movzbl	%al, %ebx
10001f82a:	84 db	testb	%bl, %bl
10001f82c:	0f 85 76 ff ff ff	jne	0x10001f7a8
10001f832:	4d 85 ff	testq	%r15, %r15
10001f835:	0f 84 6d ff ff ff	je	0x10001f7a8
10001f83b:	bb 7a 00 00 00	movl	$122, %ebx
10001f840:	41 83 7d 10 00	cmpl	$0, 16(%r13)
10001f845:	0f 85 5d ff ff ff	jne	0x10001f7a8
10001f84b:	31 c0	xorl	%eax, %eax
10001f84d:	41 f6 45 04 12	testb	$18, 4(%r13)
10001f852:	bb 7a 00 00 00	movl	$122, %ebx
10001f857:	0f 44 d8	cmovel	%eax, %ebx
10001f85a:	e9 49 ff ff ff	jmp	0x10001f7a8
10001f85f:	90	nop
	.byte 0x4c #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10001f863:	ff 6d fe	ljmpl	*-2(%rbp)
	.byte 0xff #bad opcode
10001f867:	ff 9f fe ff ff f9	lcalll	*-100663298(%rdi)
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10001f86f:	ff 98 fe ff ff 55	lcalll	*1442840574(%rax)
10001f875:	48 89 e5	movq	%rsp, %rbp
10001f878:	48 8b 05 d1 3c 04 00	movq	277713(%rip), %rax
10001f87f:	48 85 c0	testq	%rax, %rax
10001f882:	74 0d	je	0x10001f891
10001f884:	8b 48 34	movl	52(%rax), %ecx
10001f887:	b8 ff ff ff ff	movl	$4294967295, %eax
10001f88c:	3b 4f 18	cmpl	24(%rdi), %ecx
10001f88f:	74 03	je	0x10001f894
10001f891:	8b 47 04	movl	4(%rdi), %eax
10001f894:	5d	popq	%rbp
10001f895:	c3	retq
10001f896:	55	pushq	%rbp
10001f897:	48 89 e5	movq	%rsp, %rbp
10001f89a:	53	pushq	%rbx
10001f89b:	50	pushq	%rax
10001f89c:	48 89 fb	movq	%rdi, %rbx
10001f89f:	48 8d 15 e6 8a 02 00	leaq	166630(%rip), %rdx ## literal pool for: "cleaning up"
10001f8a6:	be 05 00 00 00	movl	$5, %esi
10001f8ab:	31 c0	xorl	%eax, %eax
10001f8ad:	e8 77 0b 00 00	callq	0x100020429
10001f8b2:	48 8d 43 18	leaq	24(%rbx), %rax
10001f8b6:	48 8b 4b 18	movq	24(%rbx), %rcx
10001f8ba:	48 85 c9	testq	%rcx, %rcx
10001f8bd:	74 08	je	0x10001f8c7
10001f8bf:	48 8b 53 20	movq	32(%rbx), %rdx
10001f8c3:	48 89 51 20	movq	%rdx, 32(%rcx)
10001f8c7:	48 8b 53 20	movq	32(%rbx), %rdx
10001f8cb:	48 89 0a	movq	%rcx, (%rdx)
10001f8ce:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10001f8d2:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10001f8d6:	48 89 df	movq	%rbx, %rdi
10001f8d9:	be 03 00 00 00	movl	$3, %esi
10001f8de:	e8 eb 2f ff ff	callq	0x1000128ce
10001f8e3:	e8 12 ec fe ff	callq	0x10000e4fa
10001f8e8:	48 8d 15 34 c9 00 00	leaq	51508(%rip), %rdx
10001f8ef:	48 89 c7	movq	%rax, %rdi
10001f8f2:	48 89 de	movq	%rbx, %rsi
10001f8f5:	48 83 c4 08	addq	$8, %rsp
10001f8f9:	5b	popq	%rbx
10001f8fa:	5d	popq	%rbp
10001f8fb:	e9 e0 1f 02 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
10001f900:	55	pushq	%rbp
10001f901:	48 89 e5	movq	%rsp, %rbp
10001f904:	41 57	pushq	%r15
10001f906:	41 56	pushq	%r14
10001f908:	41 55	pushq	%r13
10001f90a:	41 54	pushq	%r12
10001f90c:	53	pushq	%rbx
10001f90d:	50	pushq	%rax
10001f90e:	41 bc 01 00 00 00	movl	$1, %r12d
10001f914:	83 fe 05	cmpl	$5, %esi
10001f917:	0f 87 c8 01 00 00	ja	0x10001fae5
10001f91d:	4d 89 c7	movq	%r8, %r15
10001f920:	49 89 ce	movq	%rcx, %r14
10001f923:	48 89 d3	movq	%rdx, %rbx
10001f926:	89 f0	movl	%esi, %eax
10001f928:	48 8d 0d f5 01 00 00	leaq	501(%rip), %rcx
10001f92f:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
10001f933:	48 01 c8	addq	%rcx, %rax
10001f936:	ff e0	jmpq	*%rax
10001f938:	b8 ff ff ff ff	movl	$4294967295, %eax
10001f93d:	49 39 c6	cmpq	%rax, %r14
10001f940:	75 0c	jne	0x10001f94e
10001f942:	83 e3 40	andl	$64, %ebx
10001f945:	48 85 db	testq	%rbx, %rbx
10001f948:	0f 84 97 01 00 00	je	0x10001fae5
10001f94e:	be 05 00 00 00	movl	$5, %esi
10001f953:	4c 89 ff	movq	%r15, %rdi
10001f956:	e8 5b c0 fe ff	callq	0x10000b9b6
10001f95b:	45 31 e4	xorl	%r12d, %r12d
10001f95e:	84 c0	testb	%al, %al
10001f960:	0f 85 7f 01 00 00	jne	0x10001fae5
10001f966:	41 8b 47 04	movl	4(%r15), %eax
10001f96a:	eb 07	jmp	0x10001f973
10001f96c:	41 8b 47 04	movl	4(%r15), %eax
10001f970:	45 31 e4	xorl	%r12d, %r12d
10001f973:	4c 39 f0	cmpq	%r14, %rax
10001f976:	0f 84 69 01 00 00	je	0x10001fae5
10001f97c:	41 8b 4f 0c	movl	12(%r15), %ecx
10001f980:	4c 39 f1	cmpq	%r14, %rcx
10001f983:	0f 85 25 01 00 00	jne	0x10001faae
10001f989:	e9 57 01 00 00	jmp	0x10001fae5
10001f98e:	41 bc 7d 00 00 00	movl	$125, %r12d
10001f994:	f6 c3 20	testb	$32, %bl
10001f997:	0f 85 48 01 00 00	jne	0x10001fae5
10001f99d:	4d 89 cd	movq	%r9, %r13
10001f9a0:	f6 c3 08	testb	$8, %bl
10001f9a3:	74 22	je	0x10001f9c7
10001f9a5:	48 8d 35 64 da 02 00	leaq	186980(%rip), %rsi ## literal pool for: "job-creation"
10001f9ac:	41 bc 01 00 00 00	movl	$1, %r12d
10001f9b2:	4c 89 ff	movq	%r15, %rdi
10001f9b5:	ba 01 00 00 00	movl	$1, %edx
10001f9ba:	e8 4e 23 ff ff	callq	0x100011d0d
10001f9bf:	84 c0	testb	%al, %al
10001f9c1:	0f 84 1e 01 00 00	je	0x10001fae5
10001f9c7:	48 8b 45 10	movq	16(%rbp), %rax
10001f9cb:	f6 c3 01	testb	$1, %bl
10001f9ce:	74 15	je	0x10001f9e5
10001f9d0:	4d 85 ed	testq	%r13, %r13
10001f9d3:	74 10	je	0x10001f9e5
10001f9d5:	83 78 10 00	cmpl	$0, 16(%rax)
10001f9d9:	75 0a	jne	0x10001f9e5
10001f9db:	f6 40 04 12	testb	$18, 4(%rax)
10001f9df:	0f 84 39 01 00 00	je	0x10001fb1e
10001f9e5:	41 8b 4f 04	movl	4(%r15), %ecx
10001f9e9:	4c 39 f1	cmpq	%r14, %rcx
10001f9ec:	0f 85 05 01 00 00	jne	0x10001faf7
10001f9f2:	4d 85 ed	testq	%r13, %r13
10001f9f5:	74 25	je	0x10001fa1c
10001f9f7:	8b 48 10	movl	16(%rax), %ecx
10001f9fa:	48 85 c9	testq	%rcx, %rcx
10001f9fd:	75 0a	jne	0x10001fa09
10001f9ff:	f6 40 04 12	testb	$18, 4(%rax)
10001fa03:	0f 84 15 01 00 00	je	0x10001fb1e
10001fa09:	4c 39 f1	cmpq	%r14, %rcx
10001fa0c:	0f 85 ec 00 00 00	jne	0x10001fafe
10001fa12:	f6 40 04 02	testb	$2, 4(%rax)
10001fa16:	0f 85 e2 00 00 00	jne	0x10001fafe
10001fa1c:	48 8d 35 ed d9 02 00	leaq	186861(%rip), %rsi ## literal pool for: "job-creation"
10001fa23:	4c 89 ff	movq	%r15, %rdi
10001fa26:	ba 01 00 00 00	movl	$1, %edx
10001fa2b:	e8 dd 22 ff ff	callq	0x100011d0d
10001fa30:	34 01	xorb	$1, %al
10001fa32:	44 0f b6 e0	movzbl	%al, %r12d
10001fa36:	e9 aa 00 00 00	jmp	0x10001fae5
10001fa3b:	f6 c3 04	testb	$4, %bl
10001fa3e:	74 13	je	0x10001fa53
10001fa40:	4c 89 ff	movq	%r15, %rdi
10001fa43:	e8 72 c8 00 00	callq	0x10002c2ba
10001fa48:	41 89 c4	movl	%eax, %r12d
10001fa4b:	85 c0	testl	%eax, %eax
10001fa4d:	0f 85 92 00 00 00	jne	0x10001fae5
10001fa53:	f6 c3 08	testb	$8, %bl
10001fa56:	74 4a	je	0x10001faa2
10001fa58:	48 8d 35 be d9 02 00	leaq	186814(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001fa5f:	eb 2a	jmp	0x10001fa8b
10001fa61:	f6 c3 08	testb	$8, %bl
10001fa64:	74 1e	je	0x10001fa84
10001fa66:	48 8d 35 b0 d9 02 00	leaq	186800(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001fa6d:	41 bc 01 00 00 00	movl	$1, %r12d
10001fa73:	4c 89 ff	movq	%r15, %rdi
10001fa76:	ba 01 00 00 00	movl	$1, %edx
10001fa7b:	e8 8d 22 ff ff	callq	0x100011d0d
10001fa80:	84 c0	testb	%al, %al
10001fa82:	74 61	je	0x10001fae5
10001fa84:	48 8d 35 ae d9 02 00	leaq	186798(%rip), %rsi ## literal pool for: "process-info-pidinfo"
10001fa8b:	41 bc 01 00 00 00	movl	$1, %r12d
10001fa91:	4c 89 ff	movq	%r15, %rdi
10001fa94:	ba 01 00 00 00	movl	$1, %edx
10001fa99:	e8 6f 22 ff ff	callq	0x100011d0d
10001fa9e:	84 c0	testb	%al, %al
10001faa0:	74 43	je	0x10001fae5
10001faa2:	41 8b 47 04	movl	4(%r15), %eax
10001faa6:	45 31 e4	xorl	%r12d, %r12d
10001faa9:	4c 39 f0	cmpq	%r14, %rax
10001faac:	74 37	je	0x10001fae5
10001faae:	45 31 e4	xorl	%r12d, %r12d
10001fab1:	85 c0	testl	%eax, %eax
10001fab3:	41 0f 95 c4	setne	%r12b
10001fab7:	eb 2c	jmp	0x10001fae5
10001fab9:	41 8b 47 04	movl	4(%r15), %eax
10001fabd:	45 31 e4	xorl	%r12d, %r12d
10001fac0:	48 85 c0	testq	%rax, %rax
10001fac3:	74 20	je	0x10001fae5
10001fac5:	4c 39 f0	cmpq	%r14, %rax
10001fac8:	74 1b	je	0x10001fae5
10001faca:	be 05 00 00 00	movl	$5, %esi
10001facf:	4c 89 ff	movq	%r15, %rdi
10001fad2:	e8 df be fe ff	callq	0x10000b9b6
10001fad7:	31 c9	xorl	%ecx, %ecx
10001fad9:	84 c0	testb	%al, %al
10001fadb:	41 bc 90 00 00 00	movl	$144, %r12d
10001fae1:	44 0f 45 e1	cmovnel	%ecx, %r12d
10001fae5:	44 89 e0	movl	%r12d, %eax
10001fae8:	48 83 c4 08	addq	$8, %rsp
10001faec:	5b	popq	%rbx
10001faed:	41 5c	popq	%r12
10001faef:	41 5d	popq	%r13
10001faf1:	41 5e	popq	%r14
10001faf3:	41 5f	popq	%r15
10001faf5:	5d	popq	%rbp
10001faf6:	c3	retq
10001faf7:	45 31 e4	xorl	%r12d, %r12d
10001fafa:	85 c9	testl	%ecx, %ecx
10001fafc:	eb b5	jmp	0x10001fab3
10001fafe:	48 8d 35 0b d9 02 00	leaq	186635(%rip), %rsi ## literal pool for: "job-creation"
10001fb05:	4c 89 ff	movq	%r15, %rdi
10001fb08:	ba 01 00 00 00	movl	$1, %edx
10001fb0d:	e8 fb 21 ff ff	callq	0x100011d0d
10001fb12:	31 c9	xorl	%ecx, %ecx
10001fb14:	84 c0	testb	%al, %al
10001fb16:	41 bc 7a 00 00 00	movl	$122, %r12d
10001fb1c:	eb c3	jmp	0x10001fae1
10001fb1e:	45 31 e4	xorl	%r12d, %r12d
10001fb21:	eb c2	jmp	0x10001fae5
10001fb23:	90	nop
10001fb24:	14 fe	adcb	$-2, %al
	.byte 0xff #bad opcode
10001fb27:	ff 48 fe	decl	-2(%rax)
	.byte 0xff #bad opcode
10001fb2b:	ff 6a fe	ljmpl	*-2(%rdx)
	.byte 0xff #bad opcode
10001fb2f:	ff 17	callq	*(%rdi)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001fb34:	3d ff ff ff 95	cmpl	$2516582399, %eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001fb3b:	ff 55 48	callq	*72(%rbp)
10001fb3e:	89 e5	movl	%esp, %ebp
10001fb40:	48 63 47 18	movslq	24(%rdi), %rax
10001fb44:	5d	popq	%rbp
10001fb45:	c3	retq
10001fb46:	55	pushq	%rbp
10001fb47:	48 89 e5	movq	%rsp, %rbp
10001fb4a:	41 57	pushq	%r15
10001fb4c:	41 56	pushq	%r14
10001fb4e:	41 55	pushq	%r13
10001fb50:	41 54	pushq	%r12
10001fb52:	53	pushq	%rbx
10001fb53:	50	pushq	%rax
10001fb54:	49 89 ff	movq	%rdi, %r15
10001fb57:	f6 87 09 04 00 00 08	testb	$8, 1033(%rdi)
10001fb5e:	0f 84 bd 00 00 00	je	0x10001fc21
10001fb64:	41 81 7f 30 c9 00 00 00	cmpl	$201, 48(%r15)
10001fb6c:	75 66	jne	0x10001fbd4
10001fb6e:	45 31 e4	xorl	%r12d, %r12d
10001fb71:	4c 8d 35 8f 87 ff ff	leaq	-30833(%rip), %r14
10001fb78:	49 bd 01 00 00 00 30 00 00 00	movabsq	$206158430209, %r13
10001fb82:	49 8b 87 c8 00 00 00	movq	200(%r15), %rax
10001fb89:	4a 8b 9c e0 00 02 00 00	movq	512(%rax,%r12,8), %rbx
10001fb91:	48 85 db	testq	%rbx, %rbx
10001fb94:	74 2b	je	0x10001fbc1
10001fb96:	48 89 df	movq	%rbx, %rdi
10001fb99:	e8 20 b4 ff ff	callq	0x10001afbe
10001fb9e:	83 f8 25	cmpl	$37, %eax
10001fba1:	77 0e	ja	0x10001fbb1
10001fba3:	89 c1	movl	%eax, %ecx
10001fba5:	49 0f a3 cd	btq	%rcx, %r13
10001fba9:	73 06	jae	0x10001fbb1
10001fbab:	48 8b 5b 48	movq	72(%rbx), %rbx
10001fbaf:	eb e0	jmp	0x10001fb91
10001fbb1:	48 63 d0	movslq	%eax, %rdx
10001fbb4:	4c 89 f7	movq	%r14, %rdi
10001fbb7:	48 89 de	movq	%rbx, %rsi
10001fbba:	e8 e9 1b 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10001fbbf:	eb ea	jmp	0x10001fbab
10001fbc1:	49 ff c4	incq	%r12
10001fbc4:	49 83 fc 0d	cmpq	$13, %r12
10001fbc8:	75 b8	jne	0x10001fb82
10001fbca:	41 f6 87 09 04 00 00 08	testb	$8, 1033(%r15)
10001fbd2:	74 4d	je	0x10001fc21
10001fbd4:	41 81 7f 30 f8 00 00 00	cmpl	$248, 48(%r15)
10001fbdc:	75 43	jne	0x10001fc21
10001fbde:	49 8b 87 c8 00 00 00	movq	200(%r15), %rax
10001fbe5:	48 85 c0	testq	%rax, %rax
10001fbe8:	0f 84 d1 00 00 00	je	0x10001fcbf
10001fbee:	48 8d 0d ab 25 04 00	leaq	271787(%rip), %rcx
10001fbf5:	48 39 48 60	cmpq	%rcx, 96(%rax)
10001fbf9:	0f 84 c0 00 00 00	je	0x10001fcbf
10001fbff:	48 8d 15 cd d7 02 00	leaq	186317(%rip), %rdx ## literal pool for: "slaying parent domain"
10001fc06:	4c 89 ff	movq	%r15, %rdi
10001fc09:	be 05 00 00 00	movl	$5, %esi
10001fc0e:	31 c0	xorl	%eax, %eax
10001fc10:	e8 14 08 00 00	callq	0x100020429
10001fc15:	49 8b bf c8 00 00 00	movq	200(%r15), %rdi
10001fc1c:	e8 e1 0f 00 00	callq	0x100020c02
10001fc21:	41 8b bf 0c 01 00 00	movl	268(%r15), %edi
10001fc28:	48 8d 15 ba d7 02 00	leaq	186298(%rip), %rdx ## literal pool for: "Fast logout"
10001fc2f:	b9 01 00 00 00	movl	$1, %ecx
10001fc34:	be 07 00 00 00	movl	$7, %esi
10001fc39:	e8 7b 53 01 00	callq	0x100034fb9
10001fc3e:	85 c0	testl	%eax, %eax
10001fc40:	75 73	jne	0x10001fcb5
10001fc42:	49 8b bf c8 00 00 00	movq	200(%r15), %rdi
10001fc49:	48 85 ff	testq	%rdi, %rdi
10001fc4c:	74 50	je	0x10001fc9e
10001fc4e:	be 01 00 00 00	movl	$1, %esi
10001fc53:	e8 b0 08 00 00	callq	0x100020508
10001fc58:	48 89 c3	movq	%rax, %rbx
10001fc5b:	48 8d 15 93 d7 02 00	leaq	186259(%rip), %rdx ## literal pool for: "Unpend cocoon on domain %s"
10001fc62:	4c 89 ff	movq	%r15, %rdi
10001fc65:	be 05 00 00 00	movl	$5, %esi
10001fc6a:	48 89 c1	movq	%rax, %rcx
10001fc6d:	31 c0	xorl	%eax, %eax
10001fc6f:	e8 b5 07 00 00	callq	0x100020429
10001fc74:	48 89 df	movq	%rbx, %rdi
10001fc77:	e8 b4 1d 02 00	callq	0x100041a30 ## symbol stub for: _free
10001fc7c:	49 8b 87 c8 00 00 00	movq	200(%r15), %rax
10001fc83:	81 a0 08 04 00 00 ff ef ff ff	andl	$4294963199, 1032(%rax)
10001fc8d:	49 8b bf c8 00 00 00	movq	200(%r15), %rdi
10001fc94:	be 02 00 00 00	movl	$2, %esi
10001fc99:	e8 85 09 00 00	callq	0x100020623
10001fc9e:	4c 89 ff	movq	%r15, %rdi
10001fca1:	e8 f0 fb ff ff	callq	0x10001f896
10001fca6:	48 83 c4 08	addq	$8, %rsp
10001fcaa:	5b	popq	%rbx
10001fcab:	41 5c	popq	%r12
10001fcad:	41 5d	popq	%r13
10001fcaf:	41 5e	popq	%r14
10001fcb1:	41 5f	popq	%r15
10001fcb3:	5d	popq	%rbp
10001fcb4:	c3	retq
10001fcb5:	48 63 f8	movslq	%eax, %rdi
10001fcb8:	e8 e5 1a 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10001fcbd:	eb 83	jmp	0x10001fc42
10001fcbf:	48 8d 3d e7 d6 02 00	leaq	186087(%rip), %rdi ## literal pool for: "MacBuddy gui domain's parent is weird"
10001fcc6:	31 c0	xorl	%eax, %eax
10001fcc8:	e8 45 47 01 00	callq	0x100034412
10001fccd:	55	pushq	%rbp
10001fcce:	48 89 e5	movq	%rsp, %rbp
10001fcd1:	41 57	pushq	%r15
10001fcd3:	41 56	pushq	%r14
10001fcd5:	41 55	pushq	%r13
10001fcd7:	41 54	pushq	%r12
10001fcd9:	53	pushq	%rbx
10001fcda:	50	pushq	%rax
10001fcdb:	4d 89 c6	movq	%r8, %r14
10001fcde:	49 89 d7	movq	%rdx, %r15
10001fce1:	48 85 ff	testq	%rdi, %rdi
10001fce4:	74 06	je	0x10001fcec
10001fce6:	44 8b 67 30	movl	48(%rdi), %r12d
10001fcea:	eb 03	jmp	0x10001fcef
10001fcec:	45 31 e4	xorl	%r12d, %r12d
10001fcef:	41 8b 46 04	movl	4(%r14), %eax
10001fcf3:	41 b5 01	movb	$1, %r13b
10001fcf6:	44 39 e0	cmpl	%r12d, %eax
10001fcf9:	74 1b	je	0x10001fd16
10001fcfb:	41 8b 56 18	movl	24(%r14), %edx
10001fcff:	45 31 ed	xorl	%r13d, %r13d
10001fd02:	85 d2	testl	%edx, %edx
10001fd04:	78 10	js	0x10001fd16
10001fd06:	48 81 f9 ff ff ff 7f	cmpq	$2147483647, %rcx
10001fd0d:	77 07	ja	0x10001fd16
10001fd0f:	48 39 ca	cmpq	%rcx, %rdx
10001fd12:	41 0f 94 c5	sete	%r13b
10001fd16:	bb 01 00 00 00	movl	$1, %ebx
10001fd1b:	83 fe 05	cmpl	$5, %esi
10001fd1e:	0f 87 3c 01 00 00	ja	0x10001fe60
10001fd24:	89 f1	movl	%esi, %ecx
10001fd26:	48 8d 15 47 01 00 00	leaq	327(%rip), %rdx
10001fd2d:	48 63 0c 8a	movslq	(%rdx,%rcx,4), %rcx
10001fd31:	48 01 d1	addq	%rdx, %rcx
10001fd34:	ff e1	jmpq	*%rcx
10001fd36:	bb 7d 00 00 00	movl	$125, %ebx
10001fd3b:	e9 20 01 00 00	jmp	0x10001fe60
10001fd40:	41 f6 c7 20	testb	$32, %r15b
10001fd44:	74 20	je	0x10001fd66
10001fd46:	be 0b 00 00 00	movl	$11, %esi
10001fd4b:	4c 89 f7	movq	%r14, %rdi
10001fd4e:	4c 89 cb	movq	%r9, %rbx
10001fd51:	e8 60 bc fe ff	callq	0x10000b9b6
10001fd56:	49 89 d9	movq	%rbx, %r9
10001fd59:	bb 90 00 00 00	movl	$144, %ebx
10001fd5e:	84 c0	testb	%al, %al
10001fd60:	0f 84 fa 00 00 00	je	0x10001fe60
10001fd66:	45 84 ed	testb	%r13b, %r13b
10001fd69:	0f 84 e7 00 00 00	je	0x10001fe56
10001fd6f:	4d 85 c9	testq	%r9, %r9
10001fd72:	74 29	je	0x10001fd9d
10001fd74:	48 8b 45 10	movq	16(%rbp), %rax
10001fd78:	8b 48 10	movl	16(%rax), %ecx
10001fd7b:	85 c9	testl	%ecx, %ecx
10001fd7d:	75 06	jne	0x10001fd85
10001fd7f:	f6 40 04 12	testb	$18, 4(%rax)
10001fd83:	74 6d	je	0x10001fdf2
10001fd85:	bb 7a 00 00 00	movl	$122, %ebx
10001fd8a:	44 39 e1	cmpl	%r12d, %ecx
10001fd8d:	0f 85 cd 00 00 00	jne	0x10001fe60
10001fd93:	f6 40 04 02	testb	$2, 4(%rax)
10001fd97:	0f 85 c3 00 00 00	jne	0x10001fe60
10001fd9d:	48 8d 35 6c d6 02 00	leaq	185964(%rip), %rsi ## literal pool for: "job-creation"
10001fda4:	e9 88 00 00 00	jmp	0x10001fe31
10001fda9:	bb 01 00 00 00	movl	$1, %ebx
10001fdae:	41 f6 c7 04	testb	$4, %r15b
10001fdb2:	74 14	je	0x10001fdc8
10001fdb4:	4c 89 f7	movq	%r14, %rdi
10001fdb7:	e8 fe c4 00 00	callq	0x10002c2ba
10001fdbc:	89 c3	movl	%eax, %ebx
10001fdbe:	85 c0	testl	%eax, %eax
10001fdc0:	0f 85 9a 00 00 00	jne	0x10001fe60
10001fdc6:	31 db	xorl	%ebx, %ebx
10001fdc8:	41 f6 c7 08	testb	$8, %r15b
10001fdcc:	74 18	je	0x10001fde6
10001fdce:	48 8d 35 48 d6 02 00	leaq	185928(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001fdd5:	4c 89 f7	movq	%r14, %rdi
10001fdd8:	ba 01 00 00 00	movl	$1, %edx
10001fddd:	e8 2b 1f ff ff	callq	0x100011d0d
10001fde2:	84 c0	testb	%al, %al
10001fde4:	74 7a	je	0x10001fe60
10001fde6:	45 84 ed	testb	%r13b, %r13b
10001fde9:	75 07	jne	0x10001fdf2
10001fdeb:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001fdf0:	75 6e	jne	0x10001fe60
10001fdf2:	31 db	xorl	%ebx, %ebx
10001fdf4:	eb 6a	jmp	0x10001fe60
10001fdf6:	41 f6 c7 08	testb	$8, %r15b
10001fdfa:	74 1d	je	0x10001fe19
10001fdfc:	48 8d 35 1a d6 02 00	leaq	185882(%rip), %rsi ## literal pool for: "forbidden-launchd-operation"
10001fe03:	bb 01 00 00 00	movl	$1, %ebx
10001fe08:	4c 89 f7	movq	%r14, %rdi
10001fe0b:	ba 01 00 00 00	movl	$1, %edx
10001fe10:	e8 f8 1e ff ff	callq	0x100011d0d
10001fe15:	84 c0	testb	%al, %al
10001fe17:	74 47	je	0x10001fe60
10001fe19:	45 84 ed	testb	%r13b, %r13b
10001fe1c:	75 0c	jne	0x10001fe2a
10001fe1e:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001fe23:	bb 01 00 00 00	movl	$1, %ebx
10001fe28:	75 36	jne	0x10001fe60
10001fe2a:	48 8d 35 08 d6 02 00	leaq	185864(%rip), %rsi ## literal pool for: "process-info-pidinfo"
10001fe31:	4c 89 f7	movq	%r14, %rdi
10001fe34:	ba 01 00 00 00	movl	$1, %edx
10001fe39:	e8 cf 1e ff ff	callq	0x100011d0d
10001fe3e:	34 01	xorb	$1, %al
10001fe40:	0f b6 d8	movzbl	%al, %ebx
10001fe43:	eb 1b	jmp	0x10001fe60
10001fe45:	85 c0	testl	%eax, %eax
10001fe47:	0f 95 c0	setne	%al
10001fe4a:	41 f6 d5	notb	%r13b
10001fe4d:	41 20 c5	andb	%al, %r13b
10001fe50:	41 0f b6 dd	movzbl	%r13b, %ebx
10001fe54:	eb 0a	jmp	0x10001fe60
10001fe56:	31 db	xorl	%ebx, %ebx
10001fe58:	41 83 7e 04 00	cmpl	$0, 4(%r14)
10001fe5d:	0f 95 c3	setne	%bl
10001fe60:	89 d8	movl	%ebx, %eax
10001fe62:	48 83 c4 08	addq	$8, %rsp
10001fe66:	5b	popq	%rbx
10001fe67:	41 5c	popq	%r12
10001fe69:	41 5d	popq	%r13
10001fe6b:	41 5e	popq	%r14
10001fe6d:	41 5f	popq	%r15
10001fe6f:	5d	popq	%rbp
10001fe70:	c3	retq
10001fe71:	0f 1f 00	nopl	(%rax)
10001fe74:	c2 fe ff	retq	$-2
10001fe77:	ff c2	incl	%edx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10001fe7b:	ff cc	decl	%esp
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10001fe7f:	ff 35 ff ff ff 82	pushq	-2097152001(%rip)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001fe87:	ff d1	callq	*%rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001fe8b:	ff 55 48	callq	*72(%rbp)
10001fe8e:	89 e5	movl	%esp, %ebp
10001fe90:	48 63 47 14	movslq	20(%rdi), %rax
10001fe94:	5d	popq	%rbp
10001fe95:	c3	retq
10001fe96:	55	pushq	%rbp
10001fe97:	48 89 e5	movq	%rsp, %rbp
10001fe9a:	41 56	pushq	%r14
10001fe9c:	53	pushq	%rbx
10001fe9d:	48 89 fb	movq	%rdi, %rbx
10001fea0:	48 8d 15 e5 84 02 00	leaq	165093(%rip), %rdx ## literal pool for: "cleaning up"
10001fea7:	be 05 00 00 00	movl	$5, %esi
10001feac:	31 c0	xorl	%eax, %eax
10001feae:	e8 76 05 00 00	callq	0x100020429
10001feb3:	48 83 bb b8 00 00 00 00	cmpq	$0, 184(%rbx)
10001febb:	74 47	je	0x10001ff04
10001febd:	bf 30 00 00 00	movl	$48, %edi
10001fec2:	e8 1e d6 fe ff	callq	0x10000d4e5
10001fec7:	49 89 c6	movq	%rax, %r14
10001feca:	48 8d 05 9f 28 04 00	leaq	272543(%rip), %rax
10001fed1:	8b 00	movl	(%rax), %eax
10001fed3:	41 89 46 10	movl	%eax, 16(%r14)
10001fed7:	48 8b 83 b8 00 00 00	movq	184(%rbx), %rax
10001fede:	49 89 46 18	movq	%rax, 24(%r14)
10001fee2:	48 c7 83 b8 00 00 00 00 00 00 00	movq	$0, 184(%rbx)
10001feed:	e8 08 e6 fe ff	callq	0x10000e4fa
10001fef2:	48 8d 15 2a c4 00 00	leaq	50218(%rip), %rdx
10001fef9:	48 89 c7	movq	%rax, %rdi
10001fefc:	4c 89 f6	movq	%r14, %rsi
10001feff:	e8 dc 19 02 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
10001ff04:	48 8d 43 18	leaq	24(%rbx), %rax
10001ff08:	48 8b 4b 18	movq	24(%rbx), %rcx
10001ff0c:	48 85 c9	testq	%rcx, %rcx
10001ff0f:	74 08	je	0x10001ff19
10001ff11:	48 8b 53 20	movq	32(%rbx), %rdx
10001ff15:	48 89 51 20	movq	%rdx, 32(%rcx)
10001ff19:	48 8b 53 20	movq	32(%rbx), %rdx
10001ff1d:	48 89 0a	movq	%rcx, (%rdx)
10001ff20:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10001ff24:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10001ff28:	48 89 df	movq	%rbx, %rdi
10001ff2b:	be 03 00 00 00	movl	$3, %esi
10001ff30:	e8 99 29 ff ff	callq	0x1000128ce
10001ff35:	e8 c0 e5 fe ff	callq	0x10000e4fa
10001ff3a:	48 8d 15 e2 c2 00 00	leaq	49890(%rip), %rdx
10001ff41:	48 89 c7	movq	%rax, %rdi
10001ff44:	48 89 de	movq	%rbx, %rsi
10001ff47:	5b	popq	%rbx
10001ff48:	41 5e	popq	%r14
10001ff4a:	5d	popq	%rbp
10001ff4b:	e9 90 19 02 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
10001ff50:	55	pushq	%rbp
10001ff51:	48 89 e5	movq	%rsp, %rbp
10001ff54:	41 57	pushq	%r15
10001ff56:	41 56	pushq	%r14
10001ff58:	41 55	pushq	%r13
10001ff5a:	41 54	pushq	%r12
10001ff5c:	53	pushq	%rbx
10001ff5d:	50	pushq	%rax
10001ff5e:	83 fe 05	cmpl	$5, %esi
10001ff61:	0f 87 b4 01 00 00	ja	0x10002011b
10001ff67:	4d 89 c6	movq	%r8, %r14
10001ff6a:	48 89 cb	movq	%rcx, %rbx
10001ff6d:	49 89 ff	movq	%rdi, %r15
10001ff70:	41 bc 7d 00 00 00	movl	$125, %r12d
10001ff76:	89 f0	movl	%esi, %eax
10001ff78:	48 8d 0d fd 01 00 00	leaq	509(%rip), %rcx
10001ff7f:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
10001ff83:	48 01 c8	addq	%rcx, %rax
10001ff86:	ff e0	jmpq	*%rax
10001ff88:	41 8b 46 14	movl	20(%r14), %eax
10001ff8c:	45 31 e4	xorl	%r12d, %r12d
10001ff8f:	85 c0	testl	%eax, %eax
10001ff91:	78 13	js	0x10001ffa6
10001ff93:	b9 00 00 00 80	movl	$2147483648, %ecx
10001ff98:	48 39 cb	cmpq	%rcx, %rbx
10001ff9b:	73 09	jae	0x10001ffa6
10001ff9d:	48 39 d8	cmpq	%rbx, %rax
10001ffa0:	0f 84 9e 01 00 00	je	0x100020144
10001ffa6:	be 0d 00 00 00	movl	$13, %esi
10001ffab:	4c 89 f7	movq	%r14, %rdi
10001ffae:	e8 03 ba fe ff	callq	0x10000b9b6
10001ffb3:	84 c0	testb	%al, %al
10001ffb5:	0f 85 89 01 00 00	jne	0x100020144
10001ffbb:	be 02 00 00 00	movl	$2, %esi
10001ffc0:	4c 89 f7	movq	%r14, %rdi
10001ffc3:	e9 05 01 00 00	jmp	0x1000200cd
10001ffc8:	4d 85 ff	testq	%r15, %r15
10001ffcb:	0f 84 85 01 00 00	je	0x100020156
10001ffd1:	f6 c2 20	testb	$32, %dl
10001ffd4:	0f 85 6a 01 00 00	jne	0x100020144
10001ffda:	4d 89 cd	movq	%r9, %r13
10001ffdd:	41 bc 93 00 00 00	movl	$147, %r12d
10001ffe3:	4d 85 c9	testq	%r9, %r9
10001ffe6:	0f 84 58 01 00 00	je	0x100020144
10001ffec:	41 8b 46 14	movl	20(%r14), %eax
10001fff0:	85 c0	testl	%eax, %eax
10001fff2:	0f 88 66 01 00 00	js	0x10002015e
10001fff8:	49 8b 4f 68	movq	104(%r15), %rcx
10001fffc:	be 00 00 00 80	movl	$2147483648, %esi
100020001:	48 39 f1	cmpq	%rsi, %rcx
100020004:	0f 83 54 01 00 00	jae	0x10002015e
10002000a:	48 39 c1	cmpq	%rax, %rcx
10002000d:	0f 85 4b 01 00 00	jne	0x10002015e
100020013:	f6 c2 01	testb	$1, %dl
100020016:	75 76	jne	0x10002008e
100020018:	4c 89 ef	movq	%r13, %rdi
10002001b:	e8 c6 ff fe ff	callq	0x10000ffe6
100020020:	84 c0	testb	%al, %al
100020022:	74 10	je	0x100020034
100020024:	48 8b 45 10	movq	16(%rbp), %rax
100020028:	83 78 10 00	cmpl	$0, 16(%rax)
10002002c:	75 06	jne	0x100020034
10002002e:	f6 40 04 12	testb	$18, 4(%rax)
100020032:	74 5a	je	0x10002008e
100020034:	49 8b b7 d0 00 00 00	movq	208(%r15), %rsi
10002003b:	48 85 f6	testq	%rsi, %rsi
10002003e:	74 0c	je	0x10002004c
100020040:	4c 89 ef	movq	%r13, %rdi
100020043:	e8 66 f2 fe ff	callq	0x10000f2ae
100020048:	84 c0	testb	%al, %al
10002004a:	75 42	jne	0x10002008e
10002004c:	41 83 7e 04 00	cmpl	$0, 4(%r14)
100020051:	74 3b	je	0x10002008e
100020053:	48 8d 35 b6 d3 02 00	leaq	185270(%rip), %rsi ## literal pool for: "job-creation"
10002005a:	4c 89 f7	movq	%r14, %rdi
10002005d:	ba 01 00 00 00	movl	$1, %edx
100020062:	e8 a6 1c ff ff	callq	0x100011d0d
100020067:	84 c0	testb	%al, %al
100020069:	75 23	jne	0x10002008e
10002006b:	4c 89 f7	movq	%r14, %rdi
10002006e:	31 f6	xorl	%esi, %esi
100020070:	e8 41 b9 fe ff	callq	0x10000b9b6
100020075:	84 c0	testb	%al, %al
100020077:	75 15	jne	0x10002008e
100020079:	be 01 00 00 00	movl	$1, %esi
10002007e:	4c 89 f7	movq	%r14, %rdi
100020081:	e8 30 b9 fe ff	callq	0x10000b9b6
100020086:	84 c0	testb	%al, %al
100020088:	0f 84 b6 00 00 00	je	0x100020144
10002008e:	45 31 e4	xorl	%r12d, %r12d
100020091:	e9 ae 00 00 00	jmp	0x100020144
100020096:	f6 c2 04	testb	$4, %dl
100020099:	74 13	je	0x1000200ae
10002009b:	4c 89 f7	movq	%r14, %rdi
10002009e:	e8 17 c2 00 00	callq	0x10002c2ba
1000200a3:	41 89 c4	movl	%eax, %r12d
1000200a6:	85 c0	testl	%eax, %eax
1000200a8:	0f 85 96 00 00 00	jne	0x100020144
1000200ae:	41 8b 46 14	movl	20(%r14), %eax
1000200b2:	85 c0	testl	%eax, %eax
1000200b4:	78 12	js	0x1000200c8
1000200b6:	b9 00 00 00 80	movl	$2147483648, %ecx
1000200bb:	48 39 cb	cmpq	%rcx, %rbx
1000200be:	73 08	jae	0x1000200c8
1000200c0:	45 31 e4	xorl	%r12d, %r12d
1000200c3:	48 39 d8	cmpq	%rbx, %rax
1000200c6:	74 7c	je	0x100020144
1000200c8:	4c 89 f7	movq	%r14, %rdi
1000200cb:	31 f6	xorl	%esi, %esi
1000200cd:	e8 e4 b8 fe ff	callq	0x10000b9b6
1000200d2:	34 01	xorb	$1, %al
1000200d4:	eb 6a	jmp	0x100020140
1000200d6:	41 8b 46 14	movl	20(%r14), %eax
1000200da:	85 c0	testl	%eax, %eax
1000200dc:	78 0f	js	0x1000200ed
1000200de:	b9 00 00 00 80	movl	$2147483648, %ecx
1000200e3:	48 39 cb	cmpq	%rcx, %rbx
1000200e6:	73 05	jae	0x1000200ed
1000200e8:	48 39 d8	cmpq	%rbx, %rax
1000200eb:	74 13	je	0x100020100
1000200ed:	41 8b 46 04	movl	4(%r14), %eax
1000200f1:	85 c0	testl	%eax, %eax
1000200f3:	74 0b	je	0x100020100
1000200f5:	4d 85 ff	testq	%r15, %r15
1000200f8:	74 21	je	0x10002011b
1000200fa:	41 3b 47 30	cmpl	48(%r15), %eax
1000200fe:	75 1b	jne	0x10002011b
100020100:	48 8d 35 32 d3 02 00	leaq	185138(%rip), %rsi ## literal pool for: "process-info-pidinfo"
100020107:	4c 89 f7	movq	%r14, %rdi
10002010a:	ba 01 00 00 00	movl	$1, %edx
10002010f:	e8 f9 1b ff ff	callq	0x100011d0d
100020114:	45 31 e4	xorl	%r12d, %r12d
100020117:	84 c0	testb	%al, %al
100020119:	75 29	jne	0x100020144
10002011b:	41 bc 01 00 00 00	movl	$1, %r12d
100020121:	eb 21	jmp	0x100020144
100020123:	41 8b 46 14	movl	20(%r14), %eax
100020127:	85 c0	testl	%eax, %eax
100020129:	0f 98 c1	sets	%cl
10002012c:	48 81 fb ff ff ff 7f	cmpq	$2147483647, %rbx
100020133:	0f 97 c2	seta	%dl
100020136:	08 ca	orb	%cl, %dl
100020138:	48 39 d8	cmpq	%rbx, %rax
10002013b:	0f 95 c0	setne	%al
10002013e:	08 d0	orb	%dl, %al
100020140:	44 0f b6 e0	movzbl	%al, %r12d
100020144:	44 89 e0	movl	%r12d, %eax
100020147:	48 83 c4 08	addq	$8, %rsp
10002014b:	5b	popq	%rbx
10002014c:	41 5c	popq	%r12
10002014e:	41 5d	popq	%r13
100020150:	41 5e	popq	%r14
100020152:	41 5f	popq	%r15
100020154:	5d	popq	%rbp
100020155:	c3	retq
100020156:	41 bc 83 00 00 00	movl	$131, %r12d
10002015c:	eb e6	jmp	0x100020144
10002015e:	be 02 00 00 00	movl	$2, %esi
100020163:	4c 89 f7	movq	%r14, %rdi
100020166:	e8 4b b8 fe ff	callq	0x10000b9b6
10002016b:	31 c9	xorl	%ecx, %ecx
10002016d:	84 c0	testb	%al, %al
10002016f:	41 bc 90 00 00 00	movl	$144, %r12d
100020175:	44 0f 45 e1	cmovnel	%ecx, %r12d
100020179:	eb c9	jmp	0x100020144
10002017b:	90	nop
10002017c:	0c fe	orb	$-2, %al
	.byte 0xff #bad opcode
10002017f:	ff c8	decl	%eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100020183:	ff 4c fe ff	decl	-1(%rsi,%rdi,8)
100020187:	ff 1a	lcalll	*(%rdx)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10002018b:	ff 5a ff	lcalll	*-1(%rdx)
	.byte 0xff #bad opcode
10002018f:	ff a7 ff ff ff 55	jmpq	*1442840575(%rdi)
100020195:	48 89 e5	movq	%rsp, %rbp
100020198:	41 57	pushq	%r15
10002019a:	41 56	pushq	%r14
10002019c:	41 54	pushq	%r12
10002019e:	53	pushq	%rbx
10002019f:	f6 87 0a 04 00 00 02	testb	$2, 1034(%rdi)
1000201a6:	0f 85 1a 02 00 00	jne	0x1000203c6
1000201ac:	49 89 fe	movq	%rdi, %r14
1000201af:	b8 26 00 00 00	movl	$38, %eax
1000201b4:	49 83 3c c6 00	cmpq	$0, (%r14,%rax,8)
1000201b9:	0f 85 e7 01 00 00	jne	0x1000203a6
1000201bf:	48 ff c0	incq	%rax
1000201c2:	48 83 f8 3d	cmpq	$61, %rax
1000201c6:	75 ec	jne	0x1000201b4
1000201c8:	49 8d 9e e8 01 00 00	leaq	488(%r14), %rbx
1000201cf:	48 89 df	movq	%rbx, %rdi
1000201d2:	e8 57 1a 02 00	callq	0x100041c2e ## symbol stub for: _os_map_str_count
1000201d7:	48 85 c0	testq	%rax, %rax
1000201da:	0f 85 ef 01 00 00	jne	0x1000203cf
1000201e0:	48 89 df	movq	%rbx, %rdi
1000201e3:	e8 52 1a 02 00	callq	0x100041c3a ## symbol stub for: _os_map_str_destroy
1000201e8:	49 8b 76 48	movq	72(%r14), %rsi
1000201ec:	48 85 f6	testq	%rsi, %rsi
1000201ef:	74 13	je	0x100020204
1000201f1:	48 8b 1e	movq	(%rsi), %rbx
1000201f4:	4c 89 f7	movq	%r14, %rdi
1000201f7:	e8 dc 01 00 00	callq	0x1000203d8
1000201fc:	48 89 de	movq	%rbx, %rsi
1000201ff:	48 85 db	testq	%rbx, %rbx
100020202:	75 ed	jne	0x1000201f1
100020204:	49 83 7e 18 ff	cmpq	$-1, 24(%r14)
100020209:	0f 85 a5 01 00 00	jne	0x1000203b4
10002020f:	49 83 7e 20 ff	cmpq	$-1, 32(%r14)
100020214:	0f 85 9a 01 00 00	jne	0x1000203b4
10002021a:	49 83 7e 08 ff	cmpq	$-1, 8(%r14)
10002021f:	0f 85 98 01 00 00	jne	0x1000203bd
100020225:	49 83 7e 10 ff	cmpq	$-1, 16(%r14)
10002022a:	0f 85 8d 01 00 00	jne	0x1000203bd
100020230:	49 83 be b0 00 00 00 00	cmpq	$0, 176(%r14)
100020238:	0f 85 3b 01 00 00	jne	0x100020379
10002023e:	49 8b 7e 50	movq	80(%r14), %rdi
100020242:	48 85 ff	testq	%rdi, %rdi
100020245:	74 4e	je	0x100020295
100020247:	48 8b 07	movq	(%rdi), %rax
10002024a:	48 8b 4f 08	movq	8(%rdi), %rcx
10002024e:	48 85 c0	testq	%rax, %rax
100020251:	74 2c	je	0x10002027f
100020253:	48 89 c3	movq	%rax, %rbx
100020256:	48 89 48 08	movq	%rcx, 8(%rax)
10002025a:	48 8b 47 08	movq	8(%rdi), %rax
10002025e:	48 89 18	movq	%rbx, (%rax)
100020261:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100020265:	f3 0f 7f 07	movdqu	%xmm0, (%rdi)
100020269:	e8 04 29 ff ff	callq	0x100012b72
10002026e:	48 8b 03	movq	(%rbx), %rax
100020271:	48 8b 4b 08	movq	8(%rbx), %rcx
100020275:	48 89 df	movq	%rbx, %rdi
100020278:	48 85 c0	testq	%rax, %rax
10002027b:	75 d6	jne	0x100020253
10002027d:	eb 03	jmp	0x100020282
10002027f:	48 89 fb	movq	%rdi, %rbx
100020282:	48 89 01	movq	%rax, (%rcx)
100020285:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100020289:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
10002028d:	48 89 df	movq	%rbx, %rdi
100020290:	e8 dd 28 ff ff	callq	0x100012b72
100020295:	49 8b 5e 28	movq	40(%r14), %rbx
100020299:	48 85 db	testq	%rbx, %rbx
10002029c:	74 50	je	0x1000202ee
10002029e:	4c 8d 3d cb 24 04 00	leaq	271563(%rip), %r15
1000202a5:	4c 8b 23	movq	(%rbx), %r12
1000202a8:	41 f6 86 09 04 00 00 20	testb	$32, 1033(%r14)
1000202b0:	74 0c	je	0x1000202be
1000202b2:	41 8b 3f	movl	(%r15), %edi
1000202b5:	48 8b 73 18	movq	24(%rbx), %rsi
1000202b9:	e8 76 9c 01 00	callq	0x100039f34
1000202be:	48 8b 7b 18	movq	24(%rbx), %rdi
1000202c2:	e8 35 1e 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000202c7:	48 8b 03	movq	(%rbx), %rax
1000202ca:	48 85 c0	testq	%rax, %rax
1000202cd:	74 08	je	0x1000202d7
1000202cf:	48 8b 4b 08	movq	8(%rbx), %rcx
1000202d3:	48 89 48 08	movq	%rcx, 8(%rax)
1000202d7:	48 8b 4b 08	movq	8(%rbx), %rcx
1000202db:	48 89 01	movq	%rax, (%rcx)
1000202de:	48 89 df	movq	%rbx, %rdi
1000202e1:	e8 4a 17 02 00	callq	0x100041a30 ## symbol stub for: _free
1000202e6:	4c 89 e3	movq	%r12, %rbx
1000202e9:	4d 85 e4	testq	%r12, %r12
1000202ec:	75 b7	jne	0x1000202a5
1000202ee:	49 8b be 18 01 00 00	movq	280(%r14), %rdi
1000202f5:	e8 36 17 02 00	callq	0x100041a30 ## symbol stub for: _free
1000202fa:	49 8b be a8 03 00 00	movq	936(%r14), %rdi
100020301:	e8 2a 17 02 00	callq	0x100041a30 ## symbol stub for: _free
100020306:	41 8b be d8 03 00 00	movl	984(%r14), %edi
10002030d:	8d 47 01	leal	1(%rdi), %eax
100020310:	83 f8 02	cmpl	$2, %eax
100020313:	72 09	jb	0x10002031e
100020315:	e8 1f 9a fe ff	callq	0x100009d39
10002031a:	85 c0	testl	%eax, %eax
10002031c:	75 71	jne	0x10002038f
10002031e:	49 8b be d8 00 00 00	movq	216(%r14), %rdi
100020325:	48 85 ff	testq	%rdi, %rdi
100020328:	74 05	je	0x10002032f
10002032a:	e8 cd 1d 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002032f:	49 8b be d0 00 00 00	movq	208(%r14), %rdi
100020336:	48 85 ff	testq	%rdi, %rdi
100020339:	74 05	je	0x100020340
10002033b:	e8 f0 16 02 00	callq	0x100041a30 ## symbol stub for: _free
100020340:	49 8b be e8 03 00 00	movq	1000(%r14), %rdi
100020347:	48 85 ff	testq	%rdi, %rdi
10002034a:	74 07	je	0x100020353
10002034c:	31 f6	xorl	%esi, %esi
10002034e:	e8 fe 25 ff ff	callq	0x100012951
100020353:	4c 39 35 f6 31 04 00	cmpq	%r14, 274934(%rip)
10002035a:	75 0b	jne	0x100020367
10002035c:	48 c7 05 e9 31 04 00 00 00 00 00	movq	$0, 274921(%rip)
100020367:	49 8b 7e 78	movq	120(%r14), %rdi
10002036b:	e8 8c 1d 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100020370:	5b	popq	%rbx
100020371:	41 5c	popq	%r12
100020373:	41 5e	popq	%r14
100020375:	41 5f	popq	%r15
100020377:	5d	popq	%rbp
100020378:	c3	retq
100020379:	48 8d 3d 88 00 00 00	leaq	136(%rip), %rdi
100020380:	4c 89 f6	movq	%r14, %rsi
100020383:	31 d2	xorl	%edx, %edx
100020385:	e8 1e 14 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002038a:	e9 af fe ff ff	jmp	0x10002023e
10002038f:	48 63 d0	movslq	%eax, %rdx
100020392:	48 8d 3d 6f 00 00 00	leaq	111(%rip), %rdi
100020399:	4c 89 f6	movq	%r14, %rsi
10002039c:	e8 07 14 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000203a1:	e9 78 ff ff ff	jmp	0x10002031e
1000203a6:	48 8d 3d 65 c7 02 00	leaq	182117(%rip), %rdi ## literal pool for: "domain deallocated with services"
1000203ad:	31 c0	xorl	%eax, %eax
1000203af:	e8 5e 40 01 00	callq	0x100034412
1000203b4:	48 8d 3d 9e c7 02 00	leaq	182174(%rip), %rdi ## literal pool for: "domain disposal while still in the domains list"
1000203bb:	eb f0	jmp	0x1000203ad
1000203bd:	48 8d 3d c5 c7 02 00	leaq	182213(%rip), %rdi ## literal pool for: "domain disposal while still in the children list"
1000203c4:	eb e7	jmp	0x1000203ad
1000203c6:	48 8d 3d 2b c7 02 00	leaq	182059(%rip), %rdi ## literal pool for: "system domain deallocated"
1000203cd:	eb de	jmp	0x1000203ad
1000203cf:	48 8d 3d 5d c7 02 00	leaq	182109(%rip), %rdi ## literal pool for: "domain deallocated with service stubs"
1000203d6:	eb d5	jmp	0x1000203ad
1000203d8:	55	pushq	%rbp
1000203d9:	48 89 e5	movq	%rsp, %rbp
1000203dc:	48 ff 4f 40	decq	64(%rdi)
1000203e0:	48 89 f7	movq	%rsi, %rdi
1000203e3:	48 8b 06	movq	(%rsi), %rax
1000203e6:	48 85 c0	testq	%rax, %rax
1000203e9:	74 08	je	0x1000203f3
1000203eb:	48 8b 4f 08	movq	8(%rdi), %rcx
1000203ef:	48 89 48 08	movq	%rcx, 8(%rax)
1000203f3:	48 8b 4f 08	movq	8(%rdi), %rcx
1000203f7:	48 89 01	movq	%rax, (%rcx)
1000203fa:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000203fe:	f3 0f 7f 07	movdqu	%xmm0, (%rdi)
100020402:	5d	popq	%rbp
100020403:	e9 42 28 ff ff	jmp	0x100012c4a
100020408:	55	pushq	%rbp
100020409:	48 89 e5	movq	%rsp, %rbp
10002040c:	48 89 d1	movq	%rdx, %rcx
10002040f:	48 89 f7	movq	%rsi, %rdi
100020412:	48 8d 15 fd 71 02 00	leaq	160253(%rip), %rdx ## literal pool for: "%s"
100020419:	be 03 00 00 00	movl	$3, %esi
10002041e:	31 c0	xorl	%eax, %eax
100020420:	e8 04 00 00 00	callq	0x100020429
100020425:	b0 01	movb	$1, %al
100020427:	5d	popq	%rbp
100020428:	c3	retq
100020429:	55	pushq	%rbp
10002042a:	48 89 e5	movq	%rsp, %rbp
10002042d:	41 57	pushq	%r15
10002042f:	41 56	pushq	%r14
100020431:	41 54	pushq	%r12
100020433:	53	pushq	%rbx
100020434:	48 81 ec d0 00 00 00	subq	$208, %rsp
10002043b:	49 89 d6	movq	%rdx, %r14
10002043e:	41 89 f7	movl	%esi, %r15d
100020441:	4c 8d a5 10 ff ff ff	leaq	-240(%rbp), %r12
100020448:	49 89 4c 24 18	movq	%rcx, 24(%r12)
10002044d:	4d 89 44 24 20	movq	%r8, 32(%r12)
100020452:	4d 89 4c 24 28	movq	%r9, 40(%r12)
100020457:	84 c0	testb	%al, %al
100020459:	74 2c	je	0x100020487
10002045b:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100020462:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
100020469:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
100020470:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
100020477:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
10002047b:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
10002047f:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
100020483:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
100020487:	48 8b 05 9a 7b 03 00	movq	228250(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002048e:	48 8b 00	movq	(%rax), %rax
100020491:	48 89 45 d8	movq	%rax, -40(%rbp)
100020495:	be 02 00 00 00	movl	$2, %esi
10002049a:	e8 69 00 00 00	callq	0x100020508
10002049f:	48 89 c3	movq	%rax, %rbx
1000204a2:	0f 28 05 d7 2d 02 00	movaps	142807(%rip), %xmm0
1000204a9:	48 8d 4d c0	leaq	-64(%rbp), %rcx
1000204ad:	0f 29 01	movaps	%xmm0, (%rcx)
1000204b0:	4c 89 61 10	movq	%r12, 16(%rcx)
1000204b4:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
1000204be:	48 89 01	movq	%rax, (%rcx)
1000204c1:	48 8d 45 10	leaq	16(%rbp), %rax
1000204c5:	48 89 41 08	movq	%rax, 8(%rcx)
1000204c9:	4c 8b 45 08	movq	8(%rbp), %r8
1000204cd:	48 89 df	movq	%rbx, %rdi
1000204d0:	44 89 fe	movl	%r15d, %esi
1000204d3:	4c 89 f2	movq	%r14, %rdx
1000204d6:	e8 88 52 01 00	callq	0x100035763
1000204db:	48 89 df	movq	%rbx, %rdi
1000204de:	e8 4d 15 02 00	callq	0x100041a30 ## symbol stub for: _free
1000204e3:	48 8b 05 3e 7b 03 00	movq	228158(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000204ea:	48 8b 00	movq	(%rax), %rax
1000204ed:	48 3b 45 d8	cmpq	-40(%rbp), %rax
1000204f1:	75 10	jne	0x100020503
1000204f3:	48 81 c4 d0 00 00 00	addq	$208, %rsp
1000204fa:	5b	popq	%rbx
1000204fb:	41 5c	popq	%r12
1000204fd:	41 5e	popq	%r14
1000204ff:	41 5f	popq	%r15
100020501:	5d	popq	%rbp
100020502:	c3	retq
100020503:	e8 6a 12 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100020508:	55	pushq	%rbp
100020509:	48 89 e5	movq	%rsp, %rbp
10002050c:	41 57	pushq	%r15
10002050e:	41 56	pushq	%r14
100020510:	41 54	pushq	%r12
100020512:	53	pushq	%rbx
100020513:	41 89 f7	movl	%esi, %r15d
100020516:	41 8d 47 ff	leal	-1(%r15), %eax
10002051a:	83 f8 02	cmpl	$2, %eax
10002051d:	0f 83 fb 00 00 00	jae	0x10002061e
100020523:	49 89 fe	movq	%rdi, %r14
100020526:	bf 80 00 00 00	movl	$128, %edi
10002052b:	e8 31 bb fe ff	callq	0x10000c061
100020530:	49 89 c4	movq	%rax, %r12
100020533:	49 8b 46 60	movq	96(%r14), %rax
100020537:	48 8d 0d 62 1c 04 00	leaq	269410(%rip), %rcx
10002053e:	48 39 c8	cmpq	%rcx, %rax
100020541:	74 36	je	0x100020579
100020543:	48 8d 0d 66 1d 04 00	leaq	269670(%rip), %rcx
10002054a:	48 39 c8	cmpq	%rcx, %rax
10002054d:	74 3d	je	0x10002058c
10002054f:	48 8d 15 d2 1c 04 00	leaq	269522(%rip), %rdx
100020556:	49 8b 4e 68	movq	104(%r14), %rcx
10002055a:	48 39 d0	cmpq	%rdx, %rax
10002055d:	75 44	jne	0x1000205a3
10002055f:	ba ff ff ff ff	movl	$4294967295, %edx
100020564:	48 39 d1	cmpq	%rdx, %rcx
100020567:	75 3a	jne	0x1000205a3
100020569:	41 8b 96 0c 01 00 00	movl	268(%r14), %edx
100020570:	48 8d 35 56 06 03 00	leaq	198230(%rip), %rsi ## literal pool for: "loginwindow/%u"
100020577:	eb 1e	jmp	0x100020597
100020579:	48 8d 35 c5 c4 02 00	leaq	181445(%rip), %rsi ## literal pool for: "system"
100020580:	4c 89 e7	movq	%r12, %rdi
100020583:	31 c0	xorl	%eax, %eax
100020585:	e8 46 bb fe ff	callq	0x10000c0d0
10002058a:	eb 2c	jmp	0x1000205b8
10002058c:	41 8b 56 30	movl	48(%r14), %edx
100020590:	48 8d 35 2f 06 03 00	leaq	198191(%rip), %rsi ## literal pool for: "gui/%u"
100020597:	4c 89 e7	movq	%r12, %rdi
10002059a:	31 c0	xorl	%eax, %eax
10002059c:	e8 2f bb fe ff	callq	0x10000c0d0
1000205a1:	eb 15	jmp	0x1000205b8
1000205a3:	48 8b 50 70	movq	112(%rax), %rdx
1000205a7:	48 8d 35 2e 06 03 00	leaq	198190(%rip), %rsi ## literal pool for: "%s/%lu"
1000205ae:	4c 89 e7	movq	%r12, %rdi
1000205b1:	31 c0	xorl	%eax, %eax
1000205b3:	e8 18 bb fe ff	callq	0x10000c0d0
1000205b8:	41 83 ff 02	cmpl	$2, %r15d
1000205bc:	75 41	jne	0x1000205ff
1000205be:	49 8b 46 60	movq	96(%r14), %rax
1000205c2:	48 8d 0d 6f 1d 04 00	leaq	269679(%rip), %rcx
1000205c9:	48 39 c8	cmpq	%rcx, %rax
1000205cc:	74 19	je	0x1000205e7
1000205ce:	48 8d 0d db 1c 04 00	leaq	269531(%rip), %rcx
1000205d5:	48 39 c8	cmpq	%rcx, %rax
1000205d8:	75 25	jne	0x1000205ff
1000205da:	49 8b 56 68	movq	104(%r14), %rdx
1000205de:	48 8d 35 2a cd 02 00	leaq	183594(%rip), %rsi ## literal pool for: " [%lu]"
1000205e5:	eb 0e	jmp	0x1000205f5
1000205e7:	49 8b 96 18 01 00 00	movq	280(%r14), %rdx
1000205ee:	48 8d 35 14 cd 02 00	leaq	183572(%rip), %rsi ## literal pool for: " [%s]"
1000205f5:	4c 89 e7	movq	%r12, %rdi
1000205f8:	31 c0	xorl	%eax, %eax
1000205fa:	e8 d1 ba fe ff	callq	0x10000c0d0
1000205ff:	4c 89 e7	movq	%r12, %rdi
100020602:	e8 9d ba fe ff	callq	0x10000c0a4
100020607:	48 89 c3	movq	%rax, %rbx
10002060a:	4c 89 e7	movq	%r12, %rdi
10002060d:	e8 9f ba fe ff	callq	0x10000c0b1
100020612:	48 89 d8	movq	%rbx, %rax
100020615:	5b	popq	%rbx
100020616:	41 5c	popq	%r12
100020618:	41 5e	popq	%r14
10002061a:	41 5f	popq	%r15
10002061c:	5d	popq	%rbp
10002061d:	c3	retq
10002061e:	e8 42 00 02 00	callq	0x100040665
100020623:	55	pushq	%rbp
100020624:	48 89 e5	movq	%rsp, %rbp
100020627:	41 57	pushq	%r15
100020629:	41 56	pushq	%r14
10002062b:	53	pushq	%rbx
10002062c:	50	pushq	%rax
10002062d:	48 8b 9f b0 00 00 00	movq	176(%rdi), %rbx
100020634:	48 85 db	testq	%rbx, %rbx
100020637:	74 3f	je	0x100020678
100020639:	41 89 f6	movl	%esi, %r14d
10002063c:	4c 8b 3b	movq	(%rbx), %r15
10002063f:	44 39 73 20	cmpl	%r14d, 32(%rbx)
100020643:	75 2b	jne	0x100020670
100020645:	8b 7b 10	movl	16(%rbx), %edi
100020648:	48 8b 73 18	movq	24(%rbx), %rsi
10002064c:	e8 79 9b 01 00	callq	0x10003a1ca
100020651:	48 8b 03	movq	(%rbx), %rax
100020654:	48 85 c0	testq	%rax, %rax
100020657:	74 08	je	0x100020661
100020659:	48 8b 4b 08	movq	8(%rbx), %rcx
10002065d:	48 89 48 08	movq	%rcx, 8(%rax)
100020661:	48 8b 4b 08	movq	8(%rbx), %rcx
100020665:	48 89 01	movq	%rax, (%rcx)
100020668:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002066c:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
100020670:	4c 89 fb	movq	%r15, %rbx
100020673:	4d 85 ff	testq	%r15, %r15
100020676:	75 c4	jne	0x10002063c
100020678:	48 83 c4 08	addq	$8, %rsp
10002067c:	5b	popq	%rbx
10002067d:	41 5e	popq	%r14
10002067f:	41 5f	popq	%r15
100020681:	5d	popq	%rbp
100020682:	c3	retq
100020683:	55	pushq	%rbp
100020684:	48 89 e5	movq	%rsp, %rbp
100020687:	41 57	pushq	%r15
100020689:	41 56	pushq	%r14
10002068b:	41 54	pushq	%r12
10002068d:	53	pushq	%rbx
10002068e:	48 8b 9f b0 00 00 00	movq	176(%rdi), %rbx
100020695:	48 85 db	testq	%rbx, %rbx
100020698:	74 4d	je	0x1000206e7
10002069a:	41 89 f6	movl	%esi, %r14d
10002069d:	4c 8d 3d 7f bc 00 00	leaq	48255(%rip), %r15
1000206a4:	4c 8b 23	movq	(%rbx), %r12
1000206a7:	44 39 73 20	cmpl	%r14d, 32(%rbx)
1000206ab:	75 32	jne	0x1000206df
1000206ad:	e8 48 de fe ff	callq	0x10000e4fa
1000206b2:	48 89 c7	movq	%rax, %rdi
1000206b5:	48 89 de	movq	%rbx, %rsi
1000206b8:	4c 89 fa	movq	%r15, %rdx
1000206bb:	e8 20 12 02 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
1000206c0:	48 8b 03	movq	(%rbx), %rax
1000206c3:	48 85 c0	testq	%rax, %rax
1000206c6:	74 08	je	0x1000206d0
1000206c8:	48 8b 4b 08	movq	8(%rbx), %rcx
1000206cc:	48 89 48 08	movq	%rcx, 8(%rax)
1000206d0:	48 8b 4b 08	movq	8(%rbx), %rcx
1000206d4:	48 89 01	movq	%rax, (%rcx)
1000206d7:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000206db:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
1000206df:	4c 89 e3	movq	%r12, %rbx
1000206e2:	4d 85 e4	testq	%r12, %r12
1000206e5:	75 bd	jne	0x1000206a4
1000206e7:	5b	popq	%rbx
1000206e8:	41 5c	popq	%r12
1000206ea:	41 5e	popq	%r14
1000206ec:	41 5f	popq	%r15
1000206ee:	5d	popq	%rbp
1000206ef:	c3	retq
1000206f0:	55	pushq	%rbp
1000206f1:	48 89 e5	movq	%rsp, %rbp
1000206f4:	8b 87 94 00 00 00	movl	148(%rdi), %eax
1000206fa:	8d 48 01	leal	1(%rax), %ecx
1000206fd:	89 8f 94 00 00 00	movl	%ecx, 148(%rdi)
100020703:	85 c0	testl	%eax, %eax
100020705:	78 17	js	0x10002071e
100020707:	74 06	je	0x10002070f
100020709:	5d	popq	%rbp
10002070a:	e9 72 25 ff ff	jmp	0x100012c81
10002070f:	f6 87 08 04 00 00 10	testb	$16, 1032(%rdi)
100020716:	75 0f	jne	0x100020727
100020718:	5d	popq	%rbp
100020719:	e9 b0 21 ff ff	jmp	0x1000128ce
10002071e:	48 8d 3d 95 c4 02 00	leaq	181397(%rip), %rdi ## literal pool for: "underflow of active count during activate"
100020725:	eb 07	jmp	0x10002072e
100020727:	48 8d 3d b6 c4 02 00	leaq	181430(%rip), %rdi ## literal pool for: "activation of deactivated domain"
10002072e:	31 c0	xorl	%eax, %eax
100020730:	e8 dd 3c 01 00	callq	0x100034412
100020735:	55	pushq	%rbp
100020736:	48 89 e5	movq	%rsp, %rbp
100020739:	41 57	pushq	%r15
10002073b:	41 56	pushq	%r14
10002073d:	41 54	pushq	%r12
10002073f:	53	pushq	%rbx
100020740:	41 89 f6	movl	%esi, %r14d
100020743:	48 89 fb	movq	%rdi, %rbx
100020746:	44 8b a7 94 00 00 00	movl	148(%rdi), %r12d
10002074d:	45 8d 7c 24 ff	leal	-1(%r12), %r15d
100020752:	44 89 bf 94 00 00 00	movl	%r15d, 148(%rdi)
100020759:	83 bf a0 00 00 00 00	cmpl	$0, 160(%rdi)
100020760:	75 28	jne	0x10002078a
100020762:	f6 83 09 04 00 00 02	testb	$2, 1033(%rbx)
100020769:	74 1f	je	0x10002078a
10002076b:	48 8b 73 68	movq	104(%rbx), %rsi
10002076f:	bf 30 00 00 22	movl	$570425392, %edi
100020774:	e8 56 c7 fe ff	callq	0x10000cecf
100020779:	48 8b 7b 68	movq	104(%rbx), %rdi
10002077d:	90	nop
10002077e:	0f 1f 40 00	nopl	(%rax)
100020782:	48 89 df	movq	%rbx, %rdi
100020785:	e8 c1 00 00 00	callq	0x10002084b
10002078a:	45 85 e4	testl	%r12d, %r12d
10002078d:	0f 8e 9d 00 00 00	jle	0x100020830
100020793:	45 85 ff	testl	%r15d, %r15d
100020796:	74 13	je	0x1000207ab
100020798:	48 89 df	movq	%rbx, %rdi
10002079b:	44 89 f6	movl	%r14d, %esi
10002079e:	5b	popq	%rbx
10002079f:	41 5c	popq	%r12
1000207a1:	41 5e	popq	%r14
1000207a3:	41 5f	popq	%r15
1000207a5:	5d	popq	%rbp
1000207a6:	e9 df 24 ff ff	jmp	0x100012c8a
1000207ab:	8b 83 08 04 00 00	movl	1032(%rbx), %eax
1000207b1:	a8 01	testb	$1, %al
1000207b3:	0f 84 80 00 00 00	je	0x100020839
1000207b9:	a8 10	testb	$16, %al
1000207bb:	0f 85 81 00 00 00	jne	0x100020842
1000207c1:	b9 26 00 00 00	movl	$38, %ecx
1000207c6:	48 83 3c cb 00	cmpq	$0, (%rbx,%rcx,8)
1000207cb:	75 55	jne	0x100020822
1000207cd:	48 ff c1	incq	%rcx
1000207d0:	48 83 f9 3d	cmpq	$61, %rcx
1000207d4:	75 f0	jne	0x1000207c6
1000207d6:	83 c8 10	orl	$16, %eax
1000207d9:	89 83 08 04 00 00	movl	%eax, 1032(%rbx)
1000207df:	48 8b 43 60	movq	96(%rbx), %rax
1000207e3:	f6 80 80 00 00 00 01	testb	$1, 128(%rax)
1000207ea:	74 1d	je	0x100020809
1000207ec:	48 8b 7b 78	movq	120(%rbx), %rdi
1000207f0:	48 85 ff	testq	%rdi, %rdi
1000207f3:	74 09	je	0x1000207fe
1000207f5:	e8 f0 18 02 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
1000207fa:	89 c7	movl	%eax, %edi
1000207fc:	eb 02	jmp	0x100020800
1000207fe:	31 ff	xorl	%edi, %edi
100020800:	e8 d2 93 01 00	callq	0x100039bd7
100020805:	48 8b 43 60	movq	96(%rbx), %rax
100020809:	48 89 df	movq	%rbx, %rdi
10002080c:	ff 50 60	callq	*96(%rax)
10002080f:	48 89 df	movq	%rbx, %rdi
100020812:	44 89 f6	movl	%r14d, %esi
100020815:	5b	popq	%rbx
100020816:	41 5c	popq	%r12
100020818:	41 5e	popq	%r14
10002081a:	41 5f	popq	%r15
10002081c:	5d	popq	%rbp
10002081d:	e9 2f 21 ff ff	jmp	0x100012951
100020822:	48 8d 3d 48 c4 02 00	leaq	181320(%rip), %rdi ## literal pool for: "domain cleaning up with services still in list"
100020829:	31 c0	xorl	%eax, %eax
10002082b:	e8 e2 3b 01 00	callq	0x100034412
100020830:	48 8d 3d ce c3 02 00	leaq	181198(%rip), %rdi ## literal pool for: "underflow of active count during deactivate"
100020837:	eb f0	jmp	0x100020829
100020839:	48 8d 3d f1 c3 02 00	leaq	181233(%rip), %rdi ## literal pool for: "inactive domain is not shutting down"
100020840:	eb e7	jmp	0x100020829
100020842:	48 8d 3d 0d c4 02 00	leaq	181261(%rip), %rdi ## literal pool for: "domain already deactivated"
100020849:	eb de	jmp	0x100020829
10002084b:	55	pushq	%rbp
10002084c:	48 89 e5	movq	%rsp, %rbp
10002084f:	41 57	pushq	%r15
100020851:	41 56	pushq	%r14
100020853:	41 55	pushq	%r13
100020855:	41 54	pushq	%r12
100020857:	53	pushq	%rbx
100020858:	50	pushq	%rax
100020859:	4c 8b b7 b0 03 00 00	movq	944(%rdi), %r14
100020860:	4d 85 f6	testq	%r14, %r14
100020863:	0f 84 90 03 00 00	je	0x100020bf9
100020869:	49 89 fc	movq	%rdi, %r12
10002086c:	48 8b 9f c8 00 00 00	movq	200(%rdi), %rbx
100020873:	48 8d 15 d1 cc 02 00	leaq	183505(%rip), %rdx ## literal pool for: "transforming domain"
10002087a:	be 05 00 00 00	movl	$5, %esi
10002087f:	31 c0	xorl	%eax, %eax
100020881:	e8 a3 fb ff ff	callq	0x100020429
100020886:	48 c7 05 bf 2c 04 00 00 00 00 00	movq	$0, 273599(%rip)
100020891:	41 8b 84 24 08 04 00 00	movl	1032(%r12), %eax
100020899:	89 c1	movl	%eax, %ecx
10002089b:	81 e1 ff fd ff ff	andl	$4294966783, %ecx
1000208a1:	41 89 8c 24 08 04 00 00	movl	%ecx, 1032(%r12)
1000208a9:	a8 03	testb	$3, %al
1000208ab:	75 0f	jne	0x1000208bc
1000208ad:	41 0f b7 86 08 04 00 00	movzwl	1032(%r14), %eax
1000208b5:	a9 03 02 00 00	testl	$515, %eax
1000208ba:	74 73	je	0x10002092f
1000208bc:	49 8b bc 24 c8 03 00 00	movq	968(%r12), %rdi
1000208c4:	e8 33 18 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000208c9:	49 c7 84 24 c8 03 00 00 00 00 00 00	movq	$0, 968(%r12)
1000208d5:	48 8d 15 83 cc 02 00	leaq	183427(%rip), %rdx ## literal pool for: "aborting transform: shutting down"
1000208dc:	4c 89 e7	movq	%r12, %rdi
1000208df:	be 05 00 00 00	movl	$5, %esi
1000208e4:	31 c0	xorl	%eax, %eax
1000208e6:	e8 3e fb ff ff	callq	0x100020429
1000208eb:	4c 89 e7	movq	%r12, %rdi
1000208ee:	be 15 00 00 00	movl	$21, %esi
1000208f3:	e8 3d fe ff ff	callq	0x100020735
1000208f8:	4c 89 f7	movq	%r14, %rdi
1000208fb:	be 16 00 00 00	movl	$22, %esi
100020900:	e8 30 fe ff ff	callq	0x100020735
100020905:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002090e:	a9 03 02 00 00	testl	$515, %eax
100020913:	0f 85 99 02 00 00	jne	0x100020bb2
100020919:	4c 89 e7	movq	%r12, %rdi
10002091c:	48 83 c4 08	addq	$8, %rsp
100020920:	5b	popq	%rbx
100020921:	41 5c	popq	%r12
100020923:	41 5d	popq	%r13
100020925:	41 5e	popq	%r14
100020927:	41 5f	popq	%r15
100020929:	5d	popq	%rbp
10002092a:	e9 d3 02 00 00	jmp	0x100020c02
10002092f:	48 89 5d d0	movq	%rbx, -48(%rbp)
100020933:	49 8b bc 24 a8 03 00 00	movq	936(%r12), %rdi
10002093b:	e8 f0 10 02 00	callq	0x100041a30 ## symbol stub for: _free
100020940:	4c 8d 2d fa 94 02 00	leaq	169210(%rip), %r13 ## literal pool for: "Aqua"
100020947:	4c 89 ef	movq	%r13, %rdi
10002094a:	e8 93 e6 fe ff	callq	0x10000efe2
10002094f:	49 89 84 24 a8 03 00 00	movq	%rax, 936(%r12)
100020957:	49 8d 9c 24 10 04 00 00	leaq	1040(%r12), %rbx
10002095f:	48 89 df	movq	%rbx, %rdi
100020962:	e8 ef 14 02 00	callq	0x100041e56 ## symbol stub for: _strlen
100020967:	48 8d 70 01	leaq	1(%rax), %rsi
10002096b:	41 8b 8c 24 b8 03 00 00	movl	952(%r12), %ecx
100020973:	45 8b 44 24 34	movl	52(%r12), %r8d
100020978:	48 8d 15 02 cc 02 00	leaq	183298(%rip), %rdx ## literal pool for: "com.apple.xpc.launchd.user.domain.%u.%u.%s"
10002097f:	48 89 df	movq	%rbx, %rdi
100020982:	4d 89 e9	movq	%r13, %r9
100020985:	31 c0	xorl	%eax, %eax
100020987:	e8 76 14 02 00	callq	0x100041e02 ## symbol stub for: _snprintf
10002098c:	49 8d 44 24 18	leaq	24(%r12), %rax
100020991:	49 8b 4c 24 18	movq	24(%r12), %rcx
100020996:	48 85 c9	testq	%rcx, %rcx
100020999:	74 09	je	0x1000209a4
10002099b:	49 8b 54 24 20	movq	32(%r12), %rdx
1000209a0:	48 89 51 20	movq	%rdx, 32(%rcx)
1000209a4:	49 8b 54 24 20	movq	32(%r12), %rdx
1000209a9:	48 89 0a	movq	%rcx, (%rdx)
1000209ac:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000209b0:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
1000209b4:	48 8d 05 f5 18 04 00	leaq	268533(%rip), %rax
1000209bb:	49 89 44 24 60	movq	%rax, 96(%r12)
1000209c0:	45 31 ed	xorl	%r13d, %r13d
1000209c3:	4b 8b 9c ec a0 02 00 00	movq	672(%r12,%r13,8), %rbx
1000209cb:	48 85 db	testq	%rbx, %rbx
1000209ce:	74 77	je	0x100020a47
1000209d0:	4c 8b 7b 18	movq	24(%rbx), %r15
1000209d4:	48 89 df	movq	%rbx, %rdi
1000209d7:	e8 0f ad 01 00	callq	0x10003b6eb
1000209dc:	84 c0	testb	%al, %al
1000209de:	0f 85 fe 01 00 00	jne	0x100020be2
1000209e4:	f6 43 50 04	testb	$4, 80(%rbx)
1000209e8:	0f 84 fd 01 00 00	je	0x100020beb
1000209ee:	48 8d 43 18	leaq	24(%rbx), %rax
1000209f2:	48 8b 08	movq	(%rax), %rcx
1000209f5:	48 85 c9	testq	%rcx, %rcx
1000209f8:	74 08	je	0x100020a02
1000209fa:	48 8b 53 20	movq	32(%rbx), %rdx
1000209fe:	48 89 51 20	movq	%rdx, 32(%rcx)
100020a02:	48 8b 53 20	movq	32(%rbx), %rdx
100020a06:	48 89 0a	movq	%rcx, (%rdx)
100020a09:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100020a0d:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100020a11:	49 8b 8c 24 b0 03 00 00	movq	944(%r12), %rcx
100020a19:	4a 8b 94 e9 a0 02 00 00	movq	672(%rcx,%r13,8), %rdx
100020a21:	48 89 53 18	movq	%rdx, 24(%rbx)
100020a25:	48 85 d2	testq	%rdx, %rdx
100020a28:	74 04	je	0x100020a2e
100020a2a:	48 89 42 20	movq	%rax, 32(%rdx)
100020a2e:	4a 8d 04 e9	leaq	(%rcx,%r13,8), %rax
100020a32:	48 05 a0 02 00 00	addq	$672, %rax
100020a38:	48 89 18	movq	%rbx, (%rax)
100020a3b:	48 89 43 20	movq	%rax, 32(%rbx)
100020a3f:	4c 89 fb	movq	%r15, %rbx
100020a42:	4d 85 ff	testq	%r15, %r15
100020a45:	75 89	jne	0x1000209d0
100020a47:	49 ff c5	incq	%r13
100020a4a:	49 83 fd 1f	cmpq	$31, %r13
100020a4e:	0f 85 6f ff ff ff	jne	0x1000209c3
100020a54:	49 63 44 24 34	movslq	52(%r12), %rax
100020a59:	49 89 44 24 68	movq	%rax, 104(%r12)
100020a5e:	41 8b 84 24 b8 03 00 00	movl	952(%r12), %eax
100020a66:	41 89 44 24 30	movl	%eax, 48(%r12)
100020a6b:	41 0f b6 54 24 58	movzbl	88(%r12), %edx
100020a71:	48 83 e2 02	andq	$2, %rdx
100020a75:	0f 84 46 01 00 00	je	0x100020bc1
100020a7b:	41 c7 84 24 b8 03 00 00 00 00 00 00	movl	$0, 952(%r12)
100020a87:	41 80 8c 24 09 04 00 00 08	orb	$8, 1033(%r12)
100020a90:	4c 89 e7	movq	%r12, %rdi
100020a93:	e8 41 a2 00 00	callq	0x10002acd9
100020a98:	48 8b 7d d0	movq	-48(%rbp), %rdi
100020a9c:	be 05 00 00 00	movl	$5, %esi
100020aa1:	e8 8f fc ff ff	callq	0x100020735
100020aa6:	49 8d 44 24 08	leaq	8(%r12), %rax
100020aab:	49 8b 4c 24 08	movq	8(%r12), %rcx
100020ab0:	48 85 c9	testq	%rcx, %rcx
100020ab3:	74 09	je	0x100020abe
100020ab5:	49 8b 54 24 10	movq	16(%r12), %rdx
100020aba:	48 89 51 10	movq	%rdx, 16(%rcx)
100020abe:	49 8b 54 24 10	movq	16(%r12), %rdx
100020ac3:	48 89 0a	movq	%rcx, (%rdx)
100020ac6:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100020aca:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100020ace:	4d 89 b4 24 c8 00 00 00	movq	%r14, 200(%r12)
100020ad6:	4d 89 a6 d0 03 00 00	movq	%r12, 976(%r14)
100020add:	4c 89 f7	movq	%r14, %rdi
100020ae0:	4c 89 e6	movq	%r12, %rsi
100020ae3:	e8 62 a4 00 00	callq	0x10002af4a
100020ae8:	4c 89 f7	movq	%r14, %rdi
100020aeb:	be 16 00 00 00	movl	$22, %esi
100020af0:	e8 40 fc ff ff	callq	0x100020735
100020af5:	41 8b 7c 24 30	movl	48(%r12), %edi
100020afa:	e8 23 c6 01 00	callq	0x10003d122
100020aff:	49 89 84 24 98 03 00 00	movq	%rax, 920(%r12)
100020b07:	41 8b 7c 24 30	movl	48(%r12), %edi
100020b0c:	e8 20 c6 01 00	callq	0x10003d131
100020b11:	49 89 84 24 a0 03 00 00	movq	%rax, 928(%r12)
100020b19:	49 c7 84 24 e8 03 00 00 00 00 00 00	movq	$0, 1000(%r12)
100020b25:	48 8d 05 7c 1c 04 00	leaq	269436(%rip), %rax
100020b2c:	48 8b 08	movq	(%rax), %rcx
100020b2f:	4d 8d 84 24 f8 00 00 00	leaq	248(%r12), %r8
100020b37:	41 b9 00 20 00 00	movl	$8192, %r9d
100020b3d:	4c 89 e7	movq	%r12, %rdi
100020b40:	be 01 00 00 00	movl	$1, %esi
100020b45:	31 d2	xorl	%edx, %edx
100020b47:	e8 ff 01 ff ff	callq	0x100010d4b
100020b4c:	41 f6 84 24 c0 03 00 00 02	testb	$2, 960(%r12)
100020b55:	74 08	je	0x100020b5f
100020b57:	4c 89 e7	movq	%r12, %rdi
100020b5a:	e8 b1 a3 00 00	callq	0x10002af10
100020b5f:	49 8b bc 24 c8 03 00 00	movq	968(%r12), %rdi
100020b67:	e8 84 15 02 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100020b6c:	a9 df ff ff ff	testl	$4294967263, %eax
100020b71:	75 65	jne	0x100020bd8
100020b73:	49 8b bc 24 c8 03 00 00	movq	968(%r12), %rdi
100020b7b:	e8 7c 15 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100020b80:	49 c7 84 24 c8 03 00 00 00 00 00 00	movq	$0, 968(%r12)
100020b8c:	49 8b 74 24 68	movq	104(%r12), %rsi
100020b91:	bf 34 00 00 22	movl	$570425396, %edi
100020b96:	e8 34 c3 fe ff	callq	0x10000cecf
100020b9b:	49 8b 7c 24 68	movq	104(%r12), %rdi
100020ba0:	90	nop
100020ba1:	0f 1f 40 00	nopl	(%rax)
100020ba5:	4c 89 e7	movq	%r12, %rdi
100020ba8:	be 15 00 00 00	movl	$21, %esi
100020bad:	e8 83 fb ff ff	callq	0x100020735
100020bb2:	48 83 c4 08	addq	$8, %rsp
100020bb6:	5b	popq	%rbx
100020bb7:	41 5c	popq	%r12
100020bb9:	41 5d	popq	%r13
100020bbb:	41 5e	popq	%r14
100020bbd:	41 5f	popq	%r15
100020bbf:	5d	popq	%rbp
100020bc0:	c3	retq
100020bc1:	48 d1 ea	shrq	%rdx
100020bc4:	48 8d 3d 3d f8 ff ff	leaq	-1987(%rip), %rdi
100020bcb:	4c 89 e6	movq	%r12, %rsi
100020bce:	e8 d5 0b 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100020bd3:	e9 a3 fe ff ff	jmp	0x100020a7b
100020bd8:	48 63 f8	movslq	%eax, %rdi
100020bdb:	e8 c2 0b 02 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100020be0:	eb 91	jmp	0x100020b73
100020be2:	48 8d 3d c3 c9 02 00	leaq	182723(%rip), %rdi ## literal pool for: "attempt to migrate managed endpoint"
100020be9:	eb 07	jmp	0x100020bf2
100020beb:	48 8d 3d de c9 02 00	leaq	182750(%rip), %rdi ## literal pool for: "attempt to migrate inactive endpoint"
100020bf2:	31 c0	xorl	%eax, %eax
100020bf4:	e8 19 38 01 00	callq	0x100034412
100020bf9:	48 8d 3d 14 c9 02 00	leaq	182548(%rip), %rdi ## literal pool for: "metamorphosis of a domain with no endpoint destination"
100020c00:	eb f0	jmp	0x100020bf2
100020c02:	55	pushq	%rbp
100020c03:	48 89 e5	movq	%rsp, %rbp
100020c06:	53	pushq	%rbx
100020c07:	50	pushq	%rax
100020c08:	48 89 fb	movq	%rdi, %rbx
100020c0b:	48 8d 15 8e c0 02 00	leaq	180366(%rip), %rdx ## literal pool for: "slaying domain"
100020c12:	be 05 00 00 00	movl	$5, %esi
100020c17:	31 c0	xorl	%eax, %eax
100020c19:	e8 0b f8 ff ff	callq	0x100020429
100020c1e:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
100020c25:	a9 03 02 00 00	testl	$515, %eax
100020c2a:	74 1c	je	0x100020c48
100020c2c:	48 8d 15 7c c0 02 00	leaq	180348(%rip), %rdx ## literal pool for: "already shutting down or slain"
100020c33:	48 89 df	movq	%rbx, %rdi
100020c36:	be 05 00 00 00	movl	$5, %esi
100020c3b:	31 c0	xorl	%eax, %eax
100020c3d:	48 83 c4 08	addq	$8, %rsp
100020c41:	5b	popq	%rbx
100020c42:	5d	popq	%rbp
100020c43:	e9 e1 f7 ff ff	jmp	0x100020429
100020c48:	48 83 bb 88 00 00 00 00	cmpq	$0, 136(%rbx)
100020c50:	74 3d	je	0x100020c8f
100020c52:	48 89 df	movq	%rbx, %rdi
100020c55:	be 0a 00 00 00	movl	$10, %esi
100020c5a:	e8 2b 20 ff ff	callq	0x100012c8a
100020c5f:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
100020c66:	48 89 fe	movq	%rdi, %rsi
100020c69:	e8 08 0d 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100020c6e:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
100020c75:	e8 02 0d 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100020c7a:	48 c7 83 88 00 00 00 00 00 00 00	movq	$0, 136(%rbx)
100020c85:	c7 83 90 00 00 00 00 00 00 00	movl	$0, 144(%rbx)
100020c8f:	48 83 bb 80 00 00 00 00	cmpq	$0, 128(%rbx)
100020c97:	74 57	je	0x100020cf0
100020c99:	66 83 bb 08 04 00 00 00	cmpw	$0, 1032(%rbx)
100020ca1:	79 29	jns	0x100020ccc
100020ca3:	48 8d 15 24 c0 02 00	leaq	180260(%rip), %rdx ## literal pool for: "uncorking exec source for disposal"
100020caa:	48 89 df	movq	%rbx, %rdi
100020cad:	be 05 00 00 00	movl	$5, %esi
100020cb2:	31 c0	xorl	%eax, %eax
100020cb4:	e8 70 f7 ff ff	callq	0x100020429
100020cb9:	48 8b bb 80 00 00 00	movq	128(%rbx), %rdi
100020cc0:	e8 fd 0b 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100020cc5:	80 a3 09 04 00 00 7f	andb	$127, 1033(%rbx)
100020ccc:	48 89 df	movq	%rbx, %rdi
100020ccf:	be 0c 00 00 00	movl	$12, %esi
100020cd4:	e8 b1 1f ff ff	callq	0x100012c8a
100020cd9:	48 8b bb 80 00 00 00	movq	128(%rbx), %rdi
100020ce0:	e8 73 0c 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100020ce5:	48 c7 83 80 00 00 00 00 00 00 00	movq	$0, 128(%rbx)
100020cf0:	80 8b 08 04 00 00 02	orb	$2, 1032(%rbx)
100020cf7:	e8 fe d7 fe ff	callq	0x10000e4fa
100020cfc:	48 8d 15 26 00 00 00	leaq	38(%rip), %rdx
100020d03:	48 89 c7	movq	%rax, %rdi
100020d06:	48 89 de	movq	%rbx, %rsi
100020d09:	48 83 c4 08	addq	$8, %rsp
100020d0d:	5b	popq	%rbx
100020d0e:	5d	popq	%rbp
100020d0f:	e9 cc 0b 02 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
100020d14:	55	pushq	%rbp
100020d15:	48 89 e5	movq	%rsp, %rbp
100020d18:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
100020d1f:	a9 03 02 00 00	testl	$515, %eax
100020d24:	0f 95 c0	setne	%al
100020d27:	5d	popq	%rbp
100020d28:	c3	retq
100020d29:	55	pushq	%rbp
100020d2a:	48 89 e5	movq	%rsp, %rbp
100020d2d:	41 57	pushq	%r15
100020d2f:	41 56	pushq	%r14
100020d31:	41 55	pushq	%r13
100020d33:	41 54	pushq	%r12
100020d35:	53	pushq	%rbx
100020d36:	48 83 ec 18	subq	$24, %rsp
100020d3a:	f6 87 08 04 00 00 01	testb	$1, 1032(%rdi)
100020d41:	0f 85 f9 04 00 00	jne	0x100021240
100020d47:	49 89 ff	movq	%rdi, %r15
100020d4a:	48 8d 15 e7 d3 02 00	leaq	185319(%rip), %rdx ## literal pool for: "shutting down"
100020d51:	be 05 00 00 00	movl	$5, %esi
100020d56:	31 c0	xorl	%eax, %eax
100020d58:	e8 cc f6 ff ff	callq	0x100020429
100020d5d:	48 8d 05 3c 14 04 00	leaq	267324(%rip), %rax
100020d64:	49 39 47 60	cmpq	%rax, 96(%r15)
100020d68:	75 05	jne	0x100020d6f
100020d6a:	e8 7c c8 fe ff	callq	0x10000d5eb
100020d6f:	e8 c4 0d 02 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
100020d74:	49 89 87 f0 00 00 00	movq	%rax, 240(%r15)
100020d7b:	41 80 8f 08 04 00 00 02	orb	$2, 1032(%r15)
100020d83:	4c 8d 25 8b d4 02 00	leaq	185483(%rip), %r12 ## literal pool for: "removing unmanaged endpoint: %s"
100020d8a:	4c 8d 2d 05 d4 02 00	leaq	185349(%rip), %r13 ## literal pool for: "Removing unexpected non-dynamic endpoint: %s"
100020d91:	31 c0	xorl	%eax, %eax
100020d93:	49 8b 9c c7 68 02 00 00	movq	616(%r15,%rax,8), %rbx
100020d9b:	48 85 db	testq	%rbx, %rbx
100020d9e:	0f 84 bf 01 00 00	je	0x100020f63
100020da4:	48 89 45 c0	movq	%rax, -64(%rbp)
100020da8:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
100020daf:	4c 89 ff	movq	%r15, %rdi
100020db2:	be 05 00 00 00	movl	$5, %esi
100020db7:	48 8d 15 88 d3 02 00	leaq	185224(%rip), %rdx ## literal pool for: "removing unmanaged service: %s"
100020dbe:	48 89 4d c8	movq	%rcx, -56(%rbp)
100020dc2:	31 c0	xorl	%eax, %eax
100020dc4:	e8 60 f6 ff ff	callq	0x100020429
100020dc9:	4c 89 ff	movq	%r15, %rdi
100020dcc:	48 89 de	movq	%rbx, %rsi
100020dcf:	e8 3e a9 00 00	callq	0x10002b712
100020dd4:	48 89 5d d0	movq	%rbx, -48(%rbp)
100020dd8:	48 83 bb 88 00 00 00 00	cmpq	$0, 136(%rbx)
100020de0:	74 57	je	0x100020e39
100020de2:	4c 89 ff	movq	%r15, %rdi
100020de5:	be 03 00 00 00	movl	$3, %esi
100020dea:	48 8d 15 74 d3 02 00	leaq	185204(%rip), %rdx ## literal pool for: "Unmanaged service with non-dynamic endpoints: %s"
100020df1:	48 8b 4d c8	movq	-56(%rbp), %rcx
100020df5:	31 c0	xorl	%eax, %eax
100020df7:	e8 2d f6 ff ff	callq	0x100020429
100020dfc:	48 8b 45 d0	movq	-48(%rbp), %rax
100020e00:	4c 8b b0 88 00 00 00	movq	136(%rax), %r14
100020e07:	4d 85 f6	testq	%r14, %r14
100020e0a:	74 2d	je	0x100020e39
100020e0c:	49 8b 5e 08	movq	8(%r14), %rbx
100020e10:	49 8d 8e 90 00 00 00	leaq	144(%r14), %rcx
100020e17:	4c 89 ff	movq	%r15, %rdi
100020e1a:	be 03 00 00 00	movl	$3, %esi
100020e1f:	4c 89 ea	movq	%r13, %rdx
100020e22:	31 c0	xorl	%eax, %eax
100020e24:	e8 00 f6 ff ff	callq	0x100020429
100020e29:	4c 89 f7	movq	%r14, %rdi
100020e2c:	e8 20 ae 01 00	callq	0x10003bc51
100020e31:	49 89 de	movq	%rbx, %r14
100020e34:	48 85 db	testq	%rbx, %rbx
100020e37:	75 d3	jne	0x100020e0c
100020e39:	48 8b 45 d0	movq	-48(%rbp), %rax
100020e3d:	48 83 b8 a0 00 00 00 00	cmpq	$0, 160(%rax)
100020e45:	4c 8d 2d a2 d3 02 00	leaq	185250(%rip), %r13 ## literal pool for: "Removing unexpected event endpoint: %s"
100020e4c:	74 57	je	0x100020ea5
100020e4e:	4c 89 ff	movq	%r15, %rdi
100020e51:	be 03 00 00 00	movl	$3, %esi
100020e56:	48 8d 15 66 d3 02 00	leaq	185190(%rip), %rdx ## literal pool for: "Unmanaged service with event endpoints: %s"
100020e5d:	48 8b 4d c8	movq	-56(%rbp), %rcx
100020e61:	31 c0	xorl	%eax, %eax
100020e63:	e8 c1 f5 ff ff	callq	0x100020429
100020e68:	48 8b 45 d0	movq	-48(%rbp), %rax
100020e6c:	48 8b 98 a0 00 00 00	movq	160(%rax), %rbx
100020e73:	48 85 db	testq	%rbx, %rbx
100020e76:	74 2d	je	0x100020ea5
100020e78:	4c 8b 73 08	movq	8(%rbx), %r14
100020e7c:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
100020e83:	4c 89 ff	movq	%r15, %rdi
100020e86:	be 03 00 00 00	movl	$3, %esi
100020e8b:	4c 89 ea	movq	%r13, %rdx
100020e8e:	31 c0	xorl	%eax, %eax
100020e90:	e8 94 f5 ff ff	callq	0x100020429
100020e95:	48 89 df	movq	%rbx, %rdi
100020e98:	e8 b4 ad 01 00	callq	0x10003bc51
100020e9d:	4c 89 f3	movq	%r14, %rbx
100020ea0:	4d 85 f6	testq	%r14, %r14
100020ea3:	75 d3	jne	0x100020e78
100020ea5:	48 8b 45 d0	movq	-48(%rbp), %rax
100020ea9:	48 8b 98 90 00 00 00	movq	144(%rax), %rbx
100020eb0:	48 85 db	testq	%rbx, %rbx
100020eb3:	74 2d	je	0x100020ee2
100020eb5:	4c 8b 73 08	movq	8(%rbx), %r14
100020eb9:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
100020ec0:	4c 89 ff	movq	%r15, %rdi
100020ec3:	be 05 00 00 00	movl	$5, %esi
100020ec8:	4c 89 e2	movq	%r12, %rdx
100020ecb:	31 c0	xorl	%eax, %eax
100020ecd:	e8 57 f5 ff ff	callq	0x100020429
100020ed2:	48 89 df	movq	%rbx, %rdi
100020ed5:	e8 77 ad 01 00	callq	0x10003bc51
100020eda:	4c 89 f3	movq	%r14, %rbx
100020edd:	4d 85 f6	testq	%r14, %r14
100020ee0:	75 d3	jne	0x100020eb5
100020ee2:	48 8b 45 d0	movq	-48(%rbp), %rax
100020ee6:	48 8b 98 98 00 00 00	movq	152(%rax), %rbx
100020eed:	48 85 db	testq	%rbx, %rbx
100020ef0:	4c 8d 25 3e d3 02 00	leaq	185150(%rip), %r12 ## literal pool for: "removing unmanaged pid-local endpoint: %s"
100020ef7:	4c 8d 2d 98 d2 02 00	leaq	184984(%rip), %r13 ## literal pool for: "Removing unexpected non-dynamic endpoint: %s"
100020efe:	74 2d	je	0x100020f2d
100020f00:	4c 8b 73 08	movq	8(%rbx), %r14
100020f04:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
100020f0b:	4c 89 ff	movq	%r15, %rdi
100020f0e:	be 05 00 00 00	movl	$5, %esi
100020f13:	4c 89 e2	movq	%r12, %rdx
100020f16:	31 c0	xorl	%eax, %eax
100020f18:	e8 0c f5 ff ff	callq	0x100020429
100020f1d:	48 89 df	movq	%rbx, %rdi
100020f20:	e8 2c ad 01 00	callq	0x10003bc51
100020f25:	4c 89 f3	movq	%r14, %rbx
100020f28:	4d 85 f6	testq	%r14, %r14
100020f2b:	75 d3	jne	0x100020f00
100020f2d:	48 8b 75 d0	movq	-48(%rbp), %rsi
100020f31:	66 83 be 1c 01 00 00 03	cmpw	$3, 284(%rsi)
100020f39:	0f 8d e1 02 00 00	jge	0x100021220
100020f3f:	4c 89 ff	movq	%r15, %rdi
100020f42:	e8 35 a9 00 00	callq	0x10002b87c
100020f47:	48 8b 45 c0	movq	-64(%rbp), %rax
100020f4b:	49 8b 9c c7 68 02 00 00	movq	616(%r15,%rax,8), %rbx
100020f53:	48 85 db	testq	%rbx, %rbx
100020f56:	4c 8d 25 b8 d2 02 00	leaq	185016(%rip), %r12 ## literal pool for: "removing unmanaged endpoint: %s"
100020f5d:	0f 85 45 fe ff ff	jne	0x100020da8
100020f63:	48 ff c0	incq	%rax
100020f66:	48 83 f8 07	cmpq	$7, %rax
100020f6a:	0f 85 23 fe ff ff	jne	0x100020d93
100020f70:	4d 8b a7 28 01 00 00	movq	296(%r15), %r12
100020f77:	4d 85 e4	testq	%r12, %r12
100020f7a:	74 45	je	0x100020fc1
100020f7c:	4c 8d 35 02 d3 02 00	leaq	185090(%rip), %r14 ## literal pool for: "removing semi-active service: %s"
100020f83:	4c 89 e3	movq	%r12, %rbx
100020f86:	4d 8b 64 24 58	movq	88(%r12), %r12
100020f8b:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
100020f92:	4c 89 ff	movq	%r15, %rdi
100020f95:	be 05 00 00 00	movl	$5, %esi
100020f9a:	4c 89 f2	movq	%r14, %rdx
100020f9d:	31 c0	xorl	%eax, %eax
100020f9f:	e8 85 f4 ff ff	callq	0x100020429
100020fa4:	4c 89 ff	movq	%r15, %rdi
100020fa7:	48 89 de	movq	%rbx, %rsi
100020faa:	e8 9d 09 00 00	callq	0x10002194c
100020faf:	85 c0	testl	%eax, %eax
100020fb1:	74 09	je	0x100020fbc
100020fb3:	83 f8 24	cmpl	$36, %eax
100020fb6:	0f 85 7b 02 00 00	jne	0x100021237
100020fbc:	4d 85 e4	testq	%r12, %r12
100020fbf:	75 c2	jne	0x100020f83
100020fc1:	4c 8d 35 04 d3 02 00	leaq	185092(%rip), %r14 ## literal pool for: "removing active service: %s"
100020fc8:	31 db	xorl	%ebx, %ebx
100020fca:	4d 8b ac df 00 02 00 00	movq	512(%r15,%rbx,8), %r13
100020fd2:	4d 85 ed	testq	%r13, %r13
100020fd5:	74 49	je	0x100021020
100020fd7:	4d 89 ec	movq	%r13, %r12
100020fda:	4d 8b 6d 48	movq	72(%r13), %r13
100020fde:	49 8d 8c 24 18 05 00 00	leaq	1304(%r12), %rcx
100020fe6:	4c 89 ff	movq	%r15, %rdi
100020fe9:	be 05 00 00 00	movl	$5, %esi
100020fee:	4c 89 f2	movq	%r14, %rdx
100020ff1:	31 c0	xorl	%eax, %eax
100020ff3:	e8 31 f4 ff ff	callq	0x100020429
100020ff8:	4c 89 ff	movq	%r15, %rdi
100020ffb:	4c 89 e6	movq	%r12, %rsi
100020ffe:	e8 49 09 00 00	callq	0x10002194c
100021003:	85 c0	testl	%eax, %eax
100021005:	74 cb	je	0x100020fd2
100021007:	83 f8 24	cmpl	$36, %eax
10002100a:	74 c6	je	0x100020fd2
10002100c:	48 63 d0	movslq	%eax, %rdx
10002100f:	48 8d 3d f1 72 ff ff	leaq	-36111(%rip), %rdi
100021016:	4c 89 e6	movq	%r12, %rsi
100021019:	e8 8a 07 02 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002101e:	eb b2	jmp	0x100020fd2
100021020:	48 ff c3	incq	%rbx
100021023:	48 83 fb 0d	cmpq	$13, %rbx
100021027:	75 a1	jne	0x100020fca
100021029:	45 31 f6	xorl	%r14d, %r14d
10002102c:	4b 8b 9c f7 30 01 00 00	movq	304(%r15,%r14,8), %rbx
100021034:	48 85 db	testq	%rbx, %rbx
100021037:	74 2b	je	0x100021064
100021039:	48 89 de	movq	%rbx, %rsi
10002103c:	48 8b 5b 68	movq	104(%rbx), %rbx
100021040:	66 83 be 1c 01 00 00 00	cmpw	$0, 284(%rsi)
100021048:	75 ea	jne	0x100021034
10002104a:	f6 86 64 01 00 00 01	testb	$1, 356(%rsi)
100021051:	75 e1	jne	0x100021034
100021053:	4c 89 ff	movq	%r15, %rdi
100021056:	e8 f1 08 00 00	callq	0x10002194c
10002105b:	85 c0	testl	%eax, %eax
10002105d:	74 d5	je	0x100021034
10002105f:	e9 ca 01 00 00	jmp	0x10002122e
100021064:	49 ff c6	incq	%r14
100021067:	49 83 fe 17	cmpq	$23, %r14
10002106b:	75 bf	jne	0x10002102c
10002106d:	49 8d bf e8 01 00 00	leaq	488(%r15), %rdi
100021074:	48 8d 35 f5 9f 03 00	leaq	237557(%rip), %rsi
10002107b:	e8 a8 0b 02 00	callq	0x100041c28 ## symbol stub for: _os_map_str_clear
100021080:	45 31 f6	xorl	%r14d, %r14d
100021083:	4b 8b bc f7 a0 02 00 00	movq	672(%r15,%r14,8), %rdi
10002108b:	48 85 ff	testq	%rdi, %rdi
10002108e:	74 18	je	0x1000210a8
100021090:	48 8b 5f 18	movq	24(%rdi), %rbx
100021094:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
100021099:	74 05	je	0x1000210a0
10002109b:	e8 c3 b8 00 00	callq	0x10002c963
1000210a0:	48 89 df	movq	%rbx, %rdi
1000210a3:	48 85 db	testq	%rbx, %rbx
1000210a6:	75 e8	jne	0x100021090
1000210a8:	49 ff c6	incq	%r14
1000210ab:	49 83 fe 1f	cmpq	$31, %r14
1000210af:	75 d2	jne	0x100021083
1000210b1:	49 8b 87 c8 00 00 00	movq	200(%r15), %rax
1000210b8:	48 85 c0	testq	%rax, %rax
1000210bb:	74 50	je	0x10002110d
1000210bd:	4c 39 b8 d0 03 00 00	cmpq	%r15, 976(%rax)
1000210c4:	75 47	jne	0x10002110d
1000210c6:	48 c7 80 d0 03 00 00 00 00 00 00	movq	$0, 976(%rax)
1000210d1:	80 88 09 04 00 00 10	orb	$16, 1033(%rax)
1000210d8:	49 8b bf c8 00 00 00	movq	200(%r15), %rdi
1000210df:	be 01 00 00 00	movl	$1, %esi
1000210e4:	e8 1f f4 ff ff	callq	0x100020508
1000210e9:	48 89 c3	movq	%rax, %rbx
1000210ec:	48 8d 15 17 d2 02 00	leaq	184855(%rip), %rdx ## literal pool for: "Pending cocoon on parent domain %s"
1000210f3:	4c 89 ff	movq	%r15, %rdi
1000210f6:	be 05 00 00 00	movl	$5, %esi
1000210fb:	48 89 c1	movq	%rax, %rcx
1000210fe:	31 c0	xorl	%eax, %eax
100021100:	e8 24 f3 ff ff	callq	0x100020429
100021105:	48 89 df	movq	%rbx, %rdi
100021108:	e8 23 09 02 00	callq	0x100041a30 ## symbol stub for: _free
10002110d:	49 8b 9f 20 01 00 00	movq	288(%r15), %rbx
100021114:	48 85 db	testq	%rbx, %rbx
100021117:	74 0e	je	0x100021127
100021119:	48 89 df	movq	%rbx, %rdi
10002111c:	e8 e1 fa ff ff	callq	0x100020c02
100021121:	48 8b 5b 08	movq	8(%rbx), %rbx
100021125:	eb ed	jmp	0x100021114
100021127:	41 80 8f 08 04 00 00 01	orb	$1, 1032(%r15)
10002112f:	49 83 bf 88 00 00 00 00	cmpq	$0, 136(%r15)
100021137:	74 3e	je	0x100021177
100021139:	4c 89 ff	movq	%r15, %rdi
10002113c:	be 0a 00 00 00	movl	$10, %esi
100021141:	e8 44 1b ff ff	callq	0x100012c8a
100021146:	49 8b bf 88 00 00 00	movq	136(%r15), %rdi
10002114d:	48 89 fe	movq	%rdi, %rsi
100021150:	e8 21 08 02 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100021155:	49 8b bf 88 00 00 00	movq	136(%r15), %rdi
10002115c:	e8 1b 08 02 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100021161:	49 c7 87 88 00 00 00 00 00 00 00	movq	$0, 136(%r15)
10002116c:	41 c7 87 90 00 00 00 00 00 00 00	movl	$0, 144(%r15)
100021177:	49 83 bf 80 00 00 00 00	cmpq	$0, 128(%r15)
10002117f:	74 59	je	0x1000211da
100021181:	66 41 83 bf 08 04 00 00 00	cmpw	$0, 1032(%r15)
10002118a:	79 2a	jns	0x1000211b6
10002118c:	48 8d 15 3b bb 02 00	leaq	179003(%rip), %rdx ## literal pool for: "uncorking exec source for disposal"
100021193:	4c 89 ff	movq	%r15, %rdi
100021196:	be 05 00 00 00	movl	$5, %esi
10002119b:	31 c0	xorl	%eax, %eax
10002119d:	e8 87 f2 ff ff	callq	0x100020429
1000211a2:	49 8b bf 80 00 00 00	movq	128(%r15), %rdi
1000211a9:	e8 14 07 02 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
1000211ae:	41 80 a7 09 04 00 00 7f	andb	$127, 1033(%r15)
1000211b6:	4c 89 ff	movq	%r15, %rdi
1000211b9:	be 0c 00 00 00	movl	$12, %esi
1000211be:	e8 c7 1a ff ff	callq	0x100012c8a
1000211c3:	49 8b bf 80 00 00 00	movq	128(%r15), %rdi
1000211ca:	e8 89 07 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000211cf:	49 c7 87 80 00 00 00 00 00 00 00	movq	$0, 128(%r15)
1000211da:	4c 89 ff	movq	%r15, %rdi
1000211dd:	be 01 00 00 00	movl	$1, %esi
1000211e2:	e8 3c f4 ff ff	callq	0x100020623
1000211e7:	48 8d 05 b2 0f 04 00	leaq	266162(%rip), %rax
1000211ee:	49 39 47 60	cmpq	%rax, 96(%r15)
1000211f2:	75 11	jne	0x100021205
1000211f4:	48 8b 3d 65 23 04 00	movq	271205(%rip), %rdi
1000211fb:	48 85 ff	testq	%rdi, %rdi
1000211fe:	74 05	je	0x100021205
100021200:	e8 53 07 02 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100021205:	4c 89 ff	movq	%r15, %rdi
100021208:	be 0b 00 00 00	movl	$11, %esi
10002120d:	48 83 c4 18	addq	$24, %rsp
100021211:	5b	popq	%rbx
100021212:	41 5c	popq	%r12
100021214:	41 5d	popq	%r13
100021216:	41 5e	popq	%r14
100021218:	41 5f	popq	%r15
10002121a:	5d	popq	%rbp
10002121b:	e9 15 f5 ff ff	jmp	0x100020735
100021220:	48 8d 3d 38 d0 02 00	leaq	184376(%rip), %rdi ## literal pool for: "extra activation on unmanaged service"
100021227:	31 c0	xorl	%eax, %eax
100021229:	e8 e4 31 01 00	callq	0x100034412
10002122e:	48 8d 3d b3 d0 02 00	leaq	184499(%rip), %rdi ## literal pool for: "failed to remove inactive service"
100021235:	eb f0	jmp	0x100021227
100021237:	48 8d 3d 68 d0 02 00	leaq	184424(%rip), %rdi ## literal pool for: "failure to remove semi-active service"
10002123e:	eb e7	jmp	0x100021227
100021240:	48 8d 3d c0 ce 02 00	leaq	184000(%rip), %rdi ## literal pool for: "multiple invocations of death handler for domain"
100021247:	eb de	jmp	0x100021227
100021249:	55	pushq	%rbp
10002124a:	48 89 e5	movq	%rsp, %rbp
10002124d:	41 57	pushq	%r15
10002124f:	41 56	pushq	%r14
100021251:	53	pushq	%rbx
100021252:	50	pushq	%rax
100021253:	41 89 f6	movl	%esi, %r14d
100021256:	48 89 fb	movq	%rdi, %rbx
100021259:	44 8b bf a8 00 00 00	movl	168(%rdi), %r15d
100021260:	44 89 f8	movl	%r15d, %eax
100021263:	ff c0	incl	%eax
100021265:	66 89 87 a8 00 00 00	movw	%ax, 168(%rdi)
10002126c:	e8 49 00 00 00	callq	0x1000212ba
100021271:	48 89 df	movq	%rbx, %rdi
100021274:	44 89 f6	movl	%r14d, %esi
100021277:	e8 74 f4 ff ff	callq	0x1000206f0
10002127c:	66 45 85 ff	testw	%r15w, %r15w
100021280:	74 0b	je	0x10002128d
100021282:	48 83 c4 08	addq	$8, %rsp
100021286:	5b	popq	%rbx
100021287:	41 5e	popq	%r14
100021289:	41 5f	popq	%r15
10002128b:	5d	popq	%rbp
10002128c:	c3	retq
10002128d:	48 8d 05 a4 10 04 00	leaq	266404(%rip), %rax
100021294:	48 39 43 60	cmpq	%rax, 96(%rbx)
100021298:	74 e8	je	0x100021282
10002129a:	48 8d 15 50 ba 02 00	leaq	178768(%rip), %rdx ## literal pool for: "entering bootstrap mode"
1000212a1:	48 89 df	movq	%rbx, %rdi
1000212a4:	be 05 00 00 00	movl	$5, %esi
1000212a9:	31 c0	xorl	%eax, %eax
1000212ab:	48 83 c4 08	addq	$8, %rsp
1000212af:	5b	popq	%rbx
1000212b0:	41 5e	popq	%r14
1000212b2:	41 5f	popq	%r15
1000212b4:	5d	popq	%rbp
1000212b5:	e9 6f f1 ff ff	jmp	0x100020429
1000212ba:	55	pushq	%rbp
1000212bb:	48 89 e5	movq	%rsp, %rbp
1000212be:	8b 87 98 00 00 00	movl	152(%rdi), %eax
1000212c4:	8d 48 01	leal	1(%rax), %ecx
1000212c7:	89 8f 98 00 00 00	movl	%ecx, 152(%rdi)
1000212cd:	85 c0	testl	%eax, %eax
1000212cf:	78 0b	js	0x1000212dc
1000212d1:	be 14 00 00 00	movl	$20, %esi
1000212d6:	5d	popq	%rbp
1000212d7:	e9 14 f4 ff ff	jmp	0x1000206f0
1000212dc:	48 8d 3d 6b c1 02 00	leaq	180587(%rip), %rdi ## literal pool for: "underflow of external activation count during add"
1000212e3:	31 c0	xorl	%eax, %eax
1000212e5:	e8 28 31 01 00	callq	0x100034412
1000212ea:	55	pushq	%rbp
1000212eb:	48 89 e5	movq	%rsp, %rbp
1000212ee:	41 56	pushq	%r14
1000212f0:	53	pushq	%rbx
1000212f1:	41 89 f6	movl	%esi, %r14d
1000212f4:	48 89 fb	movq	%rdi, %rbx
1000212f7:	8b 87 a8 00 00 00	movl	168(%rdi), %eax
1000212fd:	89 c1	movl	%eax, %ecx
1000212ff:	ff c9	decl	%ecx
100021301:	66 89 8f a8 00 00 00	movw	%cx, 168(%rdi)
100021308:	66 83 f8 01	cmpw	$1, %ax
10002130c:	0f 87 a8 00 00 00	ja	0x1000213ba
100021312:	48 8d 05 1f 10 04 00	leaq	266271(%rip), %rax
100021319:	48 39 43 60	cmpq	%rax, 96(%rbx)
10002131d:	74 16	je	0x100021335
10002131f:	48 8d 15 e3 b9 02 00	leaq	178659(%rip), %rdx ## literal pool for: "exiting bootstrap mode"
100021326:	48 89 df	movq	%rbx, %rdi
100021329:	be 05 00 00 00	movl	$5, %esi
10002132e:	31 c0	xorl	%eax, %eax
100021330:	e8 f4 f0 ff ff	callq	0x100020429
100021335:	48 89 df	movq	%rbx, %rdi
100021338:	be 01 00 00 00	movl	$1, %esi
10002133d:	e8 41 f3 ff ff	callq	0x100020683
100021342:	48 89 df	movq	%rbx, %rdi
100021345:	e8 87 00 00 00	callq	0x1000213d1
10002134a:	48 8d 0d 4f 0e 04 00	leaq	265807(%rip), %rcx
100021351:	8b 83 08 04 00 00	movl	1032(%rbx), %eax
100021357:	48 39 4b 60	cmpq	%rcx, 96(%rbx)
10002135b:	75 27	jne	0x100021384
10002135d:	89 c1	movl	%eax, %ecx
10002135f:	81 e1 00 01 00 00	andl	$256, %ecx
100021365:	75 1d	jne	0x100021384
100021367:	48 8d 3d 12 c1 02 00	leaq	180498(%rip), %rdi ## literal pool for: "cache-tag"
10002136e:	e8 55 6b 01 00	callq	0x100037ec8
100021373:	b8 00 01 00 00	movl	$256, %eax
100021378:	0b 83 08 04 00 00	orl	1032(%rbx), %eax
10002137e:	89 83 08 04 00 00	movl	%eax, 1032(%rbx)
100021384:	a8 40	testb	$64, %al
100021386:	74 32	je	0x1000213ba
100021388:	48 89 df	movq	%rbx, %rdi
10002138b:	e8 a8 00 00 00	callq	0x100021438
100021390:	80 a3 08 04 00 00 bf	andb	$-65, 1032(%rbx)
100021397:	48 8b bb e8 03 00 00	movq	1000(%rbx), %rdi
10002139e:	48 85 ff	testq	%rdi, %rdi
1000213a1:	75 12	jne	0x1000213b5
1000213a3:	48 89 df	movq	%rbx, %rdi
1000213a6:	e8 c2 aa 00 00	callq	0x10002be6d
1000213ab:	48 89 c7	movq	%rax, %rdi
1000213ae:	48 89 83 e8 03 00 00	movq	%rax, 1000(%rbx)
1000213b5:	e8 a3 0d 01 00	callq	0x10003215d
1000213ba:	48 89 df	movq	%rbx, %rdi
1000213bd:	e8 a4 01 00 00	callq	0x100021566
1000213c2:	48 89 df	movq	%rbx, %rdi
1000213c5:	44 89 f6	movl	%r14d, %esi
1000213c8:	5b	popq	%rbx
1000213c9:	41 5e	popq	%r14
1000213cb:	5d	popq	%rbp
1000213cc:	e9 64 f3 ff ff	jmp	0x100020735
1000213d1:	55	pushq	%rbp
1000213d2:	48 89 e5	movq	%rsp, %rbp
1000213d5:	41 57	pushq	%r15
1000213d7:	41 56	pushq	%r14
1000213d9:	41 54	pushq	%r12
1000213db:	53	pushq	%rbx
1000213dc:	49 89 fe	movq	%rdi, %r14
1000213df:	45 31 ff	xorl	%r15d, %r15d
1000213e2:	4b 8b 9c fe 30 01 00 00	movq	304(%r14,%r15,8), %rbx
1000213ea:	48 85 db	testq	%rbx, %rbx
1000213ed:	74 37	je	0x100021426
1000213ef:	4c 8b 63 68	movq	104(%rbx), %r12
1000213f3:	48 89 df	movq	%rbx, %rdi
1000213f6:	be 19 00 00 00	movl	$25, %esi
1000213fb:	e8 ce 14 ff ff	callq	0x1000128ce
100021400:	83 bb 10 01 00 00 00	cmpl	$0, 272(%rbx)
100021407:	74 08	je	0x100021411
100021409:	48 89 df	movq	%rbx, %rdi
10002140c:	e8 3e af 00 00	callq	0x10002c34f
100021411:	48 89 df	movq	%rbx, %rdi
100021414:	be 19 00 00 00	movl	$25, %esi
100021419:	e8 33 15 ff ff	callq	0x100012951
10002141e:	4c 89 e3	movq	%r12, %rbx
100021421:	4d 85 e4	testq	%r12, %r12
100021424:	75 c9	jne	0x1000213ef
100021426:	49 ff c7	incq	%r15
100021429:	49 83 ff 17	cmpq	$23, %r15
10002142d:	75 b3	jne	0x1000213e2
10002142f:	5b	popq	%rbx
100021430:	41 5c	popq	%r12
100021432:	41 5e	popq	%r14
100021434:	41 5f	popq	%r15
100021436:	5d	popq	%rbp
100021437:	c3	retq
100021438:	55	pushq	%rbp
100021439:	48 89 e5	movq	%rsp, %rbp
10002143c:	41 57	pushq	%r15
10002143e:	41 56	pushq	%r14
100021440:	41 55	pushq	%r13
100021442:	41 54	pushq	%r12
100021444:	53	pushq	%rbx
100021445:	50	pushq	%rax
100021446:	8b 87 9c 00 00 00	movl	156(%rdi), %eax
10002144c:	83 e8 01	subl	$1, %eax
10002144f:	89 87 9c 00 00 00	movl	%eax, 156(%rdi)
100021455:	0f 82 d5 00 00 00	jb	0x100021530
10002145b:	0f 8f c0 00 00 00	jg	0x100021521
100021461:	48 89 fb	movq	%rdi, %rbx
100021464:	48 8d 05 cd 0e 04 00	leaq	265933(%rip), %rax
10002146b:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002146f:	74 16	je	0x100021487
100021471:	48 8d 15 2f c0 02 00	leaq	180271(%rip), %rdx ## literal pool for: "exiting ondemand mode"
100021478:	48 89 df	movq	%rbx, %rdi
10002147b:	be 05 00 00 00	movl	$5, %esi
100021480:	31 c0	xorl	%eax, %eax
100021482:	e8 a2 ef ff ff	callq	0x100020429
100021487:	45 31 e4	xorl	%r12d, %r12d
10002148a:	45 31 ed	xorl	%r13d, %r13d
10002148d:	49 89 df	movq	%rbx, %r15
100021490:	4a 8b 9c eb 30 01 00 00	movq	304(%rbx,%r13,8), %rbx
100021498:	48 85 db	testq	%rbx, %rbx
10002149b:	74 74	je	0x100021511
10002149d:	4c 8b 73 68	movq	104(%rbx), %r14
1000214a1:	83 bb 14 01 00 00 00	cmpl	$0, 276(%rbx)
1000214a8:	74 5f	je	0x100021509
1000214aa:	48 89 df	movq	%rbx, %rdi
1000214ad:	be 19 00 00 00	movl	$25, %esi
1000214b2:	e8 17 14 ff ff	callq	0x1000128ce
1000214b7:	8b b3 14 01 00 00	movl	276(%rbx), %esi
1000214bd:	48 89 df	movq	%rbx, %rdi
1000214c0:	e8 ff 99 ff ff	callq	0x10001aec4
1000214c5:	89 c1	movl	%eax, %ecx
1000214c7:	83 e1 fe	andl	$-2, %ecx
1000214ca:	83 f9 24	cmpl	$36, %ecx
1000214cd:	41 0f 44 c4	cmovel	%r12d, %eax
1000214d1:	85 c0	testl	%eax, %eax
1000214d3:	74 1d	je	0x1000214f2
1000214d5:	83 f8 25	cmpl	$37, %eax
1000214d8:	74 18	je	0x1000214f2
1000214da:	48 89 df	movq	%rbx, %rdi
1000214dd:	be 03 00 00 00	movl	$3, %esi
1000214e2:	48 8d 15 d4 bf 02 00	leaq	180180(%rip), %rdx ## literal pool for: "pended nondemand spawn failed: %d"
1000214e9:	89 c1	movl	%eax, %ecx
1000214eb:	31 c0	xorl	%eax, %eax
1000214ed:	e8 c8 4a ff ff	callq	0x100015fba
1000214f2:	c7 83 14 01 00 00 00 00 00 00	movl	$0, 276(%rbx)
1000214fc:	48 89 df	movq	%rbx, %rdi
1000214ff:	be 19 00 00 00	movl	$25, %esi
100021504:	e8 48 14 ff ff	callq	0x100012951
100021509:	4c 89 f3	movq	%r14, %rbx
10002150c:	4d 85 f6	testq	%r14, %r14
10002150f:	75 8c	jne	0x10002149d
100021511:	49 ff c5	incq	%r13
100021514:	49 83 fd 17	cmpq	$23, %r13
100021518:	4c 89 fb	movq	%r15, %rbx
10002151b:	0f 85 6c ff ff ff	jne	0x10002148d
100021521:	48 83 c4 08	addq	$8, %rsp
100021525:	5b	popq	%rbx
100021526:	41 5c	popq	%r12
100021528:	41 5d	popq	%r13
10002152a:	41 5e	popq	%r14
10002152c:	41 5f	popq	%r15
10002152e:	5d	popq	%rbp
10002152f:	c3	retq
100021530:	48 8d 3d 53 bf 02 00	leaq	180051(%rip), %rdi ## literal pool for: "underflow of on-demand count"
100021537:	31 c0	xorl	%eax, %eax
100021539:	e8 d4 2e 01 00	callq	0x100034412
10002153e:	55	pushq	%rbp
10002153f:	48 89 e5	movq	%rsp, %rbp
100021542:	53	pushq	%rbx
100021543:	50	pushq	%rax
100021544:	48 8b 87 e8 03 00 00	movq	1000(%rdi), %rax
10002154b:	48 85 c0	testq	%rax, %rax
10002154e:	75 0f	jne	0x10002155f
100021550:	48 89 fb	movq	%rdi, %rbx
100021553:	e8 15 a9 00 00	callq	0x10002be6d
100021558:	48 89 83 e8 03 00 00	movq	%rax, 1000(%rbx)
10002155f:	48 83 c4 08	addq	$8, %rsp
100021563:	5b	popq	%rbx
100021564:	5d	popq	%rbp
100021565:	c3	retq
100021566:	55	pushq	%rbp
100021567:	48 89 e5	movq	%rsp, %rbp
10002156a:	8b 87 98 00 00 00	movl	152(%rdi), %eax
100021570:	8d 48 ff	leal	-1(%rax), %ecx
100021573:	89 8f 98 00 00 00	movl	%ecx, 152(%rdi)
100021579:	85 c0	testl	%eax, %eax
10002157b:	7e 0b	jle	0x100021588
10002157d:	be 14 00 00 00	movl	$20, %esi
100021582:	5d	popq	%rbp
100021583:	e9 ad f1 ff ff	jmp	0x100020735
100021588:	48 8d 3d 50 bf 02 00	leaq	180048(%rip), %rdi ## literal pool for: "underflow of external activation count during remove"
10002158f:	31 c0	xorl	%eax, %eax
100021591:	e8 7c 2e 01 00	callq	0x100034412
100021596:	55	pushq	%rbp
100021597:	48 89 e5	movq	%rsp, %rbp
10002159a:	41 57	pushq	%r15
10002159c:	41 56	pushq	%r14
10002159e:	53	pushq	%rbx
10002159f:	48 81 ec 18 01 00 00	subq	$280, %rsp
1000215a6:	48 89 fb	movq	%rdi, %rbx
1000215a9:	48 8b 05 78 6a 03 00	movq	223864(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000215b0:	48 8b 00	movq	(%rax), %rax
1000215b3:	48 89 45 e0	movq	%rax, -32(%rbp)
1000215b7:	4c 8d 3d e2 0b 04 00	leaq	265186(%rip), %r15
1000215be:	4c 39 7f 60	cmpq	%r15, 96(%rdi)
1000215c2:	0f 85 2d 01 00 00	jne	0x1000216f5
1000215c8:	e8 fa 38 01 00	callq	0x100034ec7
1000215cd:	84 c0	testb	%al, %al
1000215cf:	0f 85 ed 00 00 00	jne	0x1000216c2
1000215d5:	80 bb 08 04 00 00 00	cmpb	$0, 1032(%rbx)
1000215dc:	0f 88 e0 00 00 00	js	0x1000216c2
1000215e2:	4c 8d b5 dc fe ff ff	leaq	-292(%rbp), %r14
1000215e9:	41 c7 06 00 00 00 00	movl	$0, (%r14)
1000215f0:	e8 49 05 02 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
1000215f5:	89 c7	movl	%eax, %edi
1000215f7:	be ff ff ff ff	movl	$4294967295, %esi
1000215fc:	ba 09 00 00 00	movl	$9, %edx
100021601:	4c 89 f1	movq	%r14, %rcx
100021604:	e8 d5 04 02 00	callq	0x100041ade ## symbol stub for: _host_get_special_port
100021609:	41 8b 06	movl	(%r14), %eax
10002160c:	ff c0	incl	%eax
10002160e:	83 f8 02	cmpl	$2, %eax
100021611:	0f 82 a4 00 00 00	jb	0x1000216bb
100021617:	0f 28 05 62 1c 02 00	movaps	138338(%rip), %xmm0
10002161e:	48 8d bd e0 fe ff ff	leaq	-288(%rbp), %rdi
100021625:	0f 29 07	movaps	%xmm0, (%rdi)
100021628:	0f 29 87 f0 00 00 00	movaps	%xmm0, 240(%rdi)
10002162f:	0f 29 87 e0 00 00 00	movaps	%xmm0, 224(%rdi)
100021636:	0f 29 87 d0 00 00 00	movaps	%xmm0, 208(%rdi)
10002163d:	0f 29 87 c0 00 00 00	movaps	%xmm0, 192(%rdi)
100021644:	0f 29 87 b0 00 00 00	movaps	%xmm0, 176(%rdi)
10002164b:	0f 29 87 a0 00 00 00	movaps	%xmm0, 160(%rdi)
100021652:	0f 29 87 90 00 00 00	movaps	%xmm0, 144(%rdi)
100021659:	0f 29 87 80 00 00 00	movaps	%xmm0, 128(%rdi)
100021660:	0f 29 47 70	movaps	%xmm0, 112(%rdi)
100021664:	0f 29 47 60	movaps	%xmm0, 96(%rdi)
100021668:	0f 29 47 50	movaps	%xmm0, 80(%rdi)
10002166c:	0f 29 47 40	movaps	%xmm0, 64(%rdi)
100021670:	0f 29 47 30	movaps	%xmm0, 48(%rdi)
100021674:	0f 29 47 20	movaps	%xmm0, 32(%rdi)
100021678:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
10002167c:	c6 07 00	movb	$0, (%rdi)
10002167f:	be 00 01 00 00	movl	$256, %esi
100021684:	e8 6d 01 02 00	callq	0x1000417f6 ## symbol stub for: _audit_quick_start_internal
100021689:	85 c0	testl	%eax, %eax
10002168b:	74 10	je	0x10002169d
10002168d:	48 8d 0d 54 11 04 00	leaq	266580(%rip), %rcx
100021694:	80 39 00	cmpb	$0, (%rcx)
100021697:	0f 84 92 00 00 00	je	0x10002172f
10002169d:	48 8d 05 94 10 04 00	leaq	266388(%rip), %rax
1000216a4:	8b 38	movl	(%rax), %edi
1000216a6:	e8 51 01 02 00	callq	0x1000417fc ## symbol stub for: _audit_session_join
1000216ab:	48 8d 0d 7e 11 04 00	leaq	266622(%rip), %rcx
1000216b2:	3b 41 18	cmpl	24(%rcx), %eax
1000216b5:	0f 85 8b 00 00 00	jne	0x100021746
1000216bb:	80 8b 08 04 00 00 80	orb	$-128, 1032(%rbx)
1000216c2:	4c 39 7b 60	cmpq	%r15, 96(%rbx)
1000216c6:	75 2d	jne	0x1000216f5
1000216c8:	48 8d 05 9b 10 04 00	leaq	266395(%rip), %rax
1000216cf:	c6 00 00	movb	$0, (%rax)
1000216d2:	8b 05 90 0e 04 00	movl	265872(%rip), %eax
1000216d8:	ff c0	incl	%eax
1000216da:	83 f8 01	cmpl	$1, %eax
1000216dd:	77 16	ja	0x1000216f5
1000216df:	48 8d 15 78 b6 02 00	leaq	177784(%rip), %rdx ## literal pool for: "No task-access server configured! The system will not get very far."
1000216e6:	48 89 df	movq	%rbx, %rdi
1000216e9:	be 02 00 01 00	movl	$65538, %esi
1000216ee:	31 c0	xorl	%eax, %eax
1000216f0:	e8 34 ed ff ff	callq	0x100020429
1000216f5:	48 8b 73 68	movq	104(%rbx), %rsi
1000216f9:	bf 18 00 00 22	movl	$570425368, %edi
1000216fe:	e8 cc b7 fe ff	callq	0x10000cecf
100021703:	48 8b 7b 68	movq	104(%rbx), %rdi
100021707:	90	nop
100021708:	0f 1f 40 00	nopl	(%rax)
10002170c:	48 8b 05 15 69 03 00	movq	223509(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100021713:	48 8b 00	movq	(%rax), %rax
100021716:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10002171a:	75 0e	jne	0x10002172a
10002171c:	48 81 c4 18 01 00 00	addq	$280, %rsp
100021723:	5b	popq	%rbx
100021724:	41 5e	popq	%r14
100021726:	41 5f	popq	%r15
100021728:	5d	popq	%rbp
100021729:	c3	retq
10002172a:	e8 43 00 02 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002172f:	48 8d 3d ea b5 02 00	leaq	177642(%rip), %rdi ## literal pool for: "audit_quick_start: %d:%s"
100021736:	48 8d 95 e0 fe ff ff	leaq	-288(%rbp), %rdx
10002173d:	89 c6	movl	%eax, %esi
10002173f:	31 c0	xorl	%eax, %eax
100021741:	e8 81 2d 01 00	callq	0x1000344c7
100021746:	48 8d 3d ec b5 02 00	leaq	177644(%rip), %rdi ## literal pool for: "could not re-join root audit session"
10002174d:	31 c0	xorl	%eax, %eax
10002174f:	e8 be 2c 01 00	callq	0x100034412
100021754:	55	pushq	%rbp
100021755:	48 89 e5	movq	%rsp, %rbp
100021758:	49 89 f0	movq	%rsi, %r8
10002175b:	48 8b 47 60	movq	96(%rdi), %rax
10002175f:	48 8d 0d 3a 0a 04 00	leaq	264762(%rip), %rcx
100021766:	48 39 c8	cmpq	%rcx, %rax
100021769:	74 12	je	0x10002177d
10002176b:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
100021772:	74 26	je	0x10002179a
100021774:	48 8d 05 2d 10 04 00	leaq	266285(%rip), %rax
10002177b:	eb 07	jmp	0x100021784
10002177d:	48 8d 05 1c 10 04 00	leaq	266268(%rip), %rax
100021784:	48 8b 08	movq	(%rax), %rcx
100021787:	48 85 c9	testq	%rcx, %rcx
10002178a:	74 0e	je	0x10002179a
10002178c:	be 01 00 00 00	movl	$1, %esi
100021791:	45 31 c9	xorl	%r9d, %r9d
100021794:	5d	popq	%rbp
100021795:	e9 b1 f5 fe ff	jmp	0x100010d4b
10002179a:	5d	popq	%rbp
10002179b:	c3	retq
10002179c:	55	pushq	%rbp
10002179d:	48 89 e5	movq	%rsp, %rbp
1000217a0:	5d	popq	%rbp
1000217a1:	e9 00 00 00 00	jmp	0x1000217a6
1000217a6:	55	pushq	%rbp
1000217a7:	48 89 e5	movq	%rsp, %rbp
1000217aa:	41 57	pushq	%r15
1000217ac:	41 56	pushq	%r14
1000217ae:	53	pushq	%rbx
1000217af:	50	pushq	%rax
1000217b0:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
1000217b7:	0f 85 77 01 00 00	jne	0x100021934
1000217bd:	49 89 f6	movq	%rsi, %r14
1000217c0:	49 89 ff	movq	%rdi, %r15
1000217c3:	48 8d be 18 05 00 00	leaq	1304(%rsi), %rdi
1000217ca:	e8 ea db fe ff	callq	0x10000f3b9
1000217cf:	48 89 c1	movq	%rax, %rcx
1000217d2:	48 ba c9 42 16 b2 90 85 2c 64	movabsq	$7218291159277650633, %rdx
1000217dc:	48 f7 e2	mulq	%rdx
1000217df:	48 89 c8	movq	%rcx, %rax
1000217e2:	48 29 d0	subq	%rdx, %rax
1000217e5:	48 d1 e8	shrq	%rax
1000217e8:	48 01 d0	addq	%rdx, %rax
1000217eb:	48 c1 e8 04	shrq	$4, %rax
1000217ef:	48 8d 14 40	leaq	(%rax,%rax,2), %rdx
1000217f3:	48 c1 e2 03	shlq	$3, %rdx
1000217f7:	48 29 d0	subq	%rdx, %rax
1000217fa:	48 01 c8	addq	%rcx, %rax
1000217fd:	49 8d 04 c7	leaq	(%r15,%rax,8), %rax
100021801:	48 05 30 01 00 00	addq	$304, %rax
100021807:	48 8b 08	movq	(%rax), %rcx
10002180a:	49 89 4e 68	movq	%rcx, 104(%r14)
10002180e:	48 85 c9	testq	%rcx, %rcx
100021811:	74 08	je	0x10002181b
100021813:	49 8d 56 68	leaq	104(%r14), %rdx
100021817:	48 89 51 70	movq	%rdx, 112(%rcx)
10002181b:	4c 89 30	movq	%r14, (%rax)
10002181e:	49 89 46 70	movq	%rax, 112(%r14)
100021822:	41 ff 87 a0 00 00 00	incl	160(%r15)
100021829:	4c 89 ff	movq	%r15, %rdi
10002182c:	be 06 00 00 00	movl	$6, %esi
100021831:	e8 98 10 ff ff	callq	0x1000128ce
100021836:	49 89 86 e8 00 00 00	movq	%rax, 232(%r14)
10002183d:	41 83 be 18 01 00 00 00	cmpl	$0, 280(%r14)
100021845:	75 08	jne	0x10002184f
100021847:	41 80 8e 64 01 00 00 06	orb	$6, 356(%r14)
10002184f:	66 41 ff 86 1c 01 00 00	incw	284(%r14)
100021857:	4c 89 ff	movq	%r15, %rdi
10002185a:	be 06 00 00 00	movl	$6, %esi
10002185f:	e8 8c ee ff ff	callq	0x1000206f0
100021864:	4c 89 ff	movq	%r15, %rdi
100021867:	4c 89 f6	movq	%r14, %rsi
10002186a:	e8 0d a0 00 00	callq	0x10002b87c
10002186f:	4c 89 f7	movq	%r14, %rdi
100021872:	e8 1a 94 ff ff	callq	0x10001ac91
100021877:	84 c0	testb	%al, %al
100021879:	75 08	jne	0x100021883
10002187b:	4c 89 f7	movq	%r14, %rdi
10002187e:	e8 b9 94 ff ff	callq	0x10001ad3c
100021883:	45 31 f6	xorl	%r14d, %r14d
100021886:	4b 8b 9c f7 30 01 00 00	movq	304(%r15,%r14,8), %rbx
10002188e:	48 85 db	testq	%rbx, %rbx
100021891:	74 0e	je	0x1000218a1
100021893:	48 89 df	movq	%rbx, %rdi
100021896:	e8 a1 94 ff ff	callq	0x10001ad3c
10002189b:	48 8b 5b 68	movq	104(%rbx), %rbx
10002189f:	eb ed	jmp	0x10002188e
1000218a1:	49 ff c6	incq	%r14
1000218a4:	49 83 fe 17	cmpq	$23, %r14
1000218a8:	75 dc	jne	0x100021886
1000218aa:	49 8b 47 60	movq	96(%r15), %rax
1000218ae:	48 8d 0d 73 09 04 00	leaq	264563(%rip), %rcx
1000218b5:	48 39 c8	cmpq	%rcx, %rax
1000218b8:	74 21	je	0x1000218db
1000218ba:	48 8d 0d ef 09 04 00	leaq	264687(%rip), %rcx
1000218c1:	48 39 c8	cmpq	%rcx, %rax
1000218c4:	74 1e	je	0x1000218e4
1000218c6:	48 8d 0d d3 08 04 00	leaq	264403(%rip), %rcx
1000218cd:	48 39 c8	cmpq	%rcx, %rax
1000218d0:	75 57	jne	0x100021929
1000218d2:	4c 8d 3d 77 1c 04 00	leaq	269431(%rip), %r15
1000218d9:	eb 10	jmp	0x1000218eb
1000218db:	49 81 c7 d0 03 00 00	addq	$976, %r15
1000218e2:	eb 07	jmp	0x1000218eb
1000218e4:	49 81 c7 c8 00 00 00	addq	$200, %r15
1000218eb:	4d 8b 37	movq	(%r15), %r14
1000218ee:	4d 85 f6	testq	%r14, %r14
1000218f1:	74 36	je	0x100021929
1000218f3:	41 0f b7 86 08 04 00 00	movzwl	1032(%r14), %eax
1000218fb:	a9 03 02 00 00	testl	$515, %eax
100021900:	75 27	jne	0x100021929
100021902:	45 31 ff	xorl	%r15d, %r15d
100021905:	4b 8b 9c fe 30 01 00 00	movq	304(%r14,%r15,8), %rbx
10002190d:	48 85 db	testq	%rbx, %rbx
100021910:	74 0e	je	0x100021920
100021912:	48 89 df	movq	%rbx, %rdi
100021915:	e8 22 94 ff ff	callq	0x10001ad3c
10002191a:	48 8b 5b 68	movq	104(%rbx), %rbx
10002191e:	eb ed	jmp	0x10002190d
100021920:	49 ff c7	incq	%r15
100021923:	49 83 ff 17	cmpq	$23, %r15
100021927:	75 dc	jne	0x100021905
100021929:	48 83 c4 08	addq	$8, %rsp
10002192d:	5b	popq	%rbx
10002192e:	41 5e	popq	%r14
100021930:	41 5f	popq	%r15
100021932:	5d	popq	%rbp
100021933:	c3	retq
100021934:	48 8d 3d ba bc 02 00	leaq	179386(%rip), %rdi ## literal pool for: "inconsistency in service domain during add"
10002193b:	31 c0	xorl	%eax, %eax
10002193d:	e8 d0 2a 01 00	callq	0x100034412
100021942:	55	pushq	%rbp
100021943:	48 89 e5	movq	%rsp, %rbp
100021946:	5d	popq	%rbp
100021947:	e9 00 00 00 00	jmp	0x10002194c
10002194c:	55	pushq	%rbp
10002194d:	48 89 e5	movq	%rsp, %rbp
100021950:	41 56	pushq	%r14
100021952:	53	pushq	%rbx
100021953:	48 89 f3	movq	%rsi, %rbx
100021956:	0f b7 86 64 01 00 00	movzwl	356(%rsi), %eax
10002195d:	89 c1	movl	%eax, %ecx
10002195f:	81 e1 00 06 00 00	andl	$1536, %ecx
100021965:	81 f9 00 02 00 00	cmpl	$512, %ecx
10002196b:	0f 85 b1 00 00 00	jne	0x100021a22
100021971:	48 8b 43 18	movq	24(%rbx), %rax
100021975:	48 83 f8 ff	cmpq	$-1, %rax
100021979:	74 4b	je	0x1000219c6
10002197b:	48 85 c0	testq	%rax, %rax
10002197e:	75 5c	jne	0x1000219dc
100021980:	48 8b 4b 20	movq	32(%rbx), %rcx
100021984:	48 8b 93 f0 00 00 00	movq	240(%rbx), %rdx
10002198b:	48 89 8a c0 00 00 00	movq	%rcx, 192(%rdx)
100021992:	8b b2 d0 00 00 00	movl	208(%rdx), %esi
100021998:	89 b2 e0 00 00 00	movl	%esi, 224(%rdx)
10002199e:	48 8b b2 c8 00 00 00	movq	200(%rdx), %rsi
1000219a5:	48 89 b2 d8 00 00 00	movq	%rsi, 216(%rdx)
1000219ac:	c7 82 d0 00 00 00 c4 14 00 00	movl	$5316, 208(%rdx)
1000219b6:	48 8d 35 61 b4 02 00	leaq	177249(%rip), %rsi ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/domain.c"
1000219bd:	48 89 b2 c8 00 00 00	movq	%rsi, 200(%rdx)
1000219c4:	eb 22	jmp	0x1000219e8
1000219c6:	48 8b 4b 20	movq	32(%rbx), %rcx
1000219ca:	48 83 f9 ff	cmpq	$-1, %rcx
1000219ce:	75 10	jne	0x1000219e0
1000219d0:	48 8d 3d 49 bc 02 00	leaq	179273(%rip), %rdi ## literal pool for: "multiple attempts to remove service instance"
1000219d7:	e9 1c 01 00 00	jmp	0x100021af8
1000219dc:	48 8b 4b 20	movq	32(%rbx), %rcx
1000219e0:	48 89 48 20	movq	%rcx, 32(%rax)
1000219e4:	48 8b 4b 20	movq	32(%rbx), %rcx
1000219e8:	48 8d 53 18	leaq	24(%rbx), %rdx
1000219ec:	48 89 01	movq	%rax, (%rcx)
1000219ef:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000219f3:	f3 0f 7f 02	movdqu	%xmm0, (%rdx)
1000219f7:	8b 43 30	movl	48(%rbx), %eax
1000219fa:	89 43 40	movl	%eax, 64(%rbx)
1000219fd:	48 8b 43 28	movq	40(%rbx), %rax
100021a01:	48 89 43 38	movq	%rax, 56(%rbx)
100021a05:	c7 43 30 c4 14 00 00	movl	$5316, 48(%rbx)
100021a0c:	48 8d 05 0b b4 02 00	leaq	177163(%rip), %rax ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/domain.c"
100021a13:	48 89 43 28	movq	%rax, 40(%rbx)
100021a17:	b8 00 04 00 00	movl	$1024, %eax
100021a1c:	0b 83 64 01 00 00	orl	356(%rbx), %eax
100021a22:	89 c1	movl	%eax, %ecx
100021a24:	83 c9 10	orl	$16, %ecx
100021a27:	66 89 8b 64 01 00 00	movw	%cx, 356(%rbx)
100021a2e:	a8 01	testb	$1, %al
100021a30:	75 47	jne	0x100021a79
100021a32:	66 83 bb 1c 01 00 00 00	cmpw	$0, 284(%rbx)
100021a3a:	0f 84 81 00 00 00	je	0x100021ac1
100021a40:	0f 8e 98 00 00 00	jle	0x100021ade
100021a46:	48 89 df	movq	%rbx, %rdi
100021a49:	e8 76 c8 ff ff	callq	0x10001e2c4
100021a4e:	84 c0	testb	%al, %al
100021a50:	74 3f	je	0x100021a91
100021a52:	31 ff	xorl	%edi, %edi
100021a54:	e8 20 c0 fe ff	callq	0x10000da79
100021a59:	84 c0	testb	%al, %al
100021a5b:	74 34	je	0x100021a91
100021a5d:	66 83 bb 1c 01 00 00 00	cmpw	$0, 284(%rbx)
100021a65:	7e 7c	jle	0x100021ae3
100021a67:	48 89 df	movq	%rbx, %rdi
100021a6a:	e8 43 af 00 00	callq	0x10002c9b2
100021a6f:	48 89 df	movq	%rbx, %rdi
100021a72:	e8 65 5b ff ff	callq	0x1000175dc
100021a77:	eb 50	jmp	0x100021ac9
100021a79:	48 89 df	movq	%rbx, %rdi
100021a7c:	e8 3d 95 ff ff	callq	0x10001afbe
100021a81:	8d 48 dc	leal	-36(%rax), %ecx
100021a84:	83 f9 02	cmpl	$2, %ecx
100021a87:	73 45	jae	0x100021ace
100021a89:	41 be 24 00 00 00	movl	$36, %r14d
100021a8f:	eb 45	jmp	0x100021ad6
100021a91:	48 89 df	movq	%rbx, %rdi
100021a94:	e8 25 95 ff ff	callq	0x10001afbe
100021a99:	41 be 24 00 00 00	movl	$36, %r14d
100021a9f:	85 c0	testl	%eax, %eax
100021aa1:	74 33	je	0x100021ad6
100021aa3:	83 f8 25	cmpl	$37, %eax
100021aa6:	74 2e	je	0x100021ad6
100021aa8:	83 f8 59	cmpl	$89, %eax
100021aab:	74 44	je	0x100021af1
100021aad:	48 63 d0	movslq	%eax, %rdx
100021ab0:	48 8d 3d 50 68 ff ff	leaq	-38832(%rip), %rdi
100021ab7:	48 89 de	movq	%rbx, %rsi
100021aba:	e8 e9 fc 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100021abf:	eb 15	jmp	0x100021ad6
100021ac1:	48 89 de	movq	%rbx, %rsi
100021ac4:	e8 a9 a8 00 00	callq	0x10002c372
100021ac9:	45 31 f6	xorl	%r14d, %r14d
100021acc:	eb 08	jmp	0x100021ad6
100021ace:	45 31 f6	xorl	%r14d, %r14d
100021ad1:	83 f8 59	cmpl	$89, %eax
100021ad4:	75 12	jne	0x100021ae8
100021ad6:	44 89 f0	movl	%r14d, %eax
100021ad9:	5b	popq	%rbx
100021ada:	41 5e	popq	%r14
100021adc:	5d	popq	%rbp
100021add:	c3	retq
100021ade:	e8 ac eb 01 00	callq	0x10004068f
100021ae3:	e8 92 eb 01 00	callq	0x10004067a
100021ae8:	48 8d 3d 5e bb 02 00	leaq	179038(%rip), %rdi ## literal pool for: "inconsistency between domain and service semi-active state during semi-active bootout"
100021aef:	eb 07	jmp	0x100021af8
100021af1:	48 8d 3d 87 bc 02 00	leaq	179335(%rip), %rdi ## literal pool for: "inconsistency between domain and service semi-active state during active bootout"
100021af8:	31 c0	xorl	%eax, %eax
100021afa:	e8 13 29 01 00	callq	0x100034412
100021aff:	55	pushq	%rbp
100021b00:	48 89 e5	movq	%rsp, %rbp
100021b03:	83 e7 fb	andl	$-5, %edi
100021b06:	83 ff 19	cmpl	$25, %edi
100021b09:	0f 94 c0	sete	%al
100021b0c:	5d	popq	%rbp
100021b0d:	c3	retq
100021b0e:	55	pushq	%rbp
100021b0f:	48 89 e5	movq	%rsp, %rbp
100021b12:	41 57	pushq	%r15
100021b14:	41 56	pushq	%r14
100021b16:	41 55	pushq	%r13
100021b18:	41 54	pushq	%r12
100021b1a:	53	pushq	%rbx
100021b1b:	48 83 ec 58	subq	$88, %rsp
100021b1f:	4c 89 45 c8	movq	%r8, -56(%rbp)
100021b23:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
100021b2a:	0f 85 8d 02 00 00	jne	0x100021dbd
100021b30:	4c 89 cb	movq	%r9, %rbx
100021b33:	49 89 d7	movq	%rdx, %r15
100021b36:	49 89 f4	movq	%rsi, %r12
100021b39:	49 89 fe	movq	%rdi, %r14
100021b3c:	89 4d d4	movl	%ecx, -44(%rbp)
100021b3f:	48 89 f7	movq	%rsi, %rdi
100021b42:	48 89 d6	movq	%rdx, %rsi
100021b45:	e8 b2 c6 ff ff	callq	0x10001e1fc
100021b4a:	48 85 c0	testq	%rax, %rax
100021b4d:	0f 84 97 00 00 00	je	0x100021bea
100021b53:	49 89 c5	movq	%rax, %r13
100021b56:	48 8b b8 28 03 00 00	movq	808(%rax), %rdi
100021b5d:	48 8b 5d c8	movq	-56(%rbp), %rbx
100021b61:	48 89 de	movq	%rbx, %rsi
100021b64:	e8 b7 fe fd ff	callq	0x100001a20
100021b69:	84 c0	testb	%al, %al
100021b6b:	75 46	jne	0x100021bb3
100021b6d:	49 8b bd 28 03 00 00	movq	808(%r13), %rdi
100021b74:	e8 39 ff fd ff	callq	0x100001ab2
100021b79:	49 89 c6	movq	%rax, %r14
100021b7c:	48 89 df	movq	%rbx, %rdi
100021b7f:	e8 2e ff fd ff	callq	0x100001ab2
100021b84:	48 89 c3	movq	%rax, %rbx
100021b87:	48 8d 15 14 b2 02 00	leaq	176660(%rip), %rdx ## literal pool for: "Mismatched binprefs: %s != %s"
100021b8e:	4c 89 ef	movq	%r13, %rdi
100021b91:	be 04 00 00 00	movl	$4, %esi
100021b96:	4c 89 f1	movq	%r14, %rcx
100021b99:	49 89 c0	movq	%rax, %r8
100021b9c:	31 c0	xorl	%eax, %eax
100021b9e:	e8 17 44 ff ff	callq	0x100015fba
100021ba3:	4c 89 f7	movq	%r14, %rdi
100021ba6:	e8 85 fe 01 00	callq	0x100041a30 ## symbol stub for: _free
100021bab:	48 89 df	movq	%rbx, %rdi
100021bae:	e8 7d fe 01 00	callq	0x100041a30 ## symbol stub for: _free
100021bb3:	45 8b 85 64 01 00 00	movl	356(%r13), %r8d
100021bba:	41 c1 e8 05	shrl	$5, %r8d
100021bbe:	41 83 e0 01	andl	$1, %r8d
100021bc2:	0f b6 4d d4	movzbl	-44(%rbp), %ecx
100021bc6:	41 39 c8	cmpl	%ecx, %r8d
100021bc9:	0f 84 dc 01 00 00	je	0x100021dab
100021bcf:	48 8d 15 ea b1 02 00	leaq	176618(%rip), %rdx ## literal pool for: "One-shot property mismatch: requested=%d existing=%d"
100021bd6:	4c 89 ef	movq	%r13, %rdi
100021bd9:	be 04 00 00 00	movl	$4, %esi
100021bde:	31 c0	xorl	%eax, %eax
100021be0:	e8 d5 43 ff ff	callq	0x100015fba
100021be5:	e9 c1 01 00 00	jmp	0x100021dab
100021bea:	48 8b 4d 10	movq	16(%rbp), %rcx
100021bee:	48 8d 05 cd 01 00 00	leaq	461(%rip), %rax
100021bf5:	4c 8d 45 90	leaq	-112(%rbp), %r8
100021bf9:	49 89 00	movq	%rax, (%r8)
100021bfc:	48 8d 05 2d 05 00 00	leaq	1325(%rip), %rax
100021c03:	49 89 40 08	movq	%rax, 8(%r8)
100021c07:	48 8d 05 67 06 00 00	leaq	1639(%rip), %rax
100021c0e:	49 89 40 10	movq	%rax, 16(%r8)
100021c12:	48 8d 05 ea 07 00 00	leaq	2026(%rip), %rax
100021c19:	49 89 40 18	movq	%rax, 24(%r8)
100021c1d:	48 8d 05 24 08 00 00	leaq	2084(%rip), %rax
100021c24:	49 89 40 20	movq	%rax, 32(%r8)
100021c28:	48 8d 05 ec 08 00 00	leaq	2284(%rip), %rax
100021c2f:	49 89 40 28	movq	%rax, 40(%r8)
100021c33:	4d 89 70 30	movq	%r14, 48(%r8)
100021c37:	48 89 0c 24	movq	%rcx, (%rsp)
100021c3b:	4c 89 e7	movq	%r12, %rdi
100021c3e:	4c 89 fe	movq	%r15, %rsi
100021c41:	ba ff ff ff ff	movl	$4294967295, %edx
100021c46:	48 89 d9	movq	%rbx, %rcx
100021c49:	45 31 c9	xorl	%r9d, %r9d
100021c4c:	e8 10 25 fe ff	callq	0x100004161
100021c51:	49 89 c5	movq	%rax, %r13
100021c54:	48 85 c0	testq	%rax, %rax
100021c57:	0f 84 26 01 00 00	je	0x100021d83
100021c5d:	49 8b 9c 24 88 00 00 00	movq	136(%r12), %rbx
100021c65:	48 85 db	testq	%rbx, %rbx
100021c68:	74 3f	je	0x100021ca9
100021c6a:	4c 8d 3d 9e 09 00 00	leaq	2462(%rip), %r15
100021c71:	48 89 df	movq	%rbx, %rdi
100021c74:	4c 89 fe	movq	%r15, %rsi
100021c77:	4c 89 ea	movq	%r13, %rdx
100021c7a:	4c 89 e9	movq	%r13, %rcx
100021c7d:	e8 f4 96 01 00	callq	0x10003b376
100021c82:	49 8b be b0 03 00 00	movq	944(%r14), %rdi
100021c89:	48 85 ff	testq	%rdi, %rdi
100021c8c:	49 0f 44 fe	cmoveq	%r14, %rdi
100021c90:	b9 40 00 00 00	movl	$64, %ecx
100021c95:	4c 89 ee	movq	%r13, %rsi
100021c98:	48 89 c2	movq	%rax, %rdx
100021c9b:	e8 47 0a 00 00	callq	0x1000226e7
100021ca0:	48 8b 5b 08	movq	8(%rbx), %rbx
100021ca4:	48 85 db	testq	%rbx, %rbx
100021ca7:	75 c8	jne	0x100021c71
100021ca9:	4c 89 f7	movq	%r14, %rdi
100021cac:	4c 89 ee	movq	%r13, %rsi
100021caf:	e8 f2 fa ff ff	callq	0x1000217a6
100021cb4:	41 ff 84 24 f8 00 00 00	incl	248(%r12)
100021cbc:	49 8d 84 24 b8 00 00 00	leaq	184(%r12), %rax
100021cc4:	49 8b 8c 24 b8 00 00 00	movq	184(%r12), %rcx
100021ccc:	4c 89 ea	movq	%r13, %rdx
100021ccf:	48 83 c2 18	addq	$24, %rdx
100021cd3:	49 89 4d 18	movq	%rcx, 24(%r13)
100021cd7:	48 8d 71 18	leaq	24(%rcx), %rsi
100021cdb:	48 85 c9	testq	%rcx, %rcx
100021cde:	48 0f 44 f0	cmoveq	%rax, %rsi
100021ce2:	48 89 56 08	movq	%rdx, 8(%rsi)
100021ce6:	4d 89 ac 24 b8 00 00 00	movq	%r13, 184(%r12)
100021cee:	49 89 45 20	movq	%rax, 32(%r13)
100021cf2:	41 8b 84 24 d0 00 00 00	movl	208(%r12), %eax
100021cfa:	41 89 84 24 e0 00 00 00	movl	%eax, 224(%r12)
100021d02:	49 8b 84 24 c8 00 00 00	movq	200(%r12), %rax
100021d0a:	49 89 84 24 d8 00 00 00	movq	%rax, 216(%r12)
100021d12:	b8 7b 17 00 00	movl	$6011, %eax
100021d17:	41 89 84 24 d0 00 00 00	movl	%eax, 208(%r12)
100021d1f:	48 8d 0d f8 b0 02 00	leaq	176376(%rip), %rcx ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/domain.c"
100021d26:	49 89 8c 24 c8 00 00 00	movq	%rcx, 200(%r12)
100021d2e:	41 8b 55 30	movl	48(%r13), %edx
100021d32:	41 89 55 40	movl	%edx, 64(%r13)
100021d36:	49 8b 55 28	movq	40(%r13), %rdx
100021d3a:	49 89 55 38	movq	%rdx, 56(%r13)
100021d3e:	41 89 45 30	movl	%eax, 48(%r13)
100021d42:	49 89 4d 28	movq	%rcx, 40(%r13)
100021d46:	41 80 8d 65 01 00 00 02	orb	$2, 357(%r13)
100021d4e:	4d 89 a5 f0 00 00 00	movq	%r12, 240(%r13)
100021d55:	4c 89 e7	movq	%r12, %rdi
100021d58:	be 1a 00 00 00	movl	$26, %esi
100021d5d:	e8 6c 0b ff ff	callq	0x1000128ce
100021d62:	80 7d d4 00	cmpb	$0, -44(%rbp)
100021d66:	74 08	je	0x100021d70
100021d68:	41 80 8d 64 01 00 00 20	orb	$32, 356(%r13)
100021d70:	48 8b 75 c8	movq	-56(%rbp), %rsi
100021d74:	48 85 f6	testq	%rsi, %rsi
100021d77:	74 32	je	0x100021dab
100021d79:	4c 89 ef	movq	%r13, %rdi
100021d7c:	e8 f3 14 fe ff	callq	0x100003274
100021d81:	eb 28	jmp	0x100021dab
100021d83:	48 8b 45 10	movq	16(%rbp), %rax
100021d87:	8b 18	movl	(%rax), %ebx
100021d89:	89 df	movl	%ebx, %edi
100021d8b:	e8 7e 03 02 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100021d90:	48 8d 15 5e b0 02 00	leaq	176222(%rip), %rdx ## literal pool for: "Could not create copy of service: %d: %s"
100021d97:	4c 89 e7	movq	%r12, %rdi
100021d9a:	be 03 00 00 00	movl	$3, %esi
100021d9f:	89 d9	movl	%ebx, %ecx
100021da1:	49 89 c0	movq	%rax, %r8
100021da4:	31 c0	xorl	%eax, %eax
100021da6:	e8 0f 42 ff ff	callq	0x100015fba
100021dab:	4c 89 e8	movq	%r13, %rax
100021dae:	48 83 c4 58	addq	$88, %rsp
100021db2:	5b	popq	%rbx
100021db3:	41 5c	popq	%r12
100021db5:	41 5d	popq	%r13
100021db7:	41 5e	popq	%r14
100021db9:	41 5f	popq	%r15
100021dbb:	5d	popq	%rbp
100021dbc:	c3	retq
100021dbd:	e8 e2 e8 01 00	callq	0x1000406a4
100021dc2:	55	pushq	%rbp
100021dc3:	48 89 e5	movq	%rsp, %rbp
100021dc6:	41 57	pushq	%r15
100021dc8:	41 56	pushq	%r14
100021dca:	41 54	pushq	%r12
100021dcc:	53	pushq	%rbx
100021dcd:	48 83 ec 30	subq	$48, %rsp
100021dd1:	83 fe 08	cmpl	$8, %esi
100021dd4:	0f 87 e8 01 00 00	ja	0x100021fc2
100021dda:	49 89 ce	movq	%rcx, %r14
100021ddd:	49 89 d7	movq	%rdx, %r15
100021de0:	49 89 fc	movq	%rdi, %r12
100021de3:	89 f0	movl	%esi, %eax
100021de5:	48 8d 0d 20 03 00 00	leaq	800(%rip), %rcx
100021dec:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
100021df0:	48 01 c8	addq	%rcx, %rax
100021df3:	ff e0	jmpq	*%rax
100021df5:	66 41 83 bc 24 1c 01 00 00 00	cmpw	$0, 284(%r12)
100021dff:	0f 85 e7 02 00 00	jne	0x1000220ec
100021e05:	41 f6 84 24 64 01 00 00 01	testb	$1, 356(%r12)
100021e0e:	0f 85 e1 02 00 00	jne	0x1000220f5
100021e14:	4c 89 f7	movq	%r14, %rdi
100021e17:	4c 89 e6	movq	%r12, %rsi
100021e1a:	e8 d4 ab 00 00	callq	0x10002c9f3
100021e1f:	49 8b 9c 24 88 00 00 00	movq	136(%r12), %rbx
100021e27:	48 85 db	testq	%rbx, %rbx
100021e2a:	0f 84 9f 01 00 00	je	0x100021fcf
100021e30:	48 89 df	movq	%rbx, %rdi
100021e33:	e8 ea 9c 01 00	callq	0x10003bb22
100021e38:	48 8b 5b 08	movq	8(%rbx), %rbx
100021e3c:	eb e9	jmp	0x100021e27
100021e3e:	41 f6 84 24 64 01 00 00 01	testb	$1, 356(%r12)
100021e47:	0f 84 b1 02 00 00	je	0x1000220fe
100021e4d:	49 8d 44 24 58	leaq	88(%r12), %rax
100021e52:	49 8b 4c 24 58	movq	88(%r12), %rcx
100021e57:	48 85 c9	testq	%rcx, %rcx
100021e5a:	74 09	je	0x100021e65
100021e5c:	49 8b 54 24 60	movq	96(%r12), %rdx
100021e61:	48 89 51 60	movq	%rdx, 96(%rcx)
100021e65:	49 8b 54 24 60	movq	96(%r12), %rdx
100021e6a:	48 89 0a	movq	%rcx, (%rdx)
100021e6d:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100021e71:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100021e75:	41 80 a4 24 64 01 00 00 fe	andb	$-2, 356(%r12)
100021e7e:	41 c7 84 24 14 01 00 00 00 00 00 00	movl	$0, 276(%r12)
100021e8a:	45 85 ff	testl	%r15d, %r15d
100021e8d:	74 2b	je	0x100021eba
100021e8f:	4c 89 e7	movq	%r12, %rdi
100021e92:	e8 68 f7 fd ff	callq	0x1000015ff
100021e97:	41 f6 84 24 64 01 00 00 10	testb	$16, 356(%r12)
100021ea0:	0f 85 2f 02 00 00	jne	0x1000220d5
100021ea6:	4c 89 e7	movq	%r12, %rdi
100021ea9:	48 83 c4 30	addq	$48, %rsp
100021ead:	5b	popq	%rbx
100021eae:	41 5c	popq	%r12
100021eb0:	41 5e	popq	%r14
100021eb2:	41 5f	popq	%r15
100021eb4:	5d	popq	%rbp
100021eb5:	e9 74 b1 00 00	jmp	0x10002d02e
100021eba:	4c 89 f7	movq	%r14, %rdi
100021ebd:	4c 89 e6	movq	%r12, %rsi
100021ec0:	48 83 c4 30	addq	$48, %rsp
100021ec4:	5b	popq	%rbx
100021ec5:	41 5c	popq	%r12
100021ec7:	41 5e	popq	%r14
100021ec9:	41 5f	popq	%r15
100021ecb:	5d	popq	%rbp
100021ecc:	e9 41 98 00 00	jmp	0x10002b712
100021ed1:	41 0f b7 84 24 64 01 00 00	movzwl	356(%r12), %eax
100021eda:	a9 20 01 00 00	testl	$288, %eax
100021edf:	74 0c	je	0x100021eed
100021ee1:	83 c8 10	orl	$16, %eax
100021ee4:	66 41 89 84 24 64 01 00 00	movw	%ax, 356(%r12)
100021eed:	4c 89 e7	movq	%r12, %rdi
100021ef0:	e8 0a f7 fd ff	callq	0x1000015ff
100021ef5:	49 8b 9c 24 b0 00 00 00	movq	176(%r12), %rbx
100021efd:	48 85 db	testq	%rbx, %rbx
100021f00:	74 17	je	0x100021f19
100021f02:	f6 83 c4 00 00 00 01	testb	$1, 196(%rbx)
100021f09:	74 08	je	0x100021f13
100021f0b:	48 89 df	movq	%rbx, %rdi
100021f0e:	e8 27 2f ff ff	callq	0x100014e3a
100021f13:	48 8b 5b 08	movq	8(%rbx), %rbx
100021f17:	eb e4	jmp	0x100021efd
100021f19:	41 f6 84 24 65 01 00 00 10	testb	$16, 357(%r12)
100021f22:	74 11	je	0x100021f35
100021f24:	4c 89 f7	movq	%r14, %rdi
100021f27:	e8 0c f5 ff ff	callq	0x100021438
100021f2c:	41 80 a4 24 65 01 00 00 ef	andb	$-17, 357(%r12)
100021f35:	4c 89 f7	movq	%r14, %rdi
100021f38:	4c 89 e6	movq	%r12, %rsi
100021f3b:	48 83 c4 30	addq	$48, %rsp
100021f3f:	5b	popq	%rbx
100021f40:	41 5c	popq	%r12
100021f42:	41 5e	popq	%r14
100021f44:	41 5f	popq	%r15
100021f46:	5d	popq	%rbp
100021f47:	e9 30 99 00 00	jmp	0x10002b87c
100021f4c:	45 89 bc 24 5c 01 00 00	movl	%r15d, 348(%r12)
100021f54:	45 89 bc 24 60 01 00 00	movl	%r15d, 352(%r12)
100021f5c:	4d 85 ff	testq	%r15, %r15
100021f5f:	0f 84 10 01 00 00	je	0x100022075
100021f65:	4d 8b b4 24 40 01 00 00	movq	320(%r12), %r14
100021f6d:	4d 85 f6	testq	%r14, %r14
100021f70:	74 50	je	0x100021fc2
100021f72:	49 c7 84 24 40 01 00 00 00 00 00 00	movq	$0, 320(%r12)
100021f7e:	48 8b 05 93 60 03 00	movq	221331(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100021f85:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100021f89:	48 89 06	movq	%rax, (%rsi)
100021f8c:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100021f94:	48 8d 05 43 b1 00 00	leaq	45379(%rip), %rax
100021f9b:	48 89 46 10	movq	%rax, 16(%rsi)
100021f9f:	48 8d 05 8a 90 03 00	leaq	233610(%rip), %rax
100021fa6:	48 89 46 18	movq	%rax, 24(%rsi)
100021faa:	4c 89 7e 20	movq	%r15, 32(%rsi)
100021fae:	4c 89 66 28	movq	%r12, 40(%rsi)
100021fb2:	4c 89 f7	movq	%r14, %rdi
100021fb5:	e8 7a ff 01 00	callq	0x100041f34 ## symbol stub for: _xpc_array_apply
100021fba:	4c 89 f7	movq	%r14, %rdi
100021fbd:	e8 3a 01 02 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100021fc2:	48 83 c4 30	addq	$48, %rsp
100021fc6:	5b	popq	%rbx
100021fc7:	41 5c	popq	%r12
100021fc9:	41 5e	popq	%r14
100021fcb:	41 5f	popq	%r15
100021fcd:	5d	popq	%rbp
100021fce:	c3	retq
100021fcf:	49 8b 9c 24 a0 00 00 00	movq	160(%r12), %rbx
100021fd7:	48 85 db	testq	%rbx, %rbx
100021fda:	74 0e	je	0x100021fea
100021fdc:	48 89 df	movq	%rbx, %rdi
100021fdf:	e8 3e 9b 01 00	callq	0x10003bb22
100021fe4:	48 8b 5b 08	movq	8(%rbx), %rbx
100021fe8:	eb ed	jmp	0x100021fd7
100021fea:	49 8b 9c 24 a8 00 00 00	movq	168(%r12), %rbx
100021ff2:	48 85 db	testq	%rbx, %rbx
100021ff5:	74 0e	je	0x100022005
100021ff7:	48 89 df	movq	%rbx, %rdi
100021ffa:	e8 23 9b 01 00	callq	0x10003bb22
100021fff:	48 8b 5b 08	movq	8(%rbx), %rbx
100022003:	eb ed	jmp	0x100021ff2
100022005:	49 8b 9c 24 b0 00 00 00	movq	176(%r12), %rbx
10002200d:	48 85 db	testq	%rbx, %rbx
100022010:	74 0e	je	0x100022020
100022012:	48 89 df	movq	%rbx, %rdi
100022015:	e8 d5 2c ff ff	callq	0x100014cef
10002201a:	48 8b 5b 08	movq	8(%rbx), %rbx
10002201e:	eb ed	jmp	0x10002200d
100022020:	4c 89 e7	movq	%r12, %rdi
100022023:	e8 9c 96 ff ff	callq	0x10001b6c4
100022028:	41 80 8c 24 64 01 00 00 01	orb	$1, 356(%r12)
100022031:	49 8b 84 24 e8 00 00 00	movq	232(%r12), %rax
100022039:	48 8b 88 28 01 00 00	movq	296(%rax), %rcx
100022040:	48 05 28 01 00 00	addq	$296, %rax
100022046:	49 89 4c 24 58	movq	%rcx, 88(%r12)
10002204b:	48 85 c9	testq	%rcx, %rcx
10002204e:	74 09	je	0x100022059
100022050:	49 8d 54 24 58	leaq	88(%r12), %rdx
100022055:	48 89 51 60	movq	%rdx, 96(%rcx)
100022059:	4c 89 20	movq	%r12, (%rax)
10002205c:	49 89 44 24 60	movq	%rax, 96(%r12)
100022061:	4c 89 e7	movq	%r12, %rdi
100022064:	48 83 c4 30	addq	$48, %rsp
100022068:	5b	popq	%rbx
100022069:	41 5c	popq	%r12
10002206b:	41 5e	popq	%r14
10002206d:	41 5f	popq	%r15
10002206f:	5d	popq	%rbp
100022070:	e9 dd f4 fd ff	jmp	0x100001552
100022075:	4c 89 e7	movq	%r12, %rdi
100022078:	e8 84 97 ff ff	callq	0x10001b801
10002207d:	48 63 f0	movslq	%eax, %rsi
100022080:	48 8d 3d b1 02 04 00	leaq	262833(%rip), %rdi
100022087:	e8 1f 8f 00 00	callq	0x10002afab
10002208c:	48 85 c0	testq	%rax, %rax
10002208f:	0f 84 d0 fe ff ff	je	0x100021f65
100022095:	49 89 c6	movq	%rax, %r14
100022098:	66 83 b8 08 04 00 00 00	cmpw	$0, 1032(%rax)
1000220a0:	0f 89 bf fe ff ff	jns	0x100021f65
1000220a6:	48 8d 15 c4 bb 02 00	leaq	179140(%rip), %rdx ## literal pool for: "uncorking exec source after service init"
1000220ad:	4c 89 f7	movq	%r14, %rdi
1000220b0:	be 05 00 00 00	movl	$5, %esi
1000220b5:	31 c0	xorl	%eax, %eax
1000220b7:	e8 6d e3 ff ff	callq	0x100020429
1000220bc:	49 8b be 80 00 00 00	movq	128(%r14), %rdi
1000220c3:	e8 fa f7 01 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
1000220c8:	41 80 a6 09 04 00 00 7f	andb	$127, 1033(%r14)
1000220d0:	e9 90 fe ff ff	jmp	0x100021f65
1000220d5:	4c 89 f7	movq	%r14, %rdi
1000220d8:	4c 89 e6	movq	%r12, %rsi
1000220db:	48 83 c4 30	addq	$48, %rsp
1000220df:	5b	popq	%rbx
1000220e0:	41 5c	popq	%r12
1000220e2:	41 5e	popq	%r14
1000220e4:	41 5f	popq	%r15
1000220e6:	5d	popq	%rbp
1000220e7:	e9 cb a2 00 00	jmp	0x10002c3b7
1000220ec:	48 8d 3d 5a b7 02 00	leaq	178010(%rip), %rdi ## literal pool for: "will-spawn received on active service"
1000220f3:	eb 10	jmp	0x100022105
1000220f5:	48 8d 3d 77 b7 02 00	leaq	178039(%rip), %rdi ## literal pool for: "multiple will-spawn events received"
1000220fc:	eb 07	jmp	0x100022105
1000220fe:	48 8d 3d bd ba 02 00	leaq	178877(%rip), %rdi ## literal pool for: "out-of-order spawn event received"
100022105:	31 c0	xorl	%eax, %eax
100022107:	e8 06 23 01 00	callq	0x100034412
10002210c:	e9 fc ff ff 32	jmp	0x13302210d
100022111:	fd	std
	.byte 0xff #bad opcode
100022113:	ff b6 fe ff ff b6	pushq	-1224736770(%rsi)
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10002211b:	ff 40 fe	incl	-2(%rax)
	.byte 0xff #bad opcode
10002211f:	ff c5	incl	%ebp
100022121:	fd	std
	.byte 0xff #bad opcode
100022123:	ff b6 fe ff ff ae	pushq	-1358954498(%rsi)
100022129:	fd	std
	.byte 0xff #bad opcode
10002212b:	ff 29	ljmpl	*(%rcx)
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
10002212f:	ff 55 48	callq	*72(%rbp)
100022132:	89 e5	movl	%esp, %ebp
100022134:	41 57	pushq	%r15
100022136:	41 56	pushq	%r14
100022138:	53	pushq	%rbx
100022139:	50	pushq	%rax
10002213a:	49 89 ff	movq	%rdi, %r15
10002213d:	8b 82 08 04 00 00	movl	1032(%rdx), %eax
100022143:	a9 03 02 00 00	testl	$515, %eax
100022148:	74 10	je	0x10002215a
10002214a:	49 81 c7 18 05 00 00	addq	$1304, %r15
100022151:	48 8d 05 42 bb 02 00	leaq	179010(%rip), %rax ## literal pool for: "denying spawn, domain shutting down: %s"
100022158:	eb 3f	jmp	0x100022199
10002215a:	0f ba e0 09	btl	$9, %eax
10002215e:	72 2b	jb	0x10002218b
100022160:	41 89 f6	movl	%esi, %r14d
100022163:	41 0f b7 8f 64 01 00 00	movzwl	356(%r15), %ecx
10002216b:	f6 c1 02	testb	$2, %cl
10002216e:	75 50	jne	0x1000221c0
100022170:	66 41 83 bf 1c 01 00 00 00	cmpw	$0, 284(%r15)
100022179:	74 73	je	0x1000221ee
10002217b:	49 8d 8f 18 05 00 00	leaq	1304(%r15), %rcx
100022182:	48 8d 05 8e bb 02 00	leaq	179086(%rip), %rax ## literal pool for: "pending spawn, service not yet quiesced: %s"
100022189:	eb 43	jmp	0x1000221ce
10002218b:	49 81 c7 18 05 00 00	addq	$1304, %r15
100022192:	48 8d 05 29 bb 02 00	leaq	178985(%rip), %rax ## literal pool for: "denying spawn, domain transitioning: %s"
100022199:	48 89 d7	movq	%rdx, %rdi
10002219c:	be 05 00 00 00	movl	$5, %esi
1000221a1:	48 89 c2	movq	%rax, %rdx
1000221a4:	4c 89 f9	movq	%r15, %rcx
1000221a7:	31 c0	xorl	%eax, %eax
1000221a9:	e8 7b e2 ff ff	callq	0x100020429
1000221ae:	bb 7c 00 00 00	movl	$124, %ebx
1000221b3:	89 d8	movl	%ebx, %eax
1000221b5:	48 83 c4 08	addq	$8, %rsp
1000221b9:	5b	popq	%rbx
1000221ba:	41 5e	popq	%r14
1000221bc:	41 5f	popq	%r15
1000221be:	5d	popq	%rbp
1000221bf:	c3	retq
1000221c0:	49 8d 8f 18 05 00 00	leaq	1304(%r15), %rcx
1000221c7:	48 8d 05 1c bb 02 00	leaq	178972(%rip), %rax ## literal pool for: "pending spawn, service not yet activated: %s"
1000221ce:	48 89 d7	movq	%rdx, %rdi
1000221d1:	be 05 00 00 00	movl	$5, %esi
1000221d6:	48 89 c2	movq	%rax, %rdx
1000221d9:	31 c0	xorl	%eax, %eax
1000221db:	e8 49 e2 ff ff	callq	0x100020429
1000221e0:	45 89 b7 10 01 00 00	movl	%r14d, 272(%r15)
1000221e7:	bb 24 00 00 00	movl	$36, %ebx
1000221ec:	eb c5	jmp	0x1000221b3
1000221ee:	83 ba 9c 00 00 00 00	cmpl	$0, 156(%rdx)
1000221f5:	74 55	je	0x10002224c
1000221f7:	31 f6	xorl	%esi, %esi
1000221f9:	48 8d 3d 80 ff 03 00	leaq	262016(%rip), %rdi
100022200:	44 39 34 b7	cmpl	%r14d, (%rdi,%rsi,4)
100022204:	74 46	je	0x10002224c
100022206:	48 ff c6	incq	%rsi
100022209:	48 83 fe 07	cmpq	$7, %rsi
10002220d:	75 f1	jne	0x100022200
10002220f:	bb 24 00 00 00	movl	$36, %ebx
100022214:	45 39 b7 14 01 00 00	cmpl	%r14d, 276(%r15)
10002221b:	74 96	je	0x1000221b3
10002221d:	45 89 b7 14 01 00 00	movl	%r14d, 276(%r15)
100022224:	49 81 c7 18 05 00 00	addq	$1304, %r15
10002222b:	48 8d 05 11 bb 02 00	leaq	178961(%rip), %rax ## literal pool for: "pending spawn, domain in on-demand-only mode: %s"
100022232:	48 89 d7	movq	%rdx, %rdi
100022235:	be 05 00 00 00	movl	$5, %esi
10002223a:	48 89 c2	movq	%rax, %rdx
10002223d:	4c 89 f9	movq	%r15, %rcx
100022240:	31 c0	xorl	%eax, %eax
100022242:	e8 e2 e1 ff ff	callq	0x100020429
100022247:	e9 67 ff ff ff	jmp	0x1000221b3
10002224c:	f6 c1 04	testb	$4, %cl
10002224f:	75 13	jne	0x100022264
100022251:	49 8d 8f 18 05 00 00	leaq	1304(%r15), %rcx
100022258:	48 8d 05 15 bb 02 00	leaq	178965(%rip), %rax ## literal pool for: "pending spawn, service not yet imported: %s"
10002225f:	e9 6a ff ff ff	jmp	0x1000221ce
100022264:	31 db	xorl	%ebx, %ebx
100022266:	0f ba e0 12	btl	$18, %eax
10002226a:	0f 83 43 ff ff ff	jae	0x1000221b3
100022270:	e9 6b ff ff ff	jmp	0x1000221e0
100022275:	55	pushq	%rbp
100022276:	48 89 e5	movq	%rsp, %rbp
100022279:	41 57	pushq	%r15
10002227b:	41 56	pushq	%r14
10002227d:	53	pushq	%rbx
10002227e:	50	pushq	%rax
10002227f:	49 89 f6	movq	%rsi, %r14
100022282:	49 89 ff	movq	%rdi, %r15
100022285:	0f b7 86 08 04 00 00	movzwl	1032(%rsi), %eax
10002228c:	a9 03 02 00 00	testl	$515, %eax
100022291:	74 29	je	0x1000222bc
100022293:	49 8d 8f 18 05 00 00	leaq	1304(%r15), %rcx
10002229a:	48 8d 15 ff ba 02 00	leaq	178943(%rip), %rdx ## literal pool for: "resetting service: %s"
1000222a1:	31 db	xorl	%ebx, %ebx
1000222a3:	4c 89 f7	movq	%r14, %rdi
1000222a6:	be 05 00 00 00	movl	$5, %esi
1000222ab:	31 c0	xorl	%eax, %eax
1000222ad:	e8 77 e1 ff ff	callq	0x100020429
1000222b2:	4c 89 ff	movq	%r15, %rdi
1000222b5:	e8 f8 a6 00 00	callq	0x10002c9b2
1000222ba:	eb 75	jmp	0x100022331
1000222bc:	49 83 bf 90 00 00 00 00	cmpq	$0, 144(%r15)
1000222c4:	74 26	je	0x1000222ec
1000222c6:	48 8d 15 e9 ba 02 00	leaq	178921(%rip), %rdx ## literal pool for: "Service cannot reset: active unmanaged endpoints"
1000222cd:	4c 89 f7	movq	%r14, %rdi
1000222d0:	be 04 00 00 00	movl	$4, %esi
1000222d5:	31 c0	xorl	%eax, %eax
1000222d7:	e8 4d e1 ff ff	callq	0x100020429
1000222dc:	49 81 c7 18 05 00 00	addq	$1304, %r15
1000222e3:	48 8d 15 fd ba 02 00	leaq	178941(%rip), %rdx ## literal pool for: "cannot reset service active unmanaged endpoints: %s"
1000222ea:	eb 2e	jmp	0x10002231a
1000222ec:	49 83 bf 98 00 00 00 00	cmpq	$0, 152(%r15)
1000222f4:	74 48	je	0x10002233e
1000222f6:	48 8d 15 1e bb 02 00	leaq	178974(%rip), %rdx ## literal pool for: "Service cannot reset: active PID-local endpoints"
1000222fd:	4c 89 f7	movq	%r14, %rdi
100022300:	be 04 00 00 00	movl	$4, %esi
100022305:	31 c0	xorl	%eax, %eax
100022307:	e8 1d e1 ff ff	callq	0x100020429
10002230c:	49 81 c7 18 05 00 00	addq	$1304, %r15
100022313:	48 8d 15 32 bb 02 00	leaq	178994(%rip), %rdx ## literal pool for: "cannot reset service active pid-local endpoints: %s"
10002231a:	4c 89 f7	movq	%r14, %rdi
10002231d:	be 05 00 00 00	movl	$5, %esi
100022322:	4c 89 f9	movq	%r15, %rcx
100022325:	31 c0	xorl	%eax, %eax
100022327:	e8 fd e0 ff ff	callq	0x100020429
10002232c:	bb 10 00 00 00	movl	$16, %ebx
100022331:	89 d8	movl	%ebx, %eax
100022333:	48 83 c4 08	addq	$8, %rsp
100022337:	5b	popq	%rbx
100022338:	41 5e	popq	%r14
10002233a:	41 5f	popq	%r15
10002233c:	5d	popq	%rbp
10002233d:	c3	retq
10002233e:	49 8b 87 88 00 00 00	movq	136(%r15), %rax
100022345:	48 85 c0	testq	%rax, %rax
100022348:	74 0c	je	0x100022356
10002234a:	f6 40 50 04	testb	$4, 80(%rax)
10002234e:	75 38	jne	0x100022388
100022350:	48 8b 40 08	movq	8(%rax), %rax
100022354:	eb ef	jmp	0x100022345
100022356:	49 8b 87 a0 00 00 00	movq	160(%r15), %rax
10002235d:	48 85 c0	testq	%rax, %rax
100022360:	74 0c	je	0x10002236e
100022362:	f6 40 50 04	testb	$4, 80(%rax)
100022366:	75 49	jne	0x1000223b1
100022368:	48 8b 40 08	movq	8(%rax), %rax
10002236c:	eb ef	jmp	0x10002235d
10002236e:	49 8b 87 a8 00 00 00	movq	168(%r15), %rax
100022375:	31 db	xorl	%ebx, %ebx
100022377:	48 85 c0	testq	%rax, %rax
10002237a:	74 b5	je	0x100022331
10002237c:	f6 40 50 04	testb	$4, 80(%rax)
100022380:	75 58	jne	0x1000223da
100022382:	48 8b 40 08	movq	8(%rax), %rax
100022386:	eb ef	jmp	0x100022377
100022388:	48 8d 15 f1 ba 02 00	leaq	178929(%rip), %rdx ## literal pool for: "Service cannot reset: active endpoints"
10002238f:	4c 89 f7	movq	%r14, %rdi
100022392:	be 04 00 00 00	movl	$4, %esi
100022397:	31 c0	xorl	%eax, %eax
100022399:	e8 8b e0 ff ff	callq	0x100020429
10002239e:	49 81 c7 18 05 00 00	addq	$1304, %r15
1000223a5:	48 8d 15 fb ba 02 00	leaq	178939(%rip), %rdx ## literal pool for: "cannot reset service active endpoints: %s"
1000223ac:	e9 69 ff ff ff	jmp	0x10002231a
1000223b1:	48 8d 15 19 bb 02 00	leaq	178969(%rip), %rdx ## literal pool for: "Service cannot reset: active event channels"
1000223b8:	4c 89 f7	movq	%r14, %rdi
1000223bb:	be 04 00 00 00	movl	$4, %esi
1000223c0:	31 c0	xorl	%eax, %eax
1000223c2:	e8 62 e0 ff ff	callq	0x100020429
1000223c7:	49 81 c7 18 05 00 00	addq	$1304, %r15
1000223ce:	48 8d 15 28 bb 02 00	leaq	178984(%rip), %rdx ## literal pool for: "cannot reset service active event channels: %s"
1000223d5:	e9 40 ff ff ff	jmp	0x10002231a
1000223da:	48 8d 15 4b bb 02 00	leaq	179019(%rip), %rdx ## literal pool for: "Service cannot reset: active instance endpoints"
1000223e1:	4c 89 f7	movq	%r14, %rdi
1000223e4:	be 04 00 00 00	movl	$4, %esi
1000223e9:	31 c0	xorl	%eax, %eax
1000223eb:	e8 39 e0 ff ff	callq	0x100020429
1000223f0:	49 81 c7 18 05 00 00	addq	$1304, %r15
1000223f7:	48 8d 15 5e bb 02 00	leaq	179038(%rip), %rdx ## literal pool for: "cannot reset service: active instance endpoints: %s"
1000223fe:	e9 17 ff ff ff	jmp	0x10002231a
100022403:	55	pushq	%rbp
100022404:	48 89 e5	movq	%rsp, %rbp
100022407:	41 57	pushq	%r15
100022409:	41 56	pushq	%r14
10002240b:	53	pushq	%rbx
10002240c:	50	pushq	%rax
10002240d:	4d 89 ce	movq	%r9, %r14
100022410:	49 89 ff	movq	%rdi, %r15
100022413:	48 8d 0d f5 01 00 00	leaq	501(%rip), %rcx
10002241a:	49 89 f9	movq	%rdi, %r9
10002241d:	e8 a4 8a 01 00	callq	0x10003aec6
100022422:	48 89 c3	movq	%rax, %rbx
100022425:	48 85 c0	testq	%rax, %rax
100022428:	74 10	je	0x10002243a
10002242a:	4c 89 f7	movq	%r14, %rdi
10002242d:	4c 89 fe	movq	%r15, %rsi
100022430:	48 89 da	movq	%rbx, %rdx
100022433:	31 c9	xorl	%ecx, %ecx
100022435:	e8 ad 02 00 00	callq	0x1000226e7
10002243a:	48 89 d8	movq	%rbx, %rax
10002243d:	48 83 c4 08	addq	$8, %rsp
100022441:	5b	popq	%rbx
100022442:	41 5e	popq	%r14
100022444:	41 5f	popq	%r15
100022446:	5d	popq	%rbp
100022447:	c3	retq
100022448:	55	pushq	%rbp
100022449:	48 89 e5	movq	%rsp, %rbp
10002244c:	41 57	pushq	%r15
10002244e:	41 56	pushq	%r14
100022450:	41 55	pushq	%r13
100022452:	41 54	pushq	%r12
100022454:	53	pushq	%rbx
100022455:	50	pushq	%rax
100022456:	49 89 cf	movq	%rcx, %r15
100022459:	49 89 d5	movq	%rdx, %r13
10002245c:	49 89 f6	movq	%rsi, %r14
10002245f:	49 89 fc	movq	%rdi, %r12
100022462:	31 db	xorl	%ebx, %ebx
100022464:	41 f6 40 58 02	testb	$2, 88(%r8)
100022469:	74 04	je	0x10002246f
10002246b:	41 8b 58 30	movl	48(%r8), %ebx
10002246f:	e8 86 c0 fe ff	callq	0x10000e4fa
100022474:	4c 8d 0d c8 ac 00 00	leaq	44232(%rip), %r9
10002247b:	4c 89 e7	movq	%r12, %rdi
10002247e:	4c 89 f6	movq	%r14, %rsi
100022481:	89 da	movl	%ebx, %edx
100022483:	4c 89 e9	movq	%r13, %rcx
100022486:	49 89 c0	movq	%rax, %r8
100022489:	41 57	pushq	%r15
10002248b:	41 54	pushq	%r12
10002248d:	e8 32 10 ff ff	callq	0x1000134c4
100022492:	48 83 c4 10	addq	$16, %rsp
100022496:	48 89 c3	movq	%rax, %rbx
100022499:	48 89 c7	movq	%rax, %rdi
10002249c:	e8 8d 29 ff ff	callq	0x100014e2e
1000224a1:	85 c0	testl	%eax, %eax
1000224a3:	74 39	je	0x1000224de
1000224a5:	48 89 df	movq	%rbx, %rdi
1000224a8:	e8 81 29 ff ff	callq	0x100014e2e
1000224ad:	89 c7	movl	%eax, %edi
1000224af:	e8 5a fc 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000224b4:	48 8d 15 d5 ba 02 00	leaq	178901(%rip), %rdx ## literal pool for: "Ignored socket %s: %s"
1000224bb:	4c 89 ff	movq	%r15, %rdi
1000224be:	be 04 00 00 00	movl	$4, %esi
1000224c3:	4c 89 f1	movq	%r14, %rcx
1000224c6:	49 89 c0	movq	%rax, %r8
1000224c9:	31 c0	xorl	%eax, %eax
1000224cb:	e8 75 c1 fe ff	callq	0x10000e645
1000224d0:	48 89 df	movq	%rbx, %rdi
1000224d3:	31 f6	xorl	%esi, %esi
1000224d5:	e8 77 04 ff ff	callq	0x100012951
1000224da:	31 db	xorl	%ebx, %ebx
1000224dc:	eb 2b	jmp	0x100022509
1000224de:	49 8b 84 24 b0 00 00 00	movq	176(%r12), %rax
1000224e6:	49 81 c4 b0 00 00 00	addq	$176, %r12
1000224ed:	48 89 43 08	movq	%rax, 8(%rbx)
1000224f1:	48 85 c0	testq	%rax, %rax
1000224f4:	74 0b	je	0x100022501
1000224f6:	48 89 d9	movq	%rbx, %rcx
1000224f9:	48 83 c1 08	addq	$8, %rcx
1000224fd:	48 89 48 10	movq	%rcx, 16(%rax)
100022501:	49 89 1c 24	movq	%rbx, (%r12)
100022505:	4c 89 63 10	movq	%r12, 16(%rbx)
100022509:	48 89 d8	movq	%rbx, %rax
10002250c:	48 83 c4 08	addq	$8, %rsp
100022510:	5b	popq	%rbx
100022511:	41 5c	popq	%r12
100022513:	41 5d	popq	%r13
100022515:	41 5e	popq	%r14
100022517:	41 5f	popq	%r15
100022519:	5d	popq	%rbp
10002251a:	c3	retq
10002251b:	55	pushq	%rbp
10002251c:	48 89 e5	movq	%rsp, %rbp
10002251f:	41 57	pushq	%r15
100022521:	41 56	pushq	%r14
100022523:	41 55	pushq	%r13
100022525:	41 54	pushq	%r12
100022527:	53	pushq	%rbx
100022528:	50	pushq	%rax
100022529:	49 89 f7	movq	%rsi, %r15
10002252c:	49 89 fe	movq	%rdi, %r14
10002252f:	48 8d 05 02 fe 03 00	leaq	261634(%rip), %rax
100022536:	48 39 46 60	cmpq	%rax, 96(%rsi)
10002253a:	75 0c	jne	0x100022548
10002253c:	4c 89 f7	movq	%r14, %rdi
10002253f:	e8 ff 1b fe ff	callq	0x100004143
100022544:	84 c0	testb	%al, %al
100022546:	74 23	je	0x10002256b
100022548:	4c 89 f7	movq	%r14, %rdi
10002254b:	e8 78 0d fe ff	callq	0x1000032c8
100022550:	48 85 c0	testq	%rax, %rax
100022553:	74 16	je	0x10002256b
100022555:	48 8d 15 85 bb 02 00	leaq	179077(%rip), %rdx ## literal pool for: "created the implicit endpoint upfront"
10002255c:	4c 89 f7	movq	%r14, %rdi
10002255f:	be 05 00 00 00	movl	$5, %esi
100022564:	31 c0	xorl	%eax, %eax
100022566:	e8 4f 3a ff ff	callq	0x100015fba
10002256b:	49 8b 9e b0 00 00 00	movq	176(%r14), %rbx
100022572:	48 85 db	testq	%rbx, %rbx
100022575:	74 35	je	0x1000225ac
100022577:	4c 8b 63 08	movq	8(%rbx), %r12
10002257b:	4c 8b 6b 30	movq	48(%rbx), %r13
10002257f:	4c 89 ff	movq	%r15, %rdi
100022582:	be 09 00 00 00	movl	$9, %esi
100022587:	e8 bd ec ff ff	callq	0x100021249
10002258c:	66 41 ff 85 1c 01 00 00	incw	284(%r13)
100022594:	41 80 8d 64 01 00 00 08	orb	$8, 356(%r13)
10002259c:	48 89 df	movq	%rbx, %rdi
10002259f:	e8 7c 16 ff ff	callq	0x100013c20
1000225a4:	4c 89 e3	movq	%r12, %rbx
1000225a7:	4d 85 e4	testq	%r12, %r12
1000225aa:	75 cb	jne	0x100022577
1000225ac:	49 8b 9e 88 00 00 00	movq	136(%r14), %rbx
1000225b3:	48 85 db	testq	%rbx, %rbx
1000225b6:	74 48	je	0x100022600
1000225b8:	4c 8b 73 08	movq	8(%rbx), %r14
1000225bc:	4c 89 ff	movq	%r15, %rdi
1000225bf:	48 89 de	movq	%rbx, %rsi
1000225c2:	e8 ed a4 00 00	callq	0x10002cab4
1000225c7:	85 c0	testl	%eax, %eax
1000225c9:	74 2d	je	0x1000225f8
1000225cb:	48 8d 43 08	leaq	8(%rbx), %rax
1000225cf:	48 8b 08	movq	(%rax), %rcx
1000225d2:	48 85 c9	testq	%rcx, %rcx
1000225d5:	74 08	je	0x1000225df
1000225d7:	48 8b 53 10	movq	16(%rbx), %rdx
1000225db:	48 89 51 10	movq	%rdx, 16(%rcx)
1000225df:	48 8b 53 10	movq	16(%rbx), %rdx
1000225e3:	48 89 0a	movq	%rcx, (%rdx)
1000225e6:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000225ea:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
1000225ee:	48 89 df	movq	%rbx, %rdi
1000225f1:	31 f6	xorl	%esi, %esi
1000225f3:	e8 59 03 ff ff	callq	0x100012951
1000225f8:	4c 89 f3	movq	%r14, %rbx
1000225fb:	4d 85 f6	testq	%r14, %r14
1000225fe:	75 b8	jne	0x1000225b8
100022600:	48 83 c4 08	addq	$8, %rsp
100022604:	5b	popq	%rbx
100022605:	41 5c	popq	%r12
100022607:	41 5d	popq	%r13
100022609:	41 5e	popq	%r14
10002260b:	41 5f	popq	%r15
10002260d:	5d	popq	%rbp
10002260e:	c3	retq
10002260f:	55	pushq	%rbp
100022610:	48 89 e5	movq	%rsp, %rbp
100022613:	41 57	pushq	%r15
100022615:	41 56	pushq	%r14
100022617:	53	pushq	%rbx
100022618:	50	pushq	%rax
100022619:	49 89 d6	movq	%rdx, %r14
10002261c:	48 89 fb	movq	%rdi, %rbx
10002261f:	83 fe 01	cmpl	$1, %esi
100022622:	74 39	je	0x10002265d
100022624:	85 f6	testl	%esi, %esi
100022626:	75 2a	jne	0x100022652
100022628:	f6 43 50 08	testb	$8, 80(%rbx)
10002262c:	b8 01 00 00 00	movl	$1, %eax
100022631:	be 08 00 00 00	movl	$8, %esi
100022636:	0f 44 f0	cmovel	%eax, %esi
100022639:	4c 89 f7	movq	%r14, %rdi
10002263c:	e8 83 88 ff ff	callq	0x10001aec4
100022641:	89 c2	movl	%eax, %edx
100022643:	83 e2 fe	andl	$-2, %edx
100022646:	31 c9	xorl	%ecx, %ecx
100022648:	83 fa 24	cmpl	$36, %edx
10002264b:	0f 45 c8	cmovnel	%eax, %ecx
10002264e:	85 c9	testl	%ecx, %ecx
100022650:	75 6b	jne	0x1000226bd
100022652:	48 83 c4 08	addq	$8, %rsp
100022656:	5b	popq	%rbx
100022657:	41 5e	popq	%r14
100022659:	41 5f	popq	%r15
10002265b:	5d	popq	%rbp
10002265c:	c3	retq
10002265d:	4d 8b be e8 00 00 00	movq	232(%r14), %r15
100022664:	41 f6 86 65 01 00 00 08	testb	$8, 357(%r14)
10002266c:	74 1d	je	0x10002268b
10002266e:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
100022675:	48 8d 15 ae b1 02 00	leaq	176558(%rip), %rdx ## literal pool for: "Deactivated abandoned endpoint: %s"
10002267c:	4c 89 ff	movq	%r15, %rdi
10002267f:	be 07 00 00 00	movl	$7, %esi
100022684:	31 c0	xorl	%eax, %eax
100022686:	e8 9e dd ff ff	callq	0x100020429
10002268b:	48 89 df	movq	%rbx, %rdi
10002268e:	e8 58 90 01 00	callq	0x10003b6eb
100022693:	84 c0	testb	%al, %al
100022695:	74 06	je	0x10002269d
100022697:	80 63 50 fb	andb	$-5, 80(%rbx)
10002269b:	eb 0b	jmp	0x1000226a8
10002269d:	4c 89 ff	movq	%r15, %rdi
1000226a0:	48 89 de	movq	%rbx, %rsi
1000226a3:	e8 15 a1 00 00	callq	0x10002c7bd
1000226a8:	4c 89 ff	movq	%r15, %rdi
1000226ab:	4c 89 f6	movq	%r14, %rsi
1000226ae:	48 83 c4 08	addq	$8, %rsp
1000226b2:	5b	popq	%rbx
1000226b3:	41 5e	popq	%r14
1000226b5:	41 5f	popq	%r15
1000226b7:	5d	popq	%rbp
1000226b8:	e9 bf 91 00 00	jmp	0x10002b87c
1000226bd:	83 f9 25	cmpl	$37, %ecx
1000226c0:	74 17	je	0x1000226d9
1000226c2:	48 63 d1	movslq	%ecx, %rdx
1000226c5:	48 8d 3d 3b 5c ff ff	leaq	-41925(%rip), %rdi
1000226cc:	4c 89 f6	movq	%r14, %rsi
1000226cf:	e8 d4 f0 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000226d4:	e9 79 ff ff ff	jmp	0x100022652
1000226d9:	48 8d 3d 1e b1 02 00	leaq	176414(%rip), %rdi ## literal pool for: "endpoint event received for running service"
1000226e0:	31 c0	xorl	%eax, %eax
1000226e2:	e8 2b 1d 01 00	callq	0x100034412
1000226e7:	55	pushq	%rbp
1000226e8:	48 89 e5	movq	%rsp, %rbp
1000226eb:	41 57	pushq	%r15
1000226ed:	41 56	pushq	%r14
1000226ef:	41 55	pushq	%r13
1000226f1:	41 54	pushq	%r12
1000226f3:	53	pushq	%rbx
1000226f4:	50	pushq	%rax
1000226f5:	49 89 d7	movq	%rdx, %r15
1000226f8:	f6 c1 04	testb	$4, %cl
1000226fb:	75 51	jne	0x10002274e
1000226fd:	49 83 7f 08 ff	cmpq	$-1, 8(%r15)
100022702:	0f 85 89 01 00 00	jne	0x100022891
100022708:	49 83 7f 10 ff	cmpq	$-1, 16(%r15)
10002270d:	0f 85 7e 01 00 00	jne	0x100022891
100022713:	49 8d 47 08	leaq	8(%r15), %rax
100022717:	f6 c1 02	testb	$2, %cl
10002271a:	0f 85 11 01 00 00	jne	0x100022831
100022720:	f6 c1 10	testb	$16, %cl
100022723:	0f 85 18 01 00 00	jne	0x100022841
100022729:	f6 c1 40	testb	$64, %cl
10002272c:	0f 85 1f 01 00 00	jne	0x100022851
100022732:	f6 c1 01	testb	$1, %cl
100022735:	0f 85 26 01 00 00	jne	0x100022861
10002273b:	48 8b 8e 88 00 00 00	movq	136(%rsi), %rcx
100022742:	48 81 c6 88 00 00 00	addq	$136, %rsi
100022749:	e9 21 01 00 00	jmp	0x10002286f
10002274e:	49 89 fe	movq	%rdi, %r14
100022751:	bb 90 00 00 00	movl	$144, %ebx
100022756:	4d 8d 24 1f	leaq	(%r15,%rbx), %r12
10002275a:	4c 89 e7	movq	%r12, %rdi
10002275d:	e8 f4 f6 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100022762:	48 8d 3c 18	leaq	(%rax,%rbx), %rdi
100022766:	31 d2	xorl	%edx, %edx
100022768:	48 ff c7	incq	%rdi
10002276b:	0f 94 c2	sete	%dl
10002276e:	48 89 d1	movq	%rdx, %rcx
100022771:	48 f7 d9	negq	%rcx
100022774:	48 31 ca	xorq	%rcx, %rdx
100022777:	0f 95 c2	setne	%dl
10002277a:	48 01 d8	addq	%rbx, %rax
10002277d:	0f 82 1c 01 00 00	jb	0x10002289f
100022783:	84 d2	testb	%dl, %dl
100022785:	0f 85 14 01 00 00	jne	0x10002289f
10002278b:	48 85 c9	testq	%rcx, %rcx
10002278e:	0f 88 0b 01 00 00	js	0x10002289f
100022794:	e8 4c ad fe ff	callq	0x10000d4e5
100022799:	48 89 c3	movq	%rax, %rbx
10002279c:	4c 8d a8 90 00 00 00	leaq	144(%rax), %r13
1000227a3:	4c 89 ef	movq	%r13, %rdi
1000227a6:	4c 89 e6	movq	%r12, %rsi
1000227a9:	e8 84 f6 01 00	callq	0x100041e32 ## symbol stub for: _strcpy
1000227ae:	4c 89 7b 40	movq	%r15, 64(%rbx)
1000227b2:	49 8b 47 38	movq	56(%r15), %rax
1000227b6:	49 83 c7 38	addq	$56, %r15
1000227ba:	48 89 43 28	movq	%rax, 40(%rbx)
1000227be:	48 85 c0	testq	%rax, %rax
1000227c1:	74 08	je	0x1000227cb
1000227c3:	48 8d 4b 28	leaq	40(%rbx), %rcx
1000227c7:	48 89 48 30	movq	%rcx, 48(%rax)
1000227cb:	49 89 1f	movq	%rbx, (%r15)
1000227ce:	4c 89 7b 30	movq	%r15, 48(%rbx)
1000227d2:	4c 89 ef	movq	%r13, %rdi
1000227d5:	e8 df cb fe ff	callq	0x10000f3b9
1000227da:	48 89 c1	movq	%rax, %rcx
1000227dd:	48 ba 11 42 08 21 84 10 42 08	movabsq	$595056260442243601, %rdx
1000227e7:	48 f7 e2	mulq	%rdx
1000227ea:	48 89 c8	movq	%rcx, %rax
1000227ed:	48 29 d0	subq	%rdx, %rax
1000227f0:	48 d1 e8	shrq	%rax
1000227f3:	48 01 d0	addq	%rdx, %rax
1000227f6:	48 c1 e8 04	shrq	$4, %rax
1000227fa:	48 89 c2	movq	%rax, %rdx
1000227fd:	48 c1 e2 05	shlq	$5, %rdx
100022801:	48 29 d0	subq	%rdx, %rax
100022804:	48 01 c8	addq	%rcx, %rax
100022807:	49 8d 04 c6	leaq	(%r14,%rax,8), %rax
10002280b:	48 05 a0 02 00 00	addq	$672, %rax
100022811:	48 8b 08	movq	(%rax), %rcx
100022814:	48 89 4b 18	movq	%rcx, 24(%rbx)
100022818:	48 85 c9	testq	%rcx, %rcx
10002281b:	74 0b	je	0x100022828
10002281d:	48 89 da	movq	%rbx, %rdx
100022820:	48 83 c2 18	addq	$24, %rdx
100022824:	48 89 51 20	movq	%rdx, 32(%rcx)
100022828:	48 89 18	movq	%rbx, (%rax)
10002282b:	48 89 43 20	movq	%rax, 32(%rbx)
10002282f:	eb 51	jmp	0x100022882
100022831:	48 8b 8e 98 00 00 00	movq	152(%rsi), %rcx
100022838:	48 81 c6 98 00 00 00	addq	$152, %rsi
10002283f:	eb 2e	jmp	0x10002286f
100022841:	48 8b 8e a0 00 00 00	movq	160(%rsi), %rcx
100022848:	48 81 c6 a0 00 00 00	addq	$160, %rsi
10002284f:	eb 1e	jmp	0x10002286f
100022851:	48 8b 8e a8 00 00 00	movq	168(%rsi), %rcx
100022858:	48 81 c6 a8 00 00 00	addq	$168, %rsi
10002285f:	eb 0e	jmp	0x10002286f
100022861:	48 8b 8e 90 00 00 00	movq	144(%rsi), %rcx
100022868:	48 81 c6 90 00 00 00	addq	$144, %rsi
10002286f:	48 89 08	movq	%rcx, (%rax)
100022872:	48 85 c9	testq	%rcx, %rcx
100022875:	74 04	je	0x10002287b
100022877:	48 89 41 10	movq	%rax, 16(%rcx)
10002287b:	4c 89 3e	movq	%r15, (%rsi)
10002287e:	49 89 77 10	movq	%rsi, 16(%r15)
100022882:	48 83 c4 08	addq	$8, %rsp
100022886:	5b	popq	%rbx
100022887:	41 5c	popq	%r12
100022889:	41 5d	popq	%r13
10002288b:	41 5e	popq	%r14
10002288d:	41 5f	popq	%r15
10002288f:	5d	popq	%rbp
100022890:	c3	retq
100022891:	48 8d 3d 38 af 02 00	leaq	175928(%rip), %rdi ## literal pool for: "attempting to re-add an endpoint into service"
100022898:	31 c0	xorl	%eax, %eax
10002289a:	e8 73 1b 01 00	callq	0x100034412
10002289f:	0f 0b	ud2
1000228a1:	55	pushq	%rbp
1000228a2:	48 89 e5	movq	%rsp, %rbp
1000228a5:	41 57	pushq	%r15
1000228a7:	41 56	pushq	%r14
1000228a9:	41 54	pushq	%r12
1000228ab:	53	pushq	%rbx
1000228ac:	49 89 f7	movq	%rsi, %r15
1000228af:	49 89 fe	movq	%rdi, %r14
1000228b2:	e8 52 00 00 00	callq	0x100022909
1000228b7:	45 31 e4	xorl	%r12d, %r12d
1000228ba:	4b 8b 9c e6 30 01 00 00	movq	304(%r14,%r12,8), %rbx
1000228c2:	48 85 db	testq	%rbx, %rbx
1000228c5:	74 13	je	0x1000228da
1000228c7:	48 89 df	movq	%rbx, %rdi
1000228ca:	4c 89 fe	movq	%r15, %rsi
1000228cd:	31 d2	xorl	%edx, %edx
1000228cf:	e8 f9 96 ff ff	callq	0x10001bfcd
1000228d4:	48 8b 5b 68	movq	104(%rbx), %rbx
1000228d8:	eb e8	jmp	0x1000228c2
1000228da:	49 ff c4	incq	%r12
1000228dd:	49 83 fc 17	cmpq	$23, %r12
1000228e1:	75 d7	jne	0x1000228ba
1000228e3:	49 8b 9e 20 01 00 00	movq	288(%r14), %rbx
1000228ea:	48 85 db	testq	%rbx, %rbx
1000228ed:	74 11	je	0x100022900
1000228ef:	48 89 df	movq	%rbx, %rdi
1000228f2:	4c 89 fe	movq	%r15, %rsi
1000228f5:	e8 a7 ff ff ff	callq	0x1000228a1
1000228fa:	48 8b 5b 08	movq	8(%rbx), %rbx
1000228fe:	eb ea	jmp	0x1000228ea
100022900:	5b	popq	%rbx
100022901:	41 5c	popq	%r12
100022903:	41 5e	popq	%r14
100022905:	41 5f	popq	%r15
100022907:	5d	popq	%rbp
100022908:	c3	retq
100022909:	55	pushq	%rbp
10002290a:	48 89 e5	movq	%rsp, %rbp
10002290d:	41 57	pushq	%r15
10002290f:	41 56	pushq	%r14
100022911:	41 55	pushq	%r13
100022913:	41 54	pushq	%r12
100022915:	53	pushq	%rbx
100022916:	48 81 ec e8 00 00 00	subq	$232, %rsp
10002291d:	49 89 f4	movq	%rsi, %r12
100022920:	49 89 fd	movq	%rdi, %r13
100022923:	48 8b 05 fe 56 03 00	movq	218878(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002292a:	48 8b 00	movq	(%rax), %rax
10002292d:	48 89 45 d0	movq	%rax, -48(%rbp)
100022931:	be 01 00 00 00	movl	$1, %esi
100022936:	e8 cd db ff ff	callq	0x100020508
10002293b:	48 89 c3	movq	%rax, %rbx
10002293e:	48 8d 15 99 91 02 00	leaq	168345(%rip), %rdx ## literal pool for: "%s = {"
100022945:	4c 89 e7	movq	%r12, %rdi
100022948:	31 f6	xorl	%esi, %esi
10002294a:	48 89 c1	movq	%rax, %rcx
10002294d:	31 c0	xorl	%eax, %eax
10002294f:	e8 1e 63 01 00	callq	0x100038c72
100022954:	48 89 df	movq	%rbx, %rdi
100022957:	e8 d4 f0 01 00	callq	0x100041a30 ## symbol stub for: _free
10002295c:	49 8b 45 60	movq	96(%r13), %rax
100022960:	48 8b 48 70	movq	112(%rax), %rcx
100022964:	48 8d 15 0d 6c 02 00	leaq	158733(%rip), %rdx ## literal pool for: "type = %s"
10002296b:	be 01 00 00 00	movl	$1, %esi
100022970:	4c 89 e7	movq	%r12, %rdi
100022973:	31 c0	xorl	%eax, %eax
100022975:	e8 f8 62 01 00	callq	0x100038c72
10002297a:	49 8b 4d 68	movq	104(%r13), %rcx
10002297e:	48 8d 15 a8 b9 02 00	leaq	178600(%rip), %rdx ## literal pool for: "handle = %lu"
100022985:	be 01 00 00 00	movl	$1, %esi
10002298a:	4c 89 e7	movq	%r12, %rdi
10002298d:	31 c0	xorl	%eax, %eax
10002298f:	e8 de 62 01 00	callq	0x100038c72
100022994:	41 8b 8d 94 00 00 00	movl	148(%r13), %ecx
10002299b:	48 8d 15 51 91 02 00	leaq	168273(%rip), %rdx ## literal pool for: "active count = %d"
1000229a2:	be 01 00 00 00	movl	$1, %esi
1000229a7:	4c 89 e7	movq	%r12, %rdi
1000229aa:	31 c0	xorl	%eax, %eax
1000229ac:	e8 c1 62 01 00	callq	0x100038c72
1000229b1:	41 8b 8d 9c 00 00 00	movl	156(%r13), %ecx
1000229b8:	85 c9	testl	%ecx, %ecx
1000229ba:	74 16	je	0x1000229d2
1000229bc:	48 8d 15 77 b9 02 00	leaq	178551(%rip), %rdx ## literal pool for: "on-demand count = %d"
1000229c3:	be 01 00 00 00	movl	$1, %esi
1000229c8:	4c 89 e7	movq	%r12, %rdi
1000229cb:	31 c0	xorl	%eax, %eax
1000229cd:	e8 a0 62 01 00	callq	0x100038c72
1000229d2:	41 8b 8d a0 00 00 00	movl	160(%r13), %ecx
1000229d9:	85 c9	testl	%ecx, %ecx
1000229db:	74 16	je	0x1000229f3
1000229dd:	48 8d 15 6b b9 02 00	leaq	178539(%rip), %rdx ## literal pool for: "service count = %u"
1000229e4:	be 01 00 00 00	movl	$1, %esi
1000229e9:	4c 89 e7	movq	%r12, %rdi
1000229ec:	31 c0	xorl	%eax, %eax
1000229ee:	e8 7f 62 01 00	callq	0x100038c72
1000229f3:	41 8b 8d a4 00 00 00	movl	164(%r13), %ecx
1000229fa:	85 c9	testl	%ecx, %ecx
1000229fc:	74 16	je	0x100022a14
1000229fe:	48 8d 15 5d b9 02 00	leaq	178525(%rip), %rdx ## literal pool for: "active service count = %u"
100022a05:	be 01 00 00 00	movl	$1, %esi
100022a0a:	4c 89 e7	movq	%r12, %rdi
100022a0d:	31 c0	xorl	%eax, %eax
100022a0f:	e8 5e 62 01 00	callq	0x100038c72
100022a14:	48 8d 05 85 f7 03 00	leaq	259973(%rip), %rax
100022a1b:	49 39 45 60	cmpq	%rax, 96(%r13)
100022a1f:	75 68	jne	0x100022a89
100022a21:	e8 f3 ee fd ff	callq	0x100001919
100022a26:	48 85 c0	testq	%rax, %rax
100022a29:	74 19	je	0x100022a44
100022a2b:	48 8d 15 4a b9 02 00	leaq	178506(%rip), %rdx ## literal pool for: "boot mode = %s"
100022a32:	be 01 00 00 00	movl	$1, %esi
100022a37:	4c 89 e7	movq	%r12, %rdi
100022a3a:	48 89 c1	movq	%rax, %rcx
100022a3d:	31 c0	xorl	%eax, %eax
100022a3f:	e8 2e 62 01 00	callq	0x100038c72
100022a44:	48 8d 05 19 fc 03 00	leaq	261145(%rip), %rax
100022a4b:	8b 08	movl	(%rax), %ecx
100022a4d:	48 8d 15 37 b9 02 00	leaq	178487(%rip), %rdx ## literal pool for: "maximum allowed shutdown time = %d s"
100022a54:	be 01 00 00 00	movl	$1, %esi
100022a59:	4c 89 e7	movq	%r12, %rdi
100022a5c:	31 c0	xorl	%eax, %eax
100022a5e:	e8 0f 62 01 00	callq	0x100038c72
100022a63:	48 8d 05 96 fc 03 00	leaq	261270(%rip), %rax
100022a6a:	31 c9	xorl	%ecx, %ecx
100022a6c:	48 83 38 00	cmpq	$0, (%rax)
100022a70:	0f 95 c1	setne	%cl
100022a73:	48 8d 15 36 b9 02 00	leaq	178486(%rip), %rdx ## literal pool for: "service stats = %d"
100022a7a:	be 01 00 00 00	movl	$1, %esi
100022a7f:	4c 89 e7	movq	%r12, %rdi
100022a82:	31 c0	xorl	%eax, %eax
100022a84:	e8 e9 61 01 00	callq	0x100038c72
100022a89:	49 8b 8d d0 00 00 00	movq	208(%r13), %rcx
100022a90:	48 85 c9	testq	%rcx, %rcx
100022a93:	74 16	je	0x100022aab
100022a95:	48 8d 15 27 b9 02 00	leaq	178471(%rip), %rdx ## literal pool for: "originator = %s"
100022a9c:	be 01 00 00 00	movl	$1, %esi
100022aa1:	4c 89 e7	movq	%r12, %rdi
100022aa4:	31 c0	xorl	%eax, %eax
100022aa6:	e8 c7 61 01 00	callq	0x100038c72
100022aab:	49 8b 8d 18 01 00 00	movq	280(%r13), %rcx
100022ab2:	45 8b 85 0c 01 00 00	movl	268(%r13), %r8d
100022ab9:	48 8d 15 13 b9 02 00	leaq	178451(%rip), %rdx ## literal pool for: "creator = %s[%d]"
100022ac0:	be 01 00 00 00	movl	$1, %esi
100022ac5:	4c 89 e7	movq	%r12, %rdi
100022ac8:	31 c0	xorl	%eax, %eax
100022aca:	e8 a3 61 01 00	callq	0x100038c72
100022acf:	41 8b 8d fc 00 00 00	movl	252(%r13), %ecx
100022ad6:	48 8d 15 07 b9 02 00	leaq	178439(%rip), %rdx ## literal pool for: "creator euid = %d"
100022add:	be 01 00 00 00	movl	$1, %esi
100022ae2:	4c 89 e7	movq	%r12, %rdi
100022ae5:	31 c0	xorl	%eax, %eax
100022ae7:	e8 86 61 01 00	callq	0x100038c72
100022aec:	48 8d 05 45 f8 03 00	leaq	260165(%rip), %rax
100022af3:	49 39 45 60	cmpq	%rax, 96(%r13)
100022af7:	75 1a	jne	0x100022b13
100022af9:	49 8b 4d 70	movq	112(%r13), %rcx
100022afd:	48 8d 15 f2 b8 02 00	leaq	178418(%rip), %rdx ## literal pool for: "uniqueid = %llu"
100022b04:	be 01 00 00 00	movl	$1, %esi
100022b09:	4c 89 e7	movq	%r12, %rdi
100022b0c:	31 c0	xorl	%eax, %eax
100022b0e:	e8 5f 61 01 00	callq	0x100038c72
100022b13:	49 8b 8d a8 03 00 00	movq	936(%r13), %rcx
100022b1a:	48 85 c9	testq	%rcx, %rcx
100022b1d:	74 16	je	0x100022b35
100022b1f:	48 8d 15 e0 b8 02 00	leaq	178400(%rip), %rdx ## literal pool for: "session = %s"
100022b26:	be 01 00 00 00	movl	$1, %esi
100022b2b:	4c 89 e7	movq	%r12, %rdi
100022b2e:	31 c0	xorl	%eax, %eax
100022b30:	e8 3d 61 01 00	callq	0x100038c72
100022b35:	49 8b 8d b0 03 00 00	movq	944(%r13), %rcx
100022b3c:	48 85 c9	testq	%rcx, %rcx
100022b3f:	74 1d	je	0x100022b5e
100022b41:	48 81 c1 10 04 00 00	addq	$1040, %rcx
100022b48:	48 8d 15 c4 b8 02 00	leaq	178372(%rip), %rdx ## literal pool for: "endpoint destination = %s"
100022b4f:	be 01 00 00 00	movl	$1, %esi
100022b54:	4c 89 e7	movq	%r12, %rdi
100022b57:	31 c0	xorl	%eax, %eax
100022b59:	e8 14 61 01 00	callq	0x100038c72
100022b5e:	41 8b 8d 98 00 00 00	movl	152(%r13), %ecx
100022b65:	85 c9	testl	%ecx, %ecx
100022b67:	74 16	je	0x100022b7f
100022b69:	48 8d 15 bd b8 02 00	leaq	178365(%rip), %rdx ## literal pool for: "external activation count = %d"
100022b70:	be 01 00 00 00	movl	$1, %esi
100022b75:	4c 89 e7	movq	%r12, %rdi
100022b78:	31 c0	xorl	%eax, %eax
100022b7a:	e8 f3 60 01 00	callq	0x100038c72
100022b7f:	49 8b 85 d0 03 00 00	movq	976(%r13), %rax
100022b86:	48 85 c0	testq	%rax, %rax
100022b89:	74 1a	je	0x100022ba5
100022b8b:	48 8b 48 68	movq	104(%rax), %rcx
100022b8f:	48 8d 15 b6 b8 02 00	leaq	178358(%rip), %rdx ## literal pool for: "gui asid = %lu"
100022b96:	be 01 00 00 00	movl	$1, %esi
100022b9b:	4c 89 e7	movq	%r12, %rdi
100022b9e:	31 c0	xorl	%eax, %eax
100022ba0:	e8 cd 60 01 00	callq	0x100038c72
100022ba5:	49 8b 8d e0 03 00 00	movq	992(%r13), %rcx
100022bac:	48 85 c9	testq	%rcx, %rcx
100022baf:	74 1d	je	0x100022bce
100022bb1:	48 81 c1 18 05 00 00	addq	$1304, %rcx
100022bb8:	48 8d 15 9c b8 02 00	leaq	178332(%rip), %rdx ## literal pool for: "auxilliary bootstrapper = %s"
100022bbf:	be 01 00 00 00	movl	$1, %esi
100022bc4:	4c 89 e7	movq	%r12, %rdi
100022bc7:	31 c0	xorl	%eax, %eax
100022bc9:	e8 a4 60 01 00	callq	0x100038c72
100022bce:	48 8d 15 a3 b8 02 00	leaq	178339(%rip), %rdx ## literal pool for: "security context = {"
100022bd5:	be 01 00 00 00	movl	$1, %esi
100022bda:	4c 89 e7	movq	%r12, %rdi
100022bdd:	31 c0	xorl	%eax, %eax
100022bdf:	e8 8e 60 01 00	callq	0x100038c72
100022be4:	41 f6 45 58 02	testb	$2, 88(%r13)
100022be9:	75 18	jne	0x100022c03
100022beb:	48 8d 15 a4 b8 02 00	leaq	178340(%rip), %rdx ## literal pool for: "uid unset"
100022bf2:	be 02 00 00 00	movl	$2, %esi
100022bf7:	4c 89 e7	movq	%r12, %rdi
100022bfa:	31 c0	xorl	%eax, %eax
100022bfc:	e8 71 60 01 00	callq	0x100038c72
100022c01:	eb 1a	jmp	0x100022c1d
100022c03:	41 8b 4d 30	movl	48(%r13), %ecx
100022c07:	48 8d 15 7f b8 02 00	leaq	178303(%rip), %rdx ## literal pool for: "uid = %u"
100022c0e:	be 02 00 00 00	movl	$2, %esi
100022c13:	4c 89 e7	movq	%r12, %rdi
100022c16:	31 c0	xorl	%eax, %eax
100022c18:	e8 55 60 01 00	callq	0x100038c72
100022c1d:	0f 28 05 5c 06 02 00	movaps	132700(%rip), %xmm0
100022c24:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100022c28:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100022c2c:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100022c30:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100022c34:	41 8b 4d 34	movl	52(%r13), %ecx
100022c38:	83 f9 ff	cmpl	$-1, %ecx
100022c3b:	74 19	je	0x100022c56
100022c3d:	48 8d 15 71 b8 02 00	leaq	178289(%rip), %rdx ## literal pool for: "%u"
100022c44:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100022c48:	be 40 00 00 00	movl	$64, %esi
100022c4d:	31 c0	xorl	%eax, %eax
100022c4f:	e8 ae f1 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100022c54:	eb 19	jmp	0x100022c6f
100022c56:	0f 10 05 43 b8 02 00	movups	178243(%rip), %xmm0 ## literal pool for: "(assign new session)"
100022c5d:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100022c61:	48 b8 65 73 73 69 6f 6e 29 00	movabsq	$11661898834735973, %rax
100022c6b:	48 89 45 9d	movq	%rax, -99(%rbp)
100022c6f:	48 8d 15 42 b8 02 00	leaq	178242(%rip), %rdx ## literal pool for: "asid = %s"
100022c76:	48 8d 4d 90	leaq	-112(%rbp), %rcx
100022c7a:	be 02 00 00 00	movl	$2, %esi
100022c7f:	4c 89 e7	movq	%r12, %rdi
100022c82:	31 c0	xorl	%eax, %eax
100022c84:	e8 e9 5f 01 00	callq	0x100038c72
100022c89:	41 f6 45 58 01	testb	$1, 88(%r13)
100022c8e:	74 1b	je	0x100022cab
100022c90:	41 0f b7 4d 38	movzwl	56(%r13), %ecx
100022c95:	48 8d 15 b7 90 02 00	leaq	168119(%rip), %rdx ## literal pool for: "umask = %o"
100022c9c:	be 02 00 00 00	movl	$2, %esi
100022ca1:	4c 89 e7	movq	%r12, %rdi
100022ca4:	31 c0	xorl	%eax, %eax
100022ca6:	e8 c7 5f 01 00	callq	0x100038c72
100022cab:	48 8d 15 cc 5d 02 00	leaq	155084(%rip), %rdx ## literal pool for: "}"
100022cb2:	be 01 00 00 00	movl	$1, %esi
100022cb7:	4c 89 e7	movq	%r12, %rdi
100022cba:	31 c0	xorl	%eax, %eax
100022cbc:	e8 b1 5f 01 00	callq	0x100038c72
100022cc1:	4c 89 e7	movq	%r12, %rdi
100022cc4:	e8 a4 60 01 00	callq	0x100038d6d
100022cc9:	49 8b 85 e8 00 00 00	movq	232(%r13), %rax
100022cd0:	48 85 c0	testq	%rax, %rax
100022cd3:	74 2a	je	0x100022cff
100022cd5:	48 b9 db 34 b6 d7 82 de 1b 43	movabsq	$4835703278458516699, %rcx
100022cdf:	48 f7 e1	mulq	%rcx
100022ce2:	48 89 d1	movq	%rdx, %rcx
100022ce5:	48 c1 e9 12	shrq	$18, %rcx
100022ce9:	48 8d 15 d2 b7 02 00	leaq	178130(%rip), %rdx ## literal pool for: "bringup time = %llu ms"
100022cf0:	be 01 00 00 00	movl	$1, %esi
100022cf5:	4c 89 e7	movq	%r12, %rdi
100022cf8:	31 c0	xorl	%eax, %eax
100022cfa:	e8 73 5f 01 00	callq	0x100038c72
100022cff:	49 83 bd d8 00 00 00 00	cmpq	$0, 216(%r13)
100022d07:	74 59	je	0x100022d62
100022d09:	48 8d 15 c9 b7 02 00	leaq	178121(%rip), %rdx ## literal pool for: "xpc service paths = {"
100022d10:	be 01 00 00 00	movl	$1, %esi
100022d15:	4c 89 e7	movq	%r12, %rdi
100022d18:	31 c0	xorl	%eax, %eax
100022d1a:	e8 53 5f 01 00	callq	0x100038c72
100022d1f:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
100022d26:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
100022d2d:	4c 89 66 08	movq	%r12, 8(%rsi)
100022d31:	48 c7 46 10 02 00 00 00	movq	$2, 16(%rsi)
100022d39:	49 8b bd d8 00 00 00	movq	216(%r13), %rdi
100022d40:	48 8d 15 88 a7 00 00	leaq	42888(%rip), %rdx
100022d47:	e8 ba f2 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100022d4c:	48 8d 15 2b 5d 02 00	leaq	154923(%rip), %rdx ## literal pool for: "}"
100022d53:	be 01 00 00 00	movl	$1, %esi
100022d58:	4c 89 e7	movq	%r12, %rdi
100022d5b:	31 c0	xorl	%eax, %eax
100022d5d:	e8 10 5f 01 00	callq	0x100038c72
100022d62:	41 8b 8d 90 00 00 00	movl	144(%r13), %ecx
100022d69:	48 8d 15 7f b7 02 00	leaq	178047(%rip), %rdx ## literal pool for: "death port = 0x%x"
100022d70:	be 01 00 00 00	movl	$1, %esi
100022d75:	4c 89 e7	movq	%r12, %rdi
100022d78:	31 c0	xorl	%eax, %eax
100022d7a:	e8 f3 5e 01 00	callq	0x100038c72
100022d7f:	41 0f b7 8d a8 00 00 00	movzwl	168(%r13), %ecx
100022d87:	85 c9	testl	%ecx, %ecx
100022d89:	74 16	je	0x100022da1
100022d8b:	48 8d 15 6f b7 02 00	leaq	178031(%rip), %rdx ## literal pool for: "in-progress bootstraps = %hu"
100022d92:	be 01 00 00 00	movl	$1, %esi
100022d97:	4c 89 e7	movq	%r12, %rdi
100022d9a:	31 c0	xorl	%eax, %eax
100022d9c:	e8 d1 5e 01 00	callq	0x100038c72
100022da1:	49 83 bd b0 00 00 00 00	cmpq	$0, 176(%r13)
100022da9:	4c 89 ad 48 ff ff ff	movq	%r13, -184(%rbp)
100022db0:	0f 84 cd 00 00 00	je	0x100022e83
100022db6:	48 8d 15 61 b7 02 00	leaq	178017(%rip), %rdx ## literal pool for: "pending requests = {"
100022dbd:	be 01 00 00 00	movl	$1, %esi
100022dc2:	4c 89 e7	movq	%r12, %rdi
100022dc5:	31 c0	xorl	%eax, %eax
100022dc7:	e8 a6 5e 01 00	callq	0x100038c72
100022dcc:	4d 8b ad b0 00 00 00	movq	176(%r13), %r13
100022dd3:	4d 85 ed	testq	%r13, %r13
100022dd6:	0f 28 05 a3 04 02 00	movaps	132259(%rip), %xmm0
100022ddd:	0f 84 83 00 00 00	je	0x100022e66
100022de3:	4c 8d b5 20 ff ff ff	leaq	-224(%rbp), %r14
100022dea:	4c 8d bd 50 ff ff ff	leaq	-176(%rbp), %r15
100022df1:	48 8d 1d 3b b7 02 00	leaq	177979(%rip), %rbx ## literal pool for: "caller = %s.%d, event = %d"
100022df8:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100022dfc:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100022e03:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100022e0a:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100022e11:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
100022e18:	0f 29 85 20 ff ff ff	movaps	%xmm0, -224(%rbp)
100022e1f:	49 8b 7d 18	movq	24(%r13), %rdi
100022e23:	4c 89 f6	movq	%r14, %rsi
100022e26:	e8 05 f2 01 00	callq	0x100042030 ## symbol stub for: _xpc_dictionary_get_audit_token
100022e2b:	4c 89 f7	movq	%r14, %rdi
100022e2e:	4c 89 fe	movq	%r15, %rsi
100022e31:	e8 27 1a 01 00	callq	0x10003485d
100022e36:	44 8b 85 34 ff ff ff	movl	-204(%rbp), %r8d
100022e3d:	45 8b 4d 20	movl	32(%r13), %r9d
100022e41:	be 02 00 00 00	movl	$2, %esi
100022e46:	4c 89 e7	movq	%r12, %rdi
100022e49:	48 89 da	movq	%rbx, %rdx
100022e4c:	48 89 c1	movq	%rax, %rcx
100022e4f:	31 c0	xorl	%eax, %eax
100022e51:	e8 1c 5e 01 00	callq	0x100038c72
100022e56:	0f 28 05 23 04 02 00	movaps	132131(%rip), %xmm0
100022e5d:	4d 8b 6d 00	movq	(%r13), %r13
100022e61:	4d 85 ed	testq	%r13, %r13
100022e64:	75 92	jne	0x100022df8
100022e66:	48 8d 15 11 5c 02 00	leaq	154641(%rip), %rdx ## literal pool for: "}"
100022e6d:	be 01 00 00 00	movl	$1, %esi
100022e72:	4c 89 e7	movq	%r12, %rdi
100022e75:	31 c0	xorl	%eax, %eax
100022e77:	e8 f6 5d 01 00	callq	0x100038c72
100022e7c:	4c 8b ad 48 ff ff ff	movq	-184(%rbp), %r13
100022e83:	49 83 bd 20 01 00 00 00	cmpq	$0, 288(%r13)
100022e8b:	0f 84 8e 00 00 00	je	0x100022f1f
100022e91:	48 8d 15 b6 b6 02 00	leaq	177846(%rip), %rdx ## literal pool for: "subdomains = {"
100022e98:	be 01 00 00 00	movl	$1, %esi
100022e9d:	4c 89 e7	movq	%r12, %rdi
100022ea0:	31 c0	xorl	%eax, %eax
100022ea2:	e8 cb 5d 01 00	callq	0x100038c72
100022ea7:	4d 8b b5 20 01 00 00	movq	288(%r13), %r14
100022eae:	4d 85 f6	testq	%r14, %r14
100022eb1:	74 56	je	0x100022f09
100022eb3:	4c 8d 3d 5c 47 02 00	leaq	149340(%rip), %r15 ## literal pool for: "%s"
100022eba:	48 8d 05 77 f4 03 00	leaq	259191(%rip), %rax
100022ec1:	49 39 46 60	cmpq	%rax, 96(%r14)
100022ec5:	74 2f	je	0x100022ef6
100022ec7:	4c 89 f7	movq	%r14, %rdi
100022eca:	be 01 00 00 00	movl	$1, %esi
100022ecf:	e8 34 d6 ff ff	callq	0x100020508
100022ed4:	48 89 c3	movq	%rax, %rbx
100022ed7:	be 02 00 00 00	movl	$2, %esi
100022edc:	4c 89 e7	movq	%r12, %rdi
100022edf:	4c 89 fa	movq	%r15, %rdx
100022ee2:	48 89 c1	movq	%rax, %rcx
100022ee5:	31 c0	xorl	%eax, %eax
100022ee7:	e8 86 5d 01 00	callq	0x100038c72
100022eec:	48 89 df	movq	%rbx, %rdi
100022eef:	e8 3c eb 01 00	callq	0x100041a30 ## symbol stub for: _free
100022ef4:	eb 0a	jmp	0x100022f00
100022ef6:	49 83 be d8 00 00 00 00	cmpq	$0, 216(%r14)
100022efe:	74 c7	je	0x100022ec7
100022f00:	4d 8b 76 08	movq	8(%r14), %r14
100022f04:	4d 85 f6	testq	%r14, %r14
100022f07:	75 b1	jne	0x100022eba
100022f09:	48 8d 15 6e 5b 02 00	leaq	154478(%rip), %rdx ## literal pool for: "}"
100022f10:	be 01 00 00 00	movl	$1, %esi
100022f15:	4c 89 e7	movq	%r12, %rdi
100022f18:	31 c0	xorl	%eax, %eax
100022f1a:	e8 53 5d 01 00	callq	0x100038c72
100022f1f:	49 83 7d 28 00	cmpq	$0, 40(%r13)
100022f24:	74 5a	je	0x100022f80
100022f26:	48 8d 15 30 b6 02 00	leaq	177712(%rip), %rdx ## literal pool for: "pending attachments = {"
100022f2d:	be 01 00 00 00	movl	$1, %esi
100022f32:	4c 89 e7	movq	%r12, %rdi
100022f35:	31 c0	xorl	%eax, %eax
100022f37:	e8 36 5d 01 00	callq	0x100038c72
100022f3c:	49 8b 5d 28	movq	40(%r13), %rbx
100022f40:	48 85 db	testq	%rbx, %rbx
100022f43:	74 25	je	0x100022f6a
100022f45:	4c 8d 35 ca 46 02 00	leaq	149194(%rip), %r14 ## literal pool for: "%s"
100022f4c:	48 8b 4b 10	movq	16(%rbx), %rcx
100022f50:	be 02 00 00 00	movl	$2, %esi
100022f55:	4c 89 e7	movq	%r12, %rdi
100022f58:	4c 89 f2	movq	%r14, %rdx
100022f5b:	31 c0	xorl	%eax, %eax
100022f5d:	e8 10 5d 01 00	callq	0x100038c72
100022f62:	48 8b 1b	movq	(%rbx), %rbx
100022f65:	48 85 db	testq	%rbx, %rbx
100022f68:	75 e2	jne	0x100022f4c
100022f6a:	48 8d 15 0d 5b 02 00	leaq	154381(%rip), %rdx ## literal pool for: "}"
100022f71:	be 01 00 00 00	movl	$1, %esi
100022f76:	4c 89 e7	movq	%r12, %rdi
100022f79:	31 c0	xorl	%eax, %eax
100022f7b:	e8 f2 5c 01 00	callq	0x100038c72
100022f80:	48 8d 05 19 f2 03 00	leaq	258585(%rip), %rax
100022f87:	49 39 45 60	cmpq	%rax, 96(%r13)
100022f8b:	75 0a	jne	0x100022f97
100022f8d:	4c 89 e7	movq	%r12, %rdi
100022f90:	31 f6	xorl	%esi, %esi
100022f92:	e8 9f 8f ff ff	callq	0x10001bf36
100022f97:	49 83 7d 50 00	cmpq	$0, 80(%r13)
100022f9c:	74 52	je	0x100022ff0
100022f9e:	4c 89 e7	movq	%r12, %rdi
100022fa1:	e8 c7 5d 01 00	callq	0x100038d6d
100022fa6:	48 8d 15 50 8d 02 00	leaq	167248(%rip), %rdx ## literal pool for: "environment = {"
100022fad:	be 01 00 00 00	movl	$1, %esi
100022fb2:	4c 89 e7	movq	%r12, %rdi
100022fb5:	31 c0	xorl	%eax, %eax
100022fb7:	e8 b6 5c 01 00	callq	0x100038c72
100022fbc:	4d 8b 75 50	movq	80(%r13), %r14
100022fc0:	4d 85 f6	testq	%r14, %r14
100022fc3:	74 15	je	0x100022fda
100022fc5:	be 02 00 00 00	movl	$2, %esi
100022fca:	4c 89 f7	movq	%r14, %rdi
100022fcd:	4c 89 e2	movq	%r12, %rdx
100022fd0:	e8 db fa fe ff	callq	0x100012ab0
100022fd5:	4d 8b 36	movq	(%r14), %r14
100022fd8:	eb e6	jmp	0x100022fc0
100022fda:	48 8d 15 9d 5a 02 00	leaq	154269(%rip), %rdx ## literal pool for: "}"
100022fe1:	be 01 00 00 00	movl	$1, %esi
100022fe6:	4c 89 e7	movq	%r12, %rdi
100022fe9:	31 c0	xorl	%eax, %eax
100022feb:	e8 82 5c 01 00	callq	0x100038c72
100022ff0:	4c 89 e7	movq	%r12, %rdi
100022ff3:	e8 75 5d 01 00	callq	0x100038d6d
100022ff8:	48 8d 15 76 b5 02 00	leaq	177526(%rip), %rdx ## literal pool for: "services = {"
100022fff:	45 31 f6	xorl	%r14d, %r14d
100023002:	be 01 00 00 00	movl	$1, %esi
100023007:	4c 89 e7	movq	%r12, %rdi
10002300a:	31 c0	xorl	%eax, %eax
10002300c:	e8 61 5c 01 00	callq	0x100038c72
100023011:	4b 8b 9c f5 30 01 00 00	movq	304(%r13,%r14,8), %rbx
100023019:	48 85 db	testq	%rbx, %rbx
10002301c:	74 16	je	0x100023034
10002301e:	ba 02 00 00 00	movl	$2, %edx
100023023:	48 89 df	movq	%rbx, %rdi
100023026:	4c 89 e6	movq	%r12, %rsi
100023029:	e8 65 af ff ff	callq	0x10001df93
10002302e:	48 8b 5b 68	movq	104(%rbx), %rbx
100023032:	eb e5	jmp	0x100023019
100023034:	49 ff c6	incq	%r14
100023037:	49 83 fe 17	cmpq	$23, %r14
10002303b:	75 d4	jne	0x100023011
10002303d:	48 8d 15 3a 5a 02 00	leaq	154170(%rip), %rdx ## literal pool for: "}"
100023044:	be 01 00 00 00	movl	$1, %esi
100023049:	4c 89 e7	movq	%r12, %rdi
10002304c:	31 c0	xorl	%eax, %eax
10002304e:	e8 1f 5c 01 00	callq	0x100038c72
100023053:	4d 8d b5 e8 01 00 00	leaq	488(%r13), %r14
10002305a:	4c 89 f7	movq	%r14, %rdi
10002305d:	e8 cc eb 01 00	callq	0x100041c2e ## symbol stub for: _os_map_str_count
100023062:	48 85 c0	testq	%rax, %rax
100023065:	74 77	je	0x1000230de
100023067:	4c 89 e7	movq	%r12, %rdi
10002306a:	e8 fe 5c 01 00	callq	0x100038d6d
10002306f:	48 8d 15 0c b5 02 00	leaq	177420(%rip), %rdx ## literal pool for: "service stubs = {"
100023076:	be 01 00 00 00	movl	$1, %esi
10002307b:	4c 89 e7	movq	%r12, %rdi
10002307e:	31 c0	xorl	%eax, %eax
100023080:	e8 ed 5b 01 00	callq	0x100038c72
100023085:	48 8b 05 8c 4f 03 00	movq	216972(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10002308c:	48 8d b5 f0 fe ff ff	leaq	-272(%rbp), %rsi
100023093:	48 89 06	movq	%rax, (%rsi)
100023096:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10002309e:	48 8d 05 48 a4 00 00	leaq	42056(%rip), %rax
1000230a5:	48 89 46 10	movq	%rax, 16(%rsi)
1000230a9:	48 8d 05 e0 7f 03 00	leaq	229344(%rip), %rax
1000230b0:	48 89 46 18	movq	%rax, 24(%rsi)
1000230b4:	4c 89 66 20	movq	%r12, 32(%rsi)
1000230b8:	48 c7 46 28 00 00 00 00	movq	$0, 40(%rsi)
1000230c0:	4c 89 f7	movq	%r14, %rdi
1000230c3:	e8 7e eb 01 00	callq	0x100041c46 ## symbol stub for: _os_map_str_foreach
1000230c8:	48 8d 15 af 59 02 00	leaq	154031(%rip), %rdx ## literal pool for: "}"
1000230cf:	be 01 00 00 00	movl	$1, %esi
1000230d4:	4c 89 e7	movq	%r12, %rdi
1000230d7:	31 c0	xorl	%eax, %eax
1000230d9:	e8 94 5b 01 00	callq	0x100038c72
1000230de:	4c 89 e7	movq	%r12, %rdi
1000230e1:	e8 87 5c 01 00	callq	0x100038d6d
1000230e6:	48 8d 15 a7 b4 02 00	leaq	177319(%rip), %rdx ## literal pool for: "unmanaged processes = {"
1000230ed:	be 01 00 00 00	movl	$1, %esi
1000230f2:	4c 89 e7	movq	%r12, %rdi
1000230f5:	31 c0	xorl	%eax, %eax
1000230f7:	e8 76 5b 01 00	callq	0x100038c72
1000230fc:	4c 8d 35 7b 59 02 00	leaq	153979(%rip), %r14 ## literal pool for: "}"
100023103:	4c 8d 3d 93 8f 02 00	leaq	167827(%rip), %r15 ## literal pool for: "pid-local endpoints = {"
10002310a:	31 c0	xorl	%eax, %eax
10002310c:	48 89 85 40 ff ff ff	movq	%rax, -192(%rbp)
100023113:	4d 8b ac c5 68 02 00 00	movq	616(%r13,%rax,8), %r13
10002311b:	4d 85 ed	testq	%r13, %r13
10002311e:	0f 84 e6 00 00 00	je	0x10002320a
100023124:	49 8d 8d 18 05 00 00	leaq	1304(%r13), %rcx
10002312b:	be 02 00 00 00	movl	$2, %esi
100023130:	4c 89 e7	movq	%r12, %rdi
100023133:	48 8d 15 a4 89 02 00	leaq	166308(%rip), %rdx ## literal pool for: "%s = {"
10002313a:	31 c0	xorl	%eax, %eax
10002313c:	e8 31 5b 01 00	callq	0x100038c72
100023141:	41 0f bf 8d 1c 01 00 00	movswl	284(%r13), %ecx
100023149:	be 03 00 00 00	movl	$3, %esi
10002314e:	4c 89 e7	movq	%r12, %rdi
100023151:	48 8d 15 9b 89 02 00	leaq	166299(%rip), %rdx ## literal pool for: "active count = %d"
100023158:	31 c0	xorl	%eax, %eax
10002315a:	e8 13 5b 01 00	callq	0x100038c72
10002315f:	be 03 00 00 00	movl	$3, %esi
100023164:	4c 89 e7	movq	%r12, %rdi
100023167:	48 8d 15 19 8f 02 00	leaq	167705(%rip), %rdx ## literal pool for: "dynamic endpoints = {"
10002316e:	31 c0	xorl	%eax, %eax
100023170:	e8 fd 5a 01 00	callq	0x100038c72
100023175:	49 8b 9d 90 00 00 00	movq	144(%r13), %rbx
10002317c:	48 85 db	testq	%rbx, %rbx
10002317f:	74 16	je	0x100023197
100023181:	ba 04 00 00 00	movl	$4, %edx
100023186:	48 89 df	movq	%rbx, %rdi
100023189:	4c 89 e6	movq	%r12, %rsi
10002318c:	e8 7f 85 01 00	callq	0x10003b710
100023191:	48 8b 5b 08	movq	8(%rbx), %rbx
100023195:	eb e5	jmp	0x10002317c
100023197:	be 03 00 00 00	movl	$3, %esi
10002319c:	4c 89 e7	movq	%r12, %rdi
10002319f:	4c 89 f2	movq	%r14, %rdx
1000231a2:	31 c0	xorl	%eax, %eax
1000231a4:	e8 c9 5a 01 00	callq	0x100038c72
1000231a9:	be 03 00 00 00	movl	$3, %esi
1000231ae:	4c 89 e7	movq	%r12, %rdi
1000231b1:	4c 89 fa	movq	%r15, %rdx
1000231b4:	31 c0	xorl	%eax, %eax
1000231b6:	e8 b7 5a 01 00	callq	0x100038c72
1000231bb:	49 8b 9d 98 00 00 00	movq	152(%r13), %rbx
1000231c2:	48 85 db	testq	%rbx, %rbx
1000231c5:	74 16	je	0x1000231dd
1000231c7:	ba 04 00 00 00	movl	$4, %edx
1000231cc:	48 89 df	movq	%rbx, %rdi
1000231cf:	4c 89 e6	movq	%r12, %rsi
1000231d2:	e8 39 85 01 00	callq	0x10003b710
1000231d7:	48 8b 5b 08	movq	8(%rbx), %rbx
1000231db:	eb e5	jmp	0x1000231c2
1000231dd:	be 03 00 00 00	movl	$3, %esi
1000231e2:	4c 89 e7	movq	%r12, %rdi
1000231e5:	4c 89 f2	movq	%r14, %rdx
1000231e8:	31 c0	xorl	%eax, %eax
1000231ea:	e8 83 5a 01 00	callq	0x100038c72
1000231ef:	be 02 00 00 00	movl	$2, %esi
1000231f4:	4c 89 e7	movq	%r12, %rdi
1000231f7:	4c 89 f2	movq	%r14, %rdx
1000231fa:	31 c0	xorl	%eax, %eax
1000231fc:	e8 71 5a 01 00	callq	0x100038c72
100023201:	4d 8b 6d 48	movq	72(%r13), %r13
100023205:	e9 11 ff ff ff	jmp	0x10002311b
10002320a:	48 8b 85 40 ff ff ff	movq	-192(%rbp), %rax
100023211:	48 ff c0	incq	%rax
100023214:	48 83 f8 07	cmpq	$7, %rax
100023218:	4c 8b ad 48 ff ff ff	movq	-184(%rbp), %r13
10002321f:	0f 85 e7 fe ff ff	jne	0x10002310c
100023225:	48 8d 15 52 58 02 00	leaq	153682(%rip), %rdx ## literal pool for: "}"
10002322c:	45 31 f6	xorl	%r14d, %r14d
10002322f:	be 01 00 00 00	movl	$1, %esi
100023234:	4c 89 e7	movq	%r12, %rdi
100023237:	31 c0	xorl	%eax, %eax
100023239:	e8 34 5a 01 00	callq	0x100038c72
10002323e:	4c 89 e7	movq	%r12, %rdi
100023241:	e8 27 5b 01 00	callq	0x100038d6d
100023246:	48 8d 15 2c 8e 02 00	leaq	167468(%rip), %rdx ## literal pool for: "endpoints = {"
10002324d:	be 01 00 00 00	movl	$1, %esi
100023252:	4c 89 e7	movq	%r12, %rdi
100023255:	31 c0	xorl	%eax, %eax
100023257:	e8 16 5a 01 00	callq	0x100038c72
10002325c:	4b 8b 9c f5 a0 02 00 00	movq	672(%r13,%r14,8), %rbx
100023264:	48 85 db	testq	%rbx, %rbx
100023267:	74 11	je	0x10002327a
100023269:	4c 89 e7	movq	%r12, %rdi
10002326c:	48 89 de	movq	%rbx, %rsi
10002326f:	e8 a1 a2 00 00	callq	0x10002d515
100023274:	48 8b 5b 18	movq	24(%rbx), %rbx
100023278:	eb ea	jmp	0x100023264
10002327a:	49 ff c6	incq	%r14
10002327d:	49 83 fe 1f	cmpq	$31, %r14
100023281:	75 d9	jne	0x10002325c
100023283:	48 8d 15 f4 57 02 00	leaq	153588(%rip), %rdx ## literal pool for: "}"
10002328a:	be 01 00 00 00	movl	$1, %esi
10002328f:	4c 89 e7	movq	%r12, %rdi
100023292:	31 c0	xorl	%eax, %eax
100023294:	e8 d9 59 01 00	callq	0x100038c72
100023299:	49 83 bd b0 03 00 00 00	cmpq	$0, 944(%r13)
1000232a1:	74 65	je	0x100023308
1000232a3:	4c 89 e7	movq	%r12, %rdi
1000232a6:	e8 c2 5a 01 00	callq	0x100038d6d
1000232ab:	48 8d 15 fa b2 02 00	leaq	176890(%rip), %rdx ## literal pool for: "externally-hosted endpoints = {"
1000232b2:	45 31 f6	xorl	%r14d, %r14d
1000232b5:	be 01 00 00 00	movl	$1, %esi
1000232ba:	4c 89 e7	movq	%r12, %rdi
1000232bd:	31 c0	xorl	%eax, %eax
1000232bf:	e8 ae 59 01 00	callq	0x100038c72
1000232c4:	4d 8b bd b0 03 00 00	movq	944(%r13), %r15
1000232cb:	4b 8b 9c f7 a0 02 00 00	movq	672(%r15,%r14,8), %rbx
1000232d3:	48 85 db	testq	%rbx, %rbx
1000232d6:	74 11	je	0x1000232e9
1000232d8:	4c 89 e7	movq	%r12, %rdi
1000232db:	48 89 de	movq	%rbx, %rsi
1000232de:	e8 32 a2 00 00	callq	0x10002d515
1000232e3:	48 8b 5b 18	movq	24(%rbx), %rbx
1000232e7:	eb ea	jmp	0x1000232d3
1000232e9:	49 ff c6	incq	%r14
1000232ec:	49 83 fe 1f	cmpq	$31, %r14
1000232f0:	75 d9	jne	0x1000232cb
1000232f2:	48 8d 15 85 57 02 00	leaq	153477(%rip), %rdx ## literal pool for: "}"
1000232f9:	be 01 00 00 00	movl	$1, %esi
1000232fe:	4c 89 e7	movq	%r12, %rdi
100023301:	31 c0	xorl	%eax, %eax
100023303:	e8 6a 59 01 00	callq	0x100038c72
100023308:	4c 89 e7	movq	%r12, %rdi
10002330b:	e8 5d 5a 01 00	callq	0x100038d6d
100023310:	48 8d 15 b5 b2 02 00	leaq	176821(%rip), %rdx ## literal pool for: "task-special ports = {"
100023317:	be 01 00 00 00	movl	$1, %esi
10002331c:	4c 89 e7	movq	%r12, %rdi
10002331f:	31 c0	xorl	%eax, %eax
100023321:	e8 4c 59 01 00	callq	0x100038c72
100023326:	49 8b 5d 48	movq	72(%r13), %rbx
10002332a:	48 85 db	testq	%rbx, %rbx
10002332d:	74 13	je	0x100023342
10002332f:	4c 89 ef	movq	%r13, %rdi
100023332:	4c 89 e6	movq	%r12, %rsi
100023335:	48 89 da	movq	%rbx, %rdx
100023338:	e8 6a a2 00 00	callq	0x10002d5a7
10002333d:	48 8b 1b	movq	(%rbx), %rbx
100023340:	eb e8	jmp	0x10002332a
100023342:	48 8d 15 0f f2 03 00	leaq	258575(%rip), %rdx
100023349:	4c 89 ef	movq	%r13, %rdi
10002334c:	4c 89 e6	movq	%r12, %rsi
10002334f:	e8 53 a2 00 00	callq	0x10002d5a7
100023354:	48 8d 15 23 57 02 00	leaq	153379(%rip), %rdx ## literal pool for: "}"
10002335b:	be 01 00 00 00	movl	$1, %esi
100023360:	4c 89 e7	movq	%r12, %rdi
100023363:	31 c0	xorl	%eax, %eax
100023365:	e8 08 59 01 00	callq	0x100038c72
10002336a:	49 8b bd 98 03 00 00	movq	920(%r13), %rdi
100023371:	48 85 ff	testq	%rdi, %rdi
100023374:	74 75	je	0x1000233eb
100023376:	e8 c1 ec 01 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10002337b:	48 85 c0	testq	%rax, %rax
10002337e:	74 6b	je	0x1000233eb
100023380:	4c 89 e7	movq	%r12, %rdi
100023383:	e8 e5 59 01 00	callq	0x100038d6d
100023388:	48 8d 15 54 b2 02 00	leaq	176724(%rip), %rdx ## literal pool for: "disabled services = {"
10002338f:	be 01 00 00 00	movl	$1, %esi
100023394:	4c 89 e7	movq	%r12, %rdi
100023397:	31 c0	xorl	%eax, %eax
100023399:	e8 d4 58 01 00	callq	0x100038c72
10002339e:	49 8b bd 98 03 00 00	movq	920(%r13), %rdi
1000233a5:	e8 2c ec 01 00	callq	0x100041fd6 ## symbol stub for: _xpc_copy
1000233aa:	48 89 c3	movq	%rax, %rbx
1000233ad:	48 8d 35 1b 16 02 00	leaq	136731(%rip), %rsi ## literal pool for: "_dirty"
1000233b4:	48 89 c7	movq	%rax, %rdi
1000233b7:	31 d2	xorl	%edx, %edx
1000233b9:	e8 f0 ec 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000233be:	4c 89 e7	movq	%r12, %rdi
1000233c1:	31 f6	xorl	%esi, %esi
1000233c3:	31 d2	xorl	%edx, %edx
1000233c5:	48 89 d9	movq	%rbx, %rcx
1000233c8:	e8 6c c0 fe ff	callq	0x10000f439
1000233cd:	48 89 df	movq	%rbx, %rdi
1000233d0:	e8 27 ed 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000233d5:	48 8d 15 a2 56 02 00	leaq	153250(%rip), %rdx ## literal pool for: "}"
1000233dc:	be 01 00 00 00	movl	$1, %esi
1000233e1:	4c 89 e7	movq	%r12, %rdi
1000233e4:	31 c0	xorl	%eax, %eax
1000233e6:	e8 87 58 01 00	callq	0x100038c72
1000233eb:	bf 80 00 00 00	movl	$128, %edi
1000233f0:	e8 6c 8c fe ff	callq	0x10000c061
1000233f5:	49 89 c7	movq	%rax, %r15
1000233f8:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
1000233ff:	83 e2 01	andl	$1, %edx
100023402:	48 8d 35 2f ad 02 00	leaq	175407(%rip), %rsi ## literal pool for: "shutting down"
100023409:	48 89 c7	movq	%rax, %rdi
10002340c:	e8 38 a2 00 00	callq	0x10002d649
100023411:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
100023418:	83 e2 02	andl	$2, %edx
10002341b:	d1 ea	shrl	%edx
10002341d:	48 8d 35 d5 b1 02 00	leaq	176597(%rip), %rsi ## literal pool for: "slain"
100023424:	4c 89 ff	movq	%r15, %rdi
100023427:	e8 1d a2 00 00	callq	0x10002d649
10002342c:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
100023433:	83 e2 04	andl	$4, %edx
100023436:	c1 ea 02	shrl	$2, %edx
100023439:	48 8d 35 bf b1 02 00	leaq	176575(%rip), %rsi ## literal pool for: "uncorked"
100023440:	4c 89 ff	movq	%r15, %rdi
100023443:	e8 01 a2 00 00	callq	0x10002d649
100023448:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
10002344f:	83 e2 10	andl	$16, %edx
100023452:	c1 ea 04	shrl	$4, %edx
100023455:	48 8d 35 ac b1 02 00	leaq	176556(%rip), %rsi ## literal pool for: "deactivated"
10002345c:	4c 89 ff	movq	%r15, %rdi
10002345f:	e8 e5 a1 00 00	callq	0x10002d649
100023464:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
10002346b:	83 e2 20	andl	$32, %edx
10002346e:	c1 ea 05	shrl	$5, %edx
100023471:	48 8d 35 9c b1 02 00	leaq	176540(%rip), %rsi ## literal pool for: "inactive"
100023478:	4c 89 ff	movq	%r15, %rdi
10002347b:	e8 c9 a1 00 00	callq	0x10002d649
100023480:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
100023487:	83 e2 40	andl	$64, %edx
10002348a:	c1 ea 06	shrl	$6, %edx
10002348d:	48 8d 35 89 b1 02 00	leaq	176521(%rip), %rsi ## literal pool for: "in initial on-demand"
100023494:	4c 89 ff	movq	%r15, %rdi
100023497:	e8 ad a1 00 00	callq	0x10002d649
10002349c:	41 8a 85 08 04 00 00	movb	1032(%r13), %al
1000234a3:	c0 e8 07	shrb	$7, %al
1000234a6:	0f b6 d0	movzbl	%al, %edx
1000234a9:	48 8d 35 82 b1 02 00	leaq	176514(%rip), %rsi ## literal pool for: "audit check done"
1000234b0:	4c 89 ff	movq	%r15, %rdi
1000234b3:	e8 91 a1 00 00	callq	0x10002d649
1000234b8:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
1000234bf:	c1 ea 08	shrl	$8, %edx
1000234c2:	83 e2 01	andl	$1, %edx
1000234c5:	48 8d 35 77 b1 02 00	leaq	176503(%rip), %rsi ## literal pool for: "bootcache hack"
1000234cc:	4c 89 ff	movq	%r15, %rdi
1000234cf:	e8 75 a1 00 00	callq	0x10002d649
1000234d4:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
1000234db:	c1 ea 09	shrl	$9, %edx
1000234de:	83 e2 01	andl	$1, %edx
1000234e1:	48 8d 35 6a b1 02 00	leaq	176490(%rip), %rsi ## literal pool for: "cocooning"
1000234e8:	4c 89 ff	movq	%r15, %rdi
1000234eb:	e8 59 a1 00 00	callq	0x10002d649
1000234f0:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
1000234f7:	c1 ea 0a	shrl	$10, %edx
1000234fa:	83 e2 01	andl	$1, %edx
1000234fd:	48 8d 35 58 b1 02 00	leaq	176472(%rip), %rsi ## literal pool for: "gui"
100023504:	4c 89 ff	movq	%r15, %rdi
100023507:	e8 3d a1 00 00	callq	0x10002d649
10002350c:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
100023513:	c1 ea 0b	shrl	$11, %edx
100023516:	83 e2 01	andl	$1, %edx
100023519:	48 8d 35 40 b1 02 00	leaq	176448(%rip), %rsi ## literal pool for: "gui login"
100023520:	4c 89 ff	movq	%r15, %rdi
100023523:	e8 21 a1 00 00	callq	0x10002d649
100023528:	41 8b 95 08 04 00 00	movl	1032(%r13), %edx
10002352f:	c1 ea 0d	shrl	$13, %edx
100023532:	83 e2 01	andl	$1, %edx
100023535:	48 8d 35 2e b1 02 00	leaq	176430(%rip), %rsi ## literal pool for: "exec hack"
10002353c:	4c 89 ff	movq	%r15, %rdi
10002353f:	e8 05 a1 00 00	callq	0x10002d649
100023544:	4c 89 e7	movq	%r12, %rdi
100023547:	e8 21 58 01 00	callq	0x100038d6d
10002354c:	49 8b 0f	movq	(%r15), %rcx
10002354f:	48 8d 15 39 92 02 00	leaq	168505(%rip), %rdx ## literal pool for: "properties = %s"
100023556:	be 01 00 00 00	movl	$1, %esi
10002355b:	4c 89 e7	movq	%r12, %rdi
10002355e:	31 c0	xorl	%eax, %eax
100023560:	e8 0d 57 01 00	callq	0x100038c72
100023565:	4c 89 ff	movq	%r15, %rdi
100023568:	e8 44 8b fe ff	callq	0x10000c0b1
10002356d:	48 8d 15 0a 55 02 00	leaq	152842(%rip), %rdx ## literal pool for: "}"
100023574:	4c 89 e7	movq	%r12, %rdi
100023577:	31 f6	xorl	%esi, %esi
100023579:	31 c0	xorl	%eax, %eax
10002357b:	e8 f2 56 01 00	callq	0x100038c72
100023580:	48 8b 05 a1 4a 03 00	movq	215713(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023587:	48 8b 00	movq	(%rax), %rax
10002358a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002358e:	75 12	jne	0x1000235a2
100023590:	48 81 c4 e8 00 00 00	addq	$232, %rsp
100023597:	5b	popq	%rbx
100023598:	41 5c	popq	%r12
10002359a:	41 5d	popq	%r13
10002359c:	41 5e	popq	%r14
10002359e:	41 5f	popq	%r15
1000235a0:	5d	popq	%rbp
1000235a1:	c3	retq
1000235a2:	e8 cb e1 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000235a7:	55	pushq	%rbp
1000235a8:	48 89 e5	movq	%rsp, %rbp
1000235ab:	41 57	pushq	%r15
1000235ad:	41 56	pushq	%r14
1000235af:	41 55	pushq	%r13
1000235b1:	41 54	pushq	%r12
1000235b3:	53	pushq	%rbx
1000235b4:	48 81 ec c8 00 00 00	subq	$200, %rsp
1000235bb:	49 89 f6	movq	%rsi, %r14
1000235be:	49 89 fd	movq	%rdi, %r13
1000235c1:	48 8b 05 60 4a 03 00	movq	215648(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000235c8:	48 8b 00	movq	(%rax), %rax
1000235cb:	48 89 45 d0	movq	%rax, -48(%rbp)
1000235cf:	48 89 f7	movq	%rsi, %rdi
1000235d2:	e8 bb 89 fe ff	callq	0x10000bf92
1000235d7:	48 89 45 80	movq	%rax, -128(%rbp)
1000235db:	4c 89 f7	movq	%r14, %rdi
1000235de:	e8 a5 89 fe ff	callq	0x10000bf88
1000235e3:	49 89 c7	movq	%rax, %r15
1000235e6:	4c 89 f7	movq	%r14, %rdi
1000235e9:	e8 6b 89 fe ff	callq	0x10000bf59
1000235ee:	48 c7 85 60 ff ff ff 00 00 00 00	movq	$0, -160(%rbp)
1000235f9:	48 8d 0d c2 e7 ff ff	leaq	-6206(%rip), %rcx
100023600:	48 89 8d 28 ff ff ff	movq	%rcx, -216(%rbp)
100023607:	48 8d 0d 22 eb ff ff	leaq	-5342(%rip), %rcx
10002360e:	48 89 8d 30 ff ff ff	movq	%rcx, -208(%rbp)
100023615:	48 8d 0d 59 ec ff ff	leaq	-5031(%rip), %rcx
10002361c:	48 89 8d 38 ff ff ff	movq	%rcx, -200(%rbp)
100023623:	48 8d 0d d9 ed ff ff	leaq	-4647(%rip), %rcx
10002362a:	48 89 8d 40 ff ff ff	movq	%rcx, -192(%rbp)
100023631:	48 8d 0d 10 ee ff ff	leaq	-4592(%rip), %rcx
100023638:	48 89 8d 48 ff ff ff	movq	%rcx, -184(%rbp)
10002363f:	48 8d 0d d5 ee ff ff	leaq	-4395(%rip), %rcx
100023646:	48 89 8d 50 ff ff ff	movq	%rcx, -176(%rbp)
10002364d:	4c 89 ad 58 ff ff ff	movq	%r13, -168(%rbp)
100023654:	48 85 c0	testq	%rax, %rax
100023657:	74 4f	je	0x1000236a8
100023659:	4c 8d a5 60 ff ff ff	leaq	-160(%rbp), %r12
100023660:	48 89 c7	movq	%rax, %rdi
100023663:	4c 89 e6	movq	%r12, %rsi
100023666:	e8 c6 04 00 00	callq	0x100023b31
10002366b:	89 45 8c	movl	%eax, -116(%rbp)
10002366e:	4d 8b 24 24	movq	(%r12), %r12
100023672:	85 c0	testl	%eax, %eax
100023674:	74 44	je	0x1000236ba
100023676:	89 c3	movl	%eax, %ebx
100023678:	89 c7	movl	%eax, %edi
10002367a:	e8 8f ea 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002367f:	48 89 04 24	movq	%rax, (%rsp)
100023683:	48 8d 0d 24 98 02 00	leaq	170020(%rip), %rcx ## literal pool for: "Could not parse plist: path = %s, error = %d: %s"
10002368a:	4c 89 ef	movq	%r13, %rdi
10002368d:	4c 89 e6	movq	%r12, %rsi
100023690:	ba 03 00 00 00	movl	$3, %edx
100023695:	4c 8b 45 80	movq	-128(%rbp), %r8
100023699:	41 89 d9	movl	%ebx, %r9d
10002369c:	31 c0	xorl	%eax, %eax
10002369e:	e8 0f 05 00 00	callq	0x100023bb2
1000236a3:	e9 c0 00 00 00	jmp	0x100023768
1000236a8:	4c 89 f7	movq	%r14, %rdi
1000236ab:	e8 c1 88 fe ff	callq	0x10000bf71
1000236b0:	49 89 c4	movq	%rax, %r12
1000236b3:	48 89 85 60 ff ff ff	movq	%rax, -160(%rbp)
1000236ba:	41 8b 5e 28	movl	40(%r14), %ebx
1000236be:	c1 eb 0d	shrl	$13, %ebx
1000236c1:	83 e3 01	andl	$1, %ebx
1000236c4:	48 8d 35 09 03 02 00	leaq	131849(%rip), %rsi ## literal pool for: "Label"
1000236cb:	4c 89 e7	movq	%r12, %rdi
1000236ce:	e8 1a 06 00 00	callq	0x100023ced
1000236d3:	84 c0	testb	%al, %al
1000236d5:	4c 89 ad 78 ff ff ff	movq	%r13, -136(%rbp)
1000236dc:	4c 89 a5 70 ff ff ff	movq	%r12, -144(%rbp)
1000236e3:	75 0c	jne	0x1000236f1
1000236e5:	4c 89 f7	movq	%r14, %rdi
1000236e8:	e8 76 88 fe ff	callq	0x10000bf63
1000236ed:	84 c0	testb	%al, %al
1000236ef:	74 07	je	0x1000236f8
1000236f1:	b8 80 00 00 00	movl	$128, %eax
1000236f6:	eb 02	jmp	0x1000236fa
1000236f8:	31 c0	xorl	%eax, %eax
1000236fa:	48 89 85 68 ff ff ff	movq	%rax, -152(%rbp)
100023701:	4d 8d 66 08	leaq	8(%r14), %r12
100023705:	48 8d 35 4d 13 02 00	leaq	136013(%rip), %rsi ## literal pool for: "ResolveProgramIdentifier"
10002370c:	48 8b bd 70 ff ff ff	movq	-144(%rbp), %rdi
100023713:	e8 1e e9 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100023718:	4c 8d 6b 20	leaq	32(%rbx), %r13
10002371c:	84 c0	testb	%al, %al
10002371e:	4c 0f 44 eb	cmoveq	%rbx, %r13
100023722:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100023729:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
100023730:	a9 03 02 00 00	testl	$515, %eax
100023735:	74 67	je	0x10002379e
100023737:	0f 28 05 42 fb 01 00	movaps	129858(%rip), %xmm0
10002373e:	48 8d 75 90	leaq	-112(%rbp), %rsi
100023742:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100023746:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10002374a:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10002374e:	0f 29 06	movaps	%xmm0, (%rsi)
100023751:	4c 89 e7	movq	%r12, %rdi
100023754:	e8 04 11 01 00	callq	0x10003485d
100023759:	bb 7c 00 00 00	movl	$124, %ebx
10002375e:	4c 8b a5 70 ff ff ff	movq	-144(%rbp), %r12
100023765:	89 5d 8c	movl	%ebx, -116(%rbp)
100023768:	4d 85 e4	testq	%r12, %r12
10002376b:	74 08	je	0x100023775
10002376d:	4c 89 e7	movq	%r12, %rdi
100023770:	e8 87 e9 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100023775:	8b 45 8c	movl	-116(%rbp), %eax
100023778:	48 8b 0d a9 48 03 00	movq	215209(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10002377f:	48 8b 09	movq	(%rcx), %rcx
100023782:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
100023786:	0f 85 a0 03 00 00	jne	0x100023b2c
10002378c:	48 81 c4 c8 00 00 00	addq	$200, %rsp
100023793:	5b	popq	%rbx
100023794:	41 5c	popq	%r12
100023796:	41 5d	popq	%r13
100023798:	41 5e	popq	%r14
10002379a:	41 5f	popq	%r15
10002379c:	5d	popq	%rbp
10002379d:	c3	retq
10002379e:	48 8b 47 60	movq	96(%rdi), %rax
1000237a2:	48 8b 4f 68	movq	104(%rdi), %rcx
1000237a6:	4c 89 3c 24	movq	%r15, (%rsp)
1000237aa:	be 02 00 00 00	movl	$2, %esi
1000237af:	4c 89 ea	movq	%r13, %rdx
1000237b2:	4d 89 e0	movq	%r12, %r8
1000237b5:	4c 8b 7d 80	movq	-128(%rbp), %r15
1000237b9:	4d 89 f9	movq	%r15, %r9
1000237bc:	ff 50 68	callq	*104(%rax)
1000237bf:	85 c0	testl	%eax, %eax
1000237c1:	74 7b	je	0x10002383e
1000237c3:	89 c3	movl	%eax, %ebx
1000237c5:	0f 28 05 b4 fa 01 00	movaps	129716(%rip), %xmm0
1000237cc:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000237d0:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
1000237d4:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
1000237d8:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
1000237dc:	0f 29 06	movaps	%xmm0, (%rsi)
1000237df:	4c 89 a5 68 ff ff ff	movq	%r12, -152(%rbp)
1000237e6:	4c 89 e7	movq	%r12, %rdi
1000237e9:	e8 6f 10 01 00	callq	0x10003485d
1000237ee:	83 fb 7a	cmpl	$122, %ebx
1000237f1:	0f 84 80 00 00 00	je	0x100023877
1000237f7:	83 fb 01	cmpl	$1, %ebx
1000237fa:	4c 8b a5 70 ff ff ff	movq	-144(%rbp), %r12
100023801:	0f 85 5e ff ff ff	jne	0x100023765
100023807:	4d 8b 4e 28	movq	40(%r14), %r9
10002380b:	4c 89 2c 24	movq	%r13, (%rsp)
10002380f:	48 8d 0d c9 96 02 00	leaq	169673(%rip), %rcx ## literal pool for: "service bootstrap (%s, io flags=%#llx, eval flags=%#llx)"
100023816:	bb 01 00 00 00	movl	$1, %ebx
10002381b:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100023822:	48 8b b5 68 ff ff ff	movq	-152(%rbp), %rsi
100023829:	ba 01 00 00 00	movl	$1, %edx
10002382e:	4c 8b 45 80	movq	-128(%rbp), %r8
100023832:	31 c0	xorl	%eax, %eax
100023834:	e8 3b 05 00 00	callq	0x100023d74
100023839:	e9 27 ff ff ff	jmp	0x100023765
10002383e:	48 8d 35 82 40 02 00	leaq	147586(%rip), %rsi ## literal pool for: "/System/Library/LaunchDaemons/com.apple.jetsamproperties"
100023845:	4c 89 ff	movq	%r15, %rdi
100023848:	e8 61 ba fe ff	callq	0x10000f2ae
10002384d:	84 c0	testb	%al, %al
10002384f:	75 13	jne	0x100023864
100023851:	48 8d 35 14 97 02 00	leaq	169748(%rip), %rsi ## literal pool for: "/AppleInternal/Library/LaunchDaemons/com.apple.jetsamproperties"
100023858:	4c 89 ff	movq	%r15, %rdi
10002385b:	e8 4e ba fe ff	callq	0x10000f2ae
100023860:	84 c0	testb	%al, %al
100023862:	74 4f	je	0x1000238b3
100023864:	c7 45 8c 00 00 00 00	movl	$0, -116(%rbp)
10002386b:	4c 8b a5 70 ff ff ff	movq	-144(%rbp), %r12
100023872:	e9 f1 fe ff ff	jmp	0x100023768
100023877:	41 8b 4e 1c	movl	28(%r14), %ecx
10002387b:	89 0c 24	movl	%ecx, (%rsp)
10002387e:	48 8d 0d 93 96 02 00	leaq	169619(%rip), %rcx ## literal pool for: "Caller specified a plist with bad ownership/permissions: path = %s, caller = %s[%d]"
100023885:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
10002388c:	4c 8b a5 70 ff ff ff	movq	-144(%rbp), %r12
100023893:	4c 89 e6	movq	%r12, %rsi
100023896:	ba 03 00 00 00	movl	$3, %edx
10002389b:	4c 8b 45 80	movq	-128(%rbp), %r8
10002389f:	49 89 c1	movq	%rax, %r9
1000238a2:	31 c0	xorl	%eax, %eax
1000238a4:	e8 09 03 00 00	callq	0x100023bb2
1000238a9:	bb 7a 00 00 00	movl	$122, %ebx
1000238ae:	e9 b2 fe ff ff	jmp	0x100023765
1000238b3:	49 8b 5e 28	movq	40(%r14), %rbx
1000238b7:	48 c1 eb 0a	shrq	$10, %rbx
1000238bb:	89 d8	movl	%ebx, %eax
1000238bd:	83 e0 02	andl	$2, %eax
1000238c0:	48 0b 85 68 ff ff ff	orq	-152(%rbp), %rax
1000238c7:	83 e3 20	andl	$32, %ebx
1000238ca:	48 09 c3	orq	%rax, %rbx
1000238cd:	4c 89 f7	movq	%r14, %rdi
1000238d0:	e8 d1 86 fe ff	callq	0x10000bfa6
1000238d5:	b9 00 01 00 00	movl	$256, %ecx
1000238da:	48 89 da	movq	%rbx, %rdx
1000238dd:	48 09 ca	orq	%rcx, %rdx
1000238e0:	84 c0	testb	%al, %al
1000238e2:	48 0f 44 d3	cmoveq	%rbx, %rdx
1000238e6:	41 8b 46 28	movl	40(%r14), %eax
1000238ea:	48 21 c8	andq	%rcx, %rax
1000238ed:	4c 8d 0c 42	leaq	(%rdx,%rax,2), %r9
1000238f1:	48 8d 45 8c	leaq	-116(%rbp), %rax
1000238f5:	c7 00 00 00 00 00	movl	$0, (%rax)
1000238fb:	48 89 04 24	movq	%rax, (%rsp)
1000238ff:	4c 8d 85 28 ff ff ff	leaq	-216(%rbp), %r8
100023906:	4c 8b ad 78 ff ff ff	movq	-136(%rbp), %r13
10002390d:	4c 89 ef	movq	%r13, %rdi
100023910:	4c 8b bd 70 ff ff ff	movq	-144(%rbp), %r15
100023917:	4c 89 fe	movq	%r15, %rsi
10002391a:	48 8b 55 80	movq	-128(%rbp), %rdx
10002391e:	4c 89 e1	movq	%r12, %rcx
100023921:	e8 62 fa fd ff	callq	0x100003388
100023926:	48 85 c0	testq	%rax, %rax
100023929:	74 5a	je	0x100023985
10002392b:	48 89 c3	movq	%rax, %rbx
10002392e:	4c 89 ef	movq	%r13, %rdi
100023931:	48 89 c6	movq	%rax, %rsi
100023934:	e8 6d de ff ff	callq	0x1000217a6
100023939:	48 8d 35 50 1b 02 00	leaq	138064(%rip), %rsi ## literal pool for: "AuxilliaryBootstrapper"
100023940:	4c 89 ff	movq	%r15, %rdi
100023943:	e8 ee e6 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100023948:	84 c0	testb	%al, %al
10002394a:	4d 89 fc	movq	%r15, %r12
10002394d:	0f 84 15 fe ff ff	je	0x100023768
100023953:	49 8b 8d e0 03 00 00	movq	992(%r13), %rcx
10002395a:	48 85 c9	testq	%rcx, %rcx
10002395d:	0f 84 c4 00 00 00	je	0x100023a27
100023963:	48 81 c1 18 05 00 00	addq	$1304, %rcx
10002396a:	48 8d 15 3b 96 02 00	leaq	169531(%rip), %rdx ## literal pool for: "Service tried to claim the auxilliary bootstrapper from \"%s\""
100023971:	48 89 df	movq	%rbx, %rdi
100023974:	be 03 00 00 00	movl	$3, %esi
100023979:	31 c0	xorl	%eax, %eax
10002397b:	e8 3a 26 ff ff	callq	0x100015fba
100023980:	e9 e3 fd ff ff	jmp	0x100023768
100023985:	4c 8b 6d 80	movq	-128(%rbp), %r13
100023989:	8b 45 8c	movl	-116(%rbp), %eax
10002398c:	83 f8 76	cmpl	$118, %eax
10002398f:	7f 11	jg	0x1000239a2
100023991:	83 f8 11	cmpl	$17, %eax
100023994:	4c 89 e7	movq	%r12, %rdi
100023997:	0f 84 dc 00 00 00	je	0x100023a79
10002399d:	83 f8 25	cmpl	$37, %eax
1000239a0:	eb 11	jmp	0x1000239b3
1000239a2:	83 f8 77	cmpl	$119, %eax
1000239a5:	0f 84 15 01 00 00	je	0x100023ac0
1000239ab:	4c 89 e7	movq	%r12, %rdi
1000239ae:	3d 86 00 00 00	cmpl	$134, %eax
1000239b3:	4d 89 fc	movq	%r15, %r12
1000239b6:	0f 84 ac fd ff ff	je	0x100023768
1000239bc:	0f 28 05 bd f8 01 00	movaps	129213(%rip), %xmm0
1000239c3:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000239c7:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
1000239cb:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
1000239cf:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
1000239d3:	0f 29 06	movaps	%xmm0, (%rsi)
1000239d6:	e8 82 0e 01 00	callq	0x10003485d
1000239db:	49 89 c7	movq	%rax, %r15
1000239de:	8b 5d 8c	movl	-116(%rbp), %ebx
1000239e1:	45 8b 76 1c	movl	28(%r14), %r14d
1000239e5:	81 fb 98 00 00 00	cmpl	$152, %ebx
1000239eb:	0f 85 d7 00 00 00	jne	0x100023ac8
1000239f1:	bf 98 00 00 00	movl	$152, %edi
1000239f6:	e8 13 e7 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000239fb:	48 89 44 24 10	movq	%rax, 16(%rsp)
100023a00:	44 89 34 24	movl	%r14d, (%rsp)
100023a04:	c7 44 24 08 98 00 00 00	movl	$152, 8(%rsp)
100023a0c:	48 8d 0d 38 96 02 00	leaq	169528(%rip), %rcx ## literal pool for: "Did not import service from caller: path = %s, caller = %s[%d], error = %d: %s"
100023a13:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100023a1a:	4c 89 e6	movq	%r12, %rsi
100023a1d:	ba 05 00 00 00	movl	$5, %edx
100023a22:	e9 cb 00 00 00	jmp	0x100023af2
100023a27:	49 89 9d e0 03 00 00	movq	%rbx, 992(%r13)
100023a2e:	48 89 df	movq	%rbx, %rdi
100023a31:	be 07 00 00 00	movl	$7, %esi
100023a36:	e8 89 74 ff ff	callq	0x10001aec4
100023a3b:	89 c3	movl	%eax, %ebx
100023a3d:	83 f8 25	cmpl	$37, %eax
100023a40:	0f 87 bf 00 00 00	ja	0x100023b05
100023a46:	89 d8	movl	%ebx, %eax
100023a48:	48 b9 01 00 00 00 30 00 00 00	movabsq	$206158430209, %rcx
100023a52:	48 0f a3 c1	btq	%rax, %rcx
100023a56:	0f 83 a9 00 00 00	jae	0x100023b05
100023a5c:	49 8b 85 e0 03 00 00	movq	992(%r13), %rax
100023a63:	66 81 88 64 01 00 00 00 10	orw	$4096, 356(%rax)
100023a6c:	4c 89 ef	movq	%r13, %rdi
100023a6f:	e8 9c 74 00 00	callq	0x10002af10
100023a74:	e9 ef fc ff ff	jmp	0x100023768
100023a79:	0f 28 05 00 f8 01 00	movaps	129024(%rip), %xmm0
100023a80:	48 8d 75 90	leaq	-112(%rbp), %rsi
100023a84:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100023a88:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100023a8c:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100023a90:	0f 29 06	movaps	%xmm0, (%rsi)
100023a93:	e8 c5 0d 01 00	callq	0x10003485d
100023a98:	41 8b 4e 1c	movl	28(%r14), %ecx
100023a9c:	89 0c 24	movl	%ecx, (%rsp)
100023a9f:	48 8d 0d 43 95 02 00	leaq	169283(%rip), %rcx ## literal pool for: "Caller tried to import service with same label as an existing service: path = %s, caller = %s[%d]"
100023aa6:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100023aad:	4d 89 fc	movq	%r15, %r12
100023ab0:	4c 89 fe	movq	%r15, %rsi
100023ab3:	ba 03 00 00 00	movl	$3, %edx
100023ab8:	4d 89 e8	movq	%r13, %r8
100023abb:	49 89 c1	movq	%rax, %r9
100023abe:	eb 39	jmp	0x100023af9
100023ac0:	4d 89 fc	movq	%r15, %r12
100023ac3:	e9 a0 fc ff ff	jmp	0x100023768
100023ac8:	89 df	movl	%ebx, %edi
100023aca:	e8 3f e6 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100023acf:	48 89 44 24 10	movq	%rax, 16(%rsp)
100023ad4:	89 5c 24 08	movl	%ebx, 8(%rsp)
100023ad8:	44 89 34 24	movl	%r14d, (%rsp)
100023adc:	48 8d 0d b7 95 02 00	leaq	169399(%rip), %rcx ## literal pool for: "Could not import service from caller: path = %s, caller = %s[%d], error = %d: %s"
100023ae3:	48 8b bd 78 ff ff ff	movq	-136(%rbp), %rdi
100023aea:	4c 89 e6	movq	%r12, %rsi
100023aed:	ba 03 00 00 00	movl	$3, %edx
100023af2:	4c 8b 45 80	movq	-128(%rbp), %r8
100023af6:	4d 89 f9	movq	%r15, %r9
100023af9:	31 c0	xorl	%eax, %eax
100023afb:	e8 b2 00 00 00	callq	0x100023bb2
100023b00:	e9 63 fc ff ff	jmp	0x100023768
100023b05:	89 df	movl	%ebx, %edi
100023b07:	e8 02 e6 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100023b0c:	48 8d 15 85 ab 02 00	leaq	174981(%rip), %rdx ## literal pool for: "Could not spawn auxilliary bootstrapper: %d: %s"
100023b13:	4c 89 ef	movq	%r13, %rdi
100023b16:	be 03 00 00 00	movl	$3, %esi
100023b1b:	89 d9	movl	%ebx, %ecx
100023b1d:	49 89 c0	movq	%rax, %r8
100023b20:	31 c0	xorl	%eax, %eax
100023b22:	e8 02 c9 ff ff	callq	0x100020429
100023b27:	e9 3c fc ff ff	jmp	0x100023768
100023b2c:	e8 41 dc 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100023b31:	55	pushq	%rbp
100023b32:	48 89 e5	movq	%rsp, %rbp
100023b35:	41 57	pushq	%r15
100023b37:	41 56	pushq	%r14
100023b39:	41 54	pushq	%r12
100023b3b:	53	pushq	%rbx
100023b3c:	48 83 ec 10	subq	$16, %rsp
100023b40:	49 89 f6	movq	%rsi, %r14
100023b43:	31 c0	xorl	%eax, %eax
100023b45:	48 8d 75 d0	leaq	-48(%rbp), %rsi
100023b49:	48 89 06	movq	%rax, (%rsi)
100023b4c:	48 8d 55 d8	leaq	-40(%rbp), %rdx
100023b50:	48 89 02	movq	%rax, (%rdx)
100023b53:	e8 94 dd 01 00	callq	0x1000418ec ## symbol stub for: _dispatch_data_create_map
100023b58:	48 85 c0	testq	%rax, %rax
100023b5b:	74 3f	je	0x100023b9c
100023b5d:	49 89 c4	movq	%rax, %r12
100023b60:	48 8b 7d d0	movq	-48(%rbp), %rdi
100023b64:	48 8b 75 d8	movq	-40(%rbp), %rsi
100023b68:	e8 6f e4 01 00	callq	0x100041fdc ## symbol stub for: _xpc_create_from_plist
100023b6d:	41 bf 6d 00 00 00	movl	$109, %r15d
100023b73:	48 85 c0	testq	%rax, %rax
100023b76:	74 1a	je	0x100023b92
100023b78:	48 89 c3	movq	%rax, %rbx
100023b7b:	48 89 c7	movq	%rax, %rdi
100023b7e:	e8 43 e5 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100023b83:	48 3b 05 76 45 03 00	cmpq	214390(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100023b8a:	75 06	jne	0x100023b92
100023b8c:	49 89 1e	movq	%rbx, (%r14)
100023b8f:	45 31 ff	xorl	%r15d, %r15d
100023b92:	4c 89 e7	movq	%r12, %rdi
100023b95:	e8 be dd 01 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100023b9a:	eb 06	jmp	0x100023ba2
100023b9c:	41 bf 0c 00 00 00	movl	$12, %r15d
100023ba2:	44 89 f8	movl	%r15d, %eax
100023ba5:	48 83 c4 10	addq	$16, %rsp
100023ba9:	5b	popq	%rbx
100023baa:	41 5c	popq	%r12
100023bac:	41 5e	popq	%r14
100023bae:	41 5f	popq	%r15
100023bb0:	5d	popq	%rbp
100023bb1:	c3	retq
100023bb2:	55	pushq	%rbp
100023bb3:	48 89 e5	movq	%rsp, %rbp
100023bb6:	41 57	pushq	%r15
100023bb8:	41 56	pushq	%r14
100023bba:	41 55	pushq	%r13
100023bbc:	41 54	pushq	%r12
100023bbe:	53	pushq	%rbx
100023bbf:	48 81 ec d8 00 00 00	subq	$216, %rsp
100023bc6:	49 89 ce	movq	%rcx, %r14
100023bc9:	41 89 d7	movl	%edx, %r15d
100023bcc:	48 89 fb	movq	%rdi, %rbx
100023bcf:	4c 89 85 20 ff ff ff	movq	%r8, -224(%rbp)
100023bd6:	4c 89 8d 28 ff ff ff	movq	%r9, -216(%rbp)
100023bdd:	84 c0	testb	%al, %al
100023bdf:	74 2f	je	0x100023c10
100023be1:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
100023be8:	0f 29 8d 40 ff ff ff	movaps	%xmm1, -192(%rbp)
100023bef:	0f 29 95 50 ff ff ff	movaps	%xmm2, -176(%rbp)
100023bf6:	0f 29 9d 60 ff ff ff	movaps	%xmm3, -160(%rbp)
100023bfd:	0f 29 a5 70 ff ff ff	movaps	%xmm4, -144(%rbp)
100023c04:	0f 29 6d 80	movaps	%xmm5, -128(%rbp)
100023c08:	0f 29 75 90	movaps	%xmm6, -112(%rbp)
100023c0c:	0f 29 7d a0	movaps	%xmm7, -96(%rbp)
100023c10:	48 8b 05 11 44 03 00	movq	214033(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023c17:	48 8b 00	movq	(%rax), %rax
100023c1a:	48 89 45 d0	movq	%rax, -48(%rbp)
100023c1e:	48 85 f6	testq	%rsi, %rsi
100023c21:	74 4b	je	0x100023c6e
100023c23:	48 8d 05 aa fd 01 00	leaq	130474(%rip), %rax ## literal pool for: "Label"
100023c2a:	48 89 f7	movq	%rsi, %rdi
100023c2d:	48 89 c6	movq	%rax, %rsi
100023c30:	e8 25 e4 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100023c35:	48 85 c0	testq	%rax, %rax
100023c38:	74 34	je	0x100023c6e
100023c3a:	49 89 c4	movq	%rax, %r12
100023c3d:	48 89 df	movq	%rbx, %rdi
100023c40:	be 01 00 00 00	movl	$1, %esi
100023c45:	e8 be c8 ff ff	callq	0x100020508
100023c4a:	49 89 c5	movq	%rax, %r13
100023c4d:	48 8d 3d ae 4d 02 00	leaq	150958(%rip), %rdi ## literal pool for: "%s/%s"
100023c54:	48 89 c6	movq	%rax, %rsi
100023c57:	4c 89 e2	movq	%r12, %rdx
100023c5a:	31 c0	xorl	%eax, %eax
100023c5c:	e8 d4 b4 fe ff	callq	0x10000f135
100023c61:	48 89 c3	movq	%rax, %rbx
100023c64:	4c 89 ef	movq	%r13, %rdi
100023c67:	e8 c4 dd 01 00	callq	0x100041a30 ## symbol stub for: _free
100023c6c:	eb 10	jmp	0x100023c7e
100023c6e:	48 89 df	movq	%rbx, %rdi
100023c71:	be 01 00 00 00	movl	$1, %esi
100023c76:	e8 8d c8 ff ff	callq	0x100020508
100023c7b:	48 89 c3	movq	%rax, %rbx
100023c7e:	0f 28 05 fb f5 01 00	movaps	128507(%rip), %xmm0
100023c85:	48 8d 4d b0	leaq	-80(%rbp), %rcx
100023c89:	0f 29 01	movaps	%xmm0, (%rcx)
100023c8c:	48 8d 85 00 ff ff ff	leaq	-256(%rbp), %rax
100023c93:	48 89 41 10	movq	%rax, 16(%rcx)
100023c97:	48 b8 20 00 00 00 30 00 00 00	movabsq	$206158430240, %rax
100023ca1:	48 89 01	movq	%rax, (%rcx)
100023ca4:	48 8d 45 10	leaq	16(%rbp), %rax
100023ca8:	48 89 41 08	movq	%rax, 8(%rcx)
100023cac:	4c 8b 45 08	movq	8(%rbp), %r8
100023cb0:	48 89 df	movq	%rbx, %rdi
100023cb3:	44 89 fe	movl	%r15d, %esi
100023cb6:	4c 89 f2	movq	%r14, %rdx
100023cb9:	e8 a5 1a 01 00	callq	0x100035763
100023cbe:	48 89 df	movq	%rbx, %rdi
100023cc1:	e8 6a dd 01 00	callq	0x100041a30 ## symbol stub for: _free
100023cc6:	48 8b 05 5b 43 03 00	movq	213851(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023ccd:	48 8b 00	movq	(%rax), %rax
100023cd0:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100023cd4:	75 12	jne	0x100023ce8
100023cd6:	48 81 c4 d8 00 00 00	addq	$216, %rsp
100023cdd:	5b	popq	%rbx
100023cde:	41 5c	popq	%r12
100023ce0:	41 5d	popq	%r13
100023ce2:	41 5e	popq	%r14
100023ce4:	41 5f	popq	%r15
100023ce6:	5d	popq	%rbp
100023ce7:	c3	retq
100023ce8:	e8 85 da 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100023ced:	55	pushq	%rbp
100023cee:	48 89 e5	movq	%rsp, %rbp
100023cf1:	e8 64 e3 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100023cf6:	48 85 c0	testq	%rax, %rax
100023cf9:	74 10	je	0x100023d0b
100023cfb:	48 8d 35 90 ff 01 00	leaq	130960(%rip), %rsi ## literal pool for: "com.apple."
100023d02:	48 89 c7	movq	%rax, %rdi
100023d05:	5d	popq	%rbp
100023d06:	e9 a3 b5 fe ff	jmp	0x10000f2ae
100023d0b:	31 c0	xorl	%eax, %eax
100023d0d:	5d	popq	%rbp
100023d0e:	c3	retq
100023d0f:	55	pushq	%rbp
100023d10:	48 89 e5	movq	%rsp, %rbp
100023d13:	48 83 ec 10	subq	$16, %rsp
100023d17:	4d 89 c2	movq	%r8, %r10
100023d1a:	49 89 c8	movq	%rcx, %r8
100023d1d:	48 89 f9	movq	%rdi, %rcx
100023d20:	48 89 c8	movq	%rcx, %rax
100023d23:	48 8b 89 c8 00 00 00	movq	200(%rcx), %rcx
100023d2a:	48 85 c9	testq	%rcx, %rcx
100023d2d:	75 f1	jne	0x100023d20
100023d2f:	f6 80 08 04 00 00 01	testb	$1, 1032(%rax)
100023d36:	74 05	je	0x100023d3d
100023d38:	83 fe 02	cmpl	$2, %esi
100023d3b:	72 18	jb	0x100023d55
100023d3d:	89 f0	movl	%esi, %eax
100023d3f:	83 e0 fe	andl	$-2, %eax
100023d42:	83 f8 02	cmpl	$2, %eax
100023d45:	75 15	jne	0x100023d5c
100023d47:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
100023d4e:	a9 03 02 00 00	testl	$515, %eax
100023d53:	74 07	je	0x100023d5c
100023d55:	b8 7c 00 00 00	movl	$124, %eax
100023d5a:	eb 12	jmp	0x100023d6e
100023d5c:	48 8b 47 60	movq	96(%rdi), %rax
100023d60:	48 8b 4f 68	movq	104(%rdi), %rcx
100023d64:	4c 89 0c 24	movq	%r9, (%rsp)
100023d68:	4d 89 d1	movq	%r10, %r9
100023d6b:	ff 50 68	callq	*104(%rax)
100023d6e:	48 83 c4 10	addq	$16, %rsp
100023d72:	5d	popq	%rbp
100023d73:	c3	retq
100023d74:	55	pushq	%rbp
100023d75:	48 89 e5	movq	%rsp, %rbp
100023d78:	41 57	pushq	%r15
100023d7a:	41 56	pushq	%r14
100023d7c:	41 55	pushq	%r13
100023d7e:	41 54	pushq	%r12
100023d80:	53	pushq	%rbx
100023d81:	48 81 ec 48 01 00 00	subq	$328, %rsp
100023d88:	4c 89 85 b0 fe ff ff	movq	%r8, -336(%rbp)
100023d8f:	4c 89 8d b8 fe ff ff	movq	%r9, -328(%rbp)
100023d96:	84 c0	testb	%al, %al
100023d98:	74 38	je	0x100023dd2
100023d9a:	0f 29 85 c0 fe ff ff	movaps	%xmm0, -320(%rbp)
100023da1:	0f 29 8d d0 fe ff ff	movaps	%xmm1, -304(%rbp)
100023da8:	0f 29 95 e0 fe ff ff	movaps	%xmm2, -288(%rbp)
100023daf:	0f 29 9d f0 fe ff ff	movaps	%xmm3, -272(%rbp)
100023db6:	0f 29 a5 00 ff ff ff	movaps	%xmm4, -256(%rbp)
100023dbd:	0f 29 ad 10 ff ff ff	movaps	%xmm5, -240(%rbp)
100023dc4:	0f 29 b5 20 ff ff ff	movaps	%xmm6, -224(%rbp)
100023dcb:	0f 29 bd 30 ff ff ff	movaps	%xmm7, -208(%rbp)
100023dd2:	48 8b 05 4f 42 03 00	movq	213583(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023dd9:	48 8b 00	movq	(%rax), %rax
100023ddc:	48 89 45 d0	movq	%rax, -48(%rbp)
100023de0:	83 fa 7c	cmpl	$124, %edx
100023de3:	0f 84 21 01 00 00	je	0x100023f0a
100023de9:	41 89 d7	movl	%edx, %r15d
100023dec:	48 89 f3	movq	%rsi, %rbx
100023def:	48 89 bd 40 ff ff ff	movq	%rdi, -192(%rbp)
100023df6:	b8 03 00 00 00	movl	$3, %eax
100023dfb:	81 fa 96 00 00 00	cmpl	$150, %edx
100023e01:	75 05	jne	0x100023e08
100023e03:	b8 03 00 01 00	movl	$65539, %eax
100023e08:	89 85 6c ff ff ff	movl	%eax, -148(%rbp)
100023e0e:	0f 28 05 6b f4 01 00	movaps	128107(%rip), %xmm0
100023e15:	48 8d 55 b0	leaq	-80(%rbp), %rdx
100023e19:	0f 29 02	movaps	%xmm0, (%rdx)
100023e1c:	48 8d 85 90 fe ff ff	leaq	-368(%rbp), %rax
100023e23:	48 89 42 10	movq	%rax, 16(%rdx)
100023e27:	48 b8 20 00 00 00 30 00 00 00	movabsq	$206158430240, %rax
100023e31:	48 89 02	movq	%rax, (%rdx)
100023e34:	48 8d 45 10	leaq	16(%rbp), %rax
100023e38:	48 89 42 08	movq	%rax, 8(%rdx)
100023e3c:	48 8d bd 60 ff ff ff	leaq	-160(%rbp), %rdi
100023e43:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
100023e4a:	48 89 ce	movq	%rcx, %rsi
100023e4d:	e8 b2 e0 01 00	callq	0x100041f04 ## symbol stub for: _vasprintf
100023e52:	48 8d b5 70 ff ff ff	leaq	-144(%rbp), %rsi
100023e59:	0f 28 05 20 f4 01 00	movaps	128032(%rip), %xmm0
100023e60:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100023e64:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100023e68:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100023e6c:	0f 29 06	movaps	%xmm0, (%rsi)
100023e6f:	48 89 df	movq	%rbx, %rdi
100023e72:	e8 e6 09 01 00	callq	0x10003485d
100023e77:	49 89 c6	movq	%rax, %r14
100023e7a:	44 8b 63 14	movl	20(%rbx), %r12d
100023e7e:	48 8d 85 60 ff ff ff	leaq	-160(%rbp), %rax
100023e85:	4c 8b 28	movq	(%rax), %r13
100023e88:	44 89 ff	movl	%r15d, %edi
100023e8b:	e8 7e e2 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100023e90:	48 89 85 48 ff ff ff	movq	%rax, -184(%rbp)
100023e97:	8b 43 0c	movl	12(%rbx), %eax
100023e9a:	48 89 85 50 ff ff ff	movq	%rax, -176(%rbp)
100023ea1:	44 8b 53 10	movl	16(%rbx), %r10d
100023ea5:	8b 43 04	movl	4(%rbx), %eax
100023ea8:	48 89 85 58 ff ff ff	movq	%rax, -168(%rbp)
100023eaf:	44 8b 5b 08	movl	8(%rbx), %r11d
100023eb3:	8b 5b 18	movl	24(%rbx), %ebx
100023eb6:	48 83 ec 08	subq	$8, %rsp
100023eba:	48 8d 15 bc 70 02 00	leaq	159932(%rip), %rdx ## literal pool for: "Caller not allowed to perform action: %s.%d, action = %s, code = %d: %s, uid = %u, euid = %u, gid = %u, egid = %u, asid = %u"
100023ec1:	48 8b bd 40 ff ff ff	movq	-192(%rbp), %rdi
100023ec8:	8b b5 6c ff ff ff	movl	-148(%rbp), %esi
100023ece:	4c 89 f1	movq	%r14, %rcx
100023ed1:	45 89 e0	movl	%r12d, %r8d
100023ed4:	4d 89 e9	movq	%r13, %r9
100023ed7:	31 c0	xorl	%eax, %eax
100023ed9:	53	pushq	%rbx
100023eda:	41 53	pushq	%r11
100023edc:	41 52	pushq	%r10
100023ede:	ff b5 58 ff ff ff	pushq	-168(%rbp)
100023ee4:	ff b5 50 ff ff ff	pushq	-176(%rbp)
100023eea:	ff b5 48 ff ff ff	pushq	-184(%rbp)
100023ef0:	41 57	pushq	%r15
100023ef2:	e8 32 c5 ff ff	callq	0x100020429
100023ef7:	48 83 c4 40	addq	$64, %rsp
100023efb:	48 8d 85 60 ff ff ff	leaq	-160(%rbp), %rax
100023f02:	48 8b 38	movq	(%rax), %rdi
100023f05:	e8 26 db 01 00	callq	0x100041a30 ## symbol stub for: _free
100023f0a:	48 8b 05 17 41 03 00	movq	213271(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023f11:	48 8b 00	movq	(%rax), %rax
100023f14:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100023f18:	75 12	jne	0x100023f2c
100023f1a:	48 81 c4 48 01 00 00	addq	$328, %rsp
100023f21:	5b	popq	%rbx
100023f22:	41 5c	popq	%r12
100023f24:	41 5d	popq	%r13
100023f26:	41 5e	popq	%r14
100023f28:	41 5f	popq	%r15
100023f2a:	5d	popq	%rbp
100023f2b:	c3	retq
100023f2c:	e8 41 d8 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100023f31:	55	pushq	%rbp
100023f32:	48 89 e5	movq	%rsp, %rbp
100023f35:	41 57	pushq	%r15
100023f37:	41 56	pushq	%r14
100023f39:	41 55	pushq	%r13
100023f3b:	41 54	pushq	%r12
100023f3d:	53	pushq	%rbx
100023f3e:	48 81 ec 38 04 00 00	subq	$1080, %rsp
100023f45:	49 89 d5	movq	%rdx, %r13
100023f48:	49 89 f7	movq	%rsi, %r15
100023f4b:	48 89 fb	movq	%rdi, %rbx
100023f4e:	48 8b 05 d3 40 03 00	movq	213203(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100023f55:	48 8b 00	movq	(%rax), %rax
100023f58:	48 89 45 d0	movq	%rax, -48(%rbp)
100023f5c:	48 89 f7	movq	%rsi, %rdi
100023f5f:	e8 2e 80 fe ff	callq	0x10000bf92
100023f64:	49 89 c4	movq	%rax, %r12
100023f67:	4c 89 ff	movq	%r15, %rdi
100023f6a:	e8 19 80 fe ff	callq	0x10000bf88
100023f6f:	49 89 c6	movq	%rax, %r14
100023f72:	4c 89 ff	movq	%r15, %rdi
100023f75:	e8 df 7f fe ff	callq	0x10000bf59
100023f7a:	48 89 c2	movq	%rax, %rdx
100023f7d:	48 c7 85 b8 fb ff ff 00 00 00 00	movq	$0, -1096(%rbp)
100023f88:	0f b7 8b 08 04 00 00	movzwl	1032(%rbx), %ecx
100023f8f:	b8 7c 00 00 00	movl	$124, %eax
100023f94:	f7 c1 03 02 00 00	testl	$515, %ecx
100023f9a:	0f 85 f9 00 00 00	jne	0x100024099
100023fa0:	48 89 95 c0 fb ff ff	movq	%rdx, -1088(%rbp)
100023fa7:	49 8d 57 08	leaq	8(%r15), %rdx
100023fab:	48 8b 43 60	movq	96(%rbx), %rax
100023faf:	48 8b 4b 68	movq	104(%rbx), %rcx
100023fb3:	4c 89 34 24	movq	%r14, (%rsp)
100023fb7:	49 89 de	movq	%rbx, %r14
100023fba:	48 89 d3	movq	%rdx, %rbx
100023fbd:	4c 89 f7	movq	%r14, %rdi
100023fc0:	be 03 00 00 00	movl	$3, %esi
100023fc5:	31 d2	xorl	%edx, %edx
100023fc7:	49 89 d8	movq	%rbx, %r8
100023fca:	4d 89 e1	movq	%r12, %r9
100023fcd:	ff 50 68	callq	*104(%rax)
100023fd0:	85 c0	testl	%eax, %eax
100023fd2:	74 22	je	0x100023ff6
100023fd4:	48 8d 0d 10 91 02 00	leaq	168208(%rip), %rcx ## literal pool for: "service bootout (%s)"
100023fdb:	4c 89 f7	movq	%r14, %rdi
100023fde:	48 89 de	movq	%rbx, %rsi
100023fe1:	89 c3	movl	%eax, %ebx
100023fe3:	89 c2	movl	%eax, %edx
100023fe5:	4d 89 e0	movq	%r12, %r8
100023fe8:	31 c0	xorl	%eax, %eax
100023fea:	e8 85 fd ff ff	callq	0x100023d74
100023fef:	89 d8	movl	%ebx, %eax
100023ff1:	e9 a3 00 00 00	jmp	0x100024099
100023ff6:	4c 89 b5 c8 fb ff ff	movq	%r14, -1080(%rbp)
100023ffd:	48 8b bd c0 fb ff ff	movq	-1088(%rbp), %rdi
100024004:	48 85 ff	testq	%rdi, %rdi
100024007:	74 48	je	0x100024051
100024009:	48 8d b5 b8 fb ff ff	leaq	-1096(%rbp), %rsi
100024010:	e8 1c fb ff ff	callq	0x100023b31
100024015:	85 c0	testl	%eax, %eax
100024017:	74 4f	je	0x100024068
100024019:	89 c7	movl	%eax, %edi
10002401b:	89 c3	movl	%eax, %ebx
10002401d:	e8 ec e0 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100024022:	48 8d 15 d7 90 02 00	leaq	168151(%rip), %rdx ## literal pool for: "Could not parse plist: path = %s, error = %d: %s:"
100024029:	48 8b bd c8 fb ff ff	movq	-1080(%rbp), %rdi
100024030:	be 03 00 00 00	movl	$3, %esi
100024035:	4c 89 e1	movq	%r12, %rcx
100024038:	41 89 dc	movl	%ebx, %r12d
10002403b:	41 89 d8	movl	%ebx, %r8d
10002403e:	49 89 c1	movq	%rax, %r9
100024041:	31 c0	xorl	%eax, %eax
100024043:	e8 e1 c3 ff ff	callq	0x100020429
100024048:	48 8b 9d b8 fb ff ff	movq	-1096(%rbp), %rbx
10002404f:	eb 38	jmp	0x100024089
100024051:	49 89 de	movq	%rbx, %r14
100024054:	4c 89 ff	movq	%r15, %rdi
100024057:	e8 15 7f fe ff	callq	0x10000bf71
10002405c:	48 89 c3	movq	%rax, %rbx
10002405f:	48 89 85 b8 fb ff ff	movq	%rax, -1096(%rbp)
100024066:	eb 0a	jmp	0x100024072
100024068:	49 89 de	movq	%rbx, %r14
10002406b:	48 8b 9d b8 fb ff ff	movq	-1096(%rbp), %rbx
100024072:	48 89 df	movq	%rbx, %rdi
100024075:	e8 4c e0 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002407a:	41 bc 6d 00 00 00	movl	$109, %r12d
100024080:	48 3b 05 79 40 03 00	cmpq	213113(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100024087:	74 36	je	0x1000240bf
100024089:	48 85 db	testq	%rbx, %rbx
10002408c:	74 08	je	0x100024096
10002408e:	48 89 df	movq	%rbx, %rdi
100024091:	e8 66 e0 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100024096:	44 89 e0	movl	%r12d, %eax
100024099:	48 8b 0d 88 3f 03 00	movq	212872(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
1000240a0:	48 8b 09	movq	(%rcx), %rcx
1000240a3:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
1000240a7:	0f 85 6f 01 00 00	jne	0x10002421c
1000240ad:	48 81 c4 38 04 00 00	addq	$1080, %rsp
1000240b4:	5b	popq	%rbx
1000240b5:	41 5c	popq	%r12
1000240b7:	41 5d	popq	%r13
1000240b9:	41 5e	popq	%r14
1000240bb:	41 5f	popq	%r15
1000240bd:	5d	popq	%rbp
1000240be:	c3	retq
1000240bf:	48 8d 35 0e f9 01 00	leaq	129294(%rip), %rsi ## literal pool for: "Label"
1000240c6:	48 89 df	movq	%rbx, %rdi
1000240c9:	e8 8c df 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000240ce:	48 85 c0	testq	%rax, %rax
1000240d1:	74 b6	je	0x100024089
1000240d3:	48 8b bd c8 fb ff ff	movq	-1080(%rbp), %rdi
1000240da:	48 89 85 c0 fb ff ff	movq	%rax, -1088(%rbp)
1000240e1:	48 89 c6	movq	%rax, %rsi
1000240e4:	e8 38 01 00 00	callq	0x100024221
1000240e9:	48 85 c0	testq	%rax, %rax
1000240ec:	74 41	je	0x10002412f
1000240ee:	48 89 c7	movq	%rax, %rdi
1000240f1:	48 89 85 a8 fb ff ff	movq	%rax, -1112(%rbp)
1000240f8:	4c 89 f6	movq	%r14, %rsi
1000240fb:	31 d2	xorl	%edx, %edx
1000240fd:	e8 57 41 ff ff	callq	0x100018259
100024102:	85 c0	testl	%eax, %eax
100024104:	74 34	je	0x10002413a
100024106:	48 8d 0d de 8f 02 00	leaq	167902(%rip), %rcx ## literal pool for: "service bootout (%s)"
10002410d:	48 8b bd c8 fb ff ff	movq	-1080(%rbp), %rdi
100024114:	4c 89 f6	movq	%r14, %rsi
100024117:	41 89 c4	movl	%eax, %r12d
10002411a:	89 c2	movl	%eax, %edx
10002411c:	4c 8b 85 c0 fb ff ff	movq	-1088(%rbp), %r8
100024123:	31 c0	xorl	%eax, %eax
100024125:	e8 4a fc ff ff	callq	0x100023d74
10002412a:	e9 5a ff ff ff	jmp	0x100024089
10002412f:	41 bc 71 00 00 00	movl	$113, %r12d
100024135:	e9 4f ff ff ff	jmp	0x100024089
10002413a:	4c 8d a5 d0 fb ff ff	leaq	-1072(%rbp), %r12
100024141:	ba 00 04 00 00	movl	$1024, %edx
100024146:	4c 89 e7	movq	%r12, %rdi
100024149:	be aa 00 00 00	movl	$170, %esi
10002414e:	e8 87 da 01 00	callq	0x100041bda ## symbol stub for: _memset
100024153:	41 8b 7f 1c	movl	28(%r15), %edi
100024157:	4c 89 e6	movq	%r12, %rsi
10002415a:	e8 89 95 00 00	callq	0x10002d6e8
10002415f:	4c 8b b5 a8 fb ff ff	movq	-1112(%rbp), %r14
100024166:	4d 89 f1	movq	%r14, %r9
100024169:	49 81 c1 18 05 00 00	addq	$1304, %r9
100024170:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100024178:	48 8d 15 49 a5 02 00	leaq	173385(%rip), %rdx ## literal pool for: "%s: caller = %s, service = %s, value = 0x%llx"
10002417f:	48 8d 0d ac 8f 02 00	leaq	167852(%rip), %rcx ## literal pool for: "booting out service"
100024186:	48 89 9d b0 fb ff ff	movq	%rbx, -1104(%rbp)
10002418d:	48 8b 9d c8 fb ff ff	movq	-1080(%rbp), %rbx
100024194:	48 89 df	movq	%rbx, %rdi
100024197:	be 05 00 00 00	movl	$5, %esi
10002419c:	4d 89 e0	movq	%r12, %r8
10002419f:	31 c0	xorl	%eax, %eax
1000241a1:	e8 83 c2 ff ff	callq	0x100020429
1000241a6:	48 89 df	movq	%rbx, %rdi
1000241a9:	48 8b 9d b0 fb ff ff	movq	-1104(%rbp), %rbx
1000241b0:	4c 89 f6	movq	%r14, %rsi
1000241b3:	e8 94 d7 ff ff	callq	0x10002194c
1000241b8:	83 f8 24	cmpl	$36, %eax
1000241bb:	75 2f	jne	0x1000241ec
1000241bd:	49 83 be 08 01 00 00 00	cmpq	$0, 264(%r14)
1000241c5:	74 0b	je	0x1000241d2
1000241c7:	41 bc 25 00 00 00	movl	$37, %r12d
1000241cd:	e9 b7 fe ff ff	jmp	0x100024089
1000241d2:	4d 85 ed	testq	%r13, %r13
1000241d5:	74 15	je	0x1000241ec
1000241d7:	4d 89 ae 08 01 00 00	movq	%r13, 264(%r14)
1000241de:	4c 89 ef	movq	%r13, %rdi
1000241e1:	41 89 c4	movl	%eax, %r12d
1000241e4:	e8 1b d7 01 00	callq	0x100041904 ## symbol stub for: _dispatch_group_enter
1000241e9:	44 89 e0	movl	%r12d, %eax
1000241ec:	41 89 c4	movl	%eax, %r12d
1000241ef:	41 f6 47 29 08	testb	$8, 41(%r15)
1000241f4:	0f 84 8f fe ff ff	je	0x100024089
1000241fa:	48 8b bd c8 fb ff ff	movq	-1080(%rbp), %rdi
100024201:	48 8b b5 c0 fb ff ff	movq	-1088(%rbp), %rsi
100024208:	ba 01 00 00 00	movl	$1, %edx
10002420d:	e8 c8 6f 00 00	callq	0x10002b1da
100024212:	e8 29 8f 01 00	callq	0x10003d140
100024217:	e9 6d fe ff ff	jmp	0x100024089
10002421c:	e8 51 d5 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100024221:	55	pushq	%rbp
100024222:	48 89 e5	movq	%rsp, %rbp
100024225:	41 57	pushq	%r15
100024227:	41 56	pushq	%r14
100024229:	41 54	pushq	%r12
10002422b:	53	pushq	%rbx
10002422c:	48 83 ec 50	subq	$80, %rsp
100024230:	49 89 f7	movq	%rsi, %r15
100024233:	49 89 fe	movq	%rdi, %r14
100024236:	48 89 f7	movq	%rsi, %rdi
100024239:	e8 7b b1 fe ff	callq	0x10000f3b9
10002423e:	48 89 c1	movq	%rax, %rcx
100024241:	48 ba c9 42 16 b2 90 85 2c 64	movabsq	$7218291159277650633, %rdx
10002424b:	48 f7 e2	mulq	%rdx
10002424e:	48 89 c8	movq	%rcx, %rax
100024251:	48 29 d0	subq	%rdx, %rax
100024254:	48 d1 e8	shrq	%rax
100024257:	48 01 d0	addq	%rdx, %rax
10002425a:	48 c1 e8 04	shrq	$4, %rax
10002425e:	48 8d 14 40	leaq	(%rax,%rax,2), %rdx
100024262:	48 c1 e2 03	shlq	$3, %rdx
100024266:	48 29 d0	subq	%rdx, %rax
100024269:	48 01 c8	addq	%rcx, %rax
10002426c:	49 8b 9c c6 30 01 00 00	movq	304(%r14,%rax,8), %rbx
100024274:	48 85 db	testq	%rbx, %rbx
100024277:	74 19	je	0x100024292
100024279:	48 8d bb 18 05 00 00	leaq	1304(%rbx), %rdi
100024280:	4c 89 fe	movq	%r15, %rsi
100024283:	e8 a4 db 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100024288:	85 c0	testl	%eax, %eax
10002428a:	74 08	je	0x100024294
10002428c:	48 8b 5b 68	movq	104(%rbx), %rbx
100024290:	eb e2	jmp	0x100024274
100024292:	31 db	xorl	%ebx, %ebx
100024294:	49 8d be e8 01 00 00	leaq	488(%r14), %rdi
10002429b:	4c 89 fe	movq	%r15, %rsi
10002429e:	e8 91 d9 01 00	callq	0x100041c34 ## symbol stub for: _os_map_str_delete
1000242a3:	48 85 c0	testq	%rax, %rax
1000242a6:	0f 84 ef 00 00 00	je	0x10002439b
1000242ac:	49 89 c7	movq	%rax, %r15
1000242af:	48 8d 05 0c db ff ff	leaq	-9460(%rip), %rax
1000242b6:	48 8d 5d a0	leaq	-96(%rbp), %rbx
1000242ba:	48 89 03	movq	%rax, (%rbx)
1000242bd:	48 8d 05 6c de ff ff	leaq	-8596(%rip), %rax
1000242c4:	48 89 43 08	movq	%rax, 8(%rbx)
1000242c8:	48 8d 05 a6 df ff ff	leaq	-8282(%rip), %rax
1000242cf:	48 89 43 10	movq	%rax, 16(%rbx)
1000242d3:	48 8d 05 29 e1 ff ff	leaq	-7895(%rip), %rax
1000242da:	48 89 43 18	movq	%rax, 24(%rbx)
1000242de:	48 8d 05 63 e1 ff ff	leaq	-7837(%rip), %rax
1000242e5:	48 89 43 20	movq	%rax, 32(%rbx)
1000242e9:	48 8d 05 2b e2 ff ff	leaq	-7637(%rip), %rax
1000242f0:	48 89 43 28	movq	%rax, 40(%rbx)
1000242f4:	4c 89 73 30	movq	%r14, 48(%rbx)
1000242f8:	49 8b 7f 08	movq	8(%r15), %rdi
1000242fc:	be 01 00 00 00	movl	$1, %esi
100024301:	e8 9a dc 01 00	callq	0x100041fa0 ## symbol stub for: _xpc_bundle_create
100024306:	49 89 c4	movq	%rax, %r12
100024309:	49 8b 77 10	movq	16(%r15), %rsi
10002430d:	48 89 c7	movq	%rax, %rdi
100024310:	31 d2	xorl	%edx, %edx
100024312:	e8 b3 dc 01 00	callq	0x100041fca ## symbol stub for: _xpc_bundle_populate
100024317:	48 8d 45 dc	leaq	-36(%rbp), %rax
10002431b:	c7 00 00 00 00 00	movl	$0, (%rax)
100024321:	49 8d 57 18	leaq	24(%r15), %rdx
100024325:	4d 8b 4f 38	movq	56(%r15), %r9
100024329:	48 89 04 24	movq	%rax, (%rsp)
10002432d:	4c 89 f7	movq	%r14, %rdi
100024330:	4c 89 e6	movq	%r12, %rsi
100024333:	31 c9	xorl	%ecx, %ecx
100024335:	49 89 d8	movq	%rbx, %r8
100024338:	e8 2c 0f fe ff	callq	0x100005269
10002433d:	48 89 c3	movq	%rax, %rbx
100024340:	4c 89 f9	movq	%r15, %rcx
100024343:	48 83 c1 40	addq	$64, %rcx
100024347:	48 85 c0	testq	%rax, %rax
10002434a:	74 23	je	0x10002436f
10002434c:	48 8d 15 5a c4 02 00	leaq	181338(%rip), %rdx ## literal pool for: "Service stub initialized for %s"
100024353:	4c 89 f7	movq	%r14, %rdi
100024356:	be 05 00 00 00	movl	$5, %esi
10002435b:	31 c0	xorl	%eax, %eax
10002435d:	e8 c7 c0 ff ff	callq	0x100020429
100024362:	4c 89 f7	movq	%r14, %rdi
100024365:	48 89 de	movq	%rbx, %rsi
100024368:	e8 39 d4 ff ff	callq	0x1000217a6
10002436d:	eb 1a	jmp	0x100024389
10002436f:	44 8b 45 dc	movl	-36(%rbp), %r8d
100024373:	48 8d 15 53 c4 02 00	leaq	181331(%rip), %rdx ## literal pool for: "Service stub initialization failed for %s [%d]"
10002437a:	4c 89 f7	movq	%r14, %rdi
10002437d:	be 05 00 00 00	movl	$5, %esi
100024382:	31 c0	xorl	%eax, %eax
100024384:	e8 a0 c0 ff ff	callq	0x100020429
100024389:	4c 89 e7	movq	%r12, %rdi
10002438c:	e8 6b dd 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100024391:	4c 89 ff	movq	%r15, %rdi
100024394:	31 f6	xorl	%esi, %esi
100024396:	e8 b6 e5 fe ff	callq	0x100012951
10002439b:	48 89 d8	movq	%rbx, %rax
10002439e:	48 83 c4 50	addq	$80, %rsp
1000243a2:	5b	popq	%rbx
1000243a3:	41 5c	popq	%r12
1000243a5:	41 5e	popq	%r14
1000243a7:	41 5f	popq	%r15
1000243a9:	5d	popq	%rbp
1000243aa:	c3	retq
1000243ab:	55	pushq	%rbp
1000243ac:	48 89 e5	movq	%rsp, %rbp
1000243af:	e8 26 6e 00 00	callq	0x10002b1da
1000243b4:	5d	popq	%rbp
1000243b5:	e9 86 8d 01 00	jmp	0x10003d140
1000243ba:	55	pushq	%rbp
1000243bb:	48 89 e5	movq	%rsp, %rbp
1000243be:	41 56	pushq	%r14
1000243c0:	53	pushq	%rbx
1000243c1:	48 83 ec 10	subq	$16, %rsp
1000243c5:	45 31 f6	xorl	%r14d, %r14d
1000243c8:	48 8d 5d ec	leaq	-20(%rbp), %rbx
1000243cc:	44 89 33	movl	%r14d, (%rbx)
1000243cf:	31 d2	xorl	%edx, %edx
1000243d1:	48 89 d9	movq	%rbx, %rcx
1000243d4:	e8 17 00 00 00	callq	0x1000243f0
1000243d9:	8b 03	movl	(%rbx), %eax
1000243db:	89 c1	movl	%eax, %ecx
1000243dd:	83 e1 fd	andl	$-3, %ecx
1000243e0:	83 f9 79	cmpl	$121, %ecx
1000243e3:	41 0f 44 c6	cmovel	%r14d, %eax
1000243e7:	48 83 c4 10	addq	$16, %rsp
1000243eb:	5b	popq	%rbx
1000243ec:	41 5e	popq	%r14
1000243ee:	5d	popq	%rbp
1000243ef:	c3	retq
1000243f0:	55	pushq	%rbp
1000243f1:	48 89 e5	movq	%rsp, %rbp
1000243f4:	41 57	pushq	%r15
1000243f6:	41 56	pushq	%r14
1000243f8:	41 55	pushq	%r13
1000243fa:	41 54	pushq	%r12
1000243fc:	53	pushq	%rbx
1000243fd:	48 81 ec e8 00 00 00	subq	$232, %rsp
100024404:	48 89 8d 78 ff ff ff	movq	%rcx, -136(%rbp)
10002440b:	48 89 95 38 ff ff ff	movq	%rdx, -200(%rbp)
100024412:	49 89 f4	movq	%rsi, %r12
100024415:	49 89 ff	movq	%rdi, %r15
100024418:	48 8b 05 09 3c 03 00	movq	211977(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002441f:	48 8b 00	movq	(%rax), %rax
100024422:	48 89 45 d0	movq	%rax, -48(%rbp)
100024426:	48 89 f7	movq	%rsi, %rdi
100024429:	e8 6e 7b fe ff	callq	0x10000bf9c
10002442e:	48 89 c3	movq	%rax, %rbx
100024431:	4c 89 e7	movq	%r12, %rdi
100024434:	e8 4f 7b fe ff	callq	0x10000bf88
100024439:	49 89 c6	movq	%rax, %r14
10002443c:	48 89 df	movq	%rbx, %rdi
10002443f:	be 02 00 00 00	movl	$2, %esi
100024444:	e8 7b db 01 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
100024449:	49 89 c5	movq	%rax, %r13
10002444c:	48 89 df	movq	%rbx, %rdi
10002444f:	e8 64 db 01 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
100024454:	41 0f b7 8f 08 04 00 00	movzwl	1032(%r15), %ecx
10002445c:	f7 c1 03 02 00 00	testl	$515, %ecx
100024462:	74 0c	je	0x100024470
100024464:	c7 45 88 7c 00 00 00	movl	$124, -120(%rbp)
10002446b:	e9 df 00 00 00	jmp	0x10002454f
100024470:	4c 89 ad 70 ff ff ff	movq	%r13, -144(%rbp)
100024477:	48 89 9d 58 ff ff ff	movq	%rbx, -168(%rbp)
10002447e:	41 8b 4c 24 28	movl	40(%r12), %ecx
100024483:	48 89 8d 40 ff ff ff	movq	%rcx, -192(%rbp)
10002448a:	48 8d 35 ad f4 01 00	leaq	128173(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
100024491:	48 89 85 50 ff ff ff	movq	%rax, -176(%rbp)
100024498:	48 89 c7	movq	%rax, %rdi
10002449b:	e8 4d f8 ff ff	callq	0x100023ced
1000244a0:	84 c0	testb	%al, %al
1000244a2:	4c 89 b5 48 ff ff ff	movq	%r14, -184(%rbp)
1000244a9:	75 0c	jne	0x1000244b7
1000244ab:	4c 89 e7	movq	%r12, %rdi
1000244ae:	e8 b0 7a fe ff	callq	0x10000bf63
1000244b3:	84 c0	testb	%al, %al
1000244b5:	74 07	je	0x1000244be
1000244b7:	bb 80 00 00 00	movl	$128, %ebx
1000244bc:	eb 02	jmp	0x1000244c0
1000244be:	31 db	xorl	%ebx, %ebx
1000244c0:	4c 8b ad 58 ff ff ff	movq	-168(%rbp), %r13
1000244c7:	41 f6 44 24 29 40	testb	$64, 41(%r12)
1000244cd:	74 20	je	0x1000244ef
1000244cf:	48 8d 35 e9 4c 02 00	leaq	150761(%rip), %rsi ## literal pool for: ".appex"
1000244d6:	48 8b bd 70 ff ff ff	movq	-144(%rbp), %rdi
1000244dd:	e8 f9 ad fe ff	callq	0x10000f2db
1000244e2:	48 89 d9	movq	%rbx, %rcx
1000244e5:	48 83 c9 40	orq	$64, %rcx
1000244e9:	84 c0	testb	%al, %al
1000244eb:	48 0f 45 d9	cmovneq	%rcx, %rbx
1000244ef:	48 89 9d 60 ff ff ff	movq	%rbx, -160(%rbp)
1000244f6:	48 8d 55 88	leaq	-120(%rbp), %rdx
1000244fa:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
100024501:	4c 89 ff	movq	%r15, %rdi
100024504:	4c 89 ee	movq	%r13, %rsi
100024507:	e8 cd 92 00 00	callq	0x10002d7d9
10002450c:	85 c0	testl	%eax, %eax
10002450e:	74 79	je	0x100024589
100024510:	89 c3	movl	%eax, %ebx
100024512:	4c 89 ef	movq	%r13, %rdi
100024515:	be 02 00 00 00	movl	$2, %esi
10002451a:	e8 a5 da 01 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
10002451f:	49 89 c6	movq	%rax, %r14
100024522:	89 df	movl	%ebx, %edi
100024524:	e8 e5 db 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100024529:	48 8d 15 d6 a1 02 00	leaq	172502(%rip), %rdx ## literal pool for: "Could not get domain target from bundle: path = %s, error = %d: %s"
100024530:	4c 89 ff	movq	%r15, %rdi
100024533:	be 03 00 00 00	movl	$3, %esi
100024538:	4c 89 f1	movq	%r14, %rcx
10002453b:	41 89 d8	movl	%ebx, %r8d
10002453e:	49 89 c1	movq	%rax, %r9
100024541:	31 c0	xorl	%eax, %eax
100024543:	e8 e1 be ff ff	callq	0x100020429
100024548:	c7 45 88 70 00 00 00	movl	$112, -120(%rbp)
10002454f:	45 31 f6	xorl	%r14d, %r14d
100024552:	4c 8b a5 78 ff ff ff	movq	-136(%rbp), %r12
100024559:	8b 45 88	movl	-120(%rbp), %eax
10002455c:	41 89 04 24	movl	%eax, (%r12)
100024560:	48 8b 05 c1 3a 03 00	movq	211649(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100024567:	48 8b 00	movq	(%rax), %rax
10002456a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002456e:	0f 85 84 05 00 00	jne	0x100024af8
100024574:	4c 89 f0	movq	%r14, %rax
100024577:	48 81 c4 e8 00 00 00	addq	$232, %rsp
10002457e:	5b	popq	%rbx
10002457f:	41 5c	popq	%r12
100024581:	41 5d	popq	%r13
100024583:	41 5e	popq	%r14
100024585:	41 5f	popq	%r15
100024587:	5d	popq	%rbp
100024588:	c3	retq
100024589:	49 8d 7c 24 08	leaq	8(%r12), %rdi
10002458e:	48 8b 5d 88	movq	-120(%rbp), %rbx
100024592:	48 8d 05 9f dd 03 00	leaq	253343(%rip), %rax
100024599:	4c 89 7d 80	movq	%r15, -128(%rbp)
10002459d:	48 39 c3	cmpq	%rax, %rbx
1000245a0:	48 89 bd 68 ff ff ff	movq	%rdi, -152(%rbp)
1000245a7:	74 24	je	0x1000245cd
1000245a9:	ff 53 58	callq	*88(%rbx)
1000245ac:	49 89 c6	movq	%rax, %r14
1000245af:	48 89 df	movq	%rbx, %rdi
1000245b2:	48 89 c6	movq	%rax, %rsi
1000245b5:	e8 f1 69 00 00	callq	0x10002afab
1000245ba:	4c 8b 85 68 ff ff ff	movq	-152(%rbp), %r8
1000245c1:	49 89 c7	movq	%rax, %r15
1000245c4:	48 85 c0	testq	%rax, %rax
1000245c7:	0f 84 f3 00 00 00	je	0x1000246c0
1000245cd:	4c 89 e7	movq	%r12, %rdi
1000245d0:	e8 d1 79 fe ff	callq	0x10000bfa6
1000245d5:	4c 8b b5 60 ff ff ff	movq	-160(%rbp), %r14
1000245dc:	49 8d 8e 00 01 00 00	leaq	256(%r14), %rcx
1000245e3:	84 c0	testb	%al, %al
1000245e5:	49 0f 44 ce	cmoveq	%r14, %rcx
1000245e9:	89 cb	movl	%ecx, %ebx
1000245eb:	81 e3 7f 01 00 00	andl	$383, %ebx
1000245f1:	f6 c1 40	testb	$64, %cl
1000245f4:	48 0f 44 d9	cmoveq	%rcx, %rbx
1000245f8:	41 0f b7 87 08 04 00 00	movzwl	1032(%r15), %eax
100024600:	a9 03 02 00 00	testl	$515, %eax
100024605:	74 12	je	0x100024619
100024607:	c7 45 88 7c 00 00 00	movl	$124, -120(%rbp)
10002460e:	4d 89 fe	movq	%r15, %r14
100024611:	41 bf 7c 00 00 00	movl	$124, %r15d
100024617:	eb 4a	jmp	0x100024663
100024619:	48 8b 95 40 ff ff ff	movq	-192(%rbp), %rdx
100024620:	c1 ea 0d	shrl	$13, %edx
100024623:	83 e2 01	andl	$1, %edx
100024626:	49 8b 47 60	movq	96(%r15), %rax
10002462a:	49 8b 4f 68	movq	104(%r15), %rcx
10002462e:	48 8b b5 48 ff ff ff	movq	-184(%rbp), %rsi
100024635:	48 89 34 24	movq	%rsi, (%rsp)
100024639:	4c 89 ff	movq	%r15, %rdi
10002463c:	be 02 00 00 00	movl	$2, %esi
100024641:	4c 8b 85 68 ff ff ff	movq	-152(%rbp), %r8
100024648:	4c 8b 8d 70 ff ff ff	movq	-144(%rbp), %r9
10002464f:	ff 50 68	callq	*104(%rax)
100024652:	4d 89 fe	movq	%r15, %r14
100024655:	41 89 c7	movl	%eax, %r15d
100024658:	89 45 88	movl	%eax, -120(%rbp)
10002465b:	85 c0	testl	%eax, %eax
10002465d:	0f 84 09 01 00 00	je	0x10002476c
100024663:	4c 8b 6d 80	movq	-128(%rbp), %r13
100024667:	49 8b 85 d0 00 00 00	movq	208(%r13), %rax
10002466e:	48 85 c0	testq	%rax, %rax
100024671:	48 8d 1d 19 2f 02 00	leaq	143129(%rip), %rbx ## literal pool for: "(unknown)"
100024678:	48 0f 45 d8	cmovneq	%rax, %rbx
10002467c:	49 8b 46 60	movq	96(%r14), %rax
100024680:	4c 8b 60 70	movq	112(%rax), %r12
100024684:	44 89 ff	movl	%r15d, %edi
100024687:	e8 82 da 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002468c:	48 89 5c 24 08	movq	%rbx, 8(%rsp)
100024691:	48 89 04 24	movq	%rax, (%rsp)
100024695:	48 8d 15 aa 8a 02 00	leaq	166570(%rip), %rdx ## literal pool for: "Path not allowed in target domain: type = %s, path = %s error = %d: %s, origin = %s"
10002469c:	45 31 f6	xorl	%r14d, %r14d
10002469f:	4c 89 ef	movq	%r13, %rdi
1000246a2:	be 03 00 00 00	movl	$3, %esi
1000246a7:	4c 89 e1	movq	%r12, %rcx
1000246aa:	4c 8b 85 70 ff ff ff	movq	-144(%rbp), %r8
1000246b1:	45 89 f9	movl	%r15d, %r9d
1000246b4:	31 c0	xorl	%eax, %eax
1000246b6:	e8 6e bd ff ff	callq	0x100020429
1000246bb:	e9 92 fe ff ff	jmp	0x100024552
1000246c0:	48 8b 0d 91 ee 03 00	movq	257681(%rip), %rcx
1000246c7:	41 bf 7c 00 00 00	movl	$124, %r15d
1000246cd:	f6 81 08 04 00 00 01	testb	$1, 1032(%rcx)
1000246d4:	75 30	jne	0x100024706
1000246d6:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000246de:	31 ff	xorl	%edi, %edi
1000246e0:	31 f6	xorl	%esi, %esi
1000246e2:	31 d2	xorl	%edx, %edx
1000246e4:	4c 89 f1	movq	%r14, %rcx
1000246e7:	4c 8b 85 68 ff ff ff	movq	-152(%rbp), %r8
1000246ee:	45 31 c9	xorl	%r9d, %r9d
1000246f1:	ff 53 68	callq	*104(%rbx)
1000246f4:	4c 8b 85 68 ff ff ff	movq	-152(%rbp), %r8
1000246fb:	41 89 c7	movl	%eax, %r15d
1000246fe:	85 c0	testl	%eax, %eax
100024700:	0f 84 bb 01 00 00	je	0x1000248c1
100024706:	0f 57 c0	xorps	%xmm0, %xmm0
100024709:	48 8d 5d 90	leaq	-112(%rbp), %rbx
10002470d:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100024711:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100024715:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100024719:	0f 29 03	movaps	%xmm0, (%rbx)
10002471c:	4c 89 c7	movq	%r8, %rdi
10002471f:	48 89 de	movq	%rbx, %rsi
100024722:	e8 36 01 01 00	callq	0x10003485d
100024727:	49 89 c6	movq	%rax, %r14
10002472a:	44 8b 23	movl	(%rbx), %r12d
10002472d:	4c 89 ef	movq	%r13, %rdi
100024730:	be 02 00 00 00	movl	$2, %esi
100024735:	e8 8a d8 01 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
10002473a:	48 89 c3	movq	%rax, %rbx
10002473d:	44 89 ff	movl	%r15d, %edi
100024740:	e8 c9 d9 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100024745:	48 89 44 24 08	movq	%rax, 8(%rsp)
10002474a:	44 89 3c 24	movl	%r15d, (%rsp)
10002474e:	48 8d 15 f4 9f 02 00	leaq	172020(%rip), %rdx ## literal pool for: "Caller is denied target domain creation for bundle: caller = %s[%d], path = %s, error = %d: %s"
100024755:	48 8b 7d 80	movq	-128(%rbp), %rdi
100024759:	be 03 00 00 00	movl	$3, %esi
10002475e:	4c 89 f1	movq	%r14, %rcx
100024761:	45 89 e0	movl	%r12d, %r8d
100024764:	49 89 d9	movq	%rbx, %r9
100024767:	e9 d5 fd ff ff	jmp	0x100024541
10002476c:	45 8b 7c 24 28	movl	40(%r12), %r15d
100024771:	48 8d 05 4a d6 ff ff	leaq	-10678(%rip), %rax
100024778:	48 89 85 00 ff ff ff	movq	%rax, -256(%rbp)
10002477f:	48 8d 05 aa d9 ff ff	leaq	-9814(%rip), %rax
100024786:	48 89 85 08 ff ff ff	movq	%rax, -248(%rbp)
10002478d:	48 8d 05 e1 da ff ff	leaq	-9503(%rip), %rax
100024794:	48 89 85 10 ff ff ff	movq	%rax, -240(%rbp)
10002479b:	48 8d 05 61 dc ff ff	leaq	-9119(%rip), %rax
1000247a2:	48 89 85 18 ff ff ff	movq	%rax, -232(%rbp)
1000247a9:	48 8d 05 98 dc ff ff	leaq	-9064(%rip), %rax
1000247b0:	48 89 85 20 ff ff ff	movq	%rax, -224(%rbp)
1000247b7:	48 8d 05 5d dd ff ff	leaq	-8867(%rip), %rax
1000247be:	48 89 85 28 ff ff ff	movq	%rax, -216(%rbp)
1000247c5:	4c 89 b5 30 ff ff ff	movq	%r14, -208(%rbp)
1000247cc:	48 8d 35 6b f1 01 00	leaq	127339(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
1000247d3:	48 8b bd 50 ff ff ff	movq	-176(%rbp), %rdi
1000247da:	e8 7b d8 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000247df:	48 85 c0	testq	%rax, %rax
1000247e2:	0f 84 17 01 00 00	je	0x1000248ff
1000247e8:	49 89 c5	movq	%rax, %r13
1000247eb:	4c 89 b5 60 ff ff ff	movq	%r14, -160(%rbp)
1000247f2:	4c 89 f7	movq	%r14, %rdi
1000247f5:	48 89 c6	movq	%rax, %rsi
1000247f8:	e8 24 fa ff ff	callq	0x100024221
1000247fd:	48 85 c0	testq	%rax, %rax
100024800:	0f 84 26 01 00 00	je	0x10002492c
100024806:	49 89 c6	movq	%rax, %r14
100024809:	4c 8b b8 68 01 00 00	movq	360(%rax), %r15
100024810:	48 8b 9d 70 ff ff ff	movq	-144(%rbp), %rbx
100024817:	48 89 df	movq	%rbx, %rdi
10002481a:	4c 89 fe	movq	%r15, %rsi
10002481d:	e8 0a d6 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100024822:	85 c0	testl	%eax, %eax
100024824:	74 20	je	0x100024846
100024826:	48 8d 15 2c 01 02 00	leaq	131372(%rip), %rdx ## literal pool for: "Attempt to re-bootstrap service from different path, will use existing: service = %s, existing = %s, conflicting = %s"
10002482d:	48 8b 7d 80	movq	-128(%rbp), %rdi
100024831:	be 04 00 00 00	movl	$4, %esi
100024836:	4c 89 e9	movq	%r13, %rcx
100024839:	4d 89 f8	movq	%r15, %r8
10002483c:	49 89 d9	movq	%rbx, %r9
10002483f:	31 c0	xorl	%eax, %eax
100024841:	e8 e3 bb ff ff	callq	0x100020429
100024846:	c7 45 88 79 00 00 00	movl	$121, -120(%rbp)
10002484d:	b8 79 00 00 00	movl	$121, %eax
100024852:	4c 8b a5 78 ff ff ff	movq	-136(%rbp), %r12
100024859:	4c 8b bd 60 ff ff ff	movq	-160(%rbp), %r15
100024860:	49 8b 9e 88 00 00 00	movq	136(%r14), %rbx
100024867:	48 85 db	testq	%rbx, %rbx
10002486a:	74 45	je	0x1000248b1
10002486c:	48 8d b3 90 00 00 00	leaq	144(%rbx), %rsi
100024873:	48 8b 45 80	movq	-128(%rbp), %rax
100024877:	48 8b b8 b0 03 00 00	movq	944(%rax), %rdi
10002487e:	48 85 ff	testq	%rdi, %rdi
100024881:	48 0f 44 f8	cmoveq	%rax, %rdi
100024885:	31 d2	xorl	%edx, %edx
100024887:	e8 79 03 00 00	callq	0x100024c05
10002488c:	48 85 c0	testq	%rax, %rax
10002488f:	75 14	jne	0x1000248a5
100024891:	b9 04 00 00 00	movl	$4, %ecx
100024896:	48 8b 7d 80	movq	-128(%rbp), %rdi
10002489a:	4c 89 f6	movq	%r14, %rsi
10002489d:	48 89 da	movq	%rbx, %rdx
1000248a0:	e8 42 de ff ff	callq	0x1000226e7
1000248a5:	48 8b 5b 08	movq	8(%rbx), %rbx
1000248a9:	48 85 db	testq	%rbx, %rbx
1000248ac:	75 be	jne	0x10002486c
1000248ae:	8b 45 88	movl	-120(%rbp), %eax
1000248b1:	85 c0	testl	%eax, %eax
1000248b3:	0f 85 a0 fc ff ff	jne	0x100024559
1000248b9:	4c 89 ff	movq	%r15, %rdi
1000248bc:	e9 88 01 00 00	jmp	0x100024a49
1000248c1:	4c 8b 0d 90 ec 03 00	movq	257168(%rip), %r9
1000248c8:	4c 89 04 24	movq	%r8, (%rsp)
1000248cc:	48 89 df	movq	%rbx, %rdi
1000248cf:	4c 89 f6	movq	%r14, %rsi
1000248d2:	31 d2	xorl	%edx, %edx
1000248d4:	31 c9	xorl	%ecx, %ecx
1000248d6:	4c 89 c3	movq	%r8, %rbx
1000248d9:	45 31 c0	xorl	%r8d, %r8d
1000248dc:	e8 b7 15 00 00	callq	0x100025e98
1000248e1:	49 89 c7	movq	%rax, %r15
1000248e4:	48 89 c7	movq	%rax, %rdi
1000248e7:	48 89 de	movq	%rbx, %rsi
1000248ea:	31 d2	xorl	%edx, %edx
1000248ec:	e8 63 ce ff ff	callq	0x100021754
1000248f1:	4d 85 ff	testq	%r15, %r15
1000248f4:	0f 85 d3 fc ff ff	jne	0x1000245cd
1000248fa:	e9 49 fc ff ff	jmp	0x100024548
1000248ff:	48 8d 15 14 f2 01 00	leaq	127508(%rip), %rdx ## literal pool for: "Bundle Info.plist at %s does not have a CFBundleIdentifier"
100024906:	45 31 f6	xorl	%r14d, %r14d
100024909:	48 8b 7d 80	movq	-128(%rbp), %rdi
10002490d:	be 03 00 00 00	movl	$3, %esi
100024912:	48 8b 8d 70 ff ff ff	movq	-144(%rbp), %rcx
100024919:	31 c0	xorl	%eax, %eax
10002491b:	e8 09 bb ff ff	callq	0x100020429
100024920:	c7 45 88 6b 00 00 00	movl	$107, -120(%rbp)
100024927:	e9 26 fc ff ff	jmp	0x100024552
10002492c:	4c 89 ad 70 ff ff ff	movq	%r13, -144(%rbp)
100024933:	41 81 e7 00 01 00 00	andl	$256, %r15d
10002493a:	4e 8d 34 7b	leaq	(%rbx,%r15,2), %r14
10002493e:	4c 89 e7	movq	%r12, %rdi
100024941:	41 f6 44 24 29 40	testb	$64, 41(%r12)
100024947:	4c 8b a5 78 ff ff ff	movq	-136(%rbp), %r12
10002494e:	48 8b 5d 80	movq	-128(%rbp), %rbx
100024952:	4c 8b bd 60 ff ff ff	movq	-160(%rbp), %r15
100024959:	4c 8d 6d 88	leaq	-120(%rbp), %r13
10002495d:	0f 85 9b 00 00 00	jne	0x1000249fe
100024963:	48 8d 05 ce d9 03 00	leaq	252366(%rip), %rax
10002496a:	48 39 43 60	cmpq	%rax, 96(%rbx)
10002496e:	0f 85 8a 00 00 00	jne	0x1000249fe
100024974:	e8 23 76 fe ff	callq	0x10000bf9c
100024979:	48 89 df	movq	%rbx, %rdi
10002497c:	48 89 c3	movq	%rax, %rbx
10002497f:	48 8d 55 90	leaq	-112(%rbp), %rdx
100024983:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
10002498a:	48 89 c6	movq	%rax, %rsi
10002498d:	e8 47 8e 00 00	callq	0x10002d7d9
100024992:	85 c0	testl	%eax, %eax
100024994:	75 64	jne	0x1000249fa
100024996:	48 8d 05 9b d9 03 00	leaq	252315(%rip), %rax
10002499d:	48 39 45 90	cmpq	%rax, -112(%rbp)
1000249a1:	75 57	jne	0x1000249fa
1000249a3:	48 89 df	movq	%rbx, %rdi
1000249a6:	e8 0d d6 01 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
1000249ab:	48 8d 35 99 f6 01 00	leaq	128665(%rip), %rsi ## literal pool for: "XPCService"
1000249b2:	48 89 c7	movq	%rax, %rdi
1000249b5:	e8 b2 d6 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000249ba:	48 85 c0	testq	%rax, %rax
1000249bd:	74 3b	je	0x1000249fa
1000249bf:	48 89 c3	movq	%rax, %rbx
1000249c2:	48 89 c7	movq	%rax, %rdi
1000249c5:	e8 fc d6 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000249ca:	48 3b 05 2f 37 03 00	cmpq	210735(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000249d1:	75 27	jne	0x1000249fa
1000249d3:	48 8d 35 35 f9 01 00	leaq	129333(%rip), %rsi ## literal pool for: "_MultipleInstances"
1000249da:	48 89 df	movq	%rbx, %rdi
1000249dd:	e8 54 d6 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000249e2:	84 c0	testb	%al, %al
1000249e4:	75 14	jne	0x1000249fa
1000249e6:	48 8d 35 7c fc 01 00	leaq	130172(%rip), %rsi ## literal pool for: "_AdditionalSubServices"
1000249ed:	48 89 df	movq	%rbx, %rdi
1000249f0:	e8 77 d6 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000249f5:	48 85 c0	testq	%rax, %rax
1000249f8:	74 64	je	0x100024a5e
1000249fa:	48 8b 5d 80	movq	-128(%rbp), %rbx
1000249fe:	4c 89 2c 24	movq	%r13, (%rsp)
100024a02:	4c 8d 85 00 ff ff ff	leaq	-256(%rbp), %r8
100024a09:	4c 89 ff	movq	%r15, %rdi
100024a0c:	48 8b b5 58 ff ff ff	movq	-168(%rbp), %rsi
100024a13:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
100024a1a:	48 8b 8d 38 ff ff ff	movq	-200(%rbp), %rcx
100024a21:	4d 89 f1	movq	%r14, %r9
100024a24:	e8 40 08 fe ff	callq	0x100005269
100024a29:	48 85 c0	testq	%rax, %rax
100024a2c:	74 28	je	0x100024a56
100024a2e:	49 89 c6	movq	%rax, %r14
100024a31:	8b 45 88	movl	-120(%rbp), %eax
100024a34:	83 f8 79	cmpl	$121, %eax
100024a37:	0f 84 23 fe ff ff	je	0x100024860
100024a3d:	49 39 df	cmpq	%rbx, %r15
100024a40:	0f 85 1a fe ff ff	jne	0x100024860
100024a46:	48 89 df	movq	%rbx, %rdi
100024a49:	4c 89 f6	movq	%r14, %rsi
100024a4c:	e8 55 cd ff ff	callq	0x1000217a6
100024a51:	e9 03 fb ff ff	jmp	0x100024559
100024a56:	45 31 f6	xorl	%r14d, %r14d
100024a59:	e9 fb fa ff ff	jmp	0x100024559
100024a5e:	48 8d 35 c5 fa 01 00	leaq	129733(%rip), %rsi ## literal pool for: "_AdditionalServices"
100024a65:	48 89 df	movq	%rbx, %rdi
100024a68:	e8 ff d5 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100024a6d:	48 85 c0	testq	%rax, %rax
100024a70:	48 8b 5d 80	movq	-128(%rbp), %rbx
100024a74:	75 88	jne	0x1000249fe
100024a76:	48 8d 05 39 dd 03 00	leaq	253241(%rip), %rax
100024a7d:	80 38 00	cmpb	$0, (%rax)
100024a80:	0f 85 78 ff ff ff	jne	0x1000249fe
100024a86:	49 39 df	cmpq	%rbx, %r15
100024a89:	75 72	jne	0x100024afd
100024a8b:	4c 8d 45 88	leaq	-120(%rbp), %r8
100024a8f:	48 8b 7d 80	movq	-128(%rbp), %rdi
100024a93:	48 8b b5 58 ff ff ff	movq	-168(%rbp), %rsi
100024a9a:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
100024aa1:	4c 89 f1	movq	%r14, %rcx
100024aa4:	e8 e2 4b 01 00	callq	0x10003968b
100024aa9:	48 85 c0	testq	%rax, %rax
100024aac:	0f 84 9d fa ff ff	je	0x10002454f
100024ab2:	48 8b 5d 80	movq	-128(%rbp), %rbx
100024ab6:	48 8d bb e8 01 00 00	leaq	488(%rbx), %rdi
100024abd:	48 89 c6	movq	%rax, %rsi
100024ac0:	48 83 c6 40	addq	$64, %rsi
100024ac4:	48 89 c2	movq	%rax, %rdx
100024ac7:	e8 86 d1 01 00	callq	0x100041c52 ## symbol stub for: _os_map_str_insert
100024acc:	c7 45 88 7b 00 00 00	movl	$123, -120(%rbp)
100024ad3:	48 8d 15 c0 86 02 00	leaq	165568(%rip), %rdx ## literal pool for: "Service stub created for %s"
100024ada:	45 31 f6	xorl	%r14d, %r14d
100024add:	48 89 df	movq	%rbx, %rdi
100024ae0:	be 05 00 00 00	movl	$5, %esi
100024ae5:	48 8b 8d 70 ff ff ff	movq	-144(%rbp), %rcx
100024aec:	31 c0	xorl	%eax, %eax
100024aee:	e8 36 b9 ff ff	callq	0x100020429
100024af3:	e9 5a fa ff ff	jmp	0x100024552
100024af8:	e8 75 cc 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100024afd:	e8 b7 bb 01 00	callq	0x1000406b9
100024b02:	55	pushq	%rbp
100024b03:	48 89 e5	movq	%rsp, %rbp
100024b06:	48 8b 87 b0 03 00 00	movq	944(%rdi), %rax
100024b0d:	48 85 c0	testq	%rax, %rax
100024b10:	48 0f 45 f8	cmovneq	%rax, %rdi
100024b14:	31 d2	xorl	%edx, %edx
100024b16:	5d	popq	%rbp
100024b17:	e9 e9 00 00 00	jmp	0x100024c05
100024b1c:	55	pushq	%rbp
100024b1d:	48 89 e5	movq	%rsp, %rbp
100024b20:	41 57	pushq	%r15
100024b22:	41 56	pushq	%r14
100024b24:	41 55	pushq	%r13
100024b26:	41 54	pushq	%r12
100024b28:	53	pushq	%rbx
100024b29:	48 83 ec 18	subq	$24, %rsp
100024b2d:	4d 89 c5	movq	%r8, %r13
100024b30:	49 89 d7	movq	%rdx, %r15
100024b33:	49 89 f4	movq	%rsi, %r12
100024b36:	e8 e9 4d 01 00	callq	0x100039924
100024b3b:	4c 8b 35 16 ea 03 00	movq	256534(%rip), %r14
100024b42:	41 0f b7 8e 08 04 00 00	movzwl	1032(%r14), %ecx
100024b4a:	bb 4c 04 00 00	movl	$1100, %ebx
100024b4f:	f7 c1 03 02 00 00	testl	$515, %ecx
100024b55:	75 2f	jne	0x100024b86
100024b57:	4c 89 7d c8	movq	%r15, -56(%rbp)
100024b5b:	4d 8b 56 60	movq	96(%r14), %r10
100024b5f:	49 8b 4e 68	movq	104(%r14), %rcx
100024b63:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100024b6b:	4c 89 f7	movq	%r14, %rdi
100024b6e:	be 03 00 00 00	movl	$3, %esi
100024b73:	31 d2	xorl	%edx, %edx
100024b75:	49 89 c7	movq	%rax, %r15
100024b78:	49 89 c0	movq	%rax, %r8
100024b7b:	45 31 c9	xorl	%r9d, %r9d
100024b7e:	41 ff 52 68	callq	*104(%r10)
100024b82:	85 c0	testl	%eax, %eax
100024b84:	74 11	je	0x100024b97
100024b86:	89 d8	movl	%ebx, %eax
100024b88:	48 83 c4 18	addq	$24, %rsp
100024b8c:	5b	popq	%rbx
100024b8d:	41 5c	popq	%r12
100024b8f:	41 5d	popq	%r13
100024b91:	41 5e	popq	%r14
100024b93:	41 5f	popq	%r15
100024b95:	5d	popq	%rbp
100024b96:	c3	retq
100024b97:	4c 89 f7	movq	%r14, %rdi
100024b9a:	4c 89 e6	movq	%r12, %rsi
100024b9d:	31 d2	xorl	%edx, %edx
100024b9f:	e8 61 00 00 00	callq	0x100024c05
100024ba4:	85 d2	testl	%edx, %edx
100024ba6:	74 3c	je	0x100024be4
100024ba8:	31 db	xorl	%ebx, %ebx
100024baa:	4c 8d 4d d0	leaq	-48(%rbp), %r9
100024bae:	49 89 19	movq	%rbx, (%r9)
100024bb1:	41 83 e5 01	andl	$1, %r13d
100024bb5:	4a 8d 0c 2d 01 00 00 00	leaq	1(,%r13), %rcx
100024bbd:	4c 01 e9	addq	%r13, %rcx
100024bc0:	48 89 1c 24	movq	%rbx, (%rsp)
100024bc4:	4c 89 f7	movq	%r14, %rdi
100024bc7:	4c 89 fe	movq	%r15, %rsi
100024bca:	4c 89 e2	movq	%r12, %rdx
100024bcd:	45 31 c0	xorl	%r8d, %r8d
100024bd0:	e8 02 01 00 00	callq	0x100024cd7
100024bd5:	85 c0	testl	%eax, %eax
100024bd7:	74 12	je	0x100024beb
100024bd9:	89 c7	movl	%eax, %edi
100024bdb:	e8 36 06 00 00	callq	0x100025216
100024be0:	89 c3	movl	%eax, %ebx
100024be2:	eb a2	jmp	0x100024b86
100024be4:	bb 4f 04 00 00	movl	$1103, %ebx
100024be9:	eb 9b	jmp	0x100024b86
100024beb:	48 8b 7d d0	movq	-48(%rbp), %rdi
100024bef:	e8 f6 d4 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100024bf4:	48 8b 4d c8	movq	-56(%rbp), %rcx
100024bf8:	89 01	movl	%eax, (%rcx)
100024bfa:	48 8b 7d d0	movq	-48(%rbp), %rdi
100024bfe:	e8 f9 d4 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100024c03:	eb 81	jmp	0x100024b86
100024c05:	55	pushq	%rbp
100024c06:	48 89 e5	movq	%rsp, %rbp
100024c09:	41 57	pushq	%r15
100024c0b:	41 56	pushq	%r14
100024c0d:	53	pushq	%rbx
100024c0e:	50	pushq	%rax
100024c0f:	49 89 f7	movq	%rsi, %r15
100024c12:	49 89 fe	movq	%rdi, %r14
100024c15:	48 8d 05 1c d7 03 00	leaq	251676(%rip), %rax
100024c1c:	48 39 47 60	cmpq	%rax, 96(%rdi)
100024c20:	74 16	je	0x100024c38
100024c22:	48 85 d2	testq	%rdx, %rdx
100024c25:	74 31	je	0x100024c58
100024c27:	48 8d 35 21 9c 02 00	leaq	171041(%rip), %rsi ## literal pool for: "mach-lookup"
100024c2e:	48 89 d7	movq	%rdx, %rdi
100024c31:	ba 01 00 00 00	movl	$1, %edx
100024c36:	eb 14	jmp	0x100024c4c
100024c38:	48 85 d2	testq	%rdx, %rdx
100024c3b:	74 1b	je	0x100024c58
100024c3d:	48 8d 35 0b 9c 02 00	leaq	171019(%rip), %rsi ## literal pool for: "mach-lookup"
100024c44:	48 89 d7	movq	%rdx, %rdi
100024c47:	ba 03 00 00 00	movl	$3, %edx
100024c4c:	4c 89 f9	movq	%r15, %rcx
100024c4f:	e8 0c d1 fe ff	callq	0x100011d60
100024c54:	84 c0	testb	%al, %al
100024c56:	74 61	je	0x100024cb9
100024c58:	4c 89 ff	movq	%r15, %rdi
100024c5b:	e8 59 a7 fe ff	callq	0x10000f3b9
100024c60:	48 89 c1	movq	%rax, %rcx
100024c63:	48 ba 11 42 08 21 84 10 42 08	movabsq	$595056260442243601, %rdx
100024c6d:	48 f7 e2	mulq	%rdx
100024c70:	48 89 c8	movq	%rcx, %rax
100024c73:	48 29 d0	subq	%rdx, %rax
100024c76:	48 d1 e8	shrq	%rax
100024c79:	48 01 d0	addq	%rdx, %rax
100024c7c:	48 c1 e8 04	shrq	$4, %rax
100024c80:	48 89 c2	movq	%rax, %rdx
100024c83:	48 c1 e2 05	shlq	$5, %rdx
100024c87:	48 29 d0	subq	%rdx, %rax
100024c8a:	48 01 c8	addq	%rcx, %rax
100024c8d:	49 8b 9c c6 a0 02 00 00	movq	672(%r14,%rax,8), %rbx
100024c95:	41 be 03 00 00 00	movl	$3, %r14d
100024c9b:	48 85 db	testq	%rbx, %rbx
100024c9e:	74 1f	je	0x100024cbf
100024ca0:	48 8d bb 90 00 00 00	leaq	144(%rbx), %rdi
100024ca7:	4c 89 fe	movq	%r15, %rsi
100024caa:	e8 84 a6 fe ff	callq	0x10000f333
100024caf:	84 c0	testb	%al, %al
100024cb1:	75 10	jne	0x100024cc3
100024cb3:	48 8b 5b 18	movq	24(%rbx), %rbx
100024cb7:	eb e2	jmp	0x100024c9b
100024cb9:	41 be 9f 00 00 00	movl	$159, %r14d
100024cbf:	31 db	xorl	%ebx, %ebx
100024cc1:	eb 03	jmp	0x100024cc6
100024cc3:	45 31 f6	xorl	%r14d, %r14d
100024cc6:	48 89 d8	movq	%rbx, %rax
100024cc9:	44 89 f2	movl	%r14d, %edx
100024ccc:	48 83 c4 08	addq	$8, %rsp
100024cd0:	5b	popq	%rbx
100024cd1:	41 5e	popq	%r14
100024cd3:	41 5f	popq	%r15
100024cd5:	5d	popq	%rbp
100024cd6:	c3	retq
100024cd7:	55	pushq	%rbp
100024cd8:	48 89 e5	movq	%rsp, %rbp
100024cdb:	41 57	pushq	%r15
100024cdd:	41 56	pushq	%r14
100024cdf:	41 55	pushq	%r13
100024ce1:	41 54	pushq	%r12
100024ce3:	53	pushq	%rbx
100024ce4:	48 83 ec 48	subq	$72, %rsp
100024ce8:	4c 89 4d c0	movq	%r9, -64(%rbp)
100024cec:	4c 89 45 a8	movq	%r8, -88(%rbp)
100024cf0:	49 89 cd	movq	%rcx, %r13
100024cf3:	49 89 d4	movq	%rdx, %r12
100024cf6:	49 89 f6	movq	%rsi, %r14
100024cf9:	48 8d 5d 90	leaq	-112(%rbp), %rbx
100024cfd:	48 89 3b	movq	%rdi, (%rbx)
100024d00:	8b 76 14	movl	20(%rsi), %esi
100024d03:	48 89 df	movq	%rbx, %rdi
100024d06:	ba 01 00 00 00	movl	$1, %edx
100024d0b:	e8 7d 0e 00 00	callq	0x100025b8d
100024d10:	48 8b 1b	movq	(%rbx), %rbx
100024d13:	48 85 c0	testq	%rax, %rax
100024d16:	0f 84 dc 00 00 00	je	0x100024df8
100024d1c:	49 89 c7	movq	%rax, %r15
100024d1f:	48 8b 83 b0 03 00 00	movq	944(%rbx), %rax
100024d26:	48 85 c0	testq	%rax, %rax
100024d29:	48 0f 44 c3	cmoveq	%rbx, %rax
100024d2d:	48 89 45 c8	movq	%rax, -56(%rbp)
100024d31:	41 f6 c5 02	testb	$2, %r13b
100024d35:	4c 89 6d 98	movq	%r13, -104(%rbp)
100024d39:	0f 85 d6 00 00 00	jne	0x100024e15
100024d3f:	41 f6 c5 10	testb	$16, %r13b
100024d43:	4c 89 75 a0	movq	%r14, -96(%rbp)
100024d47:	0f 85 16 01 00 00	jne	0x100024e63
100024d4d:	48 89 5d b0	movq	%rbx, -80(%rbp)
100024d51:	41 f6 87 65 01 00 00 02	testb	$2, 357(%r15)
100024d59:	0f 85 88 01 00 00	jne	0x100024ee7
100024d5f:	48 8b 7d c8	movq	-56(%rbp), %rdi
100024d63:	4c 89 e6	movq	%r12, %rsi
100024d66:	31 d2	xorl	%edx, %edx
100024d68:	e8 98 fe ff ff	callq	0x100024c05
100024d6d:	49 89 c0	movq	%rax, %r8
100024d70:	85 d2	testl	%edx, %edx
100024d72:	0f 95 c0	setne	%al
100024d75:	85 d2	testl	%edx, %edx
100024d77:	0f 84 97 01 00 00	je	0x100024f14
100024d7d:	44 20 e8	andb	%r13b, %al
100024d80:	0f b6 c0	movzbl	%al, %eax
100024d83:	44 8d 2c 00	leal	(%rax,%rax), %r13d
100024d87:	41 ff c5	incl	%r13d
100024d8a:	48 8b 5d b0	movq	-80(%rbp), %rbx
100024d8e:	41 83 fd 03	cmpl	$3, %r13d
100024d92:	4d 89 fe	movq	%r15, %r14
100024d95:	0f 85 c9 02 00 00	jne	0x100025064
100024d9b:	48 8d 35 21 9b 02 00	leaq	170785(%rip), %rsi ## literal pool for: "mach-register"
100024da2:	41 bd 01 00 00 00	movl	$1, %r13d
100024da8:	48 8b 7d a0	movq	-96(%rbp), %rdi
100024dac:	ba 01 00 00 00	movl	$1, %edx
100024db1:	4c 89 e1	movq	%r12, %rcx
100024db4:	e8 a7 cf fe ff	callq	0x100011d60
100024db9:	84 c0	testb	%al, %al
100024dbb:	0f 84 a3 02 00 00	je	0x100025064
100024dc1:	41 0f b7 86 1c 01 00 00	movzwl	284(%r14), %eax
100024dc9:	41 bd 0c 00 00 00	movl	$12, %r13d
100024dcf:	3d fe 7f 00 00	cmpl	$32766, %eax
100024dd4:	0f 84 8a 02 00 00	je	0x100025064
100024dda:	4c 89 75 d0	movq	%r14, -48(%rbp)
100024dde:	48 8b 5d a8	movq	-88(%rbp), %rbx
100024de2:	48 85 db	testq	%rbx, %rbx
100024de5:	0f 84 0c 03 00 00	je	0x1000250f7
100024deb:	48 89 df	movq	%rbx, %rdi
100024dee:	e8 0f d3 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100024df3:	e9 1f 03 00 00	jmp	0x100025117
100024df8:	4c 89 ea	movq	%r13, %rdx
100024dfb:	41 bd 71 00 00 00	movl	$113, %r13d
100024e01:	48 89 df	movq	%rbx, %rdi
100024e04:	4c 89 e6	movq	%r12, %rsi
100024e07:	4c 89 f1	movq	%r14, %rcx
100024e0a:	41 b8 71 00 00 00	movl	$113, %r8d
100024e10:	e9 c8 00 00 00	jmp	0x100024edd
100024e15:	48 8d 35 a7 9a 02 00	leaq	170663(%rip), %rsi ## literal pool for: "mach-register"
100024e1c:	4c 89 f7	movq	%r14, %rdi
100024e1f:	ba 02 00 00 00	movl	$2, %edx
100024e24:	4c 89 e1	movq	%r12, %rcx
100024e27:	e8 34 cf fe ff	callq	0x100011d60
100024e2c:	84 c0	testb	%al, %al
100024e2e:	74 7b	je	0x100024eab
100024e30:	48 8b 7d c8	movq	-56(%rbp), %rdi
100024e34:	4c 89 fe	movq	%r15, %rsi
100024e37:	4c 89 e2	movq	%r12, %rdx
100024e3a:	48 8b 4d a8	movq	-88(%rbp), %rcx
100024e3e:	4c 8b 45 c0	movq	-64(%rbp), %r8
100024e42:	e8 81 8b 00 00	callq	0x10002d9c8
100024e47:	41 89 c5	movl	%eax, %r13d
100024e4a:	48 89 df	movq	%rbx, %rdi
100024e4d:	4c 89 fe	movq	%r15, %rsi
100024e50:	e8 bd 68 00 00	callq	0x10002b712
100024e55:	45 85 ed	testl	%r13d, %r13d
100024e58:	0f 85 18 02 00 00	jne	0x100025076
100024e5e:	e9 23 03 00 00	jmp	0x100025186
100024e63:	41 bd 2d 00 00 00	movl	$45, %r13d
100024e69:	41 83 bf 18 01 00 00 00	cmpl	$0, 280(%r15)
100024e71:	4d 89 fe	movq	%r15, %r14
100024e74:	0f 85 ea 01 00 00	jne	0x100025064
100024e7a:	4c 89 75 d0	movq	%r14, -48(%rbp)
100024e7e:	4d 8b be a0 00 00 00	movq	160(%r14), %r15
100024e85:	4d 85 ff	testq	%r15, %r15
100024e88:	0f 84 c2 00 00 00	je	0x100024f50
100024e8e:	49 8d bf 90 00 00 00	leaq	144(%r15), %rdi
100024e95:	4c 89 e6	movq	%r12, %rsi
100024e98:	e8 8f cf 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100024e9d:	85 c0	testl	%eax, %eax
100024e9f:	0f 84 be 00 00 00	je	0x100024f63
100024ea5:	4d 8b 7f 08	movq	8(%r15), %r15
100024ea9:	eb da	jmp	0x100024e85
100024eab:	48 8d 0d a9 99 02 00	leaq	170409(%rip), %rcx ## literal pool for: "pid-local registration"
100024eb2:	41 bd 01 00 00 00	movl	$1, %r13d
100024eb8:	48 89 df	movq	%rbx, %rdi
100024ebb:	4c 89 f6	movq	%r14, %rsi
100024ebe:	ba 01 00 00 00	movl	$1, %edx
100024ec3:	31 c0	xorl	%eax, %eax
100024ec5:	e8 aa ee ff ff	callq	0x100023d74
100024eca:	48 89 df	movq	%rbx, %rdi
100024ecd:	4c 89 e6	movq	%r12, %rsi
100024ed0:	48 8b 55 98	movq	-104(%rbp), %rdx
100024ed4:	4c 89 f1	movq	%r14, %rcx
100024ed7:	41 b8 01 00 00 00	movl	$1, %r8d
100024edd:	e8 31 8a 00 00	callq	0x10002d913
100024ee2:	e9 b8 02 00 00	jmp	0x10002519f
100024ee7:	49 8b 9f a8 00 00 00	movq	168(%r15), %rbx
100024eee:	48 85 db	testq	%rbx, %rbx
100024ef1:	0f 84 68 fe ff ff	je	0x100024d5f
100024ef7:	48 8d bb 90 00 00 00	leaq	144(%rbx), %rdi
100024efe:	4c 89 e6	movq	%r12, %rsi
100024f01:	e8 26 cf 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100024f06:	85 c0	testl	%eax, %eax
100024f08:	0f 84 9f 00 00 00	je	0x100024fad
100024f0e:	48 8b 5b 08	movq	8(%rbx), %rbx
100024f12:	eb da	jmp	0x100024eee
100024f14:	49 83 78 40 00	cmpq	$0, 64(%r8)
100024f19:	48 8b 5d b0	movq	-80(%rbp), %rbx
100024f1d:	0f 84 d4 00 00 00	je	0x100024ff7
100024f23:	4c 89 f9	movq	%r15, %rcx
100024f26:	48 81 c1 18 05 00 00	addq	$1304, %rcx
100024f2d:	49 81 c0 90 00 00 00	addq	$144, %r8
100024f34:	48 8d 15 96 99 02 00	leaq	170390(%rip), %rdx ## literal pool for: "Service \"%s\" tried to register for aliased endpoint: %s"
100024f3b:	48 8b 7d c8	movq	-56(%rbp), %rdi
100024f3f:	be 03 00 00 00	movl	$3, %esi
100024f44:	31 c0	xorl	%eax, %eax
100024f46:	e8 de b4 ff ff	callq	0x100020429
100024f4b:	e9 0b 01 00 00	jmp	0x10002505b
100024f50:	48 8b 7d c8	movq	-56(%rbp), %rdi
100024f54:	48 8b 75 d0	movq	-48(%rbp), %rsi
100024f58:	4c 89 e2	movq	%r12, %rdx
100024f5b:	e8 11 6c 00 00	callq	0x10002bb71
100024f60:	49 89 c7	movq	%rax, %r15
100024f63:	4c 89 ff	movq	%r15, %rdi
100024f66:	e8 a6 5d 01 00	callq	0x10003ad11
100024f6b:	41 89 c5	movl	%eax, %r13d
100024f6e:	85 c0	testl	%eax, %eax
100024f70:	4c 8b 75 d0	movq	-48(%rbp), %r14
100024f74:	0f 85 ea 00 00 00	jne	0x100025064
100024f7a:	48 89 5d b0	movq	%rbx, -80(%rbp)
100024f7e:	41 80 4f 50 04	orb	$4, 80(%r15)
100024f83:	48 8b 5d c0	movq	-64(%rbp), %rbx
100024f87:	48 85 db	testq	%rbx, %rbx
100024f8a:	0f 84 e3 01 00 00	je	0x100025173
100024f90:	4c 89 ff	movq	%r15, %rdi
100024f93:	be 04 00 00 00	movl	$4, %esi
100024f98:	e8 dd 64 01 00	callq	0x10003b47a
100024f9d:	48 89 c7	movq	%rax, %rdi
100024fa0:	e8 5d d1 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100024fa5:	48 89 03	movq	%rax, (%rbx)
100024fa8:	e9 c6 01 00 00	jmp	0x100025173
100024fad:	48 89 df	movq	%rbx, %rdi
100024fb0:	e8 5c 5d 01 00	callq	0x10003ad11
100024fb5:	85 c0	testl	%eax, %eax
100024fb7:	0f 85 a2 fd ff ff	jne	0x100024d5f
100024fbd:	4c 89 7d d0	movq	%r15, -48(%rbp)
100024fc1:	41 80 8f 65 01 00 00 20	orb	$32, 357(%r15)
100024fc9:	80 4b 50 04	orb	$4, 80(%rbx)
100024fcd:	4c 8b 75 c0	movq	-64(%rbp), %r14
100024fd1:	4d 85 f6	testq	%r14, %r14
100024fd4:	0f 84 99 01 00 00	je	0x100025173
100024fda:	48 89 df	movq	%rbx, %rdi
100024fdd:	be 04 00 00 00	movl	$4, %esi
100024fe2:	e8 93 64 01 00	callq	0x10003b47a
100024fe7:	48 89 c7	movq	%rax, %rdi
100024fea:	e8 13 d1 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100024fef:	49 89 06	movq	%rax, (%r14)
100024ff2:	e9 7c 01 00 00	jmp	0x100025173
100024ff7:	41 0f ba e5 09	btl	$9, %r13d
100024ffc:	72 19	jb	0x100025017
100024ffe:	41 0f b6 40 50	movzbl	80(%r8), %eax
100025003:	c1 e8 07	shrl	$7, %eax
100025006:	44 89 e9	movl	%r13d, %ecx
100025009:	c1 e9 08	shrl	$8, %ecx
10002500c:	83 e1 01	andl	$1, %ecx
10002500f:	39 c1	cmpl	%eax, %ecx
100025011:	0f 85 b0 00 00 00	jne	0x1000250c7
100025017:	4c 89 c7	movq	%r8, %rdi
10002501a:	4c 89 45 b8	movq	%r8, -72(%rbp)
10002501e:	e8 a9 66 01 00	callq	0x10003b6cc
100025023:	4c 39 f8	cmpq	%r15, %rax
100025026:	74 68	je	0x100025090
100025028:	ba 18 05 00 00	movl	$1304, %edx
10002502d:	4c 89 f9	movq	%r15, %rcx
100025030:	48 01 d1	addq	%rdx, %rcx
100025033:	4c 8b 45 b8	movq	-72(%rbp), %r8
100025037:	49 81 c0 90 00 00 00	addq	$144, %r8
10002503e:	48 01 d0	addq	%rdx, %rax
100025041:	48 8d 15 10 99 02 00	leaq	170256(%rip), %rdx ## literal pool for: "Service \"%s\" tried to register for endpoint \"%s\" already registered by owner: %s"
100025048:	48 8b 7d c8	movq	-56(%rbp), %rdi
10002504c:	be 03 00 00 00	movl	$3, %esi
100025051:	49 89 c1	movq	%rax, %r9
100025054:	31 c0	xorl	%eax, %eax
100025056:	e8 ce b3 ff ff	callq	0x100020429
10002505b:	41 bd 01 00 00 00	movl	$1, %r13d
100025061:	4d 89 fe	movq	%r15, %r14
100025064:	48 89 df	movq	%rbx, %rdi
100025067:	4c 89 f6	movq	%r14, %rsi
10002506a:	e8 a3 66 00 00	callq	0x10002b712
10002506f:	4d 89 f7	movq	%r14, %r15
100025072:	4c 8b 75 a0	movq	-96(%rbp), %r14
100025076:	48 89 df	movq	%rbx, %rdi
100025079:	4c 89 e6	movq	%r12, %rsi
10002507c:	48 8b 55 98	movq	-104(%rbp), %rdx
100025080:	4c 89 f1	movq	%r14, %rcx
100025083:	45 89 e8	movl	%r13d, %r8d
100025086:	e8 88 88 00 00	callq	0x10002d913
10002508b:	e9 04 01 00 00	jmp	0x100025194
100025090:	48 83 7d a8 00	cmpq	$0, -88(%rbp)
100025095:	0f 84 16 01 00 00	je	0x1000251b1
10002509b:	4c 89 f9	movq	%r15, %rcx
10002509e:	48 81 c1 18 05 00 00	addq	$1304, %rcx
1000250a5:	48 8d 15 fd 98 02 00	leaq	170237(%rip), %rdx ## literal pool for: "Service tried to register a port for an endpoint declared in its launchd.plist(5): service = %s, endpoint = %s"
1000250ac:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000250b0:	be 03 00 00 00	movl	$3, %esi
1000250b5:	4d 89 e0	movq	%r12, %r8
1000250b8:	31 c0	xorl	%eax, %eax
1000250ba:	e8 6a b3 ff ff	callq	0x100020429
1000250bf:	41 bd 38 00 00 00	movl	$56, %r13d
1000250c5:	eb 9a	jmp	0x100025061
1000250c7:	4c 89 f9	movq	%r15, %rcx
1000250ca:	48 81 c1 18 05 00 00	addq	$1304, %rcx
1000250d1:	49 81 c0 90 00 00 00	addq	$144, %r8
1000250d8:	48 8d 15 2a 98 02 00	leaq	170026(%rip), %rdx ## literal pool for: "Preventing \"%s\" from registering for %s due to non-launching property mismatch"
1000250df:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000250e3:	be 03 00 00 00	movl	$3, %esi
1000250e8:	31 c0	xorl	%eax, %eax
1000250ea:	e8 3a b3 ff ff	callq	0x100020429
1000250ef:	4d 89 fe	movq	%r15, %r14
1000250f2:	e9 a4 fc ff ff	jmp	0x100024d9b
1000250f7:	bf 12 00 00 00	movl	$18, %edi
1000250fc:	be 02 00 00 00	movl	$2, %esi
100025101:	31 d2	xorl	%edx, %edx
100025103:	e8 4a 4b fe ff	callq	0x100009c52
100025108:	89 c7	movl	%eax, %edi
10002510a:	be 11 00 00 00	movl	$17, %esi
10002510f:	e8 d0 cf 01 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
100025114:	48 89 c3	movq	%rax, %rbx
100025117:	4c 8b 75 d0	movq	-48(%rbp), %r14
10002511b:	48 8d 0d ed d4 ff ff	leaq	-11027(%rip), %rcx
100025122:	4c 89 f7	movq	%r14, %rdi
100025125:	4c 89 e6	movq	%r12, %rsi
100025128:	48 89 da	movq	%rbx, %rdx
10002512b:	4d 89 f0	movq	%r14, %r8
10002512e:	e8 a3 5b 01 00	callq	0x10003acd6
100025133:	49 89 c7	movq	%rax, %r15
100025136:	48 8b 45 c0	movq	-64(%rbp), %rax
10002513a:	48 85 c0	testq	%rax, %rax
10002513d:	74 05	je	0x100025144
10002513f:	48 89 18	movq	%rbx, (%rax)
100025142:	eb 08	jmp	0x10002514c
100025144:	48 89 df	movq	%rbx, %rdi
100025147:	e8 b0 cf 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002514c:	41 80 4f 50 04	orb	$4, 80(%r15)
100025151:	b9 01 00 00 00	movl	$1, %ecx
100025156:	48 8b 5d c8	movq	-56(%rbp), %rbx
10002515a:	48 89 df	movq	%rbx, %rdi
10002515d:	4c 89 f6	movq	%r14, %rsi
100025160:	4c 89 fa	movq	%r15, %rdx
100025163:	e8 7f d5 ff ff	callq	0x1000226e7
100025168:	48 89 df	movq	%rbx, %rdi
10002516b:	4c 89 fe	movq	%r15, %rsi
10002516e:	e8 41 79 00 00	callq	0x10002cab4
100025173:	48 8b 5d b0	movq	-80(%rbp), %rbx
100025177:	48 89 df	movq	%rbx, %rdi
10002517a:	4c 8b 7d d0	movq	-48(%rbp), %r15
10002517e:	4c 89 fe	movq	%r15, %rsi
100025181:	e8 8c 65 00 00	callq	0x10002b712
100025186:	48 89 df	movq	%rbx, %rdi
100025189:	4c 89 fe	movq	%r15, %rsi
10002518c:	e8 81 65 00 00	callq	0x10002b712
100025191:	45 31 ed	xorl	%r13d, %r13d
100025194:	48 89 df	movq	%rbx, %rdi
100025197:	4c 89 fe	movq	%r15, %rsi
10002519a:	e8 dd 66 00 00	callq	0x10002b87c
10002519f:	44 89 e8	movl	%r13d, %eax
1000251a2:	48 83 c4 48	addq	$72, %rsp
1000251a6:	5b	popq	%rbx
1000251a7:	41 5c	popq	%r12
1000251a9:	41 5d	popq	%r13
1000251ab:	41 5e	popq	%r14
1000251ad:	41 5f	popq	%r15
1000251af:	5d	popq	%rbp
1000251b0:	c3	retq
1000251b1:	48 8b 7d b8	movq	-72(%rbp), %rdi
1000251b5:	e8 57 5b 01 00	callq	0x10003ad11
1000251ba:	41 89 c5	movl	%eax, %r13d
1000251bd:	85 c0	testl	%eax, %eax
1000251bf:	0f 85 c9 fb ff ff	jne	0x100024d8e
1000251c5:	4c 8b 75 10	movq	16(%rbp), %r14
1000251c9:	4c 89 7d d0	movq	%r15, -48(%rbp)
1000251cd:	41 80 8f 65 01 00 00 20	orb	$32, 357(%r15)
1000251d5:	48 8b 7d b8	movq	-72(%rbp), %rdi
1000251d9:	80 4f 50 04	orb	$4, 80(%rdi)
1000251dd:	48 8b 5d c0	movq	-64(%rbp), %rbx
1000251e1:	48 85 db	testq	%rbx, %rbx
1000251e4:	74 19	je	0x1000251ff
1000251e6:	be 04 00 00 00	movl	$4, %esi
1000251eb:	e8 8a 62 01 00	callq	0x10003b47a
1000251f0:	48 89 c7	movq	%rax, %rdi
1000251f3:	e8 0a cf 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000251f8:	48 8b 7d b8	movq	-72(%rbp), %rdi
1000251fc:	48 89 03	movq	%rax, (%rbx)
1000251ff:	4d 85 f6	testq	%r14, %r14
100025202:	0f 84 6b ff ff ff	je	0x100025173
100025208:	8a 47 50	movb	80(%rdi), %al
10002520b:	c0 e8 07	shrb	$7, %al
10002520e:	41 88 06	movb	%al, (%r14)
100025211:	e9 5d ff ff ff	jmp	0x100025173
100025216:	55	pushq	%rbp
100025217:	48 89 e5	movq	%rsp, %rbp
10002521a:	89 f8	movl	%edi, %eax
10002521c:	83 ff 37	cmpl	$55, %edi
10002521f:	7f 10	jg	0x100025231
100025221:	83 f8 02	cmpl	$2, %eax
100025224:	7f 20	jg	0x100025246
100025226:	85 c0	testl	%eax, %eax
100025228:	74 5c	je	0x100025286
10002522a:	83 f8 01	cmpl	$1, %eax
10002522d:	74 36	je	0x100025265
10002522f:	eb 50	jmp	0x100025281
100025231:	3d 96 00 00 00	cmpl	$150, %eax
100025236:	7f 1f	jg	0x100025257
100025238:	83 f8 38	cmpl	$56, %eax
10002523b:	74 36	je	0x100025273
10002523d:	3d 91 00 00 00	cmpl	$145, %eax
100025242:	74 28	je	0x10002526c
100025244:	eb 3b	jmp	0x100025281
100025246:	83 f8 03	cmpl	$3, %eax
100025249:	74 21	je	0x10002526c
10002524b:	83 f8 25	cmpl	$37, %eax
10002524e:	75 31	jne	0x100025281
100025250:	b8 4f 04 00 00	movl	$1103, %eax
100025255:	eb 2f	jmp	0x100025286
100025257:	3d 97 00 00 00	cmpl	$151, %eax
10002525c:	74 1c	je	0x10002527a
10002525e:	3d 9f 00 00 00	cmpl	$159, %eax
100025263:	75 1c	jne	0x100025281
100025265:	b8 4c 04 00 00	movl	$1100, %eax
10002526a:	eb 1a	jmp	0x100025286
10002526c:	b8 4e 04 00 00	movl	$1102, %eax
100025271:	eb 13	jmp	0x100025286
100025273:	b8 4d 04 00 00	movl	$1101, %eax
100025278:	eb 0c	jmp	0x100025286
10002527a:	b8 97 00 00 00	movl	$151, %eax
10002527f:	eb 05	jmp	0x100025286
100025281:	b8 51 04 00 00	movl	$1105, %eax
100025286:	5d	popq	%rbp
100025287:	c3	retq
100025288:	55	pushq	%rbp
100025289:	48 89 e5	movq	%rsp, %rbp
10002528c:	41 57	pushq	%r15
10002528e:	41 56	pushq	%r14
100025290:	41 55	pushq	%r13
100025292:	41 54	pushq	%r12
100025294:	53	pushq	%rbx
100025295:	48 83 ec 18	subq	$24, %rsp
100025299:	49 89 cc	movq	%rcx, %r12
10002529c:	41 89 d7	movl	%edx, %r15d
10002529f:	49 89 f5	movq	%rsi, %r13
1000252a2:	e8 7d 46 01 00	callq	0x100039924
1000252a7:	4c 8b 35 aa e2 03 00	movq	254634(%rip), %r14
1000252ae:	41 0f b7 8e 08 04 00 00	movzwl	1032(%r14), %ecx
1000252b6:	bb 4c 04 00 00	movl	$1100, %ebx
1000252bb:	f7 c1 03 02 00 00	testl	$515, %ecx
1000252c1:	0f 85 b4 00 00 00	jne	0x10002537b
1000252c7:	4d 8b 56 60	movq	96(%r14), %r10
1000252cb:	49 8b 4e 68	movq	104(%r14), %rcx
1000252cf:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000252d7:	4c 89 f7	movq	%r14, %rdi
1000252da:	be 03 00 00 00	movl	$3, %esi
1000252df:	31 d2	xorl	%edx, %edx
1000252e1:	48 89 45 d0	movq	%rax, -48(%rbp)
1000252e5:	49 89 c0	movq	%rax, %r8
1000252e8:	45 31 c9	xorl	%r9d, %r9d
1000252eb:	41 ff 52 68	callq	*104(%r10)
1000252ef:	85 c0	testl	%eax, %eax
1000252f1:	0f 85 84 00 00 00	jne	0x10002537b
1000252f7:	41 8d 47 01	leal	1(%r15), %eax
1000252fb:	bb 4e 04 00 00	movl	$1102, %ebx
100025300:	83 f8 02	cmpl	$2, %eax
100025303:	72 76	jb	0x10002537b
100025305:	4c 89 f7	movq	%r14, %rdi
100025308:	4c 89 eb	movq	%r13, %rbx
10002530b:	4c 89 ee	movq	%r13, %rsi
10002530e:	31 d2	xorl	%edx, %edx
100025310:	e8 f0 f8 ff ff	callq	0x100024c05
100025315:	85 d2	testl	%edx, %edx
100025317:	74 47	je	0x100025360
100025319:	4d 89 fd	movq	%r15, %r13
10002531c:	44 89 ef	movl	%r13d, %edi
10002531f:	e8 ba cd 01 00	callq	0x1000420de ## symbol stub for: _xpc_mach_send_create
100025324:	49 89 c7	movq	%rax, %r15
100025327:	41 83 e4 01	andl	$1, %r12d
10002532b:	4b 8d 0c 24	leaq	(%r12,%r12), %rcx
10002532f:	48 ff c1	incq	%rcx
100025332:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002533a:	48 89 da	movq	%rbx, %rdx
10002533d:	31 db	xorl	%ebx, %ebx
10002533f:	4c 89 f7	movq	%r14, %rdi
100025342:	48 8b 75 d0	movq	-48(%rbp), %rsi
100025346:	49 89 c0	movq	%rax, %r8
100025349:	45 31 c9	xorl	%r9d, %r9d
10002534c:	e8 86 f9 ff ff	callq	0x100024cd7
100025351:	85 c0	testl	%eax, %eax
100025353:	74 12	je	0x100025367
100025355:	89 c7	movl	%eax, %edi
100025357:	e8 ba fe ff ff	callq	0x100025216
10002535c:	89 c3	movl	%eax, %ebx
10002535e:	eb 13	jmp	0x100025373
100025360:	bb 4f 04 00 00	movl	$1103, %ebx
100025365:	eb 14	jmp	0x10002537b
100025367:	44 89 ef	movl	%r13d, %edi
10002536a:	e8 ca 49 fe ff	callq	0x100009d39
10002536f:	85 c0	testl	%eax, %eax
100025371:	75 19	jne	0x10002538c
100025373:	4c 89 ff	movq	%r15, %rdi
100025376:	e8 81 cd 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002537b:	89 d8	movl	%ebx, %eax
10002537d:	48 83 c4 18	addq	$24, %rsp
100025381:	5b	popq	%rbx
100025382:	41 5c	popq	%r12
100025384:	41 5d	popq	%r13
100025386:	41 5e	popq	%r14
100025388:	41 5f	popq	%r15
10002538a:	5d	popq	%rbp
10002538b:	c3	retq
10002538c:	48 63 f8	movslq	%eax, %rdi
10002538f:	e8 0e c4 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100025394:	eb dd	jmp	0x100025373
100025396:	55	pushq	%rbp
100025397:	48 89 e5	movq	%rsp, %rbp
10002539a:	41 57	pushq	%r15
10002539c:	41 56	pushq	%r14
10002539e:	41 55	pushq	%r13
1000253a0:	41 54	pushq	%r12
1000253a2:	53	pushq	%rbx
1000253a3:	50	pushq	%rax
1000253a4:	44 89 c3	movl	%r8d, %ebx
1000253a7:	49 89 ce	movq	%rcx, %r14
1000253aa:	49 89 d4	movq	%rdx, %r12
1000253ad:	4c 8b 6d 10	movq	16(%rbp), %r13
1000253b1:	e8 6e 45 01 00	callq	0x100039924
1000253b6:	49 89 c7	movq	%rax, %r15
1000253b9:	44 89 e8	movl	%r13d, %eax
1000253bc:	83 e0 08	andl	$8, %eax
1000253bf:	4c 89 e9	movq	%r13, %rcx
1000253c2:	48 c1 e9 03	shrq	$3, %rcx
1000253c6:	89 ca	movl	%ecx, %edx
1000253c8:	83 e2 04	andl	$4, %edx
1000253cb:	48 09 c2	orq	%rax, %rdx
1000253ce:	44 89 e8	movl	%r13d, %eax
1000253d1:	83 e0 01	andl	$1, %eax
1000253d4:	48 8d 04 42	leaq	(%rdx,%rax,2), %rax
1000253d8:	41 c1 ed 07	shrl	$7, %r13d
1000253dc:	41 83 e5 01	andl	$1, %r13d
1000253e0:	49 09 c5	orq	%rax, %r13
1000253e3:	89 c8	movl	%ecx, %eax
1000253e5:	83 e0 20	andl	$32, %eax
1000253e8:	4c 09 e8	orq	%r13, %rax
1000253eb:	83 e1 40	andl	$64, %ecx
1000253ee:	48 09 c1	orq	%rax, %rcx
1000253f1:	48 83 f1 01	xorq	$1, %rcx
1000253f5:	48 8b 3d 5c e1 03 00	movq	254300(%rip), %rdi
1000253fc:	48 63 d3	movslq	%ebx, %rdx
1000253ff:	4c 89 3c 24	movq	%r15, (%rsp)
100025403:	31 db	xorl	%ebx, %ebx
100025405:	4c 89 e6	movq	%r12, %rsi
100025408:	45 31 c0	xorl	%r8d, %r8d
10002540b:	45 31 c9	xorl	%r9d, %r9d
10002540e:	e8 56 00 00 00	callq	0x100025469
100025413:	85 d2	testl	%edx, %edx
100025415:	74 0b	je	0x100025422
100025417:	89 d7	movl	%edx, %edi
100025419:	e8 f8 fd ff ff	callq	0x100025216
10002541e:	89 c3	movl	%eax, %ebx
100025420:	eb 18	jmp	0x10002543a
100025422:	48 89 c7	movq	%rax, %rdi
100025425:	be 01 00 00 00	movl	$1, %esi
10002542a:	e8 4b 60 01 00	callq	0x10003b47a
10002542f:	48 89 c7	movq	%rax, %rdi
100025432:	e8 b3 cc 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100025437:	41 89 06	movl	%eax, (%r14)
10002543a:	48 8b 45 20	movq	32(%rbp), %rax
10002543e:	48 8b 55 18	movq	24(%rbp), %rdx
100025442:	48 85 d2	testq	%rdx, %rdx
100025445:	74 06	je	0x10002544d
100025447:	41 8b 4f 14	movl	20(%r15), %ecx
10002544b:	89 0a	movl	%ecx, (%rdx)
10002544d:	48 85 c0	testq	%rax, %rax
100025450:	74 06	je	0x100025458
100025452:	41 8b 4f 1c	movl	28(%r15), %ecx
100025456:	89 08	movl	%ecx, (%rax)
100025458:	89 d8	movl	%ebx, %eax
10002545a:	48 83 c4 08	addq	$8, %rsp
10002545e:	5b	popq	%rbx
10002545f:	41 5c	popq	%r12
100025461:	41 5d	popq	%r13
100025463:	41 5e	popq	%r14
100025465:	41 5f	popq	%r15
100025467:	5d	popq	%rbp
100025468:	c3	retq
100025469:	55	pushq	%rbp
10002546a:	48 89 e5	movq	%rsp, %rbp
10002546d:	41 57	pushq	%r15
10002546f:	41 56	pushq	%r14
100025471:	41 55	pushq	%r13
100025473:	41 54	pushq	%r12
100025475:	53	pushq	%rbx
100025476:	48 81 ec a8 00 00 00	subq	$168, %rsp
10002547d:	4c 89 8d 50 ff ff ff	movq	%r9, -176(%rbp)
100025484:	4c 89 85 68 ff ff ff	movq	%r8, -152(%rbp)
10002548b:	48 89 cb	movq	%rcx, %rbx
10002548e:	48 89 55 80	movq	%rdx, -128(%rbp)
100025492:	48 89 b5 70 ff ff ff	movq	%rsi, -144(%rbp)
100025499:	48 8b 05 88 2b 03 00	movq	207752(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000254a0:	48 8b 00	movq	(%rax), %rax
1000254a3:	48 89 45 d0	movq	%rax, -48(%rbp)
1000254a7:	4c 8b bf d0 03 00 00	movq	976(%rdi), %r15
1000254ae:	4d 85 ff	testq	%r15, %r15
1000254b1:	48 89 bd 58 ff ff ff	movq	%rdi, -168(%rbp)
1000254b8:	4c 0f 44 ff	cmoveq	%rdi, %r15
1000254bc:	0f ba e3 08	btl	$8, %ebx
1000254c0:	b8 00 00 00 00	movl	$0, %eax
1000254c5:	48 0f 43 45 10	cmovaeq	16(%rbp), %rax
1000254ca:	48 89 85 48 ff ff ff	movq	%rax, -184(%rbp)
1000254d1:	89 d8	movl	%ebx, %eax
1000254d3:	c1 e8 07	shrl	$7, %eax
1000254d6:	83 e0 01	andl	$1, %eax
1000254d9:	89 85 64 ff ff ff	movl	%eax, -156(%rbp)
1000254df:	48 89 8d 78 ff ff ff	movq	%rcx, -136(%rbp)
1000254e6:	49 8b 87 b0 03 00 00	movq	944(%r15), %rax
1000254ed:	48 85 c0	testq	%rax, %rax
1000254f0:	49 0f 44 c7	cmoveq	%r15, %rax
1000254f4:	48 89 45 88	movq	%rax, -120(%rbp)
1000254f8:	f6 c3 02	testb	$2, %bl
1000254fb:	0f 85 f9 00 00 00	jne	0x1000255fa
100025501:	f6 c3 10	testb	$16, %bl
100025504:	48 8b b5 70 ff ff ff	movq	-144(%rbp), %rsi
10002550b:	0f 85 5f 01 00 00	jne	0x100025670
100025511:	f6 c3 24	testb	$36, %bl
100025514:	0f 84 d2 01 00 00	je	0x1000256ec
10002551a:	48 8b 7d 88	movq	-120(%rbp), %rdi
10002551e:	48 8b 55 10	movq	16(%rbp), %rdx
100025522:	e8 de f6 ff ff	callq	0x100024c05
100025527:	49 89 c4	movq	%rax, %r12
10002552a:	85 d2	testl	%edx, %edx
10002552c:	0f 85 92 01 00 00	jne	0x1000256c4
100025532:	49 83 7c 24 40 00	cmpq	$0, 64(%r12)
100025538:	0f 85 a0 05 00 00	jne	0x100025ade
10002553e:	4c 89 e7	movq	%r12, %rdi
100025541:	e8 86 61 01 00	callq	0x10003b6cc
100025546:	48 89 c3	movq	%rax, %rbx
100025549:	f6 80 65 01 00 00 02	testb	$2, 357(%rax)
100025550:	0f 85 a4 05 00 00	jne	0x100025afa
100025556:	48 89 df	movq	%rbx, %rdi
100025559:	48 8b b5 68 ff ff ff	movq	-152(%rbp), %rsi
100025560:	e8 97 8c ff ff	callq	0x10001e1fc
100025565:	48 85 c0	testq	%rax, %rax
100025568:	4c 8b a5 70 ff ff ff	movq	-144(%rbp), %r12
10002556f:	75 5c	jne	0x1000255cd
100025571:	48 89 df	movq	%rbx, %rdi
100025574:	be 01 00 00 00	movl	$1, %esi
100025579:	e8 66 8c ff ff	callq	0x10001e1e4
10002557e:	84 c0	testb	%al, %al
100025580:	0f 85 a3 05 00 00	jne	0x100025b29
100025586:	48 8b 8d 78 ff ff ff	movq	-136(%rbp), %rcx
10002558d:	83 e1 20	andl	$32, %ecx
100025590:	48 c1 e9 05	shrq	$5, %rcx
100025594:	c7 45 90 00 00 00 00	movl	$0, -112(%rbp)
10002559b:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
1000255a2:	48 8d 45 90	leaq	-112(%rbp), %rax
1000255a6:	48 89 04 24	movq	%rax, (%rsp)
1000255aa:	48 89 de	movq	%rbx, %rsi
1000255ad:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
1000255b4:	4c 8b 85 50 ff ff ff	movq	-176(%rbp), %r8
1000255bb:	4c 8b 4d 10	movq	16(%rbp), %r9
1000255bf:	e8 4a c5 ff ff	callq	0x100021b0e
1000255c4:	48 85 c0	testq	%rax, %rax
1000255c7:	0f 84 28 04 00 00	je	0x1000259f5
1000255cd:	48 8b 98 a8 00 00 00	movq	168(%rax), %rbx
1000255d4:	48 85 db	testq	%rbx, %rbx
1000255d7:	0f 84 10 04 00 00	je	0x1000259ed
1000255dd:	48 8d bb 90 00 00 00	leaq	144(%rbx), %rdi
1000255e4:	4c 89 e6	movq	%r12, %rsi
1000255e7:	e8 47 9d fe ff	callq	0x10000f333
1000255ec:	84 c0	testb	%al, %al
1000255ee:	0f 85 b5 02 00 00	jne	0x1000258a9
1000255f4:	48 8b 5b 08	movq	8(%rbx), %rbx
1000255f8:	eb da	jmp	0x1000255d4
1000255fa:	4c 89 7d 90	movq	%r15, -112(%rbp)
1000255fe:	48 8b 7d 10	movq	16(%rbp), %rdi
100025602:	48 8d 35 46 92 02 00	leaq	168518(%rip), %rsi ## literal pool for: "mach-lookup"
100025609:	ba 02 00 00 00	movl	$2, %edx
10002560e:	48 8b 9d 70 ff ff ff	movq	-144(%rbp), %rbx
100025615:	48 89 d9	movq	%rbx, %rcx
100025618:	e8 43 c7 fe ff	callq	0x100011d60
10002561d:	84 c0	testb	%al, %al
10002561f:	0f 84 a7 00 00 00	je	0x1000256cc
100025625:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100025629:	48 8b 75 80	movq	-128(%rbp), %rsi
10002562d:	31 d2	xorl	%edx, %edx
10002562f:	e8 59 05 00 00	callq	0x100025b8d
100025634:	49 89 c4	movq	%rax, %r12
100025637:	48 85 c0	testq	%rax, %rax
10002563a:	0f 84 17 01 00 00	je	0x100025757
100025640:	4d 8b a4 24 98 00 00 00	movq	152(%r12), %r12
100025648:	4d 85 e4	testq	%r12, %r12
10002564b:	0f 84 86 00 00 00	je	0x1000256d7
100025651:	49 8d bc 24 90 00 00 00	leaq	144(%r12), %rdi
100025659:	48 89 de	movq	%rbx, %rsi
10002565c:	e8 d2 9c fe ff	callq	0x10000f333
100025661:	84 c0	testb	%al, %al
100025663:	0f 85 7c 03 00 00	jne	0x1000259e5
100025669:	4d 8b 64 24 08	movq	8(%r12), %r12
10002566e:	eb d8	jmp	0x100025648
100025670:	4c 89 ff	movq	%r15, %rdi
100025673:	48 8b 55 80	movq	-128(%rbp), %rdx
100025677:	48 8b 4d 10	movq	16(%rbp), %rcx
10002567b:	e8 e2 85 00 00	callq	0x10002dc62
100025680:	49 89 c4	movq	%rax, %r12
100025683:	83 fa 03	cmpl	$3, %edx
100025686:	0f 85 c3 00 00 00	jne	0x10002574f
10002568c:	48 8d 05 0d cb 03 00	leaq	248589(%rip), %rax
100025693:	49 39 47 60	cmpq	%rax, 96(%r15)
100025697:	0f 85 5d 01 00 00	jne	0x1000257fa
10002569d:	48 8b 3d ac de 03 00	movq	253612(%rip), %rdi
1000256a4:	48 85 ff	testq	%rdi, %rdi
1000256a7:	0f 84 4d 01 00 00	je	0x1000257fa
1000256ad:	48 8b b5 70 ff ff ff	movq	-144(%rbp), %rsi
1000256b4:	48 8b 55 80	movq	-128(%rbp), %rdx
1000256b8:	48 8b 4d 10	movq	16(%rbp), %rcx
1000256bc:	e8 a1 85 00 00	callq	0x10002dc62
1000256c1:	49 89 c4	movq	%rax, %r12
1000256c4:	41 89 d5	movl	%edx, %r13d
1000256c7:	e9 24 01 00 00	jmp	0x1000257f0
1000256cc:	41 bd 01 00 00 00	movl	$1, %r13d
1000256d2:	e9 16 01 00 00	jmp	0x1000257ed
1000256d7:	48 8b 7d 90	movq	-112(%rbp), %rdi
1000256db:	be 05 00 00 00	movl	$5, %esi
1000256e0:	48 8d 15 1b 94 02 00	leaq	168987(%rip), %rdx ## literal pool for: "could not find endpoint in pid namespace: pid = %d, name = %s"
1000256e7:	e9 ed 00 00 00	jmp	0x1000257d9
1000256ec:	48 8b 7d 88	movq	-120(%rbp), %rdi
1000256f0:	48 8b 95 48 ff ff ff	movq	-184(%rbp), %rdx
1000256f7:	e8 09 f5 ff ff	callq	0x100024c05
1000256fc:	49 89 c4	movq	%rax, %r12
1000256ff:	83 fa 03	cmpl	$3, %edx
100025702:	75 4b	jne	0x10002574f
100025704:	48 8d 05 2d cc 03 00	leaq	248877(%rip), %rax
10002570b:	48 8b 4d 88	movq	-120(%rbp), %rcx
10002570f:	48 39 41 60	cmpq	%rax, 96(%rcx)
100025713:	0f 85 e1 00 00 00	jne	0x1000257fa
100025719:	48 8b 7d 88	movq	-120(%rbp), %rdi
10002571d:	48 8b b5 70 ff ff ff	movq	-144(%rbp), %rsi
100025724:	e8 f8 ea ff ff	callq	0x100024221
100025729:	48 85 c0	testq	%rax, %rax
10002572c:	0f 84 c8 00 00 00	je	0x1000257fa
100025732:	48 8b 7d 88	movq	-120(%rbp), %rdi
100025736:	48 89 c6	movq	%rax, %rsi
100025739:	e8 b5 72 00 00	callq	0x10002c9f3
10002573e:	48 89 c3	movq	%rax, %rbx
100025741:	48 85 c0	testq	%rax, %rax
100025744:	0f 85 5f 01 00 00	jne	0x1000258a9
10002574a:	e9 ab 00 00 00	jmp	0x1000257fa
10002574f:	41 89 d5	movl	%edx, %r13d
100025752:	e9 46 01 00 00	jmp	0x10002589d
100025757:	48 8b 7d 80	movq	-128(%rbp), %rdi
10002575b:	e8 66 55 ff ff	callq	0x10001acc6
100025760:	48 85 c0	testq	%rax, %rax
100025763:	74 64	je	0x1000257c9
100025765:	49 89 c4	movq	%rax, %r12
100025768:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
10002576f:	48 8d 0d c2 cb 03 00	leaq	248770(%rip), %rcx
100025776:	48 39 48 60	cmpq	%rcx, 96(%rax)
10002577a:	0f 85 c0 fe ff ff	jne	0x100025640
100025780:	48 83 c0 48	addq	$72, %rax
100025784:	48 8b 00	movq	(%rax), %rax
100025787:	83 78 14 04	cmpl	$4, 20(%rax)
10002578b:	75 f7	jne	0x100025784
10002578d:	48 8b 3d c4 dd 03 00	movq	253380(%rip), %rdi
100025794:	8b 70 10	movl	16(%rax), %esi
100025797:	e8 ef 7e 00 00	callq	0x10002d68b
10002579c:	48 89 85 40 ff ff ff	movq	%rax, -192(%rbp)
1000257a3:	48 85 c0	testq	%rax, %rax
1000257a6:	74 18	je	0x1000257c0
1000257a8:	48 8d bd 40 ff ff ff	leaq	-192(%rbp), %rdi
1000257af:	48 8b 75 80	movq	-128(%rbp), %rsi
1000257b3:	ba 01 00 00 00	movl	$1, %edx
1000257b8:	e8 d0 03 00 00	callq	0x100025b8d
1000257bd:	49 89 c4	movq	%rax, %r12
1000257c0:	4d 85 e4	testq	%r12, %r12
1000257c3:	0f 85 77 fe ff ff	jne	0x100025640
1000257c9:	48 8b 7d 90	movq	-112(%rbp), %rdi
1000257cd:	be 05 00 00 00	movl	$5, %esi
1000257d2:	48 8d 15 eb 92 02 00	leaq	168683(%rip), %rdx ## literal pool for: "could not find active service for lookup: pid = %d, name = %s"
1000257d9:	48 8b 4d 80	movq	-128(%rbp), %rcx
1000257dd:	49 89 d8	movq	%rbx, %r8
1000257e0:	31 c0	xorl	%eax, %eax
1000257e2:	e8 42 ac ff ff	callq	0x100020429
1000257e7:	41 bd 03 00 00 00	movl	$3, %r13d
1000257ed:	45 31 e4	xorl	%r12d, %r12d
1000257f0:	41 83 fd 03	cmpl	$3, %r13d
1000257f4:	0f 85 a3 00 00 00	jne	0x10002589d
1000257fa:	48 8b 45 10	movq	16(%rbp), %rax
1000257fe:	8b 78 04	movl	4(%rax), %edi
100025801:	81 ff f4 01 00 00	cmpl	$500, %edi
100025807:	0f 82 84 00 00 00	jb	0x100025891
10002580d:	48 8d 05 14 ca 03 00	leaq	248340(%rip), %rax
100025814:	48 8b 4d 88	movq	-120(%rbp), %rcx
100025818:	48 39 41 60	cmpq	%rax, 96(%rcx)
10002581c:	48 8b 9d 78 ff ff ff	movq	-136(%rbp), %rbx
100025823:	0f 85 80 01 00 00	jne	0x1000259a9
100025829:	b8 ff ff ff ff	movl	$4294967295, %eax
10002582e:	48 8b 4d 88	movq	-120(%rbp), %rcx
100025832:	48 39 41 68	cmpq	%rax, 104(%rcx)
100025836:	0f 85 6d 01 00 00	jne	0x1000259a9
10002583c:	89 d8	movl	%ebx, %eax
10002583e:	83 e0 08	andl	$8, %eax
100025841:	48 85 c0	testq	%rax, %rax
100025844:	0f 85 5f 01 00 00	jne	0x1000259a9
10002584a:	c7 45 90 00 00 00 00	movl	$0, -112(%rbp)
100025851:	48 8b 75 10	movq	16(%rbp), %rsi
100025855:	ba 01 00 00 00	movl	$1, %edx
10002585a:	48 8d 4d 90	leaq	-112(%rbp), %rcx
10002585e:	e8 26 65 00 00	callq	0x10002bd89
100025863:	48 85 c0	testq	%rax, %rax
100025866:	0f 85 b2 02 00 00	jne	0x100025b1e
10002586c:	8b 5d 90	movl	-112(%rbp), %ebx
10002586f:	89 df	movl	%ebx, %edi
100025871:	e8 98 c8 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100025876:	4c 89 ff	movq	%r15, %rdi
100025879:	be 03 00 00 00	movl	$3, %esi
10002587e:	48 8d 15 93 91 02 00	leaq	168339(%rip), %rdx ## literal pool for: "Could not hack around <rdar://problem/5240036>. This login will very likely fail: %d: %s"
100025885:	89 d9	movl	%ebx, %ecx
100025887:	49 89 c0	movq	%rax, %r8
10002588a:	31 c0	xorl	%eax, %eax
10002588c:	e8 98 ab ff ff	callq	0x100020429
100025891:	48 8b 9d 78 ff ff ff	movq	-136(%rbp), %rbx
100025898:	e9 0c 01 00 00	jmp	0x1000259a9
10002589d:	4c 89 e3	movq	%r12, %rbx
1000258a0:	45 85 ed	testl	%r13d, %r13d
1000258a3:	0f 85 e0 01 00 00	jne	0x100025a89
1000258a9:	4c 8b 63 40	movq	64(%rbx), %r12
1000258ad:	4d 85 e4	testq	%r12, %r12
1000258b0:	4c 0f 44 e3	cmoveq	%rbx, %r12
1000258b4:	0f ba a5 78 ff ff ff 08	btl	$8, -136(%rbp)
1000258bc:	73 29	jae	0x1000258e7
1000258be:	48 8b 45 10	movq	16(%rbp), %rax
1000258c2:	8b 78 14	movl	20(%rax), %edi
1000258c5:	e8 fc 53 ff ff	callq	0x10001acc6
1000258ca:	48 89 c3	movq	%rax, %rbx
1000258cd:	4c 89 e7	movq	%r12, %rdi
1000258d0:	e8 f7 5d 01 00	callq	0x10003b6cc
1000258d5:	48 85 db	testq	%rbx, %rbx
1000258d8:	0f 84 57 01 00 00	je	0x100025a35
1000258de:	48 39 c3	cmpq	%rax, %rbx
1000258e1:	0f 85 4e 01 00 00	jne	0x100025a35
1000258e7:	48 8b 9d 78 ff ff ff	movq	-136(%rbp), %rbx
1000258ee:	f6 c3 08	testb	$8, %bl
1000258f1:	4c 8b ad 70 ff ff ff	movq	-144(%rbp), %r13
1000258f8:	74 15	je	0x10002590f
1000258fa:	48 8d 05 9f c8 03 00	leaq	247967(%rip), %rax
100025901:	48 8b 4d 88	movq	-120(%rbp), %rcx
100025905:	48 39 41 60	cmpq	%rax, 96(%rcx)
100025909:	0f 85 4c 01 00 00	jne	0x100025a5b
10002590f:	0f ba e3 09	btl	$9, %ebx
100025913:	0f 82 f1 00 00 00	jb	0x100025a0a
100025919:	41 0f b6 44 24 50	movzbl	80(%r12), %eax
10002591f:	c1 e8 07	shrl	$7, %eax
100025922:	39 85 64 ff ff ff	cmpl	%eax, -156(%rbp)
100025928:	0f 84 dc 00 00 00	je	0x100025a0a
10002592e:	0f 28 05 4b d9 01 00	movaps	121163(%rip), %xmm0
100025935:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100025939:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10002593d:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100025941:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100025945:	48 8b 7d 10	movq	16(%rbp), %rdi
100025949:	4d 89 fc	movq	%r15, %r12
10002594c:	48 8d 75 90	leaq	-112(%rbp), %rsi
100025950:	e8 08 ef 00 00	callq	0x10003485d
100025955:	44 8b 4d 90	movl	-112(%rbp), %r9d
100025959:	4c 8b 75 88	movq	-120(%rbp), %r14
10002595d:	4c 89 f7	movq	%r14, %rdi
100025960:	be 04 00 00 00	movl	$4, %esi
100025965:	48 8d 15 05 91 02 00	leaq	168197(%rip), %rdx ## literal pool for: "failed lookup due to non-launching property mismatch: name = %s, requestor = %s.%d"
10002596c:	4c 89 e9	movq	%r13, %rcx
10002596f:	49 89 c0	movq	%rax, %r8
100025972:	31 c0	xorl	%eax, %eax
100025974:	e8 b0 aa ff ff	callq	0x100020429
100025979:	48 8b 7d 10	movq	16(%rbp), %rdi
10002597d:	48 8d 75 90	leaq	-112(%rbp), %rsi
100025981:	e8 d7 ee 00 00	callq	0x10003485d
100025986:	44 8b 4d 90	movl	-112(%rbp), %r9d
10002598a:	4c 89 f7	movq	%r14, %rdi
10002598d:	be 05 00 00 00	movl	$5, %esi
100025992:	48 8d 15 d8 90 02 00	leaq	168152(%rip), %rdx ## literal pool for: "failed lookup due to non-launching property mismatch: name = %s, requestor = %s.%d"
100025999:	4c 89 e9	movq	%r13, %rcx
10002599c:	49 89 c0	movq	%rax, %r8
10002599f:	31 c0	xorl	%eax, %eax
1000259a1:	e8 83 aa ff ff	callq	0x100020429
1000259a6:	45 31 e4	xorl	%r12d, %r12d
1000259a9:	41 bd 03 00 00 00	movl	$3, %r13d
1000259af:	f6 c3 10	testb	$16, %bl
1000259b2:	0f 85 d1 00 00 00	jne	0x100025a89
1000259b8:	48 8b 85 58 ff ff ff	movq	-168(%rbp), %rax
1000259bf:	48 8d 0d 72 c9 03 00	leaq	248178(%rip), %rcx
1000259c6:	48 39 48 60	cmpq	%rcx, 96(%rax)
1000259ca:	0f 84 b9 00 00 00	je	0x100025a89
1000259d0:	4d 8b bf c8 00 00 00	movq	200(%r15), %r15
1000259d7:	4d 85 ff	testq	%r15, %r15
1000259da:	0f 85 06 fb ff ff	jne	0x1000254e6
1000259e0:	e9 a1 00 00 00	jmp	0x100025a86
1000259e5:	45 31 ed	xorl	%r13d, %r13d
1000259e8:	e9 03 fe ff ff	jmp	0x1000257f0
1000259ed:	45 31 e4	xorl	%r12d, %r12d
1000259f0:	e9 05 fe ff ff	jmp	0x1000257fa
1000259f5:	44 8b 6d 90	movl	-112(%rbp), %r13d
1000259f9:	45 85 ed	testl	%r13d, %r13d
1000259fc:	0f 85 eb fd ff ff	jne	0x1000257ed
100025a02:	41 bd 89 00 00 00	movl	$137, %r13d
100025a08:	eb 7c	jmp	0x100025a86
100025a0a:	4c 89 e7	movq	%r12, %rdi
100025a0d:	be 01 00 00 00	movl	$1, %esi
100025a12:	e8 63 5a 01 00	callq	0x10003b47a
100025a17:	45 31 ed	xorl	%r13d, %r13d
100025a1a:	48 85 c0	testq	%rax, %rax
100025a1d:	74 0e	je	0x100025a2d
100025a1f:	4d 85 e4	testq	%r12, %r12
100025a22:	0f 85 8e 00 00 00	jne	0x100025ab6
100025a28:	e8 a1 ac 01 00	callq	0x1000406ce
100025a2d:	41 bd 91 00 00 00	movl	$145, %r13d
100025a33:	eb 51	jmp	0x100025a86
100025a35:	c7 04 24 01 00 00 00	movl	$1, (%rsp)
100025a3c:	48 8b 7d 88	movq	-120(%rbp), %rdi
100025a40:	48 8b b5 70 ff ff ff	movq	-144(%rbp), %rsi
100025a47:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
100025a4e:	48 8b 4d 80	movq	-128(%rbp), %rcx
100025a52:	4c 8b 85 78 ff ff ff	movq	-136(%rbp), %r8
100025a59:	eb 1c	jmp	0x100025a77
100025a5b:	c7 04 24 01 00 00 00	movl	$1, (%rsp)
100025a62:	48 8b 7d 88	movq	-120(%rbp), %rdi
100025a66:	4c 89 ee	movq	%r13, %rsi
100025a69:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
100025a70:	48 8b 4d 80	movq	-128(%rbp), %rcx
100025a74:	49 89 d8	movq	%rbx, %r8
100025a77:	4c 8b 4d 10	movq	16(%rbp), %r9
100025a7b:	e8 17 80 00 00	callq	0x10002da97
100025a80:	41 bd 01 00 00 00	movl	$1, %r13d
100025a86:	45 31 e4	xorl	%r12d, %r12d
100025a89:	44 89 2c 24	movl	%r13d, (%rsp)
100025a8d:	48 8b bd 58 ff ff ff	movq	-168(%rbp), %rdi
100025a94:	48 8b b5 70 ff ff ff	movq	-144(%rbp), %rsi
100025a9b:	48 8b 95 68 ff ff ff	movq	-152(%rbp), %rdx
100025aa2:	48 8b 4d 80	movq	-128(%rbp), %rcx
100025aa6:	4c 8b 85 78 ff ff ff	movq	-136(%rbp), %r8
100025aad:	4c 8b 4d 10	movq	16(%rbp), %r9
100025ab1:	e8 e1 7f 00 00	callq	0x10002da97
100025ab6:	48 8b 05 6b 25 03 00	movq	206187(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100025abd:	48 8b 00	movq	(%rax), %rax
100025ac0:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100025ac4:	75 6e	jne	0x100025b34
100025ac6:	4c 89 e0	movq	%r12, %rax
100025ac9:	44 89 ea	movl	%r13d, %edx
100025acc:	48 81 c4 a8 00 00 00	addq	$168, %rsp
100025ad3:	5b	popq	%rbx
100025ad4:	41 5c	popq	%r12
100025ad6:	41 5d	popq	%r13
100025ad8:	41 5e	popq	%r14
100025ada:	41 5f	popq	%r15
100025adc:	5d	popq	%rbp
100025add:	c3	retq
100025ade:	48 8d 15 5b 90 02 00	leaq	168027(%rip), %rdx ## literal pool for: "Cannot look up instances for shared endpoints."
100025ae5:	45 31 e4	xorl	%r12d, %r12d
100025ae8:	48 8b 7d 88	movq	-120(%rbp), %rdi
100025aec:	be 03 00 00 00	movl	$3, %esi
100025af1:	31 c0	xorl	%eax, %eax
100025af3:	e8 31 a9 ff ff	callq	0x100020429
100025af8:	eb 19	jmp	0x100025b13
100025afa:	48 8d 15 6e 90 02 00	leaq	168046(%rip), %rdx ## literal pool for: "Cannot look up instances for sub-instances."
100025b01:	45 31 e4	xorl	%r12d, %r12d
100025b04:	48 89 df	movq	%rbx, %rdi
100025b07:	be 03 00 00 00	movl	$3, %esi
100025b0c:	31 c0	xorl	%eax, %eax
100025b0e:	e8 a7 04 ff ff	callq	0x100015fba
100025b13:	41 bd 89 00 00 00	movl	$137, %r13d
100025b19:	e9 6b ff ff ff	jmp	0x100025a89
100025b1e:	41 bd 97 00 00 00	movl	$151, %r13d
100025b24:	e9 5d ff ff ff	jmp	0x100025a86
100025b29:	41 bd 2d 00 00 00	movl	$45, %r13d
100025b2f:	e9 52 ff ff ff	jmp	0x100025a86
100025b34:	e8 39 bc 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100025b39:	55	pushq	%rbp
100025b3a:	48 89 e5	movq	%rsp, %rbp
100025b3d:	53	pushq	%rbx
100025b3e:	50	pushq	%rax
100025b3f:	48 8b 05 12 da 03 00	movq	252434(%rip), %rax
100025b46:	48 89 45 f0	movq	%rax, -16(%rbp)
100025b4a:	b8 2d c0 00 00	movl	$49197, %eax
100025b4f:	83 fe 05	cmpl	$5, %esi
100025b52:	75 32	jne	0x100025b86
100025b54:	4c 89 c3	movq	%r8, %rbx
100025b57:	e8 c8 3d 01 00	callq	0x100039924
100025b5c:	8b 70 14	movl	20(%rax), %esi
100025b5f:	48 8d 7d f0	leaq	-16(%rbp), %rdi
100025b63:	31 d2	xorl	%edx, %edx
100025b65:	e8 23 00 00 00	callq	0x100025b8d
100025b6a:	48 85 c0	testq	%rax, %rax
100025b6d:	74 09	je	0x100025b78
100025b6f:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
100025b76:	74 04	je	0x100025b7c
100025b78:	31 c0	xorl	%eax, %eax
100025b7a:	eb 05	jmp	0x100025b81
100025b7c:	b8 01 00 00 00	movl	$1, %eax
100025b81:	48 89 03	movq	%rax, (%rbx)
100025b84:	31 c0	xorl	%eax, %eax
100025b86:	48 83 c4 08	addq	$8, %rsp
100025b8a:	5b	popq	%rbx
100025b8b:	5d	popq	%rbp
100025b8c:	c3	retq
100025b8d:	55	pushq	%rbp
100025b8e:	48 89 e5	movq	%rsp, %rbp
100025b91:	41 57	pushq	%r15
100025b93:	41 56	pushq	%r14
100025b95:	41 54	pushq	%r12
100025b97:	53	pushq	%rbx
100025b98:	48 81 ec d0 00 00 00	subq	$208, %rsp
100025b9f:	41 89 d4	movl	%edx, %r12d
100025ba2:	41 89 f7	movl	%esi, %r15d
100025ba5:	49 89 fe	movq	%rdi, %r14
100025ba8:	48 8b 05 79 24 03 00	movq	205945(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100025baf:	48 8b 00	movq	(%rax), %rax
100025bb2:	48 89 45 d8	movq	%rax, -40(%rbp)
100025bb6:	e8 4c 81 00 00	callq	0x10002dd07
100025bbb:	48 89 c3	movq	%rax, %rbx
100025bbe:	48 85 c0	testq	%rax, %rax
100025bc1:	74 27	je	0x100025bea
100025bc3:	48 8b 05 5e 24 03 00	movq	205918(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100025bca:	48 8b 00	movq	(%rax), %rax
100025bcd:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100025bd1:	0f 85 ac 01 00 00	jne	0x100025d83
100025bd7:	48 89 d8	movq	%rbx, %rax
100025bda:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100025be1:	5b	popq	%rbx
100025be2:	41 5c	popq	%r12
100025be4:	41 5e	popq	%r14
100025be6:	41 5f	popq	%r15
100025be8:	5d	popq	%rbp
100025be9:	c3	retq
100025bea:	44 89 ff	movl	%r15d, %edi
100025bed:	e8 42 51 ff ff	callq	0x10001ad34
100025bf2:	48 85 c0	testq	%rax, %rax
100025bf5:	74 10	je	0x100025c07
100025bf7:	4c 89 f7	movq	%r14, %rdi
100025bfa:	44 89 fe	movl	%r15d, %esi
100025bfd:	e8 05 81 00 00	callq	0x10002dd07
100025c02:	48 89 c3	movq	%rax, %rbx
100025c05:	eb 02	jmp	0x100025c09
100025c07:	31 db	xorl	%ebx, %ebx
100025c09:	48 85 db	testq	%rbx, %rbx
100025c0c:	75 b5	jne	0x100025bc3
100025c0e:	45 84 e4	testb	%r12b, %r12b
100025c11:	74 b0	je	0x100025bc3
100025c13:	4d 8b 36	movq	(%r14), %r14
100025c16:	0f 28 05 63 d6 01 00	movaps	120419(%rip), %xmm0
100025c1d:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100025c21:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100025c25:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100025c29:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100025c2d:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100025c31:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100025c38:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100025c3f:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100025c46:	48 8d b5 10 ff ff ff	leaq	-240(%rbp), %rsi
100025c4d:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100025c51:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100025c55:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100025c59:	0f 29 06	movaps	%xmm0, (%rsi)
100025c5c:	44 89 ff	movl	%r15d, %edi
100025c5f:	e8 9a eb 00 00	callq	0x1000347fe
100025c64:	85 c0	testl	%eax, %eax
100025c66:	74 0c	je	0x100025c74
100025c68:	83 f8 03	cmpl	$3, %eax
100025c6b:	75 2d	jne	0x100025c9a
100025c6d:	31 db	xorl	%ebx, %ebx
100025c6f:	e9 4f ff ff ff	jmp	0x100025bc3
100025c74:	48 8d 8d 20 ff ff ff	leaq	-224(%rbp), %rcx
100025c7b:	48 8d 15 e9 8f 02 00	leaq	167913(%rip), %rdx ## literal pool for: "com.apple.xpc.launchd.unmanaged.%s.%d"
100025c82:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100025c89:	be 80 00 00 00	movl	$128, %esi
100025c8e:	45 89 f8	movl	%r15d, %r8d
100025c91:	31 c0	xorl	%eax, %eax
100025c93:	e8 6a c1 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100025c98:	eb 1f	jmp	0x100025cb9
100025c9a:	48 8d 15 9a 8f 02 00	leaq	167834(%rip), %rdx ## literal pool for: "com.apple.xpc.launchd.unmanaged.confusing.%d.%d"
100025ca1:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100025ca8:	be 80 00 00 00	movl	$128, %esi
100025cad:	89 c1	movl	%eax, %ecx
100025caf:	45 89 f8	movl	%r15d, %r8d
100025cb2:	31 c0	xorl	%eax, %eax
100025cb4:	e8 49 c1 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100025cb9:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100025cc0:	e8 91 c1 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100025cc5:	48 8d b8 18 05 00 00	leaq	1304(%rax), %rdi
100025ccc:	31 d2	xorl	%edx, %edx
100025cce:	48 ff c7	incq	%rdi
100025cd1:	0f 94 c2	sete	%dl
100025cd4:	48 89 d1	movq	%rdx, %rcx
100025cd7:	48 f7 d9	negq	%rcx
100025cda:	48 31 ca	xorq	%rcx, %rdx
100025cdd:	0f 95 c2	setne	%dl
100025ce0:	48 05 18 05 00 00	addq	$1304, %rax
100025ce6:	0f 82 9c 00 00 00	jb	0x100025d88
100025cec:	84 d2	testb	%dl, %dl
100025cee:	0f 85 94 00 00 00	jne	0x100025d88
100025cf4:	48 85 c9	testq	%rcx, %rcx
100025cf7:	0f 88 8b 00 00 00	js	0x100025d88
100025cfd:	e8 e3 77 fe ff	callq	0x10000d4e5
100025d02:	48 89 c3	movq	%rax, %rbx
100025d05:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100025d0c:	e8 45 c1 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100025d11:	31 d2	xorl	%edx, %edx
100025d13:	48 ff c0	incq	%rax
100025d16:	0f 94 c2	sete	%dl
100025d19:	48 89 d1	movq	%rdx, %rcx
100025d1c:	48 f7 d9	negq	%rcx
100025d1f:	48 31 ca	xorq	%rcx, %rdx
100025d22:	75 64	jne	0x100025d88
100025d24:	48 85 c9	testq	%rcx, %rcx
100025d27:	78 5f	js	0x100025d88
100025d29:	48 89 df	movq	%rbx, %rdi
100025d2c:	48 81 c7 18 05 00 00	addq	$1304, %rdi
100025d33:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
100025d3a:	48 89 c2	movq	%rax, %rdx
100025d3d:	e8 0e c1 01 00	callq	0x100041e50 ## symbol stub for: _strlcpy
100025d42:	4c 89 f7	movq	%r14, %rdi
100025d45:	be 07 00 00 00	movl	$7, %esi
100025d4a:	e8 7f cb fe ff	callq	0x1000128ce
100025d4f:	48 89 83 e8 00 00 00	movq	%rax, 232(%rbx)
100025d56:	44 89 bb 18 01 00 00	movl	%r15d, 280(%rbx)
100025d5d:	4c 89 f7	movq	%r14, %rdi
100025d60:	48 89 de	movq	%rbx, %rsi
100025d63:	e8 aa 59 00 00	callq	0x10002b712
100025d68:	48 8d 15 22 8f 02 00	leaq	167714(%rip), %rdx ## literal pool for: "added unmanaged active"
100025d6f:	48 89 df	movq	%rbx, %rdi
100025d72:	be 05 00 00 00	movl	$5, %esi
100025d77:	31 c0	xorl	%eax, %eax
100025d79:	e8 3c 02 ff ff	callq	0x100015fba
100025d7e:	e9 40 fe ff ff	jmp	0x100025bc3
100025d83:	e8 ea b9 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100025d88:	0f 0b	ud2
100025d8a:	55	pushq	%rbp
100025d8b:	48 89 e5	movq	%rsp, %rbp
100025d8e:	53	pushq	%rbx
100025d8f:	50	pushq	%rax
100025d90:	48 89 f3	movq	%rsi, %rbx
100025d93:	e8 8c 3b 01 00	callq	0x100039924
100025d98:	83 78 14 00	cmpl	$0, 20(%rax)
100025d9c:	75 0c	jne	0x100025daa
100025d9e:	83 78 0c 00	cmpl	$0, 12(%rax)
100025da2:	75 06	jne	0x100025daa
100025da4:	83 78 1c 00	cmpl	$0, 28(%rax)
100025da8:	74 22	je	0x100025dcc
100025daa:	48 8d 35 05 74 02 00	leaq	160773(%rip), %rsi ## literal pool for: "Dropping coalition notification from unknown source (%llu)"
100025db1:	bf 03 00 01 00	movl	$65539, %edi
100025db6:	48 89 da	movq	%rbx, %rdx
100025db9:	31 c0	xorl	%eax, %eax
100025dbb:	e8 08 f8 00 00	callq	0x1000355c8
100025dc0:	b8 05 00 00 00	movl	$5, %eax
100025dc5:	48 83 c4 08	addq	$8, %rsp
100025dc9:	5b	popq	%rbx
100025dca:	5d	popq	%rbp
100025dcb:	c3	retq
100025dcc:	48 89 df	movq	%rbx, %rdi
100025dcf:	e8 0c fb fe ff	callq	0x1000158e0
100025dd4:	e8 17 81 fe ff	callq	0x10000def0
100025dd9:	31 c0	xorl	%eax, %eax
100025ddb:	eb e8	jmp	0x100025dc5
100025ddd:	55	pushq	%rbp
100025dde:	48 89 e5	movq	%rsp, %rbp
100025de1:	48 83 ec 10	subq	$16, %rsp
100025de5:	48 8d 05 44 ca 03 00	leaq	248388(%rip), %rax
100025dec:	48 89 04 24	movq	%rax, (%rsp)
100025df0:	48 8d 3d a9 c3 03 00	leaq	246697(%rip), %rdi
100025df7:	31 f6	xorl	%esi, %esi
100025df9:	31 d2	xorl	%edx, %edx
100025dfb:	31 c9	xorl	%ecx, %ecx
100025dfd:	45 31 c0	xorl	%r8d, %r8d
100025e00:	45 31 c9	xorl	%r9d, %r9d
100025e03:	e8 90 00 00 00	callq	0x100025e98
100025e08:	48 89 05 49 d7 03 00	movq	%rax, 251721(%rip)
100025e0f:	80 88 0a 04 00 00 02	orb	$2, 1034(%rax)
100025e16:	48 8d 35 47 07 00 00	leaq	1863(%rip), %rsi
100025e1d:	bf 03 00 00 00	movl	$3, %edi
100025e22:	e8 33 3b 01 00	callq	0x10003995a
100025e27:	48 8d 35 ba 42 00 00	leaq	17082(%rip), %rsi
100025e2e:	bf 05 00 00 00	movl	$5, %edi
100025e33:	e8 22 3b 01 00	callq	0x10003995a
100025e38:	48 8d 35 e1 49 00 00	leaq	18913(%rip), %rsi
100025e3f:	bf 07 00 00 00	movl	$7, %edi
100025e44:	e8 11 3b 01 00	callq	0x10003995a
100025e49:	48 8d 3d f8 8c 01 00	leaq	101624(%rip), %rdi
100025e50:	be 30 08 00 00	movl	$2096, %esi
100025e55:	e8 49 3c 01 00	callq	0x100039aa3
100025e5a:	48 8d 3d 54 8d 01 00	leaq	101716(%rip), %rdi
100025e61:	be 2c 00 00 00	movl	$44, %esi
100025e66:	e8 38 3c 01 00	callq	0x100039aa3
100025e6b:	e8 ce bc 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
100025e70:	48 8d 0d f9 c8 03 00	leaq	248057(%rip), %rcx
100025e77:	8b 11	movl	(%rcx), %edx
100025e79:	89 c7	movl	%eax, %edi
100025e7b:	be 16 00 00 00	movl	$22, %esi
100025e80:	e8 6b bc 01 00	callq	0x100041af0 ## symbol stub for: _host_set_special_port
100025e85:	85 c0	testl	%eax, %eax
100025e87:	75 06	jne	0x100025e8f
100025e89:	48 83 c4 10	addq	$16, %rsp
100025e8d:	5d	popq	%rbp
100025e8e:	c3	retq
100025e8f:	89 c7	movl	%eax, %edi
100025e91:	e8 4a a8 01 00	callq	0x1000406e0
100025e96:	eb f1	jmp	0x100025e89
100025e98:	55	pushq	%rbp
100025e99:	48 89 e5	movq	%rsp, %rbp
100025e9c:	41 57	pushq	%r15
100025e9e:	41 56	pushq	%r14
100025ea0:	41 55	pushq	%r13
100025ea2:	41 54	pushq	%r12
100025ea4:	53	pushq	%rbx
100025ea5:	48 81 ec e8 01 00 00	subq	$488, %rsp
100025eac:	4c 89 8d 28 fe ff ff	movq	%r9, -472(%rbp)
100025eb3:	45 89 c5	movl	%r8d, %r13d
100025eb6:	48 89 8d 18 fe ff ff	movq	%rcx, -488(%rbp)
100025ebd:	48 89 d3	movq	%rdx, %rbx
100025ec0:	49 89 f4	movq	%rsi, %r12
100025ec3:	49 89 ff	movq	%rdi, %r15
100025ec6:	48 8b 05 5b 21 03 00	movq	205147(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100025ecd:	48 8b 00	movq	(%rax), %rax
100025ed0:	48 89 45 d0	movq	%rax, -48(%rbp)
100025ed4:	48 8d 05 5d c4 03 00	leaq	246877(%rip), %rax
100025edb:	48 39 c7	cmpq	%rax, %rdi
100025ede:	75 09	jne	0x100025ee9
100025ee0:	4d 85 e4	testq	%r12, %r12
100025ee3:	0f 84 5f 06 00 00	je	0x100026548
100025ee9:	49 8b 7f 78	movq	120(%r15), %rdi
100025eed:	e8 64 bf 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100025ef2:	49 89 c6	movq	%rax, %r14
100025ef5:	0f 57 c0	xorps	%xmm0, %xmm0
100025ef8:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100025efc:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100025f00:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100025f04:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100025f08:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100025f0c:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100025f13:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100025f1a:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100025f21:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100025f2b:	48 89 85 3d ff ff ff	movq	%rax, -195(%rbp)
100025f32:	0f 28 05 47 d3 01 00	movaps	119623(%rip), %xmm0
100025f39:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
100025f40:	48 85 db	testq	%rbx, %rbx
100025f43:	74 2e	je	0x100025f73
100025f45:	48 8d 15 c7 72 02 00	leaq	160455(%rip), %rdx ## literal pool for: ".%s"
100025f4c:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
100025f53:	be 80 00 00 00	movl	$128, %esi
100025f58:	48 89 d9	movq	%rbx, %rcx
100025f5b:	31 c0	xorl	%eax, %eax
100025f5d:	e8 a0 be 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100025f62:	48 89 df	movq	%rbx, %rdi
100025f65:	e8 ec be 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100025f6a:	49 01 c6	addq	%rax, %r14
100025f6d:	49 83 c6 16	addq	$22, %r14
100025f71:	eb 14	jmp	0x100025f87
100025f73:	49 83 c6 15	addq	$21, %r14
100025f77:	48 8d 05 22 c2 03 00	leaq	246306(%rip), %rax
100025f7e:	49 39 c7	cmpq	%rax, %r15
100025f81:	0f 84 1f 01 00 00	je	0x1000260a6
100025f87:	48 8d 15 89 72 02 00	leaq	160393(%rip), %rdx ## literal pool for: ".%lu"
100025f8e:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
100025f95:	be 15 00 00 00	movl	$21, %esi
100025f9a:	4c 89 e1	movq	%r12, %rcx
100025f9d:	31 c0	xorl	%eax, %eax
100025f9f:	e8 5e be 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100025fa4:	4c 89 f7	movq	%r14, %rdi
100025fa7:	e8 32 cd fe ff	callq	0x100012cde
100025fac:	48 89 c3	movq	%rax, %rbx
100025faf:	4c 89 78 60	movq	%r15, 96(%rax)
100025fb3:	4c 89 60 68	movq	%r12, 104(%rax)
100025fb7:	48 8b 85 28 fe ff ff	movq	-472(%rbp), %rax
100025fbe:	48 89 83 c8 00 00 00	movq	%rax, 200(%rbx)
100025fc5:	48 8d bb 10 04 00 00	leaq	1040(%rbx), %rdi
100025fcc:	49 8b 4f 78	movq	120(%r15), %rcx
100025fd0:	48 8d 15 45 72 02 00	leaq	160325(%rip), %rdx ## literal pool for: "%s%s%s"
100025fd7:	4c 8d 85 50 ff ff ff	leaq	-176(%rbp), %r8
100025fde:	4c 8d 8d 30 ff ff ff	leaq	-208(%rbp), %r9
100025fe5:	48 89 bd 20 fe ff ff	movq	%rdi, -480(%rbp)
100025fec:	4c 89 f6	movq	%r14, %rsi
100025fef:	31 c0	xorl	%eax, %eax
100025ff1:	e8 0c be 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100025ff6:	4c 8b 75 10	movq	16(%rbp), %r14
100025ffa:	41 0f 10 06	movups	(%r14), %xmm0
100025ffe:	41 0f 10 4e 10	movups	16(%r14), %xmm1
100026003:	0f 11 83 f8 00 00 00	movups	%xmm0, 248(%rbx)
10002600a:	0f 11 8b 08 01 00 00	movups	%xmm1, 264(%rbx)
100026011:	48 89 df	movq	%rbx, %rdi
100026014:	e8 c0 4c 00 00	callq	0x10002acd9
100026019:	48 8d bb e8 01 00 00	leaq	488(%rbx), %rdi
100026020:	31 f6	xorl	%esi, %esi
100026022:	ba 01 00 00 00	movl	$1, %edx
100026027:	e8 20 bc 01 00	callq	0x100041c4c ## symbol stub for: _os_map_str_init
10002602c:	45 85 ed	testl	%r13d, %r13d
10002602f:	74 07	je	0x100026038
100026031:	44 89 ab 90 00 00 00	movl	%r13d, 144(%rbx)
100026038:	41 8b 7e 14	movl	20(%r14), %edi
10002603c:	e8 85 4c ff ff	callq	0x10001acc6
100026041:	48 85 c0	testq	%rax, %rax
100026044:	74 09	je	0x10002604f
100026046:	4c 8b a8 e8 00 00 00	movq	232(%rax), %r13
10002604d:	eb 79	jmp	0x1000260c8
10002604f:	4d 63 76 18	movslq	24(%r14), %r14
100026053:	48 8d 3d 56 c2 03 00	leaq	246358(%rip), %rdi
10002605a:	4c 89 f6	movq	%r14, %rsi
10002605d:	e8 49 4f 00 00	callq	0x10002afab
100026062:	49 89 c5	movq	%rax, %r13
100026065:	48 85 c0	testq	%rax, %rax
100026068:	75 5e	jne	0x1000260c8
10002606a:	4c 8b 2d df d4 03 00	movq	251103(%rip), %r13
100026071:	4d 85 ed	testq	%r13, %r13
100026074:	74 3c	je	0x1000260b2
100026076:	44 89 f0	movl	%r14d, %eax
100026079:	be 00 00 00 80	movl	$2147483648, %esi
10002607e:	85 c0	testl	%eax, %eax
100026080:	78 0e	js	0x100026090
100026082:	49 8b 4d 68	movq	104(%r13), %rcx
100026086:	48 39 f1	cmpq	%rsi, %rcx
100026089:	73 05	jae	0x100026090
10002608b:	48 39 c1	cmpq	%rax, %rcx
10002608e:	74 38	je	0x1000260c8
100026090:	41 8b 45 34	movl	52(%r13), %eax
100026094:	48 8b 4d 10	movq	16(%rbp), %rcx
100026098:	3b 41 18	cmpl	24(%rcx), %eax
10002609b:	75 15	jne	0x1000260b2
10002609d:	48 81 c6 ff ff ff 7f	addq	$2147483647, %rsi
1000260a4:	eb 13	jmp	0x1000260b9
1000260a6:	c6 85 30 ff ff ff 00	movb	$0, -208(%rbp)
1000260ad:	e9 f2 fe ff ff	jmp	0x100025fa4
1000260b2:	48 8b 45 10	movq	16(%rbp), %rax
1000260b6:	8b 70 04	movl	4(%rax), %esi
1000260b9:	48 8d 3d 68 c1 03 00	leaq	246120(%rip), %rdi
1000260c0:	e8 e6 4e 00 00	callq	0x10002afab
1000260c5:	49 89 c5	movq	%rax, %r13
1000260c8:	4d 85 ed	testq	%r13, %r13
1000260cb:	4c 0f 44 ad 28 fe ff ff	cmoveq	-472(%rbp), %r13
1000260d3:	48 8d b5 f0 fe ff ff	leaq	-272(%rbp), %rsi
1000260da:	0f 28 05 9f d1 01 00	movaps	119199(%rip), %xmm0
1000260e1:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
1000260e5:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
1000260e9:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
1000260ed:	0f 29 06	movaps	%xmm0, (%rsi)
1000260f0:	48 8b 7d 10	movq	16(%rbp), %rdi
1000260f4:	e8 64 e7 00 00	callq	0x10003485d
1000260f9:	48 89 c7	movq	%rax, %rdi
1000260fc:	e8 e1 8e fe ff	callq	0x10000efe2
100026101:	48 89 83 18 01 00 00	movq	%rax, 280(%rbx)
100026108:	48 8b bd 18 fe ff ff	movq	-488(%rbp), %rdi
10002610f:	48 85 ff	testq	%rdi, %rdi
100026112:	74 34	je	0x100026148
100026114:	e8 c9 8e fe ff	callq	0x10000efe2
100026119:	48 89 83 a8 03 00 00	movq	%rax, 936(%rbx)
100026120:	45 31 f6	xorl	%r14d, %r14d
100026123:	48 8d 05 fe c0 03 00	leaq	246014(%rip), %rax
10002612a:	49 39 c7	cmpq	%rax, %r15
10002612d:	75 37	jne	0x100026166
10002612f:	b8 ff ff ff ff	movl	$4294967295, %eax
100026134:	49 39 c4	cmpq	%rax, %r12
100026137:	45 0f 45 f4	cmovnel	%r12d, %r14d
10002613b:	44 89 73 30	movl	%r14d, 48(%rbx)
10002613f:	80 4b 58 02	orb	$2, 88(%rbx)
100026143:	41 b6 01	movb	$1, %r14b
100026146:	eb 1e	jmp	0x100026166
100026148:	48 8d 05 d9 c0 03 00	leaq	245977(%rip), %rax
10002614f:	49 39 c7	cmpq	%rax, %r15
100026152:	0f 84 a4 03 00 00	je	0x1000264fc
100026158:	48 c7 83 a8 03 00 00 00 00 00 00	movq	$0, 936(%rbx)
100026163:	45 31 f6	xorl	%r14d, %r14d
100026166:	48 8b 43 60	movq	96(%rbx), %rax
10002616a:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
100026171:	74 28	je	0x10002619b
100026173:	b8 ff ff ff ff	movl	$4294967295, %eax
100026178:	49 39 c4	cmpq	%rax, %r12
10002617b:	74 1e	je	0x10002619b
10002617d:	44 89 e7	movl	%r12d, %edi
100026180:	e8 9d 6f 01 00	callq	0x10003d122
100026185:	48 89 83 98 03 00 00	movq	%rax, 920(%rbx)
10002618c:	44 89 e7	movl	%r12d, %edi
10002618f:	e8 9d 6f 01 00	callq	0x10003d131
100026194:	48 89 83 a0 03 00 00	movq	%rax, 928(%rbx)
10002619b:	48 8d 05 fe bf 03 00	leaq	245758(%rip), %rax
1000261a2:	49 39 c7	cmpq	%rax, %r15
1000261a5:	74 47	je	0x1000261ee
1000261a7:	45 84 f6	testb	%r14b, %r14b
1000261aa:	4c 8d 35 87 c1 03 00	leaq	246151(%rip), %r14
1000261b1:	74 49	je	0x1000261fc
1000261b3:	31 c0	xorl	%eax, %eax
1000261b5:	48 8d b5 30 fe ff ff	leaq	-464(%rbp), %rsi
1000261bc:	89 06	movl	%eax, (%rsi)
1000261be:	48 8d 95 f0 fd ff ff	leaq	-528(%rbp), %rdx
1000261c5:	89 02	movl	%eax, (%rdx)
1000261c7:	44 89 e7	movl	%r12d, %edi
1000261ca:	e8 26 ea 00 00	callq	0x100034bf5
1000261cf:	85 c0	testl	%eax, %eax
1000261d1:	0f 85 31 03 00 00	jne	0x100026508
1000261d7:	8b 85 f0 fd ff ff	movl	-528(%rbp), %eax
1000261dd:	89 83 d8 03 00 00	movl	%eax, 984(%rbx)
1000261e3:	8b 85 30 fe ff ff	movl	-464(%rbp), %eax
1000261e9:	89 43 34	movl	%eax, 52(%rbx)
1000261ec:	eb 0e	jmp	0x1000261fc
1000261ee:	c7 43 34 00 00 00 00	movl	$0, 52(%rbx)
1000261f5:	4c 8d 35 3c c1 03 00	leaq	246076(%rip), %r14
1000261fc:	4d 39 f7	cmpq	%r14, %r15
1000261ff:	75 29	jne	0x10002622a
100026201:	48 8b 45 10	movq	16(%rbp), %rax
100026205:	8b 40 04	movl	4(%rax), %eax
100026208:	85 c0	testl	%eax, %eax
10002620a:	75 0d	jne	0x100026219
10002620c:	48 8d 0d 8d bf 03 00	leaq	245645(%rip), %rcx
100026213:	49 39 4d 60	cmpq	%rcx, 96(%r13)
100026217:	74 07	je	0x100026220
100026219:	89 43 30	movl	%eax, 48(%rbx)
10002621c:	80 4b 58 02	orb	$2, 88(%rbx)
100026220:	48 8b 45 10	movq	16(%rbp), %rax
100026224:	8b 40 18	movl	24(%rax), %eax
100026227:	89 43 34	movl	%eax, 52(%rbx)
10002622a:	48 8b 4b 60	movq	96(%rbx), %rcx
10002622e:	8a 81 80 00 00 00	movb	128(%rcx), %al
100026234:	a8 04	testb	$4, %al
100026236:	74 33	je	0x10002626b
100026238:	48 8d 15 61 bf 03 00	leaq	245601(%rip), %rdx
10002623f:	48 39 d1	cmpq	%rdx, %rcx
100026242:	74 0b	je	0x10002624f
100026244:	a8 02	testb	$2, %al
100026246:	74 23	je	0x10002626b
100026248:	e8 53 5d 01 00	callq	0x10003bfa0
10002624d:	eb 05	jmp	0x100026254
10002624f:	e8 3f 5d 01 00	callq	0x10003bf93
100026254:	48 85 c0	testq	%rax, %rax
100026257:	74 12	je	0x10002626b
100026259:	48 8d 15 0b 4b 00 00	leaq	19211(%rip), %rdx
100026260:	48 89 c7	movq	%rax, %rdi
100026263:	48 89 de	movq	%rbx, %rsi
100026266:	e8 9b bd 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10002626b:	48 89 df	movq	%rbx, %rdi
10002626e:	be 0b 00 00 00	movl	$11, %esi
100026273:	e8 78 a4 ff ff	callq	0x1000206f0
100026278:	48 8d 05 21 bf 03 00	leaq	245537(%rip), %rax
10002627f:	49 39 c7	cmpq	%rax, %r15
100026282:	0f 84 db 00 00 00	je	0x100026363
100026288:	4d 39 f7	cmpq	%r14, %r15
10002628b:	0f 85 b7 00 00 00	jne	0x100026348
100026291:	48 89 df	movq	%rbx, %rdi
100026294:	e8 77 4c 00 00	callq	0x10002af10
100026299:	48 8d b5 30 fe ff ff	leaq	-464(%rbp), %rsi
1000262a0:	0f 28 05 d9 cf 01 00	movaps	118745(%rip), %xmm0
1000262a7:	0f 29 86 b0 00 00 00	movaps	%xmm0, 176(%rsi)
1000262ae:	0f 29 86 a0 00 00 00	movaps	%xmm0, 160(%rsi)
1000262b5:	0f 29 86 90 00 00 00	movaps	%xmm0, 144(%rsi)
1000262bc:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
1000262c3:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
1000262c7:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
1000262cb:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
1000262cf:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
1000262d3:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
1000262d7:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
1000262db:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
1000262df:	0f 29 06	movaps	%xmm0, (%rsi)
1000262e2:	44 89 e7	movl	%r12d, %edi
1000262e5:	e8 42 e5 00 00	callq	0x10003482c
1000262ea:	83 f8 03	cmpl	$3, %eax
1000262ed:	74 13	je	0x100026302
1000262ef:	85 c0	testl	%eax, %eax
1000262f1:	0f 85 1e 02 00 00	jne	0x100026515
1000262f7:	48 8b 85 c8 fe ff ff	movq	-312(%rbp), %rax
1000262fe:	48 89 43 70	movq	%rax, 112(%rbx)
100026302:	48 8d b5 f0 fd ff ff	leaq	-528(%rbp), %rsi
100026309:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100026313:	48 89 46 20	movq	%rax, 32(%rsi)
100026317:	0f 28 05 62 cf 01 00	movaps	118626(%rip), %xmm0
10002631e:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100026322:	0f 29 06	movaps	%xmm0, (%rsi)
100026325:	44 89 e7	movl	%r12d, %edi
100026328:	e8 6a e5 00 00	callq	0x100034897
10002632d:	83 f8 03	cmpl	$3, %eax
100026330:	74 16	je	0x100026348
100026332:	85 c0	testl	%eax, %eax
100026334:	0f 85 f2 01 00 00	jne	0x10002652c
10002633a:	0f 28 85 f0 fd ff ff	movaps	-528(%rbp), %xmm0
100026341:	0f 11 83 f8 03 00 00	movups	%xmm0, 1016(%rbx)
100026348:	48 8b bd 28 fe ff ff	movq	-472(%rbp), %rdi
10002634f:	48 89 de	movq	%rbx, %rsi
100026352:	e8 f3 4b 00 00	callq	0x10002af4a
100026357:	48 89 df	movq	%rbx, %rdi
10002635a:	31 f6	xorl	%esi, %esi
10002635c:	e8 f0 c5 fe ff	callq	0x100012951
100026361:	eb 1d	jmp	0x100026380
100026363:	48 83 bd 28 fe ff ff 00	cmpq	$0, -472(%rbp)
10002636b:	0f 85 d2 01 00 00	jne	0x100026543
100026371:	48 89 df	movq	%rbx, %rdi
100026374:	e8 97 4b 00 00	callq	0x10002af10
100026379:	80 8b 08 04 00 00 40	orb	$64, 1032(%rbx)
100026380:	c7 85 30 fe ff ff ff ff ff ff	movl	$4294967295, -464(%rbp)
10002638a:	48 8b 43 60	movq	96(%rbx), %rax
10002638e:	48 8d 0d 0b be 03 00	leaq	245259(%rip), %rcx
100026395:	48 39 c8	cmpq	%rcx, %rax
100026398:	74 29	je	0x1000263c3
10002639a:	48 8d 0d 87 be 03 00	leaq	245383(%rip), %rcx
1000263a1:	48 39 c8	cmpq	%rcx, %rax
1000263a4:	74 33	je	0x1000263d9
1000263a6:	4c 39 f0	cmpq	%r14, %rax
1000263a9:	75 62	jne	0x10002640d
1000263ab:	8b b3 90 00 00 00	movl	144(%rbx), %esi
1000263b1:	85 f6	testl	%esi, %esi
1000263b3:	75 50	jne	0x100026405
1000263b5:	48 8b 05 ec 1d 03 00	movq	204268(%rip), %rax ## literal pool symbol address: _mach_task_self_
1000263bc:	8b 38	movl	(%rax), %edi
1000263be:	8b 73 68	movl	104(%rbx), %esi
1000263c1:	eb 30	jmp	0x1000263f3
1000263c3:	bf 33 00 00 00	movl	$51, %edi
1000263c8:	be 06 00 00 00	movl	$6, %esi
1000263cd:	48 89 da	movq	%rbx, %rdx
1000263d0:	e8 7d 38 fe ff	callq	0x100009c52
1000263d5:	89 c6	movl	%eax, %esi
1000263d7:	eb 2c	jmp	0x100026405
1000263d9:	b8 ff ff ff ff	movl	$4294967295, %eax
1000263de:	48 39 43 68	cmpq	%rax, 104(%rbx)
1000263e2:	75 29	jne	0x10002640d
1000263e4:	48 8b 05 bd 1d 03 00	movq	204221(%rip), %rax ## literal pool symbol address: _mach_task_self_
1000263eb:	8b 38	movl	(%rax), %edi
1000263ed:	8b b3 0c 01 00 00	movl	268(%rbx), %esi
1000263f3:	4c 8d bd 30 fe ff ff	leaq	-464(%rbp), %r15
1000263fa:	4c 89 fa	movq	%r15, %rdx
1000263fd:	e8 c0 ba 01 00	callq	0x100041ec2 ## symbol stub for: _task_name_for_pid
100026402:	41 8b 37	movl	(%r15), %esi
100026405:	48 89 df	movq	%rbx, %rdi
100026408:	e8 26 a4 00 00	callq	0x100030833
10002640d:	48 8b 43 60	movq	96(%rbx), %rax
100026411:	48 8d 0d 88 bd 03 00	leaq	245128(%rip), %rcx
100026418:	48 39 c8	cmpq	%rcx, %rax
10002641b:	74 3c	je	0x100026459
10002641d:	f6 80 80 00 00 00 01	testb	$1, 128(%rax)
100026424:	75 5c	jne	0x100026482
100026426:	4c 39 f0	cmpq	%r14, %rax
100026429:	0f 85 92 00 00 00	jne	0x1000264c1
10002642f:	4d 85 ed	testq	%r13, %r13
100026432:	0f 84 23 01 00 00	je	0x10002655b
100026438:	49 8b 45 48	movq	72(%r13), %rax
10002643c:	8b 50 10	movl	16(%rax), %edx
10002643f:	48 89 df	movq	%rbx, %rdi
100026442:	31 f6	xorl	%esi, %esi
100026444:	b9 04 00 00 00	movl	$4, %ecx
100026449:	e8 49 6a 00 00	callq	0x10002ce97
10002644e:	85 c0	testl	%eax, %eax
100026450:	74 1f	je	0x100026471
100026452:	89 c7	movl	%eax, %edi
100026454:	e8 a3 a2 01 00	callq	0x1000406fc
100026459:	48 8d 05 10 c3 03 00	leaq	246544(%rip), %rax
100026460:	8b 10	movl	(%rax), %edx
100026462:	48 89 df	movq	%rbx, %rdi
100026465:	31 f6	xorl	%esi, %esi
100026467:	b9 04 00 00 00	movl	$4, %ecx
10002646c:	e8 26 6a 00 00	callq	0x10002ce97
100026471:	48 8d 05 00 c3 03 00	leaq	246528(%rip), %rax
100026478:	48 8b 38	movq	(%rax), %rdi
10002647b:	e8 82 bc 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100026480:	eb 3b	jmp	0x1000264bd
100026482:	48 8b bd 20 fe ff ff	movq	-480(%rbp), %rdi
100026489:	48 89 de	movq	%rbx, %rsi
10002648c:	e8 e8 93 fe ff	callq	0x10000f879
100026491:	41 89 c6	movl	%eax, %r14d
100026494:	89 c7	movl	%eax, %edi
100026496:	48 89 de	movq	%rbx, %rsi
100026499:	e8 9c 36 01 00	callq	0x100039b3a
10002649e:	48 89 df	movq	%rbx, %rdi
1000264a1:	31 f6	xorl	%esi, %esi
1000264a3:	44 89 f2	movl	%r14d, %edx
1000264a6:	b9 04 00 00 00	movl	$4, %ecx
1000264ab:	e8 e7 69 00 00	callq	0x10002ce97
1000264b0:	44 89 f7	movl	%r14d, %edi
1000264b3:	be 11 00 00 00	movl	$17, %esi
1000264b8:	e8 27 bc 01 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
1000264bd:	48 89 43 78	movq	%rax, 120(%rbx)
1000264c1:	48 8d 15 5b 6d 02 00	leaq	159067(%rip), %rdx ## literal pool for: "created"
1000264c8:	48 89 df	movq	%rbx, %rdi
1000264cb:	be 05 00 00 00	movl	$5, %esi
1000264d0:	31 c0	xorl	%eax, %eax
1000264d2:	e8 52 9f ff ff	callq	0x100020429
1000264d7:	48 8b 05 4a 1b 03 00	movq	203594(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000264de:	48 8b 00	movq	(%rax), %rax
1000264e1:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000264e5:	75 6f	jne	0x100026556
1000264e7:	48 89 d8	movq	%rbx, %rax
1000264ea:	48 81 c4 e8 01 00 00	addq	$488, %rsp
1000264f1:	5b	popq	%rbx
1000264f2:	41 5c	popq	%r12
1000264f4:	41 5d	popq	%r13
1000264f6:	41 5e	popq	%r14
1000264f8:	41 5f	popq	%r15
1000264fa:	5d	popq	%rbp
1000264fb:	c3	retq
1000264fc:	48 8d 3d 70 d3 01 00	leaq	119664(%rip), %rdi ## literal pool for: "Background"
100026503:	e9 0c fc ff ff	jmp	0x100026114
100026508:	48 63 f8	movslq	%eax, %rdi
10002650b:	e8 92 b2 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100026510:	e9 c2 fc ff ff	jmp	0x1000261d7
100026515:	48 63 d0	movslq	%eax, %rdx
100026518:	48 8d 3d e9 9e ff ff	leaq	-24855(%rip), %rdi
10002651f:	48 89 de	movq	%rbx, %rsi
100026522:	e8 81 b2 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100026527:	e9 d6 fd ff ff	jmp	0x100026302
10002652c:	48 63 d0	movslq	%eax, %rdx
10002652f:	48 8d 3d d2 9e ff ff	leaq	-24878(%rip), %rdi
100026536:	48 89 de	movq	%rbx, %rsi
100026539:	e8 6a b2 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002653e:	e9 05 fe ff ff	jmp	0x100026348
100026543:	e8 ca a1 01 00	callq	0x100040712
100026548:	48 8d 3d a2 6c 02 00	leaq	158882(%rip), %rdi ## literal pool for: "Can't create PID domain for PID 0"
10002654f:	31 c0	xorl	%eax, %eax
100026551:	e8 bc de 00 00	callq	0x100034412
100026556:	e8 17 b2 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002655b:	48 8d 3d 74 a1 02 00	leaq	172404(%rip), %rdi ## literal pool for: "user cannot create its own domain"
100026562:	eb eb	jmp	0x10002654f
100026564:	55	pushq	%rbp
100026565:	48 89 e5	movq	%rsp, %rbp
100026568:	41 57	pushq	%r15
10002656a:	41 56	pushq	%r14
10002656c:	41 55	pushq	%r13
10002656e:	41 54	pushq	%r12
100026570:	53	pushq	%rbx
100026571:	48 81 ec 98 04 00 00	subq	$1176, %rsp
100026578:	49 89 cc	movq	%rcx, %r12
10002657b:	49 89 d7	movq	%rdx, %r15
10002657e:	89 f3	movl	%esi, %ebx
100026580:	48 8b 05 a1 1a 03 00	movq	203425(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100026587:	48 8b 00	movq	(%rax), %rax
10002658a:	48 89 45 d0	movq	%rax, -48(%rbp)
10002658e:	48 8d 95 7c fb ff ff	leaq	-1156(%rbp), %rdx
100026595:	c7 02 00 00 00 00	movl	$0, (%rdx)
10002659b:	31 f6	xorl	%esi, %esi
10002659d:	81 fb 31 03 00 00	cmpl	$817, %ebx
1000265a3:	40 0f 95 c6	setne	%sil
1000265a7:	4c 89 ff	movq	%r15, %rdi
1000265aa:	e8 6f 4a 00 00	callq	0x10002b01e
1000265af:	48 85 c0	testq	%rax, %rax
1000265b2:	74 53	je	0x100026607
1000265b4:	49 89 c5	movq	%rax, %r13
1000265b7:	41 be 21 00 00 00	movl	$33, %r14d
1000265bd:	e8 62 33 01 00	callq	0x100039924
1000265c2:	81 c3 e0 fc ff ff	addl	$4294966496, %ebx
1000265c8:	83 fb 2a	cmpl	$42, %ebx
1000265cb:	0f 87 b1 18 00 00	ja	0x100027e82
1000265d1:	49 89 c0	movq	%rax, %r8
1000265d4:	4c 89 ad 88 fb ff ff	movq	%r13, -1144(%rbp)
1000265db:	4c 89 a5 70 fb ff ff	movq	%r12, -1168(%rbp)
1000265e2:	48 8d 05 53 3a 00 00	leaq	14931(%rip), %rax
1000265e9:	48 63 0c 98	movslq	(%rax,%rbx,4), %rcx
1000265ed:	48 01 c1	addq	%rax, %rcx
1000265f0:	ff e1	jmpq	*%rcx
1000265f2:	c7 85 7c fb ff ff 2d 00 00 00	movl	$45, -1156(%rbp)
1000265fc:	41 be 2d 00 00 00	movl	$45, %r14d
100026602:	e9 7b 18 00 00	jmp	0x100027e82
100026607:	44 8b b5 7c fb ff ff	movl	-1156(%rbp), %r14d
10002660e:	e9 6f 18 00 00	jmp	0x100027e82
100026613:	c7 85 7c fb ff ff 8e 00 00 00	movl	$142, -1156(%rbp)
10002661d:	41 be 8e 00 00 00	movl	$142, %r14d
100026623:	e9 5a 18 00 00	jmp	0x100027e82
100026628:	4d 89 c5	movq	%r8, %r13
10002662b:	4c 89 ff	movq	%r15, %rdi
10002662e:	e8 f1 b9 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026633:	41 be 16 00 00 00	movl	$22, %r14d
100026639:	84 c0	testb	%al, %al
10002663b:	0f 84 41 18 00 00	je	0x100027e82
100026641:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
100026648:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
100026651:	bb 7c 00 00 00	movl	$124, %ebx
100026656:	a9 03 02 00 00	testl	$515, %eax
10002665b:	75 2f	jne	0x10002668c
10002665d:	49 8b 44 24 60	movq	96(%r12), %rax
100026662:	49 8b 4c 24 68	movq	104(%r12), %rcx
100026667:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002666f:	4c 89 e7	movq	%r12, %rdi
100026672:	be 03 00 00 00	movl	$3, %esi
100026677:	31 d2	xorl	%edx, %edx
100026679:	4d 89 e8	movq	%r13, %r8
10002667c:	45 31 c9	xorl	%r9d, %r9d
10002667f:	ff 50 68	callq	*104(%rax)
100026682:	89 c3	movl	%eax, %ebx
100026684:	85 c0	testl	%eax, %eax
100026686:	0f 84 d5 21 00 00	je	0x100028861
10002668c:	48 8d 0d c9 86 02 00	leaq	165577(%rip), %rcx ## literal pool for: "bootout"
100026693:	4c 89 e7	movq	%r12, %rdi
100026696:	4c 89 ee	movq	%r13, %rsi
100026699:	e9 66 02 00 00	jmp	0x100026904
10002669e:	41 be 16 00 00 00	movl	$22, %r14d
1000266a4:	48 8d 05 8d bc 03 00	leaq	244877(%rip), %rax
1000266ab:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
1000266b2:	48 39 43 60	cmpq	%rax, 96(%rbx)
1000266b6:	0f 85 c6 17 00 00	jne	0x100027e82
1000266bc:	4d 89 c4	movq	%r8, %r12
1000266bf:	4c 89 ff	movq	%r15, %rdi
1000266c2:	e8 5d b9 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000266c7:	84 c0	testb	%al, %al
1000266c9:	0f 84 b3 17 00 00	je	0x100027e82
1000266cf:	48 8b 73 68	movq	104(%rbx), %rsi
1000266d3:	bf 10 00 00 22	movl	$570425360, %edi
1000266d8:	e8 f2 67 fe ff	callq	0x10000cecf
1000266dd:	48 8b 7b 68	movq	104(%rbx), %rdi
1000266e1:	90	nop
1000266e2:	0f 1f 40 00	nopl	(%rax)
1000266e6:	45 8b 4c 24 14	movl	20(%r12), %r9d
1000266eb:	41 8b 4c 24 1c	movl	28(%r12), %ecx
1000266f0:	8b 83 0c 01 00 00	movl	268(%rbx), %eax
1000266f6:	44 8b 83 14 01 00 00	movl	276(%rbx), %r8d
1000266fd:	44 39 c1	cmpl	%r8d, %ecx
100026700:	0f 8f 24 1b 00 00	jg	0x10002822a
100026706:	41 39 c1	cmpl	%eax, %r9d
100026709:	0f 85 1b 1b 00 00	jne	0x10002822a
10002670f:	f6 83 08 04 00 00 08	testb	$8, 1032(%rbx)
100026716:	75 0e	jne	0x100026726
100026718:	48 83 bb d8 00 00 00 00	cmpq	$0, 216(%rbx)
100026720:	0f 84 01 29 00 00	je	0x100029027
100026726:	48 8d 15 34 87 02 00	leaq	165684(%rip), %rdx ## literal pool for: "domain already initialized"
10002672d:	48 89 df	movq	%rbx, %rdi
100026730:	be 05 00 00 00	movl	$5, %esi
100026735:	31 c0	xorl	%eax, %eax
100026737:	e8 ed 9c ff ff	callq	0x100020429
10002673c:	41 be 25 00 00 00	movl	$37, %r14d
100026742:	e9 3b 17 00 00	jmp	0x100027e82
100026747:	4d 89 c5	movq	%r8, %r13
10002674a:	4c 89 ff	movq	%r15, %rdi
10002674d:	e8 d2 b8 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026752:	84 c0	testb	%al, %al
100026754:	0f 84 ab 28 00 00	je	0x100029005
10002675a:	e8 ee 31 01 00	callq	0x10003994d
10002675f:	41 8b 7d 14	movl	20(%r13), %edi
100026763:	e8 5e 45 ff ff	callq	0x10001acc6
100026768:	48 85 c0	testq	%rax, %rax
10002676b:	74 16	je	0x100026783
10002676d:	48 89 c7	movq	%rax, %rdi
100026770:	e8 aa 57 ff ff	callq	0x10001bf1f
100026775:	41 be 03 00 00 00	movl	$3, %r14d
10002677b:	84 c0	testb	%al, %al
10002677d:	0f 85 ff 16 00 00	jne	0x100027e82
100026783:	48 8d 35 58 49 02 00	leaq	149848(%rip), %rsi ## literal pool for: "type"
10002678a:	4c 89 ff	movq	%r15, %rdi
10002678d:	e8 ce b8 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100026792:	48 83 f8 07	cmpq	$7, %rax
100026796:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
10002679d:	0f 84 60 17 00 00	je	0x100027f03
1000267a3:	48 8b 43 60	movq	96(%rbx), %rax
1000267a7:	48 8b 4b 68	movq	104(%rbx), %rcx
1000267ab:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000267b3:	48 89 df	movq	%rbx, %rdi
1000267b6:	be 05 00 00 00	movl	$5, %esi
1000267bb:	31 d2	xorl	%edx, %edx
1000267bd:	4d 89 e8	movq	%r13, %r8
1000267c0:	45 31 c9	xorl	%r9d, %r9d
1000267c3:	ff 50 68	callq	*104(%rax)
1000267c6:	85 c0	testl	%eax, %eax
1000267c8:	0f 84 35 17 00 00	je	0x100027f03
1000267ce:	41 89 c6	movl	%eax, %r14d
1000267d1:	48 8d 0d fa 86 02 00	leaq	165626(%rip), %rcx ## literal pool for: "endpoint lookup"
1000267d8:	48 89 df	movq	%rbx, %rdi
1000267db:	4c 89 ee	movq	%r13, %rsi
1000267de:	e9 8b 0d 00 00	jmp	0x10002756e
1000267e3:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
1000267ea:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
1000267f1:	41 be 7c 00 00 00	movl	$124, %r14d
1000267f7:	a9 03 02 00 00	testl	$515, %eax
1000267fc:	0f 85 80 16 00 00	jne	0x100027e82
100026802:	4c 89 ff	movq	%r15, %rdi
100026805:	e8 14 b8 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002680a:	48 85 c0	testq	%rax, %rax
10002680d:	0f 84 f2 27 00 00	je	0x100029005
100026813:	48 89 c3	movq	%rax, %rbx
100026816:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
10002681d:	e8 ee 46 00 00	callq	0x10002af10
100026822:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
100026829:	48 89 18	movq	%rbx, (%rax)
10002682c:	e9 eb 2e 00 00	jmp	0x10002971c
100026831:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100026838:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002683f:	41 be 7c 00 00 00	movl	$124, %r14d
100026845:	a9 03 02 00 00	testl	$515, %eax
10002684a:	0f 85 32 16 00 00	jne	0x100027e82
100026850:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026857:	83 bb 9c 00 00 00 00	cmpl	$0, 156(%rbx)
10002685e:	0f 84 aa 17 00 00	je	0x10002800e
100026864:	4c 89 ff	movq	%r15, %rdi
100026867:	e8 b2 b7 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002686c:	48 85 c0	testq	%rax, %rax
10002686f:	0f 84 90 27 00 00	je	0x100029005
100026875:	49 89 c6	movq	%rax, %r14
100026878:	48 89 df	movq	%rbx, %rdi
10002687b:	e8 b8 ab ff ff	callq	0x100021438
100026880:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
100026887:	4c 89 30	movq	%r14, (%rax)
10002688a:	e9 8d 2e 00 00	jmp	0x10002971c
10002688f:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
100026896:	48 8d 35 0e 87 02 00	leaq	165646(%rip), %rsi ## literal pool for: "names"
10002689d:	4c 89 ff	movq	%r15, %rdi
1000268a0:	e8 c7 b7 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000268a5:	41 be 16 00 00 00	movl	$22, %r14d
1000268ab:	48 85 c0	testq	%rax, %rax
1000268ae:	0f 84 ce 15 00 00	je	0x100027e82
1000268b4:	48 89 c3	movq	%rax, %rbx
1000268b7:	48 89 c7	movq	%rax, %rdi
1000268ba:	e8 07 b8 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000268bf:	48 3b 05 12 18 03 00	cmpq	202770(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000268c6:	0f 85 b6 15 00 00	jne	0x100027e82
1000268cc:	48 89 9d 68 fb ff ff	movq	%rbx, -1176(%rbp)
1000268d3:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
1000268da:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
1000268e3:	bb 7c 00 00 00	movl	$124, %ebx
1000268e8:	a9 03 02 00 00	testl	$515, %eax
1000268ed:	0f 84 3e 1a 00 00	je	0x100028331
1000268f3:	48 8d 0d 14 87 02 00	leaq	165652(%rip), %rcx ## literal pool for: "disable service"
1000268fa:	4c 89 e7	movq	%r12, %rdi
1000268fd:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
100026904:	89 da	movl	%ebx, %edx
100026906:	31 c0	xorl	%eax, %eax
100026908:	e8 67 d4 ff ff	callq	0x100023d74
10002690d:	e9 94 00 00 00	jmp	0x1000269a6
100026912:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
100026919:	48 8d 35 dd 32 02 00	leaq	144093(%rip), %rsi ## literal pool for: "name"
100026920:	4c 89 ff	movq	%r15, %rdi
100026923:	e8 32 b7 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100026928:	41 be 16 00 00 00	movl	$22, %r14d
10002692e:	48 85 c0	testq	%rax, %rax
100026931:	0f 84 4b 15 00 00	je	0x100027e82
100026937:	49 89 c5	movq	%rax, %r13
10002693a:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
100026941:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002694a:	bb 7c 00 00 00	movl	$124, %ebx
10002694f:	a9 03 02 00 00	testl	$515, %eax
100026954:	75 33	jne	0x100026989
100026956:	49 8b 44 24 60	movq	96(%r12), %rax
10002695b:	49 8b 4c 24 68	movq	104(%r12), %rcx
100026960:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026968:	4c 89 e7	movq	%r12, %rdi
10002696b:	be 03 00 00 00	movl	$3, %esi
100026970:	31 d2	xorl	%edx, %edx
100026972:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
100026979:	45 31 c9	xorl	%r9d, %r9d
10002697c:	ff 50 68	callq	*104(%rax)
10002697f:	89 c3	movl	%eax, %ebx
100026981:	85 c0	testl	%eax, %eax
100026983:	0f 84 68 1b 00 00	je	0x1000284f1
100026989:	48 8d 0d ed 86 02 00	leaq	165613(%rip), %rcx ## literal pool for: "kill service (%s)"
100026990:	4c 89 e7	movq	%r12, %rdi
100026993:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
10002699a:	89 da	movl	%ebx, %edx
10002699c:	4d 89 e8	movq	%r13, %r8
10002699f:	31 c0	xorl	%eax, %eax
1000269a1:	e8 ce d3 ff ff	callq	0x100023d74
1000269a6:	41 89 de	movl	%ebx, %r14d
1000269a9:	e9 d4 14 00 00	jmp	0x100027e82
1000269ae:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
1000269b5:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
1000269bc:	48 89 9d 90 fb ff ff	movq	%rbx, -1136(%rbp)
1000269c3:	48 8d 35 33 32 02 00	leaq	143923(%rip), %rsi ## literal pool for: "name"
1000269ca:	4c 89 ff	movq	%r15, %rdi
1000269cd:	e8 88 b6 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000269d2:	41 be 16 00 00 00	movl	$22, %r14d
1000269d8:	48 85 c0	testq	%rax, %rax
1000269db:	0f 84 a1 14 00 00	je	0x100027e82
1000269e1:	49 89 c4	movq	%rax, %r12
1000269e4:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
1000269eb:	41 bd 7c 00 00 00	movl	$124, %r13d
1000269f1:	a9 03 02 00 00	testl	$515, %eax
1000269f6:	75 35	jne	0x100026a2d
1000269f8:	48 8b 43 60	movq	96(%rbx), %rax
1000269fc:	48 8b 4b 68	movq	104(%rbx), %rcx
100026a00:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026a08:	ba 08 00 00 00	movl	$8, %edx
100026a0d:	48 89 df	movq	%rbx, %rdi
100026a10:	be 03 00 00 00	movl	$3, %esi
100026a15:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
100026a1c:	45 31 c9	xorl	%r9d, %r9d
100026a1f:	ff 50 68	callq	*104(%rax)
100026a22:	41 89 c5	movl	%eax, %r13d
100026a25:	85 c0	testl	%eax, %eax
100026a27:	0f 84 a3 1b 00 00	je	0x1000285d0
100026a2d:	48 8d 0d 71 86 02 00	leaq	165489(%rip), %rcx ## literal pool for: "start service (%s)"
100026a34:	e9 95 0c 00 00	jmp	0x1000276ce
100026a39:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026a40:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
100026a47:	41 be 7c 00 00 00	movl	$124, %r14d
100026a4d:	a9 03 02 00 00	testl	$515, %eax
100026a52:	75 34	jne	0x100026a88
100026a54:	48 8b 43 60	movq	96(%rbx), %rax
100026a58:	48 8b 4b 68	movq	104(%rbx), %rcx
100026a5c:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026a64:	ba 08 00 00 00	movl	$8, %edx
100026a69:	48 89 df	movq	%rbx, %rdi
100026a6c:	be 03 00 00 00	movl	$3, %esi
100026a71:	4d 89 c5	movq	%r8, %r13
100026a74:	45 31 c9	xorl	%r9d, %r9d
100026a77:	ff 50 68	callq	*104(%rax)
100026a7a:	4d 89 e8	movq	%r13, %r8
100026a7d:	41 89 c6	movl	%eax, %r14d
100026a80:	85 c0	testl	%eax, %eax
100026a82:	0f 84 91 15 00 00	je	0x100028019
100026a88:	48 8d 0d d8 86 02 00	leaq	165592(%rip), %rcx ## literal pool for: "set domain environment"
100026a8f:	e9 d7 13 00 00	jmp	0x100027e6b
100026a94:	4d 89 c4	movq	%r8, %r12
100026a97:	48 8d 35 44 84 02 00	leaq	164932(%rip), %rsi ## literal pool for: "flags"
100026a9e:	4c 89 ff	movq	%r15, %rdi
100026aa1:	e8 ba b5 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100026aa6:	41 be 7d 00 00 00	movl	$125, %r14d
100026aac:	48 8d 0d ed b6 03 00	leaq	243437(%rip), %rcx
100026ab3:	4c 8b ad 88 fb ff ff	movq	-1144(%rbp), %r13
100026aba:	49 39 4d 60	cmpq	%rcx, 96(%r13)
100026abe:	0f 85 b7 13 00 00	jne	0x100027e7b
100026ac4:	48 bb 00 00 00 00 00 00 00 0c	movabsq	$864691128455135232, %rbx
100026ace:	41 0f b7 8d 08 04 00 00	movzwl	1032(%r13), %ecx
100026ad6:	41 be 7c 00 00 00	movl	$124, %r14d
100026adc:	f7 c1 03 02 00 00	testl	$515, %ecx
100026ae2:	4d 89 e0	movq	%r12, %r8
100026ae5:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
100026aec:	0f 84 97 15 00 00	je	0x100028089
100026af2:	48 21 c3	andq	%rax, %rbx
100026af5:	0f 94 c0	sete	%al
100026af8:	45 85 f6	testl	%r14d, %r14d
100026afb:	0f 84 02 15 00 00	je	0x100028003
100026b01:	48 85 db	testq	%rbx, %rbx
100026b04:	0f 85 f9 14 00 00	jne	0x100028003
100026b0a:	48 8d 0d 75 87 02 00	leaq	165749(%rip), %rcx ## literal pool for: "reboot"
100026b11:	4c 89 ef	movq	%r13, %rdi
100026b14:	e9 55 13 00 00	jmp	0x100027e6e
100026b19:	4d 89 c5	movq	%r8, %r13
100026b1c:	4c 89 ff	movq	%r15, %rdi
100026b1f:	e8 00 b5 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026b24:	41 be 16 00 00 00	movl	$22, %r14d
100026b2a:	84 c0	testb	%al, %al
100026b2c:	0f 84 49 13 00 00	je	0x100027e7b
100026b32:	48 8d 35 45 88 02 00	leaq	165957(%rip), %rsi ## literal pool for: "uid"
100026b39:	4c 89 ff	movq	%r15, %rdi
100026b3c:	e8 1f b5 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100026b41:	48 89 c3	movq	%rax, %rbx
100026b44:	48 8d 35 97 83 02 00	leaq	164759(%rip), %rsi ## literal pool for: "flags"
100026b4b:	4c 89 ff	movq	%r15, %rdi
100026b4e:	e8 0d b5 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100026b53:	49 89 c4	movq	%rax, %r12
100026b56:	48 8b 05 fb c9 03 00	movq	248315(%rip), %rax
100026b5d:	41 be 7c 00 00 00	movl	$124, %r14d
100026b63:	f6 80 08 04 00 00 01	testb	$1, 1032(%rax)
100026b6a:	75 2a	jne	0x100026b96
100026b6c:	89 d9	movl	%ebx, %ecx
100026b6e:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026b76:	ba 40 00 00 00	movl	$64, %edx
100026b7b:	31 ff	xorl	%edi, %edi
100026b7d:	31 f6	xorl	%esi, %esi
100026b7f:	4d 89 e8	movq	%r13, %r8
100026b82:	45 31 c9	xorl	%r9d, %r9d
100026b85:	ff 15 05 b7 03 00	callq	*243461(%rip)
100026b8b:	41 89 c6	movl	%eax, %r14d
100026b8e:	85 c0	testl	%eax, %eax
100026b90:	0f 84 df 16 00 00	je	0x100028275
100026b96:	48 8d 0d e5 87 02 00	leaq	165861(%rip), %rcx ## literal pool for: "user login creation"
100026b9d:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100026ba4:	4c 89 ee	movq	%r13, %rsi
100026ba7:	e9 c5 12 00 00	jmp	0x100027e71
100026bac:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026bb3:	48 8b 43 60	movq	96(%rbx), %rax
100026bb7:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
100026bbe:	0f 85 fa 10 00 00	jne	0x100027cbe
100026bc4:	48 8d 15 06 89 02 00	leaq	166150(%rip), %rdx ## literal pool for: "Session adoption is only allowed in user domains."
100026bcb:	48 89 df	movq	%rbx, %rdi
100026bce:	be 03 00 00 00	movl	$3, %esi
100026bd3:	31 c0	xorl	%eax, %eax
100026bd5:	e8 4f 98 ff ff	callq	0x100020429
100026bda:	41 be 7d 00 00 00	movl	$125, %r14d
100026be0:	e9 96 12 00 00	jmp	0x100027e7b
100026be5:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026bec:	48 8b 43 60	movq	96(%rbx), %rax
100026bf0:	48 8b 4b 68	movq	104(%rbx), %rcx
100026bf4:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026bfc:	48 89 df	movq	%rbx, %rdi
100026bff:	be 04 00 00 00	movl	$4, %esi
100026c04:	31 d2	xorl	%edx, %edx
100026c06:	4d 89 c4	movq	%r8, %r12
100026c09:	45 31 c9	xorl	%r9d, %r9d
100026c0c:	ff 50 68	callq	*104(%rax)
100026c0f:	85 c0	testl	%eax, %eax
100026c11:	0f 84 f9 10 00 00	je	0x100027d10
100026c17:	41 89 c6	movl	%eax, %r14d
100026c1a:	48 8d 0d d3 89 02 00	leaq	166355(%rip), %rcx ## literal pool for: "domain print"
100026c21:	e9 c9 10 00 00	jmp	0x100027cef
100026c26:	41 be 7d 00 00 00	movl	$125, %r14d
100026c2c:	48 8d 05 6d b5 03 00	leaq	243053(%rip), %rax
100026c33:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
100026c3a:	48 39 41 60	cmpq	%rax, 96(%rcx)
100026c3e:	0f 85 37 12 00 00	jne	0x100027e7b
100026c44:	4c 89 ff	movq	%r15, %rdi
100026c47:	48 8b b5 70 fb ff ff	movq	-1168(%rbp), %rsi
100026c4e:	e8 7a ea fe ff	callq	0x1000156cd
100026c53:	e9 53 1d 00 00	jmp	0x1000289ab
100026c58:	be 02 00 00 00	movl	$2, %esi
100026c5d:	4c 89 c7	movq	%r8, %rdi
100026c60:	4d 89 c4	movq	%r8, %r12
100026c63:	e8 4e 4d fe ff	callq	0x10000b9b6
100026c68:	84 c0	testb	%al, %al
100026c6a:	0f 84 8a 10 00 00	je	0x100027cfa
100026c70:	41 be 7d 00 00 00	movl	$125, %r14d
100026c76:	48 8d 05 bb b6 03 00	leaq	243387(%rip), %rax
100026c7d:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026c84:	48 39 43 60	cmpq	%rax, 96(%rbx)
100026c88:	0f 85 ed 11 00 00	jne	0x100027e7b
100026c8e:	4c 89 ff	movq	%r15, %rdi
100026c91:	e8 8e b3 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026c96:	41 be 16 00 00 00	movl	$22, %r14d
100026c9c:	84 c0	testb	%al, %al
100026c9e:	0f 84 d7 11 00 00	je	0x100027e7b
100026ca4:	48 8d 35 ca 31 02 00	leaq	143818(%rip), %rsi ## literal pool for: "path"
100026cab:	4c 89 ff	movq	%r15, %rdi
100026cae:	e8 a7 b3 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100026cb3:	48 85 c0	testq	%rax, %rax
100026cb6:	0f 84 bf 11 00 00	je	0x100027e7b
100026cbc:	48 89 c7	movq	%rax, %rdi
100026cbf:	48 89 85 70 fb ff ff	movq	%rax, -1168(%rbp)
100026cc6:	e8 17 83 fe ff	callq	0x10000efe2
100026ccb:	49 89 c6	movq	%rax, %r14
100026cce:	4c 89 ff	movq	%r15, %rdi
100026cd1:	e8 48 b3 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100026cd6:	48 8b 0d 3b 13 03 00	movq	201531(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100026cdd:	4c 8d ad 90 fb ff ff	leaq	-1136(%rbp), %r13
100026ce4:	49 89 4d 00	movq	%rcx, (%r13)
100026ce8:	49 c7 45 08 00 00 00 40	movq	$1073741824, 8(%r13)
100026cf0:	48 8d 0d 6d 7b 00 00	leaq	31597(%rip), %rcx
100026cf7:	49 89 4d 10	movq	%rcx, 16(%r13)
100026cfb:	48 8d 0d ee 43 03 00	leaq	213998(%rip), %rcx
100026d02:	49 89 4d 18	movq	%rcx, 24(%r13)
100026d06:	49 89 5d 20	movq	%rbx, 32(%r13)
100026d0a:	4d 89 75 28	movq	%r14, 40(%r13)
100026d0e:	49 89 45 30	movq	%rax, 48(%r13)
100026d12:	48 8d 35 af 8f 02 00	leaq	167855(%rip), %rsi ## literal pool for: "overlay"
100026d19:	4c 89 ff	movq	%r15, %rdi
100026d1c:	e8 4b b3 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100026d21:	48 89 df	movq	%rbx, %rdi
100026d24:	48 8b b5 70 fb ff ff	movq	-1168(%rbp), %rsi
100026d2b:	48 89 c2	movq	%rax, %rdx
100026d2e:	4c 89 e1	movq	%r12, %rcx
100026d31:	4d 89 e8	movq	%r13, %r8
100026d34:	e8 23 a0 fe ff	callq	0x100010d5c
100026d39:	e9 43 0b 00 00	jmp	0x100027881
100026d3e:	41 be 7d 00 00 00	movl	$125, %r14d
100026d44:	48 8d 05 55 b4 03 00	leaq	242773(%rip), %rax
100026d4b:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026d52:	48 39 43 60	cmpq	%rax, 96(%rbx)
100026d56:	0f 85 1f 11 00 00	jne	0x100027e7b
100026d5c:	be 02 00 00 00	movl	$2, %esi
100026d61:	4c 89 c7	movq	%r8, %rdi
100026d64:	4d 89 c6	movq	%r8, %r14
100026d67:	e8 4a 4c fe ff	callq	0x10000b9b6
100026d6c:	84 c0	testb	%al, %al
100026d6e:	0f 84 30 12 00 00	je	0x100027fa4
100026d74:	48 8d 35 30 82 02 00	leaq	164400(%rip), %rsi ## literal pool for: "names"
100026d7b:	4c 89 ff	movq	%r15, %rdi
100026d7e:	e8 e9 b2 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100026d83:	41 be 16 00 00 00	movl	$22, %r14d
100026d89:	48 85 c0	testq	%rax, %rax
100026d8c:	0f 84 e9 10 00 00	je	0x100027e7b
100026d92:	48 89 c3	movq	%rax, %rbx
100026d95:	48 89 c7	movq	%rax, %rdi
100026d98:	e8 29 b3 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100026d9d:	48 3b 05 34 13 03 00	cmpq	201524(%rip), %rax ## literal pool symbol address: __xpc_type_array
100026da4:	0f 85 d1 10 00 00	jne	0x100027e7b
100026daa:	4c 89 ff	movq	%r15, %rdi
100026dad:	e8 6c b2 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100026db2:	48 85 c0	testq	%rax, %rax
100026db5:	0f 84 c0 10 00 00	je	0x100027e7b
100026dbb:	48 89 85 68 fb ff ff	movq	%rax, -1176(%rbp)
100026dc2:	45 31 f6	xorl	%r14d, %r14d
100026dc5:	31 ff	xorl	%edi, %edi
100026dc7:	31 f6	xorl	%esi, %esi
100026dc9:	e8 72 b1 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100026dce:	48 89 85 88 fb ff ff	movq	%rax, -1144(%rbp)
100026dd5:	4c 8d ad 90 fb ff ff	leaq	-1136(%rbp), %r13
100026ddc:	4c 89 b5 80 fb ff ff	movq	%r14, -1152(%rbp)
100026de3:	48 8d 05 4e b5 03 00	leaq	243022(%rip), %rax
100026dea:	4e 8b 3c f0	movq	(%rax,%r14,8), %r15
100026dee:	4d 85 ff	testq	%r15, %r15
100026df1:	0f 84 c7 00 00 00	je	0x100026ebe
100026df7:	48 89 df	movq	%rbx, %rdi
100026dfa:	e8 4d b1 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100026dff:	48 85 c0	testq	%rax, %rax
100026e02:	0f 84 ad 00 00 00	je	0x100026eb5
100026e08:	45 31 e4	xorl	%r12d, %r12d
100026e0b:	48 89 df	movq	%rbx, %rdi
100026e0e:	4c 89 e6	movq	%r12, %rsi
100026e11:	e8 3c b1 01 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100026e16:	48 85 c0	testq	%rax, %rax
100026e19:	74 1c	je	0x100026e37
100026e1b:	4c 89 ff	movq	%r15, %rdi
100026e1e:	48 89 c6	movq	%rax, %rsi
100026e21:	e8 fb d3 ff ff	callq	0x100024221
100026e26:	48 85 c0	testq	%rax, %rax
100026e29:	74 0c	je	0x100026e37
100026e2b:	49 89 c6	movq	%rax, %r14
100026e2e:	83 b8 18 01 00 00 00	cmpl	$0, 280(%rax)
100026e35:	74 12	je	0x100026e49
100026e37:	49 ff c4	incq	%r12
100026e3a:	48 89 df	movq	%rbx, %rdi
100026e3d:	e8 0a b1 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100026e42:	49 39 c4	cmpq	%rax, %r12
100026e45:	72 c4	jb	0x100026e0b
100026e47:	eb 6c	jmp	0x100026eb5
100026e49:	4c 89 f7	movq	%r14, %rdi
100026e4c:	e8 b0 49 ff ff	callq	0x10001b801
100026e51:	85 c0	testl	%eax, %eax
100026e53:	74 e2	je	0x100026e37
100026e55:	c7 85 90 fb ff ff 00 00 00 00	movl	$0, -1136(%rbp)
100026e5f:	89 c7	movl	%eax, %edi
100026e61:	4c 89 ee	movq	%r13, %rsi
100026e64:	e8 d9 ae 01 00	callq	0x100041d42 ## symbol stub for: _proc_get_dirty
100026e69:	85 c0	testl	%eax, %eax
100026e6b:	75 34	jne	0x100026ea1
100026e6d:	f6 85 90 fb ff ff 04	testb	$4, -1136(%rbp)
100026e74:	74 c1	je	0x100026e37
100026e76:	4c 89 f7	movq	%r14, %rdi
100026e79:	e8 46 4c ff ff	callq	0x10001bac4
100026e7e:	49 89 c6	movq	%rax, %r14
100026e81:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100026e88:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100026e8f:	48 89 c2	movq	%rax, %rdx
100026e92:	e8 f1 b0 01 00	callq	0x100041f88 ## symbol stub for: _xpc_array_set_value
100026e97:	4c 89 f7	movq	%r14, %rdi
100026e9a:	e8 5d b2 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100026e9f:	eb 96	jmp	0x100026e37
100026ea1:	48 63 d0	movslq	%eax, %rdx
100026ea4:	48 8d 3d 5c 14 ff ff	leaq	-60324(%rip), %rdi
100026eab:	4c 89 f6	movq	%r14, %rsi
100026eae:	e8 f5 a8 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100026eb3:	eb 82	jmp	0x100026e37
100026eb5:	4d 8b 7f 18	movq	24(%r15), %r15
100026eb9:	e9 30 ff ff ff	jmp	0x100026dee
100026ebe:	4c 8b b5 80 fb ff ff	movq	-1152(%rbp), %r14
100026ec5:	49 ff c6	incq	%r14
100026ec8:	49 83 fe 0b	cmpq	$11, %r14
100026ecc:	0f 85 0a ff ff ff	jne	0x100026ddc
100026ed2:	48 8d 35 2e 8f 02 00	leaq	167726(%rip), %rsi ## literal pool for: "instances"
100026ed9:	4c 8b b5 68 fb ff ff	movq	-1176(%rbp), %r14
100026ee0:	4c 89 f7	movq	%r14, %rdi
100026ee3:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100026eea:	48 89 da	movq	%rbx, %rdx
100026eed:	e8 bc b1 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100026ef2:	48 89 df	movq	%rbx, %rdi
100026ef5:	e9 df 0e 00 00	jmp	0x100027dd9
100026efa:	41 be 7d 00 00 00	movl	$125, %r14d
100026f00:	48 8d 05 99 b2 03 00	leaq	242329(%rip), %rax
100026f07:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100026f0e:	48 39 47 60	cmpq	%rax, 96(%rdi)
100026f12:	0f 85 63 0f 00 00	jne	0x100027e7b
100026f18:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
100026f1f:	41 be 7c 00 00 00	movl	$124, %r14d
100026f25:	a9 03 02 00 00	testl	$515, %eax
100026f2a:	0f 85 4b 0f 00 00	jne	0x100027e7b
100026f30:	48 8b 4f 68	movq	104(%rdi), %rcx
100026f34:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100026f3c:	be 03 00 00 00	movl	$3, %esi
100026f41:	31 d2	xorl	%edx, %edx
100026f43:	45 31 c9	xorl	%r9d, %r9d
100026f46:	ff 15 bc b2 03 00	callq	*242364(%rip)
100026f4c:	41 89 c6	movl	%eax, %r14d
100026f4f:	85 c0	testl	%eax, %eax
100026f51:	0f 85 24 0f 00 00	jne	0x100027e7b
100026f57:	4c 89 ff	movq	%r15, %rdi
100026f5a:	e8 c5 b0 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026f5f:	41 be 16 00 00 00	movl	$22, %r14d
100026f65:	84 c0	testb	%al, %al
100026f67:	0f 84 0e 0f 00 00	je	0x100027e7b
100026f6d:	48 8d 35 cb 8e 02 00	leaq	167627(%rip), %rsi ## literal pool for: "continue"
100026f74:	4c 89 ff	movq	%r15, %rdi
100026f77:	e8 ba b0 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100026f7c:	84 c0	testb	%al, %al
100026f7e:	0f 84 dd 24 00 00	je	0x100029461
100026f84:	e8 2b 3c ff ff	callq	0x10001abb4
100026f89:	48 8d 05 d8 b7 03 00	leaq	243672(%rip), %rax
100026f90:	c6 00 00	movb	$0, (%rax)
100026f93:	e9 fd 24 00 00	jmp	0x100029495
100026f98:	4d 89 c5	movq	%r8, %r13
100026f9b:	4c 89 ff	movq	%r15, %rdi
100026f9e:	e8 81 b0 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100026fa3:	41 be 16 00 00 00	movl	$22, %r14d
100026fa9:	84 c0	testb	%al, %al
100026fab:	0f 84 ca 0e 00 00	je	0x100027e7b
100026fb1:	48 8d 35 19 8f 02 00	leaq	167705(%rip), %rsi ## literal pool for: "properties"
100026fb8:	4c 89 ff	movq	%r15, %rdi
100026fbb:	e8 ac b0 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100026fc0:	48 85 c0	testq	%rax, %rax
100026fc3:	0f 84 b2 0e 00 00	je	0x100027e7b
100026fc9:	48 89 c3	movq	%rax, %rbx
100026fcc:	48 89 c7	movq	%rax, %rdi
100026fcf:	e8 f2 b0 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100026fd4:	48 3b 05 25 11 03 00	cmpq	200997(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100026fdb:	0f 85 9a 0e 00 00	jne	0x100027e7b
100026fe1:	48 8d 35 fa 7e 02 00	leaq	163578(%rip), %rsi ## literal pool for: "flags"
100026fe8:	4c 89 ff	movq	%r15, %rdi
100026feb:	e8 7c b0 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100026ff0:	48 85 c0	testq	%rax, %rax
100026ff3:	0f 84 82 0e 00 00	je	0x100027e7b
100026ff9:	49 89 c4	movq	%rax, %r12
100026ffc:	48 89 c7	movq	%rax, %rdi
100026fff:	e8 c2 b0 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100027004:	48 3b 05 25 11 03 00	cmpq	200997(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10002700b:	0f 85 6a 0e 00 00	jne	0x100027e7b
100027011:	4c 89 e7	movq	%r12, %rdi
100027014:	e8 1f b1 01 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
100027019:	49 89 c4	movq	%rax, %r12
10002701c:	48 8d 05 7d b1 03 00	leaq	242045(%rip), %rax
100027023:	41 be 7d 00 00 00	movl	$125, %r14d
100027029:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
100027030:	48 39 41 60	cmpq	%rax, 96(%rcx)
100027034:	0f 85 41 0e 00 00	jne	0x100027e7b
10002703a:	31 c0	xorl	%eax, %eax
10002703c:	48 8d b5 90 fb ff ff	leaq	-1136(%rbp), %rsi
100027043:	48 89 06	movq	%rax, (%rsi)
100027046:	48 8d 55 90	leaq	-112(%rbp), %rdx
10002704a:	48 89 02	movq	%rax, (%rdx)
10002704d:	48 8d 8d 58 fb ff ff	leaq	-1192(%rbp), %rcx
100027054:	48 89 01	movq	%rax, (%rcx)
100027057:	48 89 df	movq	%rbx, %rdi
10002705a:	e8 de 79 00 00	callq	0x10002ea3d
10002705f:	89 85 54 fb ff ff	movl	%eax, -1196(%rbp)
100027065:	41 89 c6	movl	%eax, %r14d
100027068:	85 c0	testl	%eax, %eax
10002706a:	0f 85 8d 2f 00 00	jne	0x100029ffd
100027070:	48 8b 9d 90 fb ff ff	movq	-1136(%rbp), %rbx
100027077:	4c 8b 75 90	movq	-112(%rbp), %r14
10002707b:	48 8b 95 58 fb ff ff	movq	-1192(%rbp), %rdx
100027082:	48 89 df	movq	%rbx, %rdi
100027085:	4c 89 f6	movq	%r14, %rsi
100027088:	48 89 95 88 fb ff ff	movq	%rdx, -1144(%rbp)
10002708f:	4c 89 e9	movq	%r13, %rcx
100027092:	e8 ab 7b 00 00	callq	0x10002ec42
100027097:	48 85 c0	testq	%rax, %rax
10002709a:	0f 84 f1 2c 00 00	je	0x100029d91
1000270a0:	48 8d 15 35 8e 02 00	leaq	167477(%rip), %rdx ## literal pool for: "Domain creation failed: it already exists"
1000270a7:	48 89 c7	movq	%rax, %rdi
1000270aa:	be 05 00 00 00	movl	$5, %esi
1000270af:	31 c0	xorl	%eax, %eax
1000270b1:	e8 73 93 ff ff	callq	0x100020429
1000270b6:	41 be 25 00 00 00	movl	$37, %r14d
1000270bc:	e9 3c 2f 00 00	jmp	0x100029ffd
1000270c1:	4d 89 c4	movq	%r8, %r12
1000270c4:	4c 89 ff	movq	%r15, %rdi
1000270c7:	e8 58 af 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000270cc:	41 be 16 00 00 00	movl	$22, %r14d
1000270d2:	84 c0	testb	%al, %al
1000270d4:	0f 84 a1 0d 00 00	je	0x100027e7b
1000270da:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
1000270e1:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
1000270e8:	41 be 7c 00 00 00	movl	$124, %r14d
1000270ee:	a9 03 02 00 00	testl	$515, %eax
1000270f3:	75 2e	jne	0x100027123
1000270f5:	48 8b 43 60	movq	96(%rbx), %rax
1000270f9:	48 8b 4b 68	movq	104(%rbx), %rcx
1000270fd:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027105:	48 89 df	movq	%rbx, %rdi
100027108:	be 03 00 00 00	movl	$3, %esi
10002710d:	31 d2	xorl	%edx, %edx
10002710f:	4d 89 e0	movq	%r12, %r8
100027112:	45 31 c9	xorl	%r9d, %r9d
100027115:	ff 50 68	callq	*104(%rax)
100027118:	41 89 c6	movl	%eax, %r14d
10002711b:	85 c0	testl	%eax, %eax
10002711d:	0f 84 02 18 00 00	je	0x100028925
100027123:	48 8d 0d 7b 8e 02 00	leaq	167547(%rip), %rcx ## literal pool for: "unpend launches"
10002712a:	e9 c0 0b 00 00	jmp	0x100027cef
10002712f:	4d 89 c5	movq	%r8, %r13
100027132:	4c 89 ff	movq	%r15, %rdi
100027135:	e8 ea ae 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002713a:	41 be 16 00 00 00	movl	$22, %r14d
100027140:	84 c0	testb	%al, %al
100027142:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027149:	0f 84 2c 0d 00 00	je	0x100027e7b
10002714f:	41 be 7d 00 00 00	movl	$125, %r14d
100027155:	4c 8d 25 44 b0 03 00	leaq	241732(%rip), %r12
10002715c:	4c 39 63 60	cmpq	%r12, 96(%rbx)
100027160:	0f 85 15 0d 00 00	jne	0x100027e7b
100027166:	66 0f 6f 05 12 c1 01 00	movdqa	114962(%rip), %xmm0
10002716e:	4c 8d b5 90 fb ff ff	leaq	-1136(%rbp), %r14
100027175:	66 41 0f 7f 46 30	movdqa	%xmm0, 48(%r14)
10002717b:	66 41 0f 7f 46 20	movdqa	%xmm0, 32(%r14)
100027181:	66 41 0f 7f 46 10	movdqa	%xmm0, 16(%r14)
100027187:	66 41 0f 7f 06	movdqa	%xmm0, (%r14)
10002718c:	4c 89 ef	movq	%r13, %rdi
10002718f:	4c 89 f6	movq	%r14, %rsi
100027192:	e8 c6 d6 00 00	callq	0x10003485d
100027197:	45 8b 06	movl	(%r14), %r8d
10002719a:	48 8d 15 08 8d 02 00	leaq	167176(%rip), %rdx ## literal pool for: "Active user switch initiated by: %s[%d]"
1000271a1:	48 89 df	movq	%rbx, %rdi
1000271a4:	be 05 00 01 00	movl	$65541, %esi
1000271a9:	48 89 c1	movq	%rax, %rcx
1000271ac:	31 c0	xorl	%eax, %eax
1000271ae:	e8 76 92 ff ff	callq	0x100020429
1000271b3:	4c 39 63 60	cmpq	%r12, 96(%rbx)
1000271b7:	0f 85 6e 2e 00 00	jne	0x10002a02b
1000271bd:	bf 01 00 00 00	movl	$1, %edi
1000271c2:	31 f6	xorl	%esi, %esi
1000271c4:	31 d2	xorl	%edx, %edx
1000271c6:	e8 5d 68 fe ff	callq	0x10000da28
1000271cb:	41 89 c6	movl	%eax, %r14d
1000271ce:	85 c0	testl	%eax, %eax
1000271d0:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
1000271d7:	0f 85 9e 0c 00 00	jne	0x100027e7b
1000271dd:	48 89 df	movq	%rbx, %rdi
1000271e0:	e8 9f 73 00 00	callq	0x10002e584
1000271e5:	4c 89 ff	movq	%r15, %rdi
1000271e8:	e8 31 ae 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000271ed:	49 89 04 24	movq	%rax, (%r12)
1000271f1:	e9 85 0c 00 00	jmp	0x100027e7b
1000271f6:	4d 89 c4	movq	%r8, %r12
1000271f9:	4c 89 ff	movq	%r15, %rdi
1000271fc:	e8 23 ae 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100027201:	41 be 16 00 00 00	movl	$22, %r14d
100027207:	84 c0	testb	%al, %al
100027209:	0f 84 6c 0c 00 00	je	0x100027e7b
10002720f:	48 8d 35 b2 8d 02 00	leaq	167346(%rip), %rsi ## literal pool for: "query"
100027216:	4c 89 ff	movq	%r15, %rdi
100027219:	e8 3c ae 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002721e:	48 85 c0	testq	%rax, %rax
100027221:	0f 84 54 0c 00 00	je	0x100027e7b
100027227:	48 89 c3	movq	%rax, %rbx
10002722a:	e8 17 ad 01 00	callq	0x100041f46 ## symbol stub for: _xpc_array_create_empty
10002722f:	49 89 c6	movq	%rax, %r14
100027232:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100027239:	48 89 de	movq	%rbx, %rsi
10002723c:	48 89 c2	movq	%rax, %rdx
10002723f:	4c 89 e1	movq	%r12, %rcx
100027242:	e8 d9 7c 00 00	callq	0x10002ef20
100027247:	4c 89 ff	movq	%r15, %rdi
10002724a:	e8 cf ad 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002724f:	48 89 c3	movq	%rax, %rbx
100027252:	48 8d 35 eb 7e 02 00	leaq	163563(%rip), %rsi ## literal pool for: "services"
100027259:	48 89 c7	movq	%rax, %rdi
10002725c:	4c 89 f2	movq	%r14, %rdx
10002725f:	e8 4a ae 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100027264:	4c 89 f7	movq	%r14, %rdi
100027267:	e8 90 ae 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002726c:	e9 06 06 00 00	jmp	0x100027877
100027271:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100027278:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002727f:	41 be 7c 00 00 00	movl	$124, %r14d
100027285:	a9 03 02 00 00	testl	$515, %eax
10002728a:	0f 85 f2 0b 00 00	jne	0x100027e82
100027290:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
100027297:	48 8d 35 0a 7a 02 00	leaq	162314(%rip), %rsi ## literal pool for: "paths"
10002729e:	4c 89 ff	movq	%r15, %rdi
1000272a1:	e8 c6 ad 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000272a6:	48 85 c0	testq	%rax, %rax
1000272a9:	0f 84 5b 24 00 00	je	0x10002970a
1000272af:	49 89 c5	movq	%rax, %r13
1000272b2:	48 89 c7	movq	%rax, %rdi
1000272b5:	e8 0c ae 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000272ba:	48 3b 05 3f 0e 03 00	cmpq	200255(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000272c1:	74 1b	je	0x1000272de
1000272c3:	4c 89 ef	movq	%r13, %rdi
1000272c6:	e8 fb ad 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000272cb:	41 be 16 00 00 00	movl	$22, %r14d
1000272d1:	48 3b 05 00 0e 03 00	cmpq	200192(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000272d8:	0f 85 a4 0b 00 00	jne	0x100027e82
1000272de:	4c 89 ff	movq	%r15, %rdi
1000272e1:	e8 3e ad 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000272e6:	41 be 16 00 00 00	movl	$22, %r14d
1000272ec:	84 c0	testb	%al, %al
1000272ee:	0f 84 8e 0b 00 00	je	0x100027e82
1000272f4:	48 8d 35 b3 79 02 00	leaq	162227(%rip), %rsi ## literal pool for: "enable"
1000272fb:	4c 89 ff	movq	%r15, %rdi
1000272fe:	e8 33 ad 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100027303:	0f b6 d8	movzbl	%al, %ebx
100027306:	48 c1 e3 0b	shlq	$11, %rbx
10002730a:	48 8d 35 a4 79 02 00	leaq	162212(%rip), %rsi ## literal pool for: "force"
100027311:	4c 89 ff	movq	%r15, %rdi
100027314:	e8 1d ad 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100027319:	4c 8d b3 00 80 00 00	leaq	32768(%rbx), %r14
100027320:	84 c0	testb	%al, %al
100027322:	4c 0f 44 f3	cmoveq	%rbx, %r14
100027326:	48 8d 35 8e 79 02 00	leaq	162190(%rip), %rsi ## literal pool for: "legacy-load"
10002732d:	4c 89 ff	movq	%r15, %rdi
100027330:	e8 01 ad 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100027335:	4d 8d a6 00 01 00 00	leaq	256(%r14), %r12
10002733c:	84 c0	testb	%al, %al
10002733e:	4d 0f 44 e6	cmoveq	%r14, %r12
100027342:	48 8d 05 ef af 03 00	leaq	241647(%rip), %rax
100027349:	4c 8b b5 88 fb ff ff	movq	-1144(%rbp), %r14
100027350:	49 39 46 60	cmpq	%rax, 96(%r14)
100027354:	0f 84 01 1c 00 00	je	0x100028f5b
10002735a:	4c 89 ff	movq	%r15, %rdi
10002735d:	e8 29 97 00 00	callq	0x100030a8b
100027362:	48 89 c3	movq	%rax, %rbx
100027365:	4c 89 f7	movq	%r14, %rdi
100027368:	be 01 00 00 00	movl	$1, %esi
10002736d:	48 89 c2	movq	%rax, %rdx
100027370:	4c 89 e9	movq	%r13, %rcx
100027373:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
10002737a:	4d 89 e1	movq	%r12, %r9
10002737d:	e8 63 93 fe ff	callq	0x1000106e5
100027382:	48 89 df	movq	%rbx, %rdi
100027385:	e8 72 ad 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002738a:	e9 8d 23 00 00	jmp	0x10002971c
10002738f:	41 be 16 00 00 00	movl	$22, %r14d
100027395:	48 8d 05 9c af 03 00	leaq	241564(%rip), %rax
10002739c:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
1000273a3:	48 39 41 60	cmpq	%rax, 96(%rcx)
1000273a7:	0f 85 d5 0a 00 00	jne	0x100027e82
1000273ad:	4c 89 ff	movq	%r15, %rdi
1000273b0:	4c 89 c3	movq	%r8, %rbx
1000273b3:	e8 6c ac 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000273b8:	84 c0	testb	%al, %al
1000273ba:	0f 84 c2 0a 00 00	je	0x100027e82
1000273c0:	48 89 de	movq	%rbx, %rsi
1000273c3:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
1000273ca:	e8 94 6a 00 00	callq	0x10002de63
1000273cf:	89 c3	movl	%eax, %ebx
1000273d1:	4c 89 ff	movq	%r15, %rdi
1000273d4:	e8 45 ac 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000273d9:	49 89 c7	movq	%rax, %r15
1000273dc:	45 31 f6	xorl	%r14d, %r14d
1000273df:	85 db	testl	%ebx, %ebx
1000273e1:	0f 84 5a 17 00 00	je	0x100028b41
1000273e7:	83 fb 25	cmpl	$37, %ebx
1000273ea:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
1000273f1:	0f 84 51 17 00 00	je	0x100028b48
1000273f7:	83 fb 7c	cmpl	$124, %ebx
1000273fa:	0f 84 48 17 00 00	je	0x100028b48
100027400:	48 63 d3	movslq	%ebx, %rdx
100027403:	48 8d 35 6d 3b 02 00	leaq	146285(%rip), %rsi ## literal pool for: "error"
10002740a:	4c 89 ff	movq	%r15, %rdi
10002740d:	e8 72 ac 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100027412:	41 89 de	movl	%ebx, %r14d
100027415:	e9 2e 17 00 00	jmp	0x100028b48
10002741a:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100027421:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
100027428:	41 be 7c 00 00 00	movl	$124, %r14d
10002742e:	a9 03 02 00 00	testl	$515, %eax
100027433:	0f 85 49 0a 00 00	jne	0x100027e82
100027439:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027440:	66 83 bb a8 00 00 00 00	cmpw	$0, 168(%rbx)
100027448:	0f 85 29 0b 00 00	jne	0x100027f77
10002744e:	4d 89 c5	movq	%r8, %r13
100027451:	48 8d 35 a5 27 02 00	leaq	141221(%rip), %rsi ## literal pool for: "name"
100027458:	4c 89 ff	movq	%r15, %rdi
10002745b:	e8 fa ab 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027460:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
100027467:	48 85 c0	testq	%rax, %rax
10002746a:	0f 84 95 1b 00 00	je	0x100029005
100027470:	48 8d 35 6b 7a 02 00	leaq	162411(%rip), %rsi ## literal pool for: "flags"
100027477:	4c 89 ff	movq	%r15, %rdi
10002747a:	e8 e1 ab 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10002747f:	49 89 c6	movq	%rax, %r14
100027482:	48 8d 05 af ae 03 00	leaq	241327(%rip), %rax
100027489:	48 39 43 60	cmpq	%rax, 96(%rbx)
10002748d:	0f 84 20 18 00 00	je	0x100028cb3
100027493:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
10002749a:	e9 42 18 00 00	jmp	0x100028ce1
10002749f:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
1000274a6:	48 8d 35 fe 7a 02 00	leaq	162558(%rip), %rsi ## literal pool for: "names"
1000274ad:	4c 89 ff	movq	%r15, %rdi
1000274b0:	e8 b7 ab 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000274b5:	41 be 16 00 00 00	movl	$22, %r14d
1000274bb:	48 85 c0	testq	%rax, %rax
1000274be:	0f 84 be 09 00 00	je	0x100027e82
1000274c4:	49 89 c5	movq	%rax, %r13
1000274c7:	48 89 c7	movq	%rax, %rdi
1000274ca:	e8 f7 ab 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000274cf:	48 3b 05 02 0c 03 00	cmpq	199682(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000274d6:	0f 85 a6 09 00 00	jne	0x100027e82
1000274dc:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
1000274e3:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
1000274ea:	41 bc 7c 00 00 00	movl	$124, %r12d
1000274f0:	a9 03 02 00 00	testl	$515, %eax
1000274f5:	0f 84 28 11 00 00	je	0x100028623
1000274fb:	48 8d 0d af 7a 02 00	leaq	162479(%rip), %rcx ## literal pool for: "enable service"
100027502:	48 89 df	movq	%rbx, %rdi
100027505:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
10002750c:	44 89 e2	movl	%r12d, %edx
10002750f:	31 c0	xorl	%eax, %eax
100027511:	e8 5e c8 ff ff	callq	0x100023d74
100027516:	45 89 e6	movl	%r12d, %r14d
100027519:	e9 64 09 00 00	jmp	0x100027e82
10002751e:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027525:	48 83 bb 98 03 00 00 00	cmpq	$0, 920(%rbx)
10002752d:	0f 84 19 08 00 00	je	0x100027d4c
100027533:	48 8b 43 60	movq	96(%rbx), %rax
100027537:	48 8b 4b 68	movq	104(%rbx), %rcx
10002753b:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027543:	48 89 df	movq	%rbx, %rdi
100027546:	be 04 00 00 00	movl	$4, %esi
10002754b:	31 d2	xorl	%edx, %edx
10002754d:	4d 89 c4	movq	%r8, %r12
100027550:	45 31 c9	xorl	%r9d, %r9d
100027553:	ff 50 68	callq	*104(%rax)
100027556:	85 c0	testl	%eax, %eax
100027558:	0f 84 0b 0a 00 00	je	0x100027f69
10002755e:	41 89 c6	movl	%eax, %r14d
100027561:	48 8d 0d e2 7a 02 00	leaq	162530(%rip), %rcx ## literal pool for: "query service enabled state"
100027568:	48 89 df	movq	%rbx, %rdi
10002756b:	4c 89 e6	movq	%r12, %rsi
10002756e:	44 89 f2	movl	%r14d, %edx
100027571:	31 c0	xorl	%eax, %eax
100027573:	e8 fc c7 ff ff	callq	0x100023d74
100027578:	e9 05 09 00 00	jmp	0x100027e82
10002757d:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
100027584:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
10002758b:	48 89 5d 90	movq	%rbx, -112(%rbp)
10002758f:	48 8d 35 67 26 02 00	leaq	140903(%rip), %rsi ## literal pool for: "name"
100027596:	4c 89 ff	movq	%r15, %rdi
100027599:	e8 bc aa 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002759e:	41 be 16 00 00 00	movl	$22, %r14d
1000275a4:	48 85 c0	testq	%rax, %rax
1000275a7:	0f 84 d5 08 00 00	je	0x100027e82
1000275ad:	49 89 c4	movq	%rax, %r12
1000275b0:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
1000275b7:	41 bd 7c 00 00 00	movl	$124, %r13d
1000275bd:	a9 03 02 00 00	testl	$515, %eax
1000275c2:	75 35	jne	0x1000275f9
1000275c4:	48 8b 43 60	movq	96(%rbx), %rax
1000275c8:	48 8b 4b 68	movq	104(%rbx), %rcx
1000275cc:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000275d4:	ba 08 00 00 00	movl	$8, %edx
1000275d9:	48 89 df	movq	%rbx, %rdi
1000275dc:	be 03 00 00 00	movl	$3, %esi
1000275e1:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
1000275e8:	45 31 c9	xorl	%r9d, %r9d
1000275eb:	ff 50 68	callq	*104(%rax)
1000275ee:	41 89 c5	movl	%eax, %r13d
1000275f1:	85 c0	testl	%eax, %eax
1000275f3:	0f 84 8f 10 00 00	je	0x100028688
1000275f9:	48 8d 0d b8 7a 02 00	leaq	162488(%rip), %rcx ## literal pool for: "service stop (%s)"
100027600:	e9 c9 00 00 00	jmp	0x1000276ce
100027605:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
10002760c:	49 8b 44 24 60	movq	96(%r12), %rax
100027611:	49 8b 4c 24 68	movq	104(%r12), %rcx
100027616:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002761e:	ba 08 00 00 00	movl	$8, %edx
100027623:	4c 89 e7	movq	%r12, %rdi
100027626:	be 04 00 00 00	movl	$4, %esi
10002762b:	4c 89 c3	movq	%r8, %rbx
10002762e:	45 31 c9	xorl	%r9d, %r9d
100027631:	ff 50 68	callq	*104(%rax)
100027634:	85 c0	testl	%eax, %eax
100027636:	0f 84 1b 07 00 00	je	0x100027d57
10002763c:	41 89 c6	movl	%eax, %r14d
10002763f:	48 8d 0d e2 7a 02 00	leaq	162530(%rip), %rcx ## literal pool for: "service enumeration"
100027646:	4c 89 e7	movq	%r12, %rdi
100027649:	e9 42 01 00 00	jmp	0x100027790
10002764e:	4c 89 85 80 fb ff ff	movq	%r8, -1152(%rbp)
100027655:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
10002765c:	48 89 5d 90	movq	%rbx, -112(%rbp)
100027660:	48 8d 35 96 25 02 00	leaq	140694(%rip), %rsi ## literal pool for: "name"
100027667:	4c 89 ff	movq	%r15, %rdi
10002766a:	e8 eb a9 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002766f:	41 be 16 00 00 00	movl	$22, %r14d
100027675:	48 85 c0	testq	%rax, %rax
100027678:	0f 84 04 08 00 00	je	0x100027e82
10002767e:	49 89 c4	movq	%rax, %r12
100027681:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
100027688:	41 bd 7c 00 00 00	movl	$124, %r13d
10002768e:	a9 03 02 00 00	testl	$515, %eax
100027693:	75 32	jne	0x1000276c7
100027695:	48 8b 43 60	movq	96(%rbx), %rax
100027699:	48 8b 4b 68	movq	104(%rbx), %rcx
10002769d:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000276a5:	48 89 df	movq	%rbx, %rdi
1000276a8:	be 03 00 00 00	movl	$3, %esi
1000276ad:	31 d2	xorl	%edx, %edx
1000276af:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
1000276b6:	45 31 c9	xorl	%r9d, %r9d
1000276b9:	ff 50 68	callq	*104(%rax)
1000276bc:	41 89 c5	movl	%eax, %r13d
1000276bf:	85 c0	testl	%eax, %eax
1000276c1:	0f 84 75 10 00 00	je	0x10002873c
1000276c7:	48 8d 0d 10 7a 02 00	leaq	162320(%rip), %rcx ## literal pool for: "service remove (%s)"
1000276ce:	48 89 df	movq	%rbx, %rdi
1000276d1:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
1000276d8:	44 89 ea	movl	%r13d, %edx
1000276db:	4d 89 e0	movq	%r12, %r8
1000276de:	31 c0	xorl	%eax, %eax
1000276e0:	e8 8f c6 ff ff	callq	0x100023d74
1000276e5:	45 89 ee	movl	%r13d, %r14d
1000276e8:	e9 95 07 00 00	jmp	0x100027e82
1000276ed:	4c 8b b5 88 fb ff ff	movq	-1144(%rbp), %r14
1000276f4:	49 8b 46 60	movq	96(%r14), %rax
1000276f8:	48 8d 0d 29 ab 03 00	leaq	240425(%rip), %rcx
1000276ff:	48 39 c8	cmpq	%rcx, %rax
100027702:	0f 84 e5 06 00 00	je	0x100027ded
100027708:	48 8d 0d 91 aa 03 00	leaq	240273(%rip), %rcx
10002770f:	48 39 c8	cmpq	%rcx, %rax
100027712:	0f 85 f6 06 00 00	jne	0x100027e0e
100027718:	41 8b 70 04	movl	4(%r8), %esi
10002771c:	48 85 f6	testq	%rsi, %rsi
10002771f:	0f 84 e9 06 00 00	je	0x100027e0e
100027725:	41 83 78 0c 00	cmpl	$0, 12(%r8)
10002772a:	0f 84 de 06 00 00	je	0x100027e0e
100027730:	48 8d 3d f1 aa 03 00	leaq	240369(%rip), %rdi
100027737:	4c 89 c3	movq	%r8, %rbx
10002773a:	e8 6c 38 00 00	callq	0x10002afab
10002773f:	49 89 d8	movq	%rbx, %r8
100027742:	48 85 c0	testq	%rax, %rax
100027745:	4c 0f 45 f0	cmovneq	%rax, %r14
100027749:	e9 c0 06 00 00	jmp	0x100027e0e
10002774e:	4c 8b ad 88 fb ff ff	movq	-1144(%rbp), %r13
100027755:	49 8b 45 60	movq	96(%r13), %rax
100027759:	49 8b 4d 68	movq	104(%r13), %rcx
10002775d:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027765:	ba 08 00 00 00	movl	$8, %edx
10002776a:	4c 89 ef	movq	%r13, %rdi
10002776d:	be 04 00 00 00	movl	$4, %esi
100027772:	4c 89 c3	movq	%r8, %rbx
100027775:	45 31 c9	xorl	%r9d, %r9d
100027778:	ff 50 68	callq	*104(%rax)
10002777b:	85 c0	testl	%eax, %eax
10002777d:	0f 84 28 07 00 00	je	0x100027eab
100027783:	41 89 c6	movl	%eax, %r14d
100027786:	48 8d 0d 5e 7a 02 00	leaq	162398(%rip), %rcx ## literal pool for: "get domain environment"
10002778d:	4c 89 ef	movq	%r13, %rdi
100027790:	48 89 de	movq	%rbx, %rsi
100027793:	e9 d9 06 00 00	jmp	0x100027e71
100027798:	41 be 7d 00 00 00	movl	$125, %r14d
10002779e:	48 8d 05 fb a9 03 00	leaq	240123(%rip), %rax
1000277a5:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
1000277ac:	48 39 41 60	cmpq	%rax, 96(%rcx)
1000277b0:	0f 85 c5 06 00 00	jne	0x100027e7b
1000277b6:	4d 89 c5	movq	%r8, %r13
1000277b9:	4c 89 ff	movq	%r15, %rdi
1000277bc:	e8 63 a8 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000277c1:	41 be 16 00 00 00	movl	$22, %r14d
1000277c7:	84 c0	testb	%al, %al
1000277c9:	0f 84 ac 06 00 00	je	0x100027e7b
1000277cf:	48 8d 35 da 7d 02 00	leaq	163290(%rip), %rsi ## literal pool for: "which"
1000277d6:	4c 89 ff	movq	%r15, %rdi
1000277d9:	e8 70 a8 01 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
1000277de:	48 89 c3	movq	%rax, %rbx
1000277e1:	89 df	movl	%ebx, %edi
1000277e3:	e8 b2 d6 00 00	callq	0x100034e9a
1000277e8:	48 85 c0	testq	%rax, %rax
1000277eb:	0f 84 8a 06 00 00	je	0x100027e7b
1000277f1:	48 8d 35 be 7d 02 00	leaq	163262(%rip), %rsi ## literal pool for: "print"
1000277f8:	4c 89 ff	movq	%r15, %rdi
1000277fb:	e8 36 a8 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100027800:	84 c0	testb	%al, %al
100027802:	0f 84 c6 12 00 00	je	0x100028ace
100027808:	48 8b 05 09 08 03 00	movq	198665(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10002780f:	48 8d 95 90 fb ff ff	leaq	-1136(%rbp), %rdx
100027816:	48 89 02	movq	%rax, (%rdx)
100027819:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100027821:	48 8d 05 a7 6d 00 00	leaq	28071(%rip), %rax
100027828:	48 89 42 10	movq	%rax, 16(%rdx)
10002782c:	48 8d 05 7d 38 03 00	leaq	211069(%rip), %rax
100027833:	48 89 42 18	movq	%rax, 24(%rdx)
100027837:	89 5a 20	movl	%ebx, 32(%rdx)
10002783a:	e9 5d 11 00 00	jmp	0x10002899c
10002783f:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100027846:	48 8b 80 d0 03 00 00	movq	976(%rax), %rax
10002784d:	48 85 c0	testq	%rax, %rax
100027850:	0f 84 36 1f 00 00	je	0x10002978c
100027856:	4c 63 70 34	movslq	52(%rax), %r14
10002785a:	4c 89 ff	movq	%r15, %rdi
10002785d:	e8 bc a7 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100027862:	48 89 c3	movq	%rax, %rbx
100027865:	48 8d 35 83 7d 02 00	leaq	163203(%rip), %rsi ## literal pool for: "asid"
10002786c:	48 89 c7	movq	%rax, %rdi
10002786f:	4c 89 f2	movq	%r14, %rdx
100027872:	e8 2b a8 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100027877:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
10002787e:	48 89 18	movq	%rbx, (%rax)
100027881:	45 31 f6	xorl	%r14d, %r14d
100027884:	e9 f2 05 00 00	jmp	0x100027e7b
100027889:	4c 89 ff	movq	%r15, %rdi
10002788c:	48 8b b5 70 fb ff ff	movq	-1168(%rbp), %rsi
100027893:	e8 5a df fe ff	callq	0x1000157f2
100027898:	41 89 c6	movl	%eax, %r14d
10002789b:	89 85 7c fb ff ff	movl	%eax, -1156(%rbp)
1000278a1:	e9 dc 05 00 00	jmp	0x100027e82
1000278a6:	41 be 7d 00 00 00	movl	$125, %r14d
1000278ac:	48 8d 05 ed a8 03 00	leaq	239853(%rip), %rax
1000278b3:	4c 8b ad 88 fb ff ff	movq	-1144(%rbp), %r13
1000278ba:	49 39 45 60	cmpq	%rax, 96(%r13)
1000278be:	0f 85 b7 05 00 00	jne	0x100027e7b
1000278c4:	4d 89 c4	movq	%r8, %r12
1000278c7:	4c 89 ff	movq	%r15, %rdi
1000278ca:	e8 55 a7 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000278cf:	41 be 16 00 00 00	movl	$22, %r14d
1000278d5:	84 c0	testb	%al, %al
1000278d7:	0f 84 9e 05 00 00	je	0x100027e7b
1000278dd:	be 02 00 00 00	movl	$2, %esi
1000278e2:	4c 89 e7	movq	%r12, %rdi
1000278e5:	e8 cc 40 fe ff	callq	0x10000b9b6
1000278ea:	84 c0	testb	%al, %al
1000278ec:	0f 84 ce 09 00 00	je	0x1000282c0
1000278f2:	48 8d 35 04 23 02 00	leaq	140036(%rip), %rsi ## literal pool for: "name"
1000278f9:	4c 89 ff	movq	%r15, %rdi
1000278fc:	e8 59 a7 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027901:	48 85 c0	testq	%rax, %rax
100027904:	0f 84 71 05 00 00	je	0x100027e7b
10002790a:	48 89 c3	movq	%rax, %rbx
10002790d:	66 0f 6f 05 6b b9 01 00	movdqa	113003(%rip), %xmm0
100027915:	4c 8d b5 90 fb ff ff	leaq	-1136(%rbp), %r14
10002791c:	66 41 0f 7f 46 30	movdqa	%xmm0, 48(%r14)
100027922:	66 41 0f 7f 46 20	movdqa	%xmm0, 32(%r14)
100027928:	66 41 0f 7f 46 10	movdqa	%xmm0, 16(%r14)
10002792e:	66 41 0f 7f 06	movdqa	%xmm0, (%r14)
100027933:	4c 89 e7	movq	%r12, %rdi
100027936:	4c 89 f6	movq	%r14, %rsi
100027939:	e8 1f cf 00 00	callq	0x10003485d
10002793e:	45 8b 0e	movl	(%r14), %r9d
100027941:	48 89 1c 24	movq	%rbx, (%rsp)
100027945:	48 8d 15 96 83 02 00	leaq	164758(%rip), %rdx ## literal pool for: "%s: caller = %s.%d, extension = %s"
10002794c:	48 8d 0d b2 83 02 00	leaq	164786(%rip), %rcx ## literal pool for: "remove all extension instances"
100027953:	4c 89 ef	movq	%r13, %rdi
100027956:	be 05 00 00 00	movl	$5, %esi
10002795b:	49 89 c0	movq	%rax, %r8
10002795e:	31 c0	xorl	%eax, %eax
100027960:	e8 c4 8a ff ff	callq	0x100020429
100027965:	48 8d 35 01 25 02 00	leaq	140545(%rip), %rsi ## literal pool for: "version"
10002796c:	4c 89 ff	movq	%r15, %rdi
10002796f:	e8 e6 a6 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027974:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
10002797b:	4c 89 ff	movq	%r15, %rdi
10002797e:	e8 9b a6 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100027983:	49 89 df	movq	%rbx, %r15
100027986:	48 89 c3	movq	%rax, %rbx
100027989:	e8 70 9f 01 00	callq	0x1000418fe ## symbol stub for: _dispatch_group_create
10002798e:	49 89 c4	movq	%rax, %r12
100027991:	48 89 c7	movq	%rax, %rdi
100027994:	e8 6b 9f 01 00	callq	0x100041904 ## symbol stub for: _dispatch_group_enter
100027999:	4c 89 ef	movq	%r13, %rdi
10002799c:	be 13 00 00 00	movl	$19, %esi
1000279a1:	4c 89 e2	movq	%r12, %rdx
1000279a4:	48 89 9d 48 fb ff ff	movq	%rbx, -1208(%rbp)
1000279ab:	48 89 d9	movq	%rbx, %rcx
1000279ae:	e8 d5 ae fe ff	callq	0x100012888
1000279b3:	49 89 c6	movq	%rax, %r14
1000279b6:	e8 3f 6b fe ff	callq	0x10000e4fa
1000279bb:	48 8d 0d 29 6f 00 00	leaq	28457(%rip), %rcx
1000279c2:	4c 89 e7	movq	%r12, %rdi
1000279c5:	48 89 c6	movq	%rax, %rsi
1000279c8:	4c 89 f2	movq	%r14, %rdx
1000279cb:	e8 46 9f 01 00	callq	0x100041916 ## symbol stub for: _dispatch_group_notify_f
1000279d0:	31 c0	xorl	%eax, %eax
1000279d2:	48 89 85 68 fb ff ff	movq	%rax, -1176(%rbp)
1000279d9:	45 31 ed	xorl	%r13d, %r13d
1000279dc:	31 c9	xorl	%ecx, %ecx
1000279de:	4c 89 bd 70 fb ff ff	movq	%r15, -1168(%rbp)
1000279e5:	48 8d 05 4c a9 03 00	leaq	239948(%rip), %rax
1000279ec:	48 89 8d 60 fb ff ff	movq	%rcx, -1184(%rbp)
1000279f3:	4c 8b 34 c8	movq	(%rax,%rcx,8), %r14
1000279f7:	4d 85 f6	testq	%r14, %r14
1000279fa:	0f 84 f2 00 00 00	je	0x100027af2
100027a00:	4c 89 f7	movq	%r14, %rdi
100027a03:	48 8b b5 70 fb ff ff	movq	-1168(%rbp), %rsi
100027a0a:	e8 12 c8 ff ff	callq	0x100024221
100027a0f:	48 85 c0	testq	%rax, %rax
100027a12:	0f 84 d1 00 00 00	je	0x100027ae9
100027a18:	49 89 c7	movq	%rax, %r15
100027a1b:	4c 89 e3	movq	%r12, %rbx
100027a1e:	4c 8b a0 e8 00 00 00	movq	232(%rax), %r12
100027a25:	48 89 c7	movq	%rax, %rdi
100027a28:	e8 de 43 ff ff	callq	0x10001be0b
100027a2d:	48 85 c0	testq	%rax, %rax
100027a30:	74 25	je	0x100027a57
100027a32:	48 83 bd 80 fb ff ff 00	cmpq	$0, -1152(%rbp)
100027a3a:	74 1b	je	0x100027a57
100027a3c:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100027a43:	48 89 c6	movq	%rax, %rsi
100027a46:	e8 e1 a3 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100027a4b:	85 c0	testl	%eax, %eax
100027a4d:	74 08	je	0x100027a57
100027a4f:	49 89 dc	movq	%rbx, %r12
100027a52:	e9 92 00 00 00	jmp	0x100027ae9
100027a57:	4c 89 e7	movq	%r12, %rdi
100027a5a:	4c 89 fe	movq	%r15, %rsi
100027a5d:	e8 ea 9e ff ff	callq	0x10002194c
100027a62:	85 c0	testl	%eax, %eax
100027a64:	49 89 dc	movq	%rbx, %r12
100027a67:	74 76	je	0x100027adf
100027a69:	83 f8 24	cmpl	$36, %eax
100027a6c:	75 5f	jne	0x100027acd
100027a6e:	4c 89 e7	movq	%r12, %rdi
100027a71:	e8 e8 9e 01 00	callq	0x10004195e ## symbol stub for: _dispatch_retain
100027a76:	4c 89 e7	movq	%r12, %rdi
100027a79:	e8 86 9e 01 00	callq	0x100041904 ## symbol stub for: _dispatch_group_enter
100027a7e:	49 83 bf 48 01 00 00 00	cmpq	$0, 328(%r15)
100027a86:	74 3c	je	0x100027ac4
100027a88:	4c 89 ff	movq	%r15, %rdi
100027a8b:	be 05 00 00 00	movl	$5, %esi
100027a90:	48 8d 15 8d 82 02 00	leaq	164493(%rip), %rdx ## literal pool for: "an extension-removal request is already in flight; chaining"
100027a97:	31 c0	xorl	%eax, %eax
100027a99:	e8 1c e5 fe ff	callq	0x100015fba
100027a9e:	4d 8b bf 48 01 00 00	movq	328(%r15), %r15
100027aa5:	e8 50 6a fe ff	callq	0x10000e4fa
100027aaa:	4c 89 ff	movq	%r15, %rdi
100027aad:	49 89 dc	movq	%rbx, %r12
100027ab0:	48 89 c6	movq	%rax, %rsi
100027ab3:	48 89 da	movq	%rbx, %rdx
100027ab6:	48 8d 0d a1 6e 00 00	leaq	28321(%rip), %rcx
100027abd:	e8 54 9e 01 00	callq	0x100041916 ## symbol stub for: _dispatch_group_notify_f
100027ac2:	eb 22	jmp	0x100027ae6
100027ac4:	4d 89 a7 48 01 00 00	movq	%r12, 328(%r15)
100027acb:	eb 19	jmp	0x100027ae6
100027acd:	48 63 d0	movslq	%eax, %rdx
100027ad0:	48 8d 3d 30 08 ff ff	leaq	-63440(%rip), %rdi
100027ad7:	4c 89 fe	movq	%r15, %rsi
100027ada:	e8 c9 9c 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100027adf:	48 ff 85 68 fb ff ff	incq	-1176(%rbp)
100027ae6:	49 ff c5	incq	%r13
100027ae9:	4d 8b 76 18	movq	24(%r14), %r14
100027aed:	e9 05 ff ff ff	jmp	0x1000279f7
100027af2:	48 8b 8d 60 fb ff ff	movq	-1184(%rbp), %rcx
100027af9:	48 ff c1	incq	%rcx
100027afc:	48 83 f9 0b	cmpq	$11, %rcx
100027b00:	0f 85 df fe ff ff	jne	0x1000279e5
100027b06:	4d 85 ed	testq	%r13, %r13
100027b09:	75 18	jne	0x100027b23
100027b0b:	48 8d 35 65 34 02 00	leaq	144485(%rip), %rsi ## literal pool for: "error"
100027b12:	ba 03 00 00 00	movl	$3, %edx
100027b17:	48 8b bd 48 fb ff ff	movq	-1208(%rbp), %rdi
100027b1e:	e8 61 a5 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100027b23:	48 8d 15 36 82 02 00	leaq	164406(%rip), %rdx ## literal pool for: "total of %lu extension (%s) instances were found to remove, of which %lu were removed instantly"
100027b2a:	45 31 f6	xorl	%r14d, %r14d
100027b2d:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100027b34:	be 05 00 00 00	movl	$5, %esi
100027b39:	4c 89 e9	movq	%r13, %rcx
100027b3c:	4c 8b 85 70 fb ff ff	movq	-1168(%rbp), %r8
100027b43:	4c 8b 8d 68 fb ff ff	movq	-1176(%rbp), %r9
100027b4a:	31 c0	xorl	%eax, %eax
100027b4c:	e8 d8 88 ff ff	callq	0x100020429
100027b51:	4c 89 e7	movq	%r12, %rdi
100027b54:	e8 b1 9d 01 00	callq	0x10004190a ## symbol stub for: _dispatch_group_leave
100027b59:	e9 1d 03 00 00	jmp	0x100027e7b
100027b5e:	41 be 7d 00 00 00	movl	$125, %r14d
100027b64:	48 8d 05 35 a6 03 00	leaq	239157(%rip), %rax
100027b6b:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027b72:	48 39 43 60	cmpq	%rax, 96(%rbx)
100027b76:	0f 85 ff 02 00 00	jne	0x100027e7b
100027b7c:	4c 89 ff	movq	%r15, %rdi
100027b7f:	4d 89 c4	movq	%r8, %r12
100027b82:	e8 9d a4 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100027b87:	41 be 16 00 00 00	movl	$22, %r14d
100027b8d:	84 c0	testb	%al, %al
100027b8f:	0f 84 e6 02 00 00	je	0x100027e7b
100027b95:	48 8b 43 60	movq	96(%rbx), %rax
100027b99:	48 8b 4b 68	movq	104(%rbx), %rcx
100027b9d:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027ba5:	48 89 df	movq	%rbx, %rdi
100027ba8:	be 04 00 00 00	movl	$4, %esi
100027bad:	31 d2	xorl	%edx, %edx
100027baf:	4d 89 e0	movq	%r12, %r8
100027bb2:	45 31 c9	xorl	%r9d, %r9d
100027bb5:	ff 50 68	callq	*104(%rax)
100027bb8:	85 c0	testl	%eax, %eax
100027bba:	0f 84 a9 0d 00 00	je	0x100028969
100027bc0:	41 89 c6	movl	%eax, %r14d
100027bc3:	48 8d 0d 47 82 02 00	leaq	164423(%rip), %rcx ## literal pool for: "dump state"
100027bca:	e9 20 01 00 00	jmp	0x100027cef
100027bcf:	41 be 7d 00 00 00	movl	$125, %r14d
100027bd5:	48 8d 05 c4 a5 03 00	leaq	239044(%rip), %rax
100027bdc:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
100027be3:	48 39 41 60	cmpq	%rax, 96(%rcx)
100027be7:	0f 85 8e 02 00 00	jne	0x100027e7b
100027bed:	4c 89 ff	movq	%r15, %rdi
100027bf0:	4d 89 c4	movq	%r8, %r12
100027bf3:	e8 2c a4 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100027bf8:	41 be 16 00 00 00	movl	$22, %r14d
100027bfe:	84 c0	testb	%al, %al
100027c00:	0f 84 75 02 00 00	je	0x100027e7b
100027c06:	48 8d 35 0f 82 02 00	leaq	164367(%rip), %rsi ## literal pool for: "loginwindow"
100027c0d:	4c 89 ff	movq	%r15, %rdi
100027c10:	e8 21 a4 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100027c15:	84 c0	testb	%al, %al
100027c17:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
100027c1e:	0f 84 ab 06 00 00	je	0x1000282cf
100027c24:	4c 8b 2d 25 b9 03 00	movq	244005(%rip), %r13
100027c2b:	4d 85 ed	testq	%r13, %r13
100027c2e:	0f 84 9b 06 00 00	je	0x1000282cf
100027c34:	66 41 83 bd a8 00 00 00 00	cmpw	$0, 168(%r13)
100027c3d:	0f 84 c3 0f 00 00	je	0x100028c06
100027c43:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100027c4a:	48 8b 78 78	movq	120(%rax), %rdi
100027c4e:	45 31 f6	xorl	%r14d, %r14d
100027c51:	be 00 00 00 00	movl	$0, %esi
100027c56:	48 85 ff	testq	%rdi, %rdi
100027c59:	74 07	je	0x100027c62
100027c5b:	e8 8a a4 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100027c60:	89 c6	movl	%eax, %esi
100027c62:	4c 89 ef	movq	%r13, %rdi
100027c65:	e9 72 0f 00 00	jmp	0x100028bdc
100027c6a:	41 be 7d 00 00 00	movl	$125, %r14d
100027c70:	48 8d 05 29 a5 03 00	leaq	238889(%rip), %rax
100027c77:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027c7e:	48 39 43 60	cmpq	%rax, 96(%rbx)
100027c82:	0f 85 f3 01 00 00	jne	0x100027e7b
100027c88:	48 8b 4b 68	movq	104(%rbx), %rcx
100027c8c:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027c94:	48 89 df	movq	%rbx, %rdi
100027c97:	be 04 00 00 00	movl	$4, %esi
100027c9c:	31 d2	xorl	%edx, %edx
100027c9e:	4d 89 c4	movq	%r8, %r12
100027ca1:	45 31 c9	xorl	%r9d, %r9d
100027ca4:	ff 15 5e a5 03 00	callq	*238942(%rip)
100027caa:	85 c0	testl	%eax, %eax
100027cac:	0f 84 d0 04 00 00	je	0x100028182
100027cb2:	41 89 c6	movl	%eax, %r14d
100027cb5:	48 8d 0d 8c 81 02 00	leaq	164236(%rip), %rcx ## literal pool for: "dump jetsam property category"
100027cbc:	eb 31	jmp	0x100027cef
100027cbe:	48 8b 4b 68	movq	104(%rbx), %rcx
100027cc2:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027cca:	48 89 df	movq	%rbx, %rdi
100027ccd:	be 04 00 00 00	movl	$4, %esi
100027cd2:	31 d2	xorl	%edx, %edx
100027cd4:	4d 89 c4	movq	%r8, %r12
100027cd7:	45 31 c9	xorl	%r9d, %r9d
100027cda:	ff 50 68	callq	*104(%rax)
100027cdd:	85 c0	testl	%eax, %eax
100027cdf:	0f 84 e3 02 00 00	je	0x100027fc8
100027ce5:	41 89 c6	movl	%eax, %r14d
100027ce8:	48 8d 0d 14 78 02 00	leaq	161812(%rip), %rcx ## literal pool for: "adopt session"
100027cef:	48 89 df	movq	%rbx, %rdi
100027cf2:	4c 89 e6	movq	%r12, %rsi
100027cf5:	e9 77 01 00 00	jmp	0x100027e71
100027cfa:	48 8d 0d 4f 79 02 00	leaq	162127(%rip), %rcx ## literal pool for: "pid-extend"
100027d01:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100027d08:	4c 89 e6	movq	%r12, %rsi
100027d0b:	e9 a1 02 00 00	jmp	0x100027fb1
100027d10:	48 8b 05 01 03 03 00	movq	197377(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100027d17:	48 8d 95 90 fb ff ff	leaq	-1136(%rbp), %rdx
100027d1e:	48 89 02	movq	%rax, (%rdx)
100027d21:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100027d29:	48 8d 05 ee 69 00 00	leaq	27118(%rip), %rax
100027d30:	48 89 42 10	movq	%rax, 16(%rdx)
100027d34:	48 8d 05 95 33 03 00	leaq	209813(%rip), %rax
100027d3b:	48 89 42 18	movq	%rax, 24(%rdx)
100027d3f:	4c 89 7a 20	movq	%r15, 32(%rdx)
100027d43:	48 89 5a 28	movq	%rbx, 40(%rdx)
100027d47:	e9 50 0c 00 00	jmp	0x10002899c
100027d4c:	41 be 7d 00 00 00	movl	$125, %r14d
100027d52:	e9 2b 01 00 00	jmp	0x100027e82
100027d57:	4c 89 ff	movq	%r15, %rdi
100027d5a:	e8 c5 a2 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100027d5f:	41 be 16 00 00 00	movl	$22, %r14d
100027d65:	84 c0	testb	%al, %al
100027d67:	0f 84 0e 01 00 00	je	0x100027e7b
100027d6d:	48 8d 35 89 1e 02 00	leaq	138889(%rip), %rsi ## literal pool for: "name"
100027d74:	4c 89 ff	movq	%r15, %rdi
100027d77:	e8 de a2 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027d7c:	48 85 c0	testq	%rax, %rax
100027d7f:	0f 84 2e 0c 00 00	je	0x1000289b3
100027d85:	48 8d bd 90 fb ff ff	leaq	-1136(%rbp), %rdi
100027d8c:	4c 89 27	movq	%r12, (%rdi)
100027d8f:	48 89 c6	movq	%rax, %rsi
100027d92:	e8 a4 61 00 00	callq	0x10002df3b
100027d97:	48 85 c0	testq	%rax, %rax
100027d9a:	0f 84 63 16 00 00	je	0x100029403
100027da0:	48 89 c3	movq	%rax, %rbx
100027da3:	4c 89 ff	movq	%r15, %rdi
100027da6:	e8 73 a2 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100027dab:	49 89 c6	movq	%rax, %r14
100027dae:	48 89 df	movq	%rbx, %rdi
100027db1:	e8 79 3a ff ff	callq	0x10001b82f
100027db6:	49 89 c7	movq	%rax, %r15
100027db9:	48 89 df	movq	%rbx, %rdi
100027dbc:	48 89 c6	movq	%rax, %rsi
100027dbf:	e8 54 64 00 00	callq	0x10002e218
100027dc4:	48 8d 35 71 73 02 00	leaq	160625(%rip), %rsi ## literal pool for: "service"
100027dcb:	4c 89 f7	movq	%r14, %rdi
100027dce:	4c 89 fa	movq	%r15, %rdx
100027dd1:	e8 d8 a2 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100027dd6:	4c 89 ff	movq	%r15, %rdi
100027dd9:	e8 1e a3 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100027dde:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
100027de5:	4c 89 30	movq	%r14, (%rax)
100027de8:	e9 94 fa ff ff	jmp	0x100027881
100027ded:	b8 ff ff ff ff	movl	$4294967295, %eax
100027df2:	49 39 46 68	cmpq	%rax, 104(%r14)
100027df6:	75 16	jne	0x100027e0e
100027df8:	41 83 78 0c 00	cmpl	$0, 12(%r8)
100027dfd:	75 0f	jne	0x100027e0e
100027dff:	41 83 78 04 00	cmpl	$0, 4(%r8)
100027e04:	74 08	je	0x100027e0e
100027e06:	41 c7 40 04 00 00 00 00	movl	$0, 4(%r8)
100027e0e:	49 8b 9e d0 03 00 00	movq	976(%r14), %rbx
100027e15:	48 85 db	testq	%rbx, %rbx
100027e18:	49 0f 44 de	cmoveq	%r14, %rbx
100027e1c:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
100027e23:	41 be 7c 00 00 00	movl	$124, %r14d
100027e29:	a9 03 02 00 00	testl	$515, %eax
100027e2e:	75 34	jne	0x100027e64
100027e30:	48 8b 43 60	movq	96(%rbx), %rax
100027e34:	48 8b 4b 68	movq	104(%rbx), %rcx
100027e38:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100027e40:	ba 08 00 00 00	movl	$8, %edx
100027e45:	48 89 df	movq	%rbx, %rdi
100027e48:	be 02 00 00 00	movl	$2, %esi
100027e4d:	4d 89 c4	movq	%r8, %r12
100027e50:	45 31 c9	xorl	%r9d, %r9d
100027e53:	ff 50 68	callq	*104(%rax)
100027e56:	4d 89 e0	movq	%r12, %r8
100027e59:	41 89 c6	movl	%eax, %r14d
100027e5c:	85 c0	testl	%eax, %eax
100027e5e:	0f 84 4e 03 00 00	je	0x1000281b2
100027e64:	48 8d 0d a4 73 02 00	leaq	160676(%rip), %rcx ## literal pool for: "legacy spawn"
100027e6b:	48 89 df	movq	%rbx, %rdi
100027e6e:	4c 89 c6	movq	%r8, %rsi
100027e71:	44 89 f2	movl	%r14d, %edx
100027e74:	31 c0	xorl	%eax, %eax
100027e76:	e8 f9 be ff ff	callq	0x100023d74
100027e7b:	44 89 b5 7c fb ff ff	movl	%r14d, -1156(%rbp)
100027e82:	48 8b 05 9f 01 03 00	movq	197023(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100027e89:	48 8b 00	movq	(%rax), %rax
100027e8c:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100027e90:	0f 85 9a 21 00 00	jne	0x10002a030
100027e96:	44 89 f0	movl	%r14d, %eax
100027e99:	48 81 c4 98 04 00 00	addq	$1176, %rsp
100027ea0:	5b	popq	%rbx
100027ea1:	41 5c	popq	%r12
100027ea3:	41 5d	popq	%r13
100027ea5:	41 5e	popq	%r14
100027ea7:	41 5f	popq	%r15
100027ea9:	5d	popq	%rbp
100027eaa:	c3	retq
100027eab:	4c 89 ff	movq	%r15, %rdi
100027eae:	e8 71 a1 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100027eb3:	41 be 16 00 00 00	movl	$22, %r14d
100027eb9:	84 c0	testb	%al, %al
100027ebb:	74 be	je	0x100027e7b
100027ebd:	48 8d 35 3e 73 02 00	leaq	160574(%rip), %rsi ## literal pool for: "envvar"
100027ec4:	4c 89 ff	movq	%r15, %rdi
100027ec7:	e8 8e a1 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027ecc:	48 85 c0	testq	%rax, %rax
100027ecf:	74 aa	je	0x100027e7b
100027ed1:	49 8b 5d 50	movq	80(%r13), %rbx
100027ed5:	41 be 03 00 00 00	movl	$3, %r14d
100027edb:	48 85 db	testq	%rbx, %rbx
100027ede:	74 9b	je	0x100027e7b
100027ee0:	49 89 c4	movq	%rax, %r12
100027ee3:	48 89 df	movq	%rbx, %rdi
100027ee6:	4c 89 e6	movq	%r12, %rsi
100027ee9:	e8 16 ac fe ff	callq	0x100012b04
100027eee:	84 c0	testb	%al, %al
100027ef0:	0f 85 41 0d 00 00	jne	0x100028c37
100027ef6:	48 8b 1b	movq	(%rbx), %rbx
100027ef9:	48 85 db	testq	%rbx, %rbx
100027efc:	75 e5	jne	0x100027ee3
100027efe:	e9 78 ff ff ff	jmp	0x100027e7b
100027f03:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
100027f0a:	41 be 7c 00 00 00	movl	$124, %r14d
100027f10:	a9 03 02 00 00	testl	$515, %eax
100027f15:	0f 85 67 ff ff ff	jne	0x100027e82
100027f1b:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100027f22:	66 83 bb a8 00 00 00 00	cmpw	$0, 168(%rbx)
100027f2a:	75 4b	jne	0x100027f77
100027f2c:	48 8d 35 ca 1c 02 00	leaq	138442(%rip), %rsi ## literal pool for: "name"
100027f33:	4c 89 ff	movq	%r15, %rdi
100027f36:	e8 1f a1 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027f3b:	48 85 c0	testq	%rax, %rax
100027f3e:	0f 84 c1 10 00 00	je	0x100029005
100027f44:	49 89 c4	movq	%rax, %r12
100027f47:	48 8d 35 94 6f 02 00	leaq	159636(%rip), %rsi ## literal pool for: "flags"
100027f4e:	4c 89 ff	movq	%r15, %rdi
100027f51:	e8 0a a1 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100027f56:	48 89 c3	movq	%rax, %rbx
100027f59:	f6 c3 10	testb	$16, %bl
100027f5c:	0f 85 31 16 00 00	jne	0x100029593
100027f62:	31 c0	xorl	%eax, %eax
100027f64:	e9 39 16 00 00	jmp	0x1000295a2
100027f69:	66 83 bb a8 00 00 00 00	cmpw	$0, 168(%rbx)
100027f71:	0f 84 23 08 00 00	je	0x10002879a
100027f77:	48 8b 7b 78	movq	120(%rbx), %rdi
100027f7b:	45 31 f6	xorl	%r14d, %r14d
100027f7e:	be 00 00 00 00	movl	$0, %esi
100027f83:	48 85 ff	testq	%rdi, %rdi
100027f86:	74 07	je	0x100027f8f
100027f88:	e8 5d a1 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100027f8d:	89 c6	movl	%eax, %esi
100027f8f:	48 89 df	movq	%rbx, %rdi
100027f92:	4c 89 fa	movq	%r15, %rdx
100027f95:	b9 01 00 00 00	movl	$1, %ecx
100027f9a:	e8 f3 60 00 00	callq	0x10002e092
100027f9f:	e9 de fe ff ff	jmp	0x100027e82
100027fa4:	48 8d 0d 47 7e 02 00	leaq	163399(%rip), %rcx ## literal pool for: "copy busy extensions"
100027fab:	48 89 df	movq	%rbx, %rdi
100027fae:	4c 89 f6	movq	%r14, %rsi
100027fb1:	ba 90 00 00 00	movl	$144, %edx
100027fb6:	31 c0	xorl	%eax, %eax
100027fb8:	e8 b7 bd ff ff	callq	0x100023d74
100027fbd:	41 be 90 00 00 00	movl	$144, %r14d
100027fc3:	e9 b3 fe ff ff	jmp	0x100027e7b
100027fc8:	48 8d 35 42 75 02 00	leaq	161090(%rip), %rsi ## literal pool for: "session"
100027fcf:	4c 89 ff	movq	%r15, %rdi
100027fd2:	e8 83 a0 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100027fd7:	48 85 c0	testq	%rax, %rax
100027fda:	0f 84 72 11 00 00	je	0x100029152
100027fe0:	48 8d 35 8c b8 01 00	leaq	112780(%rip), %rsi ## literal pool for: "Background"
100027fe7:	48 89 c7	movq	%rax, %rdi
100027fea:	e8 3d 9e 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100027fef:	85 c0	testl	%eax, %eax
100027ff1:	0f 84 7f 0b 00 00	je	0x100028b76
100027ff7:	48 8d 15 1b 75 02 00	leaq	161051(%rip), %rdx ## literal pool for: "Only the Background session may be adopted."
100027ffe:	e9 c8 eb ff ff	jmp	0x100026bcb
100028003:	41 89 c5	movl	%eax, %r13d
100028006:	44 89 f3	movl	%r14d, %ebx
100028009:	e9 c4 00 00 00	jmp	0x1000280d2
10002800e:	41 be 22 00 00 00	movl	$34, %r14d
100028014:	e9 69 fe ff ff	jmp	0x100027e82
100028019:	4c 89 ff	movq	%r15, %rdi
10002801c:	e8 03 a0 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100028021:	41 be 16 00 00 00	movl	$22, %r14d
100028027:	84 c0	testb	%al, %al
100028029:	0f 84 4c fe ff ff	je	0x100027e7b
10002802f:	48 8d 35 48 71 02 00	leaq	160072(%rip), %rsi ## literal pool for: "envvars"
100028036:	4c 89 ff	movq	%r15, %rdi
100028039:	e8 2e a0 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002803e:	48 85 c0	testq	%rax, %rax
100028041:	0f 84 34 fe ff ff	je	0x100027e7b
100028047:	49 89 c4	movq	%rax, %r12
10002804a:	48 89 c7	movq	%rax, %rdi
10002804d:	e8 74 a0 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100028052:	48 3b 05 a7 00 03 00	cmpq	196775(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100028059:	0f 85 1c fe ff ff	jne	0x100027e7b
10002805f:	48 8d b5 90 fb ff ff	leaq	-1136(%rbp), %rsi
100028066:	48 89 1e	movq	%rbx, (%rsi)
100028069:	4c 89 6e 08	movq	%r13, 8(%rsi)
10002806d:	48 c7 46 10 00 00 00 00	movq	$0, 16(%rsi)
100028075:	48 8d 15 4e 63 00 00	leaq	25422(%rip), %rdx
10002807c:	4c 89 e7	movq	%r12, %rdi
10002807f:	e8 82 9f 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100028084:	e9 7d 1f 00 00	jmp	0x10002a006
100028089:	49 8b 4d 68	movq	104(%r13), %rcx
10002808d:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100028095:	4c 89 ef	movq	%r13, %rdi
100028098:	be 03 00 00 00	movl	$3, %esi
10002809d:	31 d2	xorl	%edx, %edx
10002809f:	45 31 c9	xorl	%r9d, %r9d
1000280a2:	ff 15 60 a1 03 00	callq	*237920(%rip)
1000280a8:	83 f8 01	cmpl	$1, %eax
1000280ab:	0f 84 a0 0a 00 00	je	0x100028b51
1000280b1:	41 89 c6	movl	%eax, %r14d
1000280b4:	3d 96 00 00 00	cmpl	$150, %eax
1000280b9:	4d 89 e0	movq	%r12, %r8
1000280bc:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
1000280c3:	0f 85 29 ea ff ff	jne	0x100026af2
1000280c9:	48 85 d8	testq	%rbx, %rax
1000280cc:	41 0f 94 c5	sete	%r13b
1000280d0:	31 db	xorl	%ebx, %ebx
1000280d2:	bf 38 00 00 22	movl	$570425400, %edi
1000280d7:	e8 e0 4d fe ff	callq	0x10000cebc
1000280dc:	4c 89 ff	movq	%r15, %rdi
1000280df:	e8 40 9f 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000280e4:	41 be 16 00 00 00	movl	$22, %r14d
1000280ea:	84 c0	testb	%al, %al
1000280ec:	0f 84 89 fd ff ff	je	0x100027e7b
1000280f2:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
1000280f9:	83 e0 02	andl	$2, %eax
1000280fc:	48 85 c0	testq	%rax, %rax
1000280ff:	0f 85 76 fd ff ff	jne	0x100027e7b
100028105:	89 9d 68 fb ff ff	movl	%ebx, -1176(%rbp)
10002810b:	49 be 00 00 00 00 00 00 00 02	movabsq	$144115188075855872, %r14
100028115:	48 8d 9d 90 fb ff ff	leaq	-1136(%rbp), %rbx
10002811c:	ba 00 04 00 00	movl	$1024, %edx
100028121:	48 89 df	movq	%rbx, %rdi
100028124:	be aa 00 00 00	movl	$170, %esi
100028129:	e8 ac 9a 01 00	callq	0x100041bda ## symbol stub for: _memset
10002812e:	41 8b 7c 24 14	movl	20(%r12), %edi
100028133:	48 89 de	movq	%rbx, %rsi
100028136:	e8 ad 55 00 00	callq	0x10002d6e8
10002813b:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
100028142:	48 85 f6	testq	%rsi, %rsi
100028145:	0f 88 a3 0a 00 00	js	0x100028bee
10002814b:	48 0f ba e6 3d	btq	$61, %rsi
100028150:	0f 82 b4 0c 00 00	jb	0x100028e0a
100028156:	4c 89 f3	movq	%r14, %rbx
100028159:	48 0f ba e6 37	btq	$55, %rsi
10002815e:	0f 82 8c 0f 00 00	jb	0x1000290f0
100028164:	45 84 ed	testb	%r13b, %r13b
100028167:	0f 84 b7 15 00 00	je	0x100029724
10002816d:	31 d2	xorl	%edx, %edx
10002816f:	48 8d 0d 17 71 02 00	leaq	160023(%rip), %rcx ## literal pool for: "System shutdown"
100028176:	4c 8d 35 99 51 02 00	leaq	151961(%rip), %r14 ## literal pool for: "system shutdown"
10002817d:	e9 a7 0c 00 00	jmp	0x100028e29
100028182:	48 8b 05 8f fe 02 00	movq	196239(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100028189:	48 8d 95 90 fb ff ff	leaq	-1136(%rbp), %rdx
100028190:	48 89 02	movq	%rax, (%rdx)
100028193:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
10002819b:	48 8d 05 e6 67 00 00	leaq	26598(%rip), %rax
1000281a2:	48 89 42 10	movq	%rax, 16(%rdx)
1000281a6:	48 8d 05 83 2f 03 00	leaq	208771(%rip), %rax
1000281ad:	e9 e2 07 00 00	jmp	0x100028994
1000281b2:	48 8d 35 c1 1c 02 00	leaq	138433(%rip), %rsi ## literal pool for: "label"
1000281b9:	4c 89 ff	movq	%r15, %rdi
1000281bc:	e8 99 9e 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000281c1:	48 85 c0	testq	%rax, %rax
1000281c4:	0f 84 88 0f 00 00	je	0x100029152
1000281ca:	49 89 c6	movq	%rax, %r14
1000281cd:	f6 83 09 04 00 00 04	testb	$4, 1033(%rbx)
1000281d4:	0f 85 d9 09 00 00	jne	0x100028bb3
1000281da:	66 0f 6f 05 9e b0 01 00	movdqa	110750(%rip), %xmm0
1000281e2:	48 8d b5 90 fb ff ff	leaq	-1136(%rbp), %rsi
1000281e9:	66 0f 7f 46 30	movdqa	%xmm0, 48(%rsi)
1000281ee:	66 0f 7f 46 20	movdqa	%xmm0, 32(%rsi)
1000281f3:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
1000281f8:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
1000281fc:	4c 89 e7	movq	%r12, %rdi
1000281ff:	e8 59 c6 00 00	callq	0x10003485d
100028204:	45 8b 44 24 14	movl	20(%r12), %r8d
100028209:	48 8d 15 0c 70 02 00	leaq	159756(%rip), %rdx ## literal pool for: "Attempt to spawn app in non-GUI domain: caller = %s.%d, label = %s"
100028210:	48 89 df	movq	%rbx, %rdi
100028213:	be 03 00 00 00	movl	$3, %esi
100028218:	48 89 c1	movq	%rax, %rcx
10002821b:	4d 89 f1	movq	%r14, %r9
10002821e:	31 c0	xorl	%eax, %eax
100028220:	e8 04 82 ff ff	callq	0x100020429
100028225:	e9 b0 e9 ff ff	jmp	0x100026bda
10002822a:	89 04 24	movl	%eax, (%rsp)
10002822d:	48 8d 15 88 6b 02 00	leaq	158600(%rip), %rdx ## literal pool for: "exec count or caller mismatch: caller exec cnt = %u, creator exec cnt = %u, caller pid = %d, creator pid = %d"
100028234:	45 31 f6	xorl	%r14d, %r14d
100028237:	48 89 df	movq	%rbx, %rdi
10002823a:	be 05 00 00 00	movl	$5, %esi
10002823f:	31 c0	xorl	%eax, %eax
100028241:	e8 e3 81 ff ff	callq	0x100020429
100028246:	48 83 bb b8 00 00 00 00	cmpq	$0, 184(%rbx)
10002824e:	0f 84 10 0a 00 00	je	0x100028c64
100028254:	48 8d 15 cf 6b 02 00	leaq	158671(%rip), %rdx ## literal pool for: "rebirth already in progress"
10002825b:	48 89 df	movq	%rbx, %rdi
10002825e:	be 05 00 00 00	movl	$5, %esi
100028263:	31 c0	xorl	%eax, %eax
100028265:	e8 bf 81 ff ff	callq	0x100020429
10002826a:	41 be 83 00 00 00	movl	$131, %r14d
100028270:	e9 0d fc ff ff	jmp	0x100027e82
100028275:	66 0f 6f 05 03 b0 01 00	movdqa	110595(%rip), %xmm0
10002827d:	48 8d 75 90	leaq	-112(%rbp), %rsi
100028281:	66 0f 7f 46 20	movdqa	%xmm0, 32(%rsi)
100028286:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
10002828b:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
10002828f:	41 8b 7d 18	movl	24(%r13), %edi
100028293:	e8 35 c9 00 00	callq	0x100034bcd
100028298:	85 c0	testl	%eax, %eax
10002829a:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
1000282a1:	0f 84 f6 09 00 00	je	0x100028c9d
1000282a7:	41 89 c6	movl	%eax, %r14d
1000282aa:	48 89 fb	movq	%rdi, %rbx
1000282ad:	89 c7	movl	%eax, %edi
1000282af:	e8 8a 9b 01 00	callq	0x100041e3e ## symbol stub for: _strerror
1000282b4:	48 8d 15 db 70 02 00	leaq	159963(%rip), %rdx ## literal pool for: "Audit session for user-login domain not valid: %d: %s"
1000282bb:	e9 bb 10 00 00	jmp	0x10002937b
1000282c0:	48 8d 0d 09 7a 02 00	leaq	162313(%rip), %rcx ## literal pool for: "extension removal"
1000282c7:	4c 89 ef	movq	%r13, %rdi
1000282ca:	e9 39 fa ff ff	jmp	0x100027d08
1000282cf:	48 8d 35 a8 70 02 00	leaq	159912(%rip), %rsi ## literal pool for: "uid"
1000282d6:	4c 89 ff	movq	%r15, %rdi
1000282d9:	e8 82 9d 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000282de:	48 89 c3	movq	%rax, %rbx
1000282e1:	48 8b 05 70 b2 03 00	movq	242288(%rip), %rax
1000282e8:	41 be 7c 00 00 00	movl	$124, %r14d
1000282ee:	f6 80 08 04 00 00 01	testb	$1, 1032(%rax)
1000282f5:	75 27	jne	0x10002831e
1000282f7:	89 d9	movl	%ebx, %ecx
1000282f9:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100028301:	31 ff	xorl	%edi, %edi
100028303:	31 f6	xorl	%esi, %esi
100028305:	31 d2	xorl	%edx, %edx
100028307:	4d 89 e0	movq	%r12, %r8
10002830a:	45 31 c9	xorl	%r9d, %r9d
10002830d:	ff 15 7d 9f 03 00	callq	*237437(%rip)
100028313:	41 89 c6	movl	%eax, %r14d
100028316:	85 c0	testl	%eax, %eax
100028318:	0f 84 71 0d 00 00	je	0x10002908f
10002831e:	48 8d 0d 03 7b 02 00	leaq	162563(%rip), %rcx ## literal pool for: "get user context"
100028325:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
10002832c:	e9 c1 f9 ff ff	jmp	0x100027cf2
100028331:	49 8b 44 24 60	movq	96(%r12), %rax
100028336:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002833b:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100028343:	4c 89 e7	movq	%r12, %rdi
100028346:	be 03 00 00 00	movl	$3, %esi
10002834b:	31 d2	xorl	%edx, %edx
10002834d:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
100028354:	45 31 c9	xorl	%r9d, %r9d
100028357:	ff 50 68	callq	*104(%rax)
10002835a:	85 c0	testl	%eax, %eax
10002835c:	74 3d	je	0x10002839b
10002835e:	89 c3	movl	%eax, %ebx
100028360:	83 f8 01	cmpl	$1, %eax
100028363:	0f 85 8a e5 ff ff	jne	0x1000268f3
100028369:	bb 01 00 00 00	movl	$1, %ebx
10002836e:	48 8d 05 2b 9e 03 00	leaq	237099(%rip), %rax
100028375:	49 39 44 24 60	cmpq	%rax, 96(%r12)
10002837a:	0f 85 73 e5 ff ff	jne	0x1000268f3
100028380:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100028387:	48 8b b5 68 fb ff ff	movq	-1176(%rbp), %rsi
10002838e:	e8 74 5d 00 00	callq	0x10002e107
100028393:	84 c0	testb	%al, %al
100028395:	0f 84 58 e5 ff ff	je	0x1000268f3
10002839b:	4c 89 ff	movq	%r15, %rdi
10002839e:	e8 7b 9c 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000283a3:	48 89 85 60 fb ff ff	movq	%rax, -1184(%rbp)
1000283aa:	48 85 c0	testq	%rax, %rax
1000283ad:	0f 84 cf fa ff ff	je	0x100027e82
1000283b3:	48 8b 9d 68 fb ff ff	movq	-1176(%rbp), %rbx
1000283ba:	48 89 df	movq	%rbx, %rdi
1000283bd:	e8 8a 9b 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000283c2:	48 85 c0	testq	%rax, %rax
1000283c5:	4c 8b bd 60 fb ff ff	movq	-1184(%rbp), %r15
1000283cc:	0f 84 ad 11 00 00	je	0x10002957f
1000283d2:	45 31 ed	xorl	%r13d, %r13d
1000283d5:	4c 8b b5 88 fb ff ff	movq	-1144(%rbp), %r14
1000283dc:	48 89 df	movq	%rbx, %rdi
1000283df:	4c 89 ee	movq	%r13, %rsi
1000283e2:	e8 6b 9b 01 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
1000283e7:	48 85 c0	testq	%rax, %rax
1000283ea:	0f 84 e1 00 00 00	je	0x1000284d1
1000283f0:	48 89 c3	movq	%rax, %rbx
1000283f3:	4c 89 f7	movq	%r14, %rdi
1000283f6:	48 89 c6	movq	%rax, %rsi
1000283f9:	ba 01 00 00 00	movl	$1, %edx
1000283fe:	e8 d7 2d 00 00	callq	0x10002b1da
100028403:	41 89 c4	movl	%eax, %r12d
100028406:	be 0b 00 00 00	movl	$11, %esi
10002840b:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100028412:	e8 9f 35 fe ff	callq	0x10000b9b6
100028417:	84 c0	testb	%al, %al
100028419:	74 78	je	0x100028493
10002841b:	49 8b be a0 03 00 00	movq	928(%r14), %rdi
100028422:	48 85 ff	testq	%rdi, %rdi
100028425:	74 6c	je	0x100028493
100028427:	48 89 de	movq	%rbx, %rsi
10002842a:	31 d2	xorl	%edx, %edx
10002842c:	e8 7d 9c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100028431:	ba 00 04 00 00	movl	$1024, %edx
100028436:	4c 8d bd 90 fb ff ff	leaq	-1136(%rbp), %r15
10002843d:	4c 89 ff	movq	%r15, %rdi
100028440:	be aa 00 00 00	movl	$170, %esi
100028445:	e8 90 97 01 00	callq	0x100041bda ## symbol stub for: _memset
10002844a:	be 00 04 00 00	movl	$1024, %esi
10002844f:	4c 89 ff	movq	%r15, %rdi
100028452:	48 8d 15 a8 c5 01 00	leaq	116136(%rip), %rdx ## literal pool for: "version.%s"
100028459:	48 89 d9	movq	%rbx, %rcx
10002845c:	31 c0	xorl	%eax, %eax
10002845e:	e8 9f 99 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100028463:	49 8b be a0 03 00 00	movq	928(%r14), %rdi
10002846a:	4c 89 fe	movq	%r15, %rsi
10002846d:	4c 8b bd 60 fb ff ff	movq	-1184(%rbp), %r15
100028474:	31 d2	xorl	%edx, %edx
100028476:	e8 33 9c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002847b:	49 8b be a0 03 00 00	movq	928(%r14), %rdi
100028482:	48 8d 35 46 c5 01 00	leaq	116038(%rip), %rsi ## literal pool for: "_dirty"
100028489:	ba 01 00 00 00	movl	$1, %edx
10002848e:	e8 e5 9b 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100028493:	45 85 e4	testl	%r12d, %r12d
100028496:	74 39	je	0x1000284d1
100028498:	49 63 d4	movslq	%r12d, %rdx
10002849b:	4c 89 ff	movq	%r15, %rdi
10002849e:	48 89 de	movq	%rbx, %rsi
1000284a1:	e8 de 9b 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000284a6:	44 89 e7	movl	%r12d, %edi
1000284a9:	e8 60 9c 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000284ae:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
1000284b5:	be 04 00 00 00	movl	$4, %esi
1000284ba:	48 8d 15 5d 6b 02 00	leaq	158557(%rip), %rdx ## literal pool for: "Failed to disable service %s, error=%d - %s"
1000284c1:	48 89 d9	movq	%rbx, %rcx
1000284c4:	45 89 e0	movl	%r12d, %r8d
1000284c7:	49 89 c1	movq	%rax, %r9
1000284ca:	31 c0	xorl	%eax, %eax
1000284cc:	e8 58 7f ff ff	callq	0x100020429
1000284d1:	49 ff c5	incq	%r13
1000284d4:	48 8b 9d 68 fb ff ff	movq	-1176(%rbp), %rbx
1000284db:	48 89 df	movq	%rbx, %rdi
1000284de:	e8 69 9a 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
1000284e3:	49 39 c5	cmpq	%rax, %r13
1000284e6:	0f 82 f0 fe ff ff	jb	0x1000283dc
1000284ec:	e9 8e 10 00 00	jmp	0x10002957f
1000284f1:	48 8d 35 97 6b 02 00	leaq	158615(%rip), %rsi ## literal pool for: "signal"
1000284f8:	4c 89 ff	movq	%r15, %rdi
1000284fb:	e8 4e 9b 01 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100028500:	49 89 c4	movq	%rax, %r12
100028503:	ff c8	decl	%eax
100028505:	83 f8 1e	cmpl	$30, %eax
100028508:	0f 87 74 f9 ff ff	ja	0x100027e82
10002850e:	4c 89 ff	movq	%r15, %rdi
100028511:	e8 0e 9b 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100028516:	84 c0	testb	%al, %al
100028518:	0f 84 64 f9 ff ff	je	0x100027e82
10002851e:	4c 8b b5 88 fb ff ff	movq	-1144(%rbp), %r14
100028525:	4c 89 f7	movq	%r14, %rdi
100028528:	4c 89 ee	movq	%r13, %rsi
10002852b:	e8 f1 bc ff ff	callq	0x100024221
100028530:	48 85 c0	testq	%rax, %rax
100028533:	0f 84 e3 0a 00 00	je	0x10002901c
100028539:	48 89 c3	movq	%rax, %rbx
10002853c:	49 63 c4	movslq	%r12d, %rax
10002853f:	48 89 85 68 fb ff ff	movq	%rax, -1176(%rbp)
100028546:	4c 8d ad 90 fb ff ff	leaq	-1136(%rbp), %r13
10002854d:	ba 00 04 00 00	movl	$1024, %edx
100028552:	4c 89 ef	movq	%r13, %rdi
100028555:	be aa 00 00 00	movl	$170, %esi
10002855a:	e8 7b 96 01 00	callq	0x100041bda ## symbol stub for: _memset
10002855f:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
100028566:	8b 78 14	movl	20(%rax), %edi
100028569:	4c 89 ee	movq	%r13, %rsi
10002856c:	e8 77 51 00 00	callq	0x10002d6e8
100028571:	49 89 d9	movq	%rbx, %r9
100028574:	49 81 c1 18 05 00 00	addq	$1304, %r9
10002857b:	48 8b 85 68 fb ff ff	movq	-1176(%rbp), %rax
100028582:	48 89 04 24	movq	%rax, (%rsp)
100028586:	48 8d 15 3b 61 02 00	leaq	155963(%rip), %rdx ## literal pool for: "%s: caller = %s, service = %s, value = 0x%llx"
10002858d:	48 8d 0d 02 6b 02 00	leaq	158466(%rip), %rcx ## literal pool for: "signal service"
100028594:	4c 89 f7	movq	%r14, %rdi
100028597:	be 05 00 00 00	movl	$5, %esi
10002859c:	4d 89 e8	movq	%r13, %r8
10002859f:	31 c0	xorl	%eax, %eax
1000285a1:	e8 83 7e ff ff	callq	0x100020429
1000285a6:	48 89 df	movq	%rbx, %rdi
1000285a9:	e8 53 32 ff ff	callq	0x10001b801
1000285ae:	85 c0	testl	%eax, %eax
1000285b0:	0f 84 63 13 00 00	je	0x100029919
1000285b6:	89 c7	movl	%eax, %edi
1000285b8:	44 89 e6	movl	%r12d, %esi
1000285bb:	e8 4e 95 01 00	callq	0x100041b0e ## symbol stub for: _kill
1000285c0:	41 89 c6	movl	%eax, %r14d
1000285c3:	85 c0	testl	%eax, %eax
1000285c5:	0f 85 b7 f8 ff ff	jne	0x100027e82
1000285cb:	e9 3a 11 00 00	jmp	0x10002970a
1000285d0:	4c 89 ff	movq	%r15, %rdi
1000285d3:	e8 4c 9a 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000285d8:	84 c0	testb	%al, %al
1000285da:	0f 84 a2 f8 ff ff	je	0x100027e82
1000285e0:	48 8d bd 90 fb ff ff	leaq	-1136(%rbp), %rdi
1000285e7:	4c 89 e6	movq	%r12, %rsi
1000285ea:	e8 4c 59 00 00	callq	0x10002df3b
1000285ef:	48 85 c0	testq	%rax, %rax
1000285f2:	0f 84 21 13 00 00	je	0x100029919
1000285f8:	48 89 c7	movq	%rax, %rdi
1000285fb:	be 0a 00 00 00	movl	$10, %esi
100028600:	e8 bf 28 ff ff	callq	0x10001aec4
100028605:	41 89 c6	movl	%eax, %r14d
100028608:	83 e0 fe	andl	$-2, %eax
10002860b:	31 c9	xorl	%ecx, %ecx
10002860d:	83 f8 24	cmpl	$36, %eax
100028610:	44 0f 44 f1	cmovel	%ecx, %r14d
100028614:	41 83 fe 25	cmpl	$37, %r14d
100028618:	0f 85 ce 10 00 00	jne	0x1000296ec
10002861e:	e9 e7 10 00 00	jmp	0x10002970a
100028623:	48 8b 43 60	movq	96(%rbx), %rax
100028627:	48 8b 4b 68	movq	104(%rbx), %rcx
10002862b:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100028633:	48 89 df	movq	%rbx, %rdi
100028636:	be 03 00 00 00	movl	$3, %esi
10002863b:	31 d2	xorl	%edx, %edx
10002863d:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
100028644:	45 31 c9	xorl	%r9d, %r9d
100028647:	ff 50 68	callq	*104(%rax)
10002864a:	85 c0	testl	%eax, %eax
10002864c:	0f 84 94 0e 00 00	je	0x1000294e6
100028652:	41 89 c4	movl	%eax, %r12d
100028655:	83 f8 01	cmpl	$1, %eax
100028658:	0f 85 9d ee ff ff	jne	0x1000274fb
10002865e:	41 bc 01 00 00 00	movl	$1, %r12d
100028664:	48 8d 05 35 9b 03 00	leaq	236341(%rip), %rax
10002866b:	48 39 43 60	cmpq	%rax, 96(%rbx)
10002866f:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100028676:	0f 84 53 0e 00 00	je	0x1000294cf
10002867c:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100028683:	e9 73 ee ff ff	jmp	0x1000274fb
100028688:	4c 89 ff	movq	%r15, %rdi
10002868b:	e8 94 99 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100028690:	84 c0	testb	%al, %al
100028692:	0f 84 ea f7 ff ff	je	0x100027e82
100028698:	48 8d 7d 90	leaq	-112(%rbp), %rdi
10002869c:	4c 89 e6	movq	%r12, %rsi
10002869f:	e8 97 58 00 00	callq	0x10002df3b
1000286a4:	48 85 c0	testq	%rax, %rax
1000286a7:	0f 84 6c 12 00 00	je	0x100029919
1000286ad:	48 89 c3	movq	%rax, %rbx
1000286b0:	4c 8b 75 90	movq	-112(%rbp), %r14
1000286b4:	4c 8d a5 90 fb ff ff	leaq	-1136(%rbp), %r12
1000286bb:	ba 00 04 00 00	movl	$1024, %edx
1000286c0:	4c 89 e7	movq	%r12, %rdi
1000286c3:	be aa 00 00 00	movl	$170, %esi
1000286c8:	e8 0d 95 01 00	callq	0x100041bda ## symbol stub for: _memset
1000286cd:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
1000286d4:	8b 78 14	movl	20(%rax), %edi
1000286d7:	4c 89 e6	movq	%r12, %rsi
1000286da:	e8 09 50 00 00	callq	0x10002d6e8
1000286df:	49 89 d9	movq	%rbx, %r9
1000286e2:	49 81 c1 18 05 00 00	addq	$1304, %r9
1000286e9:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000286f1:	48 8d 15 d0 5f 02 00	leaq	155600(%rip), %rdx ## literal pool for: "%s: caller = %s, service = %s, value = 0x%llx"
1000286f8:	48 8d 0d cb 69 02 00	leaq	158155(%rip), %rcx ## literal pool for: "legacy-stop service"
1000286ff:	4c 89 f7	movq	%r14, %rdi
100028702:	be 05 00 00 00	movl	$5, %esi
100028707:	4d 89 e0	movq	%r12, %r8
10002870a:	31 c0	xorl	%eax, %eax
10002870c:	e8 18 7d ff ff	callq	0x100020429
100028711:	48 89 df	movq	%rbx, %rdi
100028714:	e8 a5 28 ff ff	callq	0x10001afbe
100028719:	85 c0	testl	%eax, %eax
10002871b:	0f 84 e9 0f 00 00	je	0x10002970a
100028721:	41 89 c6	movl	%eax, %r14d
100028724:	83 f8 59	cmpl	$89, %eax
100028727:	0f 84 dd 0f 00 00	je	0x10002970a
10002872d:	41 83 fe 25	cmpl	$37, %r14d
100028731:	0f 85 4b f7 ff ff	jne	0x100027e82
100028737:	e9 ce 0f 00 00	jmp	0x10002970a
10002873c:	4c 89 ff	movq	%r15, %rdi
10002873f:	e8 e0 98 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100028744:	84 c0	testb	%al, %al
100028746:	0f 84 36 f7 ff ff	je	0x100027e82
10002874c:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100028750:	4c 89 e6	movq	%r12, %rsi
100028753:	e8 e3 57 00 00	callq	0x10002df3b
100028758:	48 85 c0	testq	%rax, %rax
10002875b:	0f 84 b8 11 00 00	je	0x100029919
100028761:	49 89 c6	movq	%rax, %r14
100028764:	48 89 c7	movq	%rax, %rdi
100028767:	4c 8b ad 80 fb ff ff	movq	-1152(%rbp), %r13
10002876e:	4c 89 ee	movq	%r13, %rsi
100028771:	31 d2	xorl	%edx, %edx
100028773:	e8 e1 fa fe ff	callq	0x100018259
100028778:	85 c0	testl	%eax, %eax
10002877a:	0f 84 01 0f 00 00	je	0x100029681
100028780:	89 c3	movl	%eax, %ebx
100028782:	48 8b 7d 90	movq	-112(%rbp), %rdi
100028786:	48 8d 0d 51 69 02 00	leaq	158033(%rip), %rcx ## literal pool for: "service remove (%s)"
10002878d:	4c 89 ee	movq	%r13, %rsi
100028790:	89 c2	movl	%eax, %edx
100028792:	4d 89 e0	movq	%r12, %r8
100028795:	e9 05 e2 ff ff	jmp	0x10002699f
10002879a:	48 8d 35 5c 14 02 00	leaq	136284(%rip), %rsi ## literal pool for: "name"
1000287a1:	4c 89 ff	movq	%r15, %rdi
1000287a4:	e8 b1 98 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000287a9:	41 be 16 00 00 00	movl	$22, %r14d
1000287af:	48 85 c0	testq	%rax, %rax
1000287b2:	0f 84 ca f6 ff ff	je	0x100027e82
1000287b8:	48 89 c3	movq	%rax, %rbx
1000287bb:	48 8d 35 a4 68 02 00	leaq	157860(%rip), %rsi ## literal pool for: "default-enabled"
1000287c2:	4c 89 ff	movq	%r15, %rdi
1000287c5:	e8 a2 98 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000287ca:	49 89 c4	movq	%rax, %r12
1000287cd:	4c 89 ff	movq	%r15, %rdi
1000287d0:	e8 49 98 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000287d5:	48 85 c0	testq	%rax, %rax
1000287d8:	0f 84 a4 f6 ff ff	je	0x100027e82
1000287de:	49 89 c7	movq	%rax, %r15
1000287e1:	4c 8b b5 88 fb ff ff	movq	-1144(%rbp), %r14
1000287e8:	4c 89 f7	movq	%r14, %rdi
1000287eb:	48 89 de	movq	%rbx, %rsi
1000287ee:	e8 2e ba ff ff	callq	0x100024221
1000287f3:	31 d2	xorl	%edx, %edx
1000287f5:	48 85 c0	testq	%rax, %rax
1000287f8:	0f 95 c2	setne	%dl
1000287fb:	48 8d 35 74 68 02 00	leaq	157812(%rip), %rsi ## literal pool for: "loaded"
100028802:	4c 89 ff	movq	%r15, %rdi
100028805:	e8 6e 98 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002880a:	4c 89 f7	movq	%r14, %rdi
10002880d:	48 89 de	movq	%rbx, %rsi
100028810:	e8 e8 2a 00 00	callq	0x10002b2fd
100028815:	45 31 f6	xorl	%r14d, %r14d
100028818:	48 3b 05 b1 f8 02 00	cmpq	194737(%rip), %rax ## literal pool symbol address: __xpc_bool_true
10002881f:	0f 84 87 0c 00 00	je	0x1000294ac
100028825:	b3 01	movb	$1, %bl
100028827:	48 3b 05 9a f8 02 00	cmpq	194714(%rip), %rax ## literal pool symbol address: __xpc_bool_false
10002882e:	0f 84 7a 0c 00 00	je	0x1000294ae
100028834:	4d 85 e4	testq	%r12, %r12
100028837:	0f 84 71 0c 00 00	je	0x1000294ae
10002883d:	4c 89 e7	movq	%r12, %rdi
100028840:	e8 81 98 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100028845:	48 3b 05 94 f8 02 00	cmpq	194708(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10002884c:	0f 85 5c 0c 00 00	jne	0x1000294ae
100028852:	4c 89 e7	movq	%r12, %rdi
100028855:	e8 3a 97 01 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10002885a:	89 c3	movl	%eax, %ebx
10002885c:	e9 4d 0c 00 00	jmp	0x1000294ae
100028861:	48 8d 35 40 64 02 00	leaq	156736(%rip), %rsi ## literal pool for: "paths"
100028868:	4c 89 ff	movq	%r15, %rdi
10002886b:	e8 fc 97 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100028870:	48 85 c0	testq	%rax, %rax
100028873:	0f 84 2b 07 00 00	je	0x100028fa4
100028879:	48 8d 35 28 64 02 00	leaq	156712(%rip), %rsi ## literal pool for: "paths"
100028880:	4c 89 ff	movq	%r15, %rdi
100028883:	e8 e4 97 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100028888:	48 85 c0	testq	%rax, %rax
10002888b:	0f 84 f1 f5 ff ff	je	0x100027e82
100028891:	49 89 c4	movq	%rax, %r12
100028894:	48 89 c7	movq	%rax, %rdi
100028897:	e8 2a 98 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002889c:	48 3b 05 5d f8 02 00	cmpq	194653(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000288a3:	4c 89 e9	movq	%r13, %rcx
1000288a6:	74 18	je	0x1000288c0
1000288a8:	4c 89 e7	movq	%r12, %rdi
1000288ab:	e8 16 98 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000288b0:	4c 89 e9	movq	%r13, %rcx
1000288b3:	48 3b 05 1e f8 02 00	cmpq	194590(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000288ba:	0f 85 c2 f5 ff ff	jne	0x100027e82
1000288c0:	48 8d 35 9d 64 02 00	leaq	156829(%rip), %rsi ## literal pool for: "disable"
1000288c7:	4c 89 ff	movq	%r15, %rdi
1000288ca:	49 89 cd	movq	%rcx, %r13
1000288cd:	e8 64 97 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000288d2:	0f b6 d8	movzbl	%al, %ebx
1000288d5:	48 c1 e3 0b	shlq	$11, %rbx
1000288d9:	48 8d 35 8c 64 02 00	leaq	156812(%rip), %rsi ## literal pool for: "no-einprogress"
1000288e0:	4c 89 ff	movq	%r15, %rdi
1000288e3:	e8 4e 97 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000288e8:	4c 8d b3 00 00 02 00	leaq	131072(%rbx), %r14
1000288ef:	84 c0	testb	%al, %al
1000288f1:	4c 0f 44 f3	cmoveq	%rbx, %r14
1000288f5:	4c 89 ff	movq	%r15, %rdi
1000288f8:	e8 8e 81 00 00	callq	0x100030a8b
1000288fd:	49 89 c7	movq	%rax, %r15
100028900:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100028907:	be 02 00 00 00	movl	$2, %esi
10002890c:	48 89 c2	movq	%rax, %rdx
10002890f:	4c 89 e1	movq	%r12, %rcx
100028912:	4d 89 e8	movq	%r13, %r8
100028915:	4d 89 f1	movq	%r14, %r9
100028918:	e8 c8 7d fe ff	callq	0x1000106e5
10002891d:	4c 89 ff	movq	%r15, %rdi
100028920:	e9 60 ea ff ff	jmp	0x100027385
100028925:	f6 83 0a 04 00 00 04	testb	$4, 1034(%rbx)
10002892c:	41 be 25 00 00 00	movl	$37, %r14d
100028932:	0f 84 43 f5 ff ff	je	0x100027e7b
100028938:	48 8d 15 76 76 02 00	leaq	161398(%rip), %rdx ## literal pool for: "unpending launches"
10002893f:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100028946:	48 89 df	movq	%rbx, %rdi
100028949:	be 05 00 00 00	movl	$5, %esi
10002894e:	31 c0	xorl	%eax, %eax
100028950:	e8 d4 7a ff ff	callq	0x100020429
100028955:	80 a3 0a 04 00 00 fb	andb	$-5, 1034(%rbx)
10002895c:	48 89 df	movq	%rbx, %rdi
10002895f:	e8 6d 8a ff ff	callq	0x1000213d1
100028964:	e9 9d 16 00 00	jmp	0x10002a006
100028969:	48 8b 05 a8 f6 02 00	movq	194216(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100028970:	48 8d 95 90 fb ff ff	leaq	-1136(%rbp), %rdx
100028977:	48 89 02	movq	%rax, (%rdx)
10002897a:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
100028982:	48 8d 05 f1 5f 00 00	leaq	24561(%rip), %rax
100028989:	48 89 42 10	movq	%rax, 16(%rdx)
10002898d:	48 8d 05 7c 27 03 00	leaq	206716(%rip), %rax
100028994:	48 89 42 18	movq	%rax, 24(%rdx)
100028998:	48 89 5a 20	movq	%rbx, 32(%rdx)
10002899c:	4c 89 ff	movq	%r15, %rdi
10002899f:	48 8b b5 70 fb ff ff	movq	-1168(%rbp), %rsi
1000289a6:	e8 df ff 00 00	callq	0x10003898a
1000289ab:	41 89 c6	movl	%eax, %r14d
1000289ae:	e9 c8 f4 ff ff	jmp	0x100027e7b
1000289b3:	4c 89 ff	movq	%r15, %rdi
1000289b6:	e8 63 96 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000289bb:	49 89 c6	movq	%rax, %r14
1000289be:	31 db	xorl	%ebx, %ebx
1000289c0:	31 ff	xorl	%edi, %edi
1000289c2:	31 f6	xorl	%esi, %esi
1000289c4:	31 d2	xorl	%edx, %edx
1000289c6:	e8 47 96 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000289cb:	49 89 c5	movq	%rax, %r13
1000289ce:	48 8d 35 6f 67 02 00	leaq	157551(%rip), %rsi ## literal pool for: "services"
1000289d5:	4c 89 b5 68 fb ff ff	movq	%r14, -1176(%rbp)
1000289dc:	4c 89 f7	movq	%r14, %rdi
1000289df:	48 89 c2	movq	%rax, %rdx
1000289e2:	e8 c7 96 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000289e7:	4c 89 ef	movq	%r13, %rdi
1000289ea:	e8 0d 97 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000289ef:	4c 8d 3d 9f 1e 02 00	leaq	138911(%rip), %r15 ## literal pool for: "pid"
1000289f6:	4c 8d 25 50 67 02 00	leaq	157520(%rip), %r12 ## literal pool for: "status"
1000289fd:	48 8b 85 88 fb ff ff	movq	-1144(%rbp), %rax
100028a04:	48 89 9d 80 fb ff ff	movq	%rbx, -1152(%rbp)
100028a0b:	48 8b 9c d8 30 01 00 00	movq	304(%rax,%rbx,8), %rbx
100028a13:	48 85 db	testq	%rbx, %rbx
100028a16:	74 5b	je	0x100028a73
100028a18:	31 ff	xorl	%edi, %edi
100028a1a:	31 f6	xorl	%esi, %esi
100028a1c:	31 d2	xorl	%edx, %edx
100028a1e:	e8 ef 95 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100028a23:	49 89 c6	movq	%rax, %r14
100028a26:	48 89 df	movq	%rbx, %rdi
100028a29:	e8 d3 2d ff ff	callq	0x10001b801
100028a2e:	48 63 d0	movslq	%eax, %rdx
100028a31:	4c 89 f7	movq	%r14, %rdi
100028a34:	4c 89 fe	movq	%r15, %rsi
100028a37:	e8 48 96 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100028a3c:	48 89 df	movq	%rbx, %rdi
100028a3f:	e8 28 34 ff ff	callq	0x10001be6c
100028a44:	48 63 50 1c	movslq	28(%rax), %rdx
100028a48:	4c 89 f7	movq	%r14, %rdi
100028a4b:	4c 89 e6	movq	%r12, %rsi
100028a4e:	e8 31 96 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100028a53:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
100028a5a:	4c 89 ef	movq	%r13, %rdi
100028a5d:	4c 89 f2	movq	%r14, %rdx
100028a60:	e8 49 96 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100028a65:	4c 89 f7	movq	%r14, %rdi
100028a68:	e8 8f 96 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100028a6d:	48 8b 5b 68	movq	104(%rbx), %rbx
100028a71:	eb a0	jmp	0x100028a13
100028a73:	48 8b 9d 80 fb ff ff	movq	-1152(%rbp), %rbx
100028a7a:	48 ff c3	incq	%rbx
100028a7d:	48 83 fb 17	cmpq	$23, %rbx
100028a81:	0f 85 76 ff ff ff	jne	0x1000289fd
100028a87:	48 8b 95 88 fb ff ff	movq	-1144(%rbp), %rdx
100028a8e:	48 8b 42 60	movq	96(%rdx), %rax
100028a92:	48 8d 0d 8f 97 03 00	leaq	235407(%rip), %rcx
100028a99:	48 39 c8	cmpq	%rcx, %rax
100028a9c:	0f 84 6e 05 00 00	je	0x100029010
100028aa2:	48 8d 0d 07 98 03 00	leaq	235527(%rip), %rcx
100028aa9:	48 39 c8	cmpq	%rcx, %rax
100028aac:	0f 84 ab 06 00 00	je	0x10002915d
100028ab2:	48 8d 0d e7 96 03 00	leaq	235239(%rip), %rcx
100028ab9:	48 39 c8	cmpq	%rcx, %rax
100028abc:	0f 85 6f 07 00 00	jne	0x100029231
100028ac2:	48 8d 15 87 aa 03 00	leaq	240263(%rip), %rdx
100028ac9:	e9 9d 06 00 00	jmp	0x10002916b
100028ace:	48 89 9d 80 fb ff ff	movq	%rbx, -1152(%rbp)
100028ad5:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
100028adc:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
100028ae5:	bb 7c 00 00 00	movl	$124, %ebx
100028aea:	a9 03 02 00 00	testl	$515, %eax
100028aef:	75 32	jne	0x100028b23
100028af1:	49 8b 44 24 60	movq	96(%r12), %rax
100028af6:	49 8b 4c 24 68	movq	104(%r12), %rcx
100028afb:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100028b03:	ba 08 00 00 00	movl	$8, %edx
100028b08:	4c 89 e7	movq	%r12, %rdi
100028b0b:	be 03 00 00 00	movl	$3, %esi
100028b10:	4d 89 e8	movq	%r13, %r8
100028b13:	45 31 c9	xorl	%r9d, %r9d
100028b16:	ff 50 68	callq	*104(%rax)
100028b19:	89 c3	movl	%eax, %ebx
100028b1b:	85 c0	testl	%eax, %eax
100028b1d:	0f 84 74 0c 00 00	je	0x100029797
100028b23:	48 8d 0d 92 6a 02 00	leaq	158354(%rip), %rcx ## literal pool for: "modify rlimits"
100028b2a:	4c 89 e7	movq	%r12, %rdi
100028b2d:	4c 89 ee	movq	%r13, %rsi
100028b30:	89 da	movl	%ebx, %edx
100028b32:	31 c0	xorl	%eax, %eax
100028b34:	e8 3b b2 ff ff	callq	0x100023d74
100028b39:	41 89 de	movl	%ebx, %r14d
100028b3c:	e9 3a f3 ff ff	jmp	0x100027e7b
100028b41:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
100028b48:	4d 89 3c 24	movq	%r15, (%r12)
100028b4c:	e9 31 f3 ff ff	jmp	0x100027e82
100028b51:	be 14 00 00 00	movl	$20, %esi
100028b56:	4d 89 e6	movq	%r12, %r14
100028b59:	4c 89 e7	movq	%r12, %rdi
100028b5c:	e8 55 2e fe ff	callq	0x10000b9b6
100028b61:	4d 89 e0	movq	%r12, %r8
100028b64:	34 01	xorb	$1, %al
100028b66:	44 0f b6 f0	movzbl	%al, %r14d
100028b6a:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
100028b71:	e9 7c df ff ff	jmp	0x100026af2
100028b76:	48 89 9d 58 fb ff ff	movq	%rbx, -1192(%rbp)
100028b7d:	48 8d 95 54 fb ff ff	leaq	-1196(%rbp), %rdx
100028b84:	c7 02 00 00 00 00	movl	$0, (%rdx)
100028b8a:	48 8b 05 17 f6 02 00	movq	194071(%rip), %rax ## literal pool symbol address: _mach_task_self_
100028b91:	8b 38	movl	(%rax), %edi
100028b93:	4d 89 e6	movq	%r12, %r14
100028b96:	41 8b 74 24 14	movl	20(%r12), %esi
100028b9b:	e8 22 93 01 00	callq	0x100041ec2 ## symbol stub for: _task_name_for_pid
100028ba0:	85 c0	testl	%eax, %eax
100028ba2:	0f 84 9f 06 00 00	je	0x100029247
100028ba8:	41 be 89 00 00 00	movl	$137, %r14d
100028bae:	e9 b9 07 00 00	jmp	0x10002936c
100028bb3:	66 83 bb a8 00 00 00 00	cmpw	$0, 168(%rbx)
100028bbb:	0f 84 d4 07 00 00	je	0x100029395
100028bc1:	48 8b 7b 78	movq	120(%rbx), %rdi
100028bc5:	45 31 f6	xorl	%r14d, %r14d
100028bc8:	be 00 00 00 00	movl	$0, %esi
100028bcd:	48 85 ff	testq	%rdi, %rdi
100028bd0:	74 07	je	0x100028bd9
100028bd2:	e8 13 95 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100028bd7:	89 c6	movl	%eax, %esi
100028bd9:	48 89 df	movq	%rbx, %rdi
100028bdc:	4c 89 fa	movq	%r15, %rdx
100028bdf:	b9 01 00 00 00	movl	$1, %ecx
100028be4:	e8 a9 54 00 00	callq	0x10002e092
100028be9:	e9 8d f2 ff ff	jmp	0x100027e7b
100028bee:	4c 89 f3	movq	%r14, %rbx
100028bf1:	31 d2	xorl	%edx, %edx
100028bf3:	48 8d 0d b1 66 02 00	leaq	157361(%rip), %rcx ## literal pool for: "System reboot"
100028bfa:	4c 8d 35 9c 66 02 00	leaq	157340(%rip), %r14 ## literal pool for: "system reboot"
100028c01:	e9 23 02 00 00	jmp	0x100028e29
100028c06:	49 89 c4	movq	%rax, %r12
100028c09:	4c 89 ff	movq	%r15, %rdi
100028c0c:	e8 0d 94 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100028c11:	49 89 c6	movq	%rax, %r14
100028c14:	49 8b 8d b0 03 00 00	movq	944(%r13), %rcx
100028c1b:	49 8b 45 48	movq	72(%r13), %rax
100028c1f:	48 85 c0	testq	%rax, %rax
100028c22:	0f 84 cc 02 00 00	je	0x100028ef4
100028c28:	83 78 14 04	cmpl	$4, 20(%rax)
100028c2c:	0f 84 c4 02 00 00	je	0x100028ef6
100028c32:	48 8b 00	movq	(%rax), %rax
100028c35:	eb e8	jmp	0x100028c1f
100028c37:	48 89 df	movq	%rbx, %rdi
100028c3a:	e8 14 9f fe ff	callq	0x100012b53
100028c3f:	49 89 c6	movq	%rax, %r14
100028c42:	4c 89 ff	movq	%r15, %rdi
100028c45:	e8 d4 93 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100028c4a:	48 89 c3	movq	%rax, %rbx
100028c4d:	48 8d 35 b5 65 02 00	leaq	157109(%rip), %rsi ## literal pool for: "value"
100028c54:	48 89 c7	movq	%rax, %rdi
100028c57:	4c 89 f2	movq	%r14, %rdx
100028c5a:	e8 3d 94 01 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100028c5f:	e9 13 ec ff ff	jmp	0x100027877
100028c64:	48 8d 15 db 61 02 00	leaq	156123(%rip), %rdx ## literal pool for: "slaying domain for rebirth"
100028c6b:	48 89 df	movq	%rbx, %rdi
100028c6e:	be 05 00 00 00	movl	$5, %esi
100028c73:	31 c0	xorl	%eax, %eax
100028c75:	e8 af 77 ff ff	callq	0x100020429
100028c7a:	80 8b 09 04 00 00 20	orb	$32, 1033(%rbx)
100028c81:	4c 89 ff	movq	%r15, %rdi
100028c84:	e8 79 94 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100028c89:	48 89 83 b8 00 00 00	movq	%rax, 184(%rbx)
100028c90:	48 89 df	movq	%rbx, %rdi
100028c93:	e8 6a 7f ff ff	callq	0x100020c02
100028c98:	e9 e5 f1 ff ff	jmp	0x100027e82
100028c9d:	f6 45 b8 10	testb	$16, -72(%rbp)
100028ca1:	0f 85 27 04 00 00	jne	0x1000290ce
100028ca7:	48 8d 15 1e 67 02 00	leaq	157470(%rip), %rdx ## literal pool for: "Audit session for user-login domain does not have graphical access."
100028cae:	e9 1b df ff ff	jmp	0x100026bce
100028cb3:	41 f6 c6 01	testb	$1, %r14b
100028cb7:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
100028cbe:	74 1d	je	0x100028cdd
100028cc0:	48 8d 15 46 62 02 00	leaq	156230(%rip), %rdx ## literal pool for: "Ignoring lax activation attempt for unsupported domain: %s"
100028cc7:	48 89 df	movq	%rbx, %rdi
100028cca:	be 04 00 00 00	movl	$4, %esi
100028ccf:	48 8b 8d 80 fb ff ff	movq	-1152(%rbp), %rcx
100028cd6:	31 c0	xorl	%eax, %eax
100028cd8:	e8 4c 77 ff ff	callq	0x100020429
100028cdd:	49 83 e6 fe	andq	$-2, %r14
100028ce1:	4c 89 ee	movq	%r13, %rsi
100028ce4:	41 f6 c6 20	testb	$32, %r14b
100028ce8:	75 3e	jne	0x100028d28
100028cea:	4c 8d 8d 90 fb ff ff	leaq	-1136(%rbp), %r9
100028cf1:	49 c7 01 00 00 00 00	movq	$0, (%r9)
100028cf8:	48 8d 45 90	leaq	-112(%rbp), %rax
100028cfc:	c6 00 00	movb	$0, (%rax)
100028cff:	48 89 04 24	movq	%rax, (%rsp)
100028d03:	48 89 df	movq	%rbx, %rdi
100028d06:	48 8b 95 80 fb ff ff	movq	-1152(%rbp), %rdx
100028d0d:	4c 89 f1	movq	%r14, %rcx
100028d10:	45 31 c0	xorl	%r8d, %r8d
100028d13:	e8 bf bf ff ff	callq	0x100024cd7
100028d18:	85 c0	testl	%eax, %eax
100028d1a:	0f 84 ee 06 00 00	je	0x10002940e
100028d20:	41 89 c6	movl	%eax, %r14d
100028d23:	e9 5a f1 ff ff	jmp	0x100027e82
100028d28:	8b 76 14	movl	20(%rsi), %esi
100028d2b:	48 8d bd 90 fb ff ff	leaq	-1136(%rbp), %rdi
100028d32:	48 89 1f	movq	%rbx, (%rdi)
100028d35:	ba 01 00 00 00	movl	$1, %edx
100028d3a:	e8 4e ce ff ff	callq	0x100025b8d
100028d3f:	48 85 c0	testq	%rax, %rax
100028d42:	0f 84 d4 02 00 00	je	0x10002901c
100028d48:	48 89 c3	movq	%rax, %rbx
100028d4b:	bf 00 02 00 00	movl	$512, %edi
100028d50:	e8 90 47 fe ff	callq	0x10000d4e5
100028d55:	4c 8b ab b0 00 00 00	movq	176(%rbx), %r13
100028d5c:	4d 85 ed	testq	%r13, %r13
100028d5f:	48 89 85 88 fb ff ff	movq	%rax, -1144(%rbp)
100028d66:	0f 84 8b 09 00 00	je	0x1000296f7
100028d6c:	48 89 9d 68 fb ff ff	movq	%rbx, -1176(%rbp)
100028d73:	48 89 c3	movq	%rax, %rbx
100028d76:	45 31 e4	xorl	%r12d, %r12d
100028d79:	41 be 03 00 00 00	movl	$3, %r14d
100028d7f:	49 8d bd c8 00 00 00	leaq	200(%r13), %rdi
100028d86:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
100028d8d:	e8 9a 90 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100028d92:	85 c0	testl	%eax, %eax
100028d94:	75 62	jne	0x100028df8
100028d96:	31 c0	xorl	%eax, %eax
100028d98:	48 89 45 90	movq	%rax, -112(%rbp)
100028d9c:	48 89 85 58 fb ff ff	movq	%rax, -1192(%rbp)
100028da3:	4c 89 ef	movq	%r13, %rdi
100028da6:	48 8d 75 90	leaq	-112(%rbp), %rsi
100028daa:	31 d2	xorl	%edx, %edx
100028dac:	48 8d 8d 58 fb ff ff	leaq	-1192(%rbp), %rcx
100028db3:	e8 e7 bf fe ff	callq	0x100014d9f
100028db8:	41 89 c6	movl	%eax, %r14d
100028dbb:	85 c0	testl	%eax, %eax
100028dbd:	0f 85 37 0c 00 00	jne	0x1000299fa
100028dc3:	48 8b 95 58 fb ff ff	movq	-1192(%rbp), %rdx
100028dca:	49 01 d4	addq	%rdx, %r12
100028dcd:	49 81 fc 80 00 00 00	cmpq	$128, %r12
100028dd4:	0f 83 51 0c 00 00	jae	0x100029a2b
100028dda:	48 8b 75 90	movq	-112(%rbp), %rsi
100028dde:	48 c1 e2 02	shlq	$2, %rdx
100028de2:	48 89 df	movq	%rbx, %rdi
100028de5:	e8 e4 8d 01 00	callq	0x100041bce ## symbol stub for: _memcpy
100028dea:	48 8b 85 58 fb ff ff	movq	-1192(%rbp), %rax
100028df1:	48 8d 1c 83	leaq	(%rbx,%rax,4), %rbx
100028df5:	45 31 f6	xorl	%r14d, %r14d
100028df8:	4d 8b 6d 08	movq	8(%r13), %r13
100028dfc:	4d 85 ed	testq	%r13, %r13
100028dff:	0f 85 7a ff ff ff	jne	0x100028d7f
100028e05:	e9 52 0c 00 00	jmp	0x100029a5c
100028e0a:	4c 85 f6	testq	%r14, %rsi
100028e0d:	0f 85 f3 11 00 00	jne	0x10002a006
100028e13:	4c 89 f3	movq	%r14, %rbx
100028e16:	ba 01 00 00 00	movl	$1, %edx
100028e1b:	48 8d 0d 97 64 02 00	leaq	156823(%rip), %rcx ## literal pool for: "Userspace reboot"
100028e22:	4c 8d 35 fd 44 02 00	leaq	148733(%rip), %r14 ## literal pool for: "userspace reboot"
100028e29:	31 c0	xorl	%eax, %eax
100028e2b:	48 85 de	testq	%rbx, %rsi
100028e2e:	0f 85 d2 11 00 00	jne	0x10002a006
100028e34:	48 89 85 60 fb ff ff	movq	%rax, -1184(%rbp)
100028e3b:	48 89 95 68 fb ff ff	movq	%rdx, -1176(%rbp)
100028e42:	49 89 f4	movq	%rsi, %r12
100028e45:	48 8d 15 ae 64 02 00	leaq	156846(%rip), %rdx ## literal pool for: "%s initiated by: %s"
100028e4c:	4c 8d ad 90 fb ff ff	leaq	-1136(%rbp), %r13
100028e53:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100028e5a:	48 89 df	movq	%rbx, %rdi
100028e5d:	be 05 00 01 00	movl	$65541, %esi
100028e62:	4d 89 e8	movq	%r13, %r8
100028e65:	31 c0	xorl	%eax, %eax
100028e67:	e8 bd 75 ff ff	callq	0x100020429
100028e6c:	48 8d 15 9b 64 02 00	leaq	156827(%rip), %rdx ## literal pool for: "%s: flags = 0x%llx, caller = %s"
100028e73:	48 89 df	movq	%rbx, %rdi
100028e76:	be 05 00 00 00	movl	$5, %esi
100028e7b:	4c 89 f1	movq	%r14, %rcx
100028e7e:	4d 89 e0	movq	%r12, %r8
100028e81:	4d 89 e9	movq	%r13, %r9
100028e84:	31 c0	xorl	%eax, %eax
100028e86:	e8 9e 75 ff ff	callq	0x100020429
100028e8b:	48 8d 05 23 99 03 00	leaq	235811(%rip), %rax
100028e92:	80 38 00	cmpb	$0, (%rax)
100028e95:	74 2b	je	0x100028ec2
100028e97:	4c 8d 35 90 64 02 00	leaq	156816(%rip), %r14 ## literal pool for: "system is in sudden shutdown mode. All processes will be SIGKILLed immediately."
100028e9e:	48 89 df	movq	%rbx, %rdi
100028ea1:	be 04 00 01 00	movl	$65540, %esi
100028ea6:	4c 89 f2	movq	%r14, %rdx
100028ea9:	31 c0	xorl	%eax, %eax
100028eab:	e8 79 75 ff ff	callq	0x100020429
100028eb0:	48 89 df	movq	%rbx, %rdi
100028eb3:	be 05 00 00 00	movl	$5, %esi
100028eb8:	4c 89 f2	movq	%r14, %rdx
100028ebb:	31 c0	xorl	%eax, %eax
100028ebd:	e8 67 75 ff ff	callq	0x100020429
100028ec2:	48 8b bd 68 fb ff ff	movq	-1176(%rbp), %rdi
100028ec9:	48 8b b5 60 fb ff ff	movq	-1184(%rbp), %rsi
100028ed0:	48 8b 95 80 fb ff ff	movq	-1152(%rbp), %rdx
100028ed7:	e8 4c 4b fe ff	callq	0x10000da28
100028edc:	41 89 c6	movl	%eax, %r14d
100028edf:	85 c0	testl	%eax, %eax
100028ee1:	0f 85 94 ef ff ff	jne	0x100027e7b
100028ee7:	48 89 df	movq	%rbx, %rdi
100028eea:	e8 95 56 00 00	callq	0x10002e584
100028eef:	e9 12 11 00 00	jmp	0x10002a006
100028ef4:	31 c0	xorl	%eax, %eax
100028ef6:	48 85 c9	testq	%rcx, %rcx
100028ef9:	49 0f 44 cd	cmoveq	%r13, %rcx
100028efd:	48 8b 59 48	movq	72(%rcx), %rbx
100028f01:	48 85 db	testq	%rbx, %rbx
100028f04:	74 0e	je	0x100028f14
100028f06:	81 7b 14 80 00 00 00	cmpl	$128, 20(%rbx)
100028f0d:	74 07	je	0x100028f16
100028f0f:	48 8b 1b	movq	(%rbx), %rbx
100028f12:	eb ed	jmp	0x100028f01
100028f14:	31 db	xorl	%ebx, %ebx
100028f16:	8b 50 10	movl	16(%rax), %edx
100028f19:	48 8d 35 d1 24 02 00	leaq	140497(%rip), %rsi ## literal pool for: "bootstrap"
100028f20:	4c 89 f7	movq	%r14, %rdi
100028f23:	e8 68 91 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
100028f28:	48 85 db	testq	%rbx, %rbx
100028f2b:	74 12	je	0x100028f3f
100028f2d:	8b 53 10	movl	16(%rbx), %edx
100028f30:	48 8d 35 d1 4b 02 00	leaq	150481(%rip), %rsi ## literal pool for: "exception"
100028f37:	4c 89 f7	movq	%r14, %rdi
100028f3a:	e8 51 91 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
100028f3f:	49 63 55 34	movslq	52(%r13), %rdx
100028f43:	48 8d 35 ef 6e 02 00	leaq	159471(%rip), %rsi ## literal pool for: "audit"
100028f4a:	4c 89 f7	movq	%r14, %rdi
100028f4d:	e8 50 91 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100028f52:	4d 89 34 24	movq	%r14, (%r12)
100028f56:	e9 26 e9 ff ff	jmp	0x100027881
100028f5b:	4c 89 f7	movq	%r14, %rdi
100028f5e:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
100028f65:	e8 f9 4e 00 00	callq	0x10002de63
100028f6a:	85 c0	testl	%eax, %eax
100028f6c:	0f 84 e8 e3 ff ff	je	0x10002735a
100028f72:	89 c3	movl	%eax, %ebx
100028f74:	83 f8 25	cmpl	$37, %eax
100028f77:	0f 84 dd e3 ff ff	je	0x10002735a
100028f7d:	89 df	movl	%ebx, %edi
100028f7f:	e8 8a 91 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100028f84:	48 8d 15 3c 5d 02 00	leaq	154940(%rip), %rdx ## literal pool for: "failed to uncork PID domain on first bootstrap: %d - %s"
100028f8b:	4c 89 f7	movq	%r14, %rdi
100028f8e:	be 05 00 00 00	movl	$5, %esi
100028f93:	89 d9	movl	%ebx, %ecx
100028f95:	49 89 c0	movq	%rax, %r8
100028f98:	31 c0	xorl	%eax, %eax
100028f9a:	e8 8a 74 ff ff	callq	0x100020429
100028f9f:	e9 b6 e3 ff ff	jmp	0x10002735a
100028fa4:	48 8d 35 52 0c 02 00	leaq	134226(%rip), %rsi ## literal pool for: "name"
100028fab:	4c 89 ff	movq	%r15, %rdi
100028fae:	e8 a7 90 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100028fb3:	48 85 c0	testq	%rax, %rax
100028fb6:	0f 84 46 07 00 00	je	0x100029702
100028fbc:	4c 89 a5 90 fb ff ff	movq	%r12, -1136(%rbp)
100028fc3:	48 8d 35 33 0c 02 00	leaq	134195(%rip), %rsi ## literal pool for: "name"
100028fca:	4c 89 ff	movq	%r15, %rdi
100028fcd:	e8 88 90 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100028fd2:	48 85 c0	testq	%rax, %rax
100028fd5:	74 2e	je	0x100029005
100028fd7:	48 89 c3	movq	%rax, %rbx
100028fda:	48 8d 35 9a 5d 02 00	leaq	155034(%rip), %rsi ## literal pool for: "legacy-service-lookup"
100028fe1:	4c 89 ff	movq	%r15, %rdi
100028fe4:	e8 4d 90 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100028fe9:	84 c0	testb	%al, %al
100028feb:	0f 84 cb 08 00 00	je	0x1000298bc
100028ff1:	48 8d bd 90 fb ff ff	leaq	-1136(%rbp), %rdi
100028ff8:	48 89 de	movq	%rbx, %rsi
100028ffb:	e8 3b 4f 00 00	callq	0x10002df3b
100029000:	e9 c2 08 00 00	jmp	0x1000298c7
100029005:	41 be 16 00 00 00	movl	$22, %r14d
10002900b:	e9 72 ee ff ff	jmp	0x100027e82
100029010:	48 81 c2 d0 03 00 00	addq	$976, %rdx
100029017:	e9 4f 01 00 00	jmp	0x10002916b
10002901c:	41 be 71 00 00 00	movl	$113, %r14d
100029022:	e9 5b ee ff ff	jmp	0x100027e82
100029027:	48 8d 35 7a 5c 02 00	leaq	154746(%rip), %rsi ## literal pool for: "paths"
10002902e:	4c 89 ff	movq	%r15, %rdi
100029031:	e8 36 90 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100029036:	48 85 c0	testq	%rax, %rax
100029039:	0f 84 51 fc ff ff	je	0x100028c90
10002903f:	49 89 c5	movq	%rax, %r13
100029042:	48 89 c7	movq	%rax, %rdi
100029045:	e8 7c 90 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002904a:	48 3b 05 af f0 02 00	cmpq	192687(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100029051:	0f 85 39 fc ff ff	jne	0x100028c90
100029057:	48 8d 35 52 22 02 00	leaq	139858(%rip), %rsi ## literal pool for: "environment"
10002905e:	4c 89 ff	movq	%r15, %rdi
100029061:	e8 06 90 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100029066:	48 85 c0	testq	%rax, %rax
100029069:	74 18	je	0x100029083
10002906b:	49 89 c4	movq	%rax, %r12
10002906e:	48 89 c7	movq	%rax, %rdi
100029071:	e8 50 90 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100029076:	48 3b 05 83 f0 02 00	cmpq	192643(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002907d:	0f 84 44 0e 00 00	je	0x100029ec7
100029083:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
10002908a:	e9 04 fc ff ff	jmp	0x100028c93
10002908f:	48 8d 8d 90 fb ff ff	leaq	-1136(%rbp), %rcx
100029096:	c7 01 ff ff ff ff	movl	$4294967295, (%rcx)
10002909c:	89 df	movl	%ebx, %edi
10002909e:	4c 89 e6	movq	%r12, %rsi
1000290a1:	ba 01 00 00 00	movl	$1, %edx
1000290a6:	e8 de 2c 00 00	callq	0x10002bd89
1000290ab:	48 85 c0	testq	%rax, %rax
1000290ae:	0f 84 6d 07 00 00	je	0x100029821
1000290b4:	4c 8b a8 d0 03 00 00	movq	976(%rax), %r13
1000290bb:	4d 85 ed	testq	%r13, %r13
1000290be:	4c 0f 44 e8	cmoveq	%rax, %r13
1000290c2:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
1000290c9:	e9 66 eb ff ff	jmp	0x100027c34
1000290ce:	83 fb ff	cmpl	$-1, %ebx
1000290d1:	0f 84 56 07 00 00	je	0x10002982d
1000290d7:	48 39 3d 72 a4 03 00	cmpq	%rdi, 238706(%rip)
1000290de:	0f 84 91 08 00 00	je	0x100029975
1000290e4:	48 8d 15 25 63 02 00	leaq	156453(%rip), %rdx ## literal pool for: "Domain cannot be converted into a user login."
1000290eb:	e9 de da ff ff	jmp	0x100026bce
1000290f0:	be 13 00 00 00	movl	$19, %esi
1000290f5:	4c 89 e7	movq	%r12, %rdi
1000290f8:	e8 b9 28 fe ff	callq	0x10000b9b6
1000290fd:	41 be 90 00 00 00	movl	$144, %r14d
100029103:	84 c0	testb	%al, %al
100029105:	0f 84 70 ed ff ff	je	0x100027e7b
10002910b:	48 8d 35 b8 61 02 00	leaq	156088(%rip), %rsi ## literal pool for: "incoming_root"
100029112:	4c 89 ff	movq	%r15, %rdi
100029115:	e8 40 8f 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002911a:	48 85 c0	testq	%rax, %rax
10002911d:	74 33	je	0x100029152
10002911f:	48 89 c7	movq	%rax, %rdi
100029122:	e8 bb 5e fe ff	callq	0x10000efe2
100029127:	48 8b b5 80 fb ff ff	movq	-1152(%rbp), %rsi
10002912e:	48 89 d9	movq	%rbx, %rcx
100029131:	48 85 de	testq	%rbx, %rsi
100029134:	0f 85 cc 0e 00 00	jne	0x10002a006
10002913a:	ba 02 00 00 00	movl	$2, %edx
10002913f:	48 8d 0d 9d 61 02 00	leaq	156061(%rip), %rcx ## literal pool for: "Pivot-root"
100029146:	4c 8d 35 8b 61 02 00	leaq	156043(%rip), %r14 ## literal pool for: "pivot-root"
10002914d:	e9 d9 fc ff ff	jmp	0x100028e2b
100029152:	41 be 16 00 00 00	movl	$22, %r14d
100029158:	e9 1e ed ff ff	jmp	0x100027e7b
10002915d:	48 8b 95 88 fb ff ff	movq	-1144(%rbp), %rdx
100029164:	48 81 c2 c8 00 00 00	addq	$200, %rdx
10002916b:	48 8b 02	movq	(%rdx), %rax
10002916e:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
100029175:	48 85 c0	testq	%rax, %rax
100029178:	0f 84 b3 00 00 00	je	0x100029231
10002917e:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
100029185:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002918c:	a9 03 02 00 00	testl	$515, %eax
100029191:	0f 85 9a 00 00 00	jne	0x100029231
100029197:	31 c9	xorl	%ecx, %ecx
100029199:	4c 8d 3d f5 16 02 00	leaq	136949(%rip), %r15 ## literal pool for: "pid"
1000291a0:	4c 8d 25 a6 5f 02 00	leaq	155558(%rip), %r12 ## literal pool for: "status"
1000291a7:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
1000291ae:	48 89 8d 88 fb ff ff	movq	%rcx, -1144(%rbp)
1000291b5:	48 8b 9c c8 30 01 00 00	movq	304(%rax,%rcx,8), %rbx
1000291bd:	48 85 db	testq	%rbx, %rbx
1000291c0:	74 5b	je	0x10002921d
1000291c2:	31 ff	xorl	%edi, %edi
1000291c4:	31 f6	xorl	%esi, %esi
1000291c6:	31 d2	xorl	%edx, %edx
1000291c8:	e8 45 8e 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000291cd:	49 89 c6	movq	%rax, %r14
1000291d0:	48 89 df	movq	%rbx, %rdi
1000291d3:	e8 29 26 ff ff	callq	0x10001b801
1000291d8:	48 63 d0	movslq	%eax, %rdx
1000291db:	4c 89 f7	movq	%r14, %rdi
1000291de:	4c 89 fe	movq	%r15, %rsi
1000291e1:	e8 9e 8e 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000291e6:	48 89 df	movq	%rbx, %rdi
1000291e9:	e8 7e 2c ff ff	callq	0x10001be6c
1000291ee:	48 63 50 1c	movslq	28(%rax), %rdx
1000291f2:	4c 89 f7	movq	%r14, %rdi
1000291f5:	4c 89 e6	movq	%r12, %rsi
1000291f8:	e8 87 8e 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000291fd:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
100029204:	4c 89 ef	movq	%r13, %rdi
100029207:	4c 89 f2	movq	%r14, %rdx
10002920a:	e8 9f 8e 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002920f:	4c 89 f7	movq	%r14, %rdi
100029212:	e8 e5 8e 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100029217:	48 8b 5b 68	movq	104(%rbx), %rbx
10002921b:	eb a0	jmp	0x1000291bd
10002921d:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
100029224:	48 ff c1	incq	%rcx
100029227:	48 83 f9 17	cmpq	$23, %rcx
10002922b:	0f 85 76 ff ff ff	jne	0x1000291a7
100029231:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
100029238:	48 8b 8d 68 fb ff ff	movq	-1176(%rbp), %rcx
10002923f:	48 89 08	movq	%rcx, (%rax)
100029242:	e9 3a e6 ff ff	jmp	0x100027881
100029247:	8b bd 54 fb ff ff	movl	-1196(%rbp), %edi
10002924d:	be 11 00 00 00	movl	$17, %esi
100029252:	e8 8d 8e 01 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
100029257:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
10002925e:	41 8b 76 14	movl	20(%r14), %esi
100029262:	48 8d bd 58 fb ff ff	leaq	-1192(%rbp), %rdi
100029269:	ba 01 00 00 00	movl	$1, %edx
10002926e:	e8 1a c9 ff ff	callq	0x100025b8d
100029273:	49 89 c5	movq	%rax, %r13
100029276:	48 8b 80 38 01 00 00	movq	312(%rax), %rax
10002927d:	41 be 25 00 00 00	movl	$37, %r14d
100029283:	48 89 85 68 fb ff ff	movq	%rax, -1176(%rbp)
10002928a:	48 85 c0	testq	%rax, %rax
10002928d:	0f 85 bf 00 00 00	jne	0x100029352
100029293:	4c 8b b5 58 fb ff ff	movq	-1192(%rbp), %r14
10002929a:	4d 89 b5 38 01 00 00	movq	%r14, 312(%r13)
1000292a1:	41 83 bd 18 01 00 00 00	cmpl	$0, 280(%r13)
1000292a9:	0f 84 91 00 00 00	je	0x100029340
1000292af:	66 0f 6f 05 c9 9f 01 00	movdqa	106441(%rip), %xmm0
1000292b7:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000292bb:	66 0f 7f 46 30	movdqa	%xmm0, 48(%rsi)
1000292c0:	66 0f 7f 46 20	movdqa	%xmm0, 32(%rsi)
1000292c5:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
1000292ca:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
1000292ce:	48 8d 9d 90 fb ff ff	leaq	-1136(%rbp), %rbx
1000292d5:	66 0f 7f 43 70	movdqa	%xmm0, 112(%rbx)
1000292da:	66 0f 7f 43 60	movdqa	%xmm0, 96(%rbx)
1000292df:	66 0f 7f 43 50	movdqa	%xmm0, 80(%rbx)
1000292e4:	66 0f 7f 43 40	movdqa	%xmm0, 64(%rbx)
1000292e9:	66 0f 7f 43 30	movdqa	%xmm0, 48(%rbx)
1000292ee:	66 0f 7f 43 20	movdqa	%xmm0, 32(%rbx)
1000292f3:	66 0f 7f 43 10	movdqa	%xmm0, 16(%rbx)
1000292f8:	66 0f 7f 03	movdqa	%xmm0, (%rbx)
1000292fc:	4c 89 e7	movq	%r12, %rdi
1000292ff:	e8 59 b5 00 00	callq	0x10003485d
100029304:	48 8d 15 78 62 02 00	leaq	156280(%rip), %rdx ## literal pool for: "com.apple.xpc.launchd.external-activation.%s"
10002930b:	be 80 00 00 00	movl	$128, %esi
100029310:	48 89 df	movq	%rbx, %rdi
100029313:	48 89 c1	movq	%rax, %rcx
100029316:	31 c0	xorl	%eax, %eax
100029318:	e8 e5 8a 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
10002931d:	4c 89 f7	movq	%r14, %rdi
100029320:	4c 89 ee	movq	%r13, %rsi
100029323:	48 89 da	movq	%rbx, %rdx
100029326:	48 8b 8d 80 fb ff ff	movq	-1152(%rbp), %rcx
10002932d:	45 31 c0	xorl	%r8d, %r8d
100029330:	e8 93 46 00 00	callq	0x10002d9c8
100029335:	4c 89 f7	movq	%r14, %rdi
100029338:	4c 89 ee	movq	%r13, %rsi
10002933b:	e8 d2 23 00 00	callq	0x10002b712
100029340:	4c 89 f7	movq	%r14, %rdi
100029343:	e8 72 7f ff ff	callq	0x1000212ba
100029348:	45 31 f6	xorl	%r14d, %r14d
10002934b:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100029352:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100029359:	e8 9e 8d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002935e:	48 83 bd 68 fb ff ff 00	cmpq	$0, -1176(%rbp)
100029366:	0f 84 de 04 00 00	je	0x10002984a
10002936c:	44 89 f7	movl	%r14d, %edi
10002936f:	e8 9a 8d 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100029374:	48 8d 15 ca 61 02 00	leaq	156106(%rip), %rdx ## literal pool for: "Could not add external activation on session: %d: %s"
10002937b:	48 89 df	movq	%rbx, %rdi
10002937e:	be 03 00 00 00	movl	$3, %esi
100029383:	44 89 f1	movl	%r14d, %ecx
100029386:	49 89 c0	movq	%rax, %r8
100029389:	31 c0	xorl	%eax, %eax
10002938b:	e8 99 70 ff ff	callq	0x100020429
100029390:	e9 e6 ea ff ff	jmp	0x100027e7b
100029395:	48 89 df	movq	%rbx, %rdi
100029398:	4c 89 f6	movq	%r14, %rsi
10002939b:	e8 81 ae ff ff	callq	0x100024221
1000293a0:	48 85 c0	testq	%rax, %rax
1000293a3:	74 5e	je	0x100029403
1000293a5:	48 89 c3	movq	%rax, %rbx
1000293a8:	48 89 c7	movq	%rax, %rdi
1000293ab:	be 09 00 00 00	movl	$9, %esi
1000293b0:	e8 0f 1b ff ff	callq	0x10001aec4
1000293b5:	85 c0	testl	%eax, %eax
1000293b7:	0f 84 72 05 00 00	je	0x10002992f
1000293bd:	41 89 c6	movl	%eax, %r14d
1000293c0:	83 f8 25	cmpl	$37, %eax
1000293c3:	0f 85 1c 07 00 00	jne	0x100029ae5
1000293c9:	83 bb 5c 01 00 00 ff	cmpl	$-1, 348(%rbx)
1000293d0:	0f 84 59 05 00 00	je	0x10002992f
1000293d6:	48 89 df	movq	%rbx, %rdi
1000293d9:	e8 23 24 ff ff	callq	0x10001b801
1000293de:	41 89 c6	movl	%eax, %r14d
1000293e1:	4c 89 ff	movq	%r15, %rdi
1000293e4:	e8 35 8c 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000293e9:	48 89 c3	movq	%rax, %rbx
1000293ec:	49 63 d6	movslq	%r14d, %rdx
1000293ef:	48 8d 35 9f 14 02 00	leaq	136351(%rip), %rsi ## literal pool for: "pid"
1000293f6:	48 89 c7	movq	%rax, %rdi
1000293f9:	e8 86 8c 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000293fe:	e9 74 e4 ff ff	jmp	0x100027877
100029403:	41 be 71 00 00 00	movl	$113, %r14d
100029409:	e9 6d ea ff ff	jmp	0x100027e7b
10002940e:	4c 89 ff	movq	%r15, %rdi
100029411:	e8 08 8c 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029416:	49 89 c6	movq	%rax, %r14
100029419:	48 8b bd 90 fb ff ff	movq	-1136(%rbp), %rdi
100029420:	e8 c5 8c 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
100029425:	48 8d 35 b7 1d 02 00	leaq	138679(%rip), %rsi ## literal pool for: "port"
10002942c:	4c 89 f7	movq	%r14, %rdi
10002942f:	89 c2	movl	%eax, %edx
100029431:	e8 54 8c 01 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
100029436:	80 7d 90 00	cmpb	$0, -112(%rbp)
10002943a:	74 14	je	0x100029450
10002943c:	48 8d 35 bc 5a 02 00	leaq	154300(%rip), %rsi ## literal pool for: "non-launching"
100029443:	4c 89 f7	movq	%r14, %rdi
100029446:	ba 01 00 00 00	movl	$1, %edx
10002944b:	e8 28 8c 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
100029450:	48 8b bd 90 fb ff ff	movq	-1136(%rbp), %rdi
100029457:	e8 a0 8c 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002945c:	e9 7b 06 00 00	jmp	0x100029adc
100029461:	48 8d 05 01 93 03 00	leaq	234241(%rip), %rax
100029468:	80 38 00	cmpb	$0, (%rax)
10002946b:	0f 84 b3 04 00 00	je	0x100029924
100029471:	48 8d 05 f0 92 03 00	leaq	234224(%rip), %rax
100029478:	c6 00 01	movb	$1, (%rax)
10002947b:	e8 be 86 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
100029480:	48 8d 0d e9 92 03 00	leaq	234217(%rip), %rcx
100029487:	8b 11	movl	(%rcx), %edx
100029489:	89 c7	movl	%eax, %edi
10002948b:	be 10 00 00 00	movl	$16, %esi
100029490:	e8 5b 86 01 00	callq	0x100041af0 ## symbol stub for: _host_set_special_port
100029495:	48 8b 9d 70 fb ff ff	movq	-1168(%rbp), %rbx
10002949c:	4c 89 ff	movq	%r15, %rdi
10002949f:	e8 7a 8b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000294a4:	48 89 03	movq	%rax, (%rbx)
1000294a7:	e9 d5 e3 ff ff	jmp	0x100027881
1000294ac:	31 db	xorl	%ebx, %ebx
1000294ae:	0f b6 d3	movzbl	%bl, %edx
1000294b1:	48 8d 35 e7 b2 01 00	leaq	111335(%rip), %rsi ## literal pool for: "enabled"
1000294b8:	4c 89 ff	movq	%r15, %rdi
1000294bb:	e8 b8 8b 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
1000294c0:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
1000294c7:	4c 89 38	movq	%r15, (%rax)
1000294ca:	e9 b3 e9 ff ff	jmp	0x100027e82
1000294cf:	4c 89 ee	movq	%r13, %rsi
1000294d2:	e8 30 4c 00 00	callq	0x10002e107
1000294d7:	84 c0	testb	%al, %al
1000294d9:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
1000294e0:	0f 84 15 e0 ff ff	je	0x1000274fb
1000294e6:	4c 89 ff	movq	%r15, %rdi
1000294e9:	e8 30 8b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000294ee:	48 85 c0	testq	%rax, %rax
1000294f1:	0f 84 8b e9 ff ff	je	0x100027e82
1000294f7:	49 89 c7	movq	%rax, %r15
1000294fa:	4c 89 ef	movq	%r13, %rdi
1000294fd:	e8 4a 8a 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100029502:	48 85 c0	testq	%rax, %rax
100029505:	74 78	je	0x10002957f
100029507:	31 db	xorl	%ebx, %ebx
100029509:	4c 89 ef	movq	%r13, %rdi
10002950c:	48 89 de	movq	%rbx, %rsi
10002950f:	e8 3e 8a 01 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100029514:	48 85 c0	testq	%rax, %rax
100029517:	74 56	je	0x10002956f
100029519:	49 89 c4	movq	%rax, %r12
10002951c:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100029523:	48 89 c6	movq	%rax, %rsi
100029526:	ba 02 00 00 00	movl	$2, %edx
10002952b:	e8 aa 1c 00 00	callq	0x10002b1da
100029530:	85 c0	testl	%eax, %eax
100029532:	74 3b	je	0x10002956f
100029534:	41 89 c6	movl	%eax, %r14d
100029537:	4c 89 ff	movq	%r15, %rdi
10002953a:	4c 89 e6	movq	%r12, %rsi
10002953d:	31 d2	xorl	%edx, %edx
10002953f:	e8 40 8b 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100029544:	44 89 f7	movl	%r14d, %edi
100029547:	e8 c2 8b 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002954c:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100029553:	be 04 00 00 00	movl	$4, %esi
100029558:	48 8d 15 61 5a 02 00	leaq	154209(%rip), %rdx ## literal pool for: "Failed to enable service %s, error=%d - %s"
10002955f:	4c 89 e1	movq	%r12, %rcx
100029562:	45 89 f0	movl	%r14d, %r8d
100029565:	49 89 c1	movq	%rax, %r9
100029568:	31 c0	xorl	%eax, %eax
10002956a:	e8 ba 6e ff ff	callq	0x100020429
10002956f:	48 ff c3	incq	%rbx
100029572:	4c 89 ef	movq	%r13, %rdi
100029575:	e8 d2 89 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10002957a:	48 39 c3	cmpq	%rax, %rbx
10002957d:	72 8a	jb	0x100029509
10002957f:	e8 bc 3b 01 00	callq	0x10003d140
100029584:	48 8b 85 70 fb ff ff	movq	-1168(%rbp), %rax
10002958b:	4c 89 38	movq	%r15, (%rax)
10002958e:	e9 89 01 00 00	jmp	0x10002971c
100029593:	48 8d 35 4e 59 02 00	leaq	153934(%rip), %rsi ## literal pool for: "lookup-handle"
10002959a:	4c 89 ff	movq	%r15, %rdi
10002959d:	e8 be 8a 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000295a2:	48 89 85 68 fb ff ff	movq	%rax, -1176(%rbp)
1000295a9:	48 8d 35 d0 08 02 00	leaq	133328(%rip), %rsi ## literal pool for: "instance"
1000295b0:	4c 89 ff	movq	%r15, %rdi
1000295b3:	e8 ae 8a 01 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
1000295b8:	48 89 85 80 fb ff ff	movq	%rax, -1152(%rbp)
1000295bf:	f6 c3 24	testb	$36, %bl
1000295c2:	74 14	je	0x1000295d8
1000295c4:	41 be 16 00 00 00	movl	$22, %r14d
1000295ca:	48 83 bd 80 fb ff ff 00	cmpq	$0, -1152(%rbp)
1000295d2:	0f 84 aa e8 ff ff	je	0x100027e82
1000295d8:	48 8d 95 90 fb ff ff	leaq	-1136(%rbp), %rdx
1000295df:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
1000295e6:	48 8d 35 09 59 02 00	leaq	153865(%rip), %rsi ## literal pool for: "cputypes"
1000295ed:	4c 89 ff	movq	%r15, %rdi
1000295f0:	e8 4d 8a 01 00	callq	0x100042042 ## symbol stub for: _xpc_dictionary_get_data
1000295f5:	0f ba e3 0a	btl	$10, %ebx
1000295f9:	0f 82 83 02 00 00	jb	0x100029882
1000295ff:	4c 89 2c 24	movq	%r13, (%rsp)
100029603:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
10002960a:	4c 89 e6	movq	%r12, %rsi
10002960d:	48 8b 95 68 fb ff ff	movq	-1176(%rbp), %rdx
100029614:	48 89 d9	movq	%rbx, %rcx
100029617:	4c 8b 85 80 fb ff ff	movq	-1152(%rbp), %r8
10002961e:	49 89 c1	movq	%rax, %r9
100029621:	e8 43 be ff ff	callq	0x100025469
100029626:	41 89 d6	movl	%edx, %r14d
100029629:	85 d2	testl	%edx, %edx
10002962b:	0f 85 51 e8 ff ff	jne	0x100027e82
100029631:	48 89 c3	movq	%rax, %rbx
100029634:	4c 89 ff	movq	%r15, %rdi
100029637:	e8 e2 89 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002963c:	49 89 c6	movq	%rax, %r14
10002963f:	48 89 df	movq	%rbx, %rdi
100029642:	be 01 00 00 00	movl	$1, %esi
100029647:	e8 2e 1e 01 00	callq	0x10003b47a
10002964c:	48 8d 35 90 1b 02 00	leaq	138128(%rip), %rsi ## literal pool for: "port"
100029653:	4c 89 f7	movq	%r14, %rdi
100029656:	48 89 c2	movq	%rax, %rdx
100029659:	e8 50 8a 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002965e:	80 7b 50 00	cmpb	$0, 80(%rbx)
100029662:	0f 89 18 d2 ff ff	jns	0x100026880
100029668:	48 8d 35 90 58 02 00	leaq	153744(%rip), %rsi ## literal pool for: "non-launching"
10002966f:	4c 89 f7	movq	%r14, %rdi
100029672:	ba 01 00 00 00	movl	$1, %edx
100029677:	e8 fc 89 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002967c:	e9 ff d1 ff ff	jmp	0x100026880
100029681:	66 0f 6f 05 f7 9b 01 00	movdqa	105463(%rip), %xmm0
100029689:	48 8d b5 90 fb ff ff	leaq	-1136(%rbp), %rsi
100029690:	66 0f 7f 46 30	movdqa	%xmm0, 48(%rsi)
100029695:	66 0f 7f 46 20	movdqa	%xmm0, 32(%rsi)
10002969a:	66 0f 7f 46 10	movdqa	%xmm0, 16(%rsi)
10002969f:	66 0f 7f 06	movdqa	%xmm0, (%rsi)
1000296a3:	4c 8b 65 90	movq	-112(%rbp), %r12
1000296a7:	4c 89 f3	movq	%r14, %rbx
1000296aa:	48 81 c3 18 05 00 00	addq	$1304, %rbx
1000296b1:	4c 89 ef	movq	%r13, %rdi
1000296b4:	e8 a4 b1 00 00	callq	0x10003485d
1000296b9:	45 8b 4d 14	movl	20(%r13), %r9d
1000296bd:	48 8d 15 2e 5a 02 00	leaq	154158(%rip), %rdx ## literal pool for: "caller removing service: service = %s, caller = %s.%d"
1000296c4:	4c 89 e7	movq	%r12, %rdi
1000296c7:	be 05 00 00 00	movl	$5, %esi
1000296cc:	48 89 d9	movq	%rbx, %rcx
1000296cf:	49 89 c0	movq	%rax, %r8
1000296d2:	31 c0	xorl	%eax, %eax
1000296d4:	e8 50 6d ff ff	callq	0x100020429
1000296d9:	4c 89 e7	movq	%r12, %rdi
1000296dc:	4c 89 f6	movq	%r14, %rsi
1000296df:	e8 68 82 ff ff	callq	0x10002194c
1000296e4:	83 f8 24	cmpl	$36, %eax
1000296e7:	74 21	je	0x10002970a
1000296e9:	41 89 c6	movl	%eax, %r14d
1000296ec:	45 85 f6	testl	%r14d, %r14d
1000296ef:	0f 85 8d e7 ff ff	jne	0x100027e82
1000296f5:	eb 13	jmp	0x10002970a
1000296f7:	41 be 03 00 00 00	movl	$3, %r14d
1000296fd:	e9 5f 03 00 00	jmp	0x100029a61
100029702:	4c 89 e7	movq	%r12, %rdi
100029705:	e8 f8 74 ff ff	callq	0x100020c02
10002970a:	4c 89 ff	movq	%r15, %rdi
10002970d:	e8 0c 89 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029712:	48 8b 8d 70 fb ff ff	movq	-1168(%rbp), %rcx
100029719:	48 89 01	movq	%rax, (%rcx)
10002971c:	45 31 f6	xorl	%r14d, %r14d
10002971f:	e9 5e e7 ff ff	jmp	0x100027e82
100029724:	41 8b 74 24 04	movl	4(%r12), %esi
100029729:	48 8d 3d f8 8a 03 00	leaq	232184(%rip), %rdi
100029730:	e8 76 18 00 00	callq	0x10002afab
100029735:	48 85 c0	testq	%rax, %rax
100029738:	74 52	je	0x10002978c
10002973a:	48 8b 80 d0 03 00 00	movq	976(%rax), %rax
100029741:	48 89 85 60 fb ff ff	movq	%rax, -1184(%rbp)
100029748:	48 85 c0	testq	%rax, %rax
10002974b:	0f 84 89 d4 ff ff	je	0x100026bda
100029751:	48 8b 85 60 fb ff ff	movq	-1184(%rbp), %rax
100029758:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002975f:	41 be 7c 00 00 00	movl	$124, %r14d
100029765:	a9 03 02 00 00	testl	$515, %eax
10002976a:	0f 84 78 06 00 00	je	0x100029de8
100029770:	48 8d 0d 77 5b 02 00	leaq	154487(%rip), %rcx ## literal pool for: "fast logout"
100029777:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
10002977e:	4c 89 e6	movq	%r12, %rsi
100029781:	8b 95 68 fb ff ff	movl	-1176(%rbp), %edx
100029787:	e9 e8 e6 ff ff	jmp	0x100027e74
10002978c:	41 be 70 00 00 00	movl	$112, %r14d
100029792:	e9 e4 e6 ff ff	jmp	0x100027e7b
100029797:	48 8d 35 2d 5e 02 00	leaq	155181(%rip), %rsi ## literal pool for: "hardlimit"
10002979e:	4c 89 ff	movq	%r15, %rdi
1000297a1:	e8 c6 88 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000297a6:	48 85 c0	testq	%rax, %rax
1000297a9:	0f 84 cc e6 ff ff	je	0x100027e7b
1000297af:	48 89 c3	movq	%rax, %rbx
1000297b2:	48 89 c7	movq	%rax, %rdi
1000297b5:	e8 0c 89 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000297ba:	48 3b 05 4f e9 02 00	cmpq	190799(%rip), %rax ## literal pool symbol address: __xpc_type_int64
1000297c1:	0f 85 b4 e6 ff ff	jne	0x100027e7b
1000297c7:	48 8d 35 07 5e 02 00	leaq	155143(%rip), %rsi ## literal pool for: "softlimit"
1000297ce:	4c 89 ff	movq	%r15, %rdi
1000297d1:	e8 96 88 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000297d6:	48 85 c0	testq	%rax, %rax
1000297d9:	0f 84 9c e6 ff ff	je	0x100027e7b
1000297df:	49 89 c4	movq	%rax, %r12
1000297e2:	48 89 c7	movq	%rax, %rdi
1000297e5:	e8 dc 88 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000297ea:	48 3b 05 1f e9 02 00	cmpq	190751(%rip), %rax ## literal pool symbol address: __xpc_type_int64
1000297f1:	0f 85 84 e6 ff ff	jne	0x100027e7b
1000297f7:	48 89 df	movq	%rbx, %rdi
1000297fa:	e8 d3 88 01 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
1000297ff:	48 89 c3	movq	%rax, %rbx
100029802:	4c 89 e7	movq	%r12, %rdi
100029805:	e8 c8 88 01 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10002980a:	48 8b bd 80 fb ff ff	movq	-1152(%rbp), %rdi
100029811:	48 89 c6	movq	%rax, %rsi
100029814:	48 89 da	movq	%rbx, %rdx
100029817:	e8 25 b5 00 00	callq	0x100034d41
10002981c:	e9 e5 07 00 00	jmp	0x10002a006
100029821:	44 8b b5 90 fb ff ff	movl	-1136(%rbp), %r14d
100029828:	e9 4e e6 ff ff	jmp	0x100027e7b
10002982d:	48 8d 05 6c 89 03 00	leaq	231788(%rip), %rax
100029834:	48 39 47 60	cmpq	%rax, 96(%rdi)
100029838:	0f 84 d0 02 00 00	je	0x100029b0e
10002983e:	48 8d 15 36 5c 02 00	leaq	154678(%rip), %rdx ## literal pool for: "Domain cannot create LoginWindow session."
100029845:	e9 84 d3 ff ff	jmp	0x100026bce
10002984a:	4c 89 ff	movq	%r15, %rdi
10002984d:	e8 cc 87 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029852:	49 89 c6	movq	%rax, %r14
100029855:	48 8b 83 b0 03 00 00	movq	944(%rbx), %rax
10002985c:	48 85 c0	testq	%rax, %rax
10002985f:	48 0f 45 d8	cmovneq	%rax, %rbx
100029863:	48 8b 43 48	movq	72(%rbx), %rax
100029867:	48 85 c0	testq	%rax, %rax
10002986a:	0f 84 6e e5 ff ff	je	0x100027dde
100029870:	81 78 14 80 00 00 00	cmpl	$128, 20(%rax)
100029877:	0f 84 fd 04 00 00	je	0x100029d7a
10002987d:	48 8b 00	movq	(%rax), %rax
100029880:	eb e5	jmp	0x100029867
100029882:	41 be 16 00 00 00	movl	$22, %r14d
100029888:	48 85 c0	testq	%rax, %rax
10002988b:	0f 84 f1 e5 ff ff	je	0x100027e82
100029891:	48 83 bd 90 fb ff ff 24	cmpq	$36, -1136(%rbp)
100029899:	0f 85 e3 e5 ff ff	jne	0x100027e82
10002989f:	48 8d 0d 92 8a 03 00	leaq	232082(%rip), %rcx
1000298a6:	48 8b 95 88 fb ff ff	movq	-1144(%rbp), %rdx
1000298ad:	48 39 4a 60	cmpq	%rcx, 96(%rdx)
1000298b1:	0f 85 cb e5 ff ff	jne	0x100027e82
1000298b7:	e9 43 fd ff ff	jmp	0x1000295ff
1000298bc:	4c 89 e7	movq	%r12, %rdi
1000298bf:	48 89 de	movq	%rbx, %rsi
1000298c2:	e8 5a a9 ff ff	callq	0x100024221
1000298c7:	49 89 c4	movq	%rax, %r12
1000298ca:	48 85 c0	testq	%rax, %rax
1000298cd:	74 4a	je	0x100029919
1000298cf:	48 8d 35 bb 54 02 00	leaq	152763(%rip), %rsi ## literal pool for: "attempt-unload-protected"
1000298d6:	4c 89 ff	movq	%r15, %rdi
1000298d9:	e8 58 87 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000298de:	0f b6 d0	movzbl	%al, %edx
1000298e1:	4c 89 e7	movq	%r12, %rdi
1000298e4:	4c 89 ee	movq	%r13, %rsi
1000298e7:	e8 6d e9 fe ff	callq	0x100018259
1000298ec:	48 8b bd 90 fb ff ff	movq	-1136(%rbp), %rdi
1000298f3:	85 c0	testl	%eax, %eax
1000298f5:	0f 84 4e 03 00 00	je	0x100029c49
1000298fb:	41 89 c6	movl	%eax, %r14d
1000298fe:	48 8d 0d a5 54 02 00	leaq	152741(%rip), %rcx ## literal pool for: "bootout (%s)"
100029905:	4c 89 ee	movq	%r13, %rsi
100029908:	89 c2	movl	%eax, %edx
10002990a:	49 89 d8	movq	%rbx, %r8
10002990d:	31 c0	xorl	%eax, %eax
10002990f:	e8 60 a4 ff ff	callq	0x100023d74
100029914:	e9 69 e5 ff ff	jmp	0x100027e82
100029919:	41 be 03 00 00 00	movl	$3, %r14d
10002991f:	e9 5e e5 ff ff	jmp	0x100027e82
100029924:	41 be 83 00 00 00	movl	$131, %r14d
10002992a:	e9 4c e5 ff ff	jmp	0x100027e7b
10002992f:	4c 89 ff	movq	%r15, %rdi
100029932:	e8 e7 86 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029937:	49 89 c6	movq	%rax, %r14
10002993a:	48 8b bb 40 01 00 00	movq	320(%rbx), %rdi
100029941:	48 85 ff	testq	%rdi, %rdi
100029944:	75 13	jne	0x100029959
100029946:	31 ff	xorl	%edi, %edi
100029948:	31 f6	xorl	%esi, %esi
10002994a:	e8 f1 85 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10002994f:	48 89 c7	movq	%rax, %rdi
100029952:	48 89 83 40 01 00 00	movq	%rax, 320(%rbx)
100029959:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100029960:	4c 89 f2	movq	%r14, %rdx
100029963:	e8 20 86 01 00	callq	0x100041f88 ## symbol stub for: _xpc_array_set_value
100029968:	4c 89 f7	movq	%r14, %rdi
10002996b:	e8 8c 87 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100029970:	e9 0c df ff ff	jmp	0x100027881
100029975:	45 8b 75 04	movl	4(%r13), %r14d
100029979:	45 85 f6	testl	%r14d, %r14d
10002997c:	75 04	jne	0x100029982
10002997e:	45 8b 75 0c	movl	12(%r13), %r14d
100029982:	44 89 f6	movl	%r14d, %esi
100029985:	48 8d 3d 9c 88 03 00	leaq	231580(%rip), %rdi
10002998c:	e8 1a 16 00 00	callq	0x10002afab
100029991:	48 85 c0	testq	%rax, %rax
100029994:	0f 84 45 03 00 00	je	0x100029cdf
10002999a:	48 89 c3	movq	%rax, %rbx
10002999d:	f6 80 09 04 00 00 10	testb	$16, 1033(%rax)
1000299a4:	75 0e	jne	0x1000299b4
1000299a6:	48 83 bb d0 03 00 00 00	cmpq	$0, 976(%rbx)
1000299ae:	0f 84 2b 03 00 00	je	0x100029cdf
1000299b4:	48 8d 15 83 5a 02 00	leaq	154243(%rip), %rdx ## literal pool for: "Active GUI session already exists for user, pending request."
1000299bb:	45 31 f6	xorl	%r14d, %r14d
1000299be:	4c 8b a5 88 fb ff ff	movq	-1144(%rbp), %r12
1000299c5:	4c 89 e7	movq	%r12, %rdi
1000299c8:	be 04 00 00 00	movl	$4, %esi
1000299cd:	31 c0	xorl	%eax, %eax
1000299cf:	e8 55 6a ff ff	callq	0x100020429
1000299d4:	49 8b 7c 24 78	movq	120(%r12), %rdi
1000299d9:	be 00 00 00 00	movl	$0, %esi
1000299de:	48 85 ff	testq	%rdi, %rdi
1000299e1:	74 07	je	0x1000299ea
1000299e3:	e8 02 87 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
1000299e8:	89 c6	movl	%eax, %esi
1000299ea:	48 89 df	movq	%rbx, %rdi
1000299ed:	4c 89 fa	movq	%r15, %rdx
1000299f0:	b9 02 00 00 00	movl	$2, %ecx
1000299f5:	e9 ea f1 ff ff	jmp	0x100028be4
1000299fa:	44 89 f7	movl	%r14d, %edi
1000299fd:	e8 0c 87 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100029a02:	48 8d 15 75 55 02 00	leaq	152949(%rip), %rdx ## literal pool for: "Could not activate socket named \"%s\": %d: %s"
100029a09:	48 8b bd 68 fb ff ff	movq	-1176(%rbp), %rdi
100029a10:	be 03 00 00 00	movl	$3, %esi
100029a15:	48 8b 8d 80 fb ff ff	movq	-1152(%rbp), %rcx
100029a1c:	45 89 f0	movl	%r14d, %r8d
100029a1f:	49 89 c1	movq	%rax, %r9
100029a22:	31 c0	xorl	%eax, %eax
100029a24:	e8 91 c5 fe ff	callq	0x100015fba
100029a29:	eb 31	jmp	0x100029a5c
100029a2b:	48 8d 15 16 55 02 00	leaq	152854(%rip), %rdx ## literal pool for: "Too many sockets for name \"%s\". Some will be skipped."
100029a32:	48 8b bd 68 fb ff ff	movq	-1176(%rbp), %rdi
100029a39:	be 04 00 00 00	movl	$4, %esi
100029a3e:	48 8b 8d 80 fb ff ff	movq	-1152(%rbp), %rcx
100029a45:	31 c0	xorl	%eax, %eax
100029a47:	e8 6e c5 fe ff	callq	0x100015fba
100029a4c:	4c 89 ef	movq	%r13, %rdi
100029a4f:	e8 e6 b3 fe ff	callq	0x100014e3a
100029a54:	41 80 a5 c4 00 00 00 fe	andb	$-2, 196(%r13)
100029a5c:	45 85 f6	testl	%r14d, %r14d
100029a5f:	74 11	je	0x100029a72
100029a61:	48 8b bd 88 fb ff ff	movq	-1144(%rbp), %rdi
100029a68:	e8 c3 7f 01 00	callq	0x100041a30 ## symbol stub for: _free
100029a6d:	e9 10 e4 ff ff	jmp	0x100027e82
100029a72:	4c 89 ff	movq	%r15, %rdi
100029a75:	e8 a4 85 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029a7a:	49 89 c6	movq	%rax, %r14
100029a7d:	31 ff	xorl	%edi, %edi
100029a7f:	31 f6	xorl	%esi, %esi
100029a81:	e8 ba 84 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100029a86:	49 89 c7	movq	%rax, %r15
100029a89:	4d 85 e4	testq	%r12, %r12
100029a8c:	4c 8b ad 88 fb ff ff	movq	-1144(%rbp), %r13
100029a93:	74 1e	je	0x100029ab3
100029a95:	31 db	xorl	%ebx, %ebx
100029a97:	41 8b 54 9d 00	movl	(%r13,%rbx,4), %edx
100029a9c:	4c 89 ff	movq	%r15, %rdi
100029a9f:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100029aa6:	e8 b9 84 01 00	callq	0x100041f64 ## symbol stub for: _xpc_array_set_fd
100029aab:	48 ff c3	incq	%rbx
100029aae:	49 39 dc	cmpq	%rbx, %r12
100029ab1:	75 e4	jne	0x100029a97
100029ab3:	48 8d 35 29 17 02 00	leaq	137001(%rip), %rsi ## literal pool for: "port"
100029aba:	4c 89 f7	movq	%r14, %rdi
100029abd:	4c 89 fa	movq	%r15, %rdx
100029ac0:	e8 e9 85 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100029ac5:	4c 89 ff	movq	%r15, %rdi
100029ac8:	e8 2f 86 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100029acd:	4c 89 ef	movq	%r13, %rdi
100029ad0:	e8 5b 7f 01 00	callq	0x100041a30 ## symbol stub for: _free
100029ad5:	4c 8b a5 70 fb ff ff	movq	-1168(%rbp), %r12
100029adc:	4d 89 34 24	movq	%r14, (%r12)
100029ae0:	e9 37 fc ff ff	jmp	0x10002971c
100029ae5:	44 89 f7	movl	%r14d, %edi
100029ae8:	e8 21 86 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100029aed:	48 8d 15 6b 57 02 00	leaq	153451(%rip), %rdx ## literal pool for: "Could not legacy-spawn service: %d: %s"
100029af4:	48 89 df	movq	%rbx, %rdi
100029af7:	be 03 00 00 00	movl	$3, %esi
100029afc:	44 89 f1	movl	%r14d, %ecx
100029aff:	49 89 c0	movq	%rax, %r8
100029b02:	31 c0	xorl	%eax, %eax
100029b04:	e8 b1 c4 fe ff	callq	0x100015fba
100029b09:	e9 6d e3 ff ff	jmp	0x100027e7b
100029b0e:	48 8b 3d 3b 9a 03 00	movq	236091(%rip), %rdi
100029b15:	48 85 ff	testq	%rdi, %rdi
100029b18:	74 54	je	0x100029b6e
100029b1a:	f6 87 08 04 00 00 10	testb	$16, 1032(%rdi)
100029b21:	75 3b	jne	0x100029b5e
100029b23:	48 8d 05 a6 89 03 00	leaq	231846(%rip), %rax
100029b2a:	48 89 47 60	movq	%rax, 96(%rdi)
100029b2e:	48 8d 47 18	leaq	24(%rdi), %rax
100029b32:	48 8b 4f 18	movq	24(%rdi), %rcx
100029b36:	48 85 c9	testq	%rcx, %rcx
100029b39:	74 08	je	0x100029b43
100029b3b:	48 8b 57 20	movq	32(%rdi), %rdx
100029b3f:	48 89 51 20	movq	%rdx, 32(%rcx)
100029b43:	48 8b 57 20	movq	32(%rdi), %rdx
100029b47:	48 89 0a	movq	%rcx, (%rdx)
100029b4a:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100029b4e:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100029b52:	e8 82 11 00 00	callq	0x10002acd9
100029b57:	48 8b 3d f2 99 03 00	movq	236018(%rip), %rdi
100029b5e:	e8 9f 70 ff ff	callq	0x100020c02
100029b63:	48 c7 05 e2 99 03 00 00 00 00 00	movq	$0, 236002(%rip)
100029b6e:	48 8d 9d 90 fb ff ff	leaq	-1136(%rbp), %rbx
100029b75:	66 0f 6f 05 03 97 01 00	movdqa	104195(%rip), %xmm0
100029b7d:	66 0f 7f 43 70	movdqa	%xmm0, 112(%rbx)
100029b82:	66 0f 7f 43 60	movdqa	%xmm0, 96(%rbx)
100029b87:	66 0f 7f 43 50	movdqa	%xmm0, 80(%rbx)
100029b8c:	66 0f 7f 43 40	movdqa	%xmm0, 64(%rbx)
100029b91:	66 0f 7f 43 30	movdqa	%xmm0, 48(%rbx)
100029b96:	66 0f 7f 43 20	movdqa	%xmm0, 32(%rbx)
100029b9b:	66 0f 7f 43 10	movdqa	%xmm0, 16(%rbx)
100029ba0:	66 0f 7f 03	movdqa	%xmm0, (%rbx)
100029ba4:	41 8b 4d 14	movl	20(%r13), %ecx
100029ba8:	48 8d 15 f6 58 02 00	leaq	153846(%rip), %rdx ## literal pool for: "loginwindow.%d"
100029baf:	45 31 f6	xorl	%r14d, %r14d
100029bb2:	be 80 00 00 00	movl	$128, %esi
100029bb7:	48 89 df	movq	%rbx, %rdi
100029bba:	31 c0	xorl	%eax, %eax
100029bbc:	e8 41 82 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100029bc1:	4c 89 2c 24	movq	%r13, (%rsp)
100029bc5:	48 8d 3d 5c 86 03 00	leaq	231004(%rip), %rdi
100029bcc:	48 8d 0d e1 58 02 00	leaq	153825(%rip), %rcx ## literal pool for: "LoginWindow"
100029bd3:	be ff ff ff ff	movl	$4294967295, %esi
100029bd8:	48 89 da	movq	%rbx, %rdx
100029bdb:	45 31 c0	xorl	%r8d, %r8d
100029bde:	4c 8b 8d 88 fb ff ff	movq	-1144(%rbp), %r9
100029be5:	e8 ae c2 ff ff	callq	0x100025e98
100029bea:	41 8b 4d 18	movl	24(%r13), %ecx
100029bee:	89 48 34	movl	%ecx, 52(%rax)
100029bf1:	41 8b 4d 0c	movl	12(%r13), %ecx
100029bf5:	89 48 30	movl	%ecx, 48(%rax)
100029bf8:	80 48 58 02	orb	$2, 88(%rax)
100029bfc:	80 88 09 04 00 00 04	orb	$4, 1033(%rax)
100029c03:	48 89 05 46 99 03 00	movq	%rax, 235846(%rip)
100029c0a:	4c 89 ff	movq	%r15, %rdi
100029c0d:	e8 0c 84 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029c12:	48 89 c3	movq	%rax, %rbx
100029c15:	48 8b 05 34 99 03 00	movq	235828(%rip), %rax
100029c1c:	48 8b 50 78	movq	120(%rax), %rdx
100029c20:	48 8d 35 bc 15 02 00	leaq	136636(%rip), %rsi ## literal pool for: "port"
100029c27:	48 89 df	movq	%rbx, %rdi
100029c2a:	e8 7f 84 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100029c2f:	48 8b 3d 1a 99 03 00	movq	235802(%rip), %rdi
100029c36:	4c 89 ee	movq	%r13, %rsi
100029c39:	48 89 da	movq	%rbx, %rdx
100029c3c:	e8 13 7b ff ff	callq	0x100021754
100029c41:	48 89 df	movq	%rbx, %rdi
100029c44:	e9 a7 03 00 00	jmp	0x100029ff0
100029c49:	4c 89 e6	movq	%r12, %rsi
100029c4c:	e8 fb 7c ff ff	callq	0x10002194c
100029c51:	41 89 c6	movl	%eax, %r14d
100029c54:	48 8d 35 11 51 02 00	leaq	151825(%rip), %rsi ## literal pool for: "no-einprogress"
100029c5b:	4c 89 ff	movq	%r15, %rdi
100029c5e:	e8 d3 83 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100029c63:	89 c3	movl	%eax, %ebx
100029c65:	48 8d 35 4b 51 02 00	leaq	151883(%rip), %rsi ## literal pool for: "wait"
100029c6c:	4c 89 ff	movq	%r15, %rdi
100029c6f:	e8 c2 83 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100029c74:	45 85 f6	testl	%r14d, %r14d
100029c77:	0f 84 8d fa ff ff	je	0x10002970a
100029c7d:	41 83 fe 24	cmpl	$36, %r14d
100029c81:	75 09	jne	0x100029c8c
100029c83:	80 f3 01	xorb	$1, %bl
100029c86:	0f 84 7e fa ff ff	je	0x10002970a
100029c8c:	41 83 fe 24	cmpl	$36, %r14d
100029c90:	0f 85 ec e1 ff ff	jne	0x100027e82
100029c96:	34 01	xorb	$1, %al
100029c98:	0f 85 e4 e1 ff ff	jne	0x100027e82
100029c9e:	4c 89 ff	movq	%r15, %rdi
100029ca1:	e8 78 83 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029ca6:	49 89 c6	movq	%rax, %r14
100029ca9:	4c 89 e7	movq	%r12, %rdi
100029cac:	e8 87 45 ff ff	callq	0x10001e238
100029cb1:	89 c7	movl	%eax, %edi
100029cb3:	be 14 00 00 00	movl	$20, %esi
100029cb8:	e8 27 84 01 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
100029cbd:	48 89 c3	movq	%rax, %rbx
100029cc0:	48 8d 35 47 19 02 00	leaq	137543(%rip), %rsi ## literal pool for: "monitor"
100029cc7:	4c 89 f7	movq	%r14, %rdi
100029cca:	48 89 c2	movq	%rax, %rdx
100029ccd:	e8 dc 83 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100029cd2:	48 89 df	movq	%rbx, %rdi
100029cd5:	e8 22 84 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100029cda:	e9 a1 cb ff ff	jmp	0x100026880
100029cdf:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100029ce6:	4c 89 a3 c0 03 00 00	movq	%r12, 960(%rbx)
100029ced:	4c 89 ff	movq	%r15, %rdi
100029cf0:	e8 29 83 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100029cf5:	49 89 c7	movq	%rax, %r15
100029cf8:	48 8d 15 c1 57 02 00	leaq	153537(%rip), %rdx ## literal pool for: "cocooning domain"
100029cff:	48 89 df	movq	%rbx, %rdi
100029d02:	be 05 00 00 00	movl	$5, %esi
100029d07:	31 c0	xorl	%eax, %eax
100029d09:	e8 1b 67 ff ff	callq	0x100020429
100029d0e:	48 8b 73 68	movq	104(%rbx), %rsi
100029d12:	bf 2c 00 00 22	movl	$570425388, %edi
100029d17:	e8 b3 31 fe ff	callq	0x10000cecf
100029d1c:	48 8b 7b 68	movq	104(%rbx), %rdi
100029d20:	90	nop
100029d21:	0f 1f 40 00	nopl	(%rax)
100029d25:	4c 8d ad 90 fb ff ff	leaq	-1136(%rbp), %r13
100029d2c:	41 c7 45 00 00 00 00 00	movl	$0, (%r13)
100029d34:	48 81 c3 f8 00 00 00	addq	$248, %rbx
100029d3b:	44 89 f7	movl	%r14d, %edi
100029d3e:	48 89 de	movq	%rbx, %rsi
100029d41:	ba 01 00 00 00	movl	$1, %edx
100029d46:	4c 89 e9	movq	%r13, %rcx
100029d49:	e8 3b 20 00 00	callq	0x10002bd89
100029d4e:	49 63 55 00	movslq	(%r13), %rdx
100029d52:	48 85 d2	testq	%rdx, %rdx
100029d55:	0f 84 ca 01 00 00	je	0x100029f25
100029d5b:	48 8d 35 15 12 02 00	leaq	135701(%rip), %rsi ## literal pool for: "error"
100029d62:	4c 89 ff	movq	%r15, %rdi
100029d65:	e8 1a 83 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100029d6a:	4c 89 ff	movq	%r15, %rdi
100029d6d:	e8 7e 83 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100029d72:	41 89 c6	movl	%eax, %r14d
100029d75:	e9 73 02 00 00	jmp	0x100029fed
100029d7a:	8b 50 10	movl	16(%rax), %edx
100029d7d:	48 8d 35 f6 57 02 00	leaq	153590(%rip), %rsi ## literal pool for: "exc-port"
100029d84:	4c 89 f7	movq	%r14, %rdi
100029d87:	e8 04 83 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
100029d8c:	e9 4d e0 ff ff	jmp	0x100027dde
100029d91:	48 8d 85 54 fb ff ff	leaq	-1196(%rbp), %rax
100029d98:	48 89 df	movq	%rbx, %rdi
100029d9b:	4c 89 f6	movq	%r14, %rsi
100029d9e:	48 8b 95 88 fb ff ff	movq	-1144(%rbp), %rdx
100029da5:	44 89 e1	movl	%r12d, %ecx
100029da8:	4d 89 e8	movq	%r13, %r8
100029dab:	48 89 c3	movq	%rax, %rbx
100029dae:	49 89 c1	movq	%rax, %r9
100029db1:	e8 fa 4e 00 00	callq	0x10002ecb0
100029db6:	44 8b 33	movl	(%rbx), %r14d
100029db9:	45 85 f6	testl	%r14d, %r14d
100029dbc:	0f 84 38 02 00 00	je	0x100029ffa
100029dc2:	44 89 f7	movl	%r14d, %edi
100029dc5:	e8 44 83 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100029dca:	48 8d 35 35 61 02 00	leaq	155957(%rip), %rsi ## literal pool for: "Domain creation failed: %d %s"
100029dd1:	bf 04 00 00 00	movl	$4, %edi
100029dd6:	44 89 f2	movl	%r14d, %edx
100029dd9:	48 89 c1	movq	%rax, %rcx
100029ddc:	31 c0	xorl	%eax, %eax
100029dde:	e8 e5 b7 00 00	callq	0x1000355c8
100029de3:	e9 15 02 00 00	jmp	0x100029ffd
100029de8:	48 8b bd 60 fb ff ff	movq	-1184(%rbp), %rdi
100029def:	48 8b 47 60	movq	96(%rdi), %rax
100029df3:	48 8b 4f 68	movq	104(%rdi), %rcx
100029df7:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100029dff:	be 03 00 00 00	movl	$3, %esi
100029e04:	31 d2	xorl	%edx, %edx
100029e06:	4d 89 e0	movq	%r12, %r8
100029e09:	45 31 c9	xorl	%r9d, %r9d
100029e0c:	ff 50 68	callq	*104(%rax)
100029e0f:	85 c0	testl	%eax, %eax
100029e11:	74 0e	je	0x100029e21
100029e13:	41 89 c6	movl	%eax, %r14d
100029e16:	3d 96 00 00 00	cmpl	$150, %eax
100029e1b:	0f 85 4f f9 ff ff	jne	0x100029770
100029e21:	48 8b 85 80 fb ff ff	movq	-1152(%rbp), %rax
100029e28:	48 85 d8	testq	%rbx, %rax
100029e2b:	0f 85 d5 01 00 00	jne	0x10002a006
100029e31:	48 0f ba e0 3b	btq	$59, %rax
100029e36:	0f 82 e1 01 00 00	jb	0x10002a01d
100029e3c:	45 31 f6	xorl	%r14d, %r14d
100029e3f:	48 8b 85 60 fb ff ff	movq	-1184(%rbp), %rax
100029e46:	4e 8b ac f0 00 02 00 00	movq	512(%rax,%r14,8), %r13
100029e4e:	4d 85 ed	testq	%r13, %r13
100029e51:	74 2a	je	0x100029e7d
100029e53:	4c 89 eb	movq	%r13, %rbx
100029e56:	4d 8b 6d 48	movq	72(%r13), %r13
100029e5a:	48 89 df	movq	%rbx, %rdi
100029e5d:	e8 70 19 ff ff	callq	0x10001b7d2
100029e62:	80 38 2f	cmpb	$47, (%rax)
100029e65:	74 e7	je	0x100029e4e
100029e67:	48 89 df	movq	%rbx, %rdi
100029e6a:	e8 7c 20 ff ff	callq	0x10001beeb
100029e6f:	84 c0	testb	%al, %al
100029e71:	74 db	je	0x100029e4e
100029e73:	48 89 df	movq	%rbx, %rdi
100029e76:	e8 43 11 ff ff	callq	0x10001afbe
100029e7b:	eb d1	jmp	0x100029e4e
100029e7d:	49 ff c6	incq	%r14
100029e80:	49 83 fe 0d	cmpq	$13, %r14
100029e84:	75 b9	jne	0x100029e3f
100029e86:	48 8b 85 60 fb ff ff	movq	-1184(%rbp), %rax
100029e8d:	4c 8b b0 28 01 00 00	movq	296(%rax), %r14
100029e94:	4d 85 f6	testq	%r14, %r14
100029e97:	0f 84 69 01 00 00	je	0x10002a006
100029e9d:	4c 89 f3	movq	%r14, %rbx
100029ea0:	4d 8b 76 58	movq	88(%r14), %r14
100029ea4:	48 89 df	movq	%rbx, %rdi
100029ea7:	e8 26 19 ff ff	callq	0x10001b7d2
100029eac:	80 38 2f	cmpb	$47, (%rax)
100029eaf:	74 e3	je	0x100029e94
100029eb1:	48 89 df	movq	%rbx, %rdi
100029eb4:	e8 32 20 ff ff	callq	0x10001beeb
100029eb9:	84 c0	testb	%al, %al
100029ebb:	74 d7	je	0x100029e94
100029ebd:	48 89 df	movq	%rbx, %rdi
100029ec0:	e8 f9 10 ff ff	callq	0x10001afbe
100029ec5:	eb cd	jmp	0x100029e94
100029ec7:	48 8d 35 ae 4f 02 00	leaq	151470(%rip), %rsi ## literal pool for: "origin"
100029ece:	4c 89 ff	movq	%r15, %rdi
100029ed1:	e8 84 81 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100029ed6:	48 85 c0	testq	%rax, %rax
100029ed9:	74 16	je	0x100029ef1
100029edb:	48 89 c7	movq	%rax, %rdi
100029ede:	e8 ff 50 fe ff	callq	0x10000efe2
100029ee3:	48 8b 8d 88 fb ff ff	movq	-1144(%rbp), %rcx
100029eea:	48 89 81 d0 00 00 00	movq	%rax, 208(%rcx)
100029ef1:	4c 89 ef	movq	%r13, %rdi
100029ef4:	e8 09 82 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100029ef9:	48 8b 9d 88 fb ff ff	movq	-1144(%rbp), %rbx
100029f00:	48 89 83 d8 00 00 00	movq	%rax, 216(%rbx)
100029f07:	48 8d 15 c5 40 00 00	leaq	16581(%rip), %rdx
100029f0e:	4c 89 e7	movq	%r12, %rdi
100029f11:	48 89 de	movq	%rbx, %rsi
100029f14:	e8 ed 80 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
100029f19:	80 8b 08 04 00 00 08	orb	$8, 1032(%rbx)
100029f20:	e9 e5 f7 ff ff	jmp	0x10002970a
100029f25:	49 89 c4	movq	%rax, %r12
100029f28:	48 83 b8 d0 03 00 00 00	cmpq	$0, 976(%rax)
100029f30:	0f 85 ff 00 00 00	jne	0x10002a035
100029f36:	4c 8b ad 88 fb ff ff	movq	-1144(%rbp), %r13
100029f3d:	4d 89 a5 b0 03 00 00	movq	%r12, 944(%r13)
100029f44:	45 89 b5 b8 03 00 00	movl	%r14d, 952(%r13)
100029f4b:	4c 89 ff	movq	%r15, %rdi
100029f4e:	e8 af 81 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100029f53:	49 89 85 c8 03 00 00	movq	%rax, 968(%r13)
100029f5a:	41 80 8d 09 04 00 00 02	orb	$2, 1033(%r13)
100029f62:	e8 d1 7b 01 00	callq	0x100041b38 ## symbol stub for: _mach_absolute_time
100029f67:	49 89 85 e0 00 00 00	movq	%rax, 224(%r13)
100029f6e:	4c 89 ef	movq	%r13, %rdi
100029f71:	be 15 00 00 00	movl	$21, %esi
100029f76:	e8 75 67 ff ff	callq	0x1000206f0
100029f7b:	4c 89 e7	movq	%r12, %rdi
100029f7e:	be 16 00 00 00	movl	$22, %esi
100029f83:	e8 68 67 ff ff	callq	0x1000206f0
100029f88:	4c 89 ef	movq	%r13, %rdi
100029f8b:	be 11 00 00 00	movl	$17, %esi
100029f90:	e8 5b 67 ff ff	callq	0x1000206f0
100029f95:	45 31 e4	xorl	%r12d, %r12d
100029f98:	4c 8d 35 69 64 ff ff	leaq	-39831(%rip), %r14
100029f9f:	4b 8b 9c e5 30 01 00 00	movq	304(%r13,%r12,8), %rbx
100029fa7:	48 85 db	testq	%rbx, %rbx
100029faa:	74 28	je	0x100029fd4
100029fac:	48 89 de	movq	%rbx, %rsi
100029faf:	48 8b 5b 68	movq	104(%rbx), %rbx
100029fb3:	4c 89 ef	movq	%r13, %rdi
100029fb6:	e8 91 79 ff ff	callq	0x10002194c
100029fbb:	85 c0	testl	%eax, %eax
100029fbd:	74 e8	je	0x100029fa7
100029fbf:	83 f8 24	cmpl	$36, %eax
100029fc2:	74 e3	je	0x100029fa7
100029fc4:	48 63 d0	movslq	%eax, %rdx
100029fc7:	4c 89 f7	movq	%r14, %rdi
100029fca:	4c 89 ee	movq	%r13, %rsi
100029fcd:	e8 d6 77 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100029fd2:	eb d3	jmp	0x100029fa7
100029fd4:	49 ff c4	incq	%r12
100029fd7:	49 83 fc 17	cmpq	$23, %r12
100029fdb:	75 c2	jne	0x100029f9f
100029fdd:	4c 89 ef	movq	%r13, %rdi
100029fe0:	be 11 00 00 00	movl	$17, %esi
100029fe5:	e8 4b 67 ff ff	callq	0x100020735
100029fea:	45 31 f6	xorl	%r14d, %r14d
100029fed:	4c 89 ff	movq	%r15, %rdi
100029ff0:	e8 07 81 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100029ff5:	e9 81 de ff ff	jmp	0x100027e7b
100029ffa:	45 31 f6	xorl	%r14d, %r14d
100029ffd:	45 85 f6	testl	%r14d, %r14d
10002a000:	0f 85 75 de ff ff	jne	0x100027e7b
10002a006:	4c 89 ff	movq	%r15, %rdi
10002a009:	e8 10 80 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a00e:	48 8b 8d 70 fb ff ff	movq	-1168(%rbp), %rcx
10002a015:	48 89 01	movq	%rax, (%rcx)
10002a018:	e9 64 d8 ff ff	jmp	0x100027881
10002a01d:	48 8b bd 60 fb ff ff	movq	-1184(%rbp), %rdi
10002a024:	e8 d9 6b ff ff	callq	0x100020c02
10002a029:	eb db	jmp	0x10002a006
10002a02b:	e8 0c 67 01 00	callq	0x10004073c
10002a030:	e8 3d 77 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002a035:	e8 ed 66 01 00	callq	0x100040727
10002a03a:	66 90	nop
10002a03c:	35 d2 ff ff ec	xorl	$3976200146, %eax
	.byte 0xc5 #bad opcode
	.byte 0xff #bad opcode
10002a043:	ff 62 c6	jmpq	*-58(%rdx)
	.byte 0xff #bad opcode
10002a047:	ff 53 d3	callq	*-45(%rbx)
	.byte 0xff #bad opcode
10002a04b:	ff 0b	decl	(%rbx)
	.byte 0xc7 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xde #bad opcode
10002a051:	d3 ff	sarl	%cl, %edi
10002a053:	ff a7 c7 ff ff f5	jmpq	*-167772217(%rdi)
	.byte 0xc7 #bad opcode
	.byte 0xff #bad opcode
10002a05b:	ff 63 d4	jmpq	*-44(%rbx)
	.byte 0xff #bad opcode
10002a05f:	ff 53 c8	callq	*-56(%rbx)
	.byte 0xff #bad opcode
10002a063:	ff 46 de	incl	-34(%rsi)
	.byte 0xff #bad opcode
10002a067:	ff e2	jmpq	*%rdx
	.byte 0xd4 #bad opcode
	.byte 0xff #bad opcode
10002a06b:	ff d6	callq	*%rsi
10002a06d:	c8 ff ff 72	enter	$-1, $114
10002a071:	c9	leave
	.byte 0xff #bad opcode
10002a073:	ff 41 d5	incl	-43(%rcx)
	.byte 0xff #bad opcode
10002a077:	ff c9	decl	%ecx
	.byte 0xd5 #bad opcode
	.byte 0xff #bad opcode
10002a07b:	ff 12	callq	*(%rdx)
	.byte 0xd6 #bad opcode
	.byte 0xff #bad opcode
10002a07f:	ff b1 d6 ff ff b6	pushq	-1224736810(%rcx)
	.byte 0xc5 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10002a088:	fd	std
10002a089:	c9	leave
	.byte 0xff #bad opcode
10002a08b:	ff 12	callq	*(%rdx)
10002a08d:	d7	xlatb
	.byte 0xff #bad opcode
10002a08f:	ff 58 ca	lcalll	*-54(%rax)
	.byte 0xff #bad opcode
10002a093:	ff d7	callq	*%rdi
	.byte 0xc5 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdd #bad opcode
10002a099:	ca ff ff	lretl	$-1
10002a09c:	70 cb	jo	0x10002a069
	.byte 0xff #bad opcode
10002a09f:	ff 5c d7 ff	lcalll	*-1(%rdi,%rdx,8)
10002a0a3:	ff d7	callq	*%rdi
	.byte 0xc5 #bad opcode
	.byte 0xff #bad opcode
10002a0a7:	ff 03	incl	(%rbx)
10002a0a9:	d8 ff	fdivr	%st(7), %st
10002a0ab:	ff a9 cb ff ff ea	ljmpl	*-352321589(%rcx)
10002a0b1:	cb	lretl
	.byte 0xff #bad opcode
10002a0b3:	ff 4d d8	decl	-40(%rbp)
	.byte 0xff #bad opcode
10002a0b7:	ff 1c cc	lcalll	*(%rsp,%rcx,8)
	.byte 0xff #bad opcode
10002a0bb:	ff 6a d8	ljmpl	*-40(%rdx)
	.byte 0xff #bad opcode
10002a0bf:	ff 02	incl	(%rdx)
10002a0c1:	cd ff	int	$255
10002a0c3:	ff 22	jmpq	*(%rdx)
	.byte 0xdb #bad opcode
	.byte 0xff #bad opcode
10002a0c7:	ff 93 db ff ff be	callq	*-1090519077(%rbx)
	.byte 0xce #bad opcode
	.byte 0xff #bad opcode
10002a0cf:	ff 2e	ljmpl	*(%rsi)
10002a0d1:	dc ff	fdivr	%st, %st(7)
10002a0d3:	ff b6 c5 ff ff 5c	pushq	1560281029(%rsi)
10002a0d9:	cf	iretl
	.byte 0xff #bad opcode
10002a0db:	ff 85 d0 ff ff f3	incl	-201326640(%rbp)
10002a0e1:	d0 ff	sarb	%bh
	.byte 0xff #bad opcode
10002a0e4:	ba d1 ff ff 55	movl	$1442840529, %edx
10002a0e9:	48 89 e5	movq	%rsp, %rbp
10002a0ec:	41 57	pushq	%r15
10002a0ee:	41 56	pushq	%r14
10002a0f0:	41 55	pushq	%r13
10002a0f2:	41 54	pushq	%r12
10002a0f4:	53	pushq	%rbx
10002a0f5:	48 83 ec 38	subq	$56, %rsp
10002a0f9:	49 89 ce	movq	%rcx, %r14
10002a0fc:	49 89 d7	movq	%rdx, %r15
10002a0ff:	41 89 f4	movl	%esi, %r12d
10002a102:	48 8d 55 bc	leaq	-68(%rbp), %rdx
10002a106:	c7 02 00 00 00 00	movl	$0, (%rdx)
10002a10c:	4c 89 ff	movq	%r15, %rdi
10002a10f:	be 01 00 00 00	movl	$1, %esi
10002a114:	e8 05 0f 00 00	callq	0x10002b01e
10002a119:	48 85 c0	testq	%rax, %rax
10002a11c:	74 5c	je	0x10002a17a
10002a11e:	49 89 c5	movq	%rax, %r13
10002a121:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002a128:	bb 7c 00 00 00	movl	$124, %ebx
10002a12d:	a9 03 02 00 00	testl	$515, %eax
10002a132:	75 49	jne	0x10002a17d
10002a134:	bb 2d 00 00 00	movl	$45, %ebx
10002a139:	48 8d 05 f8 81 03 00	leaq	229880(%rip), %rax
10002a140:	49 39 45 60	cmpq	%rax, 96(%r13)
10002a144:	74 37	je	0x10002a17d
10002a146:	66 41 83 bd a8 00 00 00 00	cmpw	$0, 168(%r13)
10002a14f:	74 3d	je	0x10002a18e
10002a151:	49 8b 7d 78	movq	120(%r13), %rdi
10002a155:	31 db	xorl	%ebx, %ebx
10002a157:	be 00 00 00 00	movl	$0, %esi
10002a15c:	48 85 ff	testq	%rdi, %rdi
10002a15f:	74 07	je	0x10002a168
10002a161:	e8 84 7f 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10002a166:	89 c6	movl	%eax, %esi
10002a168:	4c 89 ef	movq	%r13, %rdi
10002a16b:	4c 89 fa	movq	%r15, %rdx
10002a16e:	b9 01 00 00 00	movl	$1, %ecx
10002a173:	e8 1a 3f 00 00	callq	0x10002e092
10002a178:	eb 03	jmp	0x10002a17d
10002a17a:	8b 5d bc	movl	-68(%rbp), %ebx
10002a17d:	89 d8	movl	%ebx, %eax
10002a17f:	48 83 c4 38	addq	$56, %rsp
10002a183:	5b	popq	%rbx
10002a184:	41 5c	popq	%r12
10002a186:	41 5d	popq	%r13
10002a188:	41 5e	popq	%r14
10002a18a:	41 5f	popq	%r15
10002a18c:	5d	popq	%rbp
10002a18d:	c3	retq
10002a18e:	e8 91 f7 00 00	callq	0x100039924
10002a193:	41 81 c4 38 ff ff ff	addl	$4294967096, %r12d
10002a19a:	41 83 fc 0b	cmpl	$11, %r12d
10002a19e:	0f 87 ab 03 00 00	ja	0x10002a54f
10002a1a4:	49 89 c0	movq	%rax, %r8
10002a1a7:	48 8d 05 42 06 00 00	leaq	1602(%rip), %rax
10002a1ae:	4a 63 0c a0	movslq	(%rax,%r12,4), %rcx
10002a1b2:	48 01 c1	addq	%rax, %rcx
10002a1b5:	ff e1	jmpq	*%rcx
10002a1b7:	4c 89 e9	movq	%r13, %rcx
10002a1ba:	48 89 c8	movq	%rcx, %rax
10002a1bd:	48 8b 89 c8 00 00 00	movq	200(%rcx), %rcx
10002a1c4:	48 85 c9	testq	%rcx, %rcx
10002a1c7:	75 f1	jne	0x10002a1ba
10002a1c9:	f6 80 08 04 00 00 01	testb	$1, 1032(%rax)
10002a1d0:	bb 7c 00 00 00	movl	$124, %ebx
10002a1d5:	75 a6	jne	0x10002a17d
10002a1d7:	49 8b 45 60	movq	96(%r13), %rax
10002a1db:	49 8b 4d 68	movq	104(%r13), %rcx
10002a1df:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002a1e7:	4c 89 ef	movq	%r13, %rdi
10002a1ea:	be 01 00 00 00	movl	$1, %esi
10002a1ef:	31 d2	xorl	%edx, %edx
10002a1f1:	45 31 c9	xorl	%r9d, %r9d
10002a1f4:	ff 50 68	callq	*104(%rax)
10002a1f7:	89 c3	movl	%eax, %ebx
10002a1f9:	85 c0	testl	%eax, %eax
10002a1fb:	75 80	jne	0x10002a17d
10002a1fd:	4c 89 ff	movq	%r15, %rdi
10002a200:	e8 19 7e 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a205:	49 89 06	movq	%rax, (%r14)
10002a208:	49 8b 55 78	movq	120(%r13), %rdx
10002a20c:	48 8d 35 bb 5d 02 00	leaq	155067(%rip), %rsi ## literal pool for: "subsetport"
10002a213:	48 89 c7	movq	%rax, %rdi
10002a216:	e8 93 7e 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002a21b:	e9 fe 01 00 00	jmp	0x10002a41e
10002a220:	4d 89 c4	movq	%r8, %r12
10002a223:	4c 89 ff	movq	%r15, %rdi
10002a226:	e8 f9 7d 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a22b:	bb d0 fe ff ff	movl	$4294966992, %ebx
10002a230:	84 c0	testb	%al, %al
10002a232:	0f 84 45 ff ff ff	je	0x10002a17d
10002a238:	48 8d 35 be f9 01 00	leaq	129470(%rip), %rsi ## literal pool for: "name"
10002a23f:	4c 89 ff	movq	%r15, %rdi
10002a242:	e8 13 7e 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002a247:	48 89 45 d0	movq	%rax, -48(%rbp)
10002a24b:	48 85 c0	testq	%rax, %rax
10002a24e:	0f 84 29 ff ff ff	je	0x10002a17d
10002a254:	48 8d 35 88 0f 02 00	leaq	135048(%rip), %rsi ## literal pool for: "port"
10002a25b:	4c 89 ff	movq	%r15, %rdi
10002a25e:	e8 09 7e 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002a263:	bb 4e 04 00 00	movl	$1102, %ebx
10002a268:	48 85 c0	testq	%rax, %rax
10002a26b:	0f 84 0c ff ff ff	je	0x10002a17d
10002a271:	48 89 45 c8	movq	%rax, -56(%rbp)
10002a275:	48 89 c7	movq	%rax, %rdi
10002a278:	e8 49 7e 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002a27d:	48 3b 05 94 de 02 00	cmpq	188052(%rip), %rax ## literal pool symbol address: __xpc_type_mach_send
10002a284:	0f 85 f3 fe ff ff	jne	0x10002a17d
10002a28a:	48 8d 35 51 4c 02 00	leaq	150609(%rip), %rsi ## literal pool for: "flags"
10002a291:	4c 89 ff	movq	%r15, %rdi
10002a294:	4c 89 e3	movq	%r12, %rbx
10002a297:	e8 c4 7d 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10002a29c:	89 c1	movl	%eax, %ecx
10002a29e:	c1 e9 06	shrl	$6, %ecx
10002a2a1:	83 e1 01	andl	$1, %ecx
10002a2a4:	83 e0 01	andl	$1, %eax
10002a2a7:	48 8d 0c 41	leaq	(%rcx,%rax,2), %rcx
10002a2ab:	48 83 f1 01	xorq	$1, %rcx
10002a2af:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002a2b7:	4c 89 ef	movq	%r13, %rdi
10002a2ba:	4c 89 e6	movq	%r12, %rsi
10002a2bd:	48 8b 55 d0	movq	-48(%rbp), %rdx
10002a2c1:	4c 8b 45 c8	movq	-56(%rbp), %r8
10002a2c5:	45 31 c9	xorl	%r9d, %r9d
10002a2c8:	e8 0a aa ff ff	callq	0x100024cd7
10002a2cd:	89 c7	movl	%eax, %edi
10002a2cf:	e8 42 af ff ff	callq	0x100025216
10002a2d4:	89 c3	movl	%eax, %ebx
10002a2d6:	85 c0	testl	%eax, %eax
10002a2d8:	0f 85 9f fe ff ff	jne	0x10002a17d
10002a2de:	4c 89 ff	movq	%r15, %rdi
10002a2e1:	e8 38 7d 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a2e6:	49 89 06	movq	%rax, (%r14)
10002a2e9:	e9 30 01 00 00	jmp	0x10002a41e
10002a2ee:	4d 89 c4	movq	%r8, %r12
10002a2f1:	4c 89 ff	movq	%r15, %rdi
10002a2f4:	e8 2b 7d 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a2f9:	bb d0 fe ff ff	movl	$4294966992, %ebx
10002a2fe:	84 c0	testb	%al, %al
10002a300:	0f 84 77 fe ff ff	je	0x10002a17d
10002a306:	e8 42 f6 00 00	callq	0x10003994d
10002a30b:	41 8b 7c 24 14	movl	20(%r12), %edi
10002a310:	e8 b1 09 ff ff	callq	0x10001acc6
10002a315:	48 85 c0	testq	%rax, %rax
10002a318:	74 15	je	0x10002a32f
10002a31a:	48 89 c7	movq	%rax, %rdi
10002a31d:	e8 fd 1b ff ff	callq	0x10001bf1f
10002a322:	bb 4e 04 00 00	movl	$1102, %ebx
10002a327:	84 c0	testb	%al, %al
10002a329:	0f 85 4e fe ff ff	jne	0x10002a17d
10002a32f:	48 8d 35 ac 0d 02 00	leaq	134572(%rip), %rsi ## literal pool for: "type"
10002a336:	4c 89 ff	movq	%r15, %rdi
10002a339:	e8 22 7d 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10002a33e:	48 83 f8 07	cmpq	$7, %rax
10002a342:	0f 84 11 02 00 00	je	0x10002a559
10002a348:	49 8b 45 60	movq	96(%r13), %rax
10002a34c:	49 8b 4d 68	movq	104(%r13), %rcx
10002a350:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002a358:	4c 89 ef	movq	%r13, %rdi
10002a35b:	be 05 00 00 00	movl	$5, %esi
10002a360:	31 d2	xorl	%edx, %edx
10002a362:	4d 89 e0	movq	%r12, %r8
10002a365:	45 31 c9	xorl	%r9d, %r9d
10002a368:	ff 50 68	callq	*104(%rax)
10002a36b:	85 c0	testl	%eax, %eax
10002a36d:	0f 84 e6 01 00 00	je	0x10002a559
10002a373:	89 c3	movl	%eax, %ebx
10002a375:	48 8d 0d 56 4b 02 00	leaq	150358(%rip), %rcx ## literal pool for: "endpoint lookup"
10002a37c:	4c 89 ef	movq	%r13, %rdi
10002a37f:	4c 89 e6	movq	%r12, %rsi
10002a382:	89 da	movl	%ebx, %edx
10002a384:	31 c0	xorl	%eax, %eax
10002a386:	e8 e9 99 ff ff	callq	0x100023d74
10002a38b:	e9 ed fd ff ff	jmp	0x10002a17d
10002a390:	4c 89 ff	movq	%r15, %rdi
10002a393:	e8 8c 7c 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a398:	bb d0 fe ff ff	movl	$4294966992, %ebx
10002a39d:	84 c0	testb	%al, %al
10002a39f:	0f 84 d8 fd ff ff	je	0x10002a17d
10002a3a5:	4c 89 ff	movq	%r15, %rdi
10002a3a8:	e8 71 7c 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a3ad:	48 89 c3	movq	%rax, %rbx
10002a3b0:	48 8b 05 a1 91 03 00	movq	233889(%rip), %rax
10002a3b7:	48 8b 50 78	movq	120(%rax), %rdx
10002a3bb:	48 8d 35 ca 5c 02 00	leaq	154826(%rip), %rsi ## literal pool for: "rootport"
10002a3c2:	48 89 df	movq	%rbx, %rdi
10002a3c5:	eb 4f	jmp	0x10002a416
10002a3c7:	bb 7e 00 00 00	movl	$126, %ebx
10002a3cc:	e9 ac fd ff ff	jmp	0x10002a17d
10002a3d1:	4c 89 ff	movq	%r15, %rdi
10002a3d4:	e8 4b 7c 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a3d9:	bb 16 00 00 00	movl	$22, %ebx
10002a3de:	84 c0	testb	%al, %al
10002a3e0:	0f 84 97 fd ff ff	je	0x10002a17d
10002a3e6:	48 8d 05 b3 7d 03 00	leaq	228787(%rip), %rax
10002a3ed:	49 39 45 60	cmpq	%rax, 96(%r13)
10002a3f1:	74 07	je	0x10002a3fa
10002a3f3:	4d 8b ad c8 00 00 00	movq	200(%r13), %r13
10002a3fa:	4d 8b 65 78	movq	120(%r13), %r12
10002a3fe:	4c 89 ff	movq	%r15, %rdi
10002a401:	e8 18 7c 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a406:	48 89 c3	movq	%rax, %rbx
10002a409:	48 8d 35 c9 5b 02 00	leaq	154569(%rip), %rsi ## literal pool for: "parent"
10002a410:	48 89 c7	movq	%rax, %rdi
10002a413:	4c 89 e2	movq	%r12, %rdx
10002a416:	e8 93 7c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002a41b:	49 89 1e	movq	%rbx, (%r14)
10002a41e:	31 db	xorl	%ebx, %ebx
10002a420:	e9 58 fd ff ff	jmp	0x10002a17d
10002a425:	4d 89 c4	movq	%r8, %r12
10002a428:	4c 89 ff	movq	%r15, %rdi
10002a42b:	e8 f4 7b 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a430:	bb d0 fe ff ff	movl	$4294966992, %ebx
10002a435:	84 c0	testb	%al, %al
10002a437:	0f 84 40 fd ff ff	je	0x10002a17d
10002a43d:	48 8d 35 b9 f7 01 00	leaq	128953(%rip), %rsi ## literal pool for: "name"
10002a444:	4c 89 ff	movq	%r15, %rdi
10002a447:	e8 0e 7c 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002a44c:	48 85 c0	testq	%rax, %rax
10002a44f:	0f 84 28 fd ff ff	je	0x10002a17d
10002a455:	48 8d 35 86 4a 02 00	leaq	150150(%rip), %rsi ## literal pool for: "flags"
10002a45c:	4c 89 ff	movq	%r15, %rdi
10002a45f:	4c 89 e3	movq	%r12, %rbx
10002a462:	49 89 c4	movq	%rax, %r12
10002a465:	e8 f6 7b 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10002a46a:	31 d2	xorl	%edx, %edx
10002a46c:	4c 8d 4d c0	leaq	-64(%rbp), %r9
10002a470:	49 89 11	movq	%rdx, (%r9)
10002a473:	89 c1	movl	%eax, %ecx
10002a475:	c1 e9 06	shrl	$6, %ecx
10002a478:	83 e1 01	andl	$1, %ecx
10002a47b:	83 e0 01	andl	$1, %eax
10002a47e:	48 8d 0c 41	leaq	(%rcx,%rax,2), %rcx
10002a482:	48 83 f1 01	xorq	$1, %rcx
10002a486:	48 89 14 24	movq	%rdx, (%rsp)
10002a48a:	4c 89 ef	movq	%r13, %rdi
10002a48d:	48 89 de	movq	%rbx, %rsi
10002a490:	4c 89 e2	movq	%r12, %rdx
10002a493:	45 31 c0	xorl	%r8d, %r8d
10002a496:	e8 3c a8 ff ff	callq	0x100024cd7
10002a49b:	89 c7	movl	%eax, %edi
10002a49d:	e8 74 ad ff ff	callq	0x100025216
10002a4a2:	89 c3	movl	%eax, %ebx
10002a4a4:	85 c0	testl	%eax, %eax
10002a4a6:	0f 85 d1 fc ff ff	jne	0x10002a17d
10002a4ac:	4c 89 ff	movq	%r15, %rdi
10002a4af:	e8 6a 7b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a4b4:	49 89 c7	movq	%rax, %r15
10002a4b7:	48 8b 7d c0	movq	-64(%rbp), %rdi
10002a4bb:	e8 2a 7c 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10002a4c0:	48 8d 35 1c 0d 02 00	leaq	134428(%rip), %rsi ## literal pool for: "port"
10002a4c7:	4c 89 ff	movq	%r15, %rdi
10002a4ca:	89 c2	movl	%eax, %edx
10002a4cc:	e8 b9 7b 01 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
10002a4d1:	48 8b 7d c0	movq	-64(%rbp), %rdi
10002a4d5:	e8 22 7c 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002a4da:	4d 89 3e	movq	%r15, (%r14)
10002a4dd:	e9 9b fc ff ff	jmp	0x10002a17d
10002a4e2:	4d 89 c4	movq	%r8, %r12
10002a4e5:	4c 89 ff	movq	%r15, %rdi
10002a4e8:	e8 37 7b 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10002a4ed:	84 c0	testb	%al, %al
10002a4ef:	0f 84 ed 01 00 00	je	0x10002a6e2
10002a4f5:	e8 53 f4 00 00	callq	0x10003994d
10002a4fa:	41 8b 7c 24 14	movl	20(%r12), %edi
10002a4ff:	e8 c2 07 ff ff	callq	0x10001acc6
10002a504:	48 85 c0	testq	%rax, %rax
10002a507:	74 15	je	0x10002a51e
10002a509:	48 89 c7	movq	%rax, %rdi
10002a50c:	e8 0e 1a ff ff	callq	0x10001bf1f
10002a511:	bb 4e 04 00 00	movl	$1102, %ebx
10002a516:	84 c0	testb	%al, %al
10002a518:	0f 85 5f fc ff ff	jne	0x10002a17d
10002a51e:	48 8d 05 7b 7c 03 00	leaq	228475(%rip), %rax
10002a525:	49 39 45 60	cmpq	%rax, 96(%r13)
10002a529:	0f 84 32 01 00 00	je	0x10002a661
10002a52f:	48 8d 15 0e 5b 02 00	leaq	154382(%rip), %rdx ## literal pool for: "Per-user lookup on non-System domain."
10002a536:	4c 89 ef	movq	%r13, %rdi
10002a539:	be 03 00 00 00	movl	$3, %esi
10002a53e:	31 c0	xorl	%eax, %eax
10002a540:	e8 e4 5e ff ff	callq	0x100020429
10002a545:	bb 7d 00 00 00	movl	$125, %ebx
10002a54a:	e9 2e fc ff ff	jmp	0x10002a17d
10002a54f:	bb 21 00 00 00	movl	$33, %ebx
10002a554:	e9 24 fc ff ff	jmp	0x10002a17d
10002a559:	48 8d 35 9d f6 01 00	leaq	128669(%rip), %rsi ## literal pool for: "name"
10002a560:	4c 89 ff	movq	%r15, %rdi
10002a563:	e8 f2 7a 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002a568:	bb d0 fe ff ff	movl	$4294966992, %ebx
10002a56d:	48 89 45 d0	movq	%rax, -48(%rbp)
10002a571:	48 85 c0	testq	%rax, %rax
10002a574:	0f 84 03 fc ff ff	je	0x10002a17d
10002a57a:	48 8d 35 5f 5a 02 00	leaq	154207(%rip), %rsi ## literal pool for: "targetpid"
10002a581:	4c 89 ff	movq	%r15, %rdi
10002a584:	e8 c5 7a 01 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
10002a589:	bb 16 00 00 00	movl	$22, %ebx
10002a58e:	85 c0	testl	%eax, %eax
10002a590:	0f 88 e7 fb ff ff	js	0x10002a17d
10002a596:	48 89 45 a8	movq	%rax, -88(%rbp)
10002a59a:	48 8d 35 df f8 01 00	leaq	129247(%rip), %rsi ## literal pool for: "instance"
10002a5a1:	4c 89 ff	movq	%r15, %rdi
10002a5a4:	e8 bd 7a 01 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
10002a5a9:	48 89 45 c8	movq	%rax, -56(%rbp)
10002a5ad:	48 8d 35 2e 49 02 00	leaq	149806(%rip), %rsi ## literal pool for: "flags"
10002a5b4:	4c 89 ff	movq	%r15, %rdi
10002a5b7:	e8 a4 7a 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10002a5bc:	48 8b 4d c8	movq	-56(%rbp), %rcx
10002a5c0:	a9 20 01 00 00	testl	$288, %eax
10002a5c5:	74 09	je	0x10002a5d0
10002a5c7:	48 85 c9	testq	%rcx, %rcx
10002a5ca:	0f 84 ad fb ff ff	je	0x10002a17d
10002a5d0:	48 89 45 b0	movq	%rax, -80(%rbp)
10002a5d4:	89 c3	movl	%eax, %ebx
10002a5d6:	83 e3 08	andl	$8, %ebx
10002a5d9:	41 8b 7c 24 14	movl	20(%r12), %edi
10002a5de:	e8 e3 06 ff ff	callq	0x10001acc6
10002a5e3:	48 85 c0	testq	%rax, %rax
10002a5e6:	75 11	jne	0x10002a5f9
10002a5e8:	48 8d 05 b1 7b 03 00	leaq	228273(%rip), %rax
10002a5ef:	49 39 45 60	cmpq	%rax, 96(%r13)
10002a5f3:	0f 84 71 01 00 00	je	0x10002a76a
10002a5f9:	48 8b 75 b0	movq	-80(%rbp), %rsi
10002a5fd:	48 89 f1	movq	%rsi, %rcx
10002a600:	48 c1 e9 03	shrq	$3, %rcx
10002a604:	89 c8	movl	%ecx, %eax
10002a606:	83 e0 04	andl	$4, %eax
10002a609:	48 09 d8	orq	%rbx, %rax
10002a60c:	89 f2	movl	%esi, %edx
10002a60e:	83 e2 01	andl	$1, %edx
10002a611:	48 8d 04 50	leaq	(%rax,%rdx,2), %rax
10002a615:	c1 ee 07	shrl	$7, %esi
10002a618:	83 e6 01	andl	$1, %esi
10002a61b:	48 09 c6	orq	%rax, %rsi
10002a61e:	89 c8	movl	%ecx, %eax
10002a620:	83 e0 20	andl	$32, %eax
10002a623:	48 09 f0	orq	%rsi, %rax
10002a626:	83 e1 40	andl	$64, %ecx
10002a629:	48 09 c1	orq	%rax, %rcx
10002a62c:	48 83 f1 01	xorq	$1, %rcx
10002a630:	48 63 55 a8	movslq	-88(%rbp), %rdx
10002a634:	4c 89 24 24	movq	%r12, (%rsp)
10002a638:	4c 89 ef	movq	%r13, %rdi
10002a63b:	48 8b 75 d0	movq	-48(%rbp), %rsi
10002a63f:	4c 8b 45 c8	movq	-56(%rbp), %r8
10002a643:	45 31 c9	xorl	%r9d, %r9d
10002a646:	e8 1e ae ff ff	callq	0x100025469
10002a64b:	85 d2	testl	%edx, %edx
10002a64d:	0f 84 99 00 00 00	je	0x10002a6ec
10002a653:	89 d7	movl	%edx, %edi
10002a655:	e8 bc ab ff ff	callq	0x100025216
10002a65a:	89 c3	movl	%eax, %ebx
10002a65c:	e9 1c fb ff ff	jmp	0x10002a17d
10002a661:	48 8d 35 16 4d 02 00	leaq	150806(%rip), %rsi ## literal pool for: "uid"
10002a668:	4c 89 ff	movq	%r15, %rdi
10002a66b:	e8 fc 79 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002a670:	48 85 c0	testq	%rax, %rax
10002a673:	74 6d	je	0x10002a6e2
10002a675:	48 89 45 d0	movq	%rax, -48(%rbp)
10002a679:	48 89 c7	movq	%rax, %rdi
10002a67c:	e8 45 7a 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002a681:	bb 16 00 00 00	movl	$22, %ebx
10002a686:	48 3b 05 a3 da 02 00	cmpq	187043(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10002a68d:	0f 85 ea fa ff ff	jne	0x10002a17d
10002a693:	48 8b 7d d0	movq	-48(%rbp), %rdi
10002a697:	4c 89 e3	movq	%r12, %rbx
10002a69a:	e8 99 7a 01 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
10002a69f:	48 89 45 c8	movq	%rax, -56(%rbp)
10002a6a3:	89 c1	movl	%eax, %ecx
10002a6a5:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002a6ad:	31 ff	xorl	%edi, %edi
10002a6af:	be 05 00 00 00	movl	$5, %esi
10002a6b4:	31 d2	xorl	%edx, %edx
10002a6b6:	4c 89 65 d0	movq	%r12, -48(%rbp)
10002a6ba:	4d 89 e0	movq	%r12, %r8
10002a6bd:	45 31 c9	xorl	%r9d, %r9d
10002a6c0:	ff 15 ca 7b 03 00	callq	*228298(%rip)
10002a6c6:	89 45 c0	movl	%eax, -64(%rbp)
10002a6c9:	85 c0	testl	%eax, %eax
10002a6cb:	74 6e	je	0x10002a73b
10002a6cd:	89 c3	movl	%eax, %ebx
10002a6cf:	48 8d 0d 94 59 02 00	leaq	154004(%rip), %rcx ## literal pool for: "per-user lookup"
10002a6d6:	4c 89 ef	movq	%r13, %rdi
10002a6d9:	48 8b 75 d0	movq	-48(%rbp), %rsi
10002a6dd:	e9 a0 fc ff ff	jmp	0x10002a382
10002a6e2:	bb 16 00 00 00	movl	$22, %ebx
10002a6e7:	e9 91 fa ff ff	jmp	0x10002a17d
10002a6ec:	48 89 c3	movq	%rax, %rbx
10002a6ef:	4c 89 ff	movq	%r15, %rdi
10002a6f2:	e8 27 79 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a6f7:	49 89 c7	movq	%rax, %r15
10002a6fa:	48 89 df	movq	%rbx, %rdi
10002a6fd:	be 01 00 00 00	movl	$1, %esi
10002a702:	e8 73 0d 01 00	callq	0x10003b47a
10002a707:	48 8d 35 d5 0a 02 00	leaq	133845(%rip), %rsi ## literal pool for: "port"
10002a70e:	4c 89 ff	movq	%r15, %rdi
10002a711:	48 89 c2	movq	%rax, %rdx
10002a714:	e8 95 79 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002a719:	80 7b 50 00	cmpb	$0, 80(%rbx)
10002a71d:	79 14	jns	0x10002a733
10002a71f:	48 8d 35 d9 47 02 00	leaq	149465(%rip), %rsi ## literal pool for: "non-launching"
10002a726:	4c 89 ff	movq	%r15, %rdi
10002a729:	ba 01 00 00 00	movl	$1, %edx
10002a72e:	e8 45 79 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002a733:	4d 89 3e	movq	%r15, (%r14)
10002a736:	e9 e3 fc ff ff	jmp	0x10002a41e
10002a73b:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10002a73f:	48 8b 7d c8	movq	-56(%rbp), %rdi
10002a743:	48 8b 75 d0	movq	-48(%rbp), %rsi
10002a747:	ba 01 00 00 00	movl	$1, %edx
10002a74c:	48 89 d9	movq	%rbx, %rcx
10002a74f:	e8 35 16 00 00	callq	0x10002bd89
10002a754:	48 89 45 d0	movq	%rax, -48(%rbp)
10002a758:	8b 1b	movl	(%rbx), %ebx
10002a75a:	85 db	testl	%ebx, %ebx
10002a75c:	74 54	je	0x10002a7b2
10002a75e:	48 8d 0d 15 59 02 00	leaq	153877(%rip), %rcx ## literal pool for: "per-user creation"
10002a765:	e9 12 fc ff ff	jmp	0x10002a37c
10002a76a:	41 83 7c 24 0c 00	cmpl	$0, 12(%r12)
10002a770:	0f 84 83 fe ff ff	je	0x10002a5f9
10002a776:	41 8b 7c 24 04	movl	4(%r12), %edi
10002a77b:	85 ff	testl	%edi, %edi
10002a77d:	0f 84 76 fe ff ff	je	0x10002a5f9
10002a783:	48 85 db	testq	%rbx, %rbx
10002a786:	0f 85 6d fe ff ff	jne	0x10002a5f9
10002a78c:	48 8d 4d c0	leaq	-64(%rbp), %rcx
10002a790:	c7 01 ff ff ff ff	movl	$4294967295, (%rcx)
10002a796:	4c 89 e6	movq	%r12, %rsi
10002a799:	ba 01 00 00 00	movl	$1, %edx
10002a79e:	e8 e6 15 00 00	callq	0x10002bd89
10002a7a3:	48 85 c0	testq	%rax, %rax
10002a7a6:	74 29	je	0x10002a7d1
10002a7a8:	bb 97 00 00 00	movl	$151, %ebx
10002a7ad:	e9 cb f9 ff ff	jmp	0x10002a17d
10002a7b2:	4c 89 ff	movq	%r15, %rdi
10002a7b5:	e8 64 78 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a7ba:	48 89 c3	movq	%rax, %rbx
10002a7bd:	48 8b 45 d0	movq	-48(%rbp), %rax
10002a7c1:	48 8b 50 78	movq	120(%rax), %rdx
10002a7c5:	48 8d 35 17 0a 02 00	leaq	133655(%rip), %rsi ## literal pool for: "port"
10002a7cc:	e9 f1 fb ff ff	jmp	0x10002a3c2
10002a7d1:	8b 5d c0	movl	-64(%rbp), %ebx
10002a7d4:	89 df	movl	%ebx, %edi
10002a7d6:	e8 33 79 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002a7db:	48 8d 3d 08 58 02 00	leaq	153608(%rip), %rdi ## literal pool for: "Could not hack around <rdar://problem/17243401>. This login will very likely fail: %d: %s"
10002a7e2:	89 de	movl	%ebx, %esi
10002a7e4:	48 89 c2	movq	%rax, %rdx
10002a7e7:	31 c0	xorl	%eax, %eax
10002a7e9:	e8 24 9c 00 00	callq	0x100034412
10002a7ee:	66 90	nop
	.byte 0x8d #bad opcode
10002a7f1:	f9	stc
	.byte 0xff #bad opcode
10002a7f3:	ff c7	incl	%edi
10002a7f5:	f9	stc
	.byte 0xff #bad opcode
10002a7f7:	ff d7	callq	*%rdi
10002a7f9:	fb	sti
	.byte 0xff #bad opcode
10002a7fb:	ff e1	jmpq	*%rcx
10002a7fd:	fb	sti
	.byte 0xff #bad opcode
10002a7ff:	ff 30	pushq	(%rax)
10002a801:	fa	cli
	.byte 0xff #bad opcode
10002a803:	ff 8d f9 ff ff 35	decl	905969657(%rbp)
10002a809:	fc	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xfe #bad opcode
10002a80d:	fa	cli
	.byte 0xff #bad opcode
10002a80f:	ff 8d f9 ff ff f2	decl	-218103815(%rbp)
10002a815:	fc	cld
	.byte 0xff #bad opcode
10002a817:	ff 5f fd	lcalll	*-3(%rdi)
	.byte 0xff #bad opcode
10002a81b:	ff a0 fb ff ff 55	jmpq	*1442840571(%rax)
10002a821:	48 89 e5	movq	%rsp, %rbp
10002a824:	41 57	pushq	%r15
10002a826:	41 56	pushq	%r14
10002a828:	41 55	pushq	%r13
10002a82a:	41 54	pushq	%r12
10002a82c:	53	pushq	%rbx
10002a82d:	48 83 ec 38	subq	$56, %rsp
10002a831:	49 89 ce	movq	%rcx, %r14
10002a834:	49 89 d4	movq	%rdx, %r12
10002a837:	41 89 f5	movl	%esi, %r13d
10002a83a:	48 8d 55 d4	leaq	-44(%rbp), %rdx
10002a83e:	c7 02 00 00 00 00	movl	$0, (%rdx)
10002a844:	4c 89 e7	movq	%r12, %rdi
10002a847:	be 01 00 00 00	movl	$1, %esi
10002a84c:	e8 cd 07 00 00	callq	0x10002b01e
10002a851:	48 85 c0	testq	%rax, %rax
10002a854:	74 53	je	0x10002a8a9
10002a856:	49 89 c7	movq	%rax, %r15
10002a859:	0f b7 80 08 04 00 00	movzwl	1032(%rax), %eax
10002a860:	bb 7c 00 00 00	movl	$124, %ebx
10002a865:	a9 03 02 00 00	testl	$515, %eax
10002a86a:	0f 85 d3 02 00 00	jne	0x10002ab43
10002a870:	49 8b 47 60	movq	96(%r15), %rax
10002a874:	48 8d 0d 25 79 03 00	leaq	227621(%rip), %rcx
10002a87b:	48 39 c8	cmpq	%rcx, %rax
10002a87e:	74 31	je	0x10002a8b1
10002a880:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
10002a887:	75 28	jne	0x10002a8b1
10002a889:	48 8d 15 05 58 02 00	leaq	153605(%rip), %rdx ## literal pool for: "The launch_msg(3) API may only be used on the system or user domains."
10002a890:	4c 89 ff	movq	%r15, %rdi
10002a893:	be 03 00 00 00	movl	$3, %esi
10002a898:	31 c0	xorl	%eax, %eax
10002a89a:	e8 8a 5b ff ff	callq	0x100020429
10002a89f:	bb 7d 00 00 00	movl	$125, %ebx
10002a8a4:	e9 9a 02 00 00	jmp	0x10002ab43
10002a8a9:	8b 5d d4	movl	-44(%rbp), %ebx
10002a8ac:	e9 92 02 00 00	jmp	0x10002ab43
10002a8b1:	48 8d 35 23 58 02 00	leaq	153635(%rip), %rsi ## literal pool for: "justdoit"
10002a8b8:	4c 89 e7	movq	%r12, %rdi
10002a8bb:	e8 76 77 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10002a8c0:	84 c0	testb	%al, %al
10002a8c2:	74 08	je	0x10002a8cc
10002a8c4:	41 80 8f 09 04 00 00 40	orb	$64, 1033(%r15)
10002a8cc:	e8 53 f0 00 00	callq	0x100039924
10002a8d1:	41 83 fd 65	cmpl	$101, %r13d
10002a8d5:	0f 84 f3 00 00 00	je	0x10002a9ce
10002a8db:	bb 21 00 00 00	movl	$33, %ebx
10002a8e0:	41 83 fd 64	cmpl	$100, %r13d
10002a8e4:	0f 85 51 02 00 00	jne	0x10002ab3b
10002a8ea:	48 89 45 c8	movq	%rax, -56(%rbp)
10002a8ee:	48 8d 35 ef 57 02 00	leaq	153583(%rip), %rsi ## literal pool for: "request"
10002a8f5:	4c 89 e7	movq	%r12, %rdi
10002a8f8:	e8 6f 77 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002a8fd:	48 85 c0	testq	%rax, %rax
10002a900:	0f 84 37 01 00 00	je	0x10002aa3d
10002a906:	49 89 c5	movq	%rax, %r13
10002a909:	48 c7 45 c0 00 00 00 00	movq	$0, -64(%rbp)
10002a911:	48 89 c7	movq	%rax, %rdi
10002a914:	e8 ad 77 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002a919:	48 3b 05 08 d8 02 00	cmpq	186376(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002a920:	0f 84 2b 01 00 00	je	0x10002aa51
10002a926:	4c 89 ef	movq	%r13, %rdi
10002a929:	e8 98 77 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002a92e:	bb 16 00 00 00	movl	$22, %ebx
10002a933:	48 3b 05 c6 d7 02 00	cmpq	186310(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002a93a:	0f 85 fb 01 00 00	jne	0x10002ab3b
10002a940:	48 8d 75 a8	leaq	-88(%rbp), %rsi
10002a944:	4c 89 3e	movq	%r15, (%rsi)
10002a947:	48 8b 45 c8	movq	-56(%rbp), %rax
10002a94b:	48 89 46 08	movq	%rax, 8(%rsi)
10002a94f:	48 c7 46 10 00 00 00 00	movq	$0, 16(%rsi)
10002a957:	48 8d 15 91 53 00 00	leaq	21393(%rip), %rdx
10002a95e:	4c 89 ef	movq	%r13, %rdi
10002a961:	e8 a0 76 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10002a966:	49 8b 9f f0 03 00 00	movq	1008(%r15), %rbx
10002a96d:	48 85 db	testq	%rbx, %rbx
10002a970:	0f 84 86 01 00 00	je	0x10002aafc
10002a976:	48 8b 7d b8	movq	-72(%rbp), %rdi
10002a97a:	48 85 ff	testq	%rdi, %rdi
10002a97d:	74 0c	je	0x10002a98b
10002a97f:	e8 78 77 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002a984:	49 8b 9f f0 03 00 00	movq	1008(%r15), %rbx
10002a98b:	49 c7 87 f0 03 00 00 00 00 00 00	movq	$0, 1008(%r15)
10002a996:	4c 89 e7	movq	%r12, %rdi
10002a999:	e8 80 76 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002a99e:	49 89 c6	movq	%rax, %r14
10002a9a1:	48 8d 35 44 57 02 00	leaq	153412(%rip), %rsi ## literal pool for: "response"
10002a9a8:	48 89 c7	movq	%rax, %rdi
10002a9ab:	31 d2	xorl	%edx, %edx
10002a9ad:	e8 f0 76 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10002a9b2:	48 8b bb 00 01 00 00	movq	256(%rbx), %rdi
10002a9b9:	48 85 ff	testq	%rdi, %rdi
10002a9bc:	0f 85 99 01 00 00	jne	0x10002ab5b
10002a9c2:	4c 89 b3 00 01 00 00	movq	%r14, 256(%rbx)
10002a9c9:	e9 6b 01 00 00	jmp	0x10002ab39
10002a9ce:	48 8d 7d a8	leaq	-88(%rbp), %rdi
10002a9d2:	4c 89 3f	movq	%r15, (%rdi)
10002a9d5:	8b 70 14	movl	20(%rax), %esi
10002a9d8:	31 db	xorl	%ebx, %ebx
10002a9da:	31 d2	xorl	%edx, %edx
10002a9dc:	e8 ac b1 ff ff	callq	0x100025b8d
10002a9e1:	48 85 c0	testq	%rax, %rax
10002a9e4:	74 61	je	0x10002aa47
10002a9e6:	49 89 c5	movq	%rax, %r13
10002a9e9:	48 89 c7	movq	%rax, %rdi
10002a9ec:	e8 3e 0e ff ff	callq	0x10001b82f
10002a9f1:	48 85 c0	testq	%rax, %rax
10002a9f4:	0f 84 41 01 00 00	je	0x10002ab3b
10002a9fa:	48 8b 7d a8	movq	-88(%rbp), %rdi
10002a9fe:	31 db	xorl	%ebx, %ebx
10002aa00:	4c 89 ee	movq	%r13, %rsi
10002aa03:	49 89 c5	movq	%rax, %r13
10002aa06:	48 89 c2	movq	%rax, %rdx
10002aa09:	31 c9	xorl	%ecx, %ecx
10002aa0b:	e8 14 5b 00 00	callq	0x100030524
10002aa10:	4c 89 e7	movq	%r12, %rdi
10002aa13:	e8 06 76 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002aa18:	49 89 c4	movq	%rax, %r12
10002aa1b:	48 8d 35 ca 56 02 00	leaq	153290(%rip), %rsi ## literal pool for: "response"
10002aa22:	48 89 c7	movq	%rax, %rdi
10002aa25:	4c 89 ea	movq	%r13, %rdx
10002aa28:	e8 81 76 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002aa2d:	4c 89 ef	movq	%r13, %rdi
10002aa30:	e8 c7 76 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002aa35:	4d 89 26	movq	%r12, (%r14)
10002aa38:	e9 fe 00 00 00	jmp	0x10002ab3b
10002aa3d:	bb 16 00 00 00	movl	$22, %ebx
10002aa42:	e9 f4 00 00 00	jmp	0x10002ab3b
10002aa47:	bb 71 00 00 00	movl	$113, %ebx
10002aa4c:	e9 ea 00 00 00	jmp	0x10002ab3b
10002aa51:	4c 89 ef	movq	%r13, %rdi
10002aa54:	e8 cd 76 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002aa59:	4c 8d 45 c0	leaq	-64(%rbp), %r8
10002aa5d:	4c 89 ff	movq	%r15, %rdi
10002aa60:	48 8b 75 c8	movq	-56(%rbp), %rsi
10002aa64:	48 89 c2	movq	%rax, %rdx
10002aa67:	31 c9	xorl	%ecx, %ecx
10002aa69:	e8 e5 45 00 00	callq	0x10002f053
10002aa6e:	83 f8 24	cmpl	$36, %eax
10002aa71:	74 3b	je	0x10002aaae
10002aa73:	89 c3	movl	%eax, %ebx
10002aa75:	85 c0	testl	%eax, %eax
10002aa77:	0f 85 be 00 00 00	jne	0x10002ab3b
10002aa7d:	4c 89 e7	movq	%r12, %rdi
10002aa80:	e8 99 75 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002aa85:	49 89 c4	movq	%rax, %r12
10002aa88:	48 8b 5d c0	movq	-64(%rbp), %rbx
10002aa8c:	48 8d 35 59 56 02 00	leaq	153177(%rip), %rsi ## literal pool for: "response"
10002aa93:	48 89 c7	movq	%rax, %rdi
10002aa96:	48 89 da	movq	%rbx, %rdx
10002aa99:	e8 10 76 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002aa9e:	48 89 df	movq	%rbx, %rdi
10002aaa1:	e8 56 76 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002aaa6:	4d 89 26	movq	%r12, (%r14)
10002aaa9:	e9 8b 00 00 00	jmp	0x10002ab39
10002aaae:	4d 8b af f0 03 00 00	movq	1008(%r15), %r13
10002aab5:	4d 85 ed	testq	%r13, %r13
10002aab8:	0f 84 96 00 00 00	je	0x10002ab54
10002aabe:	49 c7 87 f0 03 00 00 00 00 00 00	movq	$0, 1008(%r15)
10002aac9:	4c 89 e7	movq	%r12, %rdi
10002aacc:	e8 4d 75 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002aad1:	49 89 c6	movq	%rax, %r14
10002aad4:	48 8d 35 11 56 02 00	leaq	153105(%rip), %rsi ## literal pool for: "response"
10002aadb:	31 db	xorl	%ebx, %ebx
10002aadd:	48 89 c7	movq	%rax, %rdi
10002aae0:	31 d2	xorl	%edx, %edx
10002aae2:	e8 bb 75 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10002aae7:	49 8b bd 00 01 00 00	movq	256(%r13), %rdi
10002aaee:	48 85 ff	testq	%rdi, %rdi
10002aaf1:	75 6d	jne	0x10002ab60
10002aaf3:	4d 89 b5 00 01 00 00	movq	%r14, 256(%r13)
10002aafa:	eb 3f	jmp	0x10002ab3b
10002aafc:	4c 89 e7	movq	%r12, %rdi
10002aaff:	e8 1a 75 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10002ab04:	48 89 c3	movq	%rax, %rbx
10002ab07:	48 8b 55 b8	movq	-72(%rbp), %rdx
10002ab0b:	48 85 d2	testq	%rdx, %rdx
10002ab0e:	75 0e	jne	0x10002ab1e
10002ab10:	31 ff	xorl	%edi, %edi
10002ab12:	e8 1b 76 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002ab17:	48 89 c2	movq	%rax, %rdx
10002ab1a:	48 89 45 b8	movq	%rax, -72(%rbp)
10002ab1e:	48 8d 35 c7 55 02 00	leaq	153031(%rip), %rsi ## literal pool for: "response"
10002ab25:	48 89 df	movq	%rbx, %rdi
10002ab28:	e8 81 75 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002ab2d:	48 8b 7d b8	movq	-72(%rbp), %rdi
10002ab31:	e8 c6 75 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002ab36:	49 89 1e	movq	%rbx, (%r14)
10002ab39:	31 db	xorl	%ebx, %ebx
10002ab3b:	41 80 a7 09 04 00 00 bf	andb	$-65, 1033(%r15)
10002ab43:	89 d8	movl	%ebx, %eax
10002ab45:	48 83 c4 38	addq	$56, %rsp
10002ab49:	5b	popq	%rbx
10002ab4a:	41 5c	popq	%r12
10002ab4c:	41 5d	popq	%r13
10002ab4e:	41 5e	popq	%r14
10002ab50:	41 5f	popq	%r15
10002ab52:	5d	popq	%rbp
10002ab53:	c3	retq
10002ab54:	bb 24 00 00 00	movl	$36, %ebx
10002ab59:	eb e0	jmp	0x10002ab3b
10002ab5b:	e8 04 5c 01 00	callq	0x100040764
10002ab60:	e8 ec 5b 01 00	callq	0x100040751
10002ab65:	55	pushq	%rbp
10002ab66:	48 89 e5	movq	%rsp, %rbp
10002ab69:	53	pushq	%rbx
10002ab6a:	50	pushq	%rax
10002ab6b:	48 8d 05 2e 7c 03 00	leaq	228398(%rip), %rax
10002ab72:	48 83 38 00	cmpq	$0, (%rax)
10002ab76:	0f 84 92 00 00 00	je	0x10002ac0e
10002ab7c:	48 8b 1d d5 89 03 00	movq	231893(%rip), %rbx
10002ab83:	83 8b 08 04 00 00 04	orl	$4, 1032(%rbx)
10002ab8a:	e8 53 25 01 00	callq	0x10003d0e2
10002ab8f:	48 89 83 98 03 00 00	movq	%rax, 920(%rbx)
10002ab96:	48 8d 35 93 7c 03 00	leaq	228499(%rip), %rsi
10002ab9d:	48 89 df	movq	%rbx, %rdi
10002aba0:	31 d2	xorl	%edx, %edx
10002aba2:	e8 ad 6b ff ff	callq	0x100021754
10002aba7:	be 01 00 00 00	movl	$1, %esi
10002abac:	bf 0f 00 00 00	movl	$15, %edi
10002abb1:	e8 40 72 01 00	callq	0x100041df6 ## symbol stub for: _signal
10002abb6:	48 83 f8 ff	cmpq	$-1, %rax
10002abba:	74 59	je	0x10002ac15
10002abbc:	e8 39 39 fe ff	callq	0x10000e4fa
10002abc1:	48 8b 3d a8 d4 02 00	movq	185512(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_signal
10002abc8:	be 0f 00 00 00	movl	$15, %esi
10002abcd:	31 d2	xorl	%edx, %edx
10002abcf:	48 89 c1	movq	%rax, %rcx
10002abd2:	e8 ab 6d 01 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10002abd7:	48 89 05 82 89 03 00	movq	%rax, 231810(%rip)
10002abde:	48 89 c7	movq	%rax, %rdi
10002abe1:	48 89 de	movq	%rbx, %rsi
10002abe4:	e8 8d 6d 01 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10002abe9:	48 8b 3d 70 89 03 00	movq	231792(%rip), %rdi
10002abf0:	48 8d 35 28 00 00 00	leaq	40(%rip), %rsi
10002abf7:	e8 aa 6d 01 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10002abfc:	48 8b 3d 5d 89 03 00	movq	231773(%rip), %rdi
10002ac03:	48 83 c4 08	addq	$8, %rsp
10002ac07:	5b	popq	%rbx
10002ac08:	5d	popq	%rbp
10002ac09:	e9 b4 6c 01 00	jmp	0x1000418c2 ## symbol stub for: _dispatch_activate
10002ac0e:	48 83 c4 08	addq	$8, %rsp
10002ac12:	5b	popq	%rbx
10002ac13:	5d	popq	%rbp
10002ac14:	c3	retq
10002ac15:	48 89 df	movq	%rbx, %rdi
10002ac18:	e8 5a 5b 01 00	callq	0x100040777
10002ac1d:	eb 9d	jmp	0x10002abbc
10002ac1f:	55	pushq	%rbp
10002ac20:	48 89 e5	movq	%rsp, %rbp
10002ac23:	53	pushq	%rbx
10002ac24:	50	pushq	%rax
10002ac25:	48 89 fb	movq	%rdi, %rbx
10002ac28:	48 8d 15 a4 59 02 00	leaq	154020(%rip), %rdx ## literal pool for: "domain SIGTERM event"
10002ac2f:	be 05 00 00 00	movl	$5, %esi
10002ac34:	31 c0	xorl	%eax, %eax
10002ac36:	e8 ee 57 ff ff	callq	0x100020429
10002ac3b:	48 89 df	movq	%rbx, %rdi
10002ac3e:	48 83 c4 08	addq	$8, %rsp
10002ac42:	5b	popq	%rbx
10002ac43:	5d	popq	%rbp
10002ac44:	e9 e0 60 ff ff	jmp	0x100020d29
10002ac49:	55	pushq	%rbp
10002ac4a:	48 89 e5	movq	%rsp, %rbp
10002ac4d:	89 fe	movl	%edi, %esi
10002ac4f:	48 8b 3d 02 89 03 00	movq	231682(%rip), %rdi
10002ac56:	5d	popq	%rbp
10002ac57:	e9 00 00 00 00	jmp	0x10002ac5c
10002ac5c:	55	pushq	%rbp
10002ac5d:	48 89 e5	movq	%rsp, %rbp
10002ac60:	41 57	pushq	%r15
10002ac62:	41 56	pushq	%r14
10002ac64:	41 54	pushq	%r12
10002ac66:	53	pushq	%rbx
10002ac67:	41 89 f6	movl	%esi, %r14d
10002ac6a:	49 89 ff	movq	%rdi, %r15
10002ac6d:	45 31 e4	xorl	%r12d, %r12d
10002ac70:	4b 8b 9c e7 a0 02 00 00	movq	672(%r15,%r12,8), %rbx
10002ac78:	48 85 db	testq	%rbx, %rbx
10002ac7b:	74 20	je	0x10002ac9d
10002ac7d:	48 8b 7b 40	movq	64(%rbx), %rdi
10002ac81:	48 85 ff	testq	%rdi, %rdi
10002ac84:	48 0f 44 fb	cmoveq	%rbx, %rdi
10002ac88:	be 02 00 00 00	movl	$2, %esi
10002ac8d:	e8 d2 fe 00 00	callq	0x10003ab64
10002ac92:	44 39 f0	cmpl	%r14d, %eax
10002ac95:	74 36	je	0x10002accd
10002ac97:	48 8b 5b 18	movq	24(%rbx), %rbx
10002ac9b:	eb db	jmp	0x10002ac78
10002ac9d:	49 ff c4	incq	%r12
10002aca0:	49 83 fc 1f	cmpq	$31, %r12
10002aca4:	75 ca	jne	0x10002ac70
10002aca6:	4d 8b bf 20 01 00 00	movq	288(%r15), %r15
10002acad:	31 db	xorl	%ebx, %ebx
10002acaf:	4d 85 ff	testq	%r15, %r15
10002acb2:	74 19	je	0x10002accd
10002acb4:	4c 89 ff	movq	%r15, %rdi
10002acb7:	44 89 f6	movl	%r14d, %esi
10002acba:	e8 9d ff ff ff	callq	0x10002ac5c
10002acbf:	48 85 c0	testq	%rax, %rax
10002acc2:	75 06	jne	0x10002acca
10002acc4:	4d 8b 7f 08	movq	8(%r15), %r15
10002acc8:	eb e5	jmp	0x10002acaf
10002acca:	48 89 c3	movq	%rax, %rbx
10002accd:	48 89 d8	movq	%rbx, %rax
10002acd0:	5b	popq	%rbx
10002acd1:	41 5c	popq	%r12
10002acd3:	41 5e	popq	%r14
10002acd5:	41 5f	popq	%r15
10002acd7:	5d	popq	%rbp
10002acd8:	c3	retq
10002acd9:	55	pushq	%rbp
10002acda:	48 89 e5	movq	%rsp, %rbp
10002acdd:	53	pushq	%rbx
10002acde:	50	pushq	%rax
10002acdf:	48 89 fb	movq	%rdi, %rbx
10002ace2:	48 8b 7f 60	movq	96(%rdi), %rdi
10002ace6:	48 83 7f 58 00	cmpq	$0, 88(%rdi)
10002aceb:	74 0e	je	0x10002acfb
10002aced:	48 8b 73 68	movq	104(%rbx), %rsi
10002acf1:	e8 b5 02 00 00	callq	0x10002afab
10002acf6:	48 85 c0	testq	%rax, %rax
10002acf9:	75 56	jne	0x10002ad51
10002acfb:	48 8d 7b 68	leaq	104(%rbx), %rdi
10002acff:	be 08 00 00 00	movl	$8, %esi
10002ad04:	e8 70 46 fe ff	callq	0x10000f379
10002ad09:	48 89 c1	movq	%rax, %rcx
10002ad0c:	48 ba a3 8b 2e ba e8 a2 8b 2e	movabsq	$3353953467947191203, %rdx
10002ad16:	48 f7 e2	mulq	%rdx
10002ad19:	48 d1 ea	shrq	%rdx
10002ad1c:	48 8d 04 92	leaq	(%rdx,%rdx,4), %rax
10002ad20:	48 8d 04 42	leaq	(%rdx,%rax,2), %rax
10002ad24:	48 29 c1	subq	%rax, %rcx
10002ad27:	48 8b 43 60	movq	96(%rbx), %rax
10002ad2b:	48 8d 04 c8	leaq	(%rax,%rcx,8), %rax
10002ad2f:	48 8b 08	movq	(%rax), %rcx
10002ad32:	48 89 4b 18	movq	%rcx, 24(%rbx)
10002ad36:	48 85 c9	testq	%rcx, %rcx
10002ad39:	74 08	je	0x10002ad43
10002ad3b:	48 8d 53 18	leaq	24(%rbx), %rdx
10002ad3f:	48 89 51 20	movq	%rdx, 32(%rcx)
10002ad43:	48 89 18	movq	%rbx, (%rax)
10002ad46:	48 89 43 20	movq	%rax, 32(%rbx)
10002ad4a:	48 83 c4 08	addq	$8, %rsp
10002ad4e:	5b	popq	%rbx
10002ad4f:	5d	popq	%rbp
10002ad50:	c3	retq
10002ad51:	48 8b 43 60	movq	96(%rbx), %rax
10002ad55:	48 8b 53 68	movq	104(%rbx), %rdx
10002ad59:	48 8b 70 70	movq	112(%rax), %rsi
10002ad5d:	48 8d 3d 84 58 02 00	leaq	153732(%rip), %rdi ## literal pool for: "refusing to add a duplicate domain: type=%s handle=%lu"
10002ad64:	31 c0	xorl	%eax, %eax
10002ad66:	e8 a7 96 00 00	callq	0x100034412
10002ad6b:	55	pushq	%rbp
10002ad6c:	48 89 e5	movq	%rsp, %rbp
10002ad6f:	41 57	pushq	%r15
10002ad71:	41 56	pushq	%r14
10002ad73:	41 54	pushq	%r12
10002ad75:	53	pushq	%rbx
10002ad76:	49 89 d4	movq	%rdx, %r12
10002ad79:	48 89 f3	movq	%rsi, %rbx
10002ad7c:	49 89 fe	movq	%rdi, %r14
10002ad7f:	48 89 f7	movq	%rsi, %rdi
10002ad82:	e8 3f 73 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002ad87:	48 3b 05 52 d3 02 00	cmpq	185170(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10002ad8e:	74 7a	je	0x10002ae0a
10002ad90:	48 3b 05 79 d3 02 00	cmpq	185209(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10002ad97:	0f 84 81 00 00 00	je	0x10002ae1e
10002ad9d:	48 3b 05 64 d3 02 00	cmpq	185188(%rip), %rax ## literal pool symbol address: __xpc_type_double
10002ada4:	0f 84 92 00 00 00	je	0x10002ae3c
10002adaa:	48 3b 05 3f d3 02 00	cmpq	185151(%rip), %rax ## literal pool symbol address: __xpc_type_data
10002adb1:	0f 84 99 00 00 00	je	0x10002ae50
10002adb7:	48 3b 05 6a d3 02 00	cmpq	185194(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002adbe:	0f 84 a5 00 00 00	je	0x10002ae69
10002adc4:	48 3b 05 0d d3 02 00	cmpq	185101(%rip), %rax ## literal pool symbol address: __xpc_type_array
10002adcb:	0f 84 e8 00 00 00	je	0x10002aeb9
10002add1:	48 3b 05 28 d3 02 00	cmpq	185128(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002add8:	0f 84 e4 00 00 00	je	0x10002aec2
10002adde:	48 89 c7	movq	%rax, %rdi
10002ade1:	e8 46 73 01 00	callq	0x10004212c ## symbol stub for: _xpc_type_get_name
10002ade6:	48 8d 15 32 58 02 00	leaq	153650(%rip), %rdx ## literal pool for: "Invalid type for domain configuration: key = %s, type = %s"
10002aded:	4c 89 e7	movq	%r12, %rdi
10002adf0:	be 03 00 00 00	movl	$3, %esi
10002adf5:	4c 89 f1	movq	%r14, %rcx
10002adf8:	49 89 c0	movq	%rax, %r8
10002adfb:	31 c0	xorl	%eax, %eax
10002adfd:	5b	popq	%rbx
10002adfe:	41 5c	popq	%r12
10002ae00:	41 5e	popq	%r14
10002ae02:	41 5f	popq	%r15
10002ae04:	5d	popq	%rbp
10002ae05:	e9 1f 56 ff ff	jmp	0x100020429
10002ae0a:	48 89 df	movq	%rbx, %rdi
10002ae0d:	e8 82 71 01 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10002ae12:	48 8d 15 50 95 01 00	leaq	103760(%rip), %rdx ## literal pool for: "Unknown key for Boolean: %s"
10002ae19:	e9 c7 00 00 00	jmp	0x10002aee5
10002ae1e:	48 89 df	movq	%rbx, %rdi
10002ae21:	e8 ac 72 01 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10002ae26:	4c 89 e7	movq	%r12, %rdi
10002ae29:	4c 89 f6	movq	%r14, %rsi
10002ae2c:	48 89 c2	movq	%rax, %rdx
10002ae2f:	5b	popq	%rbx
10002ae30:	41 5c	popq	%r12
10002ae32:	41 5e	popq	%r14
10002ae34:	41 5f	popq	%r15
10002ae36:	5d	popq	%rbp
10002ae37:	e9 94 59 00 00	jmp	0x1000307d0
10002ae3c:	48 89 df	movq	%rbx, %rdi
10002ae3f:	e8 70 72 01 00	callq	0x1000420b4 ## symbol stub for: _xpc_double_get_value
10002ae44:	48 8d 15 1a 96 01 00	leaq	103962(%rip), %rdx ## literal pool for: "Unknown key for double: %s"
10002ae4b:	e9 95 00 00 00	jmp	0x10002aee5
10002ae50:	48 89 df	movq	%rbx, %rdi
10002ae53:	e8 96 71 01 00	callq	0x100041fee ## symbol stub for: _xpc_data_get_bytes_ptr
10002ae58:	48 89 df	movq	%rbx, %rdi
10002ae5b:	e8 94 71 01 00	callq	0x100041ff4 ## symbol stub for: _xpc_data_get_length
10002ae60:	48 8d 15 19 96 01 00	leaq	103961(%rip), %rdx ## literal pool for: "Unknown key for data: %s"
10002ae67:	eb 7c	jmp	0x10002aee5
10002ae69:	48 89 df	movq	%rbx, %rdi
10002ae6c:	e8 b5 72 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002ae71:	49 89 c7	movq	%rax, %r15
10002ae74:	41 0f be 06	movsbl	(%r14), %eax
10002ae78:	83 f8 55	cmpl	$85, %eax
10002ae7b:	74 4e	je	0x10002aecb
10002ae7d:	83 f8 50	cmpl	$80, %eax
10002ae80:	75 5c	jne	0x10002aede
10002ae82:	48 8d 35 d1 57 02 00	leaq	153553(%rip), %rsi ## literal pool for: "PathEnvironmentVariable"
10002ae89:	4c 89 f7	movq	%r14, %rdi
10002ae8c:	e8 9b 6f 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002ae91:	85 c0	testl	%eax, %eax
10002ae93:	75 49	jne	0x10002aede
10002ae95:	31 c0	xorl	%eax, %eax
10002ae97:	41 80 3f 00	cmpb	$0, (%r15)
10002ae9b:	4c 0f 44 f8	cmoveq	%rax, %r15
10002ae9f:	48 8d 35 b9 eb 01 00	leaq	125881(%rip), %rsi ## literal pool for: "PATH"
10002aea6:	4c 89 e7	movq	%r12, %rdi
10002aea9:	4c 89 fa	movq	%r15, %rdx
10002aeac:	5b	popq	%rbx
10002aead:	41 5c	popq	%r12
10002aeaf:	41 5e	popq	%r14
10002aeb1:	41 5f	popq	%r15
10002aeb3:	5d	popq	%rbp
10002aeb4:	e9 e8 35 00 00	jmp	0x10002e4a1
10002aeb9:	48 8d 15 8e 96 01 00	leaq	104078(%rip), %rdx ## literal pool for: "Unknown key for array: %s"
10002aec0:	eb 23	jmp	0x10002aee5
10002aec2:	48 8d 15 cd 97 01 00	leaq	104397(%rip), %rdx ## literal pool for: "Unknown key for dictionary: %s"
10002aec9:	eb 1a	jmp	0x10002aee5
10002aecb:	48 8d 35 ee b0 01 00	leaq	110830(%rip), %rsi ## literal pool for: "Umask"
10002aed2:	4c 89 f7	movq	%r14, %rdi
10002aed5:	e8 52 6f 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002aeda:	85 c0	testl	%eax, %eax
10002aedc:	74 21	je	0x10002aeff
10002aede:	48 8d 15 2a 96 01 00	leaq	103978(%rip), %rdx ## literal pool for: "Unknown key for string: %s"
10002aee5:	4c 89 e7	movq	%r12, %rdi
10002aee8:	be 03 00 00 00	movl	$3, %esi
10002aeed:	4c 89 f1	movq	%r14, %rcx
10002aef0:	31 c0	xorl	%eax, %eax
10002aef2:	5b	popq	%rbx
10002aef3:	41 5c	popq	%r12
10002aef5:	41 5e	popq	%r14
10002aef7:	41 5f	popq	%r15
10002aef9:	5d	popq	%rbp
10002aefa:	e9 2a 55 ff ff	jmp	0x100020429
10002aeff:	4c 89 ff	movq	%r15, %rdi
10002af02:	31 f6	xorl	%esi, %esi
10002af04:	31 d2	xorl	%edx, %edx
10002af06:	e8 81 6f 01 00	callq	0x100041e8c ## symbol stub for: _strtoul
10002af0b:	e9 16 ff ff ff	jmp	0x10002ae26
10002af10:	55	pushq	%rbp
10002af11:	48 89 e5	movq	%rsp, %rbp
10002af14:	8b 87 9c 00 00 00	movl	156(%rdi), %eax
10002af1a:	8d 48 01	leal	1(%rax), %ecx
10002af1d:	89 8f 9c 00 00 00	movl	%ecx, 156(%rdi)
10002af23:	85 c0	testl	%eax, %eax
10002af25:	74 02	je	0x10002af29
10002af27:	5d	popq	%rbp
10002af28:	c3	retq
10002af29:	48 8d 05 08 74 03 00	leaq	226312(%rip), %rax
10002af30:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002af34:	74 f1	je	0x10002af27
10002af36:	48 8d 15 35 57 02 00	leaq	153397(%rip), %rdx ## literal pool for: "entering ondemand mode"
10002af3d:	be 05 00 00 00	movl	$5, %esi
10002af42:	31 c0	xorl	%eax, %eax
10002af44:	5d	popq	%rbp
10002af45:	e9 df 54 ff ff	jmp	0x100020429
10002af4a:	55	pushq	%rbp
10002af4b:	48 89 e5	movq	%rsp, %rbp
10002af4e:	53	pushq	%rbx
10002af4f:	50	pushq	%rax
10002af50:	48 89 fb	movq	%rdi, %rbx
10002af53:	48 8d 87 20 01 00 00	leaq	288(%rdi), %rax
10002af5a:	48 8b 8f 20 01 00 00	movq	288(%rdi), %rcx
10002af61:	48 89 4e 08	movq	%rcx, 8(%rsi)
10002af65:	48 85 c9	testq	%rcx, %rcx
10002af68:	74 08	je	0x10002af72
10002af6a:	48 8d 56 08	leaq	8(%rsi), %rdx
10002af6e:	48 89 51 10	movq	%rdx, 16(%rcx)
10002af72:	48 89 b3 20 01 00 00	movq	%rsi, 288(%rbx)
10002af79:	48 89 46 10	movq	%rax, 16(%rsi)
10002af7d:	48 89 f7	movq	%rsi, %rdi
10002af80:	be 04 00 00 00	movl	$4, %esi
10002af85:	e8 44 79 fe ff	callq	0x1000128ce
10002af8a:	48 89 df	movq	%rbx, %rdi
10002af8d:	be 05 00 00 00	movl	$5, %esi
10002af92:	48 83 c4 08	addq	$8, %rsp
10002af96:	5b	popq	%rbx
10002af97:	5d	popq	%rbp
10002af98:	e9 53 57 ff ff	jmp	0x1000206f0
10002af9d:	55	pushq	%rbp
10002af9e:	48 89 e5	movq	%rsp, %rbp
10002afa1:	48 8b 05 b0 85 03 00	movq	230832(%rip), %rax
10002afa8:	5d	popq	%rbp
10002afa9:	c3	retq
10002afaa:	90	nop
10002afab:	55	pushq	%rbp
10002afac:	48 89 e5	movq	%rsp, %rbp
10002afaf:	53	pushq	%rbx
10002afb0:	50	pushq	%rax
10002afb1:	48 89 75 f0	movq	%rsi, -16(%rbp)
10002afb5:	48 8d 05 e4 71 03 00	leaq	225764(%rip), %rax
10002afbc:	48 39 c7	cmpq	%rax, %rdi
10002afbf:	74 4f	je	0x10002b010
10002afc1:	48 89 fb	movq	%rdi, %rbx
10002afc4:	48 8d 7d f0	leaq	-16(%rbp), %rdi
10002afc8:	be 08 00 00 00	movl	$8, %esi
10002afcd:	e8 a7 43 fe ff	callq	0x10000f379
10002afd2:	48 89 c1	movq	%rax, %rcx
10002afd5:	48 ba a3 8b 2e ba e8 a2 8b 2e	movabsq	$3353953467947191203, %rdx
10002afdf:	48 f7 e2	mulq	%rdx
10002afe2:	48 d1 ea	shrq	%rdx
10002afe5:	48 8d 04 92	leaq	(%rdx,%rdx,4), %rax
10002afe9:	48 8d 04 42	leaq	(%rdx,%rax,2), %rax
10002afed:	48 29 c1	subq	%rax, %rcx
10002aff0:	48 8b 04 cb	movq	(%rbx,%rcx,8), %rax
10002aff4:	48 85 c0	testq	%rax, %rax
10002aff7:	74 13	je	0x10002b00c
10002aff9:	48 8b 4d f0	movq	-16(%rbp), %rcx
10002affd:	48 39 48 68	cmpq	%rcx, 104(%rax)
10002b001:	74 14	je	0x10002b017
10002b003:	48 8b 40 18	movq	24(%rax), %rax
10002b007:	48 85 c0	testq	%rax, %rax
10002b00a:	75 f1	jne	0x10002affd
10002b00c:	31 c0	xorl	%eax, %eax
10002b00e:	eb 07	jmp	0x10002b017
10002b010:	48 8b 05 41 85 03 00	movq	230721(%rip), %rax
10002b017:	48 83 c4 08	addq	$8, %rsp
10002b01b:	5b	popq	%rbx
10002b01c:	5d	popq	%rbp
10002b01d:	c3	retq
10002b01e:	55	pushq	%rbp
10002b01f:	48 89 e5	movq	%rsp, %rbp
10002b022:	41 57	pushq	%r15
10002b024:	41 56	pushq	%r14
10002b026:	41 55	pushq	%r13
10002b028:	41 54	pushq	%r12
10002b02a:	53	pushq	%rbx
10002b02b:	48 83 ec 48	subq	$72, %rsp
10002b02f:	49 89 d6	movq	%rdx, %r14
10002b032:	41 89 f7	movl	%esi, %r15d
10002b035:	49 89 fc	movq	%rdi, %r12
10002b038:	0f 28 05 41 82 01 00	movaps	98881(%rip), %xmm0
10002b03f:	48 8d 75 90	leaq	-112(%rbp), %rsi
10002b043:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10002b047:	0f 29 06	movaps	%xmm0, (%rsi)
10002b04a:	e8 e1 6f 01 00	callq	0x100042030 ## symbol stub for: _xpc_dictionary_get_audit_token
10002b04f:	31 db	xorl	%ebx, %ebx
10002b051:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10002b055:	48 89 1e	movq	%rbx, (%rsi)
10002b058:	48 8d 55 b8	leaq	-72(%rbp), %rdx
10002b05c:	48 89 1a	movq	%rbx, (%rdx)
10002b05f:	48 8d 4d c0	leaq	-64(%rbp), %rcx
10002b063:	48 89 19	movq	%rbx, (%rcx)
10002b066:	4c 89 e7	movq	%r12, %rdi
10002b069:	e8 cf 39 00 00	callq	0x10002ea3d
10002b06e:	89 45 d4	movl	%eax, -44(%rbp)
10002b071:	85 c0	testl	%eax, %eax
10002b073:	74 05	je	0x10002b07a
10002b075:	41 89 06	movl	%eax, (%r14)
10002b078:	eb 2a	jmp	0x10002b0a4
10002b07a:	4c 89 75 c8	movq	%r14, -56(%rbp)
10002b07e:	4c 8b 6d b0	movq	-80(%rbp), %r13
10002b082:	4c 8b 75 b8	movq	-72(%rbp), %r14
10002b086:	4c 8b 65 c0	movq	-64(%rbp), %r12
10002b08a:	48 8d 4d 90	leaq	-112(%rbp), %rcx
10002b08e:	4c 89 ef	movq	%r13, %rdi
10002b091:	4c 89 f6	movq	%r14, %rsi
10002b094:	4c 89 e2	movq	%r12, %rdx
10002b097:	e8 a6 3b 00 00	callq	0x10002ec42
10002b09c:	48 89 c3	movq	%rax, %rbx
10002b09f:	48 85 c0	testq	%rax, %rax
10002b0a2:	74 12	je	0x10002b0b6
10002b0a4:	48 89 d8	movq	%rbx, %rax
10002b0a7:	48 83 c4 48	addq	$72, %rsp
10002b0ab:	5b	popq	%rbx
10002b0ac:	41 5c	popq	%r12
10002b0ae:	41 5d	popq	%r13
10002b0b0:	41 5e	popq	%r14
10002b0b2:	41 5f	popq	%r15
10002b0b4:	5d	popq	%rbp
10002b0b5:	c3	retq
10002b0b6:	45 84 ff	testb	%r15b, %r15b
10002b0b9:	74 23	je	0x10002b0de
10002b0bb:	4c 8d 45 90	leaq	-112(%rbp), %r8
10002b0bf:	4c 8d 7d d4	leaq	-44(%rbp), %r15
10002b0c3:	4c 89 ef	movq	%r13, %rdi
10002b0c6:	4c 89 f6	movq	%r14, %rsi
10002b0c9:	4c 89 e2	movq	%r12, %rdx
10002b0cc:	31 c9	xorl	%ecx, %ecx
10002b0ce:	4d 89 f9	movq	%r15, %r9
10002b0d1:	e8 da 3b 00 00	callq	0x10002ecb0
10002b0d6:	48 89 c3	movq	%rax, %rbx
10002b0d9:	41 8b 07	movl	(%r15), %eax
10002b0dc:	eb 21	jmp	0x10002b0ff
10002b0de:	49 8b 55 70	movq	112(%r13), %rdx
10002b0e2:	48 8d 35 0f 56 02 00	leaq	153103(%rip), %rsi ## literal pool for: "Could not find domain from request: type=%s handle=%lu"
10002b0e9:	31 db	xorl	%ebx, %ebx
10002b0eb:	bf 03 00 00 00	movl	$3, %edi
10002b0f0:	4c 89 f1	movq	%r14, %rcx
10002b0f3:	31 c0	xorl	%eax, %eax
10002b0f5:	e8 ce a4 00 00	callq	0x1000355c8
10002b0fa:	b8 70 00 00 00	movl	$112, %eax
10002b0ff:	4c 8b 75 c8	movq	-56(%rbp), %r14
10002b103:	e9 6d ff ff ff	jmp	0x10002b075
10002b108:	55	pushq	%rbp
10002b109:	48 89 e5	movq	%rsp, %rbp
10002b10c:	41 57	pushq	%r15
10002b10e:	41 56	pushq	%r14
10002b110:	53	pushq	%rbx
10002b111:	50	pushq	%rax
10002b112:	44 0f b7 bf a8 00 00 00	movzwl	168(%rdi), %r15d
10002b11a:	66 45 85 ff	testw	%r15w, %r15w
10002b11e:	74 2a	je	0x10002b14a
10002b120:	49 89 f6	movq	%rsi, %r14
10002b123:	48 89 fb	movq	%rdi, %rbx
10002b126:	48 8b 7f 78	movq	120(%rdi), %rdi
10002b12a:	48 85 ff	testq	%rdi, %rdi
10002b12d:	74 09	je	0x10002b138
10002b12f:	e8 b6 6f 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10002b134:	89 c6	movl	%eax, %esi
10002b136:	eb 02	jmp	0x10002b13a
10002b138:	31 f6	xorl	%esi, %esi
10002b13a:	48 89 df	movq	%rbx, %rdi
10002b13d:	4c 89 f2	movq	%r14, %rdx
10002b140:	b9 01 00 00 00	movl	$1, %ecx
10002b145:	e8 48 2f 00 00	callq	0x10002e092
10002b14a:	66 45 85 ff	testw	%r15w, %r15w
10002b14e:	0f 94 c0	sete	%al
10002b151:	48 83 c4 08	addq	$8, %rsp
10002b155:	5b	popq	%rbx
10002b156:	41 5e	popq	%r14
10002b158:	41 5f	popq	%r15
10002b15a:	5d	popq	%rbp
10002b15b:	c3	retq
10002b15c:	55	pushq	%rbp
10002b15d:	48 89 e5	movq	%rsp, %rbp
10002b160:	48 8b 47 60	movq	96(%rdi), %rax
10002b164:	5d	popq	%rbp
10002b165:	c3	retq
10002b166:	55	pushq	%rbp
10002b167:	48 89 e5	movq	%rsp, %rbp
10002b16a:	48 8b 47 68	movq	104(%rdi), %rax
10002b16e:	5d	popq	%rbp
10002b16f:	c3	retq
10002b170:	55	pushq	%rbp
10002b171:	48 89 e5	movq	%rsp, %rbp
10002b174:	48 8b 87 a8 03 00 00	movq	936(%rdi), %rax
10002b17b:	5d	popq	%rbp
10002b17c:	c3	retq
10002b17d:	55	pushq	%rbp
10002b17e:	48 89 e5	movq	%rsp, %rbp
10002b181:	48 8b 47 60	movq	96(%rdi), %rax
10002b185:	48 8d 0d 14 70 03 00	leaq	225300(%rip), %rcx
10002b18c:	48 85 f6	testq	%rsi, %rsi
10002b18f:	74 1f	je	0x10002b1b0
10002b191:	48 39 c8	cmpq	%rcx, %rax
10002b194:	74 31	je	0x10002b1c7
10002b196:	48 8b 87 a8 03 00 00	movq	936(%rdi), %rax
10002b19d:	48 85 c0	testq	%rax, %rax
10002b1a0:	75 2c	jne	0x10002b1ce
10002b1a2:	48 8d 3d 82 20 02 00	leaq	139394(%rip), %rdi ## literal pool for: "non-system session had no name"
10002b1a9:	31 c0	xorl	%eax, %eax
10002b1ab:	e8 62 92 00 00	callq	0x100034412
10002b1b0:	48 39 c8	cmpq	%rcx, %rax
10002b1b3:	0f 94 c1	sete	%cl
10002b1b6:	48 8d 15 f3 70 03 00	leaq	225523(%rip), %rdx
10002b1bd:	48 39 d0	cmpq	%rdx, %rax
10002b1c0:	0f 94 c0	sete	%al
10002b1c3:	08 c8	orb	%cl, %al
10002b1c5:	5d	popq	%rbp
10002b1c6:	c3	retq
10002b1c7:	48 8d 05 9e c4 01 00	leaq	115870(%rip), %rax ## literal pool for: "System"
10002b1ce:	48 89 f7	movq	%rsi, %rdi
10002b1d1:	48 89 c6	movq	%rax, %rsi
10002b1d4:	5d	popq	%rbp
10002b1d5:	e9 59 41 fe ff	jmp	0x10000f333
10002b1da:	55	pushq	%rbp
10002b1db:	48 89 e5	movq	%rsp, %rbp
10002b1de:	41 57	pushq	%r15
10002b1e0:	41 56	pushq	%r14
10002b1e2:	41 55	pushq	%r13
10002b1e4:	41 54	pushq	%r12
10002b1e6:	53	pushq	%rbx
10002b1e7:	50	pushq	%rax
10002b1e8:	41 89 d7	movl	%edx, %r15d
10002b1eb:	41 8d 47 ff	leal	-1(%r15), %eax
10002b1ef:	83 f8 02	cmpl	$2, %eax
10002b1f2:	0f 83 00 01 00 00	jae	0x10002b2f8
10002b1f8:	48 89 fb	movq	%rdi, %rbx
10002b1fb:	48 83 bf 98 03 00 00 00	cmpq	$0, 920(%rdi)
10002b203:	74 38	je	0x10002b23d
10002b205:	49 89 f6	movq	%rsi, %r14
10002b208:	48 89 f7	movq	%rsi, %rdi
10002b20b:	be 3c 00 00 00	movl	$60, %esi
10002b210:	e8 11 6c 01 00	callq	0x100041e26 ## symbol stub for: _strchr
10002b215:	48 85 c0	testq	%rax, %rax
10002b218:	74 2d	je	0x10002b247
10002b21a:	48 8d 15 0e 55 02 00	leaq	152846(%rip), %rdx ## literal pool for: "refusing to persist enabled/disabled state for '%s' as it contains illegal XML character '<'"
10002b221:	48 89 df	movq	%rbx, %rdi
10002b224:	be 04 00 00 00	movl	$4, %esi
10002b229:	4c 89 f1	movq	%r14, %rcx
10002b22c:	31 c0	xorl	%eax, %eax
10002b22e:	e8 f6 51 ff ff	callq	0x100020429
10002b233:	b8 8c 00 00 00	movl	$140, %eax
10002b238:	e9 ac 00 00 00	jmp	0x10002b2e9
10002b23d:	b8 7d 00 00 00	movl	$125, %eax
10002b242:	e9 a2 00 00 00	jmp	0x10002b2e9
10002b247:	41 83 ff 02	cmpl	$2, %r15d
10002b24b:	48 8d 05 3a 55 02 00	leaq	152890(%rip), %rax ## literal pool for: "Enabling"
10002b252:	48 8d 0d 3c 55 02 00	leaq	152892(%rip), %rcx ## literal pool for: "Disabling"
10002b259:	48 0f 44 c8	cmoveq	%rax, %rcx
10002b25d:	48 8d 15 3b 55 02 00	leaq	152891(%rip), %rdx ## literal pool for: "%s service %s"
10002b264:	48 89 df	movq	%rbx, %rdi
10002b267:	be 05 00 00 00	movl	$5, %esi
10002b26c:	4d 89 f0	movq	%r14, %r8
10002b26f:	31 c0	xorl	%eax, %eax
10002b271:	e8 b3 51 ff ff	callq	0x100020429
10002b276:	48 8b bb 98 03 00 00	movq	920(%rbx), %rdi
10002b27d:	4c 89 f6	movq	%r14, %rsi
10002b280:	e8 e7 6d 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002b285:	48 85 c0	testq	%rax, %rax
10002b288:	74 2d	je	0x10002b2b7
10002b28a:	49 89 c4	movq	%rax, %r12
10002b28d:	48 89 c7	movq	%rax, %rdi
10002b290:	e8 31 6e 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002b295:	48 3b 05 44 ce 02 00	cmpq	183876(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10002b29c:	75 19	jne	0x10002b2b7
10002b29e:	41 83 ff 01	cmpl	$1, %r15d
10002b2a2:	41 0f 94 c5	sete	%r13b
10002b2a6:	4c 89 e7	movq	%r12, %rdi
10002b2a9:	e8 e6 6c 01 00	callq	0x100041f94 ## symbol stub for: _xpc_bool_get_value
10002b2ae:	89 c1	movl	%eax, %ecx
10002b2b0:	31 c0	xorl	%eax, %eax
10002b2b2:	41 38 cd	cmpb	%cl, %r13b
10002b2b5:	74 32	je	0x10002b2e9
10002b2b7:	31 d2	xorl	%edx, %edx
10002b2b9:	41 83 ff 01	cmpl	$1, %r15d
10002b2bd:	0f 94 c2	sete	%dl
10002b2c0:	48 8b bb 98 03 00 00	movq	920(%rbx), %rdi
10002b2c7:	4c 89 f6	movq	%r14, %rsi
10002b2ca:	e8 a9 6d 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002b2cf:	48 8b bb 98 03 00 00	movq	920(%rbx), %rdi
10002b2d6:	48 8d 35 f2 96 01 00	leaq	104178(%rip), %rsi ## literal pool for: "_dirty"
10002b2dd:	ba 01 00 00 00	movl	$1, %edx
10002b2e2:	e8 91 6d 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002b2e7:	31 c0	xorl	%eax, %eax
10002b2e9:	48 83 c4 08	addq	$8, %rsp
10002b2ed:	5b	popq	%rbx
10002b2ee:	41 5c	popq	%r12
10002b2f0:	41 5d	popq	%r13
10002b2f2:	41 5e	popq	%r14
10002b2f4:	41 5f	popq	%r15
10002b2f6:	5d	popq	%rbp
10002b2f7:	c3	retq
10002b2f8:	e8 a1 54 01 00	callq	0x10004079e
10002b2fd:	55	pushq	%rbp
10002b2fe:	48 89 e5	movq	%rsp, %rbp
10002b301:	53	pushq	%rbx
10002b302:	50	pushq	%rax
10002b303:	48 8b bf 98 03 00 00	movq	920(%rdi), %rdi
10002b30a:	48 85 ff	testq	%rdi, %rdi
10002b30d:	74 4f	je	0x10002b35e
10002b30f:	e8 58 6d 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002b314:	48 85 c0	testq	%rax, %rax
10002b317:	74 45	je	0x10002b35e
10002b319:	48 89 c3	movq	%rax, %rbx
10002b31c:	48 89 c7	movq	%rax, %rdi
10002b31f:	e8 a2 6d 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002b324:	48 3b 05 d5 cd 02 00	cmpq	183765(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002b32b:	75 17	jne	0x10002b344
10002b32d:	48 8d 35 ed 93 01 00	leaq	103405(%rip), %rsi ## literal pool for: "Disabled"
10002b334:	48 89 df	movq	%rbx, %rdi
10002b337:	e8 30 6d 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002b33c:	48 89 c3	movq	%rax, %rbx
10002b33f:	48 85 c0	testq	%rax, %rax
10002b342:	74 1a	je	0x10002b35e
10002b344:	48 89 df	movq	%rbx, %rdi
10002b347:	e8 7a 6d 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002b34c:	48 89 c1	movq	%rax, %rcx
10002b34f:	31 c0	xorl	%eax, %eax
10002b351:	48 3b 0d 88 cd 02 00	cmpq	183688(%rip), %rcx ## literal pool symbol address: __xpc_type_bool
10002b358:	48 0f 44 c3	cmoveq	%rbx, %rax
10002b35c:	eb 02	jmp	0x10002b360
10002b35e:	31 c0	xorl	%eax, %eax
10002b360:	48 83 c4 08	addq	$8, %rsp
10002b364:	5b	popq	%rbx
10002b365:	5d	popq	%rbp
10002b366:	c3	retq
10002b367:	55	pushq	%rbp
10002b368:	48 89 e5	movq	%rsp, %rbp
10002b36b:	41 56	pushq	%r14
10002b36d:	53	pushq	%rbx
10002b36e:	48 89 fb	movq	%rdi, %rbx
10002b371:	48 8b bf 98 03 00 00	movq	920(%rdi), %rdi
10002b378:	48 85 ff	testq	%rdi, %rdi
10002b37b:	74 71	je	0x10002b3ee
10002b37d:	49 89 f6	movq	%rsi, %r14
10002b380:	e8 e7 6c 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002b385:	48 85 c0	testq	%rax, %rax
10002b388:	74 64	je	0x10002b3ee
10002b38a:	48 3b 05 3f cd 02 00	cmpq	183615(%rip), %rax ## literal pool symbol address: __xpc_bool_true
10002b391:	48 8d 05 07 94 01 00	leaq	103431(%rip), %rax ## literal pool for: "enabled"
10002b398:	48 8d 0d 08 94 01 00	leaq	103432(%rip), %rcx ## literal pool for: "disabled"
10002b39f:	48 0f 44 c8	cmoveq	%rax, %rcx
10002b3a3:	48 8d 15 a0 1e 02 00	leaq	138912(%rip), %rdx ## literal pool for: "Clearing %s state for service %s"
10002b3aa:	48 89 df	movq	%rbx, %rdi
10002b3ad:	be 05 00 00 00	movl	$5, %esi
10002b3b2:	4d 89 f0	movq	%r14, %r8
10002b3b5:	31 c0	xorl	%eax, %eax
10002b3b7:	e8 6d 50 ff ff	callq	0x100020429
10002b3bc:	48 8b bb 98 03 00 00	movq	920(%rbx), %rdi
10002b3c3:	4c 89 f6	movq	%r14, %rsi
10002b3c6:	31 d2	xorl	%edx, %edx
10002b3c8:	e8 e1 6c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002b3cd:	48 8b bb 98 03 00 00	movq	920(%rbx), %rdi
10002b3d4:	48 8d 35 f4 95 01 00	leaq	103924(%rip), %rsi ## literal pool for: "_dirty"
10002b3db:	ba 01 00 00 00	movl	$1, %edx
10002b3e0:	e8 93 6c 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10002b3e5:	5b	popq	%rbx
10002b3e6:	41 5e	popq	%r14
10002b3e8:	5d	popq	%rbp
10002b3e9:	e9 52 1d 01 00	jmp	0x10003d140
10002b3ee:	5b	popq	%rbx
10002b3ef:	41 5e	popq	%r14
10002b3f1:	5d	popq	%rbp
10002b3f2:	c3	retq
10002b3f3:	55	pushq	%rbp
10002b3f4:	48 89 e5	movq	%rsp, %rbp
10002b3f7:	0f 10 87 f8 00 00 00	movups	248(%rdi), %xmm0
10002b3fe:	0f 10 8f 08 01 00 00	movups	264(%rdi), %xmm1
10002b405:	0f 11 4e 10	movups	%xmm1, 16(%rsi)
10002b409:	0f 11 06	movups	%xmm0, (%rsi)
10002b40c:	5d	popq	%rbp
10002b40d:	c3	retq
10002b40e:	55	pushq	%rbp
10002b40f:	48 89 e5	movq	%rsp, %rbp
10002b412:	48 8b 87 d0 03 00 00	movq	976(%rdi), %rax
10002b419:	48 85 c0	testq	%rax, %rax
10002b41c:	74 05	je	0x10002b423
10002b41e:	8b 40 68	movl	104(%rax), %eax
10002b421:	eb 02	jmp	0x10002b425
10002b423:	31 c0	xorl	%eax, %eax
10002b425:	5d	popq	%rbp
10002b426:	c3	retq
10002b427:	55	pushq	%rbp
10002b428:	48 89 e5	movq	%rsp, %rbp
10002b42b:	48 8b 47 60	movq	96(%rdi), %rax
10002b42f:	48 8d 0d f2 6d 03 00	leaq	224754(%rip), %rcx
10002b436:	48 39 c8	cmpq	%rcx, %rax
10002b439:	74 21	je	0x10002b45c
10002b43b:	48 8d 0d 6e 6e 03 00	leaq	224878(%rip), %rcx
10002b442:	48 39 c8	cmpq	%rcx, %rax
10002b445:	74 1e	je	0x10002b465
10002b447:	48 8d 0d 52 6d 03 00	leaq	224594(%rip), %rcx
10002b44e:	48 39 c8	cmpq	%rcx, %rax
10002b451:	75 36	jne	0x10002b489
10002b453:	48 8d 3d f6 80 03 00	leaq	229622(%rip), %rdi
10002b45a:	eb 10	jmp	0x10002b46c
10002b45c:	48 81 c7 d0 03 00 00	addq	$976, %rdi
10002b463:	eb 07	jmp	0x10002b46c
10002b465:	48 81 c7 c8 00 00 00	addq	$200, %rdi
10002b46c:	48 8b 0f	movq	(%rdi), %rcx
10002b46f:	48 85 c9	testq	%rcx, %rcx
10002b472:	74 15	je	0x10002b489
10002b474:	0f b7 91 08 04 00 00	movzwl	1032(%rcx), %edx
10002b47b:	31 c0	xorl	%eax, %eax
10002b47d:	f7 c2 03 02 00 00	testl	$515, %edx
10002b483:	48 0f 44 c1	cmoveq	%rcx, %rax
10002b487:	eb 02	jmp	0x10002b48b
10002b489:	31 c0	xorl	%eax, %eax
10002b48b:	5d	popq	%rbp
10002b48c:	c3	retq
10002b48d:	55	pushq	%rbp
10002b48e:	48 89 e5	movq	%rsp, %rbp
10002b491:	48 8b 47 60	movq	96(%rdi), %rax
10002b495:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
10002b49c:	74 0b	je	0x10002b4a9
10002b49e:	b8 ff ff ff ff	movl	$4294967295, %eax
10002b4a3:	48 39 47 68	cmpq	%rax, 104(%rdi)
10002b4a7:	75 09	jne	0x10002b4b2
10002b4a9:	48 8b 05 18 cd 02 00	movq	183576(%rip), %rax ## literal pool symbol address: _setsid
10002b4b0:	eb 07	jmp	0x10002b4b9
10002b4b2:	48 8b 05 07 cd 02 00	movq	183559(%rip), %rax ## literal pool symbol address: _setpgid
10002b4b9:	5d	popq	%rbp
10002b4ba:	c3	retq
10002b4bb:	55	pushq	%rbp
10002b4bc:	48 89 e5	movq	%rsp, %rbp
10002b4bf:	48 8b 87 a0 03 00 00	movq	928(%rdi), %rax
10002b4c6:	5d	popq	%rbp
10002b4c7:	c3	retq
10002b4c8:	90	nop
10002b4c9:	90	nop
10002b4ca:	90	nop
10002b4cb:	55	pushq	%rbp
10002b4cc:	48 89 e5	movq	%rsp, %rbp
10002b4cf:	41 56	pushq	%r14
10002b4d1:	53	pushq	%rbx
10002b4d2:	48 83 ec 30	subq	$48, %rsp
10002b4d6:	48 89 f3	movq	%rsi, %rbx
10002b4d9:	48 8b 86 28 01 00 00	movq	296(%rsi), %rax
10002b4e0:	48 85 c0	testq	%rax, %rax
10002b4e3:	74 1c	je	0x10002b501
10002b4e5:	48 89 c7	movq	%rax, %rdi
10002b4e8:	e8 4c 1c fe ff	callq	0x10000d139
10002b4ed:	85 c0	testl	%eax, %eax
10002b4ef:	0f 85 b5 00 00 00	jne	0x10002b5aa
10002b4f5:	48 8b bb 28 01 00 00	movq	296(%rbx), %rdi
10002b4fc:	e9 88 00 00 00	jmp	0x10002b589
10002b501:	84 d2	testb	%dl, %dl
10002b503:	74 0c	je	0x10002b511
10002b505:	48 89 df	movq	%rbx, %rdi
10002b508:	31 f6	xorl	%esi, %esi
10002b50a:	e8 b1 00 00 00	callq	0x10002b5c0
10002b50f:	eb 6e	jmp	0x10002b57f
10002b511:	48 8d 05 20 6e 03 00	leaq	224800(%rip), %rax
10002b518:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002b51c:	74 7e	je	0x10002b59c
10002b51e:	48 83 bb 20 01 00 00 00	cmpq	$0, 288(%rbx)
10002b526:	74 dd	je	0x10002b505
10002b528:	0f 28 05 51 7d 01 00	movaps	97617(%rip), %xmm0
10002b52f:	4c 8d 75 c0	leaq	-64(%rbp), %r14
10002b533:	41 0f 29 06	movaps	%xmm0, (%r14)
10002b537:	41 0f 29 46 10	movaps	%xmm0, 16(%r14)
10002b53c:	41 c7 06 00 00 00 00	movl	$0, (%r14)
10002b543:	48 8d 83 18 05 00 00	leaq	1304(%rbx), %rax
10002b54a:	49 89 46 08	movq	%rax, 8(%r14)
10002b54e:	48 89 df	movq	%rbx, %rdi
10002b551:	e8 e7 08 ff ff	callq	0x10001be3d
10002b556:	49 89 46 10	movq	%rax, 16(%r14)
10002b55a:	8b 83 20 03 00 00	movl	800(%rbx), %eax
10002b560:	41 89 46 18	movl	%eax, 24(%r14)
10002b564:	0f 10 83 70 03 00 00	movups	880(%rbx), %xmm0
10002b56b:	41 0f 29 46 20	movaps	%xmm0, 32(%r14)
10002b570:	48 8b bb 20 01 00 00	movq	288(%rbx), %rdi
10002b577:	4c 89 f6	movq	%r14, %rsi
10002b57a:	e8 14 a5 fe ff	callq	0x100015a93
10002b57f:	48 89 83 28 01 00 00	movq	%rax, 296(%rbx)
10002b586:	48 89 c7	movq	%rax, %rdi
10002b589:	e8 83 1b fe ff	callq	0x10000d111
10002b58e:	ba 01 00 00 00	movl	$1, %edx
10002b593:	48 83 c4 30	addq	$48, %rsp
10002b597:	5b	popq	%rbx
10002b598:	41 5e	popq	%r14
10002b59a:	5d	popq	%rbp
10002b59b:	c3	retq
10002b59c:	48 8b 87 f8 03 00 00	movq	1016(%rdi), %rax
10002b5a3:	ba 02 00 00 00	movl	$2, %edx
10002b5a8:	eb e9	jmp	0x10002b593
10002b5aa:	48 8d 3d 56 cd fe ff	leaq	-78506(%rip), %rdi
10002b5b1:	48 89 de	movq	%rbx, %rsi
10002b5b4:	31 d2	xorl	%edx, %edx
10002b5b6:	e8 ed 61 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002b5bb:	e9 35 ff ff ff	jmp	0x10002b4f5
10002b5c0:	55	pushq	%rbp
10002b5c1:	48 89 e5	movq	%rsp, %rbp
10002b5c4:	41 56	pushq	%r14
10002b5c6:	53	pushq	%rbx
10002b5c7:	48 83 ec 30	subq	$48, %rsp
10002b5cb:	48 89 fb	movq	%rdi, %rbx
10002b5ce:	0f 28 05 ab 7c 01 00	movaps	97451(%rip), %xmm0
10002b5d5:	4c 8d 75 c0	leaq	-64(%rbp), %r14
10002b5d9:	41 0f 29 06	movaps	%xmm0, (%r14)
10002b5dd:	41 0f 29 46 10	movaps	%xmm0, 16(%r14)
10002b5e2:	41 89 36	movl	%esi, (%r14)
10002b5e5:	48 8d 87 18 05 00 00	leaq	1304(%rdi), %rax
10002b5ec:	49 89 46 08	movq	%rax, 8(%r14)
10002b5f0:	e8 48 08 ff ff	callq	0x10001be3d
10002b5f5:	49 89 46 10	movq	%rax, 16(%r14)
10002b5f9:	8b 83 20 03 00 00	movl	800(%rbx), %eax
10002b5ff:	41 89 46 18	movl	%eax, 24(%r14)
10002b603:	0f 10 83 70 03 00 00	movups	880(%rbx), %xmm0
10002b60a:	41 0f 29 46 20	movaps	%xmm0, 32(%r14)
10002b60f:	4c 89 f7	movq	%r14, %rdi
10002b612:	e8 2b a4 fe ff	callq	0x100015a42
10002b617:	48 83 c4 30	addq	$48, %rsp
10002b61b:	5b	popq	%rbx
10002b61c:	41 5e	popq	%r14
10002b61e:	5d	popq	%rbp
10002b61f:	c3	retq
10002b620:	55	pushq	%rbp
10002b621:	48 89 e5	movq	%rsp, %rbp
10002b624:	41 57	pushq	%r15
10002b626:	41 56	pushq	%r14
10002b628:	53	pushq	%rbx
10002b629:	50	pushq	%rax
10002b62a:	48 89 f3	movq	%rsi, %rbx
10002b62d:	48 8b 86 30 01 00 00	movq	304(%rsi), %rax
10002b634:	48 85 c0	testq	%rax, %rax
10002b637:	74 37	je	0x10002b670
10002b639:	48 89 c7	movq	%rax, %rdi
10002b63c:	e8 f8 1a fe ff	callq	0x10000d139
10002b641:	83 f8 01	cmpl	$1, %eax
10002b644:	0f 85 91 00 00 00	jne	0x10002b6db
10002b64a:	48 8b bb 30 01 00 00	movq	304(%rbx), %rdi
10002b651:	e8 bb 1a fe ff	callq	0x10000d111
10002b656:	49 89 c7	movq	%rax, %r15
10002b659:	41 be 01 00 00 00	movl	$1, %r14d
10002b65f:	4c 89 f8	movq	%r15, %rax
10002b662:	44 89 f2	movl	%r14d, %edx
10002b665:	48 83 c4 08	addq	$8, %rsp
10002b669:	5b	popq	%rbx
10002b66a:	41 5e	popq	%r14
10002b66c:	41 5f	popq	%r15
10002b66e:	5d	popq	%rbp
10002b66f:	c3	retq
10002b670:	48 8d 05 c1 6c 03 00	leaq	224449(%rip), %rax
10002b677:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002b67b:	74 4d	je	0x10002b6ca
10002b67d:	41 be 01 00 00 00	movl	$1, %r14d
10002b683:	48 89 df	movq	%rbx, %rdi
10002b686:	be 01 00 00 00	movl	$1, %esi
10002b68b:	e8 30 ff ff ff	callq	0x10002b5c0
10002b690:	48 89 83 30 01 00 00	movq	%rax, 304(%rbx)
10002b697:	48 89 c7	movq	%rax, %rdi
10002b69a:	e8 72 1a fe ff	callq	0x10000d111
10002b69f:	49 89 c7	movq	%rax, %r15
10002b6a2:	48 89 df	movq	%rbx, %rdi
10002b6a5:	e8 c5 06 ff ff	callq	0x10001bd6f
10002b6aa:	48 85 c0	testq	%rax, %rax
10002b6ad:	74 b0	je	0x10002b65f
10002b6af:	48 89 c3	movq	%rax, %rbx
10002b6b2:	48 89 c7	movq	%rax, %rdi
10002b6b5:	e8 9c 67 01 00	callq	0x100041e56 ## symbol stub for: _strlen
10002b6ba:	4c 89 ff	movq	%r15, %rdi
10002b6bd:	48 89 de	movq	%rbx, %rsi
10002b6c0:	48 89 c2	movq	%rax, %rdx
10002b6c3:	e8 88 61 01 00	callq	0x100041850 ## symbol stub for: _coalition_info_set_name
10002b6c8:	eb 95	jmp	0x10002b65f
10002b6ca:	4c 8b bf 00 04 00 00	movq	1024(%rdi), %r15
10002b6d1:	44 0f b6 f2	movzbl	%dl, %r14d
10002b6d5:	41 83 ce 02	orl	$2, %r14d
10002b6d9:	eb 84	jmp	0x10002b65f
10002b6db:	48 8d 3d 25 cc fe ff	leaq	-78811(%rip), %rdi
10002b6e2:	48 89 de	movq	%rbx, %rsi
10002b6e5:	31 d2	xorl	%edx, %edx
10002b6e7:	e8 bc 60 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002b6ec:	e9 59 ff ff ff	jmp	0x10002b64a
10002b6f1:	55	pushq	%rbp
10002b6f2:	48 89 e5	movq	%rsp, %rbp
10002b6f5:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
10002b6fc:	75 06	jne	0x10002b704
10002b6fe:	5d	popq	%rbp
10002b6ff:	e9 0e 00 00 00	jmp	0x10002b712
10002b704:	48 8d 3d 60 1b 02 00	leaq	138080(%rip), %rdi ## literal pool for: "tried to activate service in domain it doesn't belong to"
10002b70b:	31 c0	xorl	%eax, %eax
10002b70d:	e8 00 8d 00 00	callq	0x100034412
10002b712:	55	pushq	%rbp
10002b713:	48 89 e5	movq	%rsp, %rbp
10002b716:	41 56	pushq	%r14
10002b718:	53	pushq	%rbx
10002b719:	48 83 ec 10	subq	$16, %rsp
10002b71d:	48 89 f3	movq	%rsi, %rbx
10002b720:	49 89 fe	movq	%rdi, %r14
10002b723:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
10002b72a:	0f 85 10 01 00 00	jne	0x10002b840
10002b730:	0f bf b3 1c 01 00 00	movswl	284(%rbx), %esi
10002b737:	8d 46 01	leal	1(%rsi), %eax
10002b73a:	8d 8e 01 80 00 00	leal	32769(%rsi), %ecx
10002b740:	66 89 83 1c 01 00 00	movw	%ax, 284(%rbx)
10002b747:	81 f9 00 00 01 00	cmpl	$65536, %ecx
10002b74d:	0f 83 f8 00 00 00	jae	0x10002b84b
10002b753:	66 85 f6	testw	%si, %si
10002b756:	0f 88 f7 00 00 00	js	0x10002b853
10002b75c:	66 85 f6	testw	%si, %si
10002b75f:	0f 85 d2 00 00 00	jne	0x10002b837
10002b765:	8b 83 18 01 00 00	movl	280(%rbx), %eax
10002b76b:	85 c0	testl	%eax, %eax
10002b76d:	74 65	je	0x10002b7d4
10002b76f:	48 8d 7d ec	leaq	-20(%rbp), %rdi
10002b773:	89 07	movl	%eax, (%rdi)
10002b775:	be 04 00 00 00	movl	$4, %esi
10002b77a:	e8 fa 3b fe ff	callq	0x10000f379
10002b77f:	48 89 c1	movq	%rax, %rcx
10002b782:	48 ba 93 24 49 92 24 49 92 24	movabsq	$2635249153387078803, %rdx
10002b78c:	48 f7 e2	mulq	%rdx
10002b78f:	48 89 c8	movq	%rcx, %rax
10002b792:	48 29 d0	subq	%rdx, %rax
10002b795:	48 d1 e8	shrq	%rax
10002b798:	48 01 d0	addq	%rdx, %rax
10002b79b:	48 c1 e8 02	shrq	$2, %rax
10002b79f:	48 8d 14 c5 00 00 00 00	leaq	(,%rax,8), %rdx
10002b7a7:	48 29 d0	subq	%rdx, %rax
10002b7aa:	48 01 c8	addq	%rcx, %rax
10002b7ad:	49 8d 04 c6	leaq	(%r14,%rax,8), %rax
10002b7b1:	48 05 68 02 00 00	addq	$616, %rax
10002b7b7:	48 8b 08	movq	(%rax), %rcx
10002b7ba:	48 89 4b 48	movq	%rcx, 72(%rbx)
10002b7be:	48 85 c9	testq	%rcx, %rcx
10002b7c1:	74 08	je	0x10002b7cb
10002b7c3:	48 8d 53 48	leaq	72(%rbx), %rdx
10002b7c7:	48 89 51 50	movq	%rdx, 80(%rcx)
10002b7cb:	48 89 18	movq	%rbx, (%rax)
10002b7ce:	48 89 43 50	movq	%rax, 80(%rbx)
10002b7d2:	eb 63	jmp	0x10002b837
10002b7d4:	48 89 df	movq	%rbx, %rdi
10002b7d7:	e8 25 00 ff ff	callq	0x10001b801
10002b7dc:	48 8d 7d ec	leaq	-20(%rbp), %rdi
10002b7e0:	89 07	movl	%eax, (%rdi)
10002b7e2:	be 04 00 00 00	movl	$4, %esi
10002b7e7:	e8 8d 3b fe ff	callq	0x10000f379
10002b7ec:	48 89 c1	movq	%rax, %rcx
10002b7ef:	48 ba c5 4e ec c4 4e ec c4 4e	movabsq	$5675921253449092805, %rdx
10002b7f9:	48 f7 e2	mulq	%rdx
10002b7fc:	48 c1 ea 02	shrq	$2, %rdx
10002b800:	48 8d 04 52	leaq	(%rdx,%rdx,2), %rax
10002b804:	48 8d 04 82	leaq	(%rdx,%rax,4), %rax
10002b808:	48 29 c1	subq	%rax, %rcx
10002b80b:	49 8d 04 ce	leaq	(%r14,%rcx,8), %rax
10002b80f:	48 05 00 02 00 00	addq	$512, %rax
10002b815:	48 8b 08	movq	(%rax), %rcx
10002b818:	48 89 4b 48	movq	%rcx, 72(%rbx)
10002b81c:	48 85 c9	testq	%rcx, %rcx
10002b81f:	74 08	je	0x10002b829
10002b821:	48 8d 53 48	leaq	72(%rbx), %rdx
10002b825:	48 89 51 50	movq	%rdx, 80(%rcx)
10002b829:	48 89 18	movq	%rbx, (%rax)
10002b82c:	48 89 43 50	movq	%rax, 80(%rbx)
10002b830:	41 ff 86 a4 00 00 00	incl	164(%r14)
10002b837:	48 83 c4 10	addq	$16, %rsp
10002b83b:	5b	popq	%rbx
10002b83c:	41 5e	popq	%r14
10002b83e:	5d	popq	%rbp
10002b83f:	c3	retq
10002b840:	48 89 df	movq	%rbx, %rdi
10002b843:	4c 89 f6	movq	%r14, %rsi
10002b846:	e8 e4 4f 01 00	callq	0x10004082f
10002b84b:	48 89 df	movq	%rbx, %rdi
10002b84e:	e8 60 4f 01 00	callq	0x1000407b3
10002b853:	48 89 df	movq	%rbx, %rdi
10002b856:	e8 96 4f 01 00	callq	0x1000407f1
10002b85b:	55	pushq	%rbp
10002b85c:	48 89 e5	movq	%rsp, %rbp
10002b85f:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
10002b866:	75 06	jne	0x10002b86e
10002b868:	5d	popq	%rbp
10002b869:	e9 0e 00 00 00	jmp	0x10002b87c
10002b86e:	48 8d 3d 2f 1a 02 00	leaq	137775(%rip), %rdi ## literal pool for: "tried to deactivate service in domain it doesn't belong to"
10002b875:	31 c0	xorl	%eax, %eax
10002b877:	e8 96 8b 00 00	callq	0x100034412
10002b87c:	55	pushq	%rbp
10002b87d:	48 89 e5	movq	%rsp, %rbp
10002b880:	41 57	pushq	%r15
10002b882:	41 56	pushq	%r14
10002b884:	53	pushq	%rbx
10002b885:	50	pushq	%rax
10002b886:	48 89 f3	movq	%rsi, %rbx
10002b889:	49 89 fe	movq	%rdi, %r14
10002b88c:	8b be 18 01 00 00	movl	280(%rsi), %edi
10002b892:	4c 39 b6 e8 00 00 00	cmpq	%r14, 232(%rsi)
10002b899:	0f 85 9d 02 00 00	jne	0x10002bb3c
10002b89f:	0f bf 93 1c 01 00 00	movswl	284(%rbx), %edx
10002b8a6:	8d 42 ff	leal	-1(%rdx), %eax
10002b8a9:	8d 8a ff 7f 00 00	leal	32767(%rdx), %ecx
10002b8af:	66 89 83 1c 01 00 00	movw	%ax, 284(%rbx)
10002b8b6:	81 f9 00 00 01 00	cmpl	$65536, %ecx
10002b8bc:	0f 83 85 02 00 00	jae	0x10002bb47
10002b8c2:	66 85 d2	testw	%dx, %dx
10002b8c5:	0f 8e 84 02 00 00	jle	0x10002bb4f
10002b8cb:	83 ff 01	cmpl	$1, %edi
10002b8ce:	b8 02 00 00 00	movl	$2, %eax
10002b8d3:	83 d8 00	sbbl	$0, %eax
10002b8d6:	39 d0	cmpl	%edx, %eax
10002b8d8:	0f 8c 3c 02 00 00	jl	0x10002bb1a
10002b8de:	0f b7 83 64 01 00 00	movzwl	356(%rbx), %eax
10002b8e5:	a8 02	testb	$2, %al
10002b8e7:	75 6e	jne	0x10002b957
10002b8e9:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
10002b8f0:	48 83 bb 48 01 00 00 00	cmpq	$0, 328(%rbx)
10002b8f8:	48 8d 05 8c d6 01 00	leaq	120460(%rip), %rax ## literal pool for: ""
10002b8ff:	4c 8d 05 29 51 02 00	leaq	151849(%rip), %r8 ## literal pool for: ", leaving extension group"
10002b906:	4c 0f 44 c0	cmoveq	%rax, %r8
10002b90a:	48 8d 15 07 51 02 00	leaq	151815(%rip), %rdx ## literal pool for: "service inactive: %s%s"
10002b911:	4c 89 f7	movq	%r14, %rdi
10002b914:	be 05 00 00 00	movl	$5, %esi
10002b919:	31 c0	xorl	%eax, %eax
10002b91b:	e8 09 4b ff ff	callq	0x100020429
10002b920:	48 8d 43 48	leaq	72(%rbx), %rax
10002b924:	48 8b 4b 48	movq	72(%rbx), %rcx
10002b928:	48 85 c9	testq	%rcx, %rcx
10002b92b:	74 08	je	0x10002b935
10002b92d:	48 8b 53 50	movq	80(%rbx), %rdx
10002b931:	48 89 51 50	movq	%rdx, 80(%rcx)
10002b935:	48 8b 53 50	movq	80(%rbx), %rdx
10002b939:	48 89 0a	movq	%rcx, (%rdx)
10002b93c:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002b940:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002b944:	8b bb 18 01 00 00	movl	280(%rbx), %edi
10002b94a:	85 ff	testl	%edi, %edi
10002b94c:	75 3a	jne	0x10002b988
10002b94e:	41 ff 8e a4 00 00 00	decl	164(%r14)
10002b955:	eb 10	jmp	0x10002b967
10002b957:	25 fd ff 00 00	andl	$65533, %eax
10002b95c:	66 89 83 64 01 00 00	movw	%ax, 356(%rbx)
10002b963:	85 ff	testl	%edi, %edi
10002b965:	75 21	jne	0x10002b988
10002b967:	48 89 df	movq	%rbx, %rdi
10002b96a:	e8 fd 04 ff ff	callq	0x10001be6c
10002b96f:	48 89 c7	movq	%rax, %rdi
10002b972:	e8 a3 dc 00 00	callq	0x10003961a
10002b977:	84 c0	testb	%al, %al
10002b979:	74 07	je	0x10002b982
10002b97b:	80 a3 65 01 00 00 df	andb	$-33, 357(%rbx)
10002b982:	8b bb 18 01 00 00	movl	280(%rbx), %edi
10002b988:	c7 83 5c 01 00 00 ff ff ff ff	movl	$4294967295, 348(%rbx)
10002b992:	0f b7 8b 64 01 00 00	movzwl	356(%rbx), %ecx
10002b999:	89 c8	movl	%ecx, %eax
10002b99b:	25 3f ff 00 00	andl	$65343, %eax
10002b9a0:	66 89 83 64 01 00 00	movw	%ax, 356(%rbx)
10002b9a7:	66 c7 83 1c 01 00 00 00 00	movw	$0, 284(%rbx)
10002b9b0:	85 ff	testl	%edi, %edi
10002b9b2:	75 1a	jne	0x10002b9ce
10002b9b4:	81 e1 00 20 00 00	andl	$8192, %ecx
10002b9ba:	66 85 c9	testw	%cx, %cx
10002b9bd:	75 0f	jne	0x10002b9ce
10002b9bf:	48 89 df	movq	%rbx, %rdi
10002b9c2:	e8 50 fa fe ff	callq	0x10001b417
10002b9c7:	0f b7 83 64 01 00 00	movzwl	356(%rbx), %eax
10002b9ce:	25 ff df 00 00	andl	$57343, %eax
10002b9d3:	66 89 83 64 01 00 00	movw	%ax, 356(%rbx)
10002b9da:	48 8b bb 38 01 00 00	movq	312(%rbx), %rdi
10002b9e1:	48 85 ff	testq	%rdi, %rdi
10002b9e4:	74 10	je	0x10002b9f6
10002b9e6:	48 c7 83 38 01 00 00 00 00 00 00	movq	$0, 312(%rbx)
10002b9f1:	e8 70 5b ff ff	callq	0x100021566
10002b9f6:	4c 8b bb 00 01 00 00	movq	256(%rbx), %r15
10002b9fd:	4d 85 ff	testq	%r15, %r15
10002ba00:	74 26	je	0x10002ba28
10002ba02:	48 c7 83 00 01 00 00 00 00 00 00	movq	$0, 256(%rbx)
10002ba0d:	4c 89 ff	movq	%r15, %rdi
10002ba10:	e8 db 66 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10002ba15:	a9 df ff ff ff	testl	$4294967263, %eax
10002ba1a:	0f 85 05 01 00 00	jne	0x10002bb25
10002ba20:	4c 89 ff	movq	%r15, %rdi
10002ba23:	e8 d4 66 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002ba28:	4c 8b bb 48 01 00 00	movq	328(%rbx), %r15
10002ba2f:	4d 85 ff	testq	%r15, %r15
10002ba32:	74 1b	je	0x10002ba4f
10002ba34:	48 c7 83 48 01 00 00 00 00 00 00	movq	$0, 328(%rbx)
10002ba3f:	4c 89 ff	movq	%r15, %rdi
10002ba42:	e8 c3 5e 01 00	callq	0x10004190a ## symbol stub for: _dispatch_group_leave
10002ba47:	4c 89 ff	movq	%r15, %rdi
10002ba4a:	e8 09 5f 01 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10002ba4f:	83 bb 18 01 00 00 00	cmpl	$0, 280(%rbx)
10002ba56:	74 62	je	0x10002baba
10002ba58:	48 83 bb 90 00 00 00 00	cmpq	$0, 144(%rbx)
10002ba60:	0f 85 f1 00 00 00	jne	0x10002bb57
10002ba66:	48 83 bb 98 00 00 00 00	cmpq	$0, 152(%rbx)
10002ba6e:	0f 85 ec 00 00 00	jne	0x10002bb60
10002ba74:	48 8d 8b 18 05 00 00	leaq	1304(%rbx), %rcx
10002ba7b:	48 8d 15 3b 50 02 00	leaq	151611(%rip), %rdx ## literal pool for: "removing inactive unmanaged service: %s"
10002ba82:	4c 89 f7	movq	%r14, %rdi
10002ba85:	be 05 00 00 00	movl	$5, %esi
10002ba8a:	31 c0	xorl	%eax, %eax
10002ba8c:	e8 98 49 ff ff	callq	0x100020429
10002ba91:	ba 18 05 00 00	movl	$1304, %edx
10002ba96:	48 89 df	movq	%rbx, %rdi
10002ba99:	be cc 00 00 00	movl	$204, %esi
10002ba9e:	e8 37 61 01 00	callq	0x100041bda ## symbol stub for: _memset
10002baa3:	48 89 df	movq	%rbx, %rdi
10002baa6:	e8 85 5f 01 00	callq	0x100041a30 ## symbol stub for: _free
10002baab:	4c 89 f7	movq	%r14, %rdi
10002baae:	be 07 00 00 00	movl	$7, %esi
10002bab3:	e8 99 6e fe ff	callq	0x100012951
10002bab8:	eb 60	jmp	0x10002bb1a
10002baba:	41 f6 86 08 04 00 00 01	testb	$1, 1032(%r14)
10002bac2:	75 2f	jne	0x10002baf3
10002bac4:	f6 83 64 01 00 00 10	testb	$16, 356(%rbx)
10002bacb:	75 26	jne	0x10002baf3
10002bacd:	48 89 df	movq	%rbx, %rdi
10002bad0:	e8 59 15 00 00	callq	0x10002d02e
10002bad5:	66 41 83 be a8 00 00 00 00	cmpw	$0, 168(%r14)
10002bade:	75 3a	jne	0x10002bb1a
10002bae0:	83 bb 10 01 00 00 00	cmpl	$0, 272(%rbx)
10002bae7:	74 31	je	0x10002bb1a
10002bae9:	48 89 df	movq	%rbx, %rdi
10002baec:	e8 5e 08 00 00	callq	0x10002c34f
10002baf1:	eb 27	jmp	0x10002bb1a
10002baf3:	48 8b bb 08 01 00 00	movq	264(%rbx), %rdi
10002bafa:	48 85 ff	testq	%rdi, %rdi
10002bafd:	74 10	je	0x10002bb0f
10002baff:	e8 06 5e 01 00	callq	0x10004190a ## symbol stub for: _dispatch_group_leave
10002bb04:	48 c7 83 08 01 00 00 00 00 00 00	movq	$0, 264(%rbx)
10002bb0f:	4c 89 f7	movq	%r14, %rdi
10002bb12:	48 89 de	movq	%rbx, %rsi
10002bb15:	e8 9d 08 00 00	callq	0x10002c3b7
10002bb1a:	48 83 c4 08	addq	$8, %rsp
10002bb1e:	5b	popq	%rbx
10002bb1f:	41 5e	popq	%r14
10002bb21:	41 5f	popq	%r15
10002bb23:	5d	popq	%rbp
10002bb24:	c3	retq
10002bb25:	48 63 d0	movslq	%eax, %rdx
10002bb28:	48 8d 3d d8 c7 fe ff	leaq	-79912(%rip), %rdi
10002bb2f:	4c 89 f6	movq	%r14, %rsi
10002bb32:	e8 71 5c 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002bb37:	e9 e4 fe ff ff	jmp	0x10002ba20
10002bb3c:	4c 89 f6	movq	%r14, %rsi
10002bb3f:	48 89 da	movq	%rbx, %rdx
10002bb42:	e8 bd 4d 01 00	callq	0x100040904
10002bb47:	48 89 de	movq	%rbx, %rsi
10002bb4a:	e8 37 4d 01 00	callq	0x100040886
10002bb4f:	48 89 de	movq	%rbx, %rsi
10002bb52:	e8 6e 4d 01 00	callq	0x1000408c5
10002bb57:	48 8d 3d eb 4e 02 00	leaq	151275(%rip), %rdi ## literal pool for: "unmanaged service deactivated with active dynamic endpoints"
10002bb5e:	eb 07	jmp	0x10002bb67
10002bb60:	48 8d 3d 1e 4f 02 00	leaq	151326(%rip), %rdi ## literal pool for: "unmanaged service deactivated with active pid endpoints"
10002bb67:	31 c0	xorl	%eax, %eax
10002bb69:	e8 a4 88 00 00	callq	0x100034412
10002bb6e:	90	nop
10002bb6f:	90	nop
10002bb70:	90	nop
10002bb71:	55	pushq	%rbp
10002bb72:	48 89 e5	movq	%rsp, %rbp
10002bb75:	41 57	pushq	%r15
10002bb77:	41 56	pushq	%r14
10002bb79:	41 54	pushq	%r12
10002bb7b:	53	pushq	%rbx
10002bb7c:	49 89 d4	movq	%rdx, %r12
10002bb7f:	49 89 f7	movq	%rsi, %r15
10002bb82:	49 89 fe	movq	%rdi, %r14
10002bb85:	48 8b 9e a0 00 00 00	movq	160(%rsi), %rbx
10002bb8c:	48 85 db	testq	%rbx, %rbx
10002bb8f:	74 19	je	0x10002bbaa
10002bb91:	48 8d bb 90 00 00 00	leaq	144(%rbx), %rdi
10002bb98:	4c 89 e6	movq	%r12, %rsi
10002bb9b:	e8 8c 62 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002bba0:	85 c0	testl	%eax, %eax
10002bba2:	74 35	je	0x10002bbd9
10002bba4:	48 8b 5b 08	movq	8(%rbx), %rbx
10002bba8:	eb e2	jmp	0x10002bb8c
10002bbaa:	48 8d 15 5e 6a ff ff	leaq	-38306(%rip), %rdx
10002bbb1:	4c 89 ff	movq	%r15, %rdi
10002bbb4:	4c 89 e6	movq	%r12, %rsi
10002bbb7:	4c 89 f9	movq	%r15, %rcx
10002bbba:	e8 a1 f0 00 00	callq	0x10003ac60
10002bbbf:	48 89 c3	movq	%rax, %rbx
10002bbc2:	80 48 50 08	orb	$8, 80(%rax)
10002bbc6:	b9 10 00 00 00	movl	$16, %ecx
10002bbcb:	4c 89 f7	movq	%r14, %rdi
10002bbce:	4c 89 fe	movq	%r15, %rsi
10002bbd1:	48 89 c2	movq	%rax, %rdx
10002bbd4:	e8 0e 6b ff ff	callq	0x1000226e7
10002bbd9:	48 89 d8	movq	%rbx, %rax
10002bbdc:	5b	popq	%rbx
10002bbdd:	41 5c	popq	%r12
10002bbdf:	41 5e	popq	%r14
10002bbe1:	41 5f	popq	%r15
10002bbe3:	5d	popq	%rbp
10002bbe4:	c3	retq
10002bbe5:	55	pushq	%rbp
10002bbe6:	48 89 e5	movq	%rsp, %rbp
10002bbe9:	41 57	pushq	%r15
10002bbeb:	41 56	pushq	%r14
10002bbed:	41 55	pushq	%r13
10002bbef:	41 54	pushq	%r12
10002bbf1:	53	pushq	%rbx
10002bbf2:	48 83 ec 28	subq	$40, %rsp
10002bbf6:	4d 89 c5	movq	%r8, %r13
10002bbf9:	48 89 cb	movq	%rcx, %rbx
10002bbfc:	48 89 55 c8	movq	%rdx, -56(%rbp)
10002bc00:	48 89 75 c0	movq	%rsi, -64(%rbp)
10002bc04:	49 89 fc	movq	%rdi, %r12
10002bc07:	4c 8b 77 40	movq	64(%rdi), %r14
10002bc0b:	48 8b 87 b0 03 00 00	movq	944(%rdi), %rax
10002bc12:	48 85 c0	testq	%rax, %rax
10002bc15:	48 89 4d b8	movq	%rcx, -72(%rbp)
10002bc19:	74 25	je	0x10002bc40
10002bc1b:	48 8b 88 b0 03 00 00	movq	944(%rax), %rcx
10002bc22:	48 85 c9	testq	%rcx, %rcx
10002bc25:	48 0f 44 c8	cmoveq	%rax, %rcx
10002bc29:	48 8b 41 48	movq	72(%rcx), %rax
10002bc2d:	48 85 c0	testq	%rax, %rax
10002bc30:	74 20	je	0x10002bc52
10002bc32:	81 78 14 80 00 00 00	cmpl	$128, 20(%rax)
10002bc39:	74 20	je	0x10002bc5b
10002bc3b:	48 8b 00	movq	(%rax), %rax
10002bc3e:	eb ed	jmp	0x10002bc2d
10002bc40:	48 8d 05 f1 66 03 00	leaq	222961(%rip), %rax
10002bc47:	49 39 44 24 60	cmpq	%rax, 96(%r12)
10002bc4c:	0f 84 e1 00 00 00	je	0x10002bd33
10002bc52:	c7 45 d4 00 00 00 00	movl	$0, -44(%rbp)
10002bc59:	eb 09	jmp	0x10002bc64
10002bc5b:	8b 40 10	movl	16(%rax), %eax
10002bc5e:	89 45 d4	movl	%eax, -44(%rbp)
10002bc61:	49 ff c6	incq	%r14
10002bc64:	44 8b 3d fd 68 03 00	movl	223485(%rip), %r15d
10002bc6b:	4d 01 ee	addq	%r13, %r14
10002bc6e:	41 83 ff 01	cmpl	$1, %r15d
10002bc72:	49 83 de ff	sbbq	$-1, %r14
10002bc76:	31 ff	xorl	%edi, %edi
10002bc78:	31 f6	xorl	%esi, %esi
10002bc7a:	e8 c1 62 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10002bc7f:	49 89 c5	movq	%rax, %r13
10002bc82:	b9 04 00 00 00	movl	$4, %ecx
10002bc87:	4c 89 f0	movq	%r14, %rax
10002bc8a:	48 f7 e1	mulq	%rcx
10002bc8d:	0f 80 e6 00 00 00	jo	0x10002bd79
10002bc93:	48 89 c7	movq	%rax, %rdi
10002bc96:	e8 4a 18 fe ff	callq	0x10000d4e5
10002bc9b:	49 89 c6	movq	%rax, %r14
10002bc9e:	49 8b 5c 24 48	movq	72(%r12), %rbx
10002bca3:	45 31 e4	xorl	%r12d, %r12d
10002bca6:	48 85 db	testq	%rbx, %rbx
10002bca9:	74 21	je	0x10002bccc
10002bcab:	8b 53 10	movl	16(%rbx), %edx
10002bcae:	4c 89 ef	movq	%r13, %rdi
10002bcb1:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002bcb8:	e8 b3 62 01 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
10002bcbd:	8b 43 14	movl	20(%rbx), %eax
10002bcc0:	43 89 04 a6	movl	%eax, (%r14,%r12,4)
10002bcc4:	49 ff c4	incq	%r12
10002bcc7:	48 8b 1b	movq	(%rbx), %rbx
10002bcca:	eb da	jmp	0x10002bca6
10002bccc:	8b 55 d4	movl	-44(%rbp), %edx
10002bccf:	85 d2	testl	%edx, %edx
10002bcd1:	74 1a	je	0x10002bced
10002bcd3:	4c 89 ef	movq	%r13, %rdi
10002bcd6:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002bcdd:	e8 8e 62 01 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
10002bce2:	43 c7 04 a6 80 00 00 00	movl	$128, (%r14,%r12,4)
10002bcea:	49 ff c4	incq	%r12
10002bced:	48 8b 5d c8	movq	-56(%rbp), %rbx
10002bcf1:	45 85 ff	testl	%r15d, %r15d
10002bcf4:	74 1d	je	0x10002bd13
10002bcf6:	4c 89 ef	movq	%r13, %rdi
10002bcf9:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002bd00:	44 89 fa	movl	%r15d, %edx
10002bd03:	e8 68 62 01 00	callq	0x100041f70 ## symbol stub for: _xpc_array_set_mach_send
10002bd08:	43 c7 04 a6 09 00 00 00	movl	$9, (%r14,%r12,4)
10002bd10:	49 ff c4	incq	%r12
10002bd13:	48 8b 45 c0	movq	-64(%rbp), %rax
10002bd17:	4c 89 28	movq	%r13, (%rax)
10002bd1a:	4c 89 33	movq	%r14, (%rbx)
10002bd1d:	48 8b 45 b8	movq	-72(%rbp), %rax
10002bd21:	4c 89 20	movq	%r12, (%rax)
10002bd24:	48 83 c4 28	addq	$40, %rsp
10002bd28:	5b	popq	%rbx
10002bd29:	41 5c	popq	%r12
10002bd2b:	41 5d	popq	%r13
10002bd2d:	41 5e	popq	%r14
10002bd2f:	41 5f	popq	%r15
10002bd31:	5d	popq	%rbp
10002bd32:	c3	retq
10002bd33:	c7 45 d4 00 00 00 00	movl	$0, -44(%rbp)
10002bd3a:	4c 8d 7d b4	leaq	-76(%rbp), %r15
10002bd3e:	41 c7 07 00 00 00 00	movl	$0, (%r15)
10002bd45:	41 8b 7c 24 30	movl	48(%r12), %edi
10002bd4a:	49 8d b4 24 f8 00 00 00	leaq	248(%r12), %rsi
10002bd52:	ba 01 00 00 00	movl	$1, %edx
10002bd57:	4c 89 f9	movq	%r15, %rcx
10002bd5a:	e8 2a 00 00 00	callq	0x10002bd89
10002bd5f:	41 8b 37	movl	(%r15), %esi
10002bd62:	85 f6	testl	%esi, %esi
10002bd64:	74 05	je	0x10002bd6b
10002bd66:	83 fe 7c	cmpl	$124, %esi
10002bd69:	75 10	jne	0x10002bd7b
10002bd6b:	48 85 c0	testq	%rax, %rax
10002bd6e:	0f 85 a7 fe ff ff	jne	0x10002bc1b
10002bd74:	e9 eb fe ff ff	jmp	0x10002bc64
10002bd79:	0f 0b	ud2
10002bd7b:	48 8d 3d 5d 15 02 00	leaq	136541(%rip), %rdi ## literal pool for: "pid cannot create its own user domain: %d"
10002bd82:	31 c0	xorl	%eax, %eax
10002bd84:	e8 89 86 00 00	callq	0x100034412
10002bd89:	55	pushq	%rbp
10002bd8a:	48 89 e5	movq	%rsp, %rbp
10002bd8d:	41 57	pushq	%r15
10002bd8f:	41 56	pushq	%r14
10002bd91:	41 55	pushq	%r13
10002bd93:	41 54	pushq	%r12
10002bd95:	53	pushq	%rbx
10002bd96:	50	pushq	%rax
10002bd97:	49 89 cf	movq	%rcx, %r15
10002bd9a:	41 89 d5	movl	%edx, %r13d
10002bd9d:	49 89 f6	movq	%rsi, %r14
10002bda0:	41 89 fc	movl	%edi, %r12d
10002bda3:	48 8d 3d 7e 64 03 00	leaq	222334(%rip), %rdi
10002bdaa:	4c 89 e6	movq	%r12, %rsi
10002bdad:	e8 f9 f1 ff ff	callq	0x10002afab
10002bdb2:	48 89 c3	movq	%rax, %rbx
10002bdb5:	48 85 c0	testq	%rax, %rax
10002bdb8:	75 49	jne	0x10002be03
10002bdba:	45 84 ed	testb	%r13b, %r13b
10002bdbd:	74 3b	je	0x10002bdfa
10002bdbf:	48 8b 0d 92 77 03 00	movq	227218(%rip), %rcx
10002bdc6:	b8 7c 00 00 00	movl	$124, %eax
10002bdcb:	f6 81 08 04 00 00 01	testb	$1, 1032(%rcx)
10002bdd2:	75 21	jne	0x10002bdf5
10002bdd4:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002bddc:	31 ff	xorl	%edi, %edi
10002bdde:	31 f6	xorl	%esi, %esi
10002bde0:	31 d2	xorl	%edx, %edx
10002bde2:	4c 89 e1	movq	%r12, %rcx
10002bde5:	4d 89 f0	movq	%r14, %r8
10002bde8:	45 31 c9	xorl	%r9d, %r9d
10002bdeb:	ff 15 9f 64 03 00	callq	*222367(%rip)
10002bdf1:	85 c0	testl	%eax, %eax
10002bdf3:	74 20	je	0x10002be15
10002bdf5:	41 89 07	movl	%eax, (%r15)
10002bdf8:	eb 07	jmp	0x10002be01
10002bdfa:	41 c7 07 03 00 00 00	movl	$3, (%r15)
10002be01:	31 db	xorl	%ebx, %ebx
10002be03:	48 89 d8	movq	%rbx, %rax
10002be06:	48 83 c4 08	addq	$8, %rsp
10002be0a:	5b	popq	%rbx
10002be0b:	41 5c	popq	%r12
10002be0d:	41 5d	popq	%r13
10002be0f:	41 5e	popq	%r14
10002be11:	41 5f	popq	%r15
10002be13:	5d	popq	%rbp
10002be14:	c3	retq
10002be15:	4c 8b 0d 3c 77 03 00	movq	227132(%rip), %r9
10002be1c:	4c 89 34 24	movq	%r14, (%rsp)
10002be20:	48 8d 3d 01 64 03 00	leaq	222209(%rip), %rdi
10002be27:	4c 89 e6	movq	%r12, %rsi
10002be2a:	31 d2	xorl	%edx, %edx
10002be2c:	31 c9	xorl	%ecx, %ecx
10002be2e:	45 31 c0	xorl	%r8d, %r8d
10002be31:	e8 62 a0 ff ff	callq	0x100025e98
10002be36:	48 89 c3	movq	%rax, %rbx
10002be39:	48 89 c7	movq	%rax, %rdi
10002be3c:	4c 89 f6	movq	%r14, %rsi
10002be3f:	31 d2	xorl	%edx, %edx
10002be41:	e8 0e 59 ff ff	callq	0x100021754
10002be46:	eb bb	jmp	0x10002be03
10002be48:	55	pushq	%rbp
10002be49:	48 89 e5	movq	%rsp, %rbp
10002be4c:	45 31 c0	xorl	%r8d, %r8d
10002be4f:	45 31 c9	xorl	%r9d, %r9d
10002be52:	5d	popq	%rbp
10002be53:	e9 b7 7e ff ff	jmp	0x100023d0f
10002be58:	55	pushq	%rbp
10002be59:	48 89 e5	movq	%rsp, %rbp
10002be5c:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
10002be63:	a9 03 02 00 00	testl	$515, %eax
10002be68:	0f 95 c0	setne	%al
10002be6b:	5d	popq	%rbp
10002be6c:	c3	retq
10002be6d:	55	pushq	%rbp
10002be6e:	48 89 e5	movq	%rsp, %rbp
10002be71:	41 57	pushq	%r15
10002be73:	41 56	pushq	%r14
10002be75:	53	pushq	%rbx
10002be76:	48 83 ec 58	subq	$88, %rsp
10002be7a:	48 8d 05 1f 63 03 00	leaq	221983(%rip), %rax
10002be81:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002be85:	0f 84 da 00 00 00	je	0x10002bf65
10002be8b:	49 89 fe	movq	%rdi, %r14
10002be8e:	48 89 f8	movq	%rdi, %rax
10002be91:	48 89 c3	movq	%rax, %rbx
10002be94:	48 8b 80 c8 00 00 00	movq	200(%rax), %rax
10002be9b:	48 85 c0	testq	%rax, %rax
10002be9e:	75 f1	jne	0x10002be91
10002bea0:	48 8b 83 e8 03 00 00	movq	1000(%rbx), %rax
10002bea7:	48 85 c0	testq	%rax, %rax
10002beaa:	75 0f	jne	0x10002bebb
10002beac:	48 89 df	movq	%rbx, %rdi
10002beaf:	e8 b9 ff ff ff	callq	0x10002be6d
10002beb4:	48 89 83 e8 03 00 00	movq	%rax, 1000(%rbx)
10002bebb:	4c 39 35 8e 76 03 00	cmpq	%r14, 226958(%rip)
10002bec2:	0f 84 ae 00 00 00	je	0x10002bf76
10002bec8:	45 8b 7e 30	movl	48(%r14), %r15d
10002becc:	48 8b 1d 85 76 03 00	movq	226949(%rip), %rbx
10002bed3:	4c 8b b3 e8 03 00 00	movq	1000(%rbx), %r14
10002beda:	4d 85 f6	testq	%r14, %r14
10002bedd:	75 12	jne	0x10002bef1
10002bedf:	48 89 df	movq	%rbx, %rdi
10002bee2:	e8 86 ff ff ff	callq	0x10002be6d
10002bee7:	49 89 c6	movq	%rax, %r14
10002beea:	48 89 83 e8 03 00 00	movq	%rax, 1000(%rbx)
10002bef1:	31 c0	xorl	%eax, %eax
10002bef3:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10002bef7:	48 89 03	movq	%rax, (%rbx)
10002befa:	48 89 5b 08	movq	%rbx, 8(%rbx)
10002befe:	48 b9 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rcx
10002bf08:	48 89 4b 10	movq	%rcx, 16(%rbx)
10002bf0c:	48 89 43 18	movq	%rax, 24(%rbx)
10002bf10:	48 8b 05 01 c1 02 00	movq	180481(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10002bf17:	48 8d 75 98	leaq	-104(%rbp), %rsi
10002bf1b:	48 89 06	movq	%rax, (%rsi)
10002bf1e:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10002bf26:	48 8d 05 07 4b 00 00	leaq	19207(%rip), %rax
10002bf2d:	48 89 46 10	movq	%rax, 16(%rsi)
10002bf31:	48 8d 05 58 f2 02 00	leaq	193112(%rip), %rax
10002bf38:	48 89 46 18	movq	%rax, 24(%rsi)
10002bf3c:	44 89 7e 28	movl	%r15d, 40(%rsi)
10002bf40:	48 89 5e 20	movq	%rbx, 32(%rsi)
10002bf44:	4c 89 f7	movq	%r14, %rdi
10002bf47:	e8 e6 61 00 00	callq	0x100032132
10002bf4c:	48 8b 43 08	movq	8(%rbx), %rax
10002bf50:	48 8b 78 18	movq	24(%rax), %rdi
10002bf54:	48 85 ff	testq	%rdi, %rdi
10002bf57:	74 31	je	0x10002bf8a
10002bf59:	31 f6	xorl	%esi, %esi
10002bf5b:	e8 6e 69 fe ff	callq	0x1000128ce
10002bf60:	48 89 c3	movq	%rax, %rbx
10002bf63:	eb 34	jmp	0x10002bf99
10002bf65:	31 ff	xorl	%edi, %edi
10002bf67:	48 83 c4 58	addq	$88, %rsp
10002bf6b:	5b	popq	%rbx
10002bf6c:	41 5e	popq	%r14
10002bf6e:	41 5f	popq	%r15
10002bf70:	5d	popq	%rbp
10002bf71:	e9 5a 61 00 00	jmp	0x1000320d0
10002bf76:	48 89 c7	movq	%rax, %rdi
10002bf79:	31 f6	xorl	%esi, %esi
10002bf7b:	48 83 c4 58	addq	$88, %rsp
10002bf7f:	5b	popq	%rbx
10002bf80:	41 5e	popq	%r14
10002bf82:	41 5f	popq	%r15
10002bf84:	5d	popq	%rbp
10002bf85:	e9 44 69 fe ff	jmp	0x1000128ce
10002bf8a:	4c 89 f7	movq	%r14, %rdi
10002bf8d:	e8 3e 61 00 00	callq	0x1000320d0
10002bf92:	48 89 c3	movq	%rax, %rbx
10002bf95:	4c 89 78 48	movq	%r15, 72(%rax)
10002bf99:	48 8d 7d c8	leaq	-56(%rbp), %rdi
10002bf9d:	be 08 00 00 00	movl	$8, %esi
10002bfa2:	e8 89 57 01 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
10002bfa7:	48 89 d8	movq	%rbx, %rax
10002bfaa:	48 83 c4 58	addq	$88, %rsp
10002bfae:	5b	popq	%rbx
10002bfaf:	41 5e	popq	%r14
10002bfb1:	41 5f	popq	%r15
10002bfb3:	5d	popq	%rbp
10002bfb4:	c3	retq
10002bfb5:	55	pushq	%rbp
10002bfb6:	48 89 e5	movq	%rsp, %rbp
10002bfb9:	41 57	pushq	%r15
10002bfbb:	41 56	pushq	%r14
10002bfbd:	41 55	pushq	%r13
10002bfbf:	41 54	pushq	%r12
10002bfc1:	53	pushq	%rbx
10002bfc2:	48 81 ec 98 00 00 00	subq	$152, %rsp
10002bfc9:	4c 89 4d c0	movq	%r9, -64(%rbp)
10002bfcd:	4d 89 c1	movq	%r8, %r9
10002bfd0:	49 89 cc	movq	%rcx, %r12
10002bfd3:	49 89 d5	movq	%rdx, %r13
10002bfd6:	48 89 f3	movq	%rsi, %rbx
10002bfd9:	49 89 fe	movq	%rdi, %r14
10002bfdc:	4c 8d 7d d4	leaq	-44(%rbp), %r15
10002bfe0:	41 c7 07 00 00 00 00	movl	$0, (%r15)
10002bfe7:	48 8d 05 d4 5d ff ff	leaq	-41516(%rip), %rax
10002bfee:	4c 8d 85 50 ff ff ff	leaq	-176(%rbp), %r8
10002bff5:	49 89 00	movq	%rax, (%r8)
10002bff8:	48 8d 05 31 61 ff ff	leaq	-40655(%rip), %rax
10002bfff:	49 89 40 08	movq	%rax, 8(%r8)
10002c003:	48 8d 05 6b 62 ff ff	leaq	-40341(%rip), %rax
10002c00a:	49 89 40 10	movq	%rax, 16(%r8)
10002c00e:	48 8d 05 ee 63 ff ff	leaq	-39954(%rip), %rax
10002c015:	49 89 40 18	movq	%rax, 24(%r8)
10002c019:	48 8d 05 28 64 ff ff	leaq	-39896(%rip), %rax
10002c020:	49 89 40 20	movq	%rax, 32(%r8)
10002c024:	48 8d 05 f0 64 ff ff	leaq	-39696(%rip), %rax
10002c02b:	49 89 40 28	movq	%rax, 40(%r8)
10002c02f:	49 89 78 30	movq	%rdi, 48(%r8)
10002c033:	4c 89 3c 24	movq	%r15, (%rsp)
10002c037:	4c 89 4d c8	movq	%r9, -56(%rbp)
10002c03b:	e8 48 73 fd ff	callq	0x100003388
10002c040:	41 8b 0f	movl	(%r15), %ecx
10002c043:	81 f9 86 00 00 00	cmpl	$134, %ecx
10002c049:	0f 85 c8 00 00 00	jne	0x10002c117
10002c04f:	49 8b 56 60	movq	96(%r14), %rdx
10002c053:	48 8d 0d ce 61 03 00	leaq	221646(%rip), %rcx
10002c05a:	48 39 ca	cmpq	%rcx, %rdx
10002c05d:	74 2a	je	0x10002c089
10002c05f:	48 8d 0d 4a 62 03 00	leaq	221770(%rip), %rcx
10002c066:	48 39 ca	cmpq	%rcx, %rdx
10002c069:	74 27	je	0x10002c092
10002c06b:	b9 86 00 00 00	movl	$134, %ecx
10002c070:	48 8d 35 29 61 03 00	leaq	221481(%rip), %rsi
10002c077:	48 39 f2	cmpq	%rsi, %rdx
10002c07a:	0f 85 9b 00 00 00	jne	0x10002c11b
10002c080:	4c 8d 35 c9 74 03 00	leaq	226505(%rip), %r14
10002c087:	eb 10	jmp	0x10002c099
10002c089:	49 81 c6 d0 03 00 00	addq	$976, %r14
10002c090:	eb 07	jmp	0x10002c099
10002c092:	49 81 c6 c8 00 00 00	addq	$200, %r14
10002c099:	49 8b 3e	movq	(%r14), %rdi
10002c09c:	b9 86 00 00 00	movl	$134, %ecx
10002c0a1:	48 85 ff	testq	%rdi, %rdi
10002c0a4:	74 75	je	0x10002c11b
10002c0a6:	0f b7 97 08 04 00 00	movzwl	1032(%rdi), %edx
10002c0ad:	f7 c2 03 02 00 00	testl	$515, %edx
10002c0b3:	75 66	jne	0x10002c11b
10002c0b5:	4c 8d 45 88	leaq	-120(%rbp), %r8
10002c0b9:	48 8d 05 02 5d ff ff	leaq	-41726(%rip), %rax
10002c0c0:	49 89 00	movq	%rax, (%r8)
10002c0c3:	48 8d 05 66 60 ff ff	leaq	-40858(%rip), %rax
10002c0ca:	49 89 40 08	movq	%rax, 8(%r8)
10002c0ce:	48 8d 05 a0 61 ff ff	leaq	-40544(%rip), %rax
10002c0d5:	49 89 40 10	movq	%rax, 16(%r8)
10002c0d9:	48 8d 05 23 63 ff ff	leaq	-40157(%rip), %rax
10002c0e0:	49 89 40 18	movq	%rax, 24(%r8)
10002c0e4:	48 8d 05 5d 63 ff ff	leaq	-40099(%rip), %rax
10002c0eb:	49 89 40 20	movq	%rax, 32(%r8)
10002c0ef:	48 8d 05 25 64 ff ff	leaq	-39899(%rip), %rax
10002c0f6:	49 89 40 28	movq	%rax, 40(%r8)
10002c0fa:	49 89 78 30	movq	%rdi, 48(%r8)
10002c0fe:	4c 89 3c 24	movq	%r15, (%rsp)
10002c102:	48 89 de	movq	%rbx, %rsi
10002c105:	4c 89 ea	movq	%r13, %rdx
10002c108:	4c 89 e1	movq	%r12, %rcx
10002c10b:	4c 8b 4d c8	movq	-56(%rbp), %r9
10002c10f:	e8 74 72 fd ff	callq	0x100003388
10002c114:	8b 4d d4	movl	-44(%rbp), %ecx
10002c117:	85 c9	testl	%ecx, %ecx
10002c119:	74 09	je	0x10002c124
10002c11b:	48 85 c0	testq	%rax, %rax
10002c11e:	75 23	jne	0x10002c143
10002c120:	31 c0	xorl	%eax, %eax
10002c122:	eb 07	jmp	0x10002c12b
10002c124:	31 c9	xorl	%ecx, %ecx
10002c126:	48 85 c0	testq	%rax, %rax
10002c129:	74 1d	je	0x10002c148
10002c12b:	48 8b 55 c0	movq	-64(%rbp), %rdx
10002c12f:	89 0a	movl	%ecx, (%rdx)
10002c131:	48 81 c4 98 00 00 00	addq	$152, %rsp
10002c138:	5b	popq	%rbx
10002c139:	41 5c	popq	%r12
10002c13b:	41 5d	popq	%r13
10002c13d:	41 5e	popq	%r14
10002c13f:	41 5f	popq	%r15
10002c141:	5d	popq	%rbp
10002c142:	c3	retq
10002c143:	e8 0e 48 01 00	callq	0x100040956
10002c148:	e8 1e 48 01 00	callq	0x10004096b
10002c14d:	55	pushq	%rbp
10002c14e:	48 89 e5	movq	%rsp, %rbp
10002c151:	85 f6	testl	%esi, %esi
10002c153:	74 10	je	0x10002c165
10002c155:	83 7f 30 00	cmpl	$0, 48(%rdi)
10002c159:	75 06	jne	0x10002c161
10002c15b:	f6 47 58 02	testb	$2, 88(%rdi)
10002c15f:	75 14	jne	0x10002c175
10002c161:	31 c0	xorl	%eax, %eax
10002c163:	eb 0e	jmp	0x10002c173
10002c165:	48 8d 05 34 60 03 00	leaq	221236(%rip), %rax
10002c16c:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002c170:	0f 94 c0	sete	%al
10002c173:	5d	popq	%rbp
10002c174:	c3	retq
10002c175:	b8 ff ff ff ff	movl	$4294967295, %eax
10002c17a:	48 39 47 68	cmpq	%rax, 104(%rdi)
10002c17e:	eb f0	jmp	0x10002c170
10002c180:	55	pushq	%rbp
10002c181:	48 89 e5	movq	%rsp, %rbp
10002c184:	53	pushq	%rbx
10002c185:	50	pushq	%rax
10002c186:	0f b7 87 08 04 00 00	movzwl	1032(%rdi), %eax
10002c18d:	a9 03 02 00 00	testl	$515, %eax
10002c192:	74 17	je	0x10002c1ab
10002c194:	48 89 fb	movq	%rdi, %rbx
10002c197:	31 ff	xorl	%edi, %edi
10002c199:	e8 db 18 fe ff	callq	0x10000da79
10002c19e:	84 c0	testb	%al, %al
10002c1a0:	74 0d	je	0x10002c1af
10002c1a2:	48 8d 05 6d 11 02 00	leaq	135533(%rip), %rax ## literal pool for: "system shutdown"
10002c1a9:	eb 71	jmp	0x10002c21c
10002c1ab:	31 c0	xorl	%eax, %eax
10002c1ad:	eb 6d	jmp	0x10002c21c
10002c1af:	bf 01 00 00 00	movl	$1, %edi
10002c1b4:	e8 c0 18 fe ff	callq	0x10000da79
10002c1b9:	84 c0	testb	%al, %al
10002c1bb:	74 09	je	0x10002c1c6
10002c1bd:	48 8d 05 62 11 02 00	leaq	135522(%rip), %rax ## literal pool for: "userspace reboot"
10002c1c4:	eb 56	jmp	0x10002c21c
10002c1c6:	bf 02 00 00 00	movl	$2, %edi
10002c1cb:	e8 a9 18 fe ff	callq	0x10000da79
10002c1d0:	84 c0	testb	%al, %al
10002c1d2:	74 09	je	0x10002c1dd
10002c1d4:	48 8d 05 5c 11 02 00	leaq	135516(%rip), %rax ## literal pool for: "pivot root"
10002c1db:	eb 3f	jmp	0x10002c21c
10002c1dd:	48 8b 4b 60	movq	96(%rbx), %rcx
10002c1e1:	48 8d 05 50 61 03 00	leaq	221520(%rip), %rax
10002c1e8:	48 39 c1	cmpq	%rax, %rcx
10002c1eb:	74 1f	je	0x10002c20c
10002c1ed:	f6 83 09 04 00 00 02	testb	$2, 1033(%rbx)
10002c1f4:	75 1f	jne	0x10002c215
10002c1f6:	31 c0	xorl	%eax, %eax
10002c1f8:	f6 81 80 00 00 00 02	testb	$2, 128(%rcx)
10002c1ff:	48 8d 0d 8d 11 02 00	leaq	135565(%rip), %rcx ## literal pool for: "logout"
10002c206:	48 0f 45 c1	cmovneq	%rcx, %rax
10002c20a:	eb 10	jmp	0x10002c21c
10002c20c:	48 8d 05 2f 11 02 00	leaq	135471(%rip), %rax ## literal pool for: "teardown of process-scoped services after host exited"
10002c213:	eb 07	jmp	0x10002c21c
10002c215:	48 8d 05 5c 11 02 00	leaq	135516(%rip), %rax ## literal pool for: "loginwindow transformation"
10002c21c:	48 83 c4 08	addq	$8, %rsp
10002c220:	5b	popq	%rbx
10002c221:	5d	popq	%rbp
10002c222:	c3	retq
10002c223:	55	pushq	%rbp
10002c224:	48 89 e5	movq	%rsp, %rbp
10002c227:	41 57	pushq	%r15
10002c229:	41 56	pushq	%r14
10002c22b:	53	pushq	%rbx
10002c22c:	50	pushq	%rax
10002c22d:	48 89 fb	movq	%rdi, %rbx
10002c230:	4c 8b b7 c8 00 00 00	movq	200(%rdi), %r14
10002c237:	be 01 00 00 00	movl	$1, %esi
10002c23c:	e8 c7 42 ff ff	callq	0x100020508
10002c241:	49 89 c7	movq	%rax, %r15
10002c244:	48 8d 15 4f 11 02 00	leaq	135503(%rip), %rdx ## literal pool for: "removing child: %s"
10002c24b:	4c 89 f7	movq	%r14, %rdi
10002c24e:	be 05 00 00 00	movl	$5, %esi
10002c253:	48 89 c1	movq	%rax, %rcx
10002c256:	31 c0	xorl	%eax, %eax
10002c258:	e8 cc 41 ff ff	callq	0x100020429
10002c25d:	4c 89 ff	movq	%r15, %rdi
10002c260:	e8 cb 57 01 00	callq	0x100041a30 ## symbol stub for: _free
10002c265:	48 8d 43 08	leaq	8(%rbx), %rax
10002c269:	48 8b 4b 08	movq	8(%rbx), %rcx
10002c26d:	48 85 c9	testq	%rcx, %rcx
10002c270:	74 08	je	0x10002c27a
10002c272:	48 8b 53 10	movq	16(%rbx), %rdx
10002c276:	48 89 51 10	movq	%rdx, 16(%rcx)
10002c27a:	48 8b 53 10	movq	16(%rbx), %rdx
10002c27e:	48 89 0a	movq	%rcx, (%rdx)
10002c281:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c285:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002c289:	48 89 df	movq	%rbx, %rdi
10002c28c:	be 04 00 00 00	movl	$4, %esi
10002c291:	e8 bb 66 fe ff	callq	0x100012951
10002c296:	4c 89 f7	movq	%r14, %rdi
10002c299:	be 05 00 00 00	movl	$5, %esi
10002c29e:	e8 92 44 ff ff	callq	0x100020735
10002c2a3:	48 89 df	movq	%rbx, %rdi
10002c2a6:	be 03 00 00 00	movl	$3, %esi
10002c2ab:	48 83 c4 08	addq	$8, %rsp
10002c2af:	5b	popq	%rbx
10002c2b0:	41 5e	popq	%r14
10002c2b2:	41 5f	popq	%r15
10002c2b4:	5d	popq	%rbp
10002c2b5:	e9 97 66 fe ff	jmp	0x100012951
10002c2ba:	55	pushq	%rbp
10002c2bb:	48 89 e5	movq	%rsp, %rbp
10002c2be:	41 57	pushq	%r15
10002c2c0:	41 56	pushq	%r14
10002c2c2:	53	pushq	%rbx
10002c2c3:	50	pushq	%rax
10002c2c4:	48 8d 05 c5 63 03 00	leaq	222149(%rip), %rax
10002c2cb:	45 31 f6	xorl	%r14d, %r14d
10002c2ce:	80 38 00	cmpb	$0, (%rax)
10002c2d1:	74 42	je	0x10002c315
10002c2d3:	48 89 fb	movq	%rdi, %rbx
10002c2d6:	48 85 ff	testq	%rdi, %rdi
10002c2d9:	74 0e	je	0x10002c2e9
10002c2db:	44 8b 7b 14	movl	20(%rbx), %r15d
10002c2df:	e8 b2 57 01 00	callq	0x100041a96 ## symbol stub for: _getpid
10002c2e4:	41 39 c7	cmpl	%eax, %r15d
10002c2e7:	74 2c	je	0x10002c315
10002c2e9:	be 08 00 00 00	movl	$8, %esi
10002c2ee:	48 89 df	movq	%rbx, %rdi
10002c2f1:	e8 c0 f6 fd ff	callq	0x10000b9b6
10002c2f6:	84 c0	testb	%al, %al
10002c2f8:	75 1b	jne	0x10002c315
10002c2fa:	be 09 00 00 00	movl	$9, %esi
10002c2ff:	48 89 df	movq	%rbx, %rdi
10002c302:	e8 af f6 fd ff	callq	0x10000b9b6
10002c307:	31 c9	xorl	%ecx, %ecx
10002c309:	84 c0	testb	%al, %al
10002c30b:	41 be 96 00 00 00	movl	$150, %r14d
10002c311:	44 0f 45 f1	cmovnel	%ecx, %r14d
10002c315:	44 89 f0	movl	%r14d, %eax
10002c318:	48 83 c4 08	addq	$8, %rsp
10002c31c:	5b	popq	%rbx
10002c31d:	41 5e	popq	%r14
10002c31f:	41 5f	popq	%r15
10002c321:	5d	popq	%rbp
10002c322:	c3	retq
10002c323:	55	pushq	%rbp
10002c324:	48 89 e5	movq	%rsp, %rbp
10002c327:	53	pushq	%rbx
10002c328:	50	pushq	%rax
10002c329:	48 89 fb	movq	%rdi, %rbx
10002c32c:	8b 7f 10	movl	16(%rdi), %edi
10002c32f:	48 8b 73 18	movq	24(%rbx), %rsi
10002c333:	e8 92 de 00 00	callq	0x10003a1ca
10002c338:	48 8b 7b 18	movq	24(%rbx), %rdi
10002c33c:	e8 bb 5d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002c341:	48 89 df	movq	%rbx, %rdi
10002c344:	48 83 c4 08	addq	$8, %rsp
10002c348:	5b	popq	%rbx
10002c349:	5d	popq	%rbp
10002c34a:	e9 e1 56 01 00	jmp	0x100041a30 ## symbol stub for: _free
10002c34f:	55	pushq	%rbp
10002c350:	48 89 e5	movq	%rsp, %rbp
10002c353:	8b b7 10 01 00 00	movl	272(%rdi), %esi
10002c359:	85 f6	testl	%esi, %esi
10002c35b:	74 10	je	0x10002c36d
10002c35d:	c7 87 10 01 00 00 00 00 00 00	movl	$0, 272(%rdi)
10002c367:	5d	popq	%rbp
10002c368:	e9 57 eb fe ff	jmp	0x10001aec4
10002c36d:	e8 0e 46 01 00	callq	0x100040980
10002c372:	55	pushq	%rbp
10002c373:	48 89 e5	movq	%rsp, %rbp
10002c376:	41 56	pushq	%r14
10002c378:	53	pushq	%rbx
10002c379:	66 83 be 1c 01 00 00 00	cmpw	$0, 284(%rsi)
10002c381:	75 21	jne	0x10002c3a4
10002c383:	48 89 f3	movq	%rsi, %rbx
10002c386:	49 89 fe	movq	%rdi, %r14
10002c389:	48 89 f7	movq	%rsi, %rdi
10002c38c:	e8 70 f4 fe ff	callq	0x10001b801
10002c391:	85 c0	testl	%eax, %eax
10002c393:	75 14	jne	0x10002c3a9
10002c395:	4c 89 f7	movq	%r14, %rdi
10002c398:	48 89 de	movq	%rbx, %rsi
10002c39b:	5b	popq	%rbx
10002c39c:	41 5e	popq	%r14
10002c39e:	5d	popq	%rbp
10002c39f:	e9 13 00 00 00	jmp	0x10002c3b7
10002c3a4:	e8 ec 45 01 00	callq	0x100040995
10002c3a9:	48 8d 3d f3 12 02 00	leaq	135923(%rip), %rdi ## literal pool for: "active service has zero active count"
10002c3b0:	31 c0	xorl	%eax, %eax
10002c3b2:	e8 5b 80 00 00	callq	0x100034412
10002c3b7:	55	pushq	%rbp
10002c3b8:	48 89 e5	movq	%rsp, %rbp
10002c3bb:	41 57	pushq	%r15
10002c3bd:	41 56	pushq	%r14
10002c3bf:	41 54	pushq	%r12
10002c3c1:	53	pushq	%rbx
10002c3c2:	48 39 be e8 00 00 00	cmpq	%rdi, 232(%rsi)
10002c3c9:	0f 85 13 03 00 00	jne	0x10002c6e2
10002c3cf:	49 89 f6	movq	%rsi, %r14
10002c3d2:	49 89 ff	movq	%rdi, %r15
10002c3d5:	48 8d 05 5c 5f 03 00	leaq	221020(%rip), %rax
10002c3dc:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002c3e0:	75 0b	jne	0x10002c3ed
10002c3e2:	66 41 83 be 1c 01 00 00 00	cmpw	$0, 284(%r14)
10002c3eb:	74 1d	je	0x10002c40a
10002c3ed:	49 8d 8e 18 05 00 00	leaq	1304(%r14), %rcx
10002c3f4:	48 8d 15 fb 12 02 00	leaq	135931(%rip), %rdx ## literal pool for: "removing service: %s"
10002c3fb:	4c 89 ff	movq	%r15, %rdi
10002c3fe:	be 05 00 00 00	movl	$5, %esi
10002c403:	31 c0	xorl	%eax, %eax
10002c405:	e8 1f 40 ff ff	callq	0x100020429
10002c40a:	41 8b 86 64 01 00 00	movl	356(%r14), %eax
10002c411:	83 e0 ee	andl	$-18, %eax
10002c414:	83 c8 10	orl	$16, %eax
10002c417:	66 41 89 86 64 01 00 00	movw	%ax, 356(%r14)
10002c41f:	4c 89 f7	movq	%r14, %rdi
10002c422:	e8 c9 02 00 00	callq	0x10002c6f0
10002c427:	49 8b b6 88 00 00 00	movq	136(%r14), %rsi
10002c42e:	48 85 f6	testq	%rsi, %rsi
10002c431:	74 14	je	0x10002c447
10002c433:	48 8b 5e 08	movq	8(%rsi), %rbx
10002c437:	4c 89 ff	movq	%r15, %rdi
10002c43a:	e8 7e 03 00 00	callq	0x10002c7bd
10002c43f:	48 89 de	movq	%rbx, %rsi
10002c442:	48 85 db	testq	%rbx, %rbx
10002c445:	75 ec	jne	0x10002c433
10002c447:	49 8b b6 a0 00 00 00	movq	160(%r14), %rsi
10002c44e:	48 85 f6	testq	%rsi, %rsi
10002c451:	74 14	je	0x10002c467
10002c453:	48 8b 5e 08	movq	8(%rsi), %rbx
10002c457:	4c 89 ff	movq	%r15, %rdi
10002c45a:	e8 5e 03 00 00	callq	0x10002c7bd
10002c45f:	48 89 de	movq	%rbx, %rsi
10002c462:	48 85 db	testq	%rbx, %rbx
10002c465:	75 ec	jne	0x10002c453
10002c467:	49 8b b6 a8 00 00 00	movq	168(%r14), %rsi
10002c46e:	48 85 f6	testq	%rsi, %rsi
10002c471:	74 14	je	0x10002c487
10002c473:	48 8b 5e 08	movq	8(%rsi), %rbx
10002c477:	4c 89 ff	movq	%r15, %rdi
10002c47a:	e8 3e 03 00 00	callq	0x10002c7bd
10002c47f:	48 89 de	movq	%rbx, %rsi
10002c482:	48 85 db	testq	%rbx, %rbx
10002c485:	75 ec	jne	0x10002c473
10002c487:	49 8b be b0 00 00 00	movq	176(%r14), %rdi
10002c48e:	48 85 ff	testq	%rdi, %rdi
10002c491:	74 64	je	0x10002c4f7
10002c493:	48 8d 57 08	leaq	8(%rdi), %rdx
10002c497:	48 8b 4f 08	movq	8(%rdi), %rcx
10002c49b:	48 8b 47 10	movq	16(%rdi), %rax
10002c49f:	48 85 c9	testq	%rcx, %rcx
10002c4a2:	74 36	je	0x10002c4da
10002c4a4:	48 89 cb	movq	%rcx, %rbx
10002c4a7:	4c 8d 61 08	leaq	8(%rcx), %r12
10002c4ab:	48 89 41 10	movq	%rax, 16(%rcx)
10002c4af:	48 8b 47 10	movq	16(%rdi), %rax
10002c4b3:	48 89 08	movq	%rcx, (%rax)
10002c4b6:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c4ba:	f3 0f 7f 02	movdqu	%xmm0, (%rdx)
10002c4be:	31 f6	xorl	%esi, %esi
10002c4c0:	e8 8c 64 fe ff	callq	0x100012951
10002c4c5:	48 8b 4b 08	movq	8(%rbx), %rcx
10002c4c9:	48 8b 43 10	movq	16(%rbx), %rax
10002c4cd:	4c 89 e2	movq	%r12, %rdx
10002c4d0:	48 89 df	movq	%rbx, %rdi
10002c4d3:	48 85 c9	testq	%rcx, %rcx
10002c4d6:	75 cc	jne	0x10002c4a4
10002c4d8:	eb 06	jmp	0x10002c4e0
10002c4da:	48 89 fb	movq	%rdi, %rbx
10002c4dd:	49 89 d4	movq	%rdx, %r12
10002c4e0:	48 89 08	movq	%rcx, (%rax)
10002c4e3:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c4e7:	f3 41 0f 7f 04 24	movdqu	%xmm0, (%r12)
10002c4ed:	48 89 df	movq	%rbx, %rdi
10002c4f0:	31 f6	xorl	%esi, %esi
10002c4f2:	e8 5a 64 fe ff	callq	0x100012951
10002c4f7:	49 8b b6 b8 00 00 00	movq	184(%r14), %rsi
10002c4fe:	48 85 f6	testq	%rsi, %rsi
10002c501:	74 14	je	0x10002c517
10002c503:	48 8b 5e 18	movq	24(%rsi), %rbx
10002c507:	4c 89 ff	movq	%r15, %rdi
10002c50a:	e8 3d 54 ff ff	callq	0x10002194c
10002c50f:	48 89 de	movq	%rbx, %rsi
10002c512:	48 85 db	testq	%rbx, %rbx
10002c515:	75 ec	jne	0x10002c503
10002c517:	41 0f b7 86 64 01 00 00	movzwl	356(%r14), %eax
10002c51f:	89 c1	movl	%eax, %ecx
10002c521:	81 e1 00 06 00 00	andl	$1536, %ecx
10002c527:	81 f9 00 02 00 00	cmpl	$512, %ecx
10002c52d:	0f 85 96 00 00 00	jne	0x10002c5c9
10002c533:	0d 00 04 00 00	orl	$1024, %eax
10002c538:	66 41 89 86 64 01 00 00	movw	%ax, 356(%r14)
10002c540:	49 8d 46 18	leaq	24(%r14), %rax
10002c544:	49 8b 4e 18	movq	24(%r14), %rcx
10002c548:	49 8b 56 20	movq	32(%r14), %rdx
10002c54c:	48 85 c9	testq	%rcx, %rcx
10002c54f:	74 0a	je	0x10002c55b
10002c551:	48 89 51 20	movq	%rdx, 32(%rcx)
10002c555:	49 8b 56 20	movq	32(%r14), %rdx
10002c559:	eb 40	jmp	0x10002c59b
10002c55b:	49 8b b6 f0 00 00 00	movq	240(%r14), %rsi
10002c562:	48 89 96 c0 00 00 00	movq	%rdx, 192(%rsi)
10002c569:	8b be d0 00 00 00	movl	208(%rsi), %edi
10002c56f:	89 be e0 00 00 00	movl	%edi, 224(%rsi)
10002c575:	48 8b be c8 00 00 00	movq	200(%rsi), %rdi
10002c57c:	48 89 be d8 00 00 00	movq	%rdi, 216(%rsi)
10002c583:	c7 86 d0 00 00 00 0b 14 00 00	movl	$5131, 208(%rsi)
10002c58d:	48 8d 3d 8a 08 02 00	leaq	133258(%rip), %rdi ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/domain.c"
10002c594:	48 89 be c8 00 00 00	movq	%rdi, 200(%rsi)
10002c59b:	48 89 0a	movq	%rcx, (%rdx)
10002c59e:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c5a2:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002c5a6:	41 8b 46 30	movl	48(%r14), %eax
10002c5aa:	41 89 46 40	movl	%eax, 64(%r14)
10002c5ae:	49 8b 46 28	movq	40(%r14), %rax
10002c5b2:	49 89 46 38	movq	%rax, 56(%r14)
10002c5b6:	41 c7 46 30 0b 14 00 00	movl	$5131, 48(%r14)
10002c5be:	48 8d 05 59 08 02 00	leaq	133209(%rip), %rax ## literal pool for: "/AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/libxpc_executables/launchd/domain.c"
10002c5c5:	49 89 46 28	movq	%rax, 40(%r14)
10002c5c9:	4c 89 f7	movq	%r14, %rdi
10002c5cc:	e8 c0 e6 fe ff	callq	0x10001ac91
10002c5d1:	84 c0	testb	%al, %al
10002c5d3:	74 17	je	0x10002c5ec
10002c5d5:	49 8b be f0 00 00 00	movq	240(%r14), %rdi
10002c5dc:	ff 8f f8 00 00 00	decl	248(%rdi)
10002c5e2:	be 1a 00 00 00	movl	$26, %esi
10002c5e7:	e8 65 63 fe ff	callq	0x100012951
10002c5ec:	49 8b 7f 50	movq	80(%r15), %rdi
10002c5f0:	48 85 ff	testq	%rdi, %rdi
10002c5f3:	74 32	je	0x10002c627
10002c5f5:	48 8b 1f	movq	(%rdi), %rbx
10002c5f8:	4c 39 77 10	cmpq	%r14, 16(%rdi)
10002c5fc:	75 21	jne	0x10002c61f
10002c5fe:	48 85 db	testq	%rbx, %rbx
10002c601:	74 08	je	0x10002c60b
10002c603:	48 8b 47 08	movq	8(%rdi), %rax
10002c607:	48 89 43 08	movq	%rax, 8(%rbx)
10002c60b:	48 8b 47 08	movq	8(%rdi), %rax
10002c60f:	48 89 18	movq	%rbx, (%rax)
10002c612:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c616:	f3 0f 7f 07	movdqu	%xmm0, (%rdi)
10002c61a:	e8 53 65 fe ff	callq	0x100012b72
10002c61f:	48 89 df	movq	%rbx, %rdi
10002c622:	48 85 db	testq	%rbx, %rbx
10002c625:	75 ce	jne	0x10002c5f5
10002c627:	49 8d 46 68	leaq	104(%r14), %rax
10002c62b:	49 8b 4e 68	movq	104(%r14), %rcx
10002c62f:	48 85 c9	testq	%rcx, %rcx
10002c632:	74 08	je	0x10002c63c
10002c634:	49 8b 56 70	movq	112(%r14), %rdx
10002c638:	48 89 51 70	movq	%rdx, 112(%rcx)
10002c63c:	49 8b 56 70	movq	112(%r14), %rdx
10002c640:	48 89 0a	movq	%rcx, (%rdx)
10002c643:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c647:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002c64b:	41 ff 8f a0 00 00 00	decl	160(%r15)
10002c652:	49 8b be 28 01 00 00	movq	296(%r14), %rdi
10002c659:	48 85 ff	testq	%rdi, %rdi
10002c65c:	74 18	je	0x10002c676
10002c65e:	e8 2a 0a fe ff	callq	0x10000d08d
10002c663:	48 89 c7	movq	%rax, %rdi
10002c666:	e8 ed 55 01 00	callq	0x100041c58 ## symbol stub for: _os_release
10002c66b:	49 c7 86 28 01 00 00 00 00 00 00	movq	$0, 296(%r14)
10002c676:	49 8b be 30 01 00 00	movq	304(%r14), %rdi
10002c67d:	48 85 ff	testq	%rdi, %rdi
10002c680:	74 18	je	0x10002c69a
10002c682:	e8 06 0a fe ff	callq	0x10000d08d
10002c687:	48 89 c7	movq	%rax, %rdi
10002c68a:	e8 c9 55 01 00	callq	0x100041c58 ## symbol stub for: _os_release
10002c68f:	49 c7 86 30 01 00 00 00 00 00 00	movq	$0, 304(%r14)
10002c69a:	4d 39 b7 e0 03 00 00	cmpq	%r14, 992(%r15)
10002c6a1:	75 0b	jne	0x10002c6ae
10002c6a3:	49 c7 87 e0 03 00 00 00 00 00 00	movq	$0, 992(%r15)
10002c6ae:	4c 89 f7	movq	%r14, %rdi
10002c6b1:	e8 a4 8a fd ff	callq	0x10000515a
10002c6b6:	4c 89 f7	movq	%r14, %rdi
10002c6b9:	31 f6	xorl	%esi, %esi
10002c6bb:	e8 91 62 fe ff	callq	0x100012951
10002c6c0:	4c 89 ff	movq	%r15, %rdi
10002c6c3:	be 06 00 00 00	movl	$6, %esi
10002c6c8:	e8 68 40 ff ff	callq	0x100020735
10002c6cd:	4c 89 ff	movq	%r15, %rdi
10002c6d0:	be 06 00 00 00	movl	$6, %esi
10002c6d5:	5b	popq	%rbx
10002c6d6:	41 5c	popq	%r12
10002c6d8:	41 5e	popq	%r14
10002c6da:	41 5f	popq	%r15
10002c6dc:	5d	popq	%rbp
10002c6dd:	e9 6f 62 fe ff	jmp	0x100012951
10002c6e2:	48 8d 3d df 0f 02 00	leaq	135135(%rip), %rdi ## literal pool for: "inconsistency in service domain during remove"
10002c6e9:	31 c0	xorl	%eax, %eax
10002c6eb:	e8 22 7d 00 00	callq	0x100034412
10002c6f0:	55	pushq	%rbp
10002c6f1:	48 89 e5	movq	%rsp, %rbp
10002c6f4:	41 56	pushq	%r14
10002c6f6:	53	pushq	%rbx
10002c6f7:	49 89 fe	movq	%rdi, %r14
10002c6fa:	f6 87 65 01 00 00 08	testb	$8, 357(%rdi)
10002c701:	74 3a	je	0x10002c73d
10002c703:	49 8b be 90 00 00 00	movq	144(%r14), %rdi
10002c70a:	48 85 ff	testq	%rdi, %rdi
10002c70d:	74 11	je	0x10002c720
10002c70f:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c713:	e8 39 f5 00 00	callq	0x10003bc51
10002c718:	48 89 df	movq	%rbx, %rdi
10002c71b:	48 85 db	testq	%rbx, %rbx
10002c71e:	75 ef	jne	0x10002c70f
10002c720:	49 8b be 98 00 00 00	movq	152(%r14), %rdi
10002c727:	48 85 ff	testq	%rdi, %rdi
10002c72a:	74 11	je	0x10002c73d
10002c72c:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c730:	e8 1c f5 00 00	callq	0x10003bc51
10002c735:	48 89 df	movq	%rbx, %rdi
10002c738:	48 85 db	testq	%rbx, %rbx
10002c73b:	75 ef	jne	0x10002c72c
10002c73d:	49 8b be 88 00 00 00	movq	136(%r14), %rdi
10002c744:	48 85 ff	testq	%rdi, %rdi
10002c747:	74 11	je	0x10002c75a
10002c749:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c74d:	e8 ff f4 00 00	callq	0x10003bc51
10002c752:	48 89 df	movq	%rbx, %rdi
10002c755:	48 85 db	testq	%rbx, %rbx
10002c758:	75 ef	jne	0x10002c749
10002c75a:	49 8b be a0 00 00 00	movq	160(%r14), %rdi
10002c761:	48 85 ff	testq	%rdi, %rdi
10002c764:	74 11	je	0x10002c777
10002c766:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c76a:	e8 e2 f4 00 00	callq	0x10003bc51
10002c76f:	48 89 df	movq	%rbx, %rdi
10002c772:	48 85 db	testq	%rbx, %rbx
10002c775:	75 ef	jne	0x10002c766
10002c777:	49 8b be a8 00 00 00	movq	168(%r14), %rdi
10002c77e:	48 85 ff	testq	%rdi, %rdi
10002c781:	74 11	je	0x10002c794
10002c783:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c787:	e8 c5 f4 00 00	callq	0x10003bc51
10002c78c:	48 89 df	movq	%rbx, %rdi
10002c78f:	48 85 db	testq	%rbx, %rbx
10002c792:	75 ef	jne	0x10002c783
10002c794:	49 8b be b0 00 00 00	movq	176(%r14), %rdi
10002c79b:	48 85 ff	testq	%rdi, %rdi
10002c79e:	74 11	je	0x10002c7b1
10002c7a0:	48 8b 5f 08	movq	8(%rdi), %rbx
10002c7a4:	e8 f1 86 fe ff	callq	0x100014e9a
10002c7a9:	48 89 df	movq	%rbx, %rdi
10002c7ac:	48 85 db	testq	%rbx, %rbx
10002c7af:	75 ef	jne	0x10002c7a0
10002c7b1:	4c 89 f7	movq	%r14, %rdi
10002c7b4:	5b	popq	%rbx
10002c7b5:	41 5e	popq	%r14
10002c7b7:	5d	popq	%rbp
10002c7b8:	e9 85 ef fe ff	jmp	0x10001b742
10002c7bd:	55	pushq	%rbp
10002c7be:	48 89 e5	movq	%rsp, %rbp
10002c7c1:	41 57	pushq	%r15
10002c7c3:	41 56	pushq	%r14
10002c7c5:	53	pushq	%rbx
10002c7c6:	50	pushq	%rax
10002c7c7:	49 89 f7	movq	%rsi, %r15
10002c7ca:	48 83 7e 40 00	cmpq	$0, 64(%rsi)
10002c7cf:	74 12	je	0x10002c7e3
10002c7d1:	4c 89 ff	movq	%r15, %rdi
10002c7d4:	48 83 c4 08	addq	$8, %rsp
10002c7d8:	5b	popq	%rbx
10002c7d9:	41 5e	popq	%r14
10002c7db:	41 5f	popq	%r15
10002c7dd:	5d	popq	%rbp
10002c7de:	e9 80 01 00 00	jmp	0x10002c963
10002c7e3:	49 89 fe	movq	%rdi, %r14
10002c7e6:	49 8b 7f 38	movq	56(%r15), %rdi
10002c7ea:	48 85 ff	testq	%rdi, %rdi
10002c7ed:	74 11	je	0x10002c800
10002c7ef:	48 8b 5f 28	movq	40(%rdi), %rbx
10002c7f3:	e8 6b 01 00 00	callq	0x10002c963
10002c7f8:	48 89 df	movq	%rbx, %rdi
10002c7fb:	48 85 db	testq	%rbx, %rbx
10002c7fe:	75 ef	jne	0x10002c7ef
10002c800:	41 f6 47 50 20	testb	$32, 80(%r15)
10002c805:	0f 84 ee 00 00 00	je	0x10002c8f9
10002c80b:	41 8b 47 48	movl	72(%r15), %eax
10002c80f:	85 c0	testl	%eax, %eax
10002c811:	74 66	je	0x10002c879
10002c813:	83 f8 09	cmpl	$9, %eax
10002c816:	75 1f	jne	0x10002c837
10002c818:	8b 3d 4a 5d 03 00	movl	220490(%rip), %edi
10002c81e:	e8 16 d5 fd ff	callq	0x100009d39
10002c823:	85 c0	testl	%eax, %eax
10002c825:	0f 85 06 01 00 00	jne	0x10002c931
10002c82b:	c7 05 33 5d 03 00 00 00 00 00	movl	$0, 220467(%rip)
10002c835:	eb 42	jmp	0x10002c879
10002c837:	49 8b be b0 03 00 00	movq	944(%r14), %rdi
10002c83e:	48 85 ff	testq	%rdi, %rdi
10002c841:	49 0f 44 fe	cmoveq	%r14, %rdi
10002c845:	48 8b 8f b0 03 00 00	movq	944(%rdi), %rcx
10002c84c:	83 f8 04	cmpl	$4, %eax
10002c84f:	48 89 fa	movq	%rdi, %rdx
10002c852:	48 0f 45 d1	cmovneq	%rcx, %rdx
10002c856:	48 85 c9	testq	%rcx, %rcx
10002c859:	48 0f 44 d7	cmoveq	%rdi, %rdx
10002c85d:	48 8b 72 48	movq	72(%rdx), %rsi
10002c861:	48 85 f6	testq	%rsi, %rsi
10002c864:	0f 84 eb 00 00 00	je	0x10002c955
10002c86a:	39 46 14	cmpl	%eax, 20(%rsi)
10002c86d:	74 05	je	0x10002c874
10002c86f:	48 8b 36	movq	(%rsi), %rsi
10002c872:	eb ed	jmp	0x10002c861
10002c874:	e8 5f 3b ff ff	callq	0x1000203d8
10002c879:	4d 63 77 4c	movslq	76(%r15), %r14
10002c87d:	4d 85 f6	testq	%r14, %r14
10002c880:	74 53	je	0x10002c8d5
10002c882:	41 83 fe 18	cmpl	$24, %r14d
10002c886:	75 17	jne	0x10002c89f
10002c888:	e8 b1 52 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10002c88d:	89 c7	movl	%eax, %edi
10002c88f:	31 f6	xorl	%esi, %esi
10002c891:	e8 cd b5 00 00	callq	0x100037e63
10002c896:	48 8d 05 cb 6c 03 00	leaq	224459(%rip), %rax
10002c89d:	eb 2f	jmp	0x10002c8ce
10002c89f:	44 89 f0	movl	%r14d, %eax
10002c8a2:	83 e0 fb	andl	$-5, %eax
10002c8a5:	83 f8 19	cmpl	$25, %eax
10002c8a8:	75 19	jne	0x10002c8c3
10002c8aa:	e8 8f 52 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10002c8af:	89 c7	movl	%eax, %edi
10002c8b1:	44 89 f6	movl	%r14d, %esi
10002c8b4:	31 d2	xorl	%edx, %edx
10002c8b6:	e8 35 52 01 00	callq	0x100041af0 ## symbol stub for: _host_set_special_port
10002c8bb:	85 c0	testl	%eax, %eax
10002c8bd:	0f 85 85 00 00 00	jne	0x10002c948
10002c8c3:	48 8d 05 a6 6c 03 00	leaq	224422(%rip), %rax
10002c8ca:	4a 8d 04 f0	leaq	(%rax,%r14,8), %rax
10002c8ce:	48 c7 00 00 00 00 00	movq	$0, (%rax)
10002c8d5:	49 8d 47 18	leaq	24(%r15), %rax
10002c8d9:	49 8b 4f 18	movq	24(%r15), %rcx
10002c8dd:	48 85 c9	testq	%rcx, %rcx
10002c8e0:	74 08	je	0x10002c8ea
10002c8e2:	49 8b 57 20	movq	32(%r15), %rdx
10002c8e6:	48 89 51 20	movq	%rdx, 32(%rcx)
10002c8ea:	49 8b 57 20	movq	32(%r15), %rdx
10002c8ee:	48 89 0a	movq	%rcx, (%rdx)
10002c8f1:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c8f5:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002c8f9:	49 8d 47 08	leaq	8(%r15), %rax
10002c8fd:	49 8b 4f 08	movq	8(%r15), %rcx
10002c901:	48 85 c9	testq	%rcx, %rcx
10002c904:	74 08	je	0x10002c90e
10002c906:	49 8b 57 10	movq	16(%r15), %rdx
10002c90a:	48 89 51 10	movq	%rdx, 16(%rcx)
10002c90e:	49 8b 57 10	movq	16(%r15), %rdx
10002c912:	48 89 0a	movq	%rcx, (%rdx)
10002c915:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002c919:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10002c91d:	4c 89 ff	movq	%r15, %rdi
10002c920:	31 f6	xorl	%esi, %esi
10002c922:	48 83 c4 08	addq	$8, %rsp
10002c926:	5b	popq	%rbx
10002c927:	41 5e	popq	%r14
10002c929:	41 5f	popq	%r15
10002c92b:	5d	popq	%rbp
10002c92c:	e9 20 60 fe ff	jmp	0x100012951
10002c931:	48 63 d0	movslq	%eax, %rdx
10002c934:	48 8d 3d cd 3a ff ff	leaq	-50483(%rip), %rdi
10002c93b:	4c 89 f6	movq	%r14, %rsi
10002c93e:	e8 65 4e 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002c943:	e9 e3 fe ff ff	jmp	0x10002c82b
10002c948:	48 63 f8	movslq	%eax, %rdi
10002c94b:	e8 52 4e 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10002c950:	e9 6e ff ff ff	jmp	0x10002c8c3
10002c955:	48 8d 3d dd 0d 02 00	leaq	134621(%rip), %rdi ## literal pool for: "domain has no corresponding special port entry"
10002c95c:	31 c0	xorl	%eax, %eax
10002c95e:	e8 af 7a 00 00	callq	0x100034412
10002c963:	55	pushq	%rbp
10002c964:	48 89 e5	movq	%rsp, %rbp
10002c967:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10002c96c:	74 36	je	0x10002c9a4
10002c96e:	48 8b 47 18	movq	24(%rdi), %rax
10002c972:	48 85 c0	testq	%rax, %rax
10002c975:	74 08	je	0x10002c97f
10002c977:	48 8b 4f 20	movq	32(%rdi), %rcx
10002c97b:	48 89 48 20	movq	%rcx, 32(%rax)
10002c97f:	48 8b 4f 20	movq	32(%rdi), %rcx
10002c983:	48 89 01	movq	%rax, (%rcx)
10002c986:	48 8b 47 28	movq	40(%rdi), %rax
10002c98a:	48 85 c0	testq	%rax, %rax
10002c98d:	74 08	je	0x10002c997
10002c98f:	48 8b 4f 30	movq	48(%rdi), %rcx
10002c993:	48 89 48 30	movq	%rcx, 48(%rax)
10002c997:	48 8b 4f 30	movq	48(%rdi), %rcx
10002c99b:	48 89 01	movq	%rax, (%rcx)
10002c99e:	5d	popq	%rbp
10002c99f:	e9 8c 50 01 00	jmp	0x100041a30 ## symbol stub for: _free
10002c9a4:	48 8d 3d 60 0d 02 00	leaq	134496(%rip), %rdi ## literal pool for: "alias-removal attempt of non-aliased endpoint"
10002c9ab:	31 c0	xorl	%eax, %eax
10002c9ad:	e8 60 7a 00 00	callq	0x100034412
10002c9b2:	55	pushq	%rbp
10002c9b3:	48 89 e5	movq	%rsp, %rbp
10002c9b6:	53	pushq	%rbx
10002c9b7:	50	pushq	%rax
10002c9b8:	48 89 fb	movq	%rdi, %rbx
10002c9bb:	bf 01 00 00 00	movl	$1, %edi
10002c9c0:	e8 b4 10 fe ff	callq	0x10000da79
10002c9c5:	84 c0	testb	%al, %al
10002c9c7:	74 15	je	0x10002c9de
10002c9c9:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
10002c9d0:	48 8d 3d 91 0d 02 00	leaq	134545(%rip), %rdi ## literal pool for: "Abandoning service: %s"
10002c9d7:	31 c0	xorl	%eax, %eax
10002c9d9:	e8 b6 10 fe ff	callq	0x10000da94
10002c9de:	80 8b 65 01 00 00 08	orb	$8, 357(%rbx)
10002c9e5:	48 89 df	movq	%rbx, %rdi
10002c9e8:	48 83 c4 08	addq	$8, %rsp
10002c9ec:	5b	popq	%rbx
10002c9ed:	5d	popq	%rbp
10002c9ee:	e9 fd fc ff ff	jmp	0x10002c6f0
10002c9f3:	55	pushq	%rbp
10002c9f4:	48 89 e5	movq	%rsp, %rbp
10002c9f7:	41 57	pushq	%r15
10002c9f9:	41 56	pushq	%r14
10002c9fb:	53	pushq	%rbx
10002c9fc:	50	pushq	%rax
10002c9fd:	48 8d 05 34 59 03 00	leaq	219444(%rip), %rax
10002ca04:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002ca08:	74 10	je	0x10002ca1a
10002ca0a:	31 db	xorl	%ebx, %ebx
10002ca0c:	48 89 d8	movq	%rbx, %rax
10002ca0f:	48 83 c4 08	addq	$8, %rsp
10002ca13:	5b	popq	%rbx
10002ca14:	41 5e	popq	%r14
10002ca16:	41 5f	popq	%r15
10002ca18:	5d	popq	%rbp
10002ca19:	c3	retq
10002ca1a:	49 89 f7	movq	%rsi, %r15
10002ca1d:	49 89 fe	movq	%rdi, %r14
10002ca20:	48 89 f7	movq	%rsi, %rdi
10002ca23:	e8 a0 68 fd ff	callq	0x1000032c8
10002ca28:	48 85 c0	testq	%rax, %rax
10002ca2b:	74 dd	je	0x10002ca0a
10002ca2d:	48 89 c3	movq	%rax, %rbx
10002ca30:	48 8d 15 60 0e 02 00	leaq	134752(%rip), %rdx ## literal pool for: "initialized endpoint after lookup"
10002ca37:	4c 89 ff	movq	%r15, %rdi
10002ca3a:	be 05 00 00 00	movl	$5, %esi
10002ca3f:	31 c0	xorl	%eax, %eax
10002ca41:	e8 74 95 fe ff	callq	0x100015fba
10002ca46:	66 41 83 bf 1c 01 00 00 00	cmpw	$0, 284(%r15)
10002ca4f:	7f 4c	jg	0x10002ca9d
10002ca51:	41 f6 87 64 01 00 00 01	testb	$1, 356(%r15)
10002ca59:	75 4b	jne	0x10002caa6
10002ca5b:	4c 89 f7	movq	%r14, %rdi
10002ca5e:	48 89 de	movq	%rbx, %rsi
10002ca61:	e8 4e 00 00 00	callq	0x10002cab4
10002ca66:	85 c0	testl	%eax, %eax
10002ca68:	74 26	je	0x10002ca90
10002ca6a:	48 8d 15 b1 0e 02 00	leaq	134833(%rip), %rdx ## literal pool for: "Failed to initialize implicit endpoint"
10002ca71:	4c 89 ff	movq	%r15, %rdi
10002ca74:	be 03 00 00 00	movl	$3, %esi
10002ca79:	31 c0	xorl	%eax, %eax
10002ca7b:	e8 3a 95 fe ff	callq	0x100015fba
10002ca80:	4c 89 f7	movq	%r14, %rdi
10002ca83:	48 89 de	movq	%rbx, %rsi
10002ca86:	e8 32 fd ff ff	callq	0x10002c7bd
10002ca8b:	e9 7a ff ff ff	jmp	0x10002ca0a
10002ca90:	48 89 df	movq	%rbx, %rdi
10002ca93:	e8 54 ee 00 00	callq	0x10003b8ec
10002ca98:	e9 6f ff ff ff	jmp	0x10002ca0c
10002ca9d:	48 8d 3d 15 0e 02 00	leaq	134677(%rip), %rdi ## literal pool for: "lazy initialization of endpoint on active service"
10002caa4:	eb 07	jmp	0x10002caad
10002caa6:	48 8d 3d 3e 0e 02 00	leaq	134718(%rip), %rdi ## literal pool for: "lazy initialization of endpoint on semi-active service"
10002caad:	31 c0	xorl	%eax, %eax
10002caaf:	e8 5e 79 00 00	callq	0x100034412
10002cab4:	55	pushq	%rbp
10002cab5:	48 89 e5	movq	%rsp, %rbp
10002cab8:	41 57	pushq	%r15
10002caba:	41 56	pushq	%r14
10002cabc:	41 55	pushq	%r13
10002cabe:	41 54	pushq	%r12
10002cac0:	53	pushq	%rbx
10002cac1:	48 83 ec 18	subq	$24, %rsp
10002cac5:	49 89 f6	movq	%rsi, %r14
10002cac8:	49 89 fd	movq	%rdi, %r13
10002cacb:	48 89 f7	movq	%rsi, %rdi
10002cace:	e8 f9 eb 00 00	callq	0x10003b6cc
10002cad3:	49 89 c7	movq	%rax, %r15
10002cad6:	4d 8d a6 90 00 00 00	leaq	144(%r14), %r12
10002cadd:	49 8b bd b0 03 00 00	movq	944(%r13), %rdi
10002cae4:	48 85 ff	testq	%rdi, %rdi
10002cae7:	49 0f 44 fd	cmoveq	%r13, %rdi
10002caeb:	4c 89 e6	movq	%r12, %rsi
10002caee:	31 d2	xorl	%edx, %edx
10002caf0:	e8 10 81 ff ff	callq	0x100024c05
10002caf5:	48 85 c0	testq	%rax, %rax
10002caf8:	4c 89 7d d0	movq	%r15, -48(%rbp)
10002cafc:	0f 84 92 00 00 00	je	0x10002cb94
10002cb02:	48 8b 58 40	movq	64(%rax), %rbx
10002cb06:	48 85 db	testq	%rbx, %rbx
10002cb09:	48 0f 44 d8	cmoveq	%rax, %rbx
10002cb0d:	48 89 df	movq	%rbx, %rdi
10002cb10:	e8 b7 eb 00 00	callq	0x10003b6cc
10002cb15:	49 89 c7	movq	%rax, %r15
10002cb18:	4c 89 f7	movq	%r14, %rdi
10002cb1b:	e8 cb eb 00 00	callq	0x10003b6eb
10002cb20:	84 c0	testb	%al, %al
10002cb22:	74 0c	je	0x10002cb30
10002cb24:	48 89 df	movq	%rbx, %rdi
10002cb27:	e8 bf eb 00 00	callq	0x10003b6eb
10002cb2c:	84 c0	testb	%al, %al
10002cb2e:	74 2e	je	0x10002cb5e
10002cb30:	49 81 c7 18 05 00 00	addq	$1304, %r15
10002cb37:	48 8d 15 51 0e 02 00	leaq	134737(%rip), %rdx ## literal pool for: "The endpoint \"%s\" defined in plist already exists and is owned by: %s"
10002cb3e:	48 8b 7d d0	movq	-48(%rbp), %rdi
10002cb42:	be 04 00 00 00	movl	$4, %esi
10002cb47:	4c 89 e1	movq	%r12, %rcx
10002cb4a:	4d 89 f8	movq	%r15, %r8
10002cb4d:	31 c0	xorl	%eax, %eax
10002cb4f:	e8 66 94 fe ff	callq	0x100015fba
10002cb54:	b8 25 00 00 00	movl	$37, %eax
10002cb59:	e9 20 03 00 00	jmp	0x10002ce7e
10002cb5e:	48 8d 8b 90 00 00 00	leaq	144(%rbx), %rcx
10002cb65:	48 8b 45 d0	movq	-48(%rbp), %rax
10002cb69:	49 89 c0	movq	%rax, %r8
10002cb6c:	49 81 c0 18 05 00 00	addq	$1304, %r8
10002cb73:	48 8d 15 cf 0d 02 00	leaq	134607(%rip), %rdx ## literal pool for: "Unmanaged endpoint \"%s\" was canceled to transfer the ownership to: %s"
10002cb7a:	4c 89 ff	movq	%r15, %rdi
10002cb7d:	49 89 c7	movq	%rax, %r15
10002cb80:	be 04 00 00 00	movl	$4, %esi
10002cb85:	31 c0	xorl	%eax, %eax
10002cb87:	e8 2e 94 fe ff	callq	0x100015fba
10002cb8c:	48 89 df	movq	%rbx, %rdi
10002cb8f:	e8 bd f0 00 00	callq	0x10003bc51
10002cb94:	4c 89 ff	movq	%r15, %rdi
10002cb97:	e8 57 b7 fe ff	callq	0x1000182f3
10002cb9c:	84 c0	testb	%al, %al
10002cb9e:	75 74	jne	0x10002cc14
10002cba0:	49 8b 9d d0 03 00 00	movq	976(%r13), %rbx
10002cba7:	48 85 db	testq	%rbx, %rbx
10002cbaa:	49 0f 44 dd	cmoveq	%r13, %rbx
10002cbae:	48 8b bb b0 03 00 00	movq	944(%rbx), %rdi
10002cbb5:	48 85 ff	testq	%rdi, %rdi
10002cbb8:	48 0f 44 fb	cmoveq	%rbx, %rdi
10002cbbc:	4c 89 e6	movq	%r12, %rsi
10002cbbf:	31 d2	xorl	%edx, %edx
10002cbc1:	e8 3f 80 ff ff	callq	0x100024c05
10002cbc6:	48 85 c0	testq	%rax, %rax
10002cbc9:	75 0c	jne	0x10002cbd7
10002cbcb:	48 8b 9b c8 00 00 00	movq	200(%rbx), %rbx
10002cbd2:	48 85 db	testq	%rbx, %rbx
10002cbd5:	75 d7	jne	0x10002cbae
10002cbd7:	48 85 c0	testq	%rax, %rax
10002cbda:	74 38	je	0x10002cc14
10002cbdc:	48 89 c7	movq	%rax, %rdi
10002cbdf:	e8 e8 ea 00 00	callq	0x10003b6cc
10002cbe4:	48 89 c3	movq	%rax, %rbx
10002cbe7:	48 89 c7	movq	%rax, %rdi
10002cbea:	e8 04 b7 fe ff	callq	0x1000182f3
10002cbef:	84 c0	testb	%al, %al
10002cbf1:	74 21	je	0x10002cc14
10002cbf3:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10002cbfa:	48 8d 15 d4 0d 02 00	leaq	134612(%rip), %rdx ## literal pool for: "The endpoint \"%s\" would shadow a trusted one owned by %s, ignoring"
10002cc01:	4c 89 ff	movq	%r15, %rdi
10002cc04:	be 04 00 00 00	movl	$4, %esi
10002cc09:	4c 89 e1	movq	%r12, %rcx
10002cc0c:	49 89 d8	movq	%rbx, %r8
10002cc0f:	e9 39 ff ff ff	jmp	0x10002cb4d
10002cc14:	4d 8b bd b0 03 00 00	movq	944(%r13), %r15
10002cc1b:	4d 85 ff	testq	%r15, %r15
10002cc1e:	4d 0f 44 fd	cmoveq	%r13, %r15
10002cc22:	41 f6 46 50 10	testb	$16, 80(%r14)
10002cc27:	74 1f	je	0x10002cc48
10002cc29:	48 8d 05 70 55 03 00	leaq	218480(%rip), %rax
10002cc30:	49 39 47 60	cmpq	%rax, 96(%r15)
10002cc34:	74 0a	je	0x10002cc40
10002cc36:	41 c7 46 48 80 00 00 00	movl	$128, 72(%r14)
10002cc3e:	eb 08	jmp	0x10002cc48
10002cc40:	41 c7 46 4c 18 00 00 00	movl	$24, 76(%r14)
10002cc48:	4c 89 f7	movq	%r14, %rdi
10002cc4b:	e8 7c ea 00 00	callq	0x10003b6cc
10002cc50:	49 89 c5	movq	%rax, %r13
10002cc53:	48 8d 05 36 5a 03 00	leaq	219702(%rip), %rax
10002cc5a:	80 38 00	cmpb	$0, (%rax)
10002cc5d:	74 64	je	0x10002ccc3
10002cc5f:	4c 89 ef	movq	%r13, %rdi
10002cc62:	e8 8c b6 fe ff	callq	0x1000182f3
10002cc67:	84 c0	testb	%al, %al
10002cc69:	75 58	jne	0x10002ccc3
10002cc6b:	41 8b 4e 48	movl	72(%r14), %ecx
10002cc6f:	85 c9	testl	%ecx, %ecx
10002cc71:	74 1e	je	0x10002cc91
10002cc73:	48 8d 15 9e 0d 02 00	leaq	134558(%rip), %rdx ## literal pool for: "Non-system service tried to claim task-special port: %d"
10002cc7a:	4c 89 ef	movq	%r13, %rdi
10002cc7d:	be 03 00 00 00	movl	$3, %esi
10002cc82:	31 c0	xorl	%eax, %eax
10002cc84:	e8 31 93 fe ff	callq	0x100015fba
10002cc89:	41 c7 46 48 00 00 00 00	movl	$0, 72(%r14)
10002cc91:	41 8b 5e 4c	movl	76(%r14), %ebx
10002cc95:	85 db	testl	%ebx, %ebx
10002cc97:	74 2a	je	0x10002ccc3
10002cc99:	89 df	movl	%ebx, %edi
10002cc9b:	e8 a4 4e 01 00	callq	0x100041b44 ## symbol stub for: _mach_host_special_port_description
10002cca0:	48 8d 15 a9 0d 02 00	leaq	134569(%rip), %rdx ## literal pool for: "Non-system service tried to claim host-special port: %d: %s"
10002cca7:	4c 89 ef	movq	%r13, %rdi
10002ccaa:	be 03 00 00 00	movl	$3, %esi
10002ccaf:	89 d9	movl	%ebx, %ecx
10002ccb1:	49 89 c0	movq	%rax, %r8
10002ccb4:	31 c0	xorl	%eax, %eax
10002ccb6:	e8 ff 92 fe ff	callq	0x100015fba
10002ccbb:	41 c7 46 4c 00 00 00 00	movl	$0, 76(%r14)
10002ccc3:	41 8b 5e 4c	movl	76(%r14), %ebx
10002ccc7:	85 db	testl	%ebx, %ebx
10002ccc9:	74 37	je	0x10002cd02
10002cccb:	48 8d 05 ce 54 03 00	leaq	218318(%rip), %rax
10002ccd2:	49 39 47 60	cmpq	%rax, 96(%r15)
10002ccd6:	74 2a	je	0x10002cd02
10002ccd8:	89 df	movl	%ebx, %edi
10002ccda:	e8 65 4e 01 00	callq	0x100041b44 ## symbol stub for: _mach_host_special_port_description
10002ccdf:	48 8d 15 6a 0d 02 00	leaq	134506(%rip), %rdx ## literal pool for: "Non-system service tried to claim host-special port: %d: %s"
10002cce6:	4c 89 ef	movq	%r13, %rdi
10002cce9:	be 03 00 00 00	movl	$3, %esi
10002ccee:	89 d9	movl	%ebx, %ecx
10002ccf0:	49 89 c0	movq	%rax, %r8
10002ccf3:	31 c0	xorl	%eax, %eax
10002ccf5:	e8 c0 92 fe ff	callq	0x100015fba
10002ccfa:	41 c7 46 4c 00 00 00 00	movl	$0, 76(%r14)
10002cd02:	4c 89 e7	movq	%r12, %rdi
10002cd05:	e8 af 26 fe ff	callq	0x10000f3b9
10002cd0a:	48 89 c1	movq	%rax, %rcx
10002cd0d:	48 ba 11 42 08 21 84 10 42 08	movabsq	$595056260442243601, %rdx
10002cd17:	48 f7 e2	mulq	%rdx
10002cd1a:	48 89 c8	movq	%rcx, %rax
10002cd1d:	48 29 d0	subq	%rdx, %rax
10002cd20:	48 d1 e8	shrq	%rax
10002cd23:	48 01 d0	addq	%rdx, %rax
10002cd26:	48 c1 e8 04	shrq	$4, %rax
10002cd2a:	48 89 c2	movq	%rax, %rdx
10002cd2d:	48 c1 e2 05	shlq	$5, %rdx
10002cd31:	48 29 d0	subq	%rdx, %rax
10002cd34:	48 01 c8	addq	%rcx, %rax
10002cd37:	49 8d 04 c7	leaq	(%r15,%rax,8), %rax
10002cd3b:	48 05 a0 02 00 00	addq	$672, %rax
10002cd41:	48 8b 08	movq	(%rax), %rcx
10002cd44:	49 89 4e 18	movq	%rcx, 24(%r14)
10002cd48:	48 85 c9	testq	%rcx, %rcx
10002cd4b:	74 08	je	0x10002cd55
10002cd4d:	49 8d 56 18	leaq	24(%r14), %rdx
10002cd51:	48 89 51 20	movq	%rdx, 32(%rcx)
10002cd55:	4c 89 30	movq	%r14, (%rax)
10002cd58:	49 89 46 20	movq	%rax, 32(%r14)
10002cd5c:	41 83 7e 48 00	cmpl	$0, 72(%r14)
10002cd61:	74 2b	je	0x10002cd8e
10002cd63:	4c 89 f7	movq	%r14, %rdi
10002cd66:	be 01 00 00 00	movl	$1, %esi
10002cd6b:	e8 f4 dd 00 00	callq	0x10003ab64
10002cd70:	41 8b 4e 48	movl	72(%r14), %ecx
10002cd74:	4c 89 ff	movq	%r15, %rdi
10002cd77:	48 8b 75 d0	movq	-48(%rbp), %rsi
10002cd7b:	89 c2	movl	%eax, %edx
10002cd7d:	e8 15 01 00 00	callq	0x10002ce97
10002cd82:	85 c0	testl	%eax, %eax
10002cd84:	74 08	je	0x10002cd8e
10002cd86:	41 c7 46 48 00 00 00 00	movl	$0, 72(%r14)
10002cd8e:	4d 63 7e 4c	movslq	76(%r14), %r15
10002cd92:	4d 85 ff	testq	%r15, %r15
10002cd95:	0f 84 dc 00 00 00	je	0x10002ce77
10002cd9b:	4c 89 f7	movq	%r14, %rdi
10002cd9e:	e8 29 e9 00 00	callq	0x10003b6cc
10002cda3:	48 89 c3	movq	%rax, %rbx
10002cda6:	41 83 ff 18	cmpl	$24, %r15d
10002cdaa:	75 2e	jne	0x10002cdda
10002cdac:	4c 8b 05 b5 67 03 00	movq	223157(%rip), %r8
10002cdb3:	4d 85 c0	testq	%r8, %r8
10002cdb6:	74 6e	je	0x10002ce26
10002cdb8:	49 81 c0 90 00 00 00	addq	$144, %r8
10002cdbf:	48 8d 15 88 0d 02 00	leaq	134536(%rip), %rdx ## literal pool for: "Endpoint \"%s\" tried to steal host exception port from \"%s\""
10002cdc6:	48 89 df	movq	%rbx, %rdi
10002cdc9:	be 03 00 00 00	movl	$3, %esi
10002cdce:	4c 89 e1	movq	%r12, %rcx
10002cdd1:	31 c0	xorl	%eax, %eax
10002cdd3:	e8 e2 91 fe ff	callq	0x100015fba
10002cdd8:	eb 42	jmp	0x10002ce1c
10002cdda:	48 8d 05 8f 67 03 00	leaq	223119(%rip), %rax
10002cde1:	4e 8b 2c f8	movq	(%rax,%r15,8), %r13
10002cde5:	4d 85 ed	testq	%r13, %r13
10002cde8:	74 62	je	0x10002ce4c
10002cdea:	44 89 ff	movl	%r15d, %edi
10002cded:	e8 52 4d 01 00	callq	0x100041b44 ## symbol stub for: _mach_host_special_port_description
10002cdf2:	49 81 c5 90 00 00 00	addq	$144, %r13
10002cdf9:	4c 89 2c 24	movq	%r13, (%rsp)
10002cdfd:	48 8d 15 85 0d 02 00	leaq	134533(%rip), %rdx ## literal pool for: "Endpoint \"%s\" tried to steal host %s port (%d) from \"%s\""
10002ce04:	48 89 df	movq	%rbx, %rdi
10002ce07:	be 03 00 00 00	movl	$3, %esi
10002ce0c:	4c 89 e1	movq	%r12, %rcx
10002ce0f:	49 89 c0	movq	%rax, %r8
10002ce12:	45 89 f9	movl	%r15d, %r9d
10002ce15:	31 c0	xorl	%eax, %eax
10002ce17:	e8 9e 91 fe ff	callq	0x100015fba
10002ce1c:	41 c7 46 4c 00 00 00 00	movl	$0, 76(%r14)
10002ce24:	eb 51	jmp	0x10002ce77
10002ce26:	4c 89 35 3b 67 03 00	movq	%r14, 223035(%rip)
10002ce2d:	e8 0c 4d 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10002ce32:	89 c3	movl	%eax, %ebx
10002ce34:	4c 89 f7	movq	%r14, %rdi
10002ce37:	be 01 00 00 00	movl	$1, %esi
10002ce3c:	e8 23 dd 00 00	callq	0x10003ab64
10002ce41:	89 df	movl	%ebx, %edi
10002ce43:	89 c6	movl	%eax, %esi
10002ce45:	e8 19 b0 00 00	callq	0x100037e63
10002ce4a:	eb 2b	jmp	0x10002ce77
10002ce4c:	49 89 c4	movq	%rax, %r12
10002ce4f:	e8 ea 4c 01 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10002ce54:	89 c3	movl	%eax, %ebx
10002ce56:	4c 89 f7	movq	%r14, %rdi
10002ce59:	be 01 00 00 00	movl	$1, %esi
10002ce5e:	e8 01 dd 00 00	callq	0x10003ab64
10002ce63:	89 df	movl	%ebx, %edi
10002ce65:	44 89 fe	movl	%r15d, %esi
10002ce68:	89 c2	movl	%eax, %edx
10002ce6a:	e8 81 4c 01 00	callq	0x100041af0 ## symbol stub for: _host_set_special_port
10002ce6f:	85 c0	testl	%eax, %eax
10002ce71:	75 1a	jne	0x10002ce8d
10002ce73:	4f 89 34 fc	movq	%r14, (%r12,%r15,8)
10002ce77:	41 80 4e 50 20	orb	$32, 80(%r14)
10002ce7c:	31 c0	xorl	%eax, %eax
10002ce7e:	48 83 c4 18	addq	$24, %rsp
10002ce82:	5b	popq	%rbx
10002ce83:	41 5c	popq	%r12
10002ce85:	41 5d	popq	%r13
10002ce87:	41 5e	popq	%r14
10002ce89:	41 5f	popq	%r15
10002ce8b:	5d	popq	%rbp
10002ce8c:	c3	retq
10002ce8d:	48 63 f8	movslq	%eax, %rdi
10002ce90:	e8 0d 49 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10002ce95:	eb dc	jmp	0x10002ce73
10002ce97:	55	pushq	%rbp
10002ce98:	48 89 e5	movq	%rsp, %rbp
10002ce9b:	41 57	pushq	%r15
10002ce9d:	41 56	pushq	%r14
10002ce9f:	41 55	pushq	%r13
10002cea1:	41 54	pushq	%r12
10002cea3:	53	pushq	%rbx
10002cea4:	50	pushq	%rax
10002cea5:	41 89 d6	movl	%edx, %r14d
10002cea8:	49 89 fd	movq	%rdi, %r13
10002ceab:	83 f9 09	cmpl	$9, %ecx
10002ceae:	75 31	jne	0x10002cee1
10002ceb0:	48 8d 05 e9 52 03 00	leaq	217833(%rip), %rax
10002ceb7:	49 39 45 60	cmpq	%rax, 96(%r13)
10002cebb:	0f 84 88 00 00 00	je	0x10002cf49
10002cec1:	48 8d 15 c4 0b 02 00	leaq	134084(%rip), %rdx ## literal pool for: "Attempt to install task-access port outside of system domain."
10002cec8:	4c 89 ef	movq	%r13, %rdi
10002cecb:	be 03 00 00 00	movl	$3, %esi
10002ced0:	31 c0	xorl	%eax, %eax
10002ced2:	e8 52 35 ff ff	callq	0x100020429
10002ced7:	b8 7d 00 00 00	movl	$125, %eax
10002cedc:	e9 15 01 00 00	jmp	0x10002cff6
10002cee1:	89 cb	movl	%ecx, %ebx
10002cee3:	4d 8b bd b0 03 00 00	movq	944(%r13), %r15
10002ceea:	4d 85 ff	testq	%r15, %r15
10002ceed:	4d 0f 44 fd	cmoveq	%r13, %r15
10002cef1:	49 8b 87 b0 03 00 00	movq	944(%r15), %rax
10002cef8:	83 f9 04	cmpl	$4, %ecx
10002cefb:	4c 89 f9	movq	%r15, %rcx
10002cefe:	48 0f 45 c8	cmovneq	%rax, %rcx
10002cf02:	48 85 c0	testq	%rax, %rax
10002cf05:	49 0f 44 cf	cmoveq	%r15, %rcx
10002cf09:	48 8b 41 48	movq	72(%rcx), %rax
10002cf0d:	48 85 c0	testq	%rax, %rax
10002cf10:	74 10	je	0x10002cf22
10002cf12:	49 89 f4	movq	%rsi, %r12
10002cf15:	39 58 14	cmpl	%ebx, 20(%rax)
10002cf18:	74 57	je	0x10002cf71
10002cf1a:	48 8b 00	movq	(%rax), %rax
10002cf1d:	48 85 c0	testq	%rax, %rax
10002cf20:	75 f3	jne	0x10002cf15
10002cf22:	44 89 f7	movl	%r14d, %edi
10002cf25:	89 de	movl	%ebx, %esi
10002cf27:	e8 d5 5c fe ff	callq	0x100012c01
10002cf2c:	49 8b 4f 48	movq	72(%r15), %rcx
10002cf30:	48 85 c9	testq	%rcx, %rcx
10002cf33:	74 7c	je	0x10002cfb1
10002cf35:	48 8b 11	movq	(%rcx), %rdx
10002cf38:	48 89 10	movq	%rdx, (%rax)
10002cf3b:	48 85 d2	testq	%rdx, %rdx
10002cf3e:	74 7c	je	0x10002cfbc
10002cf40:	48 8b 11	movq	(%rcx), %rdx
10002cf43:	48 89 42 08	movq	%rax, 8(%rdx)
10002cf47:	eb 73	jmp	0x10002cfbc
10002cf49:	83 3d 18 56 03 00 00	cmpl	$0, 218648(%rip)
10002cf50:	0f 84 af 00 00 00	je	0x10002d005
10002cf56:	48 8d 15 6d 0b 02 00	leaq	133997(%rip), %rdx ## literal pool for: "Attempt to install task-access port that's already installed."
10002cf5d:	4c 89 ef	movq	%r13, %rdi
10002cf60:	be 03 00 00 00	movl	$3, %esi
10002cf65:	31 c0	xorl	%eax, %eax
10002cf67:	e8 bd 34 ff ff	callq	0x100020429
10002cf6c:	e9 80 00 00 00	jmp	0x10002cff1
10002cf71:	8b 70 10	movl	16(%rax), %esi
10002cf74:	4c 89 ff	movq	%r15, %rdi
10002cf77:	e8 e0 dc ff ff	callq	0x10002ac5c
10002cf7c:	4c 8d b0 90 00 00 00	leaq	144(%rax), %r14
10002cf83:	48 85 c0	testq	%rax, %rax
10002cf86:	48 8d 05 04 a6 01 00	leaq	108036(%rip), %rax ## literal pool for: "(unknown)"
10002cf8d:	4c 0f 44 f0	cmoveq	%rax, %r14
10002cf91:	4d 8d ac 24 18 05 00 00	leaq	1304(%r12), %r13
10002cf99:	4d 85 e4	testq	%r12, %r12
10002cf9c:	4c 0f 44 e8	cmoveq	%rax, %r13
10002cfa0:	81 fb 80 00 00 00	cmpl	$128, %ebx
10002cfa6:	75 23	jne	0x10002cfcb
10002cfa8:	4c 8d 05 59 0b 02 00	leaq	133977(%rip), %r8 ## literal pool for: "exception"
10002cfaf:	eb 24	jmp	0x10002cfd5
10002cfb1:	49 8d 4f 48	leaq	72(%r15), %rcx
10002cfb5:	48 c7 00 00 00 00 00	movq	$0, (%rax)
10002cfbc:	48 89 01	movq	%rax, (%rcx)
10002cfbf:	48 89 48 08	movq	%rcx, 8(%rax)
10002cfc3:	49 ff 47 40	incq	64(%r15)
10002cfc7:	31 c0	xorl	%eax, %eax
10002cfc9:	eb 2b	jmp	0x10002cff6
10002cfcb:	89 df	movl	%ebx, %edi
10002cfcd:	e8 d8 4b 01 00	callq	0x100041baa ## symbol stub for: _mach_task_special_port_description
10002cfd2:	49 89 c0	movq	%rax, %r8
10002cfd5:	48 8d 15 36 0b 02 00	leaq	133942(%rip), %rdx ## literal pool for: "service \"%s\" tried to claim task-%s port from endpoint \"%s\""
10002cfdc:	4c 89 ff	movq	%r15, %rdi
10002cfdf:	be 03 00 00 00	movl	$3, %esi
10002cfe4:	4c 89 e9	movq	%r13, %rcx
10002cfe7:	4d 89 f1	movq	%r14, %r9
10002cfea:	31 c0	xorl	%eax, %eax
10002cfec:	e8 38 34 ff ff	callq	0x100020429
10002cff1:	b8 11 00 00 00	movl	$17, %eax
10002cff6:	48 83 c4 08	addq	$8, %rsp
10002cffa:	5b	popq	%rbx
10002cffb:	41 5c	popq	%r12
10002cffd:	41 5d	popq	%r13
10002cfff:	41 5e	popq	%r14
10002d001:	41 5f	popq	%r15
10002d003:	5d	popq	%rbp
10002d004:	c3	retq
10002d005:	44 89 f7	movl	%r14d, %edi
10002d008:	e8 10 cd fd ff	callq	0x100009d1d
10002d00d:	85 c0	testl	%eax, %eax
10002d00f:	75 09	jne	0x10002d01a
10002d011:	44 89 35 50 55 03 00	movl	%r14d, 218448(%rip)
10002d018:	eb ad	jmp	0x10002cfc7
10002d01a:	48 63 d0	movslq	%eax, %rdx
10002d01d:	48 8d 3d e4 33 ff ff	leaq	-52252(%rip), %rdi
10002d024:	4c 89 ee	movq	%r13, %rsi
10002d027:	e8 7c 47 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002d02c:	eb e3	jmp	0x10002d011
10002d02e:	55	pushq	%rbp
10002d02f:	48 89 e5	movq	%rsp, %rbp
10002d032:	41 56	pushq	%r14
10002d034:	53	pushq	%rbx
10002d035:	49 89 fe	movq	%rdi, %r14
10002d038:	48 8b 9f 88 00 00 00	movq	136(%rdi), %rbx
10002d03f:	48 85 db	testq	%rbx, %rbx
10002d042:	74 14	je	0x10002d058
10002d044:	f6 43 50 04	testb	$4, 80(%rbx)
10002d048:	75 74	jne	0x10002d0be
10002d04a:	48 89 df	movq	%rbx, %rdi
10002d04d:	e8 9a e8 00 00	callq	0x10003b8ec
10002d052:	48 8b 5b 08	movq	8(%rbx), %rbx
10002d056:	eb e7	jmp	0x10002d03f
10002d058:	49 8b 9e a0 00 00 00	movq	160(%r14), %rbx
10002d05f:	48 85 db	testq	%rbx, %rbx
10002d062:	74 14	je	0x10002d078
10002d064:	f6 43 50 04	testb	$4, 80(%rbx)
10002d068:	75 5d	jne	0x10002d0c7
10002d06a:	48 89 df	movq	%rbx, %rdi
10002d06d:	e8 7a e8 00 00	callq	0x10003b8ec
10002d072:	48 8b 5b 08	movq	8(%rbx), %rbx
10002d076:	eb e7	jmp	0x10002d05f
10002d078:	49 8b 9e a8 00 00 00	movq	168(%r14), %rbx
10002d07f:	48 85 db	testq	%rbx, %rbx
10002d082:	74 14	je	0x10002d098
10002d084:	f6 43 50 04	testb	$4, 80(%rbx)
10002d088:	75 46	jne	0x10002d0d0
10002d08a:	48 89 df	movq	%rbx, %rdi
10002d08d:	e8 5a e8 00 00	callq	0x10003b8ec
10002d092:	48 8b 5b 08	movq	8(%rbx), %rbx
10002d096:	eb e7	jmp	0x10002d07f
10002d098:	49 8b 9e b0 00 00 00	movq	176(%r14), %rbx
10002d09f:	48 85 db	testq	%rbx, %rbx
10002d0a2:	74 0e	je	0x10002d0b2
10002d0a4:	48 89 df	movq	%rbx, %rdi
10002d0a7:	e8 9e 7a fe ff	callq	0x100014b4a
10002d0ac:	48 8b 5b 08	movq	8(%rbx), %rbx
10002d0b0:	eb ed	jmp	0x10002d09f
10002d0b2:	4c 89 f7	movq	%r14, %rdi
10002d0b5:	5b	popq	%rbx
10002d0b6:	41 5e	popq	%r14
10002d0b8:	5d	popq	%rbp
10002d0b9:	e9 27 e4 fe ff	jmp	0x10001b4e5
10002d0be:	48 8d 3d 1f 0b 02 00	leaq	133919(%rip), %rdi ## literal pool for: "service deactivated with active endpoints"
10002d0c5:	eb 10	jmp	0x10002d0d7
10002d0c7:	48 8d 3d 40 0b 02 00	leaq	133952(%rip), %rdi ## literal pool for: "service deactivated with active event endpoints"
10002d0ce:	eb 07	jmp	0x10002d0d7
10002d0d0:	48 8d 3d 67 0b 02 00	leaq	133991(%rip), %rdi ## literal pool for: "service deactivated with active instance endpoints"
10002d0d7:	31 c0	xorl	%eax, %eax
10002d0d9:	e8 34 73 00 00	callq	0x100034412
10002d0de:	55	pushq	%rbp
10002d0df:	48 89 e5	movq	%rsp, %rbp
10002d0e2:	41 56	pushq	%r14
10002d0e4:	53	pushq	%rbx
10002d0e5:	48 89 d3	movq	%rdx, %rbx
10002d0e8:	49 89 fe	movq	%rdi, %r14
10002d0eb:	48 8b 57 20	movq	32(%rdi), %rdx
10002d0ef:	48 85 d2	testq	%rdx, %rdx
10002d0f2:	74 09	je	0x10002d0fd
10002d0f4:	48 8d 35 7c de 01 00	leaq	122492(%rip), %rsi ## literal pool for: "error"
10002d0fb:	eb 13	jmp	0x10002d110
10002d0fd:	49 8b 7e 28	movq	40(%r14), %rdi
10002d101:	e8 fb e6 fe ff	callq	0x10001b801
10002d106:	48 63 d0	movslq	%eax, %rdx
10002d109:	48 8d 35 85 d7 01 00	leaq	120709(%rip), %rsi ## literal pool for: "pid"
10002d110:	48 89 df	movq	%rbx, %rdi
10002d113:	e8 6c 4f 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10002d118:	48 89 df	movq	%rbx, %rdi
10002d11b:	e8 d0 4f 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10002d120:	a9 df ff ff ff	testl	$4294967263, %eax
10002d125:	75 07	jne	0x10002d12e
10002d127:	b0 01	movb	$1, %al
10002d129:	5b	popq	%rbx
10002d12a:	41 5e	popq	%r14
10002d12c:	5d	popq	%rbp
10002d12d:	c3	retq
10002d12e:	48 63 d0	movslq	%eax, %rdx
10002d131:	49 8b 76 28	movq	40(%r14), %rsi
10002d135:	48 8d 3d cb b1 fe ff	leaq	-85557(%rip), %rdi
10002d13c:	e8 67 46 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002d141:	eb e4	jmp	0x10002d127
10002d143:	55	pushq	%rbp
10002d144:	48 89 e5	movq	%rsp, %rbp
10002d147:	41 57	pushq	%r15
10002d149:	41 56	pushq	%r14
10002d14b:	41 55	pushq	%r13
10002d14d:	41 54	pushq	%r12
10002d14f:	53	pushq	%rbx
10002d150:	48 83 ec 78	subq	$120, %rsp
10002d154:	49 89 d6	movq	%rdx, %r14
10002d157:	89 f3	movl	%esi, %ebx
10002d159:	49 89 ff	movq	%rdi, %r15
10002d15c:	48 8b 05 c5 ae 02 00	movq	175813(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d163:	48 8b 00	movq	(%rax), %rax
10002d166:	48 89 45 d0	movq	%rax, -48(%rbp)
10002d16a:	4c 8b a2 e8 00 00 00	movq	232(%rdx), %r12
10002d171:	48 8d 75 bf	leaq	-65(%rbp), %rsi
10002d175:	c6 06 00	movb	$0, (%rsi)
10002d178:	48 89 d7	movq	%rdx, %rdi
10002d17b:	e8 f9 ec fe ff	callq	0x10001be79
10002d180:	83 fb 02	cmpl	$2, %ebx
10002d183:	74 7e	je	0x10002d203
10002d185:	83 fb 01	cmpl	$1, %ebx
10002d188:	0f 84 e5 02 00 00	je	0x10002d473
10002d18e:	85 db	testl	%ebx, %ebx
10002d190:	0f 85 f5 02 00 00	jne	0x10002d48b
10002d196:	48 8d b5 68 ff ff ff	leaq	-152(%rbp), %rsi
10002d19d:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10002d1a4:	4c 89 ff	movq	%r15, %rdi
10002d1a7:	e8 7e 79 fe ff	callq	0x100014b2a
10002d1ac:	48 85 c0	testq	%rax, %rax
10002d1af:	0f 84 b9 02 00 00	je	0x10002d46e
10002d1b5:	48 8d 55 c0	leaq	-64(%rbp), %rdx
10002d1b9:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
10002d1c0:	48 8b bd 68 ff ff ff	movq	-152(%rbp), %rdi
10002d1c7:	48 89 c6	movq	%rax, %rsi
10002d1ca:	31 c9	xorl	%ecx, %ecx
10002d1cc:	45 31 c0	xorl	%r8d, %r8d
10002d1cf:	e8 ac 57 fe ff	callq	0x100012980
10002d1d4:	48 85 c0	testq	%rax, %rax
10002d1d7:	0f 84 74 02 00 00	je	0x10002d451
10002d1dd:	49 8d 4c 24 50	leaq	80(%r12), %rcx
10002d1e2:	49 8b 54 24 50	movq	80(%r12), %rdx
10002d1e7:	48 89 10	movq	%rdx, (%rax)
10002d1ea:	48 85 d2	testq	%rdx, %rdx
10002d1ed:	74 04	je	0x10002d1f3
10002d1ef:	48 89 42 08	movq	%rax, 8(%rdx)
10002d1f3:	48 89 01	movq	%rax, (%rcx)
10002d1f6:	48 89 48 08	movq	%rcx, 8(%rax)
10002d1fa:	4c 89 70 10	movq	%r14, 16(%rax)
10002d1fe:	e9 6b 02 00 00	jmp	0x10002d46e
10002d203:	80 7d bf 00	cmpb	$0, -65(%rbp)
10002d207:	0f 94 c1	sete	%cl
10002d20a:	20 c8	andb	%cl, %al
10002d20c:	3c 01	cmpb	$1, %al
10002d20e:	75 37	jne	0x10002d247
10002d210:	31 c0	xorl	%eax, %eax
10002d212:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10002d216:	48 89 06	movq	%rax, (%rsi)
10002d219:	48 8d 55 a8	leaq	-88(%rbp), %rdx
10002d21d:	48 89 02	movq	%rax, (%rdx)
10002d220:	4c 89 ff	movq	%r15, %rdi
10002d223:	e8 a9 7c fe ff	callq	0x100014ed1
10002d228:	89 45 b8	movl	%eax, -72(%rbp)
10002d22b:	85 c0	testl	%eax, %eax
10002d22d:	74 5a	je	0x10002d289
10002d22f:	41 89 c7	movl	%eax, %r15d
10002d232:	83 f8 23	cmpl	$35, %eax
10002d235:	0f 85 eb 01 00 00	jne	0x10002d426
10002d23b:	48 8d 3d 02 0e 02 00	leaq	134658(%rip), %rdi ## literal pool for: "EWOULDBLOCK returned on socket that should not block"
10002d242:	e9 6f 02 00 00	jmp	0x10002d4b6
10002d247:	4c 89 f7	movq	%r14, %rdi
10002d24a:	be 02 00 00 00	movl	$2, %esi
10002d24f:	e8 70 dc fe ff	callq	0x10001aec4
10002d254:	89 c2	movl	%eax, %edx
10002d256:	83 e2 fe	andl	$-2, %edx
10002d259:	31 c9	xorl	%ecx, %ecx
10002d25b:	83 fa 24	cmpl	$36, %edx
10002d25e:	0f 45 c8	cmovnel	%eax, %ecx
10002d261:	85 c9	testl	%ecx, %ecx
10002d263:	0f 84 22 02 00 00	je	0x10002d48b
10002d269:	83 f9 25	cmpl	$37, %ecx
10002d26c:	0f 84 3d 02 00 00	je	0x10002d4af
10002d272:	48 63 d1	movslq	%ecx, %rdx
10002d275:	48 8d 3d 8b b0 fe ff	leaq	-85877(%rip), %rdi
10002d27c:	4c 89 f6	movq	%r14, %rsi
10002d27f:	e8 24 45 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002d284:	e9 02 02 00 00	jmp	0x10002d48b
10002d289:	48 83 7d a8 00	cmpq	$0, -88(%rbp)
10002d28e:	0f 84 86 01 00 00	je	0x10002d41a
10002d294:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10002d298:	45 31 ff	xorl	%r15d, %r15d
10002d29b:	4c 89 65 a0	movq	%r12, -96(%rbp)
10002d29f:	48 8d 05 1c 4b ff ff	leaq	-46308(%rip), %rax
10002d2a6:	48 89 85 68 ff ff ff	movq	%rax, -152(%rbp)
10002d2ad:	48 8d 05 7c 4e ff ff	leaq	-45444(%rip), %rax
10002d2b4:	48 89 85 70 ff ff ff	movq	%rax, -144(%rbp)
10002d2bb:	48 8d 05 b3 4f ff ff	leaq	-45133(%rip), %rax
10002d2c2:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
10002d2c9:	48 8d 05 33 51 ff ff	leaq	-44749(%rip), %rax
10002d2d0:	48 89 45 80	movq	%rax, -128(%rbp)
10002d2d4:	48 8d 05 6d 51 ff ff	leaq	-44691(%rip), %rax
10002d2db:	48 89 45 88	movq	%rax, -120(%rbp)
10002d2df:	48 8d 05 35 52 ff ff	leaq	-44491(%rip), %rax
10002d2e6:	48 89 45 90	movq	%rax, -112(%rbp)
10002d2ea:	4c 89 65 98	movq	%r12, -104(%rbp)
10002d2ee:	0f 28 05 8b 5f 01 00	movaps	89995(%rip), %xmm0
10002d2f5:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10002d2f9:	48 89 df	movq	%rbx, %rdi
10002d2fc:	e8 f7 4b 01 00	callq	0x100041ef8 ## symbol stub for: _uuid_generate
10002d301:	41 8b 86 fc 00 00 00	movl	252(%r14), %eax
10002d308:	85 c0	testl	%eax, %eax
10002d30a:	74 0d	je	0x10002d319
10002d30c:	41 39 86 f8 00 00 00	cmpl	%eax, 248(%r14)
10002d313:	0f 83 ac 00 00 00	jae	0x10002d3c5
10002d319:	48 8b 45 b0	movq	-80(%rbp), %rax
10002d31d:	42 8b 14 b8	movl	(%rax,%r15,4), %edx
10002d321:	48 8d 45 b8	leaq	-72(%rbp), %rax
10002d325:	48 89 04 24	movq	%rax, (%rsp)
10002d329:	4c 89 f7	movq	%r14, %rdi
10002d32c:	48 89 de	movq	%rbx, %rsi
10002d32f:	31 c9	xorl	%ecx, %ecx
10002d331:	4c 8d 85 68 ff ff ff	leaq	-152(%rbp), %r8
10002d338:	45 31 c9	xorl	%r9d, %r9d
10002d33b:	e8 21 6e fd ff	callq	0x100004161
10002d340:	48 85 c0	testq	%rax, %rax
10002d343:	0f 84 8a 00 00 00	je	0x10002d3d3
10002d349:	49 89 c5	movq	%rax, %r13
10002d34c:	80 88 65 01 00 00 01	orb	$1, 357(%rax)
10002d353:	4c 89 e7	movq	%r12, %rdi
10002d356:	48 89 c6	movq	%rax, %rsi
10002d359:	e8 48 44 ff ff	callq	0x1000217a6
10002d35e:	41 ff 86 f8 00 00 00	incl	248(%r14)
10002d365:	4d 89 b5 f0 00 00 00	movq	%r14, 240(%r13)
10002d36c:	4c 89 f7	movq	%r14, %rdi
10002d36f:	be 1a 00 00 00	movl	$26, %esi
10002d374:	e8 55 55 fe ff	callq	0x1000128ce
10002d379:	4c 89 ef	movq	%r13, %rdi
10002d37c:	be 02 00 00 00	movl	$2, %esi
10002d381:	e8 3e db fe ff	callq	0x10001aec4
10002d386:	89 c1	movl	%eax, %ecx
10002d388:	83 e1 fe	andl	$-2, %ecx
10002d38b:	45 31 e4	xorl	%r12d, %r12d
10002d38e:	83 f9 24	cmpl	$36, %ecx
10002d391:	74 03	je	0x10002d396
10002d393:	41 89 c4	movl	%eax, %r12d
10002d396:	44 89 65 b8	movl	%r12d, -72(%rbp)
10002d39a:	45 85 e4	testl	%r12d, %r12d
10002d39d:	74 5d	je	0x10002d3fc
10002d39f:	44 89 e7	movl	%r12d, %edi
10002d3a2:	e8 67 4d 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002d3a7:	4c 89 ef	movq	%r13, %rdi
10002d3aa:	be 03 00 00 00	movl	$3, %esi
10002d3af:	48 8d 15 fa 0c 02 00	leaq	134394(%rip), %rdx ## literal pool for: "Could not spawn dedicated inetd instance: %d: %s"
10002d3b6:	44 89 e1	movl	%r12d, %ecx
10002d3b9:	49 89 c0	movq	%rax, %r8
10002d3bc:	31 c0	xorl	%eax, %eax
10002d3be:	e8 f7 8b fe ff	callq	0x100015fba
10002d3c3:	eb 37	jmp	0x10002d3fc
10002d3c5:	c7 45 b8 43 00 00 00	movl	$67, -72(%rbp)
10002d3cc:	bb 43 00 00 00	movl	$67, %ebx
10002d3d1:	eb 03	jmp	0x10002d3d6
10002d3d3:	8b 5d b8	movl	-72(%rbp), %ebx
10002d3d6:	89 df	movl	%ebx, %edi
10002d3d8:	e8 31 4d 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002d3dd:	4c 89 f7	movq	%r14, %rdi
10002d3e0:	be 03 00 00 00	movl	$3, %esi
10002d3e5:	48 8d 15 8d 0c 02 00	leaq	134285(%rip), %rdx ## literal pool for: "Could not create new instance of inetd service: %d: %s"
10002d3ec:	89 d9	movl	%ebx, %ecx
10002d3ee:	49 89 c0	movq	%rax, %r8
10002d3f1:	31 c0	xorl	%eax, %eax
10002d3f3:	e8 c2 8b fe ff	callq	0x100015fba
10002d3f8:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10002d3fc:	48 8b 45 b0	movq	-80(%rbp), %rax
10002d400:	42 8b 3c b8	movl	(%rax,%r15,4), %edi
10002d404:	e8 ab 53 00 00	callq	0x1000327b4
10002d409:	49 ff c7	incq	%r15
10002d40c:	4c 3b 7d a8	cmpq	-88(%rbp), %r15
10002d410:	4c 8b 65 a0	movq	-96(%rbp), %r12
10002d414:	0f 82 85 fe ff ff	jb	0x10002d29f
10002d41a:	48 8b 7d b0	movq	-80(%rbp), %rdi
10002d41e:	e8 0d 46 01 00	callq	0x100041a30 ## symbol stub for: _free
10002d423:	45 31 ff	xorl	%r15d, %r15d
10002d426:	45 85 ff	testl	%r15d, %r15d
10002d429:	74 60	je	0x10002d48b
10002d42b:	44 89 ff	movl	%r15d, %edi
10002d42e:	e8 db 4c 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002d433:	48 8d 15 b2 0b 02 00	leaq	134066(%rip), %rdx ## literal pool for: "Could not accept new inetd connection: %d: %s"
10002d43a:	4c 89 f7	movq	%r14, %rdi
10002d43d:	be 03 00 00 00	movl	$3, %esi
10002d442:	44 89 f9	movl	%r15d, %ecx
10002d445:	49 89 c0	movq	%rax, %r8
10002d448:	31 c0	xorl	%eax, %eax
10002d44a:	e8 6b 8b fe ff	callq	0x100015fba
10002d44f:	eb 3a	jmp	0x10002d48b
10002d451:	48 8b 8d 68 ff ff ff	movq	-152(%rbp), %rcx
10002d458:	48 8d 15 47 0b 02 00	leaq	133959(%rip), %rdx ## literal pool for: "Service attempted to specify secure socket key with reserved name: %s"
10002d45f:	4c 89 f7	movq	%r14, %rdi
10002d462:	be 03 00 00 00	movl	$3, %esi
10002d467:	31 c0	xorl	%eax, %eax
10002d469:	e8 4c 8b fe ff	callq	0x100015fba
10002d46e:	41 80 4f 28 01	orb	$1, 40(%r15)
10002d473:	4c 89 e7	movq	%r12, %rdi
10002d476:	4c 89 f6	movq	%r14, %rsi
10002d479:	e8 fe e3 ff ff	callq	0x10002b87c
10002d47e:	4c 89 e7	movq	%r12, %rdi
10002d481:	be 09 00 00 00	movl	$9, %esi
10002d486:	e8 5f 3e ff ff	callq	0x1000212ea
10002d48b:	48 8b 05 96 ab 02 00	movq	174998(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d492:	48 8b 00	movq	(%rax), %rax
10002d495:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002d499:	75 0f	jne	0x10002d4aa
10002d49b:	48 83 c4 78	addq	$120, %rsp
10002d49f:	5b	popq	%rbx
10002d4a0:	41 5c	popq	%r12
10002d4a2:	41 5d	popq	%r13
10002d4a4:	41 5e	popq	%r14
10002d4a6:	41 5f	popq	%r15
10002d4a8:	5d	popq	%rbp
10002d4a9:	c3	retq
10002d4aa:	e8 c3 42 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002d4af:	48 8d 3d 64 0b 02 00	leaq	133988(%rip), %rdi ## literal pool for: "socket event received for running service"
10002d4b6:	31 c0	xorl	%eax, %eax
10002d4b8:	e8 55 6f 00 00	callq	0x100034412
10002d4bd:	55	pushq	%rbp
10002d4be:	48 89 e5	movq	%rsp, %rbp
10002d4c1:	48 89 d7	movq	%rdx, %rdi
10002d4c4:	31 f6	xorl	%esi, %esi
10002d4c6:	e8 86 54 fe ff	callq	0x100012951
10002d4cb:	b0 01	movb	$1, %al
10002d4cd:	5d	popq	%rbp
10002d4ce:	c3	retq
10002d4cf:	55	pushq	%rbp
10002d4d0:	48 89 e5	movq	%rsp, %rbp
10002d4d3:	48 89 f9	movq	%rdi, %rcx
10002d4d6:	48 8b 7a 08	movq	8(%rdx), %rdi
10002d4da:	48 8b 72 10	movq	16(%rdx), %rsi
10002d4de:	48 8d 15 31 a1 01 00	leaq	106801(%rip), %rdx ## literal pool for: "%s"
10002d4e5:	31 c0	xorl	%eax, %eax
10002d4e7:	5d	popq	%rbp
10002d4e8:	e9 85 b7 00 00	jmp	0x100038c72
10002d4ed:	55	pushq	%rbp
10002d4ee:	48 89 e5	movq	%rsp, %rbp
10002d4f1:	48 89 f1	movq	%rsi, %rcx
10002d4f4:	48 8b 47 20	movq	32(%rdi), %rax
10002d4f8:	48 8b 77 28	movq	40(%rdi), %rsi
10002d4fc:	48 83 c6 02	addq	$2, %rsi
10002d500:	48 8d 15 0f a1 01 00	leaq	106767(%rip), %rdx ## literal pool for: "%s"
10002d507:	48 89 c7	movq	%rax, %rdi
10002d50a:	31 c0	xorl	%eax, %eax
10002d50c:	e8 61 b7 00 00	callq	0x100038c72
10002d511:	b0 01	movb	$1, %al
10002d513:	5d	popq	%rbp
10002d514:	c3	retq
10002d515:	55	pushq	%rbp
10002d516:	48 89 e5	movq	%rsp, %rbp
10002d519:	41 57	pushq	%r15
10002d51b:	41 56	pushq	%r14
10002d51d:	41 54	pushq	%r12
10002d51f:	53	pushq	%rbx
10002d520:	48 83 ec 10	subq	$16, %rsp
10002d524:	49 89 fe	movq	%rdi, %r14
10002d527:	48 8b 5e 40	movq	64(%rsi), %rbx
10002d52b:	41 bf 41 00 00 00	movl	$65, %r15d
10002d531:	48 85 db	testq	%rbx, %rbx
10002d534:	48 0f 44 de	cmoveq	%rsi, %rbx
10002d538:	44 8a 63 50	movb	80(%rbx), %r12b
10002d53c:	75 15	jne	0x10002d553
10002d53e:	48 89 df	movq	%rbx, %rdi
10002d541:	e8 a5 e1 00 00	callq	0x10003b6eb
10002d546:	34 01	xorb	$1, %al
10002d548:	0f b6 c0	movzbl	%al, %eax
10002d54b:	44 8d 3c c5 4d 00 00 00	leal	77(,%rax,8), %r15d
10002d553:	31 c0	xorl	%eax, %eax
10002d555:	41 f6 c4 04	testb	$4, %r12b
10002d559:	0f 94 c0	sete	%al
10002d55c:	44 8d 24 40	leal	(%rax,%rax,2), %r12d
10002d560:	41 83 c4 41	addl	$65, %r12d
10002d564:	48 89 df	movq	%rbx, %rdi
10002d567:	be 02 00 00 00	movl	$2, %esi
10002d56c:	e8 f3 d5 00 00	callq	0x10003ab64
10002d571:	48 81 c3 90 00 00 00	addq	$144, %rbx
10002d578:	48 89 1c 24	movq	%rbx, (%rsp)
10002d57c:	48 8d 15 f1 10 02 00	leaq	135409(%rip), %rdx ## literal pool for: "%#8x %4c%4c   %s"
10002d583:	be 02 00 00 00	movl	$2, %esi
10002d588:	4c 89 f7	movq	%r14, %rdi
10002d58b:	89 c1	movl	%eax, %ecx
10002d58d:	45 89 f8	movl	%r15d, %r8d
10002d590:	45 89 e1	movl	%r12d, %r9d
10002d593:	31 c0	xorl	%eax, %eax
10002d595:	e8 d8 b6 00 00	callq	0x100038c72
10002d59a:	48 83 c4 10	addq	$16, %rsp
10002d59e:	5b	popq	%rbx
10002d59f:	41 5c	popq	%r12
10002d5a1:	41 5e	popq	%r14
10002d5a3:	41 5f	popq	%r15
10002d5a5:	5d	popq	%rbp
10002d5a6:	c3	retq
10002d5a7:	55	pushq	%rbp
10002d5a8:	48 89 e5	movq	%rsp, %rbp
10002d5ab:	41 57	pushq	%r15
10002d5ad:	41 56	pushq	%r14
10002d5af:	41 55	pushq	%r13
10002d5b1:	41 54	pushq	%r12
10002d5b3:	53	pushq	%rbx
10002d5b4:	50	pushq	%rax
10002d5b5:	48 89 d3	movq	%rdx, %rbx
10002d5b8:	49 89 f6	movq	%rsi, %r14
10002d5bb:	49 89 fc	movq	%rdi, %r12
10002d5be:	8b 7a 14	movl	20(%rdx), %edi
10002d5c1:	81 ff 80 00 00 00	cmpl	$128, %edi
10002d5c7:	75 09	jne	0x10002d5d2
10002d5c9:	4c 8d 3d 38 05 02 00	leaq	132408(%rip), %r15 ## literal pool for: "exception"
10002d5d0:	eb 08	jmp	0x10002d5da
10002d5d2:	e8 d3 45 01 00	callq	0x100041baa ## symbol stub for: _mach_task_special_port_description
10002d5d7:	49 89 c7	movq	%rax, %r15
10002d5da:	44 8b 6b 10	movl	16(%rbx), %r13d
10002d5de:	4c 89 e7	movq	%r12, %rdi
10002d5e1:	44 89 ee	movl	%r13d, %esi
10002d5e4:	e8 a2 00 00 00	callq	0x10002d68b
10002d5e9:	48 85 c0	testq	%rax, %rax
10002d5ec:	74 08	je	0x10002d5f6
10002d5ee:	48 05 10 04 00 00	addq	$1040, %rax
10002d5f4:	eb 20	jmp	0x10002d616
10002d5f6:	4c 89 e7	movq	%r12, %rdi
10002d5f9:	44 89 ee	movl	%r13d, %esi
10002d5fc:	e8 5b d6 ff ff	callq	0x10002ac5c
10002d601:	48 8d 88 90 00 00 00	leaq	144(%rax), %rcx
10002d608:	48 85 c0	testq	%rax, %rax
10002d60b:	48 8d 05 7f 9f 01 00	leaq	106367(%rip), %rax ## literal pool for: "(unknown)"
10002d612:	48 0f 45 c1	cmovneq	%rcx, %rax
10002d616:	8b 4b 10	movl	16(%rbx), %ecx
10002d619:	44 8b 43 14	movl	20(%rbx), %r8d
10002d61d:	48 89 04 24	movq	%rax, (%rsp)
10002d621:	48 8d 15 5d 10 02 00	leaq	135261(%rip), %rdx ## literal pool for: "%#8x %-4u %12s  %s"
10002d628:	be 03 00 00 00	movl	$3, %esi
10002d62d:	4c 89 f7	movq	%r14, %rdi
10002d630:	4d 89 f9	movq	%r15, %r9
10002d633:	31 c0	xorl	%eax, %eax
10002d635:	e8 38 b6 00 00	callq	0x100038c72
10002d63a:	48 83 c4 08	addq	$8, %rsp
10002d63e:	5b	popq	%rbx
10002d63f:	41 5c	popq	%r12
10002d641:	41 5d	popq	%r13
10002d643:	41 5e	popq	%r14
10002d645:	41 5f	popq	%r15
10002d647:	5d	popq	%rbp
10002d648:	c3	retq
10002d649:	85 d2	testl	%edx, %edx
10002d64b:	74 3d	je	0x10002d68a
10002d64d:	55	pushq	%rbp
10002d64e:	48 89 e5	movq	%rsp, %rbp
10002d651:	41 56	pushq	%r14
10002d653:	53	pushq	%rbx
10002d654:	49 89 f6	movq	%rsi, %r14
10002d657:	48 89 fb	movq	%rdi, %rbx
10002d65a:	48 83 7f 10 00	cmpq	$0, 16(%rdi)
10002d65f:	74 11	je	0x10002d672
10002d661:	48 8d 35 9d f1 01 00	leaq	127389(%rip), %rsi ## literal pool for: " | "
10002d668:	48 89 df	movq	%rbx, %rdi
10002d66b:	31 c0	xorl	%eax, %eax
10002d66d:	e8 5e ea fd ff	callq	0x10000c0d0
10002d672:	48 8d 35 9d 9f 01 00	leaq	106397(%rip), %rsi ## literal pool for: "%s"
10002d679:	48 89 df	movq	%rbx, %rdi
10002d67c:	4c 89 f2	movq	%r14, %rdx
10002d67f:	31 c0	xorl	%eax, %eax
10002d681:	5b	popq	%rbx
10002d682:	41 5e	popq	%r14
10002d684:	5d	popq	%rbp
10002d685:	e9 46 ea fd ff	jmp	0x10000c0d0
10002d68a:	c3	retq
10002d68b:	55	pushq	%rbp
10002d68c:	48 89 e5	movq	%rsp, %rbp
10002d68f:	41 57	pushq	%r15
10002d691:	41 56	pushq	%r14
10002d693:	53	pushq	%rbx
10002d694:	50	pushq	%rax
10002d695:	41 89 f7	movl	%esi, %r15d
10002d698:	49 89 fe	movq	%rdi, %r14
10002d69b:	48 8b 7f 78	movq	120(%rdi), %rdi
10002d69f:	48 85 ff	testq	%rdi, %rdi
10002d6a2:	74 07	je	0x10002d6ab
10002d6a4:	e8 41 4a 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10002d6a9:	eb 02	jmp	0x10002d6ad
10002d6ab:	31 c0	xorl	%eax, %eax
10002d6ad:	44 39 f8	cmpl	%r15d, %eax
10002d6b0:	74 28	je	0x10002d6da
10002d6b2:	49 8b 9e 20 01 00 00	movq	288(%r14), %rbx
10002d6b9:	45 31 f6	xorl	%r14d, %r14d
10002d6bc:	48 85 db	testq	%rbx, %rbx
10002d6bf:	74 19	je	0x10002d6da
10002d6c1:	48 89 df	movq	%rbx, %rdi
10002d6c4:	44 89 fe	movl	%r15d, %esi
10002d6c7:	e8 bf ff ff ff	callq	0x10002d68b
10002d6cc:	48 85 c0	testq	%rax, %rax
10002d6cf:	75 06	jne	0x10002d6d7
10002d6d1:	48 8b 5b 08	movq	8(%rbx), %rbx
10002d6d5:	eb e5	jmp	0x10002d6bc
10002d6d7:	49 89 c6	movq	%rax, %r14
10002d6da:	4c 89 f0	movq	%r14, %rax
10002d6dd:	48 83 c4 08	addq	$8, %rsp
10002d6e1:	5b	popq	%rbx
10002d6e2:	41 5e	popq	%r14
10002d6e4:	41 5f	popq	%r15
10002d6e6:	5d	popq	%rbp
10002d6e7:	c3	retq
10002d6e8:	55	pushq	%rbp
10002d6e9:	48 89 e5	movq	%rsp, %rbp
10002d6ec:	41 57	pushq	%r15
10002d6ee:	41 56	pushq	%r14
10002d6f0:	41 55	pushq	%r13
10002d6f2:	41 54	pushq	%r12
10002d6f4:	53	pushq	%rbx
10002d6f5:	48 83 ec 48	subq	$72, %rsp
10002d6f9:	49 89 f7	movq	%rsi, %r15
10002d6fc:	41 89 fd	movl	%edi, %r13d
10002d6ff:	48 8b 05 22 a9 02 00	movq	174370(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d706:	48 8b 00	movq	(%rax), %rax
10002d709:	48 89 45 d0	movq	%rax, -48(%rbp)
10002d70d:	bb 00 04 00 00	movl	$1024, %ebx
10002d712:	4c 8d 25 78 9e 01 00	leaq	106104(%rip), %r12 ## literal pool for: "(unknown)"
10002d719:	41 89 fe	movl	%edi, %r14d
10002d71c:	48 85 db	testq	%rbx, %rbx
10002d71f:	0f 84 90 00 00 00	je	0x10002d7b5
10002d725:	0f 28 05 54 5b 01 00	movaps	88916(%rip), %xmm0
10002d72c:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10002d730:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10002d734:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10002d738:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
10002d73c:	44 89 f7	movl	%r14d, %edi
10002d73f:	48 8d 75 90	leaq	-112(%rbp), %rsi
10002d743:	e8 b6 70 00 00	callq	0x1000347fe
10002d748:	85 c0	testl	%eax, %eax
10002d74a:	4c 89 e1	movq	%r12, %rcx
10002d74d:	48 8d 45 a0	leaq	-96(%rbp), %rax
10002d751:	48 0f 44 c8	cmoveq	%rax, %rcx
10002d755:	45 39 ee	cmpl	%r13d, %r14d
10002d758:	75 18	jne	0x10002d772
10002d75a:	48 83 fb 01	cmpq	$1, %rbx
10002d75e:	74 18	je	0x10002d778
10002d760:	4c 89 ff	movq	%r15, %rdi
10002d763:	48 89 de	movq	%rbx, %rsi
10002d766:	48 8d 15 89 0f 02 00	leaq	135049(%rip), %rdx ## literal pool for: "%s[%d]"
10002d76d:	45 89 e8	movl	%r13d, %r8d
10002d770:	eb 1a	jmp	0x10002d78c
10002d772:	48 83 fb 01	cmpq	$1, %rbx
10002d776:	75 04	jne	0x10002d77c
10002d778:	31 c0	xorl	%eax, %eax
10002d77a:	eb 25	jmp	0x10002d7a1
10002d77c:	4c 89 ff	movq	%r15, %rdi
10002d77f:	48 89 de	movq	%rbx, %rsi
10002d782:	48 8d 15 74 0f 02 00	leaq	135028(%rip), %rdx ## literal pool for: "<-%s[%d]"
10002d789:	45 89 f0	movl	%r14d, %r8d
10002d78c:	31 c0	xorl	%eax, %eax
10002d78e:	e8 6f 46 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
10002d793:	48 63 c8	movslq	%eax, %rcx
10002d796:	48 8d 43 ff	leaq	-1(%rbx), %rax
10002d79a:	48 39 cb	cmpq	%rcx, %rbx
10002d79d:	48 0f 47 c1	cmovaq	%rcx, %rax
10002d7a1:	49 01 c7	addq	%rax, %r15
10002d7a4:	48 29 c3	subq	%rax, %rbx
10002d7a7:	41 83 fe 01	cmpl	$1, %r14d
10002d7ab:	44 8b 75 94	movl	-108(%rbp), %r14d
10002d7af:	0f 85 67 ff ff ff	jne	0x10002d71c
10002d7b5:	48 8b 05 6c a8 02 00	movq	174188(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d7bc:	48 8b 00	movq	(%rax), %rax
10002d7bf:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002d7c3:	75 0f	jne	0x10002d7d4
10002d7c5:	48 83 c4 48	addq	$72, %rsp
10002d7c9:	5b	popq	%rbx
10002d7ca:	41 5c	popq	%r12
10002d7cc:	41 5d	popq	%r13
10002d7ce:	41 5e	popq	%r14
10002d7d0:	41 5f	popq	%r15
10002d7d2:	5d	popq	%rbp
10002d7d3:	c3	retq
10002d7d4:	e8 99 3f 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002d7d9:	55	pushq	%rbp
10002d7da:	48 89 e5	movq	%rsp, %rbp
10002d7dd:	41 57	pushq	%r15
10002d7df:	41 56	pushq	%r14
10002d7e1:	41 55	pushq	%r13
10002d7e3:	41 54	pushq	%r12
10002d7e5:	53	pushq	%rbx
10002d7e6:	50	pushq	%rax
10002d7e7:	49 89 d7	movq	%rdx, %r15
10002d7ea:	49 89 fe	movq	%rdi, %r14
10002d7ed:	48 89 f7	movq	%rsi, %rdi
10002d7f0:	e8 c3 47 01 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
10002d7f5:	bb 16 00 00 00	movl	$22, %ebx
10002d7fa:	48 85 c0	testq	%rax, %rax
10002d7fd:	0f 84 ff 00 00 00	je	0x10002d902
10002d803:	48 8d 35 41 68 01 00	leaq	92225(%rip), %rsi ## literal pool for: "XPCService"
10002d80a:	48 89 c7	movq	%rax, %rdi
10002d80d:	e8 5a 48 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002d812:	48 85 c0	testq	%rax, %rax
10002d815:	74 2f	je	0x10002d846
10002d817:	49 89 c4	movq	%rax, %r12
10002d81a:	48 89 c7	movq	%rax, %rdi
10002d81d:	e8 a4 48 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002d822:	48 3b 05 d7 a8 02 00	cmpq	174295(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002d829:	74 2c	je	0x10002d857
10002d82b:	48 8d 15 76 0f 02 00	leaq	135030(%rip), %rdx ## literal pool for: "Invalid XPCService dictionary."
10002d832:	4c 89 f7	movq	%r14, %rdi
10002d835:	be 03 00 00 00	movl	$3, %esi
10002d83a:	31 c0	xorl	%eax, %eax
10002d83c:	e8 e8 2b ff ff	callq	0x100020429
10002d841:	e9 bc 00 00 00	jmp	0x10002d902
10002d846:	48 8d 05 eb 4a 03 00	leaq	215787(%rip), %rax
10002d84d:	49 89 07	movq	%rax, (%r15)
10002d850:	31 db	xorl	%ebx, %ebx
10002d852:	e9 ab 00 00 00	jmp	0x10002d902
10002d857:	48 8d 35 47 6c 01 00	leaq	93255(%rip), %rsi ## literal pool for: "ServiceType"
10002d85e:	4c 89 e7	movq	%r12, %rdi
10002d861:	e8 f4 47 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002d866:	4c 8d 2d cb 4a 03 00	leaq	215755(%rip), %r13
10002d86d:	48 85 c0	testq	%rax, %rax
10002d870:	74 53	je	0x10002d8c5
10002d872:	48 89 c3	movq	%rax, %rbx
10002d875:	48 8d 35 f0 9d 01 00	leaq	105968(%rip), %rsi ## literal pool for: "System"
10002d87c:	48 89 c7	movq	%rax, %rdi
10002d87f:	e8 a8 45 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002d884:	85 c0	testl	%eax, %eax
10002d886:	74 2d	je	0x10002d8b5
10002d888:	48 8d 35 d8 a9 01 00	leaq	109016(%rip), %rsi ## literal pool for: "User"
10002d88f:	48 89 df	movq	%rbx, %rdi
10002d892:	e8 95 45 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002d897:	85 c0	testl	%eax, %eax
10002d899:	74 23	je	0x10002d8be
10002d89b:	48 8d 35 25 0f 02 00	leaq	134949(%rip), %rsi ## literal pool for: "Application"
10002d8a2:	48 89 df	movq	%rbx, %rdi
10002d8a5:	e8 82 45 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002d8aa:	bb 16 00 00 00	movl	$22, %ebx
10002d8af:	85 c0	testl	%eax, %eax
10002d8b1:	75 17	jne	0x10002d8ca
10002d8b3:	eb 10	jmp	0x10002d8c5
10002d8b5:	4c 8d 2d e4 48 03 00	leaq	215268(%rip), %r13
10002d8bc:	eb 07	jmp	0x10002d8c5
10002d8be:	4c 8d 2d 63 49 03 00	leaq	215395(%rip), %r13
10002d8c5:	4d 89 2f	movq	%r13, (%r15)
10002d8c8:	31 db	xorl	%ebx, %ebx
10002d8ca:	48 8d 35 3e 6a 01 00	leaq	92734(%rip), %rsi ## literal pool for: "_MultipleInstances"
10002d8d1:	4c 89 e7	movq	%r12, %rdi
10002d8d4:	e8 5d 47 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10002d8d9:	84 c0	testb	%al, %al
10002d8db:	74 25	je	0x10002d902
10002d8dd:	4c 8d 25 54 4a 03 00	leaq	215636(%rip), %r12
10002d8e4:	4d 39 27	cmpq	%r12, (%r15)
10002d8e7:	74 19	je	0x10002d902
10002d8e9:	48 8d 15 e3 0e 02 00	leaq	134883(%rip), %rdx ## literal pool for: "MultipleInstance XPC services are not supported for any service type other than Application. Forcing service to PID domain."
10002d8f0:	4c 89 f7	movq	%r14, %rdi
10002d8f3:	be 04 00 00 00	movl	$4, %esi
10002d8f8:	31 c0	xorl	%eax, %eax
10002d8fa:	e8 2a 2b ff ff	callq	0x100020429
10002d8ff:	4d 89 27	movq	%r12, (%r15)
10002d902:	89 d8	movl	%ebx, %eax
10002d904:	48 83 c4 08	addq	$8, %rsp
10002d908:	5b	popq	%rbx
10002d909:	41 5c	popq	%r12
10002d90b:	41 5d	popq	%r13
10002d90d:	41 5e	popq	%r14
10002d90f:	41 5f	popq	%r15
10002d911:	5d	popq	%rbp
10002d912:	c3	retq
10002d913:	55	pushq	%rbp
10002d914:	48 89 e5	movq	%rsp, %rbp
10002d917:	41 57	pushq	%r15
10002d919:	41 56	pushq	%r14
10002d91b:	41 55	pushq	%r13
10002d91d:	41 54	pushq	%r12
10002d91f:	53	pushq	%rbx
10002d920:	48 83 ec 58	subq	$88, %rsp
10002d924:	45 89 c5	movl	%r8d, %r13d
10002d927:	48 89 55 80	movq	%rdx, -128(%rbp)
10002d92b:	48 89 75 88	movq	%rsi, -120(%rbp)
10002d92f:	49 89 fc	movq	%rdi, %r12
10002d932:	48 8b 05 ef a6 02 00	movq	173807(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d939:	48 8b 00	movq	(%rax), %rax
10002d93c:	48 89 45 d0	movq	%rax, -48(%rbp)
10002d940:	0f 28 05 39 59 01 00	movaps	88377(%rip), %xmm0
10002d947:	48 8d 5d 90	leaq	-112(%rbp), %rbx
10002d94b:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10002d94f:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10002d953:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10002d957:	0f 29 03	movaps	%xmm0, (%rbx)
10002d95a:	48 89 cf	movq	%rcx, %rdi
10002d95d:	48 89 de	movq	%rbx, %rsi
10002d960:	e8 f8 6e 00 00	callq	0x10003485d
10002d965:	49 89 c6	movq	%rax, %r14
10002d968:	44 8b 3b	movl	(%rbx), %r15d
10002d96b:	44 89 ef	movl	%r13d, %edi
10002d96e:	e8 9b 47 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002d973:	48 89 c3	movq	%rax, %rbx
10002d976:	48 83 ec 08	subq	$8, %rsp
10002d97a:	48 8d 15 f1 0e 02 00	leaq	134897(%rip), %rdx ## literal pool for: "failed activation: name = %s, flags = 0x%llx, requestor = %s[%d], error = %d: %s"
10002d981:	4c 89 e7	movq	%r12, %rdi
10002d984:	be 04 00 00 00	movl	$4, %esi
10002d989:	48 8b 4d 88	movq	-120(%rbp), %rcx
10002d98d:	4c 8b 45 80	movq	-128(%rbp), %r8
10002d991:	4d 89 f1	movq	%r14, %r9
10002d994:	31 c0	xorl	%eax, %eax
10002d996:	53	pushq	%rbx
10002d997:	41 55	pushq	%r13
10002d999:	41 57	pushq	%r15
10002d99b:	e8 89 2a ff ff	callq	0x100020429
10002d9a0:	48 83 c4 20	addq	$32, %rsp
10002d9a4:	48 8b 05 7d a6 02 00	movq	173693(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002d9ab:	48 8b 00	movq	(%rax), %rax
10002d9ae:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002d9b2:	75 0f	jne	0x10002d9c3
10002d9b4:	48 83 c4 58	addq	$88, %rsp
10002d9b8:	5b	popq	%rbx
10002d9b9:	41 5c	popq	%r12
10002d9bb:	41 5d	popq	%r13
10002d9bd:	41 5e	popq	%r14
10002d9bf:	41 5f	popq	%r15
10002d9c1:	5d	popq	%rbp
10002d9c2:	c3	retq
10002d9c3:	e8 aa 3d 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002d9c8:	55	pushq	%rbp
10002d9c9:	48 89 e5	movq	%rsp, %rbp
10002d9cc:	41 57	pushq	%r15
10002d9ce:	41 56	pushq	%r14
10002d9d0:	41 55	pushq	%r13
10002d9d2:	41 54	pushq	%r12
10002d9d4:	53	pushq	%rbx
10002d9d5:	50	pushq	%rax
10002d9d6:	4d 89 c7	movq	%r8, %r15
10002d9d9:	49 89 cd	movq	%rcx, %r13
10002d9dc:	48 89 d3	movq	%rdx, %rbx
10002d9df:	49 89 f4	movq	%rsi, %r12
10002d9e2:	48 89 7d d0	movq	%rdi, -48(%rbp)
10002d9e6:	4c 8b b6 98 00 00 00	movq	152(%rsi), %r14
10002d9ed:	4d 85 f6	testq	%r14, %r14
10002d9f0:	74 19	je	0x10002da0b
10002d9f2:	49 8d be 90 00 00 00	leaq	144(%r14), %rdi
10002d9f9:	48 89 de	movq	%rbx, %rsi
10002d9fc:	e8 2b 44 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002da01:	85 c0	testl	%eax, %eax
10002da03:	74 15	je	0x10002da1a
10002da05:	4d 8b 76 08	movq	8(%r14), %r14
10002da09:	eb e2	jmp	0x10002d9ed
10002da0b:	4d 85 ed	testq	%r13, %r13
10002da0e:	74 11	je	0x10002da21
10002da10:	4c 89 ef	movq	%r13, %rdi
10002da13:	e8 ea 46 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10002da18:	eb 27	jmp	0x10002da41
10002da1a:	b8 25 00 00 00	movl	$37, %eax
10002da1f:	eb 67	jmp	0x10002da88
10002da21:	bf 12 00 00 00	movl	$18, %edi
10002da26:	be 06 00 00 00	movl	$6, %esi
10002da2b:	31 d2	xorl	%edx, %edx
10002da2d:	e8 20 c2 fd ff	callq	0x100009c52
10002da32:	89 c7	movl	%eax, %edi
10002da34:	be 11 00 00 00	movl	$17, %esi
10002da39:	e8 a6 46 01 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
10002da3e:	49 89 c5	movq	%rax, %r13
10002da41:	48 8d 0d c7 4b ff ff	leaq	-46137(%rip), %rcx
10002da48:	4c 89 e7	movq	%r12, %rdi
10002da4b:	48 89 de	movq	%rbx, %rsi
10002da4e:	4c 89 ea	movq	%r13, %rdx
10002da51:	4d 89 e0	movq	%r12, %r8
10002da54:	e8 7d d2 00 00	callq	0x10003acd6
10002da59:	48 89 c3	movq	%rax, %rbx
10002da5c:	4d 85 ff	testq	%r15, %r15
10002da5f:	74 05	je	0x10002da66
10002da61:	4d 89 2f	movq	%r13, (%r15)
10002da64:	eb 08	jmp	0x10002da6e
10002da66:	4c 89 ef	movq	%r13, %rdi
10002da69:	e8 8e 46 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002da6e:	80 4b 50 05	orb	$5, 80(%rbx)
10002da72:	b9 02 00 00 00	movl	$2, %ecx
10002da77:	48 8b 7d d0	movq	-48(%rbp), %rdi
10002da7b:	4c 89 e6	movq	%r12, %rsi
10002da7e:	48 89 da	movq	%rbx, %rdx
10002da81:	e8 61 4c ff ff	callq	0x1000226e7
10002da86:	31 c0	xorl	%eax, %eax
10002da88:	48 83 c4 08	addq	$8, %rsp
10002da8c:	5b	popq	%rbx
10002da8d:	41 5c	popq	%r12
10002da8f:	41 5d	popq	%r13
10002da91:	41 5e	popq	%r14
10002da93:	41 5f	popq	%r15
10002da95:	5d	popq	%rbp
10002da96:	c3	retq
10002da97:	55	pushq	%rbp
10002da98:	48 89 e5	movq	%rsp, %rbp
10002da9b:	41 57	pushq	%r15
10002da9d:	41 56	pushq	%r14
10002da9f:	41 55	pushq	%r13
10002daa1:	41 54	pushq	%r12
10002daa3:	53	pushq	%rbx
10002daa4:	48 81 ec 98 00 00 00	subq	$152, %rsp
10002daab:	4c 89 8d 48 ff ff ff	movq	%r9, -184(%rbp)
10002dab2:	48 89 95 50 ff ff ff	movq	%rdx, -176(%rbp)
10002dab9:	44 8b 6d 10	movl	16(%rbp), %r13d
10002dabd:	48 8b 05 64 a5 02 00	movq	173412(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002dac4:	48 8b 00	movq	(%rax), %rax
10002dac7:	48 89 45 d0	movq	%rax, -48(%rbp)
10002dacb:	41 81 fd 91 00 00 00	cmpl	$145, %r13d
10002dad2:	0f 84 63 01 00 00	je	0x10002dc3b
10002dad8:	4d 89 c6	movq	%r8, %r14
10002dadb:	49 89 cc	movq	%rcx, %r12
10002dade:	49 89 f7	movq	%rsi, %r15
10002dae1:	48 89 fb	movq	%rdi, %rbx
10002dae4:	48 8d 35 b0 10 02 00	leaq	135344(%rip), %rsi ## literal pool for: "com.apple.ist.ds.appleconnect2."
10002daeb:	4c 89 ff	movq	%r15, %rdi
10002daee:	e8 bb 17 fe ff	callq	0x10000f2ae
10002daf3:	84 c0	testb	%al, %al
10002daf5:	0f 85 40 01 00 00	jne	0x10002dc3b
10002dafb:	48 89 9d 58 ff ff ff	movq	%rbx, -168(%rbp)
10002db02:	bf 00 01 00 00	movl	$256, %edi
10002db07:	e8 55 e5 fd ff	callq	0x10000c061
10002db0c:	44 89 e9	movl	%r13d, %ecx
10002db0f:	49 89 c5	movq	%rax, %r13
10002db12:	81 f9 9f 00 00 00	cmpl	$159, %ecx
10002db18:	48 8d 05 9c 10 02 00	leaq	135324(%rip), %rax ## literal pool for: "denied lookup"
10002db1f:	48 8d 15 a3 10 02 00	leaq	135331(%rip), %rdx ## literal pool for: "failed lookup"
10002db26:	48 0f 44 d0	cmoveq	%rax, %rdx
10002db2a:	48 8d 35 a6 10 02 00	leaq	135334(%rip), %rsi ## literal pool for: "%s: name = %s, "
10002db31:	4c 89 ef	movq	%r13, %rdi
10002db34:	4c 89 f9	movq	%r15, %rcx
10002db37:	31 c0	xorl	%eax, %eax
10002db39:	e8 92 e5 fd ff	callq	0x10000c0d0
10002db3e:	4d 85 e4	testq	%r12, %r12
10002db41:	74 14	je	0x10002db57
10002db43:	48 8d 35 9d 10 02 00	leaq	135325(%rip), %rsi ## literal pool for: "handle = %llu, "
10002db4a:	4c 89 ef	movq	%r13, %rdi
10002db4d:	4c 89 e2	movq	%r12, %rdx
10002db50:	31 c0	xorl	%eax, %eax
10002db52:	e8 79 e5 fd ff	callq	0x10000c0d0
10002db57:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10002db61:	48 89 45 bd	movq	%rax, -67(%rbp)
10002db65:	0f 28 05 14 57 01 00	movaps	87828(%rip), %xmm0
10002db6c:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10002db70:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10002db74:	41 f6 c6 24	testb	$36, %r14b
10002db78:	74 29	je	0x10002dba3
10002db7a:	4c 8d 7d a0	leaq	-96(%rbp), %r15
10002db7e:	48 8b bd 50 ff ff ff	movq	-176(%rbp), %rdi
10002db85:	4c 89 fe	movq	%r15, %rsi
10002db88:	e8 71 43 01 00	callq	0x100041efe ## symbol stub for: _uuid_unparse
10002db8d:	48 8d 35 63 10 02 00	leaq	135267(%rip), %rsi ## literal pool for: "instance = %s, "
10002db94:	4c 89 ef	movq	%r13, %rdi
10002db97:	4c 89 fa	movq	%r15, %rdx
10002db9a:	31 c0	xorl	%eax, %eax
10002db9c:	e8 2f e5 fd ff	callq	0x10000c0d0
10002dba1:	eb 05	jmp	0x10002dba8
10002dba3:	4d 85 f6	testq	%r14, %r14
10002dba6:	74 14	je	0x10002dbbc
10002dba8:	48 8d 35 58 10 02 00	leaq	135256(%rip), %rsi ## literal pool for: "flags = 0x%llx, "
10002dbaf:	4c 89 ef	movq	%r13, %rdi
10002dbb2:	4c 89 f2	movq	%r14, %rdx
10002dbb5:	31 c0	xorl	%eax, %eax
10002dbb7:	e8 14 e5 fd ff	callq	0x10000c0d0
10002dbbc:	48 8d 9d 60 ff ff ff	leaq	-160(%rbp), %rbx
10002dbc3:	0f 28 05 b6 56 01 00	movaps	87734(%rip), %xmm0
10002dbca:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10002dbce:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10002dbd2:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10002dbd6:	0f 29 03	movaps	%xmm0, (%rbx)
10002dbd9:	48 8b bd 48 ff ff ff	movq	-184(%rbp), %rdi
10002dbe0:	48 89 de	movq	%rbx, %rsi
10002dbe3:	e8 75 6c 00 00	callq	0x10003485d
10002dbe8:	49 89 c6	movq	%rax, %r14
10002dbeb:	8b 1b	movl	(%rbx), %ebx
10002dbed:	44 8b 7d 10	movl	16(%rbp), %r15d
10002dbf1:	44 89 ff	movl	%r15d, %edi
10002dbf4:	e8 15 45 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002dbf9:	48 8d 35 18 10 02 00	leaq	135192(%rip), %rsi ## literal pool for: "requestor = %s[%d], error = %d: %s"
10002dc00:	4c 89 ef	movq	%r13, %rdi
10002dc03:	4c 89 f2	movq	%r14, %rdx
10002dc06:	89 d9	movl	%ebx, %ecx
10002dc08:	45 89 f8	movl	%r15d, %r8d
10002dc0b:	49 89 c1	movq	%rax, %r9
10002dc0e:	31 c0	xorl	%eax, %eax
10002dc10:	e8 bb e4 fd ff	callq	0x10000c0d0
10002dc15:	49 8b 4d 00	movq	(%r13), %rcx
10002dc19:	48 8d 15 f6 99 01 00	leaq	104950(%rip), %rdx ## literal pool for: "%s"
10002dc20:	48 8b bd 58 ff ff ff	movq	-168(%rbp), %rdi
10002dc27:	be 04 00 00 00	movl	$4, %esi
10002dc2c:	31 c0	xorl	%eax, %eax
10002dc2e:	e8 f6 27 ff ff	callq	0x100020429
10002dc33:	4c 89 ef	movq	%r13, %rdi
10002dc36:	e8 76 e4 fd ff	callq	0x10000c0b1
10002dc3b:	48 8b 05 e6 a3 02 00	movq	173030(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002dc42:	48 8b 00	movq	(%rax), %rax
10002dc45:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002dc49:	75 12	jne	0x10002dc5d
10002dc4b:	48 81 c4 98 00 00 00	addq	$152, %rsp
10002dc52:	5b	popq	%rbx
10002dc53:	41 5c	popq	%r12
10002dc55:	41 5d	popq	%r13
10002dc57:	41 5e	popq	%r14
10002dc59:	41 5f	popq	%r15
10002dc5b:	5d	popq	%rbp
10002dc5c:	c3	retq
10002dc5d:	e8 10 3b 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002dc62:	55	pushq	%rbp
10002dc63:	48 89 e5	movq	%rsp, %rbp
10002dc66:	41 57	pushq	%r15
10002dc68:	41 56	pushq	%r14
10002dc6a:	41 54	pushq	%r12
10002dc6c:	53	pushq	%rbx
10002dc6d:	48 83 ec 10	subq	$16, %rsp
10002dc71:	49 89 d4	movq	%rdx, %r12
10002dc74:	49 89 f7	movq	%rsi, %r15
10002dc77:	48 8d 45 d8	leaq	-40(%rbp), %rax
10002dc7b:	48 89 38	movq	%rdi, (%rax)
10002dc7e:	8b 71 14	movl	20(%rcx), %esi
10002dc81:	31 db	xorl	%ebx, %ebx
10002dc83:	48 89 c7	movq	%rax, %rdi
10002dc86:	31 d2	xorl	%edx, %edx
10002dc88:	e8 00 7f ff ff	callq	0x100025b8d
10002dc8d:	48 85 c0	testq	%rax, %rax
10002dc90:	74 57	je	0x10002dce9
10002dc92:	48 89 c7	movq	%rax, %rdi
10002dc95:	4c 89 fe	movq	%r15, %rsi
10002dc98:	e8 de 04 ff ff	callq	0x10001e17b
10002dc9d:	41 be 03 00 00 00	movl	$3, %r14d
10002dca3:	48 85 c0	testq	%rax, %rax
10002dca6:	74 3d	je	0x10002dce5
10002dca8:	48 89 c7	movq	%rax, %rdi
10002dcab:	4c 89 e6	movq	%r12, %rsi
10002dcae:	e8 72 3e 00 00	callq	0x100031b25
10002dcb3:	48 85 c0	testq	%rax, %rax
10002dcb6:	74 2d	je	0x10002dce5
10002dcb8:	48 89 c7	movq	%rax, %rdi
10002dcbb:	e8 bb 43 00 00	callq	0x10003207b
10002dcc0:	48 8b 98 a0 00 00 00	movq	160(%rax), %rbx
10002dcc7:	48 85 db	testq	%rbx, %rbx
10002dcca:	74 19	je	0x10002dce5
10002dccc:	48 8d bb 90 00 00 00	leaq	144(%rbx), %rdi
10002dcd3:	4c 89 fe	movq	%r15, %rsi
10002dcd6:	e8 51 41 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002dcdb:	85 c0	testl	%eax, %eax
10002dcdd:	74 23	je	0x10002dd02
10002dcdf:	48 8b 5b 08	movq	8(%rbx), %rbx
10002dce3:	eb e2	jmp	0x10002dcc7
10002dce5:	31 db	xorl	%ebx, %ebx
10002dce7:	eb 06	jmp	0x10002dcef
10002dce9:	41 be 71 00 00 00	movl	$113, %r14d
10002dcef:	48 89 d8	movq	%rbx, %rax
10002dcf2:	44 89 f2	movl	%r14d, %edx
10002dcf5:	48 83 c4 10	addq	$16, %rsp
10002dcf9:	5b	popq	%rbx
10002dcfa:	41 5c	popq	%r12
10002dcfc:	41 5e	popq	%r14
10002dcfe:	41 5f	popq	%r15
10002dd00:	5d	popq	%rbp
10002dd01:	c3	retq
10002dd02:	45 31 f6	xorl	%r14d, %r14d
10002dd05:	eb e8	jmp	0x10002dcef
10002dd07:	55	pushq	%rbp
10002dd08:	48 89 e5	movq	%rsp, %rbp
10002dd0b:	41 57	pushq	%r15
10002dd0d:	41 56	pushq	%r14
10002dd0f:	41 54	pushq	%r12
10002dd11:	53	pushq	%rbx
10002dd12:	48 83 ec 10	subq	$16, %rsp
10002dd16:	49 89 fe	movq	%rdi, %r14
10002dd19:	48 8d 7d dc	leaq	-36(%rbp), %rdi
10002dd1d:	89 37	movl	%esi, (%rdi)
10002dd1f:	be 04 00 00 00	movl	$4, %esi
10002dd24:	e8 50 16 fe ff	callq	0x10000f379
10002dd29:	49 89 c7	movq	%rax, %r15
10002dd2c:	48 b9 c5 4e ec c4 4e ec c4 4e	movabsq	$5675921253449092805, %rcx
10002dd36:	48 f7 e1	mulq	%rcx
10002dd39:	48 c1 ea 02	shrq	$2, %rdx
10002dd3d:	48 8d 04 52	leaq	(%rdx,%rdx,2), %rax
10002dd41:	48 8d 04 82	leaq	(%rdx,%rax,4), %rax
10002dd45:	49 29 c7	subq	%rax, %r15
10002dd48:	49 8b 06	movq	(%r14), %rax
10002dd4b:	4a 8b 9c f8 00 02 00 00	movq	512(%rax,%r15,8), %rbx
10002dd53:	48 85 db	testq	%rbx, %rbx
10002dd56:	74 1d	je	0x10002dd75
10002dd58:	48 89 df	movq	%rbx, %rdi
10002dd5b:	e8 a1 da fe ff	callq	0x10001b801
10002dd60:	3b 45 dc	cmpl	-36(%rbp), %eax
10002dd63:	0f 84 c5 00 00 00	je	0x10002de2e
10002dd69:	48 8b 5b 48	movq	72(%rbx), %rbx
10002dd6d:	48 85 db	testq	%rbx, %rbx
10002dd70:	75 e6	jne	0x10002dd58
10002dd72:	49 8b 06	movq	(%r14), %rax
10002dd75:	48 8b 48 60	movq	96(%rax), %rcx
10002dd79:	48 8d 15 a8 44 03 00	leaq	214184(%rip), %rdx
10002dd80:	48 39 d1	cmpq	%rdx, %rcx
10002dd83:	74 21	je	0x10002dda6
10002dd85:	48 8d 15 24 45 03 00	leaq	214308(%rip), %rdx
10002dd8c:	48 39 d1	cmpq	%rdx, %rcx
10002dd8f:	74 1d	je	0x10002ddae
10002dd91:	48 8d 05 08 44 03 00	leaq	214024(%rip), %rax
10002dd98:	48 39 c1	cmpq	%rax, %rcx
10002dd9b:	75 2f	jne	0x10002ddcc
10002dd9d:	48 8d 05 ac 57 03 00	leaq	219052(%rip), %rax
10002dda4:	eb 0e	jmp	0x10002ddb4
10002dda6:	48 05 d0 03 00 00	addq	$976, %rax
10002ddac:	eb 06	jmp	0x10002ddb4
10002ddae:	48 05 c8 00 00 00	addq	$200, %rax
10002ddb4:	4c 8b 20	movq	(%rax), %r12
10002ddb7:	4d 85 e4	testq	%r12, %r12
10002ddba:	74 10	je	0x10002ddcc
10002ddbc:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002ddc5:	a9 03 02 00 00	testl	$515, %eax
10002ddca:	74 72	je	0x10002de3e
10002ddcc:	48 8d 7d dc	leaq	-36(%rbp), %rdi
10002ddd0:	be 04 00 00 00	movl	$4, %esi
10002ddd5:	e8 9f 15 fe ff	callq	0x10000f379
10002ddda:	48 89 c1	movq	%rax, %rcx
10002dddd:	48 ba 93 24 49 92 24 49 92 24	movabsq	$2635249153387078803, %rdx
10002dde7:	48 f7 e2	mulq	%rdx
10002ddea:	48 89 c8	movq	%rcx, %rax
10002dded:	48 29 d0	subq	%rdx, %rax
10002ddf0:	48 d1 e8	shrq	%rax
10002ddf3:	48 01 d0	addq	%rdx, %rax
10002ddf6:	48 c1 e8 02	shrq	$2, %rax
10002ddfa:	48 8d 14 c5 00 00 00 00	leaq	(,%rax,8), %rdx
10002de02:	48 29 d0	subq	%rdx, %rax
10002de05:	48 01 c8	addq	%rcx, %rax
10002de08:	49 8b 0e	movq	(%r14), %rcx
10002de0b:	48 8b 9c c1 68 02 00 00	movq	616(%rcx,%rax,8), %rbx
10002de13:	48 85 db	testq	%rbx, %rbx
10002de16:	74 14	je	0x10002de2c
10002de18:	8b 45 dc	movl	-36(%rbp), %eax
10002de1b:	39 83 18 01 00 00	cmpl	%eax, 280(%rbx)
10002de21:	74 0b	je	0x10002de2e
10002de23:	48 8b 5b 48	movq	72(%rbx), %rbx
10002de27:	48 85 db	testq	%rbx, %rbx
10002de2a:	75 ef	jne	0x10002de1b
10002de2c:	31 db	xorl	%ebx, %ebx
10002de2e:	48 89 d8	movq	%rbx, %rax
10002de31:	48 83 c4 10	addq	$16, %rsp
10002de35:	5b	popq	%rbx
10002de36:	41 5c	popq	%r12
10002de38:	41 5e	popq	%r14
10002de3a:	41 5f	popq	%r15
10002de3c:	5d	popq	%rbp
10002de3d:	c3	retq
10002de3e:	4b 8b 9c fc 00 02 00 00	movq	512(%r12,%r15,8), %rbx
10002de46:	48 85 db	testq	%rbx, %rbx
10002de49:	74 81	je	0x10002ddcc
10002de4b:	48 89 df	movq	%rbx, %rdi
10002de4e:	e8 ae d9 fe ff	callq	0x10001b801
10002de53:	3b 45 dc	cmpl	-36(%rbp), %eax
10002de56:	74 06	je	0x10002de5e
10002de58:	48 8b 5b 48	movq	72(%rbx), %rbx
10002de5c:	eb e8	jmp	0x10002de46
10002de5e:	4d 89 26	movq	%r12, (%r14)
10002de61:	eb cb	jmp	0x10002de2e
10002de63:	55	pushq	%rbp
10002de64:	48 89 e5	movq	%rsp, %rbp
10002de67:	41 57	pushq	%r15
10002de69:	41 56	pushq	%r14
10002de6b:	53	pushq	%rbx
10002de6c:	50	pushq	%rax
10002de6d:	8b 87 08 04 00 00	movl	1032(%rdi), %eax
10002de73:	bb 25 00 00 00	movl	$37, %ebx
10002de78:	a8 04	testb	$4, %al
10002de7a:	0f 85 ae 00 00 00	jne	0x10002df2e
10002de80:	49 89 ff	movq	%rdi, %r15
10002de83:	a9 03 02 00 00	testl	$515, %eax
10002de88:	74 20	je	0x10002deaa
10002de8a:	48 8d 15 6e 0e 02 00	leaq	134766(%rip), %rdx ## literal pool for: "domain shutting down, not uncorking"
10002de91:	4c 89 ff	movq	%r15, %rdi
10002de94:	be 05 00 00 00	movl	$5, %esi
10002de99:	31 c0	xorl	%eax, %eax
10002de9b:	e8 89 25 ff ff	callq	0x100020429
10002dea0:	bb 7c 00 00 00	movl	$124, %ebx
10002dea5:	e9 84 00 00 00	jmp	0x10002df2e
10002deaa:	a8 08	testb	$8, %al
10002deac:	74 65	je	0x10002df13
10002deae:	49 83 bf d8 00 00 00 00	cmpq	$0, 216(%r15)
10002deb6:	74 5b	je	0x10002df13
10002deb8:	49 89 f6	movq	%rsi, %r14
10002debb:	48 8d 15 89 0e 02 00	leaq	134793(%rip), %rdx ## literal pool for: "uncorking domain"
10002dec2:	31 db	xorl	%ebx, %ebx
10002dec4:	4c 89 ff	movq	%r15, %rdi
10002dec7:	be 05 00 00 00	movl	$5, %esi
10002decc:	31 c0	xorl	%eax, %eax
10002dece:	e8 56 25 ff ff	callq	0x100020429
10002ded3:	49 8b 77 68	movq	104(%r15), %rsi
10002ded7:	bf 14 00 00 22	movl	$570425364, %edi
10002dedc:	e8 ee ef fd ff	callq	0x10000cecf
10002dee1:	49 8b 7f 68	movq	104(%r15), %rdi
10002dee5:	90	nop
10002dee6:	0f 1f 40 00	nopl	(%rax)
10002deea:	49 8b 8f d8 00 00 00	movq	216(%r15), %rcx
10002def1:	41 b9 00 04 00 00	movl	$1024, %r9d
10002def7:	4c 89 ff	movq	%r15, %rdi
10002defa:	be 01 00 00 00	movl	$1, %esi
10002deff:	31 d2	xorl	%edx, %edx
10002df01:	4d 89 f0	movq	%r14, %r8
10002df04:	e8 dc 27 fe ff	callq	0x1000106e5
10002df09:	41 80 8f 08 04 00 00 04	orb	$4, 1032(%r15)
10002df11:	eb 1b	jmp	0x10002df2e
10002df13:	48 8d 15 09 0e 02 00	leaq	134665(%rip), %rdx ## literal pool for: "domain is not initialized, can't uncork"
10002df1a:	4c 89 ff	movq	%r15, %rdi
10002df1d:	be 05 00 00 00	movl	$5, %esi
10002df22:	31 c0	xorl	%eax, %eax
10002df24:	e8 00 25 ff ff	callq	0x100020429
10002df29:	bb 83 00 00 00	movl	$131, %ebx
10002df2e:	89 d8	movl	%ebx, %eax
10002df30:	48 83 c4 08	addq	$8, %rsp
10002df34:	5b	popq	%rbx
10002df35:	41 5e	popq	%r14
10002df37:	41 5f	popq	%r15
10002df39:	5d	popq	%rbp
10002df3a:	c3	retq
10002df3b:	55	pushq	%rbp
10002df3c:	48 89 e5	movq	%rsp, %rbp
10002df3f:	41 57	pushq	%r15
10002df41:	41 56	pushq	%r14
10002df43:	53	pushq	%rbx
10002df44:	50	pushq	%rax
10002df45:	49 89 f6	movq	%rsi, %r14
10002df48:	48 89 fb	movq	%rdi, %rbx
10002df4b:	48 8b 3f	movq	(%rdi), %rdi
10002df4e:	e8 ce 62 ff ff	callq	0x100024221
10002df53:	48 85 c0	testq	%rax, %rax
10002df56:	75 5b	jne	0x10002dfb3
10002df58:	48 8b 03	movq	(%rbx), %rax
10002df5b:	48 8b 48 60	movq	96(%rax), %rcx
10002df5f:	48 8d 15 c2 42 03 00	leaq	213698(%rip), %rdx
10002df66:	48 39 d1	cmpq	%rdx, %rcx
10002df69:	74 21	je	0x10002df8c
10002df6b:	48 8d 15 3e 43 03 00	leaq	213822(%rip), %rdx
10002df72:	48 39 d1	cmpq	%rdx, %rcx
10002df75:	74 1d	je	0x10002df94
10002df77:	48 8d 05 22 42 03 00	leaq	213538(%rip), %rax
10002df7e:	48 39 c1	cmpq	%rax, %rcx
10002df81:	75 2e	jne	0x10002dfb1
10002df83:	48 8d 05 c6 55 03 00	leaq	218566(%rip), %rax
10002df8a:	eb 0e	jmp	0x10002df9a
10002df8c:	48 05 d0 03 00 00	addq	$976, %rax
10002df92:	eb 06	jmp	0x10002df9a
10002df94:	48 05 c8 00 00 00	addq	$200, %rax
10002df9a:	4c 8b 38	movq	(%rax), %r15
10002df9d:	4d 85 ff	testq	%r15, %r15
10002dfa0:	74 0f	je	0x10002dfb1
10002dfa2:	41 0f b7 87 08 04 00 00	movzwl	1032(%r15), %eax
10002dfaa:	a9 03 02 00 00	testl	$515, %eax
10002dfaf:	74 0d	je	0x10002dfbe
10002dfb1:	31 c0	xorl	%eax, %eax
10002dfb3:	48 83 c4 08	addq	$8, %rsp
10002dfb7:	5b	popq	%rbx
10002dfb8:	41 5e	popq	%r14
10002dfba:	41 5f	popq	%r15
10002dfbc:	5d	popq	%rbp
10002dfbd:	c3	retq
10002dfbe:	4c 89 ff	movq	%r15, %rdi
10002dfc1:	4c 89 f6	movq	%r14, %rsi
10002dfc4:	e8 58 62 ff ff	callq	0x100024221
10002dfc9:	48 85 c0	testq	%rax, %rax
10002dfcc:	74 e3	je	0x10002dfb1
10002dfce:	4c 89 3b	movq	%r15, (%rbx)
10002dfd1:	eb e0	jmp	0x10002dfb3
10002dfd3:	55	pushq	%rbp
10002dfd4:	48 89 e5	movq	%rsp, %rbp
10002dfd7:	41 57	pushq	%r15
10002dfd9:	41 56	pushq	%r14
10002dfdb:	41 55	pushq	%r13
10002dfdd:	41 54	pushq	%r12
10002dfdf:	53	pushq	%rbx
10002dfe0:	48 83 ec 18	subq	$24, %rsp
10002dfe4:	49 89 d7	movq	%rdx, %r15
10002dfe7:	48 89 f3	movq	%rsi, %rbx
10002dfea:	49 89 fe	movq	%rdi, %r14
10002dfed:	48 89 f7	movq	%rsi, %rdi
10002dff0:	e8 d1 40 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002dff5:	48 3b 05 2c a1 02 00	cmpq	172332(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002dffc:	0f 85 81 00 00 00	jne	0x10002e083
10002e002:	4c 8d 65 c8	leaq	-56(%rbp), %r12
10002e006:	49 c7 04 24 00 00 00 00	movq	$0, (%r12)
10002e00e:	4c 8d 6d d7	leaq	-41(%rbp), %r13
10002e012:	41 c6 45 00 00	movb	$0, (%r13)
10002e017:	48 89 df	movq	%rbx, %rdi
10002e01a:	e8 07 41 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002e01f:	4c 89 f7	movq	%r14, %rdi
10002e022:	48 89 c6	movq	%rax, %rsi
10002e025:	4c 89 e2	movq	%r12, %rdx
10002e028:	31 c9	xorl	%ecx, %ecx
10002e02a:	4d 89 e8	movq	%r13, %r8
10002e02d:	e8 4e 49 fe ff	callq	0x100012980
10002e032:	48 85 c0	testq	%rax, %rax
10002e035:	74 1d	je	0x10002e054
10002e037:	49 8b 4f 50	movq	80(%r15), %rcx
10002e03b:	49 83 c7 50	addq	$80, %r15
10002e03f:	48 89 08	movq	%rcx, (%rax)
10002e042:	48 85 c9	testq	%rcx, %rcx
10002e045:	74 04	je	0x10002e04b
10002e047:	48 89 41 08	movq	%rax, 8(%rcx)
10002e04b:	49 89 07	movq	%rax, (%r15)
10002e04e:	4c 89 78 08	movq	%r15, 8(%rax)
10002e052:	eb 2f	jmp	0x10002e083
10002e054:	80 7d d7 00	cmpb	$0, -41(%rbp)
10002e058:	48 8d 05 6f 0e 02 00	leaq	134767(%rip), %rax ## literal pool for: "set"
10002e05f:	48 8d 0d 61 0e 02 00	leaq	134753(%rip), %rcx ## literal pool for: "change"
10002e066:	48 0f 44 c8	cmoveq	%rax, %rcx
10002e06a:	48 8d 15 12 0e 02 00	leaq	134674(%rip), %rdx ## literal pool for: "Service attempted to %s environment variable with reserved name: %s"
10002e071:	4c 89 ff	movq	%r15, %rdi
10002e074:	be 03 00 00 00	movl	$3, %esi
10002e079:	4d 89 f0	movq	%r14, %r8
10002e07c:	31 c0	xorl	%eax, %eax
10002e07e:	e8 a6 23 ff ff	callq	0x100020429
10002e083:	48 83 c4 18	addq	$24, %rsp
10002e087:	5b	popq	%rbx
10002e088:	41 5c	popq	%r12
10002e08a:	41 5d	popq	%r13
10002e08c:	41 5e	popq	%r14
10002e08e:	41 5f	popq	%r15
10002e090:	5d	popq	%rbp
10002e091:	c3	retq
10002e092:	55	pushq	%rbp
10002e093:	48 89 e5	movq	%rsp, %rbp
10002e096:	41 57	pushq	%r15
10002e098:	41 56	pushq	%r14
10002e09a:	41 55	pushq	%r13
10002e09c:	41 54	pushq	%r12
10002e09e:	53	pushq	%rbx
10002e09f:	50	pushq	%rax
10002e0a0:	41 89 cf	movl	%ecx, %r15d
10002e0a3:	49 89 d4	movq	%rdx, %r12
10002e0a6:	41 89 f5	movl	%esi, %r13d
10002e0a9:	49 89 fe	movq	%rdi, %r14
10002e0ac:	bf 30 00 00 00	movl	$48, %edi
10002e0b1:	e8 2f f4 fd ff	callq	0x10000d4e5
10002e0b6:	48 89 c3	movq	%rax, %rbx
10002e0b9:	44 89 68 10	movl	%r13d, 16(%rax)
10002e0bd:	4c 89 e7	movq	%r12, %rdi
10002e0c0:	e8 3d 40 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10002e0c5:	48 89 43 18	movq	%rax, 24(%rbx)
10002e0c9:	44 89 7b 20	movl	%r15d, 32(%rbx)
10002e0cd:	4d 85 f6	testq	%r14, %r14
10002e0d0:	74 30	je	0x10002e102
10002e0d2:	49 8b 86 b0 00 00 00	movq	176(%r14), %rax
10002e0d9:	49 81 c6 b0 00 00 00	addq	$176, %r14
10002e0e0:	48 89 03	movq	%rax, (%rbx)
10002e0e3:	48 85 c0	testq	%rax, %rax
10002e0e6:	74 04	je	0x10002e0ec
10002e0e8:	48 89 58 08	movq	%rbx, 8(%rax)
10002e0ec:	49 89 1e	movq	%rbx, (%r14)
10002e0ef:	4c 89 73 08	movq	%r14, 8(%rbx)
10002e0f3:	48 83 c4 08	addq	$8, %rsp
10002e0f7:	5b	popq	%rbx
10002e0f8:	41 5c	popq	%r12
10002e0fa:	41 5d	popq	%r13
10002e0fc:	41 5e	popq	%r14
10002e0fe:	41 5f	popq	%r15
10002e100:	5d	popq	%rbp
10002e101:	c3	retq
10002e102:	e8 a3 28 01 00	callq	0x1000409aa
10002e107:	55	pushq	%rbp
10002e108:	48 89 e5	movq	%rsp, %rbp
10002e10b:	41 57	pushq	%r15
10002e10d:	41 56	pushq	%r14
10002e10f:	41 55	pushq	%r13
10002e111:	41 54	pushq	%r12
10002e113:	53	pushq	%rbx
10002e114:	48 83 ec 18	subq	$24, %rsp
10002e118:	49 89 f5	movq	%rsi, %r13
10002e11b:	e8 07 70 00 00	callq	0x100035127
10002e120:	48 85 c0	testq	%rax, %rax
10002e123:	0f 84 ce 00 00 00	je	0x10002e1f7
10002e129:	48 8d 35 ee 9c 01 00	leaq	105710(%rip), %rsi ## literal pool for: "com.apple.private.xpc.launchd.enable-disable-system-services"
10002e130:	48 89 c7	movq	%rax, %rdi
10002e133:	e8 f2 3e 01 00	callq	0x10004202a ## symbol stub for: _xpc_dictionary_get_array
10002e138:	48 85 c0	testq	%rax, %rax
10002e13b:	0f 84 b6 00 00 00	je	0x10002e1f7
10002e141:	49 89 c4	movq	%rax, %r12
10002e144:	48 89 c7	movq	%rax, %rdi
10002e147:	e8 7a 3f 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002e14c:	48 3b 05 85 9f 02 00	cmpq	171909(%rip), %rax ## literal pool symbol address: __xpc_type_array
10002e153:	0f 85 b3 00 00 00	jne	0x10002e20c
10002e159:	4c 89 ef	movq	%r13, %rdi
10002e15c:	e8 65 3f 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002e161:	48 3b 05 70 9f 02 00	cmpq	171888(%rip), %rax ## literal pool symbol address: __xpc_type_array
10002e168:	0f 85 9e 00 00 00	jne	0x10002e20c
10002e16e:	4c 89 e7	movq	%r12, %rdi
10002e171:	e8 d6 3d 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10002e176:	48 89 c3	movq	%rax, %rbx
10002e179:	4c 89 ef	movq	%r13, %rdi
10002e17c:	e8 cb 3d 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10002e181:	48 85 db	testq	%rbx, %rbx
10002e184:	74 71	je	0x10002e1f7
10002e186:	41 b7 01	movb	$1, %r15b
10002e189:	48 85 c0	testq	%rax, %rax
10002e18c:	74 6c	je	0x10002e1fa
10002e18e:	48 ff cb	decq	%rbx
10002e191:	31 f6	xorl	%esi, %esi
10002e193:	4c 89 6d c8	movq	%r13, -56(%rbp)
10002e197:	48 89 45 d0	movq	%rax, -48(%rbp)
10002e19b:	4c 89 ef	movq	%r13, %rdi
10002e19e:	48 89 75 c0	movq	%rsi, -64(%rbp)
10002e1a2:	e8 ab 3d 01 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
10002e1a7:	48 85 c0	testq	%rax, %rax
10002e1aa:	74 4b	je	0x10002e1f7
10002e1ac:	49 89 c6	movq	%rax, %r14
10002e1af:	45 31 ed	xorl	%r13d, %r13d
10002e1b2:	4c 89 e7	movq	%r12, %rdi
10002e1b5:	4c 89 ee	movq	%r13, %rsi
10002e1b8:	e8 95 3d 01 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
10002e1bd:	48 85 c0	testq	%rax, %rax
10002e1c0:	74 35	je	0x10002e1f7
10002e1c2:	4c 89 f7	movq	%r14, %rdi
10002e1c5:	48 89 c6	movq	%rax, %rsi
10002e1c8:	e8 5f 3c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002e1cd:	85 c0	testl	%eax, %eax
10002e1cf:	74 0c	je	0x10002e1dd
10002e1d1:	49 8d 4d 01	leaq	1(%r13), %rcx
10002e1d5:	4c 39 eb	cmpq	%r13, %rbx
10002e1d8:	49 89 cd	movq	%rcx, %r13
10002e1db:	75 d5	jne	0x10002e1b2
10002e1dd:	85 c0	testl	%eax, %eax
10002e1df:	75 16	jne	0x10002e1f7
10002e1e1:	48 8b 75 c0	movq	-64(%rbp), %rsi
10002e1e5:	48 ff c6	incq	%rsi
10002e1e8:	48 8b 45 d0	movq	-48(%rbp), %rax
10002e1ec:	48 39 c6	cmpq	%rax, %rsi
10002e1ef:	4c 8b 6d c8	movq	-56(%rbp), %r13
10002e1f3:	75 a6	jne	0x10002e19b
10002e1f5:	eb 03	jmp	0x10002e1fa
10002e1f7:	45 31 ff	xorl	%r15d, %r15d
10002e1fa:	44 89 f8	movl	%r15d, %eax
10002e1fd:	48 83 c4 18	addq	$24, %rsp
10002e201:	5b	popq	%rbx
10002e202:	41 5c	popq	%r12
10002e204:	41 5d	popq	%r13
10002e206:	41 5e	popq	%r14
10002e208:	41 5f	popq	%r15
10002e20a:	5d	popq	%rbp
10002e20b:	c3	retq
10002e20c:	48 8d 3d d8 0d 02 00	leaq	134616(%rip), %rdi ## literal pool for: "Given object not of required type."
10002e213:	e8 9c 6f 00 00	callq	0x1000351b4
10002e218:	55	pushq	%rbp
10002e219:	48 89 e5	movq	%rsp, %rbp
10002e21c:	41 57	pushq	%r15
10002e21e:	41 56	pushq	%r14
10002e220:	41 55	pushq	%r13
10002e222:	41 54	pushq	%r12
10002e224:	53	pushq	%rbx
10002e225:	48 83 ec 18	subq	$24, %rsp
10002e229:	49 89 f4	movq	%rsi, %r12
10002e22c:	49 89 ff	movq	%rdi, %r15
10002e22f:	31 ff	xorl	%edi, %edi
10002e231:	31 f6	xorl	%esi, %esi
10002e233:	31 d2	xorl	%edx, %edx
10002e235:	e8 d8 3d 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10002e23a:	49 89 c6	movq	%rax, %r14
10002e23d:	49 8b 9f 88 00 00 00	movq	136(%r15), %rbx
10002e244:	48 85 db	testq	%rbx, %rbx
10002e247:	74 17	je	0x10002e260
10002e249:	48 8d b3 90 00 00 00	leaq	144(%rbx), %rsi
10002e250:	4c 89 f7	movq	%r14, %rdi
10002e253:	31 d2	xorl	%edx, %edx
10002e255:	e8 36 3e 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
10002e25a:	48 8b 5b 08	movq	8(%rbx), %rbx
10002e25e:	eb e4	jmp	0x10002e244
10002e260:	49 8b 9f 90 00 00 00	movq	144(%r15), %rbx
10002e267:	48 85 db	testq	%rbx, %rbx
10002e26a:	74 17	je	0x10002e283
10002e26c:	48 8d b3 90 00 00 00	leaq	144(%rbx), %rsi
10002e273:	4c 89 f7	movq	%r14, %rdi
10002e276:	31 d2	xorl	%edx, %edx
10002e278:	e8 13 3e 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
10002e27d:	48 8b 5b 08	movq	8(%rbx), %rbx
10002e281:	eb e4	jmp	0x10002e267
10002e283:	4c 89 f7	movq	%r14, %rdi
10002e286:	e8 b1 3d 01 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10002e28b:	48 85 c0	testq	%rax, %rax
10002e28e:	74 12	je	0x10002e2a2
10002e290:	48 8d 35 2f 8d 01 00	leaq	101679(%rip), %rsi ## literal pool for: "MachServices"
10002e297:	4c 89 e7	movq	%r12, %rdi
10002e29a:	4c 89 f2	movq	%r14, %rdx
10002e29d:	e8 0c 3e 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002e2a2:	4c 89 f7	movq	%r14, %rdi
10002e2a5:	e8 52 3e 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e2aa:	31 ff	xorl	%edi, %edi
10002e2ac:	31 f6	xorl	%esi, %esi
10002e2ae:	31 d2	xorl	%edx, %edx
10002e2b0:	e8 5d 3d 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10002e2b5:	49 89 c6	movq	%rax, %r14
10002e2b8:	49 8b 9f 98 00 00 00	movq	152(%r15), %rbx
10002e2bf:	48 85 db	testq	%rbx, %rbx
10002e2c2:	74 17	je	0x10002e2db
10002e2c4:	48 8d b3 90 00 00 00	leaq	144(%rbx), %rsi
10002e2cb:	4c 89 f7	movq	%r14, %rdi
10002e2ce:	31 d2	xorl	%edx, %edx
10002e2d0:	e8 bb 3d 01 00	callq	0x100042090 ## symbol stub for: _xpc_dictionary_set_mach_send
10002e2d5:	48 8b 5b 08	movq	8(%rbx), %rbx
10002e2d9:	eb e4	jmp	0x10002e2bf
10002e2db:	4c 89 f7	movq	%r14, %rdi
10002e2de:	e8 59 3d 01 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10002e2e3:	48 85 c0	testq	%rax, %rax
10002e2e6:	74 12	je	0x10002e2fa
10002e2e8:	48 8d 35 65 0e 02 00	leaq	134757(%rip), %rsi ## literal pool for: "PerJobMachServices"
10002e2ef:	4c 89 e7	movq	%r12, %rdi
10002e2f2:	4c 89 f2	movq	%r14, %rdx
10002e2f5:	e8 b4 3d 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002e2fa:	4c 89 65 c0	movq	%r12, -64(%rbp)
10002e2fe:	4c 89 f7	movq	%r14, %rdi
10002e301:	e8 f6 3d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e306:	31 ff	xorl	%edi, %edi
10002e308:	31 f6	xorl	%esi, %esi
10002e30a:	31 d2	xorl	%edx, %edx
10002e30c:	e8 01 3d 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10002e311:	49 89 c4	movq	%rax, %r12
10002e314:	49 8b 9f b0 00 00 00	movq	176(%r15), %rbx
10002e31b:	48 85 db	testq	%rbx, %rbx
10002e31e:	74 73	je	0x10002e393
10002e320:	45 31 ff	xorl	%r15d, %r15d
10002e323:	4c 89 7d c8	movq	%r15, -56(%rbp)
10002e327:	4c 89 7d d0	movq	%r15, -48(%rbp)
10002e32b:	31 ff	xorl	%edi, %edi
10002e32d:	31 f6	xorl	%esi, %esi
10002e32f:	e8 0c 3c 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10002e334:	49 89 c6	movq	%rax, %r14
10002e337:	48 89 df	movq	%rbx, %rdi
10002e33a:	48 8d 75 c8	leaq	-56(%rbp), %rsi
10002e33e:	48 8d 55 d0	leaq	-48(%rbp), %rdx
10002e342:	e8 d3 6a fe ff	callq	0x100014e1a
10002e347:	4c 39 7d d0	cmpq	%r15, -48(%rbp)
10002e34b:	74 23	je	0x10002e370
10002e34d:	45 31 ed	xorl	%r13d, %r13d
10002e350:	48 8b 45 c8	movq	-56(%rbp), %rax
10002e354:	42 8b 14 a8	movl	(%rax,%r13,4), %edx
10002e358:	4c 89 f7	movq	%r14, %rdi
10002e35b:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002e362:	e8 fd 3b 01 00	callq	0x100041f64 ## symbol stub for: _xpc_array_set_fd
10002e367:	49 ff c5	incq	%r13
10002e36a:	4c 3b 6d d0	cmpq	-48(%rbp), %r13
10002e36e:	72 e0	jb	0x10002e350
10002e370:	48 8d b3 c8 00 00 00	leaq	200(%rbx), %rsi
10002e377:	4c 89 e7	movq	%r12, %rdi
10002e37a:	4c 89 f2	movq	%r14, %rdx
10002e37d:	e8 2c 3d 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002e382:	4c 89 f7	movq	%r14, %rdi
10002e385:	e8 72 3d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e38a:	48 8b 5b 08	movq	8(%rbx), %rbx
10002e38e:	48 85 db	testq	%rbx, %rbx
10002e391:	75 90	jne	0x10002e323
10002e393:	4c 89 e7	movq	%r12, %rdi
10002e396:	e8 a1 3c 01 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10002e39b:	48 85 c0	testq	%rax, %rax
10002e39e:	74 13	je	0x10002e3b3
10002e3a0:	48 8d 35 f1 8b 01 00	leaq	101361(%rip), %rsi ## literal pool for: "Sockets"
10002e3a7:	48 8b 7d c0	movq	-64(%rbp), %rdi
10002e3ab:	4c 89 e2	movq	%r12, %rdx
10002e3ae:	e8 fb 3c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002e3b3:	4c 89 e7	movq	%r12, %rdi
10002e3b6:	e8 41 3d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e3bb:	48 83 c4 18	addq	$24, %rsp
10002e3bf:	5b	popq	%rbx
10002e3c0:	41 5c	popq	%r12
10002e3c2:	41 5d	popq	%r13
10002e3c4:	41 5e	popq	%r14
10002e3c6:	41 5f	popq	%r15
10002e3c8:	5d	popq	%rbp
10002e3c9:	c3	retq
10002e3ca:	55	pushq	%rbp
10002e3cb:	48 89 e5	movq	%rsp, %rbp
10002e3ce:	41 57	pushq	%r15
10002e3d0:	41 56	pushq	%r14
10002e3d2:	41 54	pushq	%r12
10002e3d4:	53	pushq	%rbx
10002e3d5:	48 83 ec 10	subq	$16, %rsp
10002e3d9:	49 89 f7	movq	%rsi, %r15
10002e3dc:	49 89 fe	movq	%rdi, %r14
10002e3df:	48 8b 1a	movq	(%rdx), %rbx
10002e3e2:	4c 8b 62 08	movq	8(%rdx), %r12
10002e3e6:	e8 91 47 fe ff	callq	0x100012b7c
10002e3eb:	84 c0	testb	%al, %al
10002e3ed:	74 5f	je	0x10002e44e
10002e3ef:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
10002e3f6:	ba 7c 00 00 00	movl	$124, %edx
10002e3fb:	a9 03 02 00 00	testl	$515, %eax
10002e400:	75 2c	jne	0x10002e42e
10002e402:	48 8b 43 60	movq	96(%rbx), %rax
10002e406:	48 8b 4b 68	movq	104(%rbx), %rcx
10002e40a:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002e412:	ba 04 00 00 00	movl	$4, %edx
10002e417:	48 89 df	movq	%rbx, %rdi
10002e41a:	be 03 00 00 00	movl	$3, %esi
10002e41f:	4d 89 e0	movq	%r12, %r8
10002e422:	45 31 c9	xorl	%r9d, %r9d
10002e425:	ff 50 68	callq	*104(%rax)
10002e428:	89 c2	movl	%eax, %edx
10002e42a:	85 c0	testl	%eax, %eax
10002e42c:	74 20	je	0x10002e44e
10002e42e:	48 8d 0d 51 0d 02 00	leaq	134481(%rip), %rcx ## literal pool for: "set dyld environment variable"
10002e435:	48 89 df	movq	%rbx, %rdi
10002e438:	4c 89 e6	movq	%r12, %rsi
10002e43b:	31 c0	xorl	%eax, %eax
10002e43d:	48 83 c4 10	addq	$16, %rsp
10002e441:	5b	popq	%rbx
10002e442:	41 5c	popq	%r12
10002e444:	41 5e	popq	%r14
10002e446:	41 5f	popq	%r15
10002e448:	5d	popq	%rbp
10002e449:	e9 26 59 ff ff	jmp	0x100023d74
10002e44e:	4c 89 ff	movq	%r15, %rdi
10002e451:	e8 70 3c 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002e456:	48 3b 05 cb 9c 02 00	cmpq	171211(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002e45d:	74 16	je	0x10002e475
10002e45f:	48 3b 05 ba 9c 02 00	cmpq	171194(%rip), %rax ## literal pool symbol address: __xpc_type_null
10002e466:	74 20	je	0x10002e488
10002e468:	48 83 c4 10	addq	$16, %rsp
10002e46c:	5b	popq	%rbx
10002e46d:	41 5c	popq	%r12
10002e46f:	41 5e	popq	%r14
10002e471:	41 5f	popq	%r15
10002e473:	5d	popq	%rbp
10002e474:	c3	retq
10002e475:	4c 89 ff	movq	%r15, %rdi
10002e478:	e8 a9 3c 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002e47d:	48 89 df	movq	%rbx, %rdi
10002e480:	4c 89 f6	movq	%r14, %rsi
10002e483:	48 89 c2	movq	%rax, %rdx
10002e486:	eb 08	jmp	0x10002e490
10002e488:	48 89 df	movq	%rbx, %rdi
10002e48b:	4c 89 f6	movq	%r14, %rsi
10002e48e:	31 d2	xorl	%edx, %edx
10002e490:	48 83 c4 10	addq	$16, %rsp
10002e494:	5b	popq	%rbx
10002e495:	41 5c	popq	%r12
10002e497:	41 5e	popq	%r14
10002e499:	41 5f	popq	%r15
10002e49b:	5d	popq	%rbp
10002e49c:	e9 00 00 00 00	jmp	0x10002e4a1
10002e4a1:	55	pushq	%rbp
10002e4a2:	48 89 e5	movq	%rsp, %rbp
10002e4a5:	41 57	pushq	%r15
10002e4a7:	41 56	pushq	%r14
10002e4a9:	41 54	pushq	%r12
10002e4ab:	53	pushq	%rbx
10002e4ac:	48 83 ec 10	subq	$16, %rsp
10002e4b0:	49 89 d7	movq	%rdx, %r15
10002e4b3:	49 89 f4	movq	%rsi, %r12
10002e4b6:	49 89 fe	movq	%rdi, %r14
10002e4b9:	48 8b 5f 50	movq	80(%rdi), %rbx
10002e4bd:	48 85 db	testq	%rbx, %rbx
10002e4c0:	74 40	je	0x10002e502
10002e4c2:	48 89 df	movq	%rbx, %rdi
10002e4c5:	4c 89 e6	movq	%r12, %rsi
10002e4c8:	e8 37 46 fe ff	callq	0x100012b04
10002e4cd:	48 8b 0b	movq	(%rbx), %rcx
10002e4d0:	84 c0	testb	%al, %al
10002e4d2:	75 0a	jne	0x10002e4de
10002e4d4:	48 89 cb	movq	%rcx, %rbx
10002e4d7:	48 85 c9	testq	%rcx, %rcx
10002e4da:	75 e6	jne	0x10002e4c2
10002e4dc:	eb 24	jmp	0x10002e502
10002e4de:	48 85 c9	testq	%rcx, %rcx
10002e4e1:	74 08	je	0x10002e4eb
10002e4e3:	48 8b 43 08	movq	8(%rbx), %rax
10002e4e7:	48 89 41 08	movq	%rax, 8(%rcx)
10002e4eb:	48 8b 43 08	movq	8(%rbx), %rax
10002e4ef:	48 89 08	movq	%rcx, (%rax)
10002e4f2:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10002e4f6:	f3 0f 7f 03	movdqu	%xmm0, (%rbx)
10002e4fa:	48 89 df	movq	%rbx, %rdi
10002e4fd:	e8 70 46 fe ff	callq	0x100012b72
10002e502:	4d 85 ff	testq	%r15, %r15
10002e505:	74 70	je	0x10002e577
10002e507:	48 8d 55 d0	leaq	-48(%rbp), %rdx
10002e50b:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
10002e512:	4c 8d 45 df	leaq	-33(%rbp), %r8
10002e516:	41 c6 00 00	movb	$0, (%r8)
10002e51a:	4c 89 e7	movq	%r12, %rdi
10002e51d:	4c 89 fe	movq	%r15, %rsi
10002e520:	31 c9	xorl	%ecx, %ecx
10002e522:	e8 59 44 fe ff	callq	0x100012980
10002e527:	48 85 c0	testq	%rax, %rax
10002e52a:	74 1c	je	0x10002e548
10002e52c:	49 83 c6 50	addq	$80, %r14
10002e530:	49 8b 0e	movq	(%r14), %rcx
10002e533:	48 89 08	movq	%rcx, (%rax)
10002e536:	48 85 c9	testq	%rcx, %rcx
10002e539:	74 04	je	0x10002e53f
10002e53b:	48 89 41 08	movq	%rax, 8(%rcx)
10002e53f:	49 89 06	movq	%rax, (%r14)
10002e542:	4c 89 70 08	movq	%r14, 8(%rax)
10002e546:	eb 2f	jmp	0x10002e577
10002e548:	80 7d df 00	cmpb	$0, -33(%rbp)
10002e54c:	48 8d 05 7b 09 02 00	leaq	133499(%rip), %rax ## literal pool for: "set"
10002e553:	48 8d 0d 6d 09 02 00	leaq	133485(%rip), %rcx ## literal pool for: "change"
10002e55a:	48 0f 44 c8	cmoveq	%rax, %rcx
10002e55e:	48 8d 15 3f 0c 02 00	leaq	134207(%rip), %rdx ## literal pool for: "Service tried to %s global environment variable with reserved name: %s"
10002e565:	4c 89 f7	movq	%r14, %rdi
10002e568:	be 03 00 00 00	movl	$3, %esi
10002e56d:	4d 89 e0	movq	%r12, %r8
10002e570:	31 c0	xorl	%eax, %eax
10002e572:	e8 b2 1e ff ff	callq	0x100020429
10002e577:	48 83 c4 10	addq	$16, %rsp
10002e57b:	5b	popq	%rbx
10002e57c:	41 5c	popq	%r12
10002e57e:	41 5e	popq	%r14
10002e580:	41 5f	popq	%r15
10002e582:	5d	popq	%rbp
10002e583:	c3	retq
10002e584:	55	pushq	%rbp
10002e585:	48 89 e5	movq	%rsp, %rbp
10002e588:	53	pushq	%rbx
10002e589:	50	pushq	%rax
10002e58a:	48 8d 05 0f 3c 03 00	leaq	211983(%rip), %rax
10002e591:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002e595:	75 2c	jne	0x10002e5c3
10002e597:	48 89 fb	movq	%rdi, %rbx
10002e59a:	8b bf 90 00 00 00	movl	144(%rdi), %edi
10002e5a0:	85 ff	testl	%edi, %edi
10002e5a2:	74 18	je	0x10002e5bc
10002e5a4:	31 f6	xorl	%esi, %esi
10002e5a6:	48 89 da	movq	%rbx, %rdx
10002e5a9:	e8 a0 b7 fd ff	callq	0x100009d4e
10002e5ae:	85 c0	testl	%eax, %eax
10002e5b0:	75 16	jne	0x10002e5c8
10002e5b2:	c7 83 90 00 00 00 00 00 00 00	movl	$0, 144(%rbx)
10002e5bc:	48 83 c4 08	addq	$8, %rsp
10002e5c0:	5b	popq	%rbx
10002e5c1:	5d	popq	%rbp
10002e5c2:	c3	retq
10002e5c3:	e8 0d 24 01 00	callq	0x1000409d5
10002e5c8:	89 c7	movl	%eax, %edi
10002e5ca:	e8 f0 23 01 00	callq	0x1000409bf
10002e5cf:	55	pushq	%rbp
10002e5d0:	48 89 e5	movq	%rsp, %rbp
10002e5d3:	41 56	pushq	%r14
10002e5d5:	53	pushq	%rbx
10002e5d6:	49 89 f6	movq	%rsi, %r14
10002e5d9:	8b 77 20	movl	32(%rdi), %esi
10002e5dc:	85 f6	testl	%esi, %esi
10002e5de:	74 0c	je	0x10002e5ec
10002e5e0:	4c 89 f7	movq	%r14, %rdi
10002e5e3:	5b	popq	%rbx
10002e5e4:	41 5e	popq	%r14
10002e5e6:	5d	popq	%rbp
10002e5e7:	e9 1a 00 00 00	jmp	0x10002e606
10002e5ec:	31 db	xorl	%ebx, %ebx
10002e5ee:	4c 89 f7	movq	%r14, %rdi
10002e5f1:	89 de	movl	%ebx, %esi
10002e5f3:	e8 0e 00 00 00	callq	0x10002e606
10002e5f8:	48 ff c3	incq	%rbx
10002e5fb:	48 83 fb 09	cmpq	$9, %rbx
10002e5ff:	75 ed	jne	0x10002e5ee
10002e601:	5b	popq	%rbx
10002e602:	41 5e	popq	%r14
10002e604:	5d	popq	%rbp
10002e605:	c3	retq
10002e606:	55	pushq	%rbp
10002e607:	48 89 e5	movq	%rsp, %rbp
10002e60a:	41 56	pushq	%r14
10002e60c:	53	pushq	%rbx
10002e60d:	48 83 ec 60	subq	$96, %rsp
10002e611:	89 f3	movl	%esi, %ebx
10002e613:	49 89 fe	movq	%rdi, %r14
10002e616:	48 8b 05 0b 9a 02 00	movq	170507(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002e61d:	48 8b 00	movq	(%rax), %rax
10002e620:	48 89 45 e8	movq	%rax, -24(%rbp)
10002e624:	48 c7 c0 fe ff ff ff	movq	$-2, %rax
10002e62b:	48 8d 55 90	leaq	-112(%rbp), %rdx
10002e62f:	48 89 02	movq	%rax, (%rdx)
10002e632:	48 8d 75 98	leaq	-104(%rbp), %rsi
10002e636:	48 89 06	movq	%rax, (%rsi)
10002e639:	89 df	movl	%ebx, %edi
10002e63b:	e8 a3 66 00 00	callq	0x100034ce3
10002e640:	89 df	movl	%ebx, %edi
10002e642:	e8 53 68 00 00	callq	0x100034e9a
10002e647:	48 85 c0	testq	%rax, %rax
10002e64a:	0f 84 b0 00 00 00	je	0x10002e700
10002e650:	48 89 c3	movq	%rax, %rbx
10002e653:	0f 28 05 26 4c 01 00	movaps	85030(%rip), %xmm0
10002e65a:	0f 29 45 d0	movaps	%xmm0, -48(%rbp)
10002e65e:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10002e662:	48 8b 4d 90	movq	-112(%rbp), %rcx
10002e666:	48 83 f9 ff	cmpq	$-1, %rcx
10002e66a:	74 20	je	0x10002e68c
10002e66c:	48 8d 15 ca a3 01 00	leaq	107466(%rip), %rdx ## literal pool for: "%lld"
10002e673:	48 8d 7d c0	leaq	-64(%rbp), %rdi
10002e677:	be 20 00 00 00	movl	$32, %esi
10002e67c:	31 c0	xorl	%eax, %eax
10002e67e:	e8 7f 37 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
10002e683:	0f 28 05 f6 4b 01 00	movaps	84982(%rip), %xmm0
10002e68a:	eb 14	jmp	0x10002e6a0
10002e68c:	48 b8 75 6e 6c 69 6d 69 74 65	movabsq	$7310584013770223221, %rax
10002e696:	48 89 45 c0	movq	%rax, -64(%rbp)
10002e69a:	66 c7 45 c8 64 00	movw	$100, -56(%rbp)
10002e6a0:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10002e6a4:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10002e6a8:	48 8b 4d 98	movq	-104(%rbp), %rcx
10002e6ac:	48 83 f9 ff	cmpq	$-1, %rcx
10002e6b0:	74 19	je	0x10002e6cb
10002e6b2:	48 8d 15 84 a3 01 00	leaq	107396(%rip), %rdx ## literal pool for: "%lld"
10002e6b9:	48 8d 7d a0	leaq	-96(%rbp), %rdi
10002e6bd:	be 20 00 00 00	movl	$32, %esi
10002e6c2:	31 c0	xorl	%eax, %eax
10002e6c4:	e8 39 37 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
10002e6c9:	eb 14	jmp	0x10002e6df
10002e6cb:	48 b8 75 6e 6c 69 6d 69 74 65	movabsq	$7310584013770223221, %rax
10002e6d5:	48 89 45 a0	movq	%rax, -96(%rbp)
10002e6d9:	66 c7 45 a8 64 00	movw	$100, -88(%rbp)
10002e6df:	48 8d 15 f9 0e 02 00	leaq	134905(%rip), %rdx ## literal pool for: "%-12s%-15s%-15s"
10002e6e6:	4c 8d 45 a0	leaq	-96(%rbp), %r8
10002e6ea:	4c 8d 4d c0	leaq	-64(%rbp), %r9
10002e6ee:	be 01 00 00 00	movl	$1, %esi
10002e6f3:	4c 89 f7	movq	%r14, %rdi
10002e6f6:	48 89 d9	movq	%rbx, %rcx
10002e6f9:	31 c0	xorl	%eax, %eax
10002e6fb:	e8 72 a5 00 00	callq	0x100038c72
10002e700:	48 8b 05 21 99 02 00	movq	170273(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002e707:	48 8b 00	movq	(%rax), %rax
10002e70a:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10002e70e:	75 09	jne	0x10002e719
10002e710:	48 83 c4 60	addq	$96, %rsp
10002e714:	5b	popq	%rbx
10002e715:	41 5e	popq	%r14
10002e717:	5d	popq	%rbp
10002e718:	c3	retq
10002e719:	e8 54 30 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002e71e:	55	pushq	%rbp
10002e71f:	48 89 e5	movq	%rsp, %rbp
10002e722:	41 57	pushq	%r15
10002e724:	41 56	pushq	%r14
10002e726:	41 54	pushq	%r12
10002e728:	53	pushq	%rbx
10002e729:	49 89 f6	movq	%rsi, %r14
10002e72c:	49 89 ff	movq	%rdi, %r15
10002e72f:	48 8b 7f 20	movq	32(%rdi), %rdi
10002e733:	48 8d 35 33 b7 01 00	leaq	112435(%rip), %rsi ## literal pool for: "version"
10002e73a:	e8 f7 38 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10002e73f:	89 c3	movl	%eax, %ebx
10002e741:	49 8b 7f 20	movq	32(%r15), %rdi
10002e745:	48 8d 35 b5 0e 02 00	leaq	134837(%rip), %rsi ## literal pool for: "variant"
10002e74c:	e8 e5 38 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10002e751:	41 89 c4	movl	%eax, %r12d
10002e754:	49 8b 7f 20	movq	32(%r15), %rdi
10002e758:	48 8d 35 48 60 01 00	leaq	90184(%rip), %rsi ## literal pool for: "disabled"
10002e75f:	e8 d2 38 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10002e764:	84 db	testb	%bl, %bl
10002e766:	74 09	je	0x10002e771
10002e768:	48 8d 05 29 3f 03 00	leaq	212777(%rip), %rax
10002e76f:	eb 0c	jmp	0x10002e77d
10002e771:	45 84 e4	testb	%r12b, %r12b
10002e774:	74 25	je	0x10002e79b
10002e776:	48 8d 05 23 3f 03 00	leaq	212771(%rip), %rax
10002e77d:	48 8b 08	movq	(%rax), %rcx
10002e780:	48 8d 15 8f 8e 01 00	leaq	102031(%rip), %rdx ## literal pool for: "%s"
10002e787:	4c 89 f7	movq	%r14, %rdi
10002e78a:	31 f6	xorl	%esi, %esi
10002e78c:	31 c0	xorl	%eax, %eax
10002e78e:	5b	popq	%rbx
10002e78f:	41 5c	popq	%r12
10002e791:	41 5e	popq	%r14
10002e793:	41 5f	popq	%r15
10002e795:	5d	popq	%rbp
10002e796:	e9 d7 a4 00 00	jmp	0x100038c72
10002e79b:	84 c0	testb	%al, %al
10002e79d:	74 55	je	0x10002e7f4
10002e79f:	48 8d 15 63 0e 02 00	leaq	134755(%rip), %rdx ## literal pool for: "disabled services = "
10002e7a6:	4c 89 f7	movq	%r14, %rdi
10002e7a9:	31 f6	xorl	%esi, %esi
10002e7ab:	31 c0	xorl	%eax, %eax
10002e7ad:	e8 d6 a3 00 00	callq	0x100038b88
10002e7b2:	49 8b 47 28	movq	40(%r15), %rax
10002e7b6:	48 8b b8 98 03 00 00	movq	920(%rax), %rdi
10002e7bd:	48 85 ff	testq	%rdi, %rdi
10002e7c0:	74 46	je	0x10002e808
10002e7c2:	e8 0f 38 01 00	callq	0x100041fd6 ## symbol stub for: _xpc_copy
10002e7c7:	48 89 c3	movq	%rax, %rbx
10002e7ca:	48 8d 35 fe 61 01 00	leaq	90622(%rip), %rsi ## literal pool for: "_dirty"
10002e7d1:	48 89 c7	movq	%rax, %rdi
10002e7d4:	31 d2	xorl	%edx, %edx
10002e7d6:	e8 d3 38 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002e7db:	4c 89 f7	movq	%r14, %rdi
10002e7de:	31 f6	xorl	%esi, %esi
10002e7e0:	31 d2	xorl	%edx, %edx
10002e7e2:	48 89 d9	movq	%rbx, %rcx
10002e7e5:	e8 4f 0c fe ff	callq	0x10000f439
10002e7ea:	48 89 df	movq	%rbx, %rdi
10002e7ed:	e8 0a 39 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e7f2:	eb 27	jmp	0x10002e81b
10002e7f4:	49 8b 7f 28	movq	40(%r15), %rdi
10002e7f8:	4c 89 f6	movq	%r14, %rsi
10002e7fb:	5b	popq	%rbx
10002e7fc:	41 5c	popq	%r12
10002e7fe:	41 5e	popq	%r14
10002e800:	41 5f	popq	%r15
10002e802:	5d	popq	%rbp
10002e803:	e9 01 41 ff ff	jmp	0x100022909
10002e808:	48 8d 15 0f 0e 02 00	leaq	134671(%rip), %rdx ## literal pool for: "(no disabled services)"
10002e80f:	4c 89 f7	movq	%r14, %rdi
10002e812:	31 f6	xorl	%esi, %esi
10002e814:	31 c0	xorl	%eax, %eax
10002e816:	e8 6d a3 00 00	callq	0x100038b88
10002e81b:	49 8b 47 28	movq	40(%r15), %rax
10002e81f:	48 83 b8 a0 03 00 00 00	cmpq	$0, 928(%rax)
10002e827:	74 32	je	0x10002e85b
10002e829:	48 8d 15 05 0e 02 00	leaq	134661(%rip), %rdx ## literal pool for: "login item associations = "
10002e830:	4c 89 f7	movq	%r14, %rdi
10002e833:	31 f6	xorl	%esi, %esi
10002e835:	31 c0	xorl	%eax, %eax
10002e837:	e8 4c a3 00 00	callq	0x100038b88
10002e83c:	49 8b 47 28	movq	40(%r15), %rax
10002e840:	48 8b 88 a0 03 00 00	movq	928(%rax), %rcx
10002e847:	4c 89 f7	movq	%r14, %rdi
10002e84a:	31 f6	xorl	%esi, %esi
10002e84c:	31 d2	xorl	%edx, %edx
10002e84e:	5b	popq	%rbx
10002e84f:	41 5c	popq	%r12
10002e851:	41 5e	popq	%r14
10002e853:	41 5f	popq	%r15
10002e855:	5d	popq	%rbp
10002e856:	e9 de 0b fe ff	jmp	0x10000f439
10002e85b:	5b	popq	%rbx
10002e85c:	41 5c	popq	%r12
10002e85e:	41 5e	popq	%r14
10002e860:	41 5f	popq	%r15
10002e862:	5d	popq	%rbp
10002e863:	c3	retq
10002e864:	55	pushq	%rbp
10002e865:	48 89 e5	movq	%rsp, %rbp
10002e868:	41 57	pushq	%r15
10002e86a:	41 56	pushq	%r14
10002e86c:	41 54	pushq	%r12
10002e86e:	53	pushq	%rbx
10002e86f:	49 89 fe	movq	%rdi, %r14
10002e872:	85 d2	testl	%edx, %edx
10002e874:	74 35	je	0x10002e8ab
10002e876:	89 d3	movl	%edx, %ebx
10002e878:	83 fa 79	cmpl	$121, %edx
10002e87b:	74 2e	je	0x10002e8ab
10002e87d:	4d 8b 7e 20	movq	32(%r14), %r15
10002e881:	4d 8b 66 28	movq	40(%r14), %r12
10002e885:	89 df	movl	%ebx, %edi
10002e887:	e8 82 38 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002e88c:	48 8d 15 c8 0d 02 00	leaq	134600(%rip), %rdx ## literal pool for: "failed to add extension %s: %d - %s"
10002e893:	4c 89 ff	movq	%r15, %rdi
10002e896:	be 05 00 00 00	movl	$5, %esi
10002e89b:	4c 89 e1	movq	%r12, %rcx
10002e89e:	41 89 d8	movl	%ebx, %r8d
10002e8a1:	49 89 c1	movq	%rax, %r9
10002e8a4:	31 c0	xorl	%eax, %eax
10002e8a6:	e8 7e 1b ff ff	callq	0x100020429
10002e8ab:	49 8b 7e 30	movq	48(%r14), %rdi
10002e8af:	e8 3c 38 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10002e8b4:	a9 df ff ff ff	testl	$4294967263, %eax
10002e8b9:	75 1b	jne	0x10002e8d6
10002e8bb:	49 8b 7e 30	movq	48(%r14), %rdi
10002e8bf:	e8 38 38 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e8c4:	49 8b 7e 28	movq	40(%r14), %rdi
10002e8c8:	e8 63 31 01 00	callq	0x100041a30 ## symbol stub for: _free
10002e8cd:	5b	popq	%rbx
10002e8ce:	41 5c	popq	%r12
10002e8d0:	41 5e	popq	%r14
10002e8d2:	41 5f	popq	%r15
10002e8d4:	5d	popq	%rbp
10002e8d5:	c3	retq
10002e8d6:	48 63 d0	movslq	%eax, %rdx
10002e8d9:	49 8b 76 20	movq	32(%r14), %rsi
10002e8dd:	48 8d 3d 24 1b ff ff	leaq	-58588(%rip), %rdi
10002e8e4:	e8 bf 2e 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002e8e9:	eb d0	jmp	0x10002e8bb
10002e8eb:	55	pushq	%rbp
10002e8ec:	48 89 e5	movq	%rsp, %rbp
10002e8ef:	41 57	pushq	%r15
10002e8f1:	41 56	pushq	%r14
10002e8f3:	41 54	pushq	%r12
10002e8f5:	53	pushq	%rbx
10002e8f6:	48 89 fb	movq	%rdi, %rbx
10002e8f9:	4c 8b 27	movq	(%rdi), %r12
10002e8fc:	4c 8b 7f 08	movq	8(%rdi), %r15
10002e900:	4c 8b 77 10	movq	16(%rdi), %r14
10002e904:	48 8d 15 b5 14 02 00	leaq	136373(%rip), %rdx ## literal pool for: "extension removal request finished, sending reply"
10002e90b:	4c 89 e7	movq	%r12, %rdi
10002e90e:	be 05 00 00 00	movl	$5, %esi
10002e913:	31 c0	xorl	%eax, %eax
10002e915:	e8 0f 1b ff ff	callq	0x100020429
10002e91a:	4c 89 f7	movq	%r14, %rdi
10002e91d:	e8 ce 37 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10002e922:	a9 df ff ff ff	testl	$4294967263, %eax
10002e927:	75 21	jne	0x10002e94a
10002e929:	4c 89 ff	movq	%r15, %rdi
10002e92c:	e8 27 30 01 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10002e931:	4c 89 f7	movq	%r14, %rdi
10002e934:	e8 c3 37 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002e939:	48 89 df	movq	%rbx, %rdi
10002e93c:	e8 eb 3f fe ff	callq	0x10001292c
10002e941:	5b	popq	%rbx
10002e942:	41 5c	popq	%r12
10002e944:	41 5e	popq	%r14
10002e946:	41 5f	popq	%r15
10002e948:	5d	popq	%rbp
10002e949:	c3	retq
10002e94a:	48 63 d0	movslq	%eax, %rdx
10002e94d:	48 8d 3d b4 1a ff ff	leaq	-58700(%rip), %rdi
10002e954:	4c 89 e6	movq	%r12, %rsi
10002e957:	e8 4c 2e 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002e95c:	eb cb	jmp	0x10002e929
10002e95e:	55	pushq	%rbp
10002e95f:	48 89 e5	movq	%rsp, %rbp
10002e962:	53	pushq	%rbx
10002e963:	50	pushq	%rax
10002e964:	48 89 fb	movq	%rdi, %rbx
10002e967:	e8 9e 2f 01 00	callq	0x10004190a ## symbol stub for: _dispatch_group_leave
10002e96c:	48 89 df	movq	%rbx, %rdi
10002e96f:	48 83 c4 08	addq	$8, %rsp
10002e973:	5b	popq	%rbx
10002e974:	5d	popq	%rbp
10002e975:	e9 de 2f 01 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10002e97a:	55	pushq	%rbp
10002e97b:	48 89 e5	movq	%rsp, %rbp
10002e97e:	48 8b 7f 20	movq	32(%rdi), %rdi
10002e982:	5d	popq	%rbp
10002e983:	e9 19 3f ff ff	jmp	0x1000228a1
10002e988:	55	pushq	%rbp
10002e989:	48 89 e5	movq	%rsp, %rbp
10002e98c:	48 8b 7f 20	movq	32(%rdi), %rdi
10002e990:	5d	popq	%rbp
10002e991:	e9 00 00 00 00	jmp	0x10002e996
10002e996:	55	pushq	%rbp
10002e997:	48 89 e5	movq	%rsp, %rbp
10002e99a:	41 57	pushq	%r15
10002e99c:	41 56	pushq	%r14
10002e99e:	41 54	pushq	%r12
10002e9a0:	53	pushq	%rbx
10002e9a1:	49 89 f7	movq	%rsi, %r15
10002e9a4:	49 89 fe	movq	%rdi, %r14
10002e9a7:	48 8d 05 f2 37 03 00	leaq	210930(%rip), %rax
10002e9ae:	48 39 47 60	cmpq	%rax, 96(%rdi)
10002e9b2:	75 37	jne	0x10002e9eb
10002e9b4:	48 8d 05 5d 3d 03 00	leaq	212317(%rip), %rax
10002e9bb:	48 8b 08	movq	(%rax), %rcx
10002e9be:	48 85 c9	testq	%rcx, %rcx
10002e9c1:	74 15	je	0x10002e9d8
10002e9c3:	48 8d 15 9c 14 02 00	leaq	136348(%rip), %rdx ## literal pool for: "JetsamProperties loaded from path : %s"
10002e9ca:	4c 89 ff	movq	%r15, %rdi
10002e9cd:	31 f6	xorl	%esi, %esi
10002e9cf:	31 c0	xorl	%eax, %eax
10002e9d1:	e8 9c a2 00 00	callq	0x100038c72
10002e9d6:	eb 13	jmp	0x10002e9eb
10002e9d8:	48 8d 15 ae 14 02 00	leaq	136366(%rip), %rdx ## literal pool for: "JetsamProperties not loaded"
10002e9df:	4c 89 ff	movq	%r15, %rdi
10002e9e2:	31 f6	xorl	%esi, %esi
10002e9e4:	31 c0	xorl	%eax, %eax
10002e9e6:	e8 87 a2 00 00	callq	0x100038c72
10002e9eb:	45 31 e4	xorl	%r12d, %r12d
10002e9ee:	4b 8b 9c e6 30 01 00 00	movq	304(%r14,%r12,8), %rbx
10002e9f6:	48 85 db	testq	%rbx, %rbx
10002e9f9:	74 13	je	0x10002ea0e
10002e9fb:	48 89 df	movq	%rbx, %rdi
10002e9fe:	4c 89 fe	movq	%r15, %rsi
10002ea01:	31 d2	xorl	%edx, %edx
10002ea03:	e8 4a f5 fe ff	callq	0x10001df52
10002ea08:	48 8b 5b 68	movq	104(%rbx), %rbx
10002ea0c:	eb e8	jmp	0x10002e9f6
10002ea0e:	49 ff c4	incq	%r12
10002ea11:	49 83 fc 17	cmpq	$23, %r12
10002ea15:	75 d7	jne	0x10002e9ee
10002ea17:	49 8b 9e 20 01 00 00	movq	288(%r14), %rbx
10002ea1e:	48 85 db	testq	%rbx, %rbx
10002ea21:	74 11	je	0x10002ea34
10002ea23:	48 89 df	movq	%rbx, %rdi
10002ea26:	4c 89 fe	movq	%r15, %rsi
10002ea29:	e8 68 ff ff ff	callq	0x10002e996
10002ea2e:	48 8b 5b 08	movq	8(%rbx), %rbx
10002ea32:	eb ea	jmp	0x10002ea1e
10002ea34:	5b	popq	%rbx
10002ea35:	41 5c	popq	%r12
10002ea37:	41 5e	popq	%r14
10002ea39:	41 5f	popq	%r15
10002ea3b:	5d	popq	%rbp
10002ea3c:	c3	retq
10002ea3d:	55	pushq	%rbp
10002ea3e:	48 89 e5	movq	%rsp, %rbp
10002ea41:	41 57	pushq	%r15
10002ea43:	41 56	pushq	%r14
10002ea45:	41 55	pushq	%r13
10002ea47:	41 54	pushq	%r12
10002ea49:	53	pushq	%rbx
10002ea4a:	48 83 ec 18	subq	$24, %rsp
10002ea4e:	49 89 cc	movq	%rcx, %r12
10002ea51:	49 89 d6	movq	%rdx, %r14
10002ea54:	48 89 75 c8	movq	%rsi, -56(%rbp)
10002ea58:	49 89 ff	movq	%rdi, %r15
10002ea5b:	48 8d 35 80 c6 01 00	leaq	116352(%rip), %rsi ## literal pool for: "type"
10002ea62:	e8 05 36 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002ea67:	41 bd 16 00 00 00	movl	$22, %r13d
10002ea6d:	48 85 c0	testq	%rax, %rax
10002ea70:	74 14	je	0x10002ea86
10002ea72:	48 89 c3	movq	%rax, %rbx
10002ea75:	48 89 c7	movq	%rax, %rdi
10002ea78:	e8 49 36 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002ea7d:	48 3b 05 ac 96 02 00	cmpq	169644(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10002ea84:	74 12	je	0x10002ea98
10002ea86:	44 89 e8	movl	%r13d, %eax
10002ea89:	48 83 c4 18	addq	$24, %rsp
10002ea8d:	5b	popq	%rbx
10002ea8e:	41 5c	popq	%r12
10002ea90:	41 5d	popq	%r13
10002ea92:	41 5e	popq	%r14
10002ea94:	41 5f	popq	%r15
10002ea96:	5d	popq	%rbp
10002ea97:	c3	retq
10002ea98:	4c 89 75 d0	movq	%r14, -48(%rbp)
10002ea9c:	48 89 df	movq	%rbx, %rdi
10002ea9f:	e8 94 36 01 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
10002eaa4:	48 89 c3	movq	%rax, %rbx
10002eaa7:	48 8d 35 98 b6 01 00	leaq	112280(%rip), %rsi ## literal pool for: "handle"
10002eaae:	4c 89 ff	movq	%r15, %rdi
10002eab1:	e8 b6 35 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002eab6:	48 85 c0	testq	%rax, %rax
10002eab9:	74 cb	je	0x10002ea86
10002eabb:	49 89 c6	movq	%rax, %r14
10002eabe:	48 89 c7	movq	%rax, %rdi
10002eac1:	e8 00 36 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002eac6:	48 3b 05 63 96 02 00	cmpq	169571(%rip), %rax ## literal pool symbol address: __xpc_type_uint64
10002eacd:	75 b7	jne	0x10002ea86
10002eacf:	4c 89 f7	movq	%r14, %rdi
10002ead2:	e8 61 36 01 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
10002ead7:	49 89 c6	movq	%rax, %r14
10002eada:	48 83 fb 08	cmpq	$8, %rbx
10002eade:	75 44	jne	0x10002eb24
10002eae0:	45 89 f6	movl	%r14d, %r14d
10002eae3:	48 8d 3d 3e 37 03 00	leaq	210750(%rip), %rdi
10002eaea:	4c 89 f6	movq	%r14, %rsi
10002eaed:	e8 b9 c4 ff ff	callq	0x10002afab
10002eaf2:	48 85 c0	testq	%rax, %rax
10002eaf5:	0f 84 2f 01 00 00	je	0x10002ec2a
10002eafb:	bb 02 00 00 00	movl	$2, %ebx
10002eb00:	f6 80 09 04 00 00 04	testb	$4, 1033(%rax)
10002eb07:	75 38	jne	0x10002eb41
10002eb09:	48 8b 80 d0 03 00 00	movq	976(%rax), %rax
10002eb10:	48 85 c0	testq	%rax, %rax
10002eb13:	0f 84 f1 00 00 00	je	0x10002ec0a
10002eb19:	4c 63 70 34	movslq	52(%rax), %r14
10002eb1d:	bb 03 00 00 00	movl	$3, %ebx
10002eb22:	eb 1d	jmp	0x10002eb41
10002eb24:	41 bd 7d 00 00 00	movl	$125, %r13d
10002eb2a:	48 83 fb 07	cmpq	$7, %rbx
10002eb2e:	0f 87 52 ff ff ff	ja	0x10002ea86
10002eb34:	48 89 d8	movq	%rbx, %rax
10002eb37:	48 83 e0 fb	andq	$-5, %rax
10002eb3b:	0f 84 45 ff ff ff	je	0x10002ea86
10002eb41:	48 8d 35 c9 09 02 00	leaq	133577(%rip), %rsi ## literal pool for: "session"
10002eb48:	4c 89 ff	movq	%r15, %rdi
10002eb4b:	e8 0a 35 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10002eb50:	48 85 c0	testq	%rax, %rax
10002eb53:	74 04	je	0x10002eb59
10002eb55:	49 89 04 24	movq	%rax, (%r12)
10002eb59:	48 8d 35 c4 13 02 00	leaq	136132(%rip), %rsi ## literal pool for: "domain-port"
10002eb60:	4c 89 ff	movq	%r15, %rdi
10002eb63:	e8 04 35 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10002eb68:	48 85 c0	testq	%rax, %rax
10002eb6b:	74 67	je	0x10002ebd4
10002eb6d:	48 89 c7	movq	%rax, %rdi
10002eb70:	e8 63 35 01 00	callq	0x1000420d8 ## symbol stub for: _xpc_mach_send_copy_right
10002eb75:	89 c3	movl	%eax, %ebx
10002eb77:	8d 43 01	leal	1(%rbx), %eax
10002eb7a:	41 bd 03 00 00 10	movl	$268435459, %r13d
10002eb80:	83 f8 02	cmpl	$2, %eax
10002eb83:	0f 82 fd fe ff ff	jb	0x10002ea86
10002eb89:	48 8b 3d c8 49 03 00	movq	215496(%rip), %rdi
10002eb90:	89 de	movl	%ebx, %esi
10002eb92:	e8 f4 ea ff ff	callq	0x10002d68b
10002eb97:	49 89 c4	movq	%rax, %r12
10002eb9a:	89 df	movl	%ebx, %edi
10002eb9c:	e8 98 b1 fd ff	callq	0x100009d39
10002eba1:	85 c0	testl	%eax, %eax
10002eba3:	0f 85 8c 00 00 00	jne	0x10002ec35
10002eba9:	4d 85 e4	testq	%r12, %r12
10002ebac:	74 67	je	0x10002ec15
10002ebae:	49 8b 44 24 60	movq	96(%r12), %rax
10002ebb3:	48 8d 0d 16 39 03 00	leaq	211222(%rip), %rcx
10002ebba:	48 39 c8	cmpq	%rcx, %rax
10002ebbd:	74 4b	je	0x10002ec0a
10002ebbf:	48 8b 4d c8	movq	-56(%rbp), %rcx
10002ebc3:	48 89 01	movq	%rax, (%rcx)
10002ebc6:	49 8b 44 24 68	movq	104(%r12), %rax
10002ebcb:	48 8b 4d d0	movq	-48(%rbp), %rcx
10002ebcf:	48 89 01	movq	%rax, (%rcx)
10002ebd2:	eb 2e	jmp	0x10002ec02
10002ebd4:	48 83 fb 05	cmpq	$5, %rbx
10002ebd8:	75 0f	jne	0x10002ebe9
10002ebda:	41 bd 70 00 00 00	movl	$112, %r13d
10002ebe0:	4d 85 f6	testq	%r14, %r14
10002ebe3:	0f 84 9d fe ff ff	je	0x10002ea86
10002ebe9:	48 8d 05 60 c5 02 00	leaq	181600(%rip), %rax
10002ebf0:	48 8b 04 d8	movq	(%rax,%rbx,8), %rax
10002ebf4:	48 8b 4d c8	movq	-56(%rbp), %rcx
10002ebf8:	48 89 01	movq	%rax, (%rcx)
10002ebfb:	48 8b 45 d0	movq	-48(%rbp), %rax
10002ebff:	4c 89 30	movq	%r14, (%rax)
10002ec02:	45 31 ed	xorl	%r13d, %r13d
10002ec05:	e9 7c fe ff ff	jmp	0x10002ea86
10002ec0a:	41 bd 7d 00 00 00	movl	$125, %r13d
10002ec10:	e9 71 fe ff ff	jmp	0x10002ea86
10002ec15:	48 8d 35 14 13 02 00	leaq	135956(%rip), %rsi ## literal pool for: "Could not find domain for port: 0x%x"
10002ec1c:	bf 03 00 00 00	movl	$3, %edi
10002ec21:	89 da	movl	%ebx, %edx
10002ec23:	31 c0	xorl	%eax, %eax
10002ec25:	e8 9e 69 00 00	callq	0x1000355c8
10002ec2a:	41 bd 70 00 00 00	movl	$112, %r13d
10002ec30:	e9 51 fe ff ff	jmp	0x10002ea86
10002ec35:	48 63 f8	movslq	%eax, %rdi
10002ec38:	e8 65 2b 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10002ec3d:	e9 67 ff ff ff	jmp	0x10002eba9
10002ec42:	55	pushq	%rbp
10002ec43:	48 89 e5	movq	%rsp, %rbp
10002ec46:	53	pushq	%rbx
10002ec47:	50	pushq	%rax
10002ec48:	48 89 d3	movq	%rdx, %rbx
10002ec4b:	48 8d 05 6e 37 03 00	leaq	210798(%rip), %rax
10002ec52:	48 39 c7	cmpq	%rax, %rdi
10002ec55:	74 13	je	0x10002ec6a
10002ec57:	48 8d 05 ea 37 03 00	leaq	210922(%rip), %rax
10002ec5e:	48 39 c7	cmpq	%rax, %rdi
10002ec61:	74 1d	je	0x10002ec80
10002ec63:	e8 43 c3 ff ff	callq	0x10002afab
10002ec68:	eb 27	jmp	0x10002ec91
10002ec6a:	8b 79 14	movl	20(%rcx), %edi
10002ec6d:	e8 54 c0 fe ff	callq	0x10001acc6
10002ec72:	48 85 c0	testq	%rax, %rax
10002ec75:	74 09	je	0x10002ec80
10002ec77:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
10002ec7e:	eb 11	jmp	0x10002ec91
10002ec80:	e8 bb ac 00 00	callq	0x100039940
10002ec85:	48 85 c0	testq	%rax, %rax
10002ec88:	75 07	jne	0x10002ec91
10002ec8a:	48 8b 05 c7 48 03 00	movq	215239(%rip), %rax
10002ec91:	48 85 c0	testq	%rax, %rax
10002ec94:	74 11	je	0x10002eca7
10002ec96:	48 89 c7	movq	%rax, %rdi
10002ec99:	48 89 de	movq	%rbx, %rsi
10002ec9c:	48 83 c4 08	addq	$8, %rsp
10002eca0:	5b	popq	%rbx
10002eca1:	5d	popq	%rbp
10002eca2:	e9 e3 01 00 00	jmp	0x10002ee8a
10002eca7:	31 c0	xorl	%eax, %eax
10002eca9:	48 83 c4 08	addq	$8, %rsp
10002ecad:	5b	popq	%rbx
10002ecae:	5d	popq	%rbp
10002ecaf:	c3	retq
10002ecb0:	55	pushq	%rbp
10002ecb1:	48 89 e5	movq	%rsp, %rbp
10002ecb4:	41 57	pushq	%r15
10002ecb6:	41 56	pushq	%r14
10002ecb8:	41 55	pushq	%r13
10002ecba:	41 54	pushq	%r12
10002ecbc:	53	pushq	%rbx
10002ecbd:	48 83 ec 68	subq	$104, %rsp
10002ecc1:	4d 89 ce	movq	%r9, %r14
10002ecc4:	48 8b 05 5d 93 02 00	movq	168797(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002eccb:	48 8b 00	movq	(%rax), %rax
10002ecce:	48 89 45 d0	movq	%rax, -48(%rbp)
10002ecd2:	48 8b 47 68	movq	104(%rdi), %rax
10002ecd6:	48 85 c0	testq	%rax, %rax
10002ecd9:	74 68	je	0x10002ed43
10002ecdb:	4d 89 c5	movq	%r8, %r13
10002ecde:	49 89 ff	movq	%rdi, %r15
10002ece1:	48 8b 3d 70 48 03 00	movq	215152(%rip), %rdi
10002ece8:	41 bc 7c 00 00 00	movl	$124, %r12d
10002ecee:	f6 87 08 04 00 00 01	testb	$1, 1032(%rdi)
10002ecf5:	75 31	jne	0x10002ed28
10002ecf7:	48 89 f3	movq	%rsi, %rbx
10002ecfa:	89 4d 84	movl	%ecx, -124(%rbp)
10002ecfd:	48 89 55 88	movq	%rdx, -120(%rbp)
10002ed01:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002ed09:	31 ff	xorl	%edi, %edi
10002ed0b:	31 f6	xorl	%esi, %esi
10002ed0d:	31 d2	xorl	%edx, %edx
10002ed0f:	48 89 d9	movq	%rbx, %rcx
10002ed12:	4d 89 e8	movq	%r13, %r8
10002ed15:	45 31 c9	xorl	%r9d, %r9d
10002ed18:	ff d0	callq	*%rax
10002ed1a:	85 c0	testl	%eax, %eax
10002ed1c:	74 54	je	0x10002ed72
10002ed1e:	41 89 c4	movl	%eax, %r12d
10002ed21:	48 8b 3d 30 48 03 00	movq	215088(%rip), %rdi
10002ed28:	48 8d 0d 26 12 02 00	leaq	135718(%rip), %rcx ## literal pool for: "domain creation"
10002ed2f:	31 db	xorl	%ebx, %ebx
10002ed31:	4c 89 ee	movq	%r13, %rsi
10002ed34:	44 89 e2	movl	%r12d, %edx
10002ed37:	31 c0	xorl	%eax, %eax
10002ed39:	e8 36 50 ff ff	callq	0x100023d74
10002ed3e:	45 89 26	movl	%r12d, (%r14)
10002ed41:	eb 09	jmp	0x10002ed4c
10002ed43:	41 c7 06 70 00 00 00	movl	$112, (%r14)
10002ed4a:	31 db	xorl	%ebx, %ebx
10002ed4c:	48 8b 05 d5 92 02 00	movq	168661(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002ed53:	48 8b 00	movq	(%rax), %rax
10002ed56:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002ed5a:	0f 85 25 01 00 00	jne	0x10002ee85
10002ed60:	48 89 d8	movq	%rbx, %rax
10002ed63:	48 83 c4 68	addq	$104, %rsp
10002ed67:	5b	popq	%rbx
10002ed68:	41 5c	popq	%r12
10002ed6a:	41 5d	popq	%r13
10002ed6c:	41 5e	popq	%r14
10002ed6e:	41 5f	popq	%r15
10002ed70:	5d	popq	%rbp
10002ed71:	c3	retq
10002ed72:	0f 28 05 07 45 01 00	movaps	83207(%rip), %xmm0
10002ed79:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10002ed7d:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10002ed81:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10002ed85:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
10002ed89:	48 8d 05 a8 35 03 00	leaq	210344(%rip), %rax
10002ed90:	49 39 c7	cmpq	%rax, %r15
10002ed93:	74 05	je	0x10002ed9a
10002ed95:	45 31 e4	xorl	%r12d, %r12d
10002ed98:	eb 42	jmp	0x10002eddc
10002ed9a:	41 8b 45 14	movl	20(%r13), %eax
10002ed9e:	4c 8d 25 c0 11 02 00	leaq	135616(%rip), %r12 ## literal pool for: "(premature birth)"
10002eda5:	85 c0	testl	%eax, %eax
10002eda7:	78 33	js	0x10002eddc
10002eda9:	48 81 fb ff ff ff 7f	cmpq	$2147483647, %rbx
10002edb0:	77 2a	ja	0x10002eddc
10002edb2:	48 39 d8	cmpq	%rbx, %rax
10002edb5:	75 25	jne	0x10002eddc
10002edb7:	89 df	movl	%ebx, %edi
10002edb9:	e8 08 bf fe ff	callq	0x10001acc6
10002edbe:	48 85 c0	testq	%rax, %rax
10002edc1:	74 0a	je	0x10002edcd
10002edc3:	48 89 c7	movq	%rax, %rdi
10002edc6:	e8 a4 cf fe ff	callq	0x10001bd6f
10002edcb:	eb 0c	jmp	0x10002edd9
10002edcd:	48 8d 75 90	leaq	-112(%rbp), %rsi
10002edd1:	4c 89 ef	movq	%r13, %rdi
10002edd4:	e8 84 5a 00 00	callq	0x10003485d
10002edd9:	49 89 c4	movq	%rax, %r12
10002eddc:	4c 89 ff	movq	%r15, %rdi
10002eddf:	48 89 de	movq	%rbx, %rsi
10002ede2:	e8 c4 c1 ff ff	callq	0x10002afab
10002ede7:	48 85 c0	testq	%rax, %rax
10002edea:	74 27	je	0x10002ee13
10002edec:	48 8b b0 a8 03 00 00	movq	936(%rax), %rsi
10002edf3:	48 8b 7d 88	movq	-120(%rbp), %rdi
10002edf7:	e8 37 05 fe ff	callq	0x10000f333
10002edfc:	84 c0	testb	%al, %al
10002edfe:	b9 25 00 00 00	movl	$37, %ecx
10002ee03:	b8 86 00 00 00	movl	$134, %eax
10002ee08:	0f 45 c1	cmovnel	%ecx, %eax
10002ee0b:	41 89 06	movl	%eax, (%r14)
10002ee0e:	e9 37 ff ff ff	jmp	0x10002ed4a
10002ee13:	4c 8b 0d 3e 47 03 00	movq	214846(%rip), %r9
10002ee1a:	4c 89 2c 24	movq	%r13, (%rsp)
10002ee1e:	4c 89 ff	movq	%r15, %rdi
10002ee21:	48 89 de	movq	%rbx, %rsi
10002ee24:	4c 89 e2	movq	%r12, %rdx
10002ee27:	48 8b 4d 88	movq	-120(%rbp), %rcx
10002ee2b:	45 31 c0	xorl	%r8d, %r8d
10002ee2e:	e8 65 70 ff ff	callq	0x100025e98
10002ee33:	48 89 c3	movq	%rax, %rbx
10002ee36:	f6 45 84 01	testb	$1, -124(%rbp)
10002ee3a:	74 1d	je	0x10002ee59
10002ee3c:	48 8d 15 34 11 02 00	leaq	135476(%rip), %rdx ## literal pool for: "Will be pending launches until told otherwise"
10002ee43:	48 89 df	movq	%rbx, %rdi
10002ee46:	be 05 00 00 00	movl	$5, %esi
10002ee4b:	31 c0	xorl	%eax, %eax
10002ee4d:	e8 d7 15 ff ff	callq	0x100020429
10002ee52:	80 8b 0a 04 00 00 04	orb	$4, 1034(%rbx)
10002ee59:	48 89 df	movq	%rbx, %rdi
10002ee5c:	4c 89 ee	movq	%r13, %rsi
10002ee5f:	31 d2	xorl	%edx, %edx
10002ee61:	e8 ee 28 ff ff	callq	0x100021754
10002ee66:	48 89 df	movq	%rbx, %rdi
10002ee69:	48 8b 75 88	movq	-120(%rbp), %rsi
10002ee6d:	e8 18 00 00 00	callq	0x10002ee8a
10002ee72:	48 89 c3	movq	%rax, %rbx
10002ee75:	48 85 c0	testq	%rax, %rax
10002ee78:	0f 85 ce fe ff ff	jne	0x10002ed4c
10002ee7e:	b8 70 00 00 00	movl	$112, %eax
10002ee83:	eb 86	jmp	0x10002ee0b
10002ee85:	e8 e8 28 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002ee8a:	55	pushq	%rbp
10002ee8b:	48 89 e5	movq	%rsp, %rbp
10002ee8e:	41 56	pushq	%r14
10002ee90:	53	pushq	%rbx
10002ee91:	49 89 fe	movq	%rdi, %r14
10002ee94:	48 85 f6	testq	%rsi, %rsi
10002ee97:	74 7f	je	0x10002ef18
10002ee99:	48 89 f3	movq	%rsi, %rbx
10002ee9c:	49 8b 46 60	movq	96(%r14), %rax
10002eea0:	48 8d 0d 81 33 03 00	leaq	209793(%rip), %rcx
10002eea7:	48 39 c8	cmpq	%rcx, %rax
10002eeaa:	74 1a	je	0x10002eec6
10002eeac:	48 8d 0d fd 33 03 00	leaq	209917(%rip), %rcx
10002eeb3:	48 39 c8	cmpq	%rcx, %rax
10002eeb6:	74 2a	je	0x10002eee2
10002eeb8:	48 8d 0d e1 32 03 00	leaq	209633(%rip), %rcx
10002eebf:	48 39 c8	cmpq	%rcx, %rax
10002eec2:	75 54	jne	0x10002ef18
10002eec4:	eb 38	jmp	0x10002eefe
10002eec6:	48 8d 35 74 af 01 00	leaq	110452(%rip), %rsi ## literal pool for: "Aqua"
10002eecd:	48 89 df	movq	%rbx, %rdi
10002eed0:	e8 5e 04 fe ff	callq	0x10000f333
10002eed5:	84 c0	testb	%al, %al
10002eed7:	74 25	je	0x10002eefe
10002eed9:	4d 8b b6 d0 03 00 00	movq	976(%r14), %r14
10002eee0:	eb 36	jmp	0x10002ef18
10002eee2:	48 8d 35 8a 49 01 00	leaq	84362(%rip), %rsi ## literal pool for: "Background"
10002eee9:	48 89 df	movq	%rbx, %rdi
10002eeec:	e8 42 04 fe ff	callq	0x10000f333
10002eef1:	84 c0	testb	%al, %al
10002eef3:	74 09	je	0x10002eefe
10002eef5:	4d 8b b6 c8 00 00 00	movq	200(%r14), %r14
10002eefc:	eb 1a	jmp	0x10002ef18
10002eefe:	48 8d 35 af 05 02 00	leaq	132527(%rip), %rsi ## literal pool for: "LoginWindow"
10002ef05:	48 89 df	movq	%rbx, %rdi
10002ef08:	e8 26 04 fe ff	callq	0x10000f333
10002ef0d:	84 c0	testb	%al, %al
10002ef0f:	74 07	je	0x10002ef18
10002ef11:	4c 8b 35 38 46 03 00	movq	214584(%rip), %r14
10002ef18:	4c 89 f0	movq	%r14, %rax
10002ef1b:	5b	popq	%rbx
10002ef1c:	41 5e	popq	%r14
10002ef1e:	5d	popq	%rbp
10002ef1f:	c3	retq
10002ef20:	55	pushq	%rbp
10002ef21:	48 89 e5	movq	%rsp, %rbp
10002ef24:	41 57	pushq	%r15
10002ef26:	41 56	pushq	%r14
10002ef28:	41 55	pushq	%r13
10002ef2a:	41 54	pushq	%r12
10002ef2c:	53	pushq	%rbx
10002ef2d:	48 83 ec 18	subq	$24, %rsp
10002ef31:	49 89 ce	movq	%rcx, %r14
10002ef34:	49 89 d7	movq	%rdx, %r15
10002ef37:	49 89 f5	movq	%rsi, %r13
10002ef3a:	48 89 fb	movq	%rdi, %rbx
10002ef3d:	48 8b 47 60	movq	96(%rdi), %rax
10002ef41:	48 8b 4f 68	movq	104(%rdi), %rcx
10002ef45:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002ef4d:	be 04 00 00 00	movl	$4, %esi
10002ef52:	31 d2	xorl	%edx, %edx
10002ef54:	4d 89 f0	movq	%r14, %r8
10002ef57:	45 31 c9	xorl	%r9d, %r9d
10002ef5a:	ff 50 68	callq	*104(%rax)
10002ef5d:	85 c0	testl	%eax, %eax
10002ef5f:	0f 85 df 00 00 00	jne	0x10002f044
10002ef65:	4c 89 75 d0	movq	%r14, -48(%rbp)
10002ef69:	45 31 e4	xorl	%r12d, %r12d
10002ef6c:	48 89 5d c8	movq	%rbx, -56(%rbp)
10002ef70:	4a 8b 9c e3 30 01 00 00	movq	304(%rbx,%r12,8), %rbx
10002ef78:	48 85 db	testq	%rbx, %rbx
10002ef7b:	0f 84 88 00 00 00	je	0x10002f009
10002ef81:	be 01 00 00 00	movl	$1, %esi
10002ef86:	ba ff ff ff 7f	movl	$2147483647, %edx
10002ef8b:	4c 89 ef	movq	%r13, %rdi
10002ef8e:	31 c9	xorl	%ecx, %ecx
10002ef90:	e8 f1 2e 01 00	callq	0x100041e86 ## symbol stub for: _strtonum
10002ef95:	49 89 c6	movq	%rax, %r14
10002ef98:	45 85 f6	testl	%r14d, %r14d
10002ef9b:	74 0f	je	0x10002efac
10002ef9d:	48 89 df	movq	%rbx, %rdi
10002efa0:	e8 5c c8 fe ff	callq	0x10001b801
10002efa5:	44 39 f0	cmpl	%r14d, %eax
10002efa8:	74 2c	je	0x10002efd6
10002efaa:	eb 54	jmp	0x10002f000
10002efac:	48 8d bb 18 05 00 00	leaq	1304(%rbx), %rdi
10002efb3:	4c 89 ee	movq	%r13, %rsi
10002efb6:	e8 67 03 fe ff	callq	0x10000f322
10002efbb:	84 c0	testb	%al, %al
10002efbd:	75 17	jne	0x10002efd6
10002efbf:	48 89 df	movq	%rbx, %rdi
10002efc2:	e8 79 cd fe ff	callq	0x10001bd40
10002efc7:	48 89 c7	movq	%rax, %rdi
10002efca:	4c 89 ee	movq	%r13, %rsi
10002efcd:	e8 50 03 fe ff	callq	0x10000f322
10002efd2:	84 c0	testb	%al, %al
10002efd4:	74 2a	je	0x10002f000
10002efd6:	48 89 df	movq	%rbx, %rdi
10002efd9:	be 01 00 00 00	movl	$1, %esi
10002efde:	e8 45 93 fe ff	callq	0x100018328
10002efe3:	49 89 c6	movq	%rax, %r14
10002efe6:	4c 89 ff	movq	%r15, %rdi
10002efe9:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002eff0:	48 89 c2	movq	%rax, %rdx
10002eff3:	e8 7e 2f 01 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
10002eff8:	4c 89 f7	movq	%r14, %rdi
10002effb:	e8 30 2a 01 00	callq	0x100041a30 ## symbol stub for: _free
10002f000:	48 8b 5b 68	movq	104(%rbx), %rbx
10002f004:	e9 6f ff ff ff	jmp	0x10002ef78
10002f009:	49 ff c4	incq	%r12
10002f00c:	49 83 fc 17	cmpq	$23, %r12
10002f010:	48 8b 5d c8	movq	-56(%rbp), %rbx
10002f014:	0f 85 56 ff ff ff	jne	0x10002ef70
10002f01a:	48 8b 9b 20 01 00 00	movq	288(%rbx), %rbx
10002f021:	48 85 db	testq	%rbx, %rbx
10002f024:	4c 8b 75 d0	movq	-48(%rbp), %r14
10002f028:	74 1a	je	0x10002f044
10002f02a:	48 89 df	movq	%rbx, %rdi
10002f02d:	4c 89 ee	movq	%r13, %rsi
10002f030:	4c 89 fa	movq	%r15, %rdx
10002f033:	4c 89 f1	movq	%r14, %rcx
10002f036:	e8 e5 fe ff ff	callq	0x10002ef20
10002f03b:	48 8b 5b 08	movq	8(%rbx), %rbx
10002f03f:	48 85 db	testq	%rbx, %rbx
10002f042:	75 e6	jne	0x10002f02a
10002f044:	48 83 c4 18	addq	$24, %rsp
10002f048:	5b	popq	%rbx
10002f049:	41 5c	popq	%r12
10002f04b:	41 5d	popq	%r13
10002f04d:	41 5e	popq	%r14
10002f04f:	41 5f	popq	%r15
10002f051:	5d	popq	%rbp
10002f052:	c3	retq
10002f053:	55	pushq	%rbp
10002f054:	48 89 e5	movq	%rsp, %rbp
10002f057:	41 57	pushq	%r15
10002f059:	41 56	pushq	%r14
10002f05b:	41 55	pushq	%r13
10002f05d:	41 54	pushq	%r12
10002f05f:	53	pushq	%rbx
10002f060:	48 81 ec 28 04 00 00	subq	$1064, %rsp
10002f067:	4d 89 c5	movq	%r8, %r13
10002f06a:	49 89 ce	movq	%rcx, %r14
10002f06d:	48 89 d3	movq	%rdx, %rbx
10002f070:	49 89 f7	movq	%rsi, %r15
10002f073:	49 89 fc	movq	%rdi, %r12
10002f076:	48 8b 05 ab 8f 02 00	movq	167851(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002f07d:	48 8b 00	movq	(%rax), %rax
10002f080:	48 89 45 d0	movq	%rax, -48(%rbp)
10002f084:	48 8d 35 6a 10 02 00	leaq	135274(%rip), %rsi ## literal pool for: "SubmitJob"
10002f08b:	48 89 d7	movq	%rdx, %rdi
10002f08e:	e8 99 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f093:	85 c0	testl	%eax, %eax
10002f095:	0f 84 72 01 00 00	je	0x10002f20d
10002f09b:	48 8d 35 5d 10 02 00	leaq	135261(%rip), %rsi ## literal pool for: "RemoveJob"
10002f0a2:	48 89 df	movq	%rbx, %rdi
10002f0a5:	e8 82 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f0aa:	85 c0	testl	%eax, %eax
10002f0ac:	0f 84 0d 02 00 00	je	0x10002f2bf
10002f0b2:	48 8d 35 50 10 02 00	leaq	135248(%rip), %rsi ## literal pool for: "StartJob"
10002f0b9:	48 89 df	movq	%rbx, %rdi
10002f0bc:	e8 6b 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f0c1:	85 c0	testl	%eax, %eax
10002f0c3:	0f 84 d0 02 00 00	je	0x10002f399
10002f0c9:	48 8d 35 42 10 02 00	leaq	135234(%rip), %rsi ## literal pool for: "StopJob"
10002f0d0:	48 89 df	movq	%rbx, %rdi
10002f0d3:	e8 54 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f0d8:	85 c0	testl	%eax, %eax
10002f0da:	0f 84 6d 03 00 00	je	0x10002f44d
10002f0e0:	48 8d 35 33 10 02 00	leaq	135219(%rip), %rsi ## literal pool for: "GetJob"
10002f0e7:	48 89 df	movq	%rbx, %rdi
10002f0ea:	e8 3d 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f0ef:	85 c0	testl	%eax, %eax
10002f0f1:	0f 84 1a 04 00 00	je	0x10002f511
10002f0f7:	48 8d 35 23 10 02 00	leaq	135203(%rip), %rsi ## literal pool for: "GetJobs"
10002f0fe:	48 89 df	movq	%rbx, %rdi
10002f101:	e8 26 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f106:	85 c0	testl	%eax, %eax
10002f108:	0f 84 d7 04 00 00	je	0x10002f5e5
10002f10e:	48 8d 35 14 10 02 00	leaq	135188(%rip), %rsi ## literal pool for: "CheckIn"
10002f115:	48 89 df	movq	%rbx, %rdi
10002f118:	e8 0f 2d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f11d:	85 c0	testl	%eax, %eax
10002f11f:	0f 84 16 05 00 00	je	0x10002f63b
10002f125:	48 8d 35 05 10 02 00	leaq	135173(%rip), %rsi ## literal pool for: "SetUserEnvironment"
10002f12c:	48 89 df	movq	%rbx, %rdi
10002f12f:	e8 f8 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f134:	85 c0	testl	%eax, %eax
10002f136:	0f 84 4d 05 00 00	je	0x10002f689
10002f13c:	48 8d 35 01 10 02 00	leaq	135169(%rip), %rsi ## literal pool for: "UnsetUserEnvironment"
10002f143:	48 89 df	movq	%rbx, %rdi
10002f146:	e8 e1 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f14b:	85 c0	testl	%eax, %eax
10002f14d:	0f 84 5c 06 00 00	je	0x10002f7af
10002f153:	48 8d 35 ff 0f 02 00	leaq	135167(%rip), %rsi ## literal pool for: "Shutdown"
10002f15a:	48 89 df	movq	%rbx, %rdi
10002f15d:	e8 ca 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f162:	85 c0	testl	%eax, %eax
10002f164:	0f 84 f0 06 00 00	je	0x10002f85a
10002f16a:	48 8d 35 f1 0f 02 00	leaq	135153(%rip), %rsi ## literal pool for: "SingleUser"
10002f171:	48 89 df	movq	%rbx, %rdi
10002f174:	e8 b3 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f179:	85 c0	testl	%eax, %eax
10002f17b:	0f 84 4e 07 00 00	je	0x10002f8cf
10002f181:	48 8d 35 16 10 02 00	leaq	135190(%rip), %rsi ## literal pool for: "GetResourceLimits"
10002f188:	48 89 df	movq	%rbx, %rdi
10002f18b:	e8 9c 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f190:	85 c0	testl	%eax, %eax
10002f192:	0f 84 2e 07 00 00	je	0x10002f8c6
10002f198:	48 8d 35 24 10 02 00	leaq	135204(%rip), %rsi ## literal pool for: "SetResourceLimits"
10002f19f:	48 89 df	movq	%rbx, %rdi
10002f1a2:	e8 85 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f1a7:	85 c0	testl	%eax, %eax
10002f1a9:	0f 84 17 07 00 00	je	0x10002f8c6
10002f1af:	48 8d 35 1f 10 02 00	leaq	135199(%rip), %rsi ## literal pool for: "GetResourceUsageSelf"
10002f1b6:	48 89 df	movq	%rbx, %rdi
10002f1b9:	e8 6e 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f1be:	85 c0	testl	%eax, %eax
10002f1c0:	0f 84 c9 09 00 00	je	0x10002fb8f
10002f1c6:	48 8d 35 1d 10 02 00	leaq	135197(%rip), %rsi ## literal pool for: "GetResourceUsageChildren"
10002f1cd:	48 89 df	movq	%rbx, %rdi
10002f1d0:	e8 57 2c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10002f1d5:	b9 16 00 00 00	movl	$22, %ecx
10002f1da:	48 89 8d c8 fb ff ff	movq	%rcx, -1080(%rbp)
10002f1e1:	85 c0	testl	%eax, %eax
10002f1e3:	0f 85 91 07 00 00	jne	0x10002f97a
10002f1e9:	48 8b 05 38 8e 02 00	movq	167480(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002f1f0:	48 8b 00	movq	(%rax), %rax
10002f1f3:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002f1f7:	0f 85 ed 0a 00 00	jne	0x10002fcea
10002f1fd:	4c 89 e7	movq	%r12, %rdi
10002f200:	4c 89 fe	movq	%r15, %rsi
10002f203:	ba ff ff ff ff	movl	$4294967295, %edx
10002f208:	e9 9e 09 00 00	jmp	0x10002fbab
10002f20d:	4c 89 a5 c0 fb ff ff	movq	%r12, -1088(%rbp)
10002f214:	b8 16 00 00 00	movl	$22, %eax
10002f219:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f220:	4d 85 f6	testq	%r14, %r14
10002f223:	0f 84 51 07 00 00	je	0x10002f97a
10002f229:	4d 89 fc	movq	%r15, %r12
10002f22c:	4c 89 f7	movq	%r14, %rdi
10002f22f:	e8 92 2e 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f234:	48 3b 05 c5 8e 02 00	cmpq	167621(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002f23b:	74 15	je	0x10002f252
10002f23d:	4c 89 f7	movq	%r14, %rdi
10002f240:	e8 81 2e 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f245:	48 3b 05 8c 8e 02 00	cmpq	167564(%rip), %rax ## literal pool symbol address: __xpc_type_array
10002f24c:	0f 85 28 07 00 00	jne	0x10002f97a
10002f252:	4c 89 f7	movq	%r14, %rdi
10002f255:	e8 6c 2e 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f25a:	48 3b 05 77 8e 02 00	cmpq	167543(%rip), %rax ## literal pool symbol address: __xpc_type_array
10002f261:	0f 84 00 03 00 00	je	0x10002f567
10002f267:	48 8d 8d d0 fb ff ff	leaq	-1072(%rbp), %rcx
10002f26e:	48 c7 01 00 00 00 00	movq	$0, (%rcx)
10002f275:	48 8b bd c0 fb ff ff	movq	-1088(%rbp), %rdi
10002f27c:	4c 89 e6	movq	%r12, %rsi
10002f27f:	4c 89 f2	movq	%r14, %rdx
10002f282:	e8 4f 0e 00 00	callq	0x1000300d6
10002f287:	89 c3	movl	%eax, %ebx
10002f289:	85 c0	testl	%eax, %eax
10002f28b:	0f 85 12 05 00 00	jne	0x10002f7a3
10002f291:	48 8b 85 d0 fb ff ff	movq	-1072(%rbp), %rax
10002f298:	48 85 c0	testq	%rax, %rax
10002f29b:	74 10	je	0x10002f2ad
10002f29d:	0f b7 88 64 01 00 00	movzwl	356(%rax), %ecx
10002f2a4:	f6 c1 08	testb	$8, %cl
10002f2a7:	0f 85 d6 04 00 00	jne	0x10002f783
10002f2ad:	31 db	xorl	%ebx, %ebx
10002f2af:	31 ff	xorl	%edi, %edi
10002f2b1:	e8 7c 2e 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002f2b6:	49 89 45 00	movq	%rax, (%r13)
10002f2ba:	e9 e4 04 00 00	jmp	0x10002f7a3
10002f2bf:	b8 16 00 00 00	movl	$22, %eax
10002f2c4:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f2cb:	4d 85 f6	testq	%r14, %r14
10002f2ce:	0f 84 a6 06 00 00	je	0x10002f97a
10002f2d4:	4c 89 eb	movq	%r13, %rbx
10002f2d7:	4c 89 f7	movq	%r14, %rdi
10002f2da:	e8 e7 2d 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f2df:	48 3b 05 42 8e 02 00	cmpq	167490(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002f2e6:	0f 85 8e 06 00 00	jne	0x10002f97a
10002f2ec:	4c 89 f7	movq	%r14, %rdi
10002f2ef:	e8 32 2e 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002f2f4:	49 89 c6	movq	%rax, %r14
10002f2f7:	48 8d bd b8 fb ff ff	leaq	-1096(%rbp), %rdi
10002f2fe:	4c 89 27	movq	%r12, (%rdi)
10002f301:	48 89 c6	movq	%rax, %rsi
10002f304:	e8 32 ec ff ff	callq	0x10002df3b
10002f309:	48 85 c0	testq	%rax, %rax
10002f30c:	0f 84 6d 03 00 00	je	0x10002f67f
10002f312:	49 89 c5	movq	%rax, %r13
10002f315:	4c 8b a5 b8 fb ff ff	movq	-1096(%rbp), %r12
10002f31c:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002f325:	ba 7c 00 00 00	movl	$124, %edx
10002f32a:	a9 03 02 00 00	testl	$515, %eax
10002f32f:	75 45	jne	0x10002f376
10002f331:	49 8b 44 24 60	movq	96(%r12), %rax
10002f336:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002f33b:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f343:	ba 08 00 00 00	movl	$8, %edx
10002f348:	4c 89 e7	movq	%r12, %rdi
10002f34b:	be 03 00 00 00	movl	$3, %esi
10002f350:	4d 89 f8	movq	%r15, %r8
10002f353:	45 31 c9	xorl	%r9d, %r9d
10002f356:	ff 50 68	callq	*104(%rax)
10002f359:	89 c2	movl	%eax, %edx
10002f35b:	85 c0	testl	%eax, %eax
10002f35d:	75 17	jne	0x10002f376
10002f35f:	4c 89 ef	movq	%r13, %rdi
10002f362:	4c 89 fe	movq	%r15, %rsi
10002f365:	31 d2	xorl	%edx, %edx
10002f367:	e8 ed 8e fe ff	callq	0x100018259
10002f36c:	89 c2	movl	%eax, %edx
10002f36e:	85 c0	testl	%eax, %eax
10002f370:	0f 84 ee 06 00 00	je	0x10002fa64
10002f376:	48 8d 0d ec 0e 02 00	leaq	134892(%rip), %rcx ## literal pool for: "service removal (%s)"
10002f37d:	4c 89 e7	movq	%r12, %rdi
10002f380:	4c 89 fe	movq	%r15, %rsi
10002f383:	48 89 95 c8 fb ff ff	movq	%rdx, -1080(%rbp)
10002f38a:	4d 89 f0	movq	%r14, %r8
10002f38d:	31 c0	xorl	%eax, %eax
10002f38f:	e8 e0 49 ff ff	callq	0x100023d74
10002f394:	e9 e1 05 00 00	jmp	0x10002f97a
10002f399:	4c 89 ad c0 fb ff ff	movq	%r13, -1088(%rbp)
10002f3a0:	b8 16 00 00 00	movl	$22, %eax
10002f3a5:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f3ac:	4d 85 f6	testq	%r14, %r14
10002f3af:	0f 84 c5 05 00 00	je	0x10002f97a
10002f3b5:	4c 89 f7	movq	%r14, %rdi
10002f3b8:	e8 09 2d 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f3bd:	48 3b 05 64 8d 02 00	cmpq	167268(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002f3c4:	0f 85 b0 05 00 00	jne	0x10002f97a
10002f3ca:	4c 89 f7	movq	%r14, %rdi
10002f3cd:	e8 54 2d 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002f3d2:	49 89 c6	movq	%rax, %r14
10002f3d5:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
10002f3dc:	4c 89 27	movq	%r12, (%rdi)
10002f3df:	48 89 c6	movq	%rax, %rsi
10002f3e2:	e8 54 eb ff ff	callq	0x10002df3b
10002f3e7:	48 85 c0	testq	%rax, %rax
10002f3ea:	0f 84 85 02 00 00	je	0x10002f675
10002f3f0:	49 89 c4	movq	%rax, %r12
10002f3f3:	4c 8b ad d0 fb ff ff	movq	-1072(%rbp), %r13
10002f3fa:	41 0f b7 85 08 04 00 00	movzwl	1032(%r13), %eax
10002f402:	bb 7c 00 00 00	movl	$124, %ebx
10002f407:	a9 03 02 00 00	testl	$515, %eax
10002f40c:	75 30	jne	0x10002f43e
10002f40e:	49 8b 45 60	movq	96(%r13), %rax
10002f412:	49 8b 4d 68	movq	104(%r13), %rcx
10002f416:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f41e:	ba 08 00 00 00	movl	$8, %edx
10002f423:	4c 89 ef	movq	%r13, %rdi
10002f426:	be 03 00 00 00	movl	$3, %esi
10002f42b:	4d 89 f8	movq	%r15, %r8
10002f42e:	45 31 c9	xorl	%r9d, %r9d
10002f431:	ff 50 68	callq	*104(%rax)
10002f434:	89 c3	movl	%eax, %ebx
10002f436:	85 c0	testl	%eax, %eax
10002f438:	0f 84 69 05 00 00	je	0x10002f9a7
10002f43e:	48 8d 0d 81 0e 02 00	leaq	134785(%rip), %rcx ## literal pool for: "service start (%s)"
10002f445:	4c 89 ef	movq	%r13, %rdi
10002f448:	e9 b0 00 00 00	jmp	0x10002f4fd
10002f44d:	b8 16 00 00 00	movl	$22, %eax
10002f452:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f459:	4d 85 f6	testq	%r14, %r14
10002f45c:	0f 84 18 05 00 00	je	0x10002f97a
10002f462:	4c 89 f7	movq	%r14, %rdi
10002f465:	e8 5c 2c 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f46a:	48 3b 05 b7 8c 02 00	cmpq	167095(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002f471:	0f 85 03 05 00 00	jne	0x10002f97a
10002f477:	4c 89 f7	movq	%r14, %rdi
10002f47a:	e8 a7 2c 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002f47f:	49 89 c6	movq	%rax, %r14
10002f482:	48 8d bd b8 fb ff ff	leaq	-1096(%rbp), %rdi
10002f489:	4c 89 27	movq	%r12, (%rdi)
10002f48c:	48 89 c6	movq	%rax, %rsi
10002f48f:	e8 a7 ea ff ff	callq	0x10002df3b
10002f494:	48 85 c0	testq	%rax, %rax
10002f497:	0f 84 d8 01 00 00	je	0x10002f675
10002f49d:	4c 8b a5 b8 fb ff ff	movq	-1096(%rbp), %r12
10002f4a4:	41 0f b7 8c 24 08 04 00 00	movzwl	1032(%r12), %ecx
10002f4ad:	bb 7c 00 00 00	movl	$124, %ebx
10002f4b2:	f7 c1 03 02 00 00	testl	$515, %ecx
10002f4b8:	75 39	jne	0x10002f4f3
10002f4ba:	4d 8b 54 24 60	movq	96(%r12), %r10
10002f4bf:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002f4c4:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f4cc:	ba 08 00 00 00	movl	$8, %edx
10002f4d1:	48 89 c3	movq	%rax, %rbx
10002f4d4:	4c 89 e7	movq	%r12, %rdi
10002f4d7:	be 03 00 00 00	movl	$3, %esi
10002f4dc:	4d 89 f8	movq	%r15, %r8
10002f4df:	45 31 c9	xorl	%r9d, %r9d
10002f4e2:	41 ff 52 68	callq	*104(%r10)
10002f4e6:	48 89 d9	movq	%rbx, %rcx
10002f4e9:	89 c3	movl	%eax, %ebx
10002f4eb:	85 c0	testl	%eax, %eax
10002f4ed:	0f 84 f3 04 00 00	je	0x10002f9e6
10002f4f3:	48 8d 0d be fb 01 00	leaq	129982(%rip), %rcx ## literal pool for: "service stop (%s)"
10002f4fa:	4c 89 e7	movq	%r12, %rdi
10002f4fd:	4c 89 fe	movq	%r15, %rsi
10002f500:	89 da	movl	%ebx, %edx
10002f502:	4d 89 f0	movq	%r14, %r8
10002f505:	31 c0	xorl	%eax, %eax
10002f507:	e8 68 48 ff ff	callq	0x100023d74
10002f50c:	e9 92 02 00 00	jmp	0x10002f7a3
10002f511:	b8 16 00 00 00	movl	$22, %eax
10002f516:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f51d:	4d 85 f6	testq	%r14, %r14
10002f520:	0f 84 54 04 00 00	je	0x10002f97a
10002f526:	4c 89 f7	movq	%r14, %rdi
10002f529:	e8 98 2b 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f52e:	48 3b 05 f3 8b 02 00	cmpq	166899(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002f535:	0f 85 3f 04 00 00	jne	0x10002f97a
10002f53b:	4c 89 f7	movq	%r14, %rdi
10002f53e:	e8 e3 2b 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002f543:	48 8b 0d de 8a 02 00	movq	166622(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10002f54a:	48 8b 09	movq	(%rcx), %rcx
10002f54d:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
10002f551:	0f 85 93 07 00 00	jne	0x10002fcea
10002f557:	4c 89 e7	movq	%r12, %rdi
10002f55a:	4c 89 fe	movq	%r15, %rsi
10002f55d:	48 89 c2	movq	%rax, %rdx
10002f560:	31 c9	xorl	%ecx, %ecx
10002f562:	e9 f5 00 00 00	jmp	0x10002f65c
10002f567:	31 c0	xorl	%eax, %eax
10002f569:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f570:	31 ff	xorl	%edi, %edi
10002f572:	31 f6	xorl	%esi, %esi
10002f574:	e8 c7 29 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10002f579:	49 89 45 00	movq	%rax, (%r13)
10002f57d:	4c 89 f7	movq	%r14, %rdi
10002f580:	e8 c7 29 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10002f585:	48 85 c0	testq	%rax, %rax
10002f588:	0f 84 ec 03 00 00	je	0x10002f97a
10002f58e:	31 c0	xorl	%eax, %eax
10002f590:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f597:	31 db	xorl	%ebx, %ebx
10002f599:	4d 89 ef	movq	%r13, %r15
10002f59c:	4c 8b ad c0 fb ff ff	movq	-1088(%rbp), %r13
10002f5a3:	4c 89 f7	movq	%r14, %rdi
10002f5a6:	48 89 de	movq	%rbx, %rsi
10002f5a9:	e8 b0 29 01 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
10002f5ae:	4c 89 ef	movq	%r13, %rdi
10002f5b1:	4c 89 e6	movq	%r12, %rsi
10002f5b4:	48 89 c2	movq	%rax, %rdx
10002f5b7:	31 c9	xorl	%ecx, %ecx
10002f5b9:	e8 18 0b 00 00	callq	0x1000300d6
10002f5be:	49 8b 3f	movq	(%r15), %rdi
10002f5c1:	48 63 d0	movslq	%eax, %rdx
10002f5c4:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10002f5cb:	e8 ac 29 01 00	callq	0x100041f7c ## symbol stub for: _xpc_array_set_uint64
10002f5d0:	48 ff c3	incq	%rbx
10002f5d3:	4c 89 f7	movq	%r14, %rdi
10002f5d6:	e8 71 29 01 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10002f5db:	48 39 c3	cmpq	%rax, %rbx
10002f5de:	72 c3	jb	0x10002f5a3
10002f5e0:	e9 95 03 00 00	jmp	0x10002f97a
10002f5e5:	4c 89 ad c0 fb ff ff	movq	%r13, -1088(%rbp)
10002f5ec:	49 8b 44 24 60	movq	96(%r12), %rax
10002f5f1:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002f5f6:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f5fe:	4c 89 e7	movq	%r12, %rdi
10002f601:	be 04 00 00 00	movl	$4, %esi
10002f606:	31 d2	xorl	%edx, %edx
10002f608:	4d 89 f8	movq	%r15, %r8
10002f60b:	45 31 c9	xorl	%r9d, %r9d
10002f60e:	ff 50 68	callq	*104(%rax)
10002f611:	85 c0	testl	%eax, %eax
10002f613:	0f 84 c3 00 00 00	je	0x10002f6dc
10002f619:	48 8d 0d a8 0e 02 00	leaq	134824(%rip), %rcx ## literal pool for: "all services read"
10002f620:	4c 89 e7	movq	%r12, %rdi
10002f623:	4c 89 fe	movq	%r15, %rsi
10002f626:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f62d:	89 c2	movl	%eax, %edx
10002f62f:	31 c0	xorl	%eax, %eax
10002f631:	e8 3e 47 ff ff	callq	0x100023d74
10002f636:	e9 3f 03 00 00	jmp	0x10002f97a
10002f63b:	48 8b 05 e6 89 02 00	movq	166374(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002f642:	48 8b 00	movq	(%rax), %rax
10002f645:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002f649:	0f 85 9b 06 00 00	jne	0x10002fcea
10002f64f:	4c 89 e7	movq	%r12, %rdi
10002f652:	4c 89 fe	movq	%r15, %rsi
10002f655:	31 d2	xorl	%edx, %edx
10002f657:	b9 01 00 00 00	movl	$1, %ecx
10002f65c:	4d 89 e8	movq	%r13, %r8
10002f65f:	48 81 c4 28 04 00 00	addq	$1064, %rsp
10002f666:	5b	popq	%rbx
10002f667:	41 5c	popq	%r12
10002f669:	41 5d	popq	%r13
10002f66b:	41 5e	popq	%r14
10002f66d:	41 5f	popq	%r15
10002f66f:	5d	popq	%rbp
10002f670:	e9 cd 06 00 00	jmp	0x10002fd42
10002f675:	bb 03 00 00 00	movl	$3, %ebx
10002f67a:	e9 24 01 00 00	jmp	0x10002f7a3
10002f67f:	b8 03 00 00 00	movl	$3, %eax
10002f684:	e9 ea 02 00 00	jmp	0x10002f973
10002f689:	b8 16 00 00 00	movl	$22, %eax
10002f68e:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f695:	4d 85 f6	testq	%r14, %r14
10002f698:	0f 84 dc 02 00 00	je	0x10002f97a
10002f69e:	4c 89 e3	movq	%r12, %rbx
10002f6a1:	4d 89 fc	movq	%r15, %r12
10002f6a4:	4c 89 f7	movq	%r14, %rdi
10002f6a7:	e8 1a 2a 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f6ac:	48 3b 05 4d 8a 02 00	cmpq	166477(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10002f6b3:	0f 85 c1 02 00 00	jne	0x10002f97a
10002f6b9:	49 89 df	movq	%rbx, %r15
10002f6bc:	48 8b 43 60	movq	96(%rbx), %rax
10002f6c0:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
10002f6c7:	0f 85 44 04 00 00	jne	0x10002fb11
10002f6cd:	48 8d 15 06 0e 02 00	leaq	134662(%rip), %rdx ## literal pool for: "LAUNCH_KEY_SETUSERENVIRONMENT is only valid for user domains."
10002f6d4:	4c 89 ff	movq	%r15, %rdi
10002f6d7:	e9 9d 04 00 00	jmp	0x10002fb79
10002f6dc:	45 31 ed	xorl	%r13d, %r13d
10002f6df:	31 ff	xorl	%edi, %edi
10002f6e1:	31 f6	xorl	%esi, %esi
10002f6e3:	31 d2	xorl	%edx, %edx
10002f6e5:	e8 28 29 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10002f6ea:	49 89 c6	movq	%rax, %r14
10002f6ed:	4b 8b 9c ec 30 01 00 00	movq	304(%r12,%r13,8), %rbx
10002f6f5:	48 85 db	testq	%rbx, %rbx
10002f6f8:	74 3f	je	0x10002f739
10002f6fa:	48 89 df	movq	%rbx, %rdi
10002f6fd:	e8 2d c1 fe ff	callq	0x10001b82f
10002f702:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
10002f709:	48 85 c0	testq	%rax, %rax
10002f70c:	74 18	je	0x10002f726
10002f70e:	49 89 c7	movq	%rax, %r15
10002f711:	4c 89 f7	movq	%r14, %rdi
10002f714:	48 89 c2	movq	%rax, %rdx
10002f717:	e8 92 29 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002f71c:	4c 89 ff	movq	%r15, %rdi
10002f71f:	e8 d8 29 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002f724:	eb 0d	jmp	0x10002f733
10002f726:	ba 99 00 00 00	movl	$153, %edx
10002f72b:	4c 89 f7	movq	%r14, %rdi
10002f72e:	e8 6f 29 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10002f733:	48 8b 5b 68	movq	104(%rbx), %rbx
10002f737:	eb bc	jmp	0x10002f6f5
10002f739:	49 ff c5	incq	%r13
10002f73c:	49 83 fd 17	cmpq	$23, %r13
10002f740:	75 ab	jne	0x10002f6ed
10002f742:	49 8b 44 24 60	movq	96(%r12), %rax
10002f747:	48 8d 0d da 2a 03 00	leaq	207578(%rip), %rcx
10002f74e:	48 39 c8	cmpq	%rcx, %rax
10002f751:	0f 84 66 01 00 00	je	0x10002f8bd
10002f757:	48 8d 0d 52 2b 03 00	leaq	207698(%rip), %rcx
10002f75e:	48 39 c8	cmpq	%rcx, %rax
10002f761:	0f 84 88 01 00 00	je	0x10002f8ef
10002f767:	48 8d 0d 32 2a 03 00	leaq	207410(%rip), %rcx
10002f76e:	48 39 c8	cmpq	%rcx, %rax
10002f771:	0f 85 f0 01 00 00	jne	0x10002f967
10002f777:	4c 8d 25 d2 3d 03 00	leaq	212434(%rip), %r12
10002f77e:	e9 73 01 00 00	jmp	0x10002f8f6
10002f783:	81 e1 f7 ff 00 00	andl	$65527, %ecx
10002f789:	66 89 88 64 01 00 00	movw	%cx, 356(%rax)
10002f790:	48 8b 8d c0 fb ff ff	movq	-1088(%rbp), %rcx
10002f797:	48 89 81 f0 03 00 00	movq	%rax, 1008(%rcx)
10002f79e:	bb 24 00 00 00	movl	$36, %ebx
10002f7a3:	48 89 9d c8 fb ff ff	movq	%rbx, -1080(%rbp)
10002f7aa:	e9 cb 01 00 00	jmp	0x10002f97a
10002f7af:	b8 16 00 00 00	movl	$22, %eax
10002f7b4:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f7bb:	4d 85 f6	testq	%r14, %r14
10002f7be:	0f 84 b6 01 00 00	je	0x10002f97a
10002f7c4:	4c 89 f7	movq	%r14, %rdi
10002f7c7:	e8 fa 28 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10002f7cc:	48 3b 05 55 89 02 00	cmpq	166229(%rip), %rax ## literal pool symbol address: __xpc_type_string
10002f7d3:	0f 85 a1 01 00 00	jne	0x10002f97a
10002f7d9:	4c 89 f7	movq	%r14, %rdi
10002f7dc:	e8 45 29 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10002f7e1:	49 89 c6	movq	%rax, %r14
10002f7e4:	4c 89 e3	movq	%r12, %rbx
10002f7e7:	49 8b 44 24 60	movq	96(%r12), %rax
10002f7ec:	f6 80 80 00 00 00 02	testb	$2, 128(%rax)
10002f7f3:	0f 85 76 03 00 00	jne	0x10002fb6f
10002f7f9:	0f b7 8b 08 04 00 00	movzwl	1032(%rbx), %ecx
10002f800:	41 bc 7c 00 00 00	movl	$124, %r12d
10002f806:	f7 c1 03 02 00 00	testl	$515, %ecx
10002f80c:	75 2d	jne	0x10002f83b
10002f80e:	48 8b 4b 68	movq	104(%rbx), %rcx
10002f812:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f81a:	ba 08 00 00 00	movl	$8, %edx
10002f81f:	48 89 df	movq	%rbx, %rdi
10002f822:	be 03 00 00 00	movl	$3, %esi
10002f827:	4d 89 f8	movq	%r15, %r8
10002f82a:	45 31 c9	xorl	%r9d, %r9d
10002f82d:	ff 50 68	callq	*104(%rax)
10002f830:	41 89 c4	movl	%eax, %r12d
10002f833:	85 c0	testl	%eax, %eax
10002f835:	0f 84 79 04 00 00	je	0x10002fcb4
10002f83b:	48 8d 0d 16 0d 02 00	leaq	134422(%rip), %rcx ## literal pool for: "unset domain environment"
10002f842:	48 89 df	movq	%rbx, %rdi
10002f845:	4c 89 fe	movq	%r15, %rsi
10002f848:	44 89 e2	movl	%r12d, %edx
10002f84b:	31 c0	xorl	%eax, %eax
10002f84d:	e8 22 45 ff ff	callq	0x100023d74
10002f852:	44 89 e0	movl	%r12d, %eax
10002f855:	e9 19 01 00 00	jmp	0x10002f973
10002f85a:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002f863:	ba 7c 00 00 00	movl	$124, %edx
10002f868:	a9 03 02 00 00	testl	$515, %eax
10002f86d:	75 35	jne	0x10002f8a4
10002f86f:	4c 89 eb	movq	%r13, %rbx
10002f872:	49 8b 44 24 60	movq	96(%r12), %rax
10002f877:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002f87c:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002f884:	ba 08 00 00 00	movl	$8, %edx
10002f889:	4c 89 e7	movq	%r12, %rdi
10002f88c:	be 03 00 00 00	movl	$3, %esi
10002f891:	4d 89 f8	movq	%r15, %r8
10002f894:	45 31 c9	xorl	%r9d, %r9d
10002f897:	ff 50 68	callq	*104(%rax)
10002f89a:	89 c2	movl	%eax, %edx
10002f89c:	85 c0	testl	%eax, %eax
10002f89e:	0f 84 20 03 00 00	je	0x10002fbc4
10002f8a4:	48 8d 0d c6 0c 02 00	leaq	134342(%rip), %rcx ## literal pool for: "domain shutdown"
10002f8ab:	4c 89 e7	movq	%r12, %rdi
10002f8ae:	4c 89 fe	movq	%r15, %rsi
10002f8b1:	48 89 95 c8 fb ff ff	movq	%rdx, -1080(%rbp)
10002f8b8:	e9 72 fd ff ff	jmp	0x10002f62f
10002f8bd:	49 81 c4 d0 03 00 00	addq	$976, %r12
10002f8c4:	eb 30	jmp	0x10002f8f6
10002f8c6:	48 8d 15 e3 08 02 00	leaq	133347(%rip), %rdx ## literal pool for: "rlimit(3)? Really?"
10002f8cd:	eb 07	jmp	0x10002f8d6
10002f8cf:	48 8d 15 97 08 02 00	leaq	133271(%rip), %rdx ## literal pool for: "LAUNCH_KEY_SINGLEUSER never did anything anyway."
10002f8d6:	4c 89 e7	movq	%r12, %rdi
10002f8d9:	be 05 00 00 00	movl	$5, %esi
10002f8de:	31 c0	xorl	%eax, %eax
10002f8e0:	e8 44 0b ff ff	callq	0x100020429
10002f8e5:	b8 7e 00 00 00	movl	$126, %eax
10002f8ea:	e9 84 00 00 00	jmp	0x10002f973
10002f8ef:	49 81 c4 c8 00 00 00	addq	$200, %r12
10002f8f6:	4d 8b 24 24	movq	(%r12), %r12
10002f8fa:	4d 85 e4	testq	%r12, %r12
10002f8fd:	74 68	je	0x10002f967
10002f8ff:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002f908:	a9 03 02 00 00	testl	$515, %eax
10002f90d:	75 58	jne	0x10002f967
10002f90f:	45 31 ed	xorl	%r13d, %r13d
10002f912:	4b 8b 9c ec 30 01 00 00	movq	304(%r12,%r13,8), %rbx
10002f91a:	48 85 db	testq	%rbx, %rbx
10002f91d:	74 3f	je	0x10002f95e
10002f91f:	48 89 df	movq	%rbx, %rdi
10002f922:	e8 08 bf fe ff	callq	0x10001b82f
10002f927:	48 8d b3 18 05 00 00	leaq	1304(%rbx), %rsi
10002f92e:	48 85 c0	testq	%rax, %rax
10002f931:	74 18	je	0x10002f94b
10002f933:	49 89 c7	movq	%rax, %r15
10002f936:	4c 89 f7	movq	%r14, %rdi
10002f939:	48 89 c2	movq	%rax, %rdx
10002f93c:	e8 6d 27 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10002f941:	4c 89 ff	movq	%r15, %rdi
10002f944:	e8 b3 27 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002f949:	eb 0d	jmp	0x10002f958
10002f94b:	ba 99 00 00 00	movl	$153, %edx
10002f950:	4c 89 f7	movq	%r14, %rdi
10002f953:	e8 4a 27 01 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10002f958:	48 8b 5b 68	movq	104(%rbx), %rbx
10002f95c:	eb bc	jmp	0x10002f91a
10002f95e:	49 ff c5	incq	%r13
10002f961:	49 83 fd 17	cmpq	$23, %r13
10002f965:	75 ab	jne	0x10002f912
10002f967:	48 8b 85 c0 fb ff ff	movq	-1088(%rbp), %rax
10002f96e:	4c 89 30	movq	%r14, (%rax)
10002f971:	31 c0	xorl	%eax, %eax
10002f973:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002f97a:	48 8b 05 a7 86 02 00	movq	165543(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002f981:	48 8b 00	movq	(%rax), %rax
10002f984:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002f988:	0f 85 5c 03 00 00	jne	0x10002fcea
10002f98e:	48 8b 85 c8 fb ff ff	movq	-1080(%rbp), %rax
10002f995:	48 81 c4 28 04 00 00	addq	$1064, %rsp
10002f99c:	5b	popq	%rbx
10002f99d:	41 5c	popq	%r12
10002f99f:	41 5d	popq	%r13
10002f9a1:	41 5e	popq	%r14
10002f9a3:	41 5f	popq	%r15
10002f9a5:	5d	popq	%rbp
10002f9a6:	c3	retq
10002f9a7:	4c 89 e7	movq	%r12, %rdi
10002f9aa:	be 09 00 00 00	movl	$9, %esi
10002f9af:	e8 10 b5 fe ff	callq	0x10001aec4
10002f9b4:	89 c1	movl	%eax, %ecx
10002f9b6:	83 e1 fe	andl	$-2, %ecx
10002f9b9:	83 f9 24	cmpl	$36, %ecx
10002f9bc:	b9 00 00 00 00	movl	$0, %ecx
10002f9c1:	0f 45 c8	cmovnel	%eax, %ecx
10002f9c4:	89 cb	movl	%ecx, %ebx
10002f9c6:	85 c9	testl	%ecx, %ecx
10002f9c8:	0f 85 d5 fd ff ff	jne	0x10002f7a3
10002f9ce:	31 db	xorl	%ebx, %ebx
10002f9d0:	31 ff	xorl	%edi, %edi
10002f9d2:	e8 5b 27 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002f9d7:	48 8b 8d c0 fb ff ff	movq	-1088(%rbp), %rcx
10002f9de:	48 89 01	movq	%rax, (%rcx)
10002f9e1:	e9 bd fd ff ff	jmp	0x10002f7a3
10002f9e6:	4c 8d b5 d0 fb ff ff	leaq	-1072(%rbp), %r14
10002f9ed:	ba 00 04 00 00	movl	$1024, %edx
10002f9f2:	48 89 cb	movq	%rcx, %rbx
10002f9f5:	4c 89 f7	movq	%r14, %rdi
10002f9f8:	be aa 00 00 00	movl	$170, %esi
10002f9fd:	e8 d8 21 01 00	callq	0x100041bda ## symbol stub for: _memset
10002fa02:	41 8b 7f 14	movl	20(%r15), %edi
10002fa06:	4c 89 f6	movq	%r14, %rsi
10002fa09:	e8 da dc ff ff	callq	0x10002d6e8
10002fa0e:	49 89 d9	movq	%rbx, %r9
10002fa11:	49 81 c1 18 05 00 00	addq	$1304, %r9
10002fa18:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002fa20:	48 8d 15 a1 ec 01 00	leaq	126113(%rip), %rdx ## literal pool for: "%s: caller = %s, service = %s, value = 0x%llx"
10002fa27:	48 8d 0d 9c f6 01 00	leaq	128668(%rip), %rcx ## literal pool for: "legacy-stop service"
10002fa2e:	4c 89 e7	movq	%r12, %rdi
10002fa31:	be 05 00 00 00	movl	$5, %esi
10002fa36:	4d 89 f0	movq	%r14, %r8
10002fa39:	31 c0	xorl	%eax, %eax
10002fa3b:	e8 e9 09 ff ff	callq	0x100020429
10002fa40:	48 89 df	movq	%rbx, %rdi
10002fa43:	e8 76 b5 fe ff	callq	0x10001afbe
10002fa48:	89 c3	movl	%eax, %ebx
10002fa4a:	85 c0	testl	%eax, %eax
10002fa4c:	0f 85 51 fd ff ff	jne	0x10002f7a3
10002fa52:	31 ff	xorl	%edi, %edi
10002fa54:	e8 d9 26 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002fa59:	49 89 45 00	movq	%rax, (%r13)
10002fa5d:	31 db	xorl	%ebx, %ebx
10002fa5f:	e9 3f fd ff ff	jmp	0x10002f7a3
10002fa64:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
10002fa6b:	ba 00 04 00 00	movl	$1024, %edx
10002fa70:	be aa 00 00 00	movl	$170, %esi
10002fa75:	e8 60 21 01 00	callq	0x100041bda ## symbol stub for: _memset
10002fa7a:	41 8b 7f 14	movl	20(%r15), %edi
10002fa7e:	4c 8d bd d0 fb ff ff	leaq	-1072(%rbp), %r15
10002fa85:	4c 89 fe	movq	%r15, %rsi
10002fa88:	e8 5b dc ff ff	callq	0x10002d6e8
10002fa8d:	4d 89 e9	movq	%r13, %r9
10002fa90:	49 81 c1 18 05 00 00	addq	$1304, %r9
10002fa97:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002fa9f:	48 8d 15 22 ec 01 00	leaq	125986(%rip), %rdx ## literal pool for: "%s: caller = %s, service = %s, value = 0x%llx"
10002faa6:	48 8d 0d d1 07 02 00	leaq	133073(%rip), %rcx ## literal pool for: "legacy-remove service"
10002faad:	4c 89 e7	movq	%r12, %rdi
10002fab0:	be 05 00 00 00	movl	$5, %esi
10002fab5:	4d 89 f8	movq	%r15, %r8
10002fab8:	31 c0	xorl	%eax, %eax
10002faba:	e8 6a 09 ff ff	callq	0x100020429
10002fabf:	4c 89 e7	movq	%r12, %rdi
10002fac2:	4c 89 ee	movq	%r13, %rsi
10002fac5:	e8 82 1e ff ff	callq	0x10002194c
10002faca:	85 c0	testl	%eax, %eax
10002facc:	0f 84 a8 01 00 00	je	0x10002fc7a
10002fad2:	41 89 c7	movl	%eax, %r15d
10002fad5:	83 f8 24	cmpl	$36, %eax
10002fad8:	4c 89 bd c8 fb ff ff	movq	%r15, -1080(%rbp)
10002fadf:	0f 84 95 fe ff ff	je	0x10002f97a
10002fae5:	44 89 ff	movl	%r15d, %edi
10002fae8:	e8 21 26 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10002faed:	48 8d 15 a0 07 02 00	leaq	133024(%rip), %rdx ## literal pool for: "Could not stop service: name = %s, error = %d: %s"
10002faf4:	4c 89 ef	movq	%r13, %rdi
10002faf7:	be 03 00 00 00	movl	$3, %esi
10002fafc:	4c 89 f1	movq	%r14, %rcx
10002faff:	45 89 f8	movl	%r15d, %r8d
10002fb02:	49 89 c1	movq	%rax, %r9
10002fb05:	31 c0	xorl	%eax, %eax
10002fb07:	e8 ae 64 fe ff	callq	0x100015fba
10002fb0c:	e9 69 fe ff ff	jmp	0x10002f97a
10002fb11:	41 0f b7 8f 08 04 00 00	movzwl	1032(%r15), %ecx
10002fb19:	bb 7c 00 00 00	movl	$124, %ebx
10002fb1e:	f7 c1 03 02 00 00	testl	$515, %ecx
10002fb24:	75 2c	jne	0x10002fb52
10002fb26:	49 8b 4f 68	movq	104(%r15), %rcx
10002fb2a:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002fb32:	ba 08 00 00 00	movl	$8, %edx
10002fb37:	4c 89 ff	movq	%r15, %rdi
10002fb3a:	be 03 00 00 00	movl	$3, %esi
10002fb3f:	4d 89 e0	movq	%r12, %r8
10002fb42:	45 31 c9	xorl	%r9d, %r9d
10002fb45:	ff 50 68	callq	*104(%rax)
10002fb48:	89 c3	movl	%eax, %ebx
10002fb4a:	85 c0	testl	%eax, %eax
10002fb4c:	0f 84 37 01 00 00	je	0x10002fc89
10002fb52:	48 8d 0d 0e f6 01 00	leaq	128526(%rip), %rcx ## literal pool for: "set domain environment"
10002fb59:	4c 89 ff	movq	%r15, %rdi
10002fb5c:	4c 89 e6	movq	%r12, %rsi
10002fb5f:	89 da	movl	%ebx, %edx
10002fb61:	31 c0	xorl	%eax, %eax
10002fb63:	e8 0c 42 ff ff	callq	0x100023d74
10002fb68:	89 d8	movl	%ebx, %eax
10002fb6a:	e9 04 fe ff ff	jmp	0x10002f973
10002fb6f:	48 8d 15 a2 09 02 00	leaq	133538(%rip), %rdx ## literal pool for: "LAUNCH_KEY_UNSETUSERENVIRONMENT is only valid for user domains."
10002fb76:	48 89 df	movq	%rbx, %rdi
10002fb79:	be 03 00 00 00	movl	$3, %esi
10002fb7e:	31 c0	xorl	%eax, %eax
10002fb80:	e8 a4 08 ff ff	callq	0x100020429
10002fb85:	b8 7d 00 00 00	movl	$125, %eax
10002fb8a:	e9 e4 fd ff ff	jmp	0x10002f973
10002fb8f:	48 8b 05 92 84 02 00	movq	165010(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002fb96:	48 8b 00	movq	(%rax), %rax
10002fb99:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002fb9d:	0f 85 47 01 00 00	jne	0x10002fcea
10002fba3:	4c 89 e7	movq	%r12, %rdi
10002fba6:	4c 89 fe	movq	%r15, %rsi
10002fba9:	31 d2	xorl	%edx, %edx
10002fbab:	4c 89 e9	movq	%r13, %rcx
10002fbae:	48 81 c4 28 04 00 00	addq	$1064, %rsp
10002fbb5:	5b	popq	%rbx
10002fbb6:	41 5c	popq	%r12
10002fbb8:	41 5d	popq	%r13
10002fbba:	41 5e	popq	%r14
10002fbbc:	41 5f	popq	%r15
10002fbbe:	5d	popq	%rbp
10002fbbf:	e9 2f 04 00 00	jmp	0x10002fff3
10002fbc4:	41 0f b7 84 24 08 04 00 00	movzwl	1032(%r12), %eax
10002fbcd:	b9 25 00 00 00	movl	$37, %ecx
10002fbd2:	48 89 8d c8 fb ff ff	movq	%rcx, -1080(%rbp)
10002fbd9:	a9 03 02 00 00	testl	$515, %eax
10002fbde:	0f 85 96 fd ff ff	jne	0x10002f97a
10002fbe4:	4d 89 e5	movq	%r12, %r13
10002fbe7:	4c 8d b5 d0 fb ff ff	leaq	-1072(%rbp), %r14
10002fbee:	ba 00 04 00 00	movl	$1024, %edx
10002fbf3:	4c 89 f7	movq	%r14, %rdi
10002fbf6:	be aa 00 00 00	movl	$170, %esi
10002fbfb:	e8 da 1f 01 00	callq	0x100041bda ## symbol stub for: _memset
10002fc00:	41 8b 7f 14	movl	20(%r15), %edi
10002fc04:	4c 89 f6	movq	%r14, %rsi
10002fc07:	e8 dc da ff ff	callq	0x10002d6e8
10002fc0c:	48 8d 15 6e 09 02 00	leaq	133486(%rip), %rdx ## literal pool for: "legacy shutdown initiated by: %s"
10002fc13:	4d 89 e7	movq	%r12, %r15
10002fc16:	4c 89 ef	movq	%r13, %rdi
10002fc19:	be 05 00 01 00	movl	$65541, %esi
10002fc1e:	4c 89 f1	movq	%r14, %rcx
10002fc21:	31 c0	xorl	%eax, %eax
10002fc23:	e8 01 08 ff ff	callq	0x100020429
10002fc28:	48 8d 15 73 09 02 00	leaq	133491(%rip), %rdx ## literal pool for: "legacy shutdown, caller = %s"
10002fc2f:	4c 89 ef	movq	%r13, %rdi
10002fc32:	be 05 00 00 00	movl	$5, %esi
10002fc37:	4c 89 f1	movq	%r14, %rcx
10002fc3a:	31 c0	xorl	%eax, %eax
10002fc3c:	e8 e8 07 ff ff	callq	0x100020429
10002fc41:	41 8b bd 90 00 00 00	movl	144(%r13), %edi
10002fc48:	be ff ff ff ff	movl	$4294967295, %esi
10002fc4d:	4c 89 ea	movq	%r13, %rdx
10002fc50:	e8 f9 a0 fd ff	callq	0x100009d4e
10002fc55:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002fc5c:	85 c0	testl	%eax, %eax
10002fc5e:	75 6f	jne	0x10002fccf
10002fc60:	41 c7 87 90 00 00 00 00 00 00 00	movl	$0, 144(%r15)
10002fc6b:	31 ff	xorl	%edi, %edi
10002fc6d:	e8 c0 24 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002fc72:	48 89 03	movq	%rax, (%rbx)
10002fc75:	e9 00 fd ff ff	jmp	0x10002f97a
10002fc7a:	31 ff	xorl	%edi, %edi
10002fc7c:	e8 b1 24 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002fc81:	48 89 03	movq	%rax, (%rbx)
10002fc84:	e9 e8 fc ff ff	jmp	0x10002f971
10002fc89:	31 c0	xorl	%eax, %eax
10002fc8b:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002fc92:	31 ff	xorl	%edi, %edi
10002fc94:	e8 99 24 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002fc99:	49 89 45 00	movq	%rax, (%r13)
10002fc9d:	48 8d 15 dd 0a 00 00	leaq	2781(%rip), %rdx
10002fca4:	4c 89 f7	movq	%r14, %rdi
10002fca7:	4c 89 fe	movq	%r15, %rsi
10002fcaa:	e8 57 23 01 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10002fcaf:	e9 c6 fc ff ff	jmp	0x10002f97a
10002fcb4:	31 c0	xorl	%eax, %eax
10002fcb6:	48 89 85 c8 fb ff ff	movq	%rax, -1080(%rbp)
10002fcbd:	48 89 df	movq	%rbx, %rdi
10002fcc0:	4c 89 f6	movq	%r14, %rsi
10002fcc3:	31 d2	xorl	%edx, %edx
10002fcc5:	e8 d7 e7 ff ff	callq	0x10002e4a1
10002fcca:	e9 ab fc ff ff	jmp	0x10002f97a
10002fccf:	48 63 95 c8 fb ff ff	movslq	-1080(%rbp), %rdx
10002fcd6:	48 8d 3d 2b 07 ff ff	leaq	-63701(%rip), %rdi
10002fcdd:	4c 89 fe	movq	%r15, %rsi
10002fce0:	e8 c3 1a 01 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10002fce5:	e9 90 fc ff ff	jmp	0x10002f97a
10002fcea:	e8 83 1a 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002fcef:	55	pushq	%rbp
10002fcf0:	48 89 e5	movq	%rsp, %rbp
10002fcf3:	53	pushq	%rbx
10002fcf4:	50	pushq	%rax
10002fcf5:	48 89 d3	movq	%rdx, %rbx
10002fcf8:	48 89 f1	movq	%rsi, %rcx
10002fcfb:	48 89 fa	movq	%rdi, %rdx
10002fcfe:	48 8b 3b	movq	(%rbx), %rdi
10002fd01:	48 8b 73 08	movq	8(%rbx), %rsi
10002fd05:	4c 8d 45 f0	leaq	-16(%rbp), %r8
10002fd09:	49 c7 00 00 00 00 00	movq	$0, (%r8)
10002fd10:	e8 3e f3 ff ff	callq	0x10002f053
10002fd15:	85 c0	testl	%eax, %eax
10002fd17:	74 0c	je	0x10002fd25
10002fd19:	48 63 f8	movslq	%eax, %rdi
10002fd1c:	e8 11 24 01 00	callq	0x100042132 ## symbol stub for: _xpc_uint64_create
10002fd21:	48 89 45 f0	movq	%rax, -16(%rbp)
10002fd25:	48 8b 7b 10	movq	16(%rbx), %rdi
10002fd29:	48 85 ff	testq	%rdi, %rdi
10002fd2c:	74 05	je	0x10002fd33
10002fd2e:	e8 c9 23 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10002fd33:	48 8b 45 f0	movq	-16(%rbp), %rax
10002fd37:	48 89 43 10	movq	%rax, 16(%rbx)
10002fd3b:	48 83 c4 08	addq	$8, %rsp
10002fd3f:	5b	popq	%rbx
10002fd40:	5d	popq	%rbp
10002fd41:	c3	retq
10002fd42:	55	pushq	%rbp
10002fd43:	48 89 e5	movq	%rsp, %rbp
10002fd46:	41 57	pushq	%r15
10002fd48:	41 56	pushq	%r14
10002fd4a:	41 55	pushq	%r13
10002fd4c:	41 54	pushq	%r12
10002fd4e:	53	pushq	%rbx
10002fd4f:	48 83 ec 68	subq	$104, %rsp
10002fd53:	41 89 cc	movl	%ecx, %r12d
10002fd56:	48 89 d1	movq	%rdx, %rcx
10002fd59:	49 89 f6	movq	%rsi, %r14
10002fd5c:	48 8b 05 c5 82 02 00	movq	164549(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002fd63:	48 8b 00	movq	(%rax), %rax
10002fd66:	48 89 45 d0	movq	%rax, -48(%rbp)
10002fd6a:	48 89 7d 88	movq	%rdi, -120(%rbp)
10002fd6e:	45 89 e7	movl	%r12d, %r15d
10002fd71:	41 80 f7 01	xorb	$1, %r15b
10002fd75:	48 85 d2	testq	%rdx, %rdx
10002fd78:	74 23	je	0x10002fd9d
10002fd7a:	45 84 ff	testb	%r15b, %r15b
10002fd7d:	75 1e	jne	0x10002fd9d
10002fd7f:	48 8d 15 53 05 02 00	leaq	132435(%rip), %rdx ## literal pool for: "Caller tried to check into a named job: %s"
10002fd86:	be 03 00 00 00	movl	$3, %esi
10002fd8b:	31 c0	xorl	%eax, %eax
10002fd8d:	e8 97 06 ff ff	callq	0x100020429
10002fd92:	41 bd 01 00 00 00	movl	$1, %r13d
10002fd98:	e9 dc 01 00 00	jmp	0x10002ff79
10002fd9d:	4c 89 85 78 ff ff ff	movq	%r8, -136(%rbp)
10002fda4:	48 85 c9	testq	%rcx, %rcx
10002fda7:	74 0e	je	0x10002fdb7
10002fda9:	48 8d 7d 88	leaq	-120(%rbp), %rdi
10002fdad:	48 89 ce	movq	%rcx, %rsi
10002fdb0:	e8 86 e1 ff ff	callq	0x10002df3b
10002fdb5:	eb 0f	jmp	0x10002fdc6
10002fdb7:	41 8b 76 14	movl	20(%r14), %esi
10002fdbb:	48 8d 7d 88	leaq	-120(%rbp), %rdi
10002fdbf:	31 d2	xorl	%edx, %edx
10002fdc1:	e8 c7 5d ff ff	callq	0x100025b8d
10002fdc6:	48 89 c3	movq	%rax, %rbx
10002fdc9:	48 85 c0	testq	%rax, %rax
10002fdcc:	0f 95 c0	setne	%al
10002fdcf:	44 08 f8	orb	%r15b, %al
10002fdd2:	0f 85 c1 00 00 00	jne	0x10002fe99
10002fdd8:	0f 28 05 a1 34 01 00	movaps	79009(%rip), %xmm0
10002fddf:	4c 8d 6d 90	leaq	-112(%rbp), %r13
10002fde3:	41 0f 29 45 30	movaps	%xmm0, 48(%r13)
10002fde8:	41 0f 29 45 20	movaps	%xmm0, 32(%r13)
10002fded:	41 0f 29 45 10	movaps	%xmm0, 16(%r13)
10002fdf2:	41 0f 29 45 00	movaps	%xmm0, (%r13)
10002fdf7:	4c 89 75 80	movq	%r14, -128(%rbp)
10002fdfb:	45 8b 76 14	movl	20(%r14), %r14d
10002fdff:	41 83 fe 02	cmpl	$2, %r14d
10002fe03:	7c 4b	jl	0x10002fe50
10002fe05:	44 89 f7	movl	%r14d, %edi
10002fe08:	4c 89 ee	movq	%r13, %rsi
10002fe0b:	e8 ee 49 00 00	callq	0x1000347fe
10002fe10:	85 c0	testl	%eax, %eax
10002fe12:	75 3c	jne	0x10002fe50
10002fe14:	f6 45 b1 08	testb	$8, -79(%rbp)
10002fe18:	75 36	jne	0x10002fe50
10002fe1a:	44 8b 75 94	movl	-108(%rbp), %r14d
10002fe1e:	44 89 f7	movl	%r14d, %edi
10002fe21:	e8 a0 ae fe ff	callq	0x10001acc6
10002fe26:	48 85 c0	testq	%rax, %rax
10002fe29:	74 d4	je	0x10002fdff
10002fe2b:	48 89 c3	movq	%rax, %rbx
10002fe2e:	4c 8b 6d 88	movq	-120(%rbp), %r13
10002fe32:	4c 39 a8 e8 00 00 00	cmpq	%r13, 232(%rax)
10002fe39:	75 1b	jne	0x10002fe56
10002fe3b:	41 b6 01	movb	$1, %r14b
10002fe3e:	48 83 bb b0 00 00 00 00	cmpq	$0, 176(%rbx)
10002fe46:	75 74	jne	0x10002febc
10002fe48:	31 db	xorl	%ebx, %ebx
10002fe4a:	4c 8b 75 80	movq	-128(%rbp), %r14
10002fe4e:	eb 49	jmp	0x10002fe99
10002fe50:	4c 8b 6d 88	movq	-120(%rbp), %r13
10002fe54:	31 db	xorl	%ebx, %ebx
10002fe56:	48 8d 75 90	leaq	-112(%rbp), %rsi
10002fe5a:	0f 28 05 1f 34 01 00	movaps	78879(%rip), %xmm0
10002fe61:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10002fe65:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10002fe69:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10002fe6d:	0f 29 06	movaps	%xmm0, (%rsi)
10002fe70:	4c 8b 75 80	movq	-128(%rbp), %r14
10002fe74:	4c 89 f7	movq	%r14, %rdi
10002fe77:	e8 e1 49 00 00	callq	0x10003485d
10002fe7c:	45 8b 46 14	movl	20(%r14), %r8d
10002fe80:	48 8d 15 7d 04 02 00	leaq	132221(%rip), %rdx ## literal pool for: "Check-in attempt by unmanaged service: %s.%d"
10002fe87:	4c 89 ef	movq	%r13, %rdi
10002fe8a:	be 05 00 00 00	movl	$5, %esi
10002fe8f:	48 89 c1	movq	%rax, %rcx
10002fe92:	31 c0	xorl	%eax, %eax
10002fe94:	e8 90 05 ff ff	callq	0x100020429
10002fe99:	41 bd 03 00 00 00	movl	$3, %r13d
10002fe9f:	48 85 db	testq	%rbx, %rbx
10002fea2:	0f 84 d1 00 00 00	je	0x10002ff79
10002fea8:	83 bb 18 01 00 00 00	cmpl	$0, 280(%rbx)
10002feaf:	0f 85 c4 00 00 00	jne	0x10002ff79
10002feb5:	4c 89 75 80	movq	%r14, -128(%rbp)
10002feb9:	45 31 f6	xorl	%r14d, %r14d
10002febc:	45 84 e4	testb	%r12b, %r12b
10002febf:	74 3e	je	0x10002feff
10002fec1:	48 89 df	movq	%rbx, %rdi
10002fec4:	e8 38 b9 fe ff	callq	0x10001b801
10002fec9:	45 08 f7	orb	%r14b, %r15b
10002fecc:	75 0d	jne	0x10002fedb
10002fece:	48 8b 4d 80	movq	-128(%rbp), %rcx
10002fed2:	3b 41 14	cmpl	20(%rcx), %eax
10002fed5:	0f 85 c0 00 00 00	jne	0x10002ff9b
10002fedb:	48 89 df	movq	%rbx, %rdi
10002fede:	e8 4c b9 fe ff	callq	0x10001b82f
10002fee3:	49 89 c7	movq	%rax, %r15
10002fee6:	41 80 f6 01	xorb	$1, %r14b
10002feea:	48 8b 7d 88	movq	-120(%rbp), %rdi
10002feee:	41 0f b6 ce	movzbl	%r14b, %ecx
10002fef2:	48 89 de	movq	%rbx, %rsi
10002fef5:	48 89 c2	movq	%rax, %rdx
10002fef8:	e8 27 06 00 00	callq	0x100030524
10002fefd:	eb 6d	jmp	0x10002ff6c
10002feff:	4c 8b 65 88	movq	-120(%rbp), %r12
10002ff03:	49 8b 44 24 60	movq	96(%r12), %rax
10002ff08:	49 8b 4c 24 68	movq	104(%r12), %rcx
10002ff0d:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10002ff15:	ba 08 00 00 00	movl	$8, %edx
10002ff1a:	4c 89 e7	movq	%r12, %rdi
10002ff1d:	be 04 00 00 00	movl	$4, %esi
10002ff22:	4c 8b 75 80	movq	-128(%rbp), %r14
10002ff26:	4d 89 f0	movq	%r14, %r8
10002ff29:	45 31 c9	xorl	%r9d, %r9d
10002ff2c:	ff 50 68	callq	*104(%rax)
10002ff2f:	85 c0	testl	%eax, %eax
10002ff31:	74 1b	je	0x10002ff4e
10002ff33:	41 89 c5	movl	%eax, %r13d
10002ff36:	48 8d 0d f4 03 02 00	leaq	132084(%rip), %rcx ## literal pool for: "service read"
10002ff3d:	4c 89 e7	movq	%r12, %rdi
10002ff40:	4c 89 f6	movq	%r14, %rsi
10002ff43:	89 c2	movl	%eax, %edx
10002ff45:	31 c0	xorl	%eax, %eax
10002ff47:	e8 28 3e ff ff	callq	0x100023d74
10002ff4c:	eb 2b	jmp	0x10002ff79
10002ff4e:	48 89 df	movq	%rbx, %rdi
10002ff51:	e8 ab b8 fe ff	callq	0x10001b801
10002ff56:	48 89 df	movq	%rbx, %rdi
10002ff59:	e8 d1 b8 fe ff	callq	0x10001b82f
10002ff5e:	49 89 c7	movq	%rax, %r15
10002ff61:	48 89 df	movq	%rbx, %rdi
10002ff64:	48 89 c6	movq	%rax, %rsi
10002ff67:	e8 ac e2 ff ff	callq	0x10002e218
10002ff6c:	48 8b 85 78 ff ff ff	movq	-136(%rbp), %rax
10002ff73:	4c 89 38	movq	%r15, (%rax)
10002ff76:	45 31 ed	xorl	%r13d, %r13d
10002ff79:	48 8b 05 a8 80 02 00	movq	164008(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10002ff80:	48 8b 00	movq	(%rax), %rax
10002ff83:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10002ff87:	75 65	jne	0x10002ffee
10002ff89:	44 89 e8	movl	%r13d, %eax
10002ff8c:	48 83 c4 68	addq	$104, %rsp
10002ff90:	5b	popq	%rbx
10002ff91:	41 5c	popq	%r12
10002ff93:	41 5d	popq	%r13
10002ff95:	41 5e	popq	%r14
10002ff97:	41 5f	popq	%r15
10002ff99:	5d	popq	%rbp
10002ff9a:	c3	retq
10002ff9b:	0f 28 05 de 32 01 00	movaps	78558(%rip), %xmm0
10002ffa2:	48 8d 75 90	leaq	-112(%rbp), %rsi
10002ffa6:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10002ffaa:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10002ffae:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10002ffb2:	0f 29 06	movaps	%xmm0, (%rsi)
10002ffb5:	4c 8b 75 80	movq	-128(%rbp), %r14
10002ffb9:	4c 89 f7	movq	%r14, %rdi
10002ffbc:	e8 9c 48 00 00	callq	0x10003485d
10002ffc1:	48 8b 7d 88	movq	-120(%rbp), %rdi
10002ffc5:	45 8b 46 14	movl	20(%r14), %r8d
10002ffc9:	48 81 c3 18 05 00 00	addq	$1304, %rbx
10002ffd0:	48 8d 15 67 03 02 00	leaq	131943(%rip), %rdx ## literal pool for: "Unprivileged caller tried to check into job's endpoints: caller = %s.%d, owner = %s"
10002ffd7:	be 03 00 00 00	movl	$3, %esi
10002ffdc:	48 89 c1	movq	%rax, %rcx
10002ffdf:	49 89 d9	movq	%rbx, %r9
10002ffe2:	31 c0	xorl	%eax, %eax
10002ffe4:	e8 40 04 ff ff	callq	0x100020429
10002ffe9:	e9 a4 fd ff ff	jmp	0x10002fd92
10002ffee:	e8 7f 17 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10002fff3:	55	pushq	%rbp
10002fff4:	48 89 e5	movq	%rsp, %rbp
10002fff7:	41 57	pushq	%r15
10002fff9:	41 56	pushq	%r14
10002fffb:	41 55	pushq	%r13
10002fffd:	41 54	pushq	%r12
10002ffff:	53	pushq	%rbx
100030000:	48 81 ec a8 00 00 00	subq	$168, %rsp
100030007:	49 89 ce	movq	%rcx, %r14
10003000a:	41 89 d7	movl	%edx, %r15d
10003000d:	49 89 f4	movq	%rsi, %r12
100030010:	49 89 fd	movq	%rdi, %r13
100030013:	48 8b 47 60	movq	96(%rdi), %rax
100030017:	48 8b 4f 68	movq	104(%rdi), %rcx
10003001b:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100030023:	ba 08 00 00 00	movl	$8, %edx
100030028:	be 04 00 00 00	movl	$4, %esi
10003002d:	4d 89 e0	movq	%r12, %r8
100030030:	45 31 c9	xorl	%r9d, %r9d
100030033:	ff 50 68	callq	*104(%rax)
100030036:	85 c0	testl	%eax, %eax
100030038:	74 1a	je	0x100030054
10003003a:	89 c3	movl	%eax, %ebx
10003003c:	48 8d 0d 7c 05 02 00	leaq	132476(%rip), %rcx ## literal pool for: "read resource usage"
100030043:	4c 89 ef	movq	%r13, %rdi
100030046:	4c 89 e6	movq	%r12, %rsi
100030049:	89 c2	movl	%eax, %edx
10003004b:	31 c0	xorl	%eax, %eax
10003004d:	e8 22 3d ff ff	callq	0x100023d74
100030052:	eb 64	jmp	0x1000300b8
100030054:	0f 28 05 25 32 01 00	movaps	78373(%rip), %xmm0
10003005b:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
100030062:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
100030069:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
10003006d:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
100030071:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
100030075:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
100030079:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10003007d:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100030081:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100030085:	0f 29 06	movaps	%xmm0, (%rsi)
100030088:	44 89 ff	movl	%r15d, %edi
10003008b:	e8 18 1a 01 00	callq	0x100041aa8 ## symbol stub for: _getrusage
100030090:	85 c0	testl	%eax, %eax
100030092:	74 0e	je	0x1000300a2
100030094:	83 f8 ff	cmpl	$-1, %eax
100030097:	74 33	je	0x1000300cc
100030099:	e8 c2 16 01 00	callq	0x100041760 ## symbol stub for: ___error
10003009e:	8b 18	movl	(%rax), %ebx
1000300a0:	eb 16	jmp	0x1000300b8
1000300a2:	48 8d bd 40 ff ff ff	leaq	-192(%rbp), %rdi
1000300a9:	be 90 00 00 00	movl	$144, %esi
1000300ae:	e8 2f 1f 01 00	callq	0x100041fe2 ## symbol stub for: _xpc_data_create
1000300b3:	49 89 06	movq	%rax, (%r14)
1000300b6:	31 db	xorl	%ebx, %ebx
1000300b8:	89 d8	movl	%ebx, %eax
1000300ba:	48 81 c4 a8 00 00 00	addq	$168, %rsp
1000300c1:	5b	popq	%rbx
1000300c2:	41 5c	popq	%r12
1000300c4:	41 5d	popq	%r13
1000300c6:	41 5e	popq	%r14
1000300c8:	41 5f	popq	%r15
1000300ca:	5d	popq	%rbp
1000300cb:	c3	retq
1000300cc:	4c 89 ef	movq	%r13, %rdi
1000300cf:	e8 16 09 01 00	callq	0x1000409ea
1000300d4:	eb c3	jmp	0x100030099
1000300d6:	55	pushq	%rbp
1000300d7:	48 89 e5	movq	%rsp, %rbp
1000300da:	41 57	pushq	%r15
1000300dc:	41 56	pushq	%r14
1000300de:	41 55	pushq	%r13
1000300e0:	41 54	pushq	%r12
1000300e2:	53	pushq	%rbx
1000300e3:	48 81 ec 78 01 00 00	subq	$376, %rsp
1000300ea:	49 89 cc	movq	%rcx, %r12
1000300ed:	49 89 f7	movq	%rsi, %r15
1000300f0:	49 89 fe	movq	%rdi, %r14
1000300f3:	48 8b 05 2e 7f 02 00	movq	163630(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000300fa:	48 8b 00	movq	(%rax), %rax
1000300fd:	48 89 45 d0	movq	%rax, -48(%rbp)
100030101:	48 8d 35 cc 38 01 00	leaq	80076(%rip), %rsi ## literal pool for: "Label"
100030108:	48 89 95 f8 fe ff ff	movq	%rdx, -264(%rbp)
10003010f:	48 89 d7	movq	%rdx, %rdi
100030112:	e8 d6 3b ff ff	callq	0x100023ced
100030117:	41 89 c5	movl	%eax, %r13d
10003011a:	41 0f b7 86 08 04 00 00	movzwl	1032(%r14), %eax
100030122:	bb 7c 00 00 00	movl	$124, %ebx
100030127:	a9 03 02 00 00	testl	$515, %eax
10003012c:	75 32	jne	0x100030160
10003012e:	49 8b 46 60	movq	96(%r14), %rax
100030132:	49 8b 4e 68	movq	104(%r14), %rcx
100030136:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
10003013e:	ba 08 00 00 00	movl	$8, %edx
100030143:	4c 89 f7	movq	%r14, %rdi
100030146:	be 02 00 00 00	movl	$2, %esi
10003014b:	4d 89 f8	movq	%r15, %r8
10003014e:	45 31 c9	xorl	%r9d, %r9d
100030151:	ff 50 68	callq	*104(%rax)
100030154:	89 c3	movl	%eax, %ebx
100030156:	89 85 0c ff ff ff	movl	%eax, -244(%rbp)
10003015c:	85 c0	testl	%eax, %eax
10003015e:	74 3e	je	0x10003019e
100030160:	48 8d 0d 9c 00 02 00	leaq	131228(%rip), %rcx ## literal pool for: "service submission"
100030167:	4c 89 f7	movq	%r14, %rdi
10003016a:	4c 89 fe	movq	%r15, %rsi
10003016d:	89 da	movl	%ebx, %edx
10003016f:	31 c0	xorl	%eax, %eax
100030171:	e8 fe 3b ff ff	callq	0x100023d74
100030176:	48 8b 05 ab 7e 02 00	movq	163499(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003017d:	48 8b 00	movq	(%rax), %rax
100030180:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100030184:	0f 85 40 03 00 00	jne	0x1000304ca
10003018a:	89 d8	movl	%ebx, %eax
10003018c:	48 81 c4 78 01 00 00	addq	$376, %rsp
100030193:	5b	popq	%rbx
100030194:	41 5c	popq	%r12
100030196:	41 5d	popq	%r13
100030198:	41 5e	popq	%r14
10003019a:	41 5f	popq	%r15
10003019c:	5d	popq	%rbp
10003019d:	c3	retq
10003019e:	4c 89 a5 00 ff ff ff	movq	%r12, -256(%rbp)
1000301a5:	45 0f b6 ed	movzbl	%r13b, %r13d
1000301a9:	49 83 cd 04	orq	$4, %r13
1000301ad:	49 c1 e5 07	shlq	$7, %r13
1000301b1:	48 8d 05 0a 1c ff ff	leaq	-58358(%rip), %rax
1000301b8:	48 8d 9d 78 fe ff ff	leaq	-392(%rbp), %rbx
1000301bf:	48 89 03	movq	%rax, (%rbx)
1000301c2:	48 8d 05 67 1f ff ff	leaq	-57497(%rip), %rax
1000301c9:	48 89 43 08	movq	%rax, 8(%rbx)
1000301cd:	48 8d 05 a1 20 ff ff	leaq	-57183(%rip), %rax
1000301d4:	48 89 43 10	movq	%rax, 16(%rbx)
1000301d8:	48 8d 05 24 22 ff ff	leaq	-56796(%rip), %rax
1000301df:	48 89 43 18	movq	%rax, 24(%rbx)
1000301e3:	48 8d 05 5e 22 ff ff	leaq	-56738(%rip), %rax
1000301ea:	48 89 43 20	movq	%rax, 32(%rbx)
1000301ee:	48 8d 05 26 23 ff ff	leaq	-56538(%rip), %rax
1000301f5:	48 89 43 28	movq	%rax, 40(%rbx)
1000301f9:	4c 89 73 30	movq	%r14, 48(%rbx)
1000301fd:	0f 28 05 7c 30 01 00	movaps	77948(%rip), %xmm0
100030204:	48 8d 45 a0	leaq	-96(%rbp), %rax
100030208:	0f 29 40 20	movaps	%xmm0, 32(%rax)
10003020c:	0f 29 40 10	movaps	%xmm0, 16(%rax)
100030210:	0f 29 00	movaps	%xmm0, (%rax)
100030213:	0f 29 40 f0	movaps	%xmm0, -16(%rax)
100030217:	48 8d 75 90	leaq	-112(%rbp), %rsi
10003021b:	4c 89 ff	movq	%r15, %rdi
10003021e:	e8 3a 46 00 00	callq	0x10003485d
100030223:	48 89 85 e8 fe ff ff	movq	%rax, -280(%rbp)
10003022a:	4c 8d a5 10 ff ff ff	leaq	-240(%rbp), %r12
100030231:	0f 28 05 48 30 01 00	movaps	77896(%rip), %xmm0
100030238:	41 0f 29 44 24 70	movaps	%xmm0, 112(%r12)
10003023e:	41 0f 29 44 24 60	movaps	%xmm0, 96(%r12)
100030244:	41 0f 29 44 24 50	movaps	%xmm0, 80(%r12)
10003024a:	41 0f 29 44 24 40	movaps	%xmm0, 64(%r12)
100030250:	41 0f 29 44 24 30	movaps	%xmm0, 48(%r12)
100030256:	41 0f 29 44 24 20	movaps	%xmm0, 32(%r12)
10003025c:	41 0f 29 44 24 10	movaps	%xmm0, 16(%r12)
100030262:	41 0f 29 04 24	movaps	%xmm0, (%r12)
100030267:	45 8b 47 14	movl	20(%r15), %r8d
10003026b:	48 8d 15 68 37 01 00	leaq	79720(%rip), %rdx ## literal pool for: "(submitted by %s.%d)"
100030272:	be 80 00 00 00	movl	$128, %esi
100030277:	4c 89 e7	movq	%r12, %rdi
10003027a:	48 8d 4d a0	leaq	-96(%rbp), %rcx
10003027e:	31 c0	xorl	%eax, %eax
100030280:	e8 7d 1b 01 00	callq	0x100041e02 ## symbol stub for: _snprintf
100030285:	48 8d 85 0c ff ff ff	leaq	-244(%rbp), %rax
10003028c:	48 89 04 24	movq	%rax, (%rsp)
100030290:	4c 89 f7	movq	%r14, %rdi
100030293:	48 8b b5 f8 fe ff ff	movq	-264(%rbp), %rsi
10003029a:	4c 89 e2	movq	%r12, %rdx
10003029d:	4c 89 f9	movq	%r15, %rcx
1000302a0:	49 89 d8	movq	%rbx, %r8
1000302a3:	4d 89 e9	movq	%r13, %r9
1000302a6:	e8 dd 30 fd ff	callq	0x100003388
1000302ab:	48 85 c0	testq	%rax, %rax
1000302ae:	74 22	je	0x1000302d2
1000302b0:	48 89 c3	movq	%rax, %rbx
1000302b3:	4c 89 f7	movq	%r14, %rdi
1000302b6:	48 89 c6	movq	%rax, %rsi
1000302b9:	e8 11 02 00 00	callq	0x1000304cf
1000302be:	89 85 0c ff ff ff	movl	%eax, -244(%rbp)
1000302c4:	45 31 ed	xorl	%r13d, %r13d
1000302c7:	85 c0	testl	%eax, %eax
1000302c9:	4c 0f 44 eb	cmoveq	%rbx, %r13
1000302cd:	e9 56 01 00 00	jmp	0x100030428
1000302d2:	8b 85 0c ff ff ff	movl	-244(%rbp), %eax
1000302d8:	3d 86 00 00 00	cmpl	$134, %eax
1000302dd:	0f 85 42 01 00 00	jne	0x100030425
1000302e3:	49 8b 46 60	movq	96(%r14), %rax
1000302e7:	48 8d 0d 3a 1f 03 00	leaq	204602(%rip), %rcx
1000302ee:	48 39 c8	cmpq	%rcx, %rax
1000302f1:	4c 8b a5 00 ff ff ff	movq	-256(%rbp), %r12
1000302f8:	74 21	je	0x10003031b
1000302fa:	48 8d 0d af 1f 03 00	leaq	204719(%rip), %rcx
100030301:	48 39 c8	cmpq	%rcx, %rax
100030304:	74 1e	je	0x100030324
100030306:	48 8d 0d 93 1e 03 00	leaq	204435(%rip), %rcx
10003030d:	48 39 c8	cmpq	%rcx, %rax
100030310:	75 2f	jne	0x100030341
100030312:	48 8d 05 37 32 03 00	leaq	209463(%rip), %rax
100030319:	eb 10	jmp	0x10003032b
10003031b:	49 8d 86 d0 03 00 00	leaq	976(%r14), %rax
100030322:	eb 07	jmp	0x10003032b
100030324:	49 8d 86 c8 00 00 00	leaq	200(%r14), %rax
10003032b:	48 8b 18	movq	(%rax), %rbx
10003032e:	48 85 db	testq	%rbx, %rbx
100030331:	74 0e	je	0x100030341
100030333:	0f b7 83 08 04 00 00	movzwl	1032(%rbx), %eax
10003033a:	a9 03 02 00 00	testl	$515, %eax
10003033f:	74 08	je	0x100030349
100030341:	45 31 ed	xorl	%r13d, %r13d
100030344:	e9 ff 00 00 00	jmp	0x100030448
100030349:	4c 89 ad f0 fe ff ff	movq	%r13, -272(%rbp)
100030350:	48 8b 43 60	movq	96(%rbx), %rax
100030354:	48 8b 4b 68	movq	104(%rbx), %rcx
100030358:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
100030360:	45 31 ed	xorl	%r13d, %r13d
100030363:	48 89 df	movq	%rbx, %rdi
100030366:	be 02 00 00 00	movl	$2, %esi
10003036b:	31 d2	xorl	%edx, %edx
10003036d:	4d 89 f8	movq	%r15, %r8
100030370:	45 31 c9	xorl	%r9d, %r9d
100030373:	ff 50 68	callq	*104(%rax)
100030376:	89 85 0c ff ff ff	movl	%eax, -244(%rbp)
10003037c:	85 c0	testl	%eax, %eax
10003037e:	0f 85 ab 00 00 00	jne	0x10003042f
100030384:	4c 8d 85 b0 fe ff ff	leaq	-336(%rbp), %r8
10003038b:	48 8d 05 30 1a ff ff	leaq	-58832(%rip), %rax
100030392:	49 89 00	movq	%rax, (%r8)
100030395:	48 8d 05 94 1d ff ff	leaq	-57964(%rip), %rax
10003039c:	49 89 40 08	movq	%rax, 8(%r8)
1000303a0:	48 8d 05 ce 1e ff ff	leaq	-57650(%rip), %rax
1000303a7:	49 89 40 10	movq	%rax, 16(%r8)
1000303ab:	48 8d 05 51 20 ff ff	leaq	-57263(%rip), %rax
1000303b2:	49 89 40 18	movq	%rax, 24(%r8)
1000303b6:	48 8d 05 8b 20 ff ff	leaq	-57205(%rip), %rax
1000303bd:	49 89 40 20	movq	%rax, 32(%r8)
1000303c1:	48 8d 05 53 21 ff ff	leaq	-57005(%rip), %rax
1000303c8:	49 89 40 28	movq	%rax, 40(%r8)
1000303cc:	49 89 58 30	movq	%rbx, 48(%r8)
1000303d0:	48 8d 85 0c ff ff ff	leaq	-244(%rbp), %rax
1000303d7:	48 89 04 24	movq	%rax, (%rsp)
1000303db:	48 8d 95 10 ff ff ff	leaq	-240(%rbp), %rdx
1000303e2:	48 89 df	movq	%rbx, %rdi
1000303e5:	48 8b b5 f8 fe ff ff	movq	-264(%rbp), %rsi
1000303ec:	4c 89 f9	movq	%r15, %rcx
1000303ef:	4c 8b 8d f0 fe ff ff	movq	-272(%rbp), %r9
1000303f6:	e8 8d 2f fd ff	callq	0x100003388
1000303fb:	48 85 c0	testq	%rax, %rax
1000303fe:	74 1f	je	0x10003041f
100030400:	49 89 c4	movq	%rax, %r12
100030403:	48 89 df	movq	%rbx, %rdi
100030406:	48 89 c6	movq	%rax, %rsi
100030409:	e8 c1 00 00 00	callq	0x1000304cf
10003040e:	89 85 0c ff ff ff	movl	%eax, -244(%rbp)
100030414:	45 31 ed	xorl	%r13d, %r13d
100030417:	85 c0	testl	%eax, %eax
100030419:	4d 0f 44 ec	cmoveq	%r12, %r13
10003041d:	eb 09	jmp	0x100030428
10003041f:	8b 85 0c ff ff ff	movl	-244(%rbp), %eax
100030425:	45 31 ed	xorl	%r13d, %r13d
100030428:	4c 8b a5 00 ff ff ff	movq	-256(%rbp), %r12
10003042f:	83 f8 25	cmpl	$37, %eax
100030432:	77 14	ja	0x100030448
100030434:	31 db	xorl	%ebx, %ebx
100030436:	89 c0	movl	%eax, %eax
100030438:	48 b9 01 00 02 00 20 00 00 00	movabsq	$137439084545, %rcx
100030442:	48 0f a3 c1	btq	%rax, %rcx
100030446:	72 5f	jb	0x1000304a7
100030448:	48 8d 35 85 35 01 00	leaq	79237(%rip), %rsi ## literal pool for: "Label"
10003044f:	48 8b bd f8 fe ff ff	movq	-264(%rbp), %rdi
100030456:	e8 ff 1b 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10003045b:	49 89 c4	movq	%rax, %r12
10003045e:	45 8b 7f 14	movl	20(%r15), %r15d
100030462:	8b 9d 0c ff ff ff	movl	-244(%rbp), %ebx
100030468:	89 df	movl	%ebx, %edi
10003046a:	e8 9f 1c 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10003046f:	48 89 44 24 08	movq	%rax, 8(%rsp)
100030474:	89 1c 24	movl	%ebx, (%rsp)
100030477:	48 8d 15 98 fd 01 00	leaq	130456(%rip), %rdx ## literal pool for: "Could not import service from caller: caller = %s.%d, service = %s, error = %d: %s"
10003047e:	4c 89 f7	movq	%r14, %rdi
100030481:	be 03 00 00 00	movl	$3, %esi
100030486:	48 8b 8d e8 fe ff ff	movq	-280(%rbp), %rcx
10003048d:	45 89 f8	movl	%r15d, %r8d
100030490:	4d 89 e1	movq	%r12, %r9
100030493:	4c 8b a5 00 ff ff ff	movq	-256(%rbp), %r12
10003049a:	31 c0	xorl	%eax, %eax
10003049c:	e8 88 ff fe ff	callq	0x100020429
1000304a1:	8b 9d 0c ff ff ff	movl	-244(%rbp), %ebx
1000304a7:	4d 85 e4	testq	%r12, %r12
1000304aa:	0f 84 c6 fc ff ff	je	0x100030176
1000304b0:	4d 85 ed	testq	%r13, %r13
1000304b3:	0f 84 bd fc ff ff	je	0x100030176
1000304b9:	85 db	testl	%ebx, %ebx
1000304bb:	0f 85 b5 fc ff ff	jne	0x100030176
1000304c1:	4d 89 2c 24	movq	%r13, (%r12)
1000304c5:	e9 ac fc ff ff	jmp	0x100030176
1000304ca:	e8 a3 12 01 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000304cf:	55	pushq	%rbp
1000304d0:	48 89 e5	movq	%rsp, %rbp
1000304d3:	41 57	pushq	%r15
1000304d5:	41 56	pushq	%r14
1000304d7:	53	pushq	%rbx
1000304d8:	50	pushq	%rax
1000304d9:	49 89 f7	movq	%rsi, %r15
1000304dc:	49 89 fe	movq	%rdi, %r14
1000304df:	48 89 f7	movq	%rsi, %rdi
1000304e2:	be 25 00 00 00	movl	$37, %esi
1000304e7:	e8 e2 23 fe ff	callq	0x1000128ce
1000304ec:	4c 89 f7	movq	%r14, %rdi
1000304ef:	4c 89 fe	movq	%r15, %rsi
1000304f2:	e8 af 12 ff ff	callq	0x1000217a6
1000304f7:	31 c0	xorl	%eax, %eax
1000304f9:	41 0f ba a7 0d 05 00 00 1c	btl	$28, 1293(%r15)
100030502:	bb 7c 00 00 00	movl	$124, %ebx
100030507:	0f 43 d8	cmovael	%eax, %ebx
10003050a:	4c 89 ff	movq	%r15, %rdi
10003050d:	be 25 00 00 00	movl	$37, %esi
100030512:	e8 3a 24 fe ff	callq	0x100012951
100030517:	89 d8	movl	%ebx, %eax
100030519:	48 83 c4 08	addq	$8, %rsp
10003051d:	5b	popq	%rbx
10003051e:	41 5e	popq	%r14
100030520:	41 5f	popq	%r15
100030522:	5d	popq	%rbp
100030523:	c3	retq
100030524:	55	pushq	%rbp
100030525:	48 89 e5	movq	%rsp, %rbp
100030528:	41 57	pushq	%r15
10003052a:	41 56	pushq	%r14
10003052c:	41 55	pushq	%r13
10003052e:	41 54	pushq	%r12
100030530:	53	pushq	%rbx
100030531:	48 83 ec 58	subq	$88, %rsp
100030535:	89 4d bc	movl	%ecx, -68(%rbp)
100030538:	48 89 55 b0	movq	%rdx, -80(%rbp)
10003053c:	48 89 f3	movq	%rsi, %rbx
10003053f:	48 89 7d 88	movq	%rdi, -120(%rbp)
100030543:	31 ff	xorl	%edi, %edi
100030545:	31 f6	xorl	%esi, %esi
100030547:	31 d2	xorl	%edx, %edx
100030549:	e8 c4 1a 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003054e:	49 89 c5	movq	%rax, %r13
100030551:	48 89 5d c0	movq	%rbx, -64(%rbp)
100030555:	4c 8b b3 b0 00 00 00	movq	176(%rbx), %r14
10003055c:	4d 85 f6	testq	%r14, %r14
10003055f:	0f 84 d3 00 00 00	je	0x100030638
100030565:	4c 89 6d c8	movq	%r13, -56(%rbp)
100030569:	4d 8d be c8 00 00 00	leaq	200(%r14), %r15
100030570:	4c 89 ef	movq	%r13, %rdi
100030573:	4c 89 fe	movq	%r15, %rsi
100030576:	e8 f1 1a 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003057b:	48 85 c0	testq	%rax, %rax
10003057e:	74 0d	je	0x10003058d
100030580:	48 89 c7	movq	%rax, %rdi
100030583:	e8 7a 1b 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100030588:	49 89 c4	movq	%rax, %r12
10003058b:	eb 1a	jmp	0x1000305a7
10003058d:	31 ff	xorl	%edi, %edi
10003058f:	31 f6	xorl	%esi, %esi
100030591:	e8 aa 19 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100030596:	49 89 c4	movq	%rax, %r12
100030599:	4c 89 ef	movq	%r13, %rdi
10003059c:	4c 89 fe	movq	%r15, %rsi
10003059f:	48 89 c2	movq	%rax, %rdx
1000305a2:	e8 07 1b 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000305a7:	31 c0	xorl	%eax, %eax
1000305a9:	48 89 45 90	movq	%rax, -112(%rbp)
1000305ad:	48 89 45 d0	movq	%rax, -48(%rbp)
1000305b1:	4c 89 f7	movq	%r14, %rdi
1000305b4:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000305b8:	31 d2	xorl	%edx, %edx
1000305ba:	48 8d 4d d0	leaq	-48(%rbp), %rcx
1000305be:	e8 dc 47 fe ff	callq	0x100014d9f
1000305c3:	85 c0	testl	%eax, %eax
1000305c5:	74 30	je	0x1000305f7
1000305c7:	41 89 c5	movl	%eax, %r13d
1000305ca:	89 c7	movl	%eax, %edi
1000305cc:	e8 3d 1b 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000305d1:	48 8b 7d c0	movq	-64(%rbp), %rdi
1000305d5:	be 03 00 00 00	movl	$3, %esi
1000305da:	48 8d 15 b1 fd 01 00	leaq	130481(%rip), %rdx ## literal pool for: "Could not activate socket group: %s: %d: %s"
1000305e1:	4c 89 f9	movq	%r15, %rcx
1000305e4:	45 89 e8	movl	%r13d, %r8d
1000305e7:	49 89 c1	movq	%rax, %r9
1000305ea:	31 c0	xorl	%eax, %eax
1000305ec:	e8 c9 59 fe ff	callq	0x100015fba
1000305f1:	4c 8b 6d c8	movq	-56(%rbp), %r13
1000305f5:	eb 2c	jmp	0x100030623
1000305f7:	48 83 7d d0 00	cmpq	$0, -48(%rbp)
1000305fc:	4c 8b 6d c8	movq	-56(%rbp), %r13
100030600:	74 21	je	0x100030623
100030602:	31 db	xorl	%ebx, %ebx
100030604:	48 8b 45 90	movq	-112(%rbp), %rax
100030608:	8b 14 98	movl	(%rax,%rbx,4), %edx
10003060b:	4c 89 e7	movq	%r12, %rdi
10003060e:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100030615:	e8 4a 19 01 00	callq	0x100041f64 ## symbol stub for: _xpc_array_set_fd
10003061a:	48 ff c3	incq	%rbx
10003061d:	48 3b 5d d0	cmpq	-48(%rbp), %rbx
100030621:	72 e1	jb	0x100030604
100030623:	4c 89 e7	movq	%r12, %rdi
100030626:	e8 d1 1a 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003062b:	4d 8b 76 08	movq	8(%r14), %r14
10003062f:	4d 85 f6	testq	%r14, %r14
100030632:	0f 85 31 ff ff ff	jne	0x100030569
100030638:	48 8d 35 59 69 01 00	leaq	92505(%rip), %rsi ## literal pool for: "Sockets"
10003063f:	48 8b 7d b0	movq	-80(%rbp), %rdi
100030643:	4c 89 ea	movq	%r13, %rdx
100030646:	e8 63 1a 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003064b:	4c 89 ef	movq	%r13, %rdi
10003064e:	e8 a9 1a 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100030653:	80 7d bc 00	cmpb	$0, -68(%rbp)
100030657:	0f 84 15 01 00 00	je	0x100030772
10003065d:	31 ff	xorl	%edi, %edi
10003065f:	31 f6	xorl	%esi, %esi
100030661:	31 d2	xorl	%edx, %edx
100030663:	e8 aa 19 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100030668:	48 89 45 c8	movq	%rax, -56(%rbp)
10003066c:	48 8b 5d c0	movq	-64(%rbp), %rbx
100030670:	f6 83 65 01 00 00 02	testb	$2, 357(%rbx)
100030677:	74 16	je	0x10003068f
100030679:	48 8d 15 3e fd 01 00	leaq	130366(%rip), %rdx ## literal pool for: "The launch(3) APIs cannot be used to check in MultipleInstance endpoints."
100030680:	48 89 df	movq	%rbx, %rdi
100030683:	be 04 00 00 00	movl	$4, %esi
100030688:	31 c0	xorl	%eax, %eax
10003068a:	e8 2b 59 fe ff	callq	0x100015fba
10003068f:	48 8b 9b 88 00 00 00	movq	136(%rbx), %rbx
100030696:	48 85 db	testq	%rbx, %rbx
100030699:	0f 84 b4 00 00 00	je	0x100030753
10003069f:	45 31 f6	xorl	%r14d, %r14d
1000306a2:	4c 8d 6d d0	leaq	-48(%rbp), %r13
1000306a6:	4c 8b 7d c0	movq	-64(%rbp), %r15
1000306aa:	4c 89 75 d0	movq	%r14, -48(%rbp)
1000306ae:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000306b2:	66 0f 7f 45 a0	movdqa	%xmm0, -96(%rbp)
1000306b7:	66 0f 7f 45 90	movdqa	%xmm0, -112(%rbp)
1000306bc:	c7 45 a4 00 00 00 00	movl	$0, -92(%rbp)
1000306c3:	4c 89 ff	movq	%r15, %rdi
1000306c6:	e8 36 b1 fe ff	callq	0x10001b801
1000306cb:	89 45 a4	movl	%eax, -92(%rbp)
1000306ce:	4c 8d a3 90 00 00 00	leaq	144(%rbx), %r12
1000306d5:	4c 89 34 24	movq	%r14, (%rsp)
1000306d9:	48 8b 7d 88	movq	-120(%rbp), %rdi
1000306dd:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000306e1:	4c 89 e2	movq	%r12, %rdx
1000306e4:	31 c9	xorl	%ecx, %ecx
1000306e6:	45 31 c0	xorl	%r8d, %r8d
1000306e9:	4d 89 e9	movq	%r13, %r9
1000306ec:	e8 e6 45 ff ff	callq	0x100024cd7
1000306f1:	4c 89 ff	movq	%r15, %rdi
1000306f4:	85 c0	testl	%eax, %eax
1000306f6:	74 18	je	0x100030710
1000306f8:	be 03 00 00 00	movl	$3, %esi
1000306fd:	48 8d 15 04 fd 01 00	leaq	130308(%rip), %rdx ## literal pool for: "Failed to activate endpoint for legacy check-in. Please just don't use this API: %s"
100030704:	4c 89 e1	movq	%r12, %rcx
100030707:	31 c0	xorl	%eax, %eax
100030709:	e8 ac 58 fe ff	callq	0x100015fba
10003070e:	eb 36	jmp	0x100030746
100030710:	be 04 00 00 00	movl	$4, %esi
100030715:	48 8d 15 40 fd 01 00	leaq	130368(%rip), %rdx ## literal pool for: "Endpoint has been activated through legacy launch(3) APIs. Please switch to XPC or bootstrap_check_in(): %s"
10003071c:	4c 89 e1	movq	%r12, %rcx
10003071f:	31 c0	xorl	%eax, %eax
100030721:	e8 94 58 fe ff	callq	0x100015fba
100030726:	48 8b 7d d0	movq	-48(%rbp), %rdi
10003072a:	e8 bb 19 01 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10003072f:	48 8b 7d c8	movq	-56(%rbp), %rdi
100030733:	4c 89 e6	movq	%r12, %rsi
100030736:	89 c2	movl	%eax, %edx
100030738:	e8 4d 19 01 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
10003073d:	48 8b 7d d0	movq	-48(%rbp), %rdi
100030741:	e8 b6 19 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100030746:	48 8b 5b 08	movq	8(%rbx), %rbx
10003074a:	48 85 db	testq	%rbx, %rbx
10003074d:	0f 85 57 ff ff ff	jne	0x1000306aa
100030753:	48 8d 35 6c 68 01 00	leaq	92268(%rip), %rsi ## literal pool for: "MachServices"
10003075a:	48 8b 7d b0	movq	-80(%rbp), %rdi
10003075e:	48 8b 5d c8	movq	-56(%rbp), %rbx
100030762:	48 89 da	movq	%rbx, %rdx
100030765:	e8 44 19 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003076a:	48 89 df	movq	%rbx, %rdi
10003076d:	e8 8a 19 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100030772:	48 83 c4 58	addq	$88, %rsp
100030776:	5b	popq	%rbx
100030777:	41 5c	popq	%r12
100030779:	41 5d	popq	%r13
10003077b:	41 5e	popq	%r14
10003077d:	41 5f	popq	%r15
10003077f:	5d	popq	%rbp
100030780:	c3	retq
100030781:	55	pushq	%rbp
100030782:	48 89 e5	movq	%rsp, %rbp
100030785:	41 57	pushq	%r15
100030787:	41 56	pushq	%r14
100030789:	53	pushq	%rbx
10003078a:	50	pushq	%rax
10003078b:	49 89 d6	movq	%rdx, %r14
10003078e:	48 89 f3	movq	%rsi, %rbx
100030791:	49 89 ff	movq	%rdi, %r15
100030794:	48 89 f7	movq	%rsi, %rdi
100030797:	e8 2a 19 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003079c:	48 3b 05 85 79 02 00	cmpq	162181(%rip), %rax ## literal pool symbol address: __xpc_type_string
1000307a3:	74 0b	je	0x1000307b0
1000307a5:	48 83 c4 08	addq	$8, %rsp
1000307a9:	5b	popq	%rbx
1000307aa:	41 5e	popq	%r14
1000307ac:	41 5f	popq	%r15
1000307ae:	5d	popq	%rbp
1000307af:	c3	retq
1000307b0:	48 89 df	movq	%rbx, %rdi
1000307b3:	e8 6e 19 01 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
1000307b8:	4c 89 f7	movq	%r14, %rdi
1000307bb:	4c 89 fe	movq	%r15, %rsi
1000307be:	48 89 c2	movq	%rax, %rdx
1000307c1:	48 83 c4 08	addq	$8, %rsp
1000307c5:	5b	popq	%rbx
1000307c6:	41 5e	popq	%r14
1000307c8:	41 5f	popq	%r15
1000307ca:	5d	popq	%rbp
1000307cb:	e9 d1 dc ff ff	jmp	0x10002e4a1
1000307d0:	55	pushq	%rbp
1000307d1:	48 89 e5	movq	%rsp, %rbp
1000307d4:	41 57	pushq	%r15
1000307d6:	41 56	pushq	%r14
1000307d8:	53	pushq	%rbx
1000307d9:	50	pushq	%rax
1000307da:	48 89 f3	movq	%rsi, %rbx
1000307dd:	49 89 fe	movq	%rdi, %r14
1000307e0:	80 3e 55	cmpb	$85, (%rsi)
1000307e3:	75 16	jne	0x1000307fb
1000307e5:	49 89 d7	movq	%rdx, %r15
1000307e8:	48 8d 35 d1 57 01 00	leaq	88017(%rip), %rsi ## literal pool for: "Umask"
1000307ef:	48 89 df	movq	%rbx, %rdi
1000307f2:	e8 35 16 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
1000307f7:	85 c0	testl	%eax, %eax
1000307f9:	74 23	je	0x10003081e
1000307fb:	48 8d 15 47 3c 01 00	leaq	80967(%rip), %rdx ## literal pool for: "Unknown key for integer: %s"
100030802:	4c 89 f7	movq	%r14, %rdi
100030805:	be 03 00 00 00	movl	$3, %esi
10003080a:	48 89 d9	movq	%rbx, %rcx
10003080d:	31 c0	xorl	%eax, %eax
10003080f:	48 83 c4 08	addq	$8, %rsp
100030813:	5b	popq	%rbx
100030814:	41 5e	popq	%r14
100030816:	41 5f	popq	%r15
100030818:	5d	popq	%rbp
100030819:	e9 0b fc fe ff	jmp	0x100020429
10003081e:	66 45 89 7e 38	movw	%r15w, 56(%r14)
100030823:	41 80 4e 58 01	orb	$1, 88(%r14)
100030828:	48 83 c4 08	addq	$8, %rsp
10003082c:	5b	popq	%rbx
10003082d:	41 5e	popq	%r14
10003082f:	41 5f	popq	%r15
100030831:	5d	popq	%rbp
100030832:	c3	retq
100030833:	55	pushq	%rbp
100030834:	48 89 e5	movq	%rsp, %rbp
100030837:	41 57	pushq	%r15
100030839:	41 56	pushq	%r14
10003083b:	53	pushq	%rbx
10003083c:	50	pushq	%rax
10003083d:	41 89 f6	movl	%esi, %r14d
100030840:	48 89 fb	movq	%rdi, %rbx
100030843:	89 b7 90 00 00 00	movl	%esi, 144(%rdi)
100030849:	41 89 f7	movl	%esi, %r15d
10003084c:	e8 a9 dc fd ff	callq	0x10000e4fa
100030851:	48 8b 3d 00 78 02 00	movq	161792(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_send
100030858:	ba 01 00 00 00	movl	$1, %edx
10003085d:	4c 89 fe	movq	%r15, %rsi
100030860:	48 89 c1	movq	%rax, %rcx
100030863:	e8 1a 11 01 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100030868:	48 89 83 88 00 00 00	movq	%rax, 136(%rbx)
10003086f:	48 89 df	movq	%rbx, %rdi
100030872:	be 0a 00 00 00	movl	$10, %esi
100030877:	e8 05 24 fe ff	callq	0x100012c81
10003087c:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
100030883:	48 89 de	movq	%rbx, %rsi
100030886:	e8 eb 10 01 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10003088b:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
100030892:	48 8d 35 90 04 ff ff	leaq	-64368(%rip), %rsi
100030899:	e8 08 11 01 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
10003089e:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
1000308a5:	48 8d 35 1e 01 00 00	leaq	286(%rip), %rsi
1000308ac:	e8 01 11 01 00	callq	0x1000419b2 ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler_f
1000308b1:	48 8b bb 88 00 00 00	movq	136(%rbx), %rdi
1000308b8:	e8 05 10 01 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
1000308bd:	48 8d 05 74 1a 03 00	leaq	203380(%rip), %rax
1000308c4:	48 39 43 60	cmpq	%rax, 96(%rbx)
1000308c8:	0f 85 b0 00 00 00	jne	0x10003097e
1000308ce:	4c 8b 7b 68	movq	104(%rbx), %r15
1000308d2:	e8 23 dc fd ff	callq	0x10000e4fa
1000308d7:	48 8b 3d 82 77 02 00	movq	161666(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_proc
1000308de:	ba 00 00 00 20	movl	$536870912, %edx
1000308e3:	4c 89 fe	movq	%r15, %rsi
1000308e6:	48 89 c1	movq	%rax, %rcx
1000308e9:	e8 94 10 01 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
1000308ee:	48 89 83 80 00 00 00	movq	%rax, 128(%rbx)
1000308f5:	48 89 df	movq	%rbx, %rdi
1000308f8:	be 0c 00 00 00	movl	$12, %esi
1000308fd:	e8 7f 23 fe ff	callq	0x100012c81
100030902:	48 8b bb 80 00 00 00	movq	128(%rbx), %rdi
100030909:	48 89 de	movq	%rbx, %rsi
10003090c:	e8 65 10 01 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100030911:	48 8b bb 80 00 00 00	movq	128(%rbx), %rdi
100030918:	48 8d 35 e4 00 00 00	leaq	228(%rip), %rsi
10003091f:	e8 82 10 01 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100030924:	8b 7b 68	movl	104(%rbx), %edi
100030927:	e8 9a a3 fe ff	callq	0x10001acc6
10003092c:	48 85 c0	testq	%rax, %rax
10003092f:	74 0c	je	0x10003093d
100030931:	48 89 c7	movq	%rax, %rdi
100030934:	e8 80 b5 fe ff	callq	0x10001beb9
100030939:	84 c0	testb	%al, %al
10003093b:	74 24	je	0x100030961
10003093d:	48 8d 15 45 fd 01 00	leaq	130373(%rip), %rdx ## literal pool for: "uncorking exec source upfront"
100030944:	48 89 df	movq	%rbx, %rdi
100030947:	be 05 00 00 00	movl	$5, %esi
10003094c:	31 c0	xorl	%eax, %eax
10003094e:	e8 d6 fa fe ff	callq	0x100020429
100030953:	48 8b bb 80 00 00 00	movq	128(%rbx), %rdi
10003095a:	e8 63 0f 01 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10003095f:	eb 1d	jmp	0x10003097e
100030961:	48 8d 15 3f fd 01 00	leaq	130367(%rip), %rdx ## literal pool for: "deferring exec source uncork"
100030968:	48 89 df	movq	%rbx, %rdi
10003096b:	be 05 00 00 00	movl	$5, %esi
100030970:	31 c0	xorl	%eax, %eax
100030972:	e8 b2 fa fe ff	callq	0x100020429
100030977:	80 8b 09 04 00 00 80	orb	$-128, 1033(%rbx)
10003097e:	c7 45 e4 00 00 00 00	movl	$0, -28(%rbp)
100030985:	41 8d 46 01	leal	1(%r14), %eax
100030989:	83 f8 02	cmpl	$2, %eax
10003098c:	72 1f	jb	0x1000309ad
10003098e:	48 8b 05 13 78 02 00	movq	161811(%rip), %rax ## literal pool symbol address: _mach_task_self_
100030995:	8b 38	movl	(%rax), %edi
100030997:	48 8d 55 e4	leaq	-28(%rbp), %rdx
10003099b:	44 89 f6	movl	%r14d, %esi
10003099e:	e8 f5 11 01 00	callq	0x100041b98 ## symbol stub for: _mach_port_type
1000309a3:	85 c0	testl	%eax, %eax
1000309a5:	75 19	jne	0x1000309c0
1000309a7:	f6 45 e6 10	testb	$16, -26(%rbp)
1000309ab:	74 08	je	0x1000309b5
1000309ad:	48 89 df	movq	%rbx, %rdi
1000309b0:	e8 4d 02 ff ff	callq	0x100020c02
1000309b5:	48 83 c4 08	addq	$8, %rsp
1000309b9:	5b	popq	%rbx
1000309ba:	41 5e	popq	%r14
1000309bc:	41 5f	popq	%r15
1000309be:	5d	popq	%rbp
1000309bf:	c3	retq
1000309c0:	48 63 f8	movslq	%eax, %rdi
1000309c3:	e8 da 0d 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000309c8:	eb dd	jmp	0x1000309a7
1000309ca:	55	pushq	%rbp
1000309cb:	48 89 e5	movq	%rsp, %rbp
1000309ce:	53	pushq	%rbx
1000309cf:	50	pushq	%rax
1000309d0:	48 89 fb	movq	%rdi, %rbx
1000309d3:	e8 b6 0f 01 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
1000309d8:	8d 48 01	leal	1(%rax), %ecx
1000309db:	83 f9 02	cmpl	$2, %ecx
1000309de:	72 0b	jb	0x1000309eb
1000309e0:	89 c7	movl	%eax, %edi
1000309e2:	e8 52 93 fd ff	callq	0x100009d39
1000309e7:	85 c0	testl	%eax, %eax
1000309e9:	75 0e	jne	0x1000309f9
1000309eb:	48 89 df	movq	%rbx, %rdi
1000309ee:	48 83 c4 08	addq	$8, %rsp
1000309f2:	5b	popq	%rbx
1000309f3:	5d	popq	%rbp
1000309f4:	e9 5f 0f 01 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
1000309f9:	48 63 f8	movslq	%eax, %rdi
1000309fc:	e8 a1 0d 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100030a01:	eb e8	jmp	0x1000309eb
100030a03:	55	pushq	%rbp
100030a04:	48 89 e5	movq	%rsp, %rbp
100030a07:	53	pushq	%rbx
100030a08:	50	pushq	%rax
100030a09:	48 89 fb	movq	%rdi, %rbx
100030a0c:	48 8d 15 b1 fc 01 00	leaq	130225(%rip), %rdx ## literal pool for: "domain exec event"
100030a13:	be 05 00 00 00	movl	$5, %esi
100030a18:	31 c0	xorl	%eax, %eax
100030a1a:	e8 0a fa fe ff	callq	0x100020429
100030a1f:	80 8b 09 04 00 00 20	orb	$32, 1033(%rbx)
100030a26:	48 89 df	movq	%rbx, %rdi
100030a29:	48 83 c4 08	addq	$8, %rsp
100030a2d:	5b	popq	%rbx
100030a2e:	5d	popq	%rbp
100030a2f:	e9 f5 02 ff ff	jmp	0x100020d29
100030a34:	55	pushq	%rbp
100030a35:	48 89 e5	movq	%rsp, %rbp
100030a38:	8b 47 28	movl	40(%rdi), %eax
100030a3b:	48 39 46 48	cmpq	%rax, 72(%rsi)
100030a3f:	75 0c	jne	0x100030a4d
100030a41:	48 8b 47 20	movq	32(%rdi), %rax
100030a45:	48 8b 40 08	movq	8(%rax), %rax
100030a49:	48 89 70 18	movq	%rsi, 24(%rax)
100030a4d:	5d	popq	%rbp
100030a4e:	c3	retq
100030a4f:	48 85 ff	testq	%rdi, %rdi
100030a52:	74 06	je	0x100030a5a
100030a54:	48 89 f8	movq	%rdi, %rax
100030a57:	31 d2	xorl	%edx, %edx
100030a59:	c3	retq
100030a5a:	55	pushq	%rbp
100030a5b:	48 89 e5	movq	%rsp, %rbp
100030a5e:	e8 ae ff 00 00	callq	0x100040a11
100030a63:	85 ff	testl	%edi, %edi
100030a65:	74 05	je	0x100030a6c
100030a67:	31 c0	xorl	%eax, %eax
100030a69:	89 fa	movl	%edi, %edx
100030a6b:	c3	retq
100030a6c:	55	pushq	%rbp
100030a6d:	48 89 e5	movq	%rsp, %rbp
100030a70:	e8 ae ff 00 00	callq	0x100040a23
100030a75:	55	pushq	%rbp
100030a76:	48 89 e5	movq	%rsp, %rbp
100030a79:	31 c0	xorl	%eax, %eax
100030a7b:	48 89 05 f6 2b 03 00	movq	%rax, 207862(%rip)
100030a82:	48 89 05 f7 2b 03 00	movq	%rax, 207863(%rip)
100030a89:	5d	popq	%rbp
100030a8a:	c3	retq
100030a8b:	55	pushq	%rbp
100030a8c:	48 89 e5	movq	%rsp, %rbp
100030a8f:	41 56	pushq	%r14
100030a91:	53	pushq	%rbx
100030a92:	48 89 fb	movq	%rdi, %rbx
100030a95:	e8 84 15 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100030a9a:	48 85 c0	testq	%rax, %rax
100030a9d:	74 38	je	0x100030ad7
100030a9f:	49 89 c6	movq	%rax, %r14
100030aa2:	48 8d 3d df 2b 03 00	leaq	207839(%rip), %rdi
100030aa9:	be 00 00 01 00	movl	$65536, %esi
100030aae:	e8 c3 11 01 00	callq	0x100041c76 ## symbol stub for: _os_unfair_lock_lock_with_options
100030ab3:	48 39 1d be 2b 03 00	cmpq	%rbx, 207806(%rip)
100030aba:	75 07	jne	0x100030ac3
100030abc:	4c 89 35 bd 2b 03 00	movq	%r14, 207805(%rip)
100030ac3:	48 8d 3d be 2b 03 00	leaq	207806(%rip), %rdi
100030aca:	e8 ad 11 01 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100030acf:	4c 89 f0	movq	%r14, %rax
100030ad2:	5b	popq	%rbx
100030ad3:	41 5e	popq	%r14
100030ad5:	5d	popq	%rbp
100030ad6:	c3	retq
100030ad7:	e8 59 ff 00 00	callq	0x100040a35
100030adc:	55	pushq	%rbp
100030add:	48 89 e5	movq	%rsp, %rbp
100030ae0:	41 56	pushq	%r14
100030ae2:	53	pushq	%rbx
100030ae3:	48 89 fb	movq	%rdi, %rbx
100030ae6:	4c 8d 35 9b 2b 03 00	leaq	207771(%rip), %r14
100030aed:	4c 89 f7	movq	%r14, %rdi
100030af0:	be 00 00 01 00	movl	$65536, %esi
100030af5:	e8 7c 11 01 00	callq	0x100041c76 ## symbol stub for: _os_unfair_lock_lock_with_options
100030afa:	4c 89 f7	movq	%r14, %rdi
100030afd:	e8 68 11 01 00	callq	0x100041c6a ## symbol stub for: _os_unfair_lock_assert_owner
100030b02:	48 89 1d 6f 2b 03 00	movq	%rbx, 207727(%rip)
100030b09:	48 c7 05 6c 2b 03 00 00 00 00 00	movq	$0, 207724(%rip)
100030b14:	4c 89 f7	movq	%r14, %rdi
100030b17:	5b	popq	%rbx
100030b18:	41 5e	popq	%r14
100030b1a:	5d	popq	%rbp
100030b1b:	e9 5c 11 01 00	jmp	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100030b20:	55	pushq	%rbp
100030b21:	48 89 e5	movq	%rsp, %rbp
100030b24:	41 57	pushq	%r15
100030b26:	41 56	pushq	%r14
100030b28:	41 55	pushq	%r13
100030b2a:	41 54	pushq	%r12
100030b2c:	53	pushq	%rbx
100030b2d:	50	pushq	%rax
100030b2e:	49 89 d6	movq	%rdx, %r14
100030b31:	49 89 f7	movq	%rsi, %r15
100030b34:	49 89 fc	movq	%rdi, %r12
100030b37:	48 8d 1d 4a 2b 03 00	leaq	207690(%rip), %rbx
100030b3e:	48 89 df	movq	%rbx, %rdi
100030b41:	be 00 00 01 00	movl	$65536, %esi
100030b46:	e8 2b 11 01 00	callq	0x100041c76 ## symbol stub for: _os_unfair_lock_lock_with_options
100030b4b:	48 89 df	movq	%rbx, %rdi
100030b4e:	e8 17 11 01 00	callq	0x100041c6a ## symbol stub for: _os_unfair_lock_assert_owner
100030b53:	48 8b 05 26 2b 03 00	movq	207654(%rip), %rax
100030b5a:	48 85 c0	testq	%rax, %rax
100030b5d:	0f 95 c1	setne	%cl
100030b60:	4c 39 e0	cmpq	%r12, %rax
100030b63:	0f 94 c3	sete	%bl
100030b66:	20 cb	andb	%cl, %bl
100030b68:	80 fb 01	cmpb	$1, %bl
100030b6b:	75 37	jne	0x100030ba4
100030b6d:	4c 8d 2d 14 2b 03 00	leaq	207636(%rip), %r13
100030b74:	4c 89 ef	movq	%r13, %rdi
100030b77:	e8 ee 10 01 00	callq	0x100041c6a ## symbol stub for: _os_unfair_lock_assert_owner
100030b7c:	31 c0	xorl	%eax, %eax
100030b7e:	48 89 05 f3 2a 03 00	movq	%rax, 207603(%rip)
100030b85:	48 89 05 f4 2a 03 00	movq	%rax, 207604(%rip)
100030b8c:	4c 89 ef	movq	%r13, %rdi
100030b8f:	e8 e8 10 01 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100030b94:	4c 89 e7	movq	%r12, %rdi
100030b97:	4c 89 fe	movq	%r15, %rsi
100030b9a:	4c 89 f2	movq	%r14, %rdx
100030b9d:	e8 d0 14 01 00	callq	0x100042072 ## symbol stub for: _xpc_dictionary_handoff_reply
100030ba2:	eb 17	jmp	0x100030bbb
100030ba4:	48 8d 3d dd 2a 03 00	leaq	207581(%rip), %rdi
100030bab:	e8 cc 10 01 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100030bb0:	4c 89 ff	movq	%r15, %rdi
100030bb3:	4c 89 f6	movq	%r14, %rsi
100030bb6:	e8 19 0d 01 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
100030bbb:	89 d8	movl	%ebx, %eax
100030bbd:	48 83 c4 08	addq	$8, %rsp
100030bc1:	5b	popq	%rbx
100030bc2:	41 5c	popq	%r12
100030bc4:	41 5d	popq	%r13
100030bc6:	41 5e	popq	%r14
100030bc8:	41 5f	popq	%r15
100030bca:	5d	popq	%rbp
100030bcb:	c3	retq
100030bcc:	48 85 ff	testq	%rdi, %rdi
100030bcf:	74 06	je	0x100030bd7
100030bd1:	48 89 f8	movq	%rdi, %rax
100030bd4:	31 d2	xorl	%edx, %edx
100030bd6:	c3	retq
100030bd7:	55	pushq	%rbp
100030bd8:	48 89 e5	movq	%rsp, %rbp
100030bdb:	e8 6a fe 00 00	callq	0x100040a4a
100030be0:	85 ff	testl	%edi, %edi
100030be2:	74 05	je	0x100030be9
100030be4:	31 c0	xorl	%eax, %eax
100030be6:	89 fa	movl	%edi, %edx
100030be8:	c3	retq
100030be9:	55	pushq	%rbp
100030bea:	48 89 e5	movq	%rsp, %rbp
100030bed:	e8 6a fe 00 00	callq	0x100040a5c
100030bf2:	48 85 ff	testq	%rdi, %rdi
100030bf5:	74 06	je	0x100030bfd
100030bf7:	48 89 f8	movq	%rdi, %rax
100030bfa:	31 d2	xorl	%edx, %edx
100030bfc:	c3	retq
100030bfd:	55	pushq	%rbp
100030bfe:	48 89 e5	movq	%rsp, %rbp
100030c01:	e8 68 fe 00 00	callq	0x100040a6e
100030c06:	85 ff	testl	%edi, %edi
100030c08:	74 05	je	0x100030c0f
100030c0a:	31 c0	xorl	%eax, %eax
100030c0c:	89 fa	movl	%edi, %edx
100030c0e:	c3	retq
100030c0f:	55	pushq	%rbp
100030c10:	48 89 e5	movq	%rsp, %rbp
100030c13:	e8 68 fe 00 00	callq	0x100040a80
100030c18:	48 85 ff	testq	%rdi, %rdi
100030c1b:	74 06	je	0x100030c23
100030c1d:	48 89 f8	movq	%rdi, %rax
100030c20:	31 d2	xorl	%edx, %edx
100030c22:	c3	retq
100030c23:	55	pushq	%rbp
100030c24:	48 89 e5	movq	%rsp, %rbp
100030c27:	e8 69 fe 00 00	callq	0x100040a95
100030c2c:	85 ff	testl	%edi, %edi
100030c2e:	74 05	je	0x100030c35
100030c30:	31 c0	xorl	%eax, %eax
100030c32:	89 fa	movl	%edi, %edx
100030c34:	c3	retq
100030c35:	55	pushq	%rbp
100030c36:	48 89 e5	movq	%rsp, %rbp
100030c39:	e8 69 fe 00 00	callq	0x100040aa7
100030c3e:	55	pushq	%rbp
100030c3f:	48 89 e5	movq	%rsp, %rbp
100030c42:	48 83 7f 08 ff	cmpq	$-1, 8(%rdi)
100030c47:	75 1a	jne	0x100030c63
100030c49:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
100030c4e:	75 13	jne	0x100030c63
100030c50:	48 83 7f 28 00	cmpq	$0, 40(%rdi)
100030c55:	75 11	jne	0x100030c68
100030c57:	48 8b 7f 20	movq	32(%rdi), %rdi
100030c5b:	31 f6	xorl	%esi, %esi
100030c5d:	5d	popq	%rbp
100030c5e:	e9 ee 1c fe ff	jmp	0x100012951
100030c63:	e8 66 fe 00 00	callq	0x100040ace
100030c68:	e8 4c fe 00 00	callq	0x100040ab9
100030c6d:	55	pushq	%rbp
100030c6e:	48 89 e5	movq	%rsp, %rbp
100030c71:	53	pushq	%rbx
100030c72:	50	pushq	%rax
100030c73:	48 83 7f 20 00	cmpq	$0, 32(%rdi)
100030c78:	75 66	jne	0x100030ce0
100030c7a:	48 89 fb	movq	%rdi, %rbx
100030c7d:	48 8b 7f 18	movq	24(%rdi), %rdi
100030c81:	e8 1e 78 00 00	callq	0x1000384a4
100030c86:	48 85 c0	testq	%rax, %rax
100030c89:	75 5a	jne	0x100030ce5
100030c8b:	48 8b 7b 30	movq	48(%rbx), %rdi
100030c8f:	e8 10 78 00 00	callq	0x1000384a4
100030c94:	48 85 c0	testq	%rax, %rax
100030c97:	75 51	jne	0x100030cea
100030c99:	48 83 7b 28 00	cmpq	$0, 40(%rbx)
100030c9e:	74 24	je	0x100030cc4
100030ca0:	48 8d 43 08	leaq	8(%rbx), %rax
100030ca4:	48 8b 4b 08	movq	8(%rbx), %rcx
100030ca8:	48 85 c9	testq	%rcx, %rcx
100030cab:	74 08	je	0x100030cb5
100030cad:	48 8b 53 10	movq	16(%rbx), %rdx
100030cb1:	48 89 51 10	movq	%rdx, 16(%rcx)
100030cb5:	48 8b 53 10	movq	16(%rbx), %rdx
100030cb9:	48 89 0a	movq	%rcx, (%rdx)
100030cbc:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100030cc0:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100030cc4:	48 8b 7b 18	movq	24(%rbx), %rdi
100030cc8:	31 f6	xorl	%esi, %esi
100030cca:	e8 82 1c fe ff	callq	0x100012951
100030ccf:	48 8b 7b 30	movq	48(%rbx), %rdi
100030cd3:	31 f6	xorl	%esi, %esi
100030cd5:	48 83 c4 08	addq	$8, %rsp
100030cd9:	5b	popq	%rbx
100030cda:	5d	popq	%rbp
100030cdb:	e9 71 1c fe ff	jmp	0x100012951
100030ce0:	e8 28 fe 00 00	callq	0x100040b0d
100030ce5:	e8 0e fe 00 00	callq	0x100040af8
100030cea:	e8 f4 fd 00 00	callq	0x100040ae3
100030cef:	55	pushq	%rbp
100030cf0:	48 89 e5	movq	%rsp, %rbp
100030cf3:	48 83 7f 08 00	cmpq	$0, 8(%rdi)
100030cf8:	75 02	jne	0x100030cfc
100030cfa:	5d	popq	%rbp
100030cfb:	c3	retq
100030cfc:	e8 21 fe 00 00	callq	0x100040b22
100030d01:	55	pushq	%rbp
100030d02:	48 89 e5	movq	%rsp, %rbp
100030d05:	48 83 7f 08 ff	cmpq	$-1, 8(%rdi)
100030d0a:	75 1f	jne	0x100030d2b
100030d0c:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
100030d11:	75 18	jne	0x100030d2b
100030d13:	48 83 7f 18 ff	cmpq	$-1, 24(%rdi)
100030d18:	75 16	jne	0x100030d30
100030d1a:	48 83 7f 20 ff	cmpq	$-1, 32(%rdi)
100030d1f:	75 0f	jne	0x100030d30
100030d21:	48 8b 7f 30	movq	48(%rdi), %rdi
100030d25:	5d	popq	%rbp
100030d26:	e9 d1 13 01 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
100030d2b:	e8 1c fe 00 00	callq	0x100040b4c
100030d30:	e8 02 fe 00 00	callq	0x100040b37
100030d35:	55	pushq	%rbp
100030d36:	48 89 e5	movq	%rsp, %rbp
100030d39:	48 8d 35 0b 00 00 00	leaq	11(%rip), %rsi
100030d40:	bf 04 00 00 00	movl	$4, %edi
100030d45:	5d	popq	%rbp
100030d46:	e9 0f 8c 00 00	jmp	0x10003995a
100030d4b:	55	pushq	%rbp
100030d4c:	48 89 e5	movq	%rsp, %rbp
100030d4f:	41 57	pushq	%r15
100030d51:	41 56	pushq	%r14
100030d53:	41 55	pushq	%r13
100030d55:	41 54	pushq	%r12
100030d57:	53	pushq	%rbx
100030d58:	48 83 ec 28	subq	$40, %rsp
100030d5c:	49 89 ce	movq	%rcx, %r14
100030d5f:	48 89 55 d0	movq	%rdx, -48(%rbp)
100030d63:	89 f3	movl	%esi, %ebx
100030d65:	e8 ba 8b 00 00	callq	0x100039924
100030d6a:	81 c3 70 fe ff ff	addl	$4294966896, %ebx
100030d70:	83 fb 07	cmpl	$7, %ebx
100030d73:	0f 87 5f 01 00 00	ja	0x100030ed8
100030d79:	49 89 c4	movq	%rax, %r12
100030d7c:	4c 89 75 c8	movq	%r14, -56(%rbp)
100030d80:	41 bd 2d 00 00 00	movl	$45, %r13d
100030d86:	48 8d 05 17 09 00 00	leaq	2327(%rip), %rax
100030d8d:	48 63 0c 98	movslq	(%rax,%rbx,4), %rcx
100030d91:	48 01 c1	addq	%rax, %rcx
100030d94:	ff e1	jmpq	*%rcx
100030d96:	41 8b 7c 24 14	movl	20(%r12), %edi
100030d9b:	e8 26 9f fe ff	callq	0x10001acc6
100030da0:	48 85 c0	testq	%rax, %rax
100030da3:	0f 84 95 04 00 00	je	0x10003123e
100030da9:	49 89 c4	movq	%rax, %r12
100030dac:	48 8d 35 ea 88 01 00	leaq	100586(%rip), %rsi ## literal pool for: "stream"
100030db3:	48 8b 5d d0	movq	-48(%rbp), %rbx
100030db7:	48 89 df	movq	%rbx, %rdi
100030dba:	e8 9b 12 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100030dbf:	49 89 c6	movq	%rax, %r14
100030dc2:	48 8d 35 34 8e 01 00	leaq	101940(%rip), %rsi ## literal pool for: "name"
100030dc9:	48 89 df	movq	%rbx, %rdi
100030dcc:	e8 89 12 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100030dd1:	49 89 c7	movq	%rax, %r15
100030dd4:	48 8d 35 34 ff 01 00	leaq	130868(%rip), %rsi ## literal pool for: "descriptor"
100030ddb:	48 89 df	movq	%rbx, %rdi
100030dde:	e8 89 12 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100030de3:	41 bd 16 00 00 00	movl	$22, %r13d
100030de9:	4c 89 75 c0	movq	%r14, -64(%rbp)
100030ded:	4d 85 f6	testq	%r14, %r14
100030df0:	0f 84 03 07 00 00	je	0x1000314f9
100030df6:	4d 85 ff	testq	%r15, %r15
100030df9:	0f 84 fa 06 00 00	je	0x1000314f9
100030dff:	4d 89 fe	movq	%r15, %r14
100030e02:	48 85 c0	testq	%rax, %rax
100030e05:	74 1b	je	0x100030e22
100030e07:	48 89 c7	movq	%rax, %rdi
100030e0a:	48 89 c3	movq	%rax, %rbx
100030e0d:	e8 b4 12 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100030e12:	48 3b 05 e7 72 02 00	cmpq	160487(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100030e19:	48 89 d8	movq	%rbx, %rax
100030e1c:	0f 85 d7 06 00 00	jne	0x1000314f9
100030e22:	49 89 c7	movq	%rax, %r15
100030e25:	48 8b 7d d0	movq	-48(%rbp), %rdi
100030e29:	e8 f6 11 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100030e2e:	84 c0	testb	%al, %al
100030e30:	0f 84 c3 06 00 00	je	0x1000314f9
100030e36:	4c 89 e7	movq	%r12, %rdi
100030e39:	48 8b 75 c0	movq	-64(%rbp), %rsi
100030e3d:	4c 89 75 b8	movq	%r14, -72(%rbp)
100030e41:	4c 89 f2	movq	%r14, %rdx
100030e44:	e8 94 13 00 00	callq	0x1000321dd
100030e49:	48 85 c0	testq	%rax, %rax
100030e4c:	74 5d	je	0x100030eab
100030e4e:	49 89 c5	movq	%rax, %r13
100030e51:	48 89 c3	movq	%rax, %rbx
100030e54:	4d 85 ff	testq	%r15, %r15
100030e57:	74 15	je	0x100030e6e
100030e59:	48 8b 73 30	movq	48(%rbx), %rsi
100030e5d:	48 85 f6	testq	%rsi, %rsi
100030e60:	74 0c	je	0x100030e6e
100030e62:	4c 89 ff	movq	%r15, %rdi
100030e65:	e8 50 12 01 00	callq	0x1000420ba ## symbol stub for: _xpc_equal
100030e6a:	84 c0	testb	%al, %al
100030e6c:	75 55	jne	0x100030ec3
100030e6e:	49 83 c5 08	addq	$8, %r13
100030e72:	48 8b 43 08	movq	8(%rbx), %rax
100030e76:	48 85 c0	testq	%rax, %rax
100030e79:	74 08	je	0x100030e83
100030e7b:	48 8b 4b 10	movq	16(%rbx), %rcx
100030e7f:	48 89 48 10	movq	%rcx, 16(%rax)
100030e83:	48 8b 4b 10	movq	16(%rbx), %rcx
100030e87:	48 89 01	movq	%rax, (%rcx)
100030e8a:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100030e8e:	f3 41 0f 7f 45 00	movdqu	%xmm0, (%r13)
100030e94:	48 89 df	movq	%rbx, %rdi
100030e97:	be 01 00 00 00	movl	$1, %esi
100030e9c:	e8 1c 0e 00 00	callq	0x100031cbd
100030ea1:	48 89 df	movq	%rbx, %rdi
100030ea4:	31 f6	xorl	%esi, %esi
100030ea6:	e8 a6 1a fe ff	callq	0x100012951
100030eab:	4d 85 ff	testq	%r15, %r15
100030eae:	74 13	je	0x100030ec3
100030eb0:	4c 89 e7	movq	%r12, %rdi
100030eb3:	48 8b 75 c0	movq	-64(%rbp), %rsi
100030eb7:	48 8b 55 b8	movq	-72(%rbp), %rdx
100030ebb:	4c 89 f9	movq	%r15, %rcx
100030ebe:	e8 a4 0f 00 00	callq	0x100031e67
100030ec3:	48 8b 7d d0	movq	-48(%rbp), %rdi
100030ec7:	e8 52 11 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100030ecc:	48 8b 4d c8	movq	-56(%rbp), %rcx
100030ed0:	48 89 01	movq	%rax, (%rcx)
100030ed3:	e9 76 05 00 00	jmp	0x10003144e
100030ed8:	41 bd 21 00 00 00	movl	$33, %r13d
100030ede:	e9 16 06 00 00	jmp	0x1000314f9
100030ee3:	41 8b 7c 24 14	movl	20(%r12), %edi
100030ee8:	e8 d9 9d fe ff	callq	0x10001acc6
100030eed:	48 85 c0	testq	%rax, %rax
100030ef0:	0f 84 48 03 00 00	je	0x10003123e
100030ef6:	49 89 c7	movq	%rax, %r15
100030ef9:	48 8b 7d d0	movq	-48(%rbp), %rdi
100030efd:	e8 22 11 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100030f02:	41 bd 16 00 00 00	movl	$22, %r13d
100030f08:	84 c0	testb	%al, %al
100030f0a:	0f 84 e9 05 00 00	je	0x1000314f9
100030f10:	48 8d 35 86 87 01 00	leaq	100230(%rip), %rsi ## literal pool for: "stream"
100030f17:	48 8b 5d d0	movq	-48(%rbp), %rbx
100030f1b:	48 89 df	movq	%rbx, %rdi
100030f1e:	e8 37 11 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100030f23:	49 89 c6	movq	%rax, %r14
100030f26:	48 8d 35 d0 8c 01 00	leaq	101584(%rip), %rsi ## literal pool for: "name"
100030f2d:	48 89 df	movq	%rbx, %rdi
100030f30:	e8 25 11 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100030f35:	4d 85 f6	testq	%r14, %r14
100030f38:	0f 84 de 03 00 00	je	0x10003131c
100030f3e:	48 85 c0	testq	%rax, %rax
100030f41:	0f 84 96 04 00 00	je	0x1000313dd
100030f47:	4c 89 ff	movq	%r15, %rdi
100030f4a:	4c 89 f6	movq	%r14, %rsi
100030f4d:	48 89 c2	movq	%rax, %rdx
100030f50:	e8 88 12 00 00	callq	0x1000321dd
100030f55:	48 85 c0	testq	%rax, %rax
100030f58:	0f 84 ad 05 00 00	je	0x10003150b
100030f5e:	48 8b 78 30	movq	48(%rax), %rdi
100030f62:	e8 9b 11 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100030f67:	49 89 c4	movq	%rax, %r12
100030f6a:	e9 b3 04 00 00	jmp	0x100031422
100030f6f:	41 8b 7c 24 14	movl	20(%r12), %edi
100030f74:	e8 4d 9d fe ff	callq	0x10001acc6
100030f79:	48 85 c0	testq	%rax, %rax
100030f7c:	0f 84 b1 02 00 00	je	0x100031233
100030f82:	49 89 c7	movq	%rax, %r15
100030f85:	48 8d 35 11 87 01 00	leaq	100113(%rip), %rsi ## literal pool for: "stream"
100030f8c:	48 8b 5d d0	movq	-48(%rbp), %rbx
100030f90:	48 89 df	movq	%rbx, %rdi
100030f93:	e8 c2 10 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100030f98:	49 89 c4	movq	%rax, %r12
100030f9b:	48 8d 35 7e fd 01 00	leaq	130430(%rip), %rsi ## literal pool for: "token"
100030fa2:	48 89 df	movq	%rbx, %rdi
100030fa5:	e8 b6 10 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100030faa:	41 bd 16 00 00 00	movl	$22, %r13d
100030fb0:	4d 85 e4	testq	%r12, %r12
100030fb3:	0f 84 40 05 00 00	je	0x1000314f9
100030fb9:	49 89 c6	movq	%rax, %r14
100030fbc:	48 85 c0	testq	%rax, %rax
100030fbf:	0f 84 34 05 00 00	je	0x1000314f9
100030fc5:	48 89 df	movq	%rbx, %rdi
100030fc8:	e8 57 10 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100030fcd:	84 c0	testb	%al, %al
100030fcf:	0f 84 24 05 00 00	je	0x1000314f9
100030fd5:	49 8b 9f 80 00 00 00	movq	128(%r15), %rbx
100030fdc:	41 bd 03 00 00 00	movl	$3, %r13d
100030fe2:	48 85 db	testq	%rbx, %rbx
100030fe5:	0f 84 0e 05 00 00	je	0x1000314f9
100030feb:	4c 8b 7b 20	movq	32(%rbx), %r15
100030fef:	49 8d 7f 18	leaq	24(%r15), %rdi
100030ff3:	4c 89 e6	movq	%r12, %rsi
100030ff6:	e8 31 0e 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100030ffb:	85 c0	testl	%eax, %eax
100030ffd:	0f 84 96 04 00 00	je	0x100031499
100031003:	48 8b 5b 08	movq	8(%rbx), %rbx
100031007:	eb d9	jmp	0x100030fe2
100031009:	41 8b 7c 24 14	movl	20(%r12), %edi
10003100e:	e8 b3 9c fe ff	callq	0x10001acc6
100031013:	48 85 c0	testq	%rax, %rax
100031016:	0f 84 17 02 00 00	je	0x100031233
10003101c:	48 89 c3	movq	%rax, %rbx
10003101f:	48 8d 35 77 86 01 00	leaq	99959(%rip), %rsi ## literal pool for: "stream"
100031026:	4c 8b 75 d0	movq	-48(%rbp), %r14
10003102a:	4c 89 f7	movq	%r14, %rdi
10003102d:	e8 28 10 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100031032:	41 bd 16 00 00 00	movl	$22, %r13d
100031038:	48 85 c0	testq	%rax, %rax
10003103b:	0f 84 b8 04 00 00	je	0x1000314f9
100031041:	49 89 c7	movq	%rax, %r15
100031044:	4c 89 f7	movq	%r14, %rdi
100031047:	e8 d8 0f 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10003104c:	84 c0	testb	%al, %al
10003104e:	0f 84 a5 04 00 00	je	0x1000314f9
100031054:	48 89 5d c0	movq	%rbx, -64(%rbp)
100031058:	4c 8b b3 80 00 00 00	movq	128(%rbx), %r14
10003105f:	4d 85 f6	testq	%r14, %r14
100031062:	0f 84 e1 01 00 00	je	0x100031249
100031068:	49 8b 7e 20	movq	32(%r14), %rdi
10003106c:	48 83 c7 18	addq	$24, %rdi
100031070:	4c 89 fe	movq	%r15, %rsi
100031073:	e8 b4 0d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031078:	85 c0	testl	%eax, %eax
10003107a:	0f 84 33 02 00 00	je	0x1000312b3
100031080:	4d 8b 76 08	movq	8(%r14), %r14
100031084:	eb d9	jmp	0x10003105f
100031086:	41 8b 7c 24 14	movl	20(%r12), %edi
10003108b:	e8 36 9c fe ff	callq	0x10001acc6
100031090:	48 85 c0	testq	%rax, %rax
100031093:	0f 84 9a 01 00 00	je	0x100031233
100031099:	49 89 c7	movq	%rax, %r15
10003109c:	48 8d 35 fa 85 01 00	leaq	99834(%rip), %rsi ## literal pool for: "stream"
1000310a3:	48 8b 5d d0	movq	-48(%rbp), %rbx
1000310a7:	48 89 df	movq	%rbx, %rdi
1000310aa:	e8 ab 0f 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000310af:	49 89 c4	movq	%rax, %r12
1000310b2:	48 8d 35 67 fc 01 00	leaq	130151(%rip), %rsi ## literal pool for: "token"
1000310b9:	48 89 df	movq	%rbx, %rdi
1000310bc:	e8 9f 0f 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000310c1:	41 bd 16 00 00 00	movl	$22, %r13d
1000310c7:	4d 85 e4	testq	%r12, %r12
1000310ca:	0f 84 29 04 00 00	je	0x1000314f9
1000310d0:	49 89 c6	movq	%rax, %r14
1000310d3:	48 85 c0	testq	%rax, %rax
1000310d6:	0f 84 1d 04 00 00	je	0x1000314f9
1000310dc:	48 89 df	movq	%rbx, %rdi
1000310df:	e8 40 0f 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000310e4:	84 c0	testb	%al, %al
1000310e6:	0f 84 0d 04 00 00	je	0x1000314f9
1000310ec:	49 8b 9f 80 00 00 00	movq	128(%r15), %rbx
1000310f3:	41 bd 03 00 00 00	movl	$3, %r13d
1000310f9:	48 85 db	testq	%rbx, %rbx
1000310fc:	0f 84 f7 03 00 00	je	0x1000314f9
100031102:	4c 8b 7b 20	movq	32(%rbx), %r15
100031106:	49 8d 7f 18	leaq	24(%r15), %rdi
10003110a:	4c 89 e6	movq	%r12, %rsi
10003110d:	e8 1a 0d 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031112:	85 c0	testl	%eax, %eax
100031114:	0f 84 98 03 00 00	je	0x1000314b2
10003111a:	48 8b 5b 08	movq	8(%rbx), %rbx
10003111e:	eb d9	jmp	0x1000310f9
100031120:	41 8b 7c 24 14	movl	20(%r12), %edi
100031125:	e8 9c 9b fe ff	callq	0x10001acc6
10003112a:	48 85 c0	testq	%rax, %rax
10003112d:	0f 84 00 01 00 00	je	0x100031233
100031133:	49 89 c6	movq	%rax, %r14
100031136:	48 8d 35 60 85 01 00	leaq	99680(%rip), %rsi ## literal pool for: "stream"
10003113d:	48 8b 5d d0	movq	-48(%rbp), %rbx
100031141:	48 89 df	movq	%rbx, %rdi
100031144:	e8 11 0f 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100031149:	41 bd 16 00 00 00	movl	$22, %r13d
10003114f:	48 85 c0	testq	%rax, %rax
100031152:	0f 84 a1 03 00 00	je	0x1000314f9
100031158:	49 89 c7	movq	%rax, %r15
10003115b:	48 89 df	movq	%rbx, %rdi
10003115e:	e8 c1 0e 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100031163:	84 c0	testb	%al, %al
100031165:	0f 84 8e 03 00 00	je	0x1000314f9
10003116b:	49 8b 9e 80 00 00 00	movq	128(%r14), %rbx
100031172:	48 85 db	testq	%rbx, %rbx
100031175:	0f 84 89 01 00 00	je	0x100031304
10003117b:	48 8b 7b 20	movq	32(%rbx), %rdi
10003117f:	48 83 c7 18	addq	$24, %rdi
100031183:	4c 89 fe	movq	%r15, %rsi
100031186:	e8 a1 0c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
10003118b:	85 c0	testl	%eax, %eax
10003118d:	0f 84 c3 02 00 00	je	0x100031456
100031193:	48 8b 5b 08	movq	8(%rbx), %rbx
100031197:	eb d9	jmp	0x100031172
100031199:	41 8b 7c 24 14	movl	20(%r12), %edi
10003119e:	e8 23 9b fe ff	callq	0x10001acc6
1000311a3:	48 85 c0	testq	%rax, %rax
1000311a6:	0f 84 87 00 00 00	je	0x100031233
1000311ac:	49 89 c7	movq	%rax, %r15
1000311af:	48 8d 35 e7 84 01 00	leaq	99559(%rip), %rsi ## literal pool for: "stream"
1000311b6:	48 8b 5d d0	movq	-48(%rbp), %rbx
1000311ba:	48 89 df	movq	%rbx, %rdi
1000311bd:	e8 98 0e 01 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000311c2:	49 89 c4	movq	%rax, %r12
1000311c5:	48 8d 35 54 fb 01 00	leaq	129876(%rip), %rsi ## literal pool for: "token"
1000311cc:	48 89 df	movq	%rbx, %rdi
1000311cf:	e8 8c 0e 01 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000311d4:	41 bd 16 00 00 00	movl	$22, %r13d
1000311da:	4d 85 e4	testq	%r12, %r12
1000311dd:	0f 84 16 03 00 00	je	0x1000314f9
1000311e3:	49 89 c6	movq	%rax, %r14
1000311e6:	48 85 c0	testq	%rax, %rax
1000311e9:	0f 84 0a 03 00 00	je	0x1000314f9
1000311ef:	48 89 df	movq	%rbx, %rdi
1000311f2:	e8 2d 0e 01 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000311f7:	84 c0	testb	%al, %al
1000311f9:	0f 84 fa 02 00 00	je	0x1000314f9
1000311ff:	49 8b 9f 80 00 00 00	movq	128(%r15), %rbx
100031206:	41 bd 03 00 00 00	movl	$3, %r13d
10003120c:	48 85 db	testq	%rbx, %rbx
10003120f:	0f 84 e4 02 00 00	je	0x1000314f9
100031215:	4c 8b 7b 20	movq	32(%rbx), %r15
100031219:	49 8d 7f 18	leaq	24(%r15), %rdi
10003121d:	4c 89 e6	movq	%r12, %rsi
100031220:	e8 07 0c 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031225:	85 c0	testl	%eax, %eax
100031227:	0f 84 a0 02 00 00	je	0x1000314cd
10003122d:	48 8b 5b 08	movq	8(%rbx), %rbx
100031231:	eb d9	jmp	0x10003120c
100031233:	41 bd 01 00 00 00	movl	$1, %r13d
100031239:	e9 bb 02 00 00	jmp	0x1000314f9
10003123e:	41 bd 71 00 00 00	movl	$113, %r13d
100031244:	e9 b0 02 00 00	jmp	0x1000314f9
100031249:	41 bd 7c 00 00 00	movl	$124, %r13d
10003124f:	48 8b 5d c0	movq	-64(%rbp), %rbx
100031253:	f6 83 64 01 00 00 10	testb	$16, 356(%rbx)
10003125a:	0f 85 99 02 00 00	jne	0x1000314f9
100031260:	be 07 00 00 00	movl	$7, %esi
100031265:	4c 89 e7	movq	%r12, %rdi
100031268:	e8 49 a7 fd ff	callq	0x10000b9b6
10003126d:	41 bd 03 00 00 00	movl	$3, %r13d
100031273:	84 c0	testb	%al, %al
100031275:	0f 84 7e 02 00 00	je	0x1000314f9
10003127b:	4c 8d 65 b4	leaq	-76(%rbp), %r12
10003127f:	41 c7 04 24 00 00 00 00	movl	$0, (%r12)
100031287:	48 89 df	movq	%rbx, %rdi
10003128a:	4c 89 fe	movq	%r15, %rsi
10003128d:	ba 01 00 00 00	movl	$1, %edx
100031292:	4c 89 e1	movq	%r12, %rcx
100031295:	e8 2a 04 00 00	callq	0x1000316c4
10003129a:	45 8b 2c 24	movl	(%r12), %r13d
10003129e:	45 85 ed	testl	%r13d, %r13d
1000312a1:	0f 85 52 02 00 00	jne	0x1000314f9
1000312a7:	49 89 c6	movq	%rax, %r14
1000312aa:	48 85 c0	testq	%rax, %rax
1000312ad:	0f 84 ea 03 00 00	je	0x10003169d
1000312b3:	48 8b 7d d0	movq	-48(%rbp), %rdi
1000312b7:	e8 62 0d 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000312bc:	49 89 c7	movq	%rax, %r15
1000312bf:	45 31 ed	xorl	%r13d, %r13d
1000312c2:	31 ff	xorl	%edi, %edi
1000312c4:	31 f6	xorl	%esi, %esi
1000312c6:	e8 75 0c 01 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
1000312cb:	49 89 c4	movq	%rax, %r12
1000312ce:	49 8b 46 20	movq	32(%r14), %rax
1000312d2:	48 8b 58 08	movq	8(%rax), %rbx
1000312d6:	48 85 db	testq	%rbx, %rbx
1000312d9:	0f 84 ad 00 00 00	je	0x10003138c
1000312df:	48 8b 53 40	movq	64(%rbx), %rdx
1000312e3:	4c 89 e7	movq	%r12, %rdi
1000312e6:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
1000312ed:	e8 8a 0c 01 00	callq	0x100041f7c ## symbol stub for: _xpc_array_set_uint64
1000312f2:	48 8b 73 30	movq	48(%rbx), %rsi
1000312f6:	4c 89 e7	movq	%r12, %rdi
1000312f9:	e8 30 0c 01 00	callq	0x100041f2e ## symbol stub for: _xpc_array_append_value
1000312fe:	48 8b 5b 18	movq	24(%rbx), %rbx
100031302:	eb d2	jmp	0x1000312d6
100031304:	41 f6 86 64 01 00 00 10	testb	$16, 356(%r14)
10003130c:	b8 03 00 00 00	movl	$3, %eax
100031311:	41 bd 7c 00 00 00	movl	$124, %r13d
100031317:	e9 d9 01 00 00	jmp	0x1000314f5
10003131c:	31 ff	xorl	%edi, %edi
10003131e:	31 f6	xorl	%esi, %esi
100031320:	31 d2	xorl	%edx, %edx
100031322:	e8 eb 0c 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100031327:	49 89 c4	movq	%rax, %r12
10003132a:	49 8b 5f 78	movq	120(%r15), %rbx
10003132e:	48 85 db	testq	%rbx, %rbx
100031331:	0f 84 e7 00 00 00	je	0x10003141e
100031337:	4c 8b 7b 38	movq	56(%rbx), %r15
10003133b:	49 83 c7 18	addq	$24, %r15
10003133f:	4c 89 e7	movq	%r12, %rdi
100031342:	4c 89 fe	movq	%r15, %rsi
100031345:	e8 22 0d 01 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003134a:	49 89 c6	movq	%rax, %r14
10003134d:	48 85 c0	testq	%rax, %rax
100031350:	75 24	jne	0x100031376
100031352:	31 ff	xorl	%edi, %edi
100031354:	31 f6	xorl	%esi, %esi
100031356:	31 d2	xorl	%edx, %edx
100031358:	e8 b5 0c 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003135d:	49 89 c6	movq	%rax, %r14
100031360:	4c 89 e7	movq	%r12, %rdi
100031363:	4c 89 fe	movq	%r15, %rsi
100031366:	48 89 c2	movq	%rax, %rdx
100031369:	e8 40 0d 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003136e:	4c 89 f7	movq	%r14, %rdi
100031371:	e8 86 0d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100031376:	48 8d 73 50	leaq	80(%rbx), %rsi
10003137a:	48 8b 53 30	movq	48(%rbx), %rdx
10003137e:	4c 89 f7	movq	%r14, %rdi
100031381:	e8 28 0d 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100031386:	48 8b 5b 08	movq	8(%rbx), %rbx
10003138a:	eb a2	jmp	0x10003132e
10003138c:	48 8d 35 93 f9 01 00	leaq	129427(%rip), %rsi ## literal pool for: "events"
100031393:	4c 89 ff	movq	%r15, %rdi
100031396:	4c 89 e2	movq	%r12, %rdx
100031399:	e8 10 0d 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003139e:	4c 89 e7	movq	%r12, %rdi
1000313a1:	e8 56 0d 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000313a6:	49 8b 46 18	movq	24(%r14), %rax
1000313aa:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
1000313b1:	e8 88 01 ff ff	callq	0x10002153e
1000313b6:	0f b6 50 40	movzbl	64(%rax), %edx
1000313ba:	83 e2 01	andl	$1, %edx
1000313bd:	48 8d 35 69 f9 01 00	leaq	129385(%rip), %rsi ## literal pool for: "initial-load-completed"
1000313c4:	4c 89 ff	movq	%r15, %rdi
1000313c7:	e8 ac 0c 01 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
1000313cc:	48 8b 45 c8	movq	-56(%rbp), %rax
1000313d0:	4c 89 38	movq	%r15, (%rax)
1000313d3:	41 80 66 30 fe	andb	$-2, 48(%r14)
1000313d8:	e9 1c 01 00 00	jmp	0x1000314f9
1000313dd:	31 ff	xorl	%edi, %edi
1000313df:	31 f6	xorl	%esi, %esi
1000313e1:	31 d2	xorl	%edx, %edx
1000313e3:	e8 2a 0c 01 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
1000313e8:	49 89 c4	movq	%rax, %r12
1000313eb:	49 8b 5f 78	movq	120(%r15), %rbx
1000313ef:	48 85 db	testq	%rbx, %rbx
1000313f2:	74 2a	je	0x10003141e
1000313f4:	48 8b 7b 38	movq	56(%rbx), %rdi
1000313f8:	48 83 c7 18	addq	$24, %rdi
1000313fc:	4c 89 f6	movq	%r14, %rsi
1000313ff:	e8 28 0a 01 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031404:	85 c0	testl	%eax, %eax
100031406:	75 10	jne	0x100031418
100031408:	48 8d 73 50	leaq	80(%rbx), %rsi
10003140c:	48 8b 53 30	movq	48(%rbx), %rdx
100031410:	4c 89 e7	movq	%r12, %rdi
100031413:	e8 96 0c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
100031418:	48 8b 5b 08	movq	8(%rbx), %rbx
10003141c:	eb d1	jmp	0x1000313ef
10003141e:	48 8b 5d d0	movq	-48(%rbp), %rbx
100031422:	48 89 df	movq	%rbx, %rdi
100031425:	e8 f4 0b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10003142a:	48 89 c3	movq	%rax, %rbx
10003142d:	48 8d 35 e6 f8 01 00	leaq	129254(%rip), %rsi ## literal pool for: "event"
100031434:	48 89 c7	movq	%rax, %rdi
100031437:	4c 89 e2	movq	%r12, %rdx
10003143a:	e8 6f 0c 01 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003143f:	4c 89 e7	movq	%r12, %rdi
100031442:	e8 b5 0c 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100031447:	48 8b 45 c8	movq	-56(%rbp), %rax
10003144b:	48 89 18	movq	%rbx, (%rax)
10003144e:	45 31 ed	xorl	%r13d, %r13d
100031451:	e9 a3 00 00 00	jmp	0x1000314f9
100031456:	f6 43 30 01	testb	$1, 48(%rbx)
10003145a:	0f 85 b3 00 00 00	jne	0x100031513
100031460:	48 8b 7b 28	movq	40(%rbx), %rdi
100031464:	48 85 ff	testq	%rdi, %rdi
100031467:	74 21	je	0x10003148a
100031469:	e8 82 0c 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10003146e:	a9 df ff ff ff	testl	$4294967263, %eax
100031473:	0f 85 17 02 00 00	jne	0x100031690
100031479:	48 8b 7b 28	movq	40(%rbx), %rdi
10003147d:	e8 7a 0c 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100031482:	48 c7 43 28 00 00 00 00	movq	$0, 40(%rbx)
10003148a:	48 8b 7d d0	movq	-48(%rbp), %rdi
10003148e:	e8 8b 0b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100031493:	48 89 43 28	movq	%rax, 40(%rbx)
100031497:	eb b5	jmp	0x10003144e
100031499:	4d 8b 7f 08	movq	8(%r15), %r15
10003149d:	4d 85 ff	testq	%r15, %r15
1000314a0:	74 44	je	0x1000314e6
1000314a2:	4d 39 77 40	cmpq	%r14, 64(%r15)
1000314a6:	0f 84 93 00 00 00	je	0x10003153f
1000314ac:	4d 8b 7f 18	movq	24(%r15), %r15
1000314b0:	eb eb	jmp	0x10003149d
1000314b2:	4d 8b 67 08	movq	8(%r15), %r12
1000314b6:	4d 85 e4	testq	%r12, %r12
1000314b9:	74 2b	je	0x1000314e6
1000314bb:	4d 39 74 24 40	cmpq	%r14, 64(%r12)
1000314c0:	0f 84 a0 00 00 00	je	0x100031566
1000314c6:	4d 8b 64 24 18	movq	24(%r12), %r12
1000314cb:	eb e9	jmp	0x1000314b6
1000314cd:	49 8b 47 08	movq	8(%r15), %rax
1000314d1:	48 85 c0	testq	%rax, %rax
1000314d4:	74 10	je	0x1000314e6
1000314d6:	4c 39 70 40	cmpq	%r14, 64(%rax)
1000314da:	0f 84 5d 01 00 00	je	0x10003163d
1000314e0:	48 8b 40 18	movq	24(%rax), %rax
1000314e4:	eb eb	jmp	0x1000314d1
1000314e6:	f6 43 30 01	testb	$1, 48(%rbx)
1000314ea:	b8 03 00 00 00	movl	$3, %eax
1000314ef:	41 bd 84 00 00 00	movl	$132, %r13d
1000314f5:	44 0f 44 e8	cmovel	%eax, %r13d
1000314f9:	44 89 e8	movl	%r13d, %eax
1000314fc:	48 83 c4 28	addq	$40, %rsp
100031500:	5b	popq	%rbx
100031501:	41 5c	popq	%r12
100031503:	41 5d	popq	%r13
100031505:	41 5e	popq	%r14
100031507:	41 5f	popq	%r15
100031509:	5d	popq	%rbp
10003150a:	c3	retq
10003150b:	41 bd 03 00 00 00	movl	$3, %r13d
100031511:	eb e6	jmp	0x1000314f9
100031513:	48 8b 7d d0	movq	-48(%rbp), %rdi
100031517:	e8 02 0b 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10003151c:	48 89 c3	movq	%rax, %rbx
10003151f:	48 89 c7	movq	%rax, %rdi
100031522:	e8 c9 0b 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100031527:	a9 df ff ff ff	testl	$4294967263, %eax
10003152c:	0f 85 51 01 00 00	jne	0x100031683
100031532:	48 89 df	movq	%rbx, %rdi
100031535:	e8 c2 0b 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003153a:	e9 0f ff ff ff	jmp	0x10003144e
10003153f:	48 8b 7d d0	movq	-48(%rbp), %rdi
100031543:	e8 d6 0a 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100031548:	49 89 c6	movq	%rax, %r14
10003154b:	49 83 c7 50	addq	$80, %r15
10003154f:	48 8d 35 a7 86 01 00	leaq	100007(%rip), %rsi ## literal pool for: "name"
100031556:	48 89 c7	movq	%rax, %rdi
100031559:	4c 89 fa	movq	%r15, %rdx
10003155c:	e8 3b 0b 01 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100031561:	e9 11 01 00 00	jmp	0x100031677
100031566:	48 8d 35 d7 f7 01 00	leaq	128983(%rip), %rsi ## literal pool for: "state"
10003156d:	48 8b 5d d0	movq	-48(%rbp), %rbx
100031571:	48 89 df	movq	%rbx, %rdi
100031574:	e8 bd 0a 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100031579:	41 8a 4c 24 48	movb	72(%r12), %cl
10003157e:	89 ca	movl	%ecx, %edx
100031580:	80 e2 fe	andb	$-2, %dl
100031583:	08 c2	orb	%al, %dl
100031585:	41 88 54 24 48	movb	%dl, 72(%r12)
10003158a:	84 c0	testb	%al, %al
10003158c:	0f 84 a3 00 00 00	je	0x100031635
100031592:	49 8b 7c 24 28	movq	40(%r12), %rdi
100031597:	80 e1 02	andb	$2, %cl
10003159a:	d0 e9	shrb	%cl
10003159c:	0f b6 c1	movzbl	%cl, %eax
10003159f:	8d 34 40	leal	(%rax,%rax,2), %esi
1000315a2:	83 ce 08	orl	$8, %esi
1000315a5:	e8 1a 99 fe ff	callq	0x10001aec4
1000315aa:	41 89 c6	movl	%eax, %r14d
1000315ad:	83 f8 25	cmpl	$37, %eax
1000315b0:	77 13	ja	0x1000315c5
1000315b2:	44 89 f0	movl	%r14d, %eax
1000315b5:	48 b9 01 00 00 00 30 00 00 00	movabsq	$206158430209, %rcx
1000315bf:	48 0f a3 c1	btq	%rax, %rcx
1000315c3:	72 29	jb	0x1000315ee
1000315c5:	4d 8b 7c 24 28	movq	40(%r12), %r15
1000315ca:	44 89 f7	movl	%r14d, %edi
1000315cd:	e8 3c 0b 01 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000315d2:	48 8d 15 71 f7 01 00	leaq	128881(%rip), %rdx ## literal pool for: "Could not spawn service in response to XPC event state change: %d: %s"
1000315d9:	4c 89 ff	movq	%r15, %rdi
1000315dc:	be 03 00 00 00	movl	$3, %esi
1000315e1:	44 89 f1	movl	%r14d, %ecx
1000315e4:	49 89 c0	movq	%rax, %r8
1000315e7:	31 c0	xorl	%eax, %eax
1000315e9:	e8 cc 49 fe ff	callq	0x100015fba
1000315ee:	41 f6 44 24 48 02	testb	$2, 72(%r12)
1000315f4:	74 3f	je	0x100031635
1000315f6:	49 8d 44 24 08	leaq	8(%r12), %rax
1000315fb:	49 8b 4c 24 08	movq	8(%r12), %rcx
100031600:	48 85 c9	testq	%rcx, %rcx
100031603:	74 09	je	0x10003160e
100031605:	49 8b 54 24 10	movq	16(%r12), %rdx
10003160a:	48 89 51 10	movq	%rdx, 16(%rcx)
10003160e:	49 8b 54 24 10	movq	16(%r12), %rdx
100031613:	48 89 0a	movq	%rcx, (%rdx)
100031616:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10003161a:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
10003161e:	4c 89 e7	movq	%r12, %rdi
100031621:	be 01 00 00 00	movl	$1, %esi
100031626:	e8 92 06 00 00	callq	0x100031cbd
10003162b:	4c 89 e7	movq	%r12, %rdi
10003162e:	31 f6	xorl	%esi, %esi
100031630:	e8 1c 13 fe ff	callq	0x100012951
100031635:	48 89 df	movq	%rbx, %rdi
100031638:	e9 8a f8 ff ff	jmp	0x100030ec7
10003163d:	48 8b 40 28	movq	40(%rax), %rax
100031641:	48 8b 80 e8 00 00 00	movq	232(%rax), %rax
100031648:	8b 58 34	movl	52(%rax), %ebx
10003164b:	85 db	testl	%ebx, %ebx
10003164d:	75 0a	jne	0x100031659
10003164f:	48 8d 05 da 11 03 00	leaq	201178(%rip), %rax
100031656:	8b 58 18	movl	24(%rax), %ebx
100031659:	48 8b 7d d0	movq	-48(%rbp), %rdi
10003165d:	e8 bc 09 01 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100031662:	49 89 c6	movq	%rax, %r14
100031665:	48 63 d3	movslq	%ebx, %rdx
100031668:	48 8d 35 80 df 01 00	leaq	122752(%rip), %rsi ## literal pool for: "asid"
10003166f:	48 89 c7	movq	%rax, %rdi
100031672:	e8 0d 0a 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100031677:	48 8b 45 c8	movq	-56(%rbp), %rax
10003167b:	4c 89 30	movq	%r14, (%rax)
10003167e:	e9 cb fd ff ff	jmp	0x10003144e
100031683:	48 63 f8	movslq	%eax, %rdi
100031686:	e8 17 01 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003168b:	e9 a2 fe ff ff	jmp	0x100031532
100031690:	48 63 f8	movslq	%eax, %rdi
100031693:	e8 0a 01 01 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100031698:	e9 dc fd ff ff	jmp	0x100031479
10003169d:	e8 bf f4 00 00	callq	0x100040b61
1000316a2:	66 90	nop
1000316a4:	f2 f6 ff	repne		idivb	%bh
	.byte 0xff #bad opcode
	.byte 0x3f #bad opcode
1000316a9:	f8	clc
	.byte 0xff #bad opcode
1000316ab:	ff cb	decl	%ebx
1000316ad:	f8	clc
	.byte 0xff #bad opcode
1000316af:	ff 65 f9	jmpq	*-7(%rbp)
	.byte 0xff #bad opcode
1000316b3:	ff e2	jmpq	*%rdx
1000316b5:	f9	stc
	.byte 0xff #bad opcode
1000316b7:	ff 55 fe	callq	*-2(%rbp)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000316bc:	7c fa	jl	0x1000316b8
	.byte 0xff #bad opcode
1000316bf:	ff f5	pushq	%rbp
1000316c1:	fa	cli
	.byte 0xff #bad opcode
1000316c3:	ff 55 48	callq	*72(%rbp)
1000316c6:	89 e5	movl	%esp, %ebp
1000316c8:	41 57	pushq	%r15
1000316ca:	41 56	pushq	%r14
1000316cc:	41 55	pushq	%r13
1000316ce:	41 54	pushq	%r12
1000316d0:	53	pushq	%rbx
1000316d1:	48 83 ec 68	subq	$104, %rsp
1000316d5:	48 89 4d d0	movq	%rcx, -48(%rbp)
1000316d9:	41 89 d4	movl	%edx, %r12d
1000316dc:	49 89 f7	movq	%rsi, %r15
1000316df:	49 89 fd	movq	%rdi, %r13
1000316e2:	48 8b bf e8 00 00 00	movq	232(%rdi), %rdi
1000316e9:	e8 50 fe fe ff	callq	0x10002153e
1000316ee:	49 89 c6	movq	%rax, %r14
1000316f1:	48 8d 5d a8	leaq	-88(%rbp), %rbx
1000316f5:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
1000316fc:	48 89 5b 08	movq	%rbx, 8(%rbx)
100031700:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
10003170a:	48 89 43 10	movq	%rax, 16(%rbx)
10003170e:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100031718:	48 89 43 18	movq	%rax, 24(%rbx)
10003171c:	4c 89 f7	movq	%r14, %rdi
10003171f:	4c 89 fe	movq	%r15, %rsi
100031722:	e8 bf 01 00 00	callq	0x1000318e6
100031727:	48 89 43 18	movq	%rax, 24(%rbx)
10003172b:	48 8b 43 08	movq	8(%rbx), %rax
10003172f:	48 8b 40 18	movq	24(%rax), %rax
100031733:	48 85 c0	testq	%rax, %rax
100031736:	75 4f	jne	0x100031787
100031738:	44 89 e1	movl	%r12d, %ecx
10003173b:	83 e1 01	andl	$1, %ecx
10003173e:	75 47	jne	0x100031787
100031740:	48 8b 05 d1 68 02 00	movq	157905(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100031747:	48 8d b5 78 ff ff ff	leaq	-136(%rbp), %rsi
10003174e:	48 89 06	movq	%rax, (%rsi)
100031751:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
100031759:	48 8d 05 31 02 00 00	leaq	561(%rip), %rax
100031760:	48 89 46 10	movq	%rax, 16(%rsi)
100031764:	48 8d 05 55 9a 02 00	leaq	170581(%rip), %rax
10003176b:	48 89 46 18	movq	%rax, 24(%rsi)
10003176f:	48 89 5e 20	movq	%rbx, 32(%rsi)
100031773:	4c 89 7e 28	movq	%r15, 40(%rsi)
100031777:	4c 89 f7	movq	%r14, %rdi
10003177a:	e8 be 01 00 00	callq	0x10003193d
10003177f:	48 8b 45 b0	movq	-80(%rbp), %rax
100031783:	48 8b 40 18	movq	24(%rax), %rax
100031787:	48 85 c0	testq	%rax, %rax
10003178a:	74 68	je	0x1000317f4
10003178c:	48 8b 78 18	movq	24(%rax), %rdi
100031790:	be 02 00 00 00	movl	$2, %esi
100031795:	e8 8e 6b fe ff	callq	0x100018328
10003179a:	48 89 c3	movq	%rax, %rbx
10003179d:	48 8d 15 3f f4 01 00	leaq	128063(%rip), %rdx ## literal pool for: "Event stream %s is already monitored by %s, ignoring"
1000317a4:	45 31 f6	xorl	%r14d, %r14d
1000317a7:	4c 89 ef	movq	%r13, %rdi
1000317aa:	be 03 00 00 00	movl	$3, %esi
1000317af:	4c 89 f9	movq	%r15, %rcx
1000317b2:	49 89 c0	movq	%rax, %r8
1000317b5:	31 c0	xorl	%eax, %eax
1000317b7:	e8 fe 47 fe ff	callq	0x100015fba
1000317bc:	48 89 df	movq	%rbx, %rdi
1000317bf:	e8 6c 02 01 00	callq	0x100041a30 ## symbol stub for: _free
1000317c4:	b9 11 00 00 00	movl	$17, %ecx
1000317c9:	48 8b 45 d0	movq	-48(%rbp), %rax
1000317cd:	48 85 c0	testq	%rax, %rax
1000317d0:	74 02	je	0x1000317d4
1000317d2:	89 08	movl	%ecx, (%rax)
1000317d4:	48 8d 7d a8	leaq	-88(%rbp), %rdi
1000317d8:	be 08 00 00 00	movl	$8, %esi
1000317dd:	e8 4e ff 00 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
1000317e2:	4c 89 f0	movq	%r14, %rax
1000317e5:	48 83 c4 68	addq	$104, %rsp
1000317e9:	5b	popq	%rbx
1000317ea:	41 5c	popq	%r12
1000317ec:	41 5d	popq	%r13
1000317ee:	41 5e	popq	%r14
1000317f0:	41 5f	popq	%r15
1000317f2:	5d	popq	%rbp
1000317f3:	c3	retq
1000317f4:	48 8d 05 95 0e 03 00	leaq	200341(%rip), %rax
1000317fb:	80 38 00	cmpb	$0, (%rax)
1000317fe:	74 10	je	0x100031810
100031800:	4c 89 ef	movq	%r13, %rdi
100031803:	e8 eb 6a fe ff	callq	0x1000182f3
100031808:	84 c0	testb	%al, %al
10003180a:	0f 84 b0 00 00 00	je	0x1000318c0
100031810:	4c 89 75 c8	movq	%r14, -56(%rbp)
100031814:	31 ff	xorl	%edi, %edi
100031816:	e8 68 15 fe ff	callq	0x100012d83
10003181b:	49 89 c6	movq	%rax, %r14
10003181e:	4c 89 ff	movq	%r15, %rdi
100031821:	e8 30 06 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100031826:	48 8d 78 01	leaq	1(%rax), %rdi
10003182a:	e8 a2 15 fe ff	callq	0x100012dd1
10003182f:	48 89 c3	movq	%rax, %rbx
100031832:	49 89 46 20	movq	%rax, 32(%r14)
100031836:	48 8d 78 18	leaq	24(%rax), %rdi
10003183a:	4c 89 fe	movq	%r15, %rsi
10003183d:	e8 f0 05 01 00	callq	0x100041e32 ## symbol stub for: _strcpy
100031842:	4c 89 73 10	movq	%r14, 16(%rbx)
100031846:	49 8d 85 80 00 00 00	leaq	128(%r13), %rax
10003184d:	49 8b 8d 80 00 00 00	movq	128(%r13), %rcx
100031854:	49 89 4e 08	movq	%rcx, 8(%r14)
100031858:	48 85 c9	testq	%rcx, %rcx
10003185b:	74 0b	je	0x100031868
10003185d:	4c 89 f2	movq	%r14, %rdx
100031860:	48 83 c2 08	addq	$8, %rdx
100031864:	48 89 51 10	movq	%rdx, 16(%rcx)
100031868:	4d 89 b5 80 00 00 00	movq	%r14, 128(%r13)
10003186f:	49 89 46 10	movq	%rax, 16(%r14)
100031873:	48 8b 5d c8	movq	-56(%rbp), %rbx
100031877:	48 8b 7b 18	movq	24(%rbx), %rdi
10003187b:	4c 89 fe	movq	%r15, %rsi
10003187e:	4c 89 f2	movq	%r14, %rdx
100031881:	e8 ec 6a 00 00	callq	0x100038372
100031886:	4d 89 6e 18	movq	%r13, 24(%r14)
10003188a:	41 8a 46 30	movb	48(%r14), %al
10003188e:	45 00 e4	addb	%r12b, %r12b
100031891:	24 f9	andb	$-7, %al
100031893:	41 80 e4 06	andb	$6, %r12b
100031897:	41 08 c4	orb	%al, %r12b
10003189a:	45 88 66 30	movb	%r12b, 48(%r14)
10003189e:	4c 89 f7	movq	%r14, %rdi
1000318a1:	48 89 de	movq	%rbx, %rsi
1000318a4:	e8 36 01 00 00	callq	0x1000319df
1000318a9:	48 8b 45 d0	movq	-48(%rbp), %rax
1000318ad:	48 85 c0	testq	%rax, %rax
1000318b0:	b9 00 00 00 00	movl	$0, %ecx
1000318b5:	0f 85 17 ff ff ff	jne	0x1000317d2
1000318bb:	e9 14 ff ff ff	jmp	0x1000317d4
1000318c0:	48 8d 15 51 f3 01 00	leaq	127825(%rip), %rdx ## literal pool for: "Non-system service tried to claim event stream %s"
1000318c7:	45 31 f6	xorl	%r14d, %r14d
1000318ca:	4c 89 ef	movq	%r13, %rdi
1000318cd:	be 03 00 00 00	movl	$3, %esi
1000318d2:	4c 89 f9	movq	%r15, %rcx
1000318d5:	31 c0	xorl	%eax, %eax
1000318d7:	e8 de 46 fe ff	callq	0x100015fba
1000318dc:	b9 96 00 00 00	movl	$150, %ecx
1000318e1:	e9 e3 fe ff ff	jmp	0x1000317c9
1000318e6:	55	pushq	%rbp
1000318e7:	48 89 e5	movq	%rsp, %rbp
1000318ea:	41 57	pushq	%r15
1000318ec:	41 56	pushq	%r14
1000318ee:	41 54	pushq	%r12
1000318f0:	53	pushq	%rbx
1000318f1:	49 89 f4	movq	%rsi, %r12
1000318f4:	49 89 ff	movq	%rdi, %r15
1000318f7:	48 8b 7f 18	movq	24(%rdi), %rdi
1000318fb:	e8 17 6b 00 00	callq	0x100038417
100031900:	48 85 c0	testq	%rax, %rax
100031903:	74 0f	je	0x100031914
100031905:	49 89 c6	movq	%rax, %r14
100031908:	4c 89 f0	movq	%r14, %rax
10003190b:	5b	popq	%rbx
10003190c:	41 5c	popq	%r12
10003190e:	41 5e	popq	%r14
100031910:	41 5f	popq	%r15
100031912:	5d	popq	%rbp
100031913:	c3	retq
100031914:	49 8b 5f 28	movq	40(%r15), %rbx
100031918:	45 31 f6	xorl	%r14d, %r14d
10003191b:	48 85 db	testq	%rbx, %rbx
10003191e:	74 e8	je	0x100031908
100031920:	48 8b 7b 18	movq	24(%rbx), %rdi
100031924:	4c 89 e6	movq	%r12, %rsi
100031927:	e8 eb 6a 00 00	callq	0x100038417
10003192c:	48 85 c0	testq	%rax, %rax
10003192f:	74 06	je	0x100031937
100031931:	f6 40 30 02	testb	$2, 48(%rax)
100031935:	74 ce	je	0x100031905
100031937:	48 8b 5b 28	movq	40(%rbx), %rbx
10003193b:	eb de	jmp	0x10003191b
10003193d:	55	pushq	%rbp
10003193e:	48 89 e5	movq	%rsp, %rbp
100031941:	41 57	pushq	%r15
100031943:	41 56	pushq	%r14
100031945:	53	pushq	%rbx
100031946:	50	pushq	%rax
100031947:	49 89 f7	movq	%rsi, %r15
10003194a:	48 8b 77 20	movq	32(%rdi), %rsi
10003194e:	48 85 f6	testq	%rsi, %rsi
100031951:	74 33	je	0x100031986
100031953:	49 89 fe	movq	%rdi, %r14
100031956:	48 8b 5e 08	movq	8(%rsi), %rbx
10003195a:	4c 89 ff	movq	%r15, %rdi
10003195d:	41 ff 57 10	callq	*16(%r15)
100031961:	48 89 de	movq	%rbx, %rsi
100031964:	48 85 db	testq	%rbx, %rbx
100031967:	75 ed	jne	0x100031956
100031969:	49 8b 7e 20	movq	32(%r14), %rdi
10003196d:	48 85 ff	testq	%rdi, %rdi
100031970:	74 14	je	0x100031986
100031972:	48 8b 5f 08	movq	8(%rdi), %rbx
100031976:	4c 89 fe	movq	%r15, %rsi
100031979:	e8 bf ff ff ff	callq	0x10003193d
10003197e:	48 89 df	movq	%rbx, %rdi
100031981:	48 85 db	testq	%rbx, %rbx
100031984:	75 ec	jne	0x100031972
100031986:	48 83 c4 08	addq	$8, %rsp
10003198a:	5b	popq	%rbx
10003198b:	41 5e	popq	%r14
10003198d:	41 5f	popq	%r15
10003198f:	5d	popq	%rbp
100031990:	c3	retq
100031991:	55	pushq	%rbp
100031992:	48 89 e5	movq	%rsp, %rbp
100031995:	53	pushq	%rbx
100031996:	50	pushq	%rax
100031997:	48 8b 47 20	movq	32(%rdi), %rax
10003199b:	48 8b 40 08	movq	8(%rax), %rax
10003199f:	48 83 78 18 00	cmpq	$0, 24(%rax)
1000319a4:	75 1c	jne	0x1000319c2
1000319a6:	48 89 fb	movq	%rdi, %rbx
1000319a9:	48 8b 7e 18	movq	24(%rsi), %rdi
1000319ad:	48 8b 73 28	movq	40(%rbx), %rsi
1000319b1:	e8 61 6a 00 00	callq	0x100038417
1000319b6:	48 8b 4b 20	movq	32(%rbx), %rcx
1000319ba:	48 8b 49 08	movq	8(%rcx), %rcx
1000319be:	48 89 41 18	movq	%rax, 24(%rcx)
1000319c2:	48 83 c4 08	addq	$8, %rsp
1000319c6:	5b	popq	%rbx
1000319c7:	5d	popq	%rbp
1000319c8:	c3	retq
1000319c9:	90	nop
1000319ca:	90	nop
1000319cb:	90	nop
1000319cc:	55	pushq	%rbp
1000319cd:	48 89 e5	movq	%rsp, %rbp
1000319d0:	48 8b 7f 20	movq	32(%rdi), %rdi
1000319d4:	be 08 00 00 00	movl	$8, %esi
1000319d9:	5d	popq	%rbp
1000319da:	e9 51 fd 00 00	jmp	0x100041730 ## symbol stub for: __Block_object_dispose
1000319df:	55	pushq	%rbp
1000319e0:	48 89 e5	movq	%rsp, %rbp
1000319e3:	41 57	pushq	%r15
1000319e5:	41 56	pushq	%r14
1000319e7:	41 55	pushq	%r13
1000319e9:	41 54	pushq	%r12
1000319eb:	53	pushq	%rbx
1000319ec:	50	pushq	%rax
1000319ed:	48 89 f3	movq	%rsi, %rbx
1000319f0:	49 89 fd	movq	%rdi, %r13
1000319f3:	48 8b 7e 30	movq	48(%rsi), %rdi
1000319f7:	49 8b 75 20	movq	32(%r13), %rsi
1000319fb:	48 83 c6 18	addq	$24, %rsi
1000319ff:	e8 13 6a 00 00	callq	0x100038417
100031a04:	48 85 c0	testq	%rax, %rax
100031a07:	0f 84 d8 00 00 00	je	0x100031ae5
100031a0d:	49 89 c7	movq	%rax, %r15
100031a10:	48 89 5d d0	movq	%rbx, -48(%rbp)
100031a14:	48 8b 58 08	movq	8(%rax), %rbx
100031a18:	48 85 db	testq	%rbx, %rbx
100031a1b:	0f 84 aa 00 00 00	je	0x100031acb
100031a21:	4c 8d 25 68 0c 03 00	leaq	199784(%rip), %r12
100031a28:	4c 8b 73 18	movq	24(%rbx), %r14
100031a2c:	41 f6 45 30 04	testb	$4, 48(%r13)
100031a31:	74 14	je	0x100031a47
100031a33:	41 80 3c 24 00	cmpb	$0, (%r12)
100031a38:	74 0d	je	0x100031a47
100031a3a:	48 8b 7b 28	movq	40(%rbx), %rdi
100031a3e:	e8 b0 68 fe ff	callq	0x1000182f3
100031a43:	84 c0	testb	%al, %al
100031a45:	74 1e	je	0x100031a65
100031a47:	48 89 df	movq	%rbx, %rdi
100031a4a:	31 f6	xorl	%esi, %esi
100031a4c:	e8 6c 02 00 00	callq	0x100031cbd
100031a51:	48 89 df	movq	%rbx, %rdi
100031a54:	4c 89 ee	movq	%r13, %rsi
100031a57:	e8 a8 05 00 00	callq	0x100032004
100031a5c:	84 c0	testb	%al, %al
100031a5e:	75 5f	jne	0x100031abf
100031a60:	e9 bb 00 00 00	jmp	0x100031b20
100031a65:	48 8b 7b 28	movq	40(%rbx), %rdi
100031a69:	49 8b 4d 20	movq	32(%r13), %rcx
100031a6d:	48 83 c1 18	addq	$24, %rcx
100031a71:	be 04 00 00 00	movl	$4, %esi
100031a76:	48 8d 15 d5 f1 01 00	leaq	127445(%rip), %rdx ## literal pool for: "Rejecting untrusted event subscription on stream %s"
100031a7d:	31 c0	xorl	%eax, %eax
100031a7f:	e8 36 45 fe ff	callq	0x100015fba
100031a84:	48 8d 43 08	leaq	8(%rbx), %rax
100031a88:	48 8b 4b 08	movq	8(%rbx), %rcx
100031a8c:	48 85 c9	testq	%rcx, %rcx
100031a8f:	74 08	je	0x100031a99
100031a91:	48 8b 53 10	movq	16(%rbx), %rdx
100031a95:	48 89 51 10	movq	%rdx, 16(%rcx)
100031a99:	48 8b 53 10	movq	16(%rbx), %rdx
100031a9d:	48 89 0a	movq	%rcx, (%rdx)
100031aa0:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100031aa4:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100031aa8:	48 89 df	movq	%rbx, %rdi
100031aab:	be 01 00 00 00	movl	$1, %esi
100031ab0:	e8 08 02 00 00	callq	0x100031cbd
100031ab5:	48 89 df	movq	%rbx, %rdi
100031ab8:	31 f6	xorl	%esi, %esi
100031aba:	e8 92 0e fe ff	callq	0x100012951
100031abf:	4c 89 f3	movq	%r14, %rbx
100031ac2:	4d 85 f6	testq	%r14, %r14
100031ac5:	0f 85 5d ff ff ff	jne	0x100031a28
100031acb:	48 8b 45 d0	movq	-48(%rbp), %rax
100031acf:	48 8b 78 30	movq	48(%rax), %rdi
100031ad3:	49 83 c7 18	addq	$24, %r15
100031ad7:	4c 89 fe	movq	%r15, %rsi
100031ada:	31 d2	xorl	%edx, %edx
100031adc:	e8 91 68 00 00	callq	0x100038372
100031ae1:	b0 01	movb	$1, %al
100031ae3:	eb 2c	jmp	0x100031b11
100031ae5:	41 f6 45 30 02	testb	$2, 48(%r13)
100031aea:	75 23	jne	0x100031b0f
100031aec:	48 8b 5b 20	movq	32(%rbx), %rbx
100031af0:	48 85 db	testq	%rbx, %rbx
100031af3:	74 1a	je	0x100031b0f
100031af5:	4c 89 ef	movq	%r13, %rdi
100031af8:	48 89 de	movq	%rbx, %rsi
100031afb:	e8 df fe ff ff	callq	0x1000319df
100031b00:	84 c0	testb	%al, %al
100031b02:	75 0d	jne	0x100031b11
100031b04:	48 8b 5b 08	movq	8(%rbx), %rbx
100031b08:	48 85 db	testq	%rbx, %rbx
100031b0b:	75 e8	jne	0x100031af5
100031b0d:	eb 02	jmp	0x100031b11
100031b0f:	31 c0	xorl	%eax, %eax
100031b11:	48 83 c4 08	addq	$8, %rsp
100031b15:	5b	popq	%rbx
100031b16:	41 5c	popq	%r12
100031b18:	41 5d	popq	%r13
100031b1a:	41 5e	popq	%r14
100031b1c:	41 5f	popq	%r15
100031b1e:	5d	popq	%rbp
100031b1f:	c3	retq
100031b20:	e8 51 f0 00 00	callq	0x100040b76
100031b25:	55	pushq	%rbp
100031b26:	48 89 e5	movq	%rsp, %rbp
100031b29:	48 8b 47 20	movq	32(%rdi), %rax
100031b2d:	48 8b 40 08	movq	8(%rax), %rax
100031b31:	48 85 c0	testq	%rax, %rax
100031b34:	74 0c	je	0x100031b42
100031b36:	48 39 70 40	cmpq	%rsi, 64(%rax)
100031b3a:	74 08	je	0x100031b44
100031b3c:	48 8b 40 18	movq	24(%rax), %rax
100031b40:	eb ef	jmp	0x100031b31
100031b42:	31 c0	xorl	%eax, %eax
100031b44:	5d	popq	%rbp
100031b45:	c3	retq
100031b46:	55	pushq	%rbp
100031b47:	48 89 e5	movq	%rsp, %rbp
100031b4a:	48 8b 47 20	movq	32(%rdi), %rax
100031b4e:	48 83 c0 18	addq	$24, %rax
100031b52:	5d	popq	%rbp
100031b53:	c3	retq
100031b54:	55	pushq	%rbp
100031b55:	48 89 e5	movq	%rsp, %rbp
100031b58:	8a 47 30	movb	48(%rdi), %al
100031b5b:	24 01	andb	$1, %al
100031b5d:	5d	popq	%rbp
100031b5e:	c3	retq
100031b5f:	55	pushq	%rbp
100031b60:	48 89 e5	movq	%rsp, %rbp
100031b63:	41 57	pushq	%r15
100031b65:	41 56	pushq	%r14
100031b67:	41 54	pushq	%r12
100031b69:	53	pushq	%rbx
100031b6a:	49 89 fe	movq	%rdi, %r14
100031b6d:	48 8b 47 18	movq	24(%rdi), %rax
100031b71:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
100031b78:	e8 c1 f9 fe ff	callq	0x10002153e
100031b7d:	49 8d 4e 08	leaq	8(%r14), %rcx
100031b81:	49 8b 56 08	movq	8(%r14), %rdx
100031b85:	48 85 d2	testq	%rdx, %rdx
100031b88:	74 08	je	0x100031b92
100031b8a:	49 8b 76 10	movq	16(%r14), %rsi
100031b8e:	48 89 72 10	movq	%rsi, 16(%rdx)
100031b92:	49 8b 76 10	movq	16(%r14), %rsi
100031b96:	48 89 16	movq	%rdx, (%rsi)
100031b99:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100031b9d:	f3 0f 7f 01	movdqu	%xmm0, (%rcx)
100031ba1:	48 8b 78 18	movq	24(%rax), %rdi
100031ba5:	49 8b 76 20	movq	32(%r14), %rsi
100031ba9:	48 83 c6 18	addq	$24, %rsi
100031bad:	31 d2	xorl	%edx, %edx
100031baf:	e8 be 67 00 00	callq	0x100038372
100031bb4:	49 8b 46 20	movq	32(%r14), %rax
100031bb8:	48 8b 58 08	movq	8(%rax), %rbx
100031bbc:	48 85 db	testq	%rbx, %rbx
100031bbf:	74 44	je	0x100031c05
100031bc1:	4c 8b 63 18	movq	24(%rbx), %r12
100031bc5:	48 8b 43 28	movq	40(%rbx), %rax
100031bc9:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
100031bd0:	e8 69 f9 fe ff	callq	0x10002153e
100031bd5:	49 8b 76 20	movq	32(%r14), %rsi
100031bd9:	48 83 c6 18	addq	$24, %rsi
100031bdd:	48 89 c7	movq	%rax, %rdi
100031be0:	e8 6e 00 00 00	callq	0x100031c53
100031be5:	49 89 c7	movq	%rax, %r15
100031be8:	48 89 df	movq	%rbx, %rdi
100031beb:	31 f6	xorl	%esi, %esi
100031bed:	e8 cb 00 00 00	callq	0x100031cbd
100031bf2:	48 89 df	movq	%rbx, %rdi
100031bf5:	4c 89 fe	movq	%r15, %rsi
100031bf8:	e8 49 01 00 00	callq	0x100031d46
100031bfd:	4c 89 e3	movq	%r12, %rbx
100031c00:	4d 85 e4	testq	%r12, %r12
100031c03:	75 bc	jne	0x100031bc1
100031c05:	49 8b 7e 28	movq	40(%r14), %rdi
100031c09:	48 85 ff	testq	%rdi, %rdi
100031c0c:	74 32	je	0x100031c40
100031c0e:	48 8d 35 62 93 01 00	leaq	103266(%rip), %rsi ## literal pool for: "error"
100031c15:	ba 7c 00 00 00	movl	$124, %edx
100031c1a:	e8 65 04 01 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100031c1f:	49 8b 7e 28	movq	40(%r14), %rdi
100031c23:	e8 c8 04 01 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100031c28:	a9 df ff ff ff	testl	$4294967263, %eax
100031c2d:	75 1a	jne	0x100031c49
100031c2f:	49 8b 7e 28	movq	40(%r14), %rdi
100031c33:	e8 c4 04 01 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100031c38:	49 c7 46 28 00 00 00 00	movq	$0, 40(%r14)
100031c40:	5b	popq	%rbx
100031c41:	41 5c	popq	%r12
100031c43:	41 5e	popq	%r14
100031c45:	41 5f	popq	%r15
100031c47:	5d	popq	%rbp
100031c48:	c3	retq
100031c49:	48 63 f8	movslq	%eax, %rdi
100031c4c:	e8 51 fb 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100031c51:	eb dc	jmp	0x100031c2f
100031c53:	55	pushq	%rbp
100031c54:	48 89 e5	movq	%rsp, %rbp
100031c57:	41 57	pushq	%r15
100031c59:	41 56	pushq	%r14
100031c5b:	53	pushq	%rbx
100031c5c:	50	pushq	%rax
100031c5d:	49 89 f6	movq	%rsi, %r14
100031c60:	49 89 ff	movq	%rdi, %r15
100031c63:	48 8b 7f 30	movq	48(%rdi), %rdi
100031c67:	e8 ab 67 00 00	callq	0x100038417
100031c6c:	48 85 c0	testq	%rax, %rax
100031c6f:	74 05	je	0x100031c76
100031c71:	48 89 c3	movq	%rax, %rbx
100031c74:	eb 39	jmp	0x100031caf
100031c76:	4c 89 f7	movq	%r14, %rdi
100031c79:	e8 d8 01 01 00	callq	0x100041e56 ## symbol stub for: _strlen
100031c7e:	48 8d 78 01	leaq	1(%rax), %rdi
100031c82:	e8 4a 11 fe ff	callq	0x100012dd1
100031c87:	48 89 c3	movq	%rax, %rbx
100031c8a:	48 8d 78 18	leaq	24(%rax), %rdi
100031c8e:	4c 89 f6	movq	%r14, %rsi
100031c91:	e8 9c 01 01 00	callq	0x100041e32 ## symbol stub for: _strcpy
100031c96:	49 8b 7f 30	movq	48(%r15), %rdi
100031c9a:	4c 89 f6	movq	%r14, %rsi
100031c9d:	48 89 da	movq	%rbx, %rdx
100031ca0:	e8 cd 66 00 00	callq	0x100038372
100031ca5:	48 89 df	movq	%rbx, %rdi
100031ca8:	31 f6	xorl	%esi, %esi
100031caa:	e8 a2 0c fe ff	callq	0x100012951
100031caf:	48 89 d8	movq	%rbx, %rax
100031cb2:	48 83 c4 08	addq	$8, %rsp
100031cb6:	5b	popq	%rbx
100031cb7:	41 5e	popq	%r14
100031cb9:	41 5f	popq	%r15
100031cbb:	5d	popq	%rbp
100031cbc:	c3	retq
100031cbd:	55	pushq	%rbp
100031cbe:	48 89 e5	movq	%rsp, %rbp
100031cc1:	53	pushq	%rbx
100031cc2:	50	pushq	%rax
100031cc3:	48 8b 4f 18	movq	24(%rdi), %rcx
100031cc7:	48 8b 5f 38	movq	56(%rdi), %rbx
100031ccb:	48 8d 47 18	leaq	24(%rdi), %rax
100031ccf:	66 0f ef c0	pxor	%xmm0, %xmm0
100031cd3:	f3 0f 7f 47 38	movdqu	%xmm0, 56(%rdi)
100031cd8:	48 85 c9	testq	%rcx, %rcx
100031cdb:	74 08	je	0x100031ce5
100031cdd:	48 8b 57 20	movq	32(%rdi), %rdx
100031ce1:	48 89 51 20	movq	%rdx, 32(%rcx)
100031ce5:	48 8b 57 20	movq	32(%rdi), %rdx
100031ce9:	48 89 0a	movq	%rcx, (%rdx)
100031cec:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100031cf0:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
100031cf4:	48 8b 43 10	movq	16(%rbx), %rax
100031cf8:	48 85 c0	testq	%rax, %rax
100031cfb:	74 0e	je	0x100031d0b
100031cfd:	48 89 c7	movq	%rax, %rdi
100031d00:	48 83 c4 08	addq	$8, %rsp
100031d04:	5b	popq	%rbx
100031d05:	5d	popq	%rbp
100031d06:	e9 85 04 00 00	jmp	0x100032190
100031d0b:	40 84 f6	testb	%sil, %sil
100031d0e:	74 07	je	0x100031d17
100031d10:	48 83 7b 08 00	cmpq	$0, 8(%rbx)
100031d15:	74 07	je	0x100031d1e
100031d17:	48 83 c4 08	addq	$8, %rsp
100031d1b:	5b	popq	%rbx
100031d1c:	5d	popq	%rbp
100031d1d:	c3	retq
100031d1e:	48 8b 47 28	movq	40(%rdi), %rax
100031d22:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
100031d29:	e8 10 f8 fe ff	callq	0x10002153e
100031d2e:	48 8b 78 30	movq	48(%rax), %rdi
100031d32:	48 83 c3 18	addq	$24, %rbx
100031d36:	48 89 de	movq	%rbx, %rsi
100031d39:	31 d2	xorl	%edx, %edx
100031d3b:	48 83 c4 08	addq	$8, %rsp
100031d3f:	5b	popq	%rbx
100031d40:	5d	popq	%rbp
100031d41:	e9 2c 66 00 00	jmp	0x100038372
100031d46:	55	pushq	%rbp
100031d47:	48 89 e5	movq	%rsp, %rbp
100031d4a:	48 83 7e 10 00	cmpq	$0, 16(%rsi)
100031d4f:	75 06	jne	0x100031d57
100031d51:	5d	popq	%rbp
100031d52:	e9 dc 04 00 00	jmp	0x100032233
100031d57:	e8 2f ee 00 00	callq	0x100040b8b
100031d5c:	90	nop
100031d5d:	55	pushq	%rbp
100031d5e:	48 89 e5	movq	%rsp, %rbp
100031d61:	41 57	pushq	%r15
100031d63:	41 56	pushq	%r14
100031d65:	41 55	pushq	%r13
100031d67:	41 54	pushq	%r12
100031d69:	53	pushq	%rbx
100031d6a:	50	pushq	%rax
100031d6b:	49 89 d6	movq	%rdx, %r14
100031d6e:	48 89 f3	movq	%rsi, %rbx
100031d71:	49 89 ff	movq	%rdi, %r15
100031d74:	48 8d 4f 50	leaq	80(%rdi), %rcx
100031d78:	48 8d 15 cb ee 01 00	leaq	126667(%rip), %rdx ## literal pool for: "%s => {"
100031d7f:	48 89 f7	movq	%rsi, %rdi
100031d82:	4c 89 f6	movq	%r14, %rsi
100031d85:	31 c0	xorl	%eax, %eax
100031d87:	e8 e6 6e 00 00	callq	0x100038c72
100031d8c:	4d 8d 66 01	leaq	1(%r14), %r12
100031d90:	41 f6 47 48 01	testb	$1, 72(%r15)
100031d95:	48 8d 05 d2 59 01 00	leaq	88530(%rip), %rax ## literal pool for: "0"
100031d9c:	48 8d 0d 95 16 01 00	leaq	71317(%rip), %rcx ## literal pool for: "1"
100031da3:	48 0f 44 c8	cmoveq	%rax, %rcx
100031da7:	48 8d 15 1e ef 01 00	leaq	126750(%rip), %rdx ## literal pool for: "keepalive = %s"
100031dae:	48 89 df	movq	%rbx, %rdi
100031db1:	4c 89 e6	movq	%r12, %rsi
100031db4:	31 c0	xorl	%eax, %eax
100031db6:	e8 b7 6e 00 00	callq	0x100038c72
100031dbb:	41 bd 18 05 00 00	movl	$1304, %r13d
100031dc1:	49 8b 4f 28	movq	40(%r15), %rcx
100031dc5:	4c 01 e9	addq	%r13, %rcx
100031dc8:	48 8d 15 0c ef 01 00	leaq	126732(%rip), %rdx ## literal pool for: "service = %s"
100031dcf:	48 89 df	movq	%rbx, %rdi
100031dd2:	4c 89 e6	movq	%r12, %rsi
100031dd5:	31 c0	xorl	%eax, %eax
100031dd7:	e8 96 6e 00 00	callq	0x100038c72
100031ddc:	49 8b 4f 38	movq	56(%r15), %rcx
100031de0:	48 83 c1 18	addq	$24, %rcx
100031de4:	48 8d 15 fd ee 01 00	leaq	126717(%rip), %rdx ## literal pool for: "stream = %s"
100031deb:	48 89 df	movq	%rbx, %rdi
100031dee:	4c 89 e6	movq	%r12, %rsi
100031df1:	31 c0	xorl	%eax, %eax
100031df3:	e8 7a 6e 00 00	callq	0x100038c72
100031df8:	49 8b 47 38	movq	56(%r15), %rax
100031dfc:	48 8b 40 10	movq	16(%rax), %rax
100031e00:	48 85 c0	testq	%rax, %rax
100031e03:	74 1b	je	0x100031e20
100031e05:	4c 03 68 18	addq	24(%rax), %r13
100031e09:	48 8d 15 e4 ee 01 00	leaq	126692(%rip), %rdx ## literal pool for: "monitor = %s"
100031e10:	48 89 df	movq	%rbx, %rdi
100031e13:	4c 89 e6	movq	%r12, %rsi
100031e16:	4c 89 e9	movq	%r13, %rcx
100031e19:	31 c0	xorl	%eax, %eax
100031e1b:	e8 52 6e 00 00	callq	0x100038c72
100031e20:	48 8d 15 da ee 01 00	leaq	126682(%rip), %rdx ## literal pool for: "descriptor = "
100031e27:	48 89 df	movq	%rbx, %rdi
100031e2a:	4c 89 e6	movq	%r12, %rsi
100031e2d:	31 c0	xorl	%eax, %eax
100031e2f:	e8 54 6d 00 00	callq	0x100038b88
100031e34:	49 8b 4f 30	movq	48(%r15), %rcx
100031e38:	48 89 df	movq	%rbx, %rdi
100031e3b:	4c 89 e6	movq	%r12, %rsi
100031e3e:	31 d2	xorl	%edx, %edx
100031e40:	e8 f4 d5 fd ff	callq	0x10000f439
100031e45:	48 8d 15 32 6c 01 00	leaq	93234(%rip), %rdx ## literal pool for: "}"
100031e4c:	48 89 df	movq	%rbx, %rdi
100031e4f:	4c 89 f6	movq	%r14, %rsi
100031e52:	31 c0	xorl	%eax, %eax
100031e54:	48 83 c4 08	addq	$8, %rsp
100031e58:	5b	popq	%rbx
100031e59:	41 5c	popq	%r12
100031e5b:	41 5d	popq	%r13
100031e5d:	41 5e	popq	%r14
100031e5f:	41 5f	popq	%r15
100031e61:	5d	popq	%rbp
100031e62:	e9 0b 6e 00 00	jmp	0x100038c72
100031e67:	55	pushq	%rbp
100031e68:	48 89 e5	movq	%rsp, %rbp
100031e6b:	41 57	pushq	%r15
100031e6d:	41 56	pushq	%r14
100031e6f:	41 55	pushq	%r13
100031e71:	41 54	pushq	%r12
100031e73:	53	pushq	%rbx
100031e74:	48 83 ec 18	subq	$24, %rsp
100031e78:	48 89 4d c8	movq	%rcx, -56(%rbp)
100031e7c:	49 89 d5	movq	%rdx, %r13
100031e7f:	49 89 f7	movq	%rsi, %r15
100031e82:	49 89 fc	movq	%rdi, %r12
100031e85:	48 8b bf e8 00 00 00	movq	232(%rdi), %rdi
100031e8c:	e8 ad f6 fe ff	callq	0x10002153e
100031e91:	48 89 c3	movq	%rax, %rbx
100031e94:	48 89 c7	movq	%rax, %rdi
100031e97:	4c 89 fe	movq	%r15, %rsi
100031e9a:	e8 47 fa ff ff	callq	0x1000318e6
100031e9f:	49 89 c6	movq	%rax, %r14
100031ea2:	48 85 c0	testq	%rax, %rax
100031ea5:	74 23	je	0x100031eca
100031ea7:	41 f6 46 30 04	testb	$4, 48(%r14)
100031eac:	74 1c	je	0x100031eca
100031eae:	48 8d 05 db 07 03 00	leaq	198619(%rip), %rax
100031eb5:	80 38 00	cmpb	$0, (%rax)
100031eb8:	74 10	je	0x100031eca
100031eba:	4c 89 e7	movq	%r12, %rdi
100031ebd:	e8 31 64 fe ff	callq	0x1000182f3
100031ec2:	84 c0	testb	%al, %al
100031ec4:	0f 84 0d 01 00 00	je	0x100031fd7
100031eca:	48 89 5d d0	movq	%rbx, -48(%rbp)
100031ece:	4c 89 ef	movq	%r13, %rdi
100031ed1:	e8 80 ff 00 00	callq	0x100041e56 ## symbol stub for: _strlen
100031ed6:	48 8d 78 01	leaq	1(%rax), %rdi
100031eda:	e8 19 0f fe ff	callq	0x100012df8
100031edf:	48 89 c3	movq	%rax, %rbx
100031ee2:	48 8d 78 50	leaq	80(%rax), %rdi
100031ee6:	4c 89 ee	movq	%r13, %rsi
100031ee9:	e8 44 ff 00 00	callq	0x100041e32 ## symbol stub for: _strcpy
100031eee:	4c 89 63 28	movq	%r12, 40(%rbx)
100031ef2:	4c 8b 6d c8	movq	-56(%rbp), %r13
100031ef6:	4c 89 ef	movq	%r13, %rdi
100031ef9:	e8 04 02 01 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100031efe:	48 89 43 30	movq	%rax, 48(%rbx)
100031f02:	48 8d 35 7d ed 01 00	leaq	126333(%rip), %rsi ## literal pool for: "com.apple.launchd.helper"
100031f09:	4c 89 ff	movq	%r15, %rdi
100031f0c:	e8 1b ff 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031f11:	85 c0	testl	%eax, %eax
100031f13:	0f 94 c0	sete	%al
100031f16:	8a 4b 48	movb	72(%rbx), %cl
100031f19:	00 c0	addb	%al, %al
100031f1b:	80 e1 fd	andb	$-3, %cl
100031f1e:	08 c1	orb	%al, %cl
100031f20:	88 4b 48	movb	%cl, 72(%rbx)
100031f23:	49 8d 44 24 78	leaq	120(%r12), %rax
100031f28:	49 8b 4c 24 78	movq	120(%r12), %rcx
100031f2d:	48 89 4b 08	movq	%rcx, 8(%rbx)
100031f31:	48 85 c9	testq	%rcx, %rcx
100031f34:	74 0b	je	0x100031f41
100031f36:	48 89 da	movq	%rbx, %rdx
100031f39:	48 83 c2 08	addq	$8, %rdx
100031f3d:	48 89 51 10	movq	%rdx, 16(%rcx)
100031f41:	48 89 18	movq	%rbx, (%rax)
100031f44:	48 89 43 10	movq	%rax, 16(%rbx)
100031f48:	4d 85 f6	testq	%r14, %r14
100031f4b:	74 14	je	0x100031f61
100031f4d:	48 89 df	movq	%rbx, %rdi
100031f50:	4c 89 f6	movq	%r14, %rsi
100031f53:	e8 ac 00 00 00	callq	0x100032004
100031f58:	84 c0	testb	%al, %al
100031f5a:	75 1c	jne	0x100031f78
100031f5c:	e8 3f ec 00 00	callq	0x100040ba0
100031f61:	48 8b 7d d0	movq	-48(%rbp), %rdi
100031f65:	4c 89 fe	movq	%r15, %rsi
100031f68:	e8 e6 fc ff ff	callq	0x100031c53
100031f6d:	48 89 df	movq	%rbx, %rdi
100031f70:	48 89 c6	movq	%rax, %rsi
100031f73:	e8 ce fd ff ff	callq	0x100031d46
100031f78:	49 8b bc 24 e8 00 00 00	movq	232(%r12), %rdi
100031f80:	4c 89 e6	movq	%r12, %rsi
100031f83:	4c 89 fa	movq	%r15, %rdx
100031f86:	e8 e6 9b ff ff	callq	0x10002bb71
100031f8b:	49 89 c6	movq	%rax, %r14
100031f8e:	48 8d 35 0a ed 01 00	leaq	126218(%rip), %rsi ## literal pool for: "com.apple.iokit.matching"
100031f95:	4c 89 ff	movq	%r15, %rdi
100031f98:	e8 8f fe 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100031f9d:	41 89 c7	movl	%eax, %r15d
100031fa0:	4c 89 ef	movq	%r13, %rdi
100031fa3:	e8 1e 01 01 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100031fa8:	48 3b 05 51 61 02 00	cmpq	155985(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100031faf:	74 04	je	0x100031fb5
100031fb1:	31 c0	xorl	%eax, %eax
100031fb3:	eb 0f	jmp	0x100031fc4
100031fb5:	48 8d 35 fc ec 01 00	leaq	126204(%rip), %rsi ## literal pool for: "IOMatchLaunchStream"
100031fbc:	4c 89 ef	movq	%r13, %rdi
100031fbf:	e8 72 00 01 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100031fc4:	45 85 ff	testl	%r15d, %r15d
100031fc7:	75 04	jne	0x100031fcd
100031fc9:	84 c0	testb	%al, %al
100031fcb:	74 25	je	0x100031ff2
100031fcd:	4c 89 f7	movq	%r14, %rdi
100031fd0:	e8 94 93 00 00	callq	0x10003b369
100031fd5:	eb 1b	jmp	0x100031ff2
100031fd7:	48 8d 15 74 ec 01 00	leaq	126068(%rip), %rdx ## literal pool for: "Rejecting untrusted event subscription on stream %s"
100031fde:	31 db	xorl	%ebx, %ebx
100031fe0:	4c 89 e7	movq	%r12, %rdi
100031fe3:	be 04 00 00 00	movl	$4, %esi
100031fe8:	4c 89 f9	movq	%r15, %rcx
100031feb:	31 c0	xorl	%eax, %eax
100031fed:	e8 c8 3f fe ff	callq	0x100015fba
100031ff2:	48 89 d8	movq	%rbx, %rax
100031ff5:	48 83 c4 18	addq	$24, %rsp
100031ff9:	5b	popq	%rbx
100031ffa:	41 5c	popq	%r12
100031ffc:	41 5d	popq	%r13
100031ffe:	41 5e	popq	%r14
100032000:	41 5f	popq	%r15
100032002:	5d	popq	%rbp
100032003:	c3	retq
100032004:	55	pushq	%rbp
100032005:	48 89 e5	movq	%rsp, %rbp
100032008:	41 56	pushq	%r14
10003200a:	53	pushq	%rbx
10003200b:	48 89 f3	movq	%rsi, %rbx
10003200e:	49 89 fe	movq	%rdi, %r14
100032011:	f6 46 30 04	testb	$4, 48(%rsi)
100032015:	74 19	je	0x100032030
100032017:	48 8d 05 72 06 03 00	leaq	198258(%rip), %rax
10003201e:	80 38 00	cmpb	$0, (%rax)
100032021:	74 0d	je	0x100032030
100032023:	49 8b 7e 28	movq	40(%r14), %rdi
100032027:	e8 c7 62 fe ff	callq	0x1000182f3
10003202c:	84 c0	testb	%al, %al
10003202e:	74 44	je	0x100032074
100032030:	48 8b 73 20	movq	32(%rbx), %rsi
100032034:	4c 89 f7	movq	%r14, %rdi
100032037:	e8 f7 01 00 00	callq	0x100032233
10003203c:	48 8b 43 18	movq	24(%rbx), %rax
100032040:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
100032047:	e8 f2 f4 fe ff	callq	0x10002153e
10003204c:	48 8b 48 38	movq	56(%rax), %rcx
100032050:	48 89 ca	movq	%rcx, %rdx
100032053:	48 ff c2	incq	%rdx
100032056:	48 89 50 38	movq	%rdx, 56(%rax)
10003205a:	49 89 4e 40	movq	%rcx, 64(%r14)
10003205e:	75 08	jne	0x100032068
100032060:	48 c7 40 38 01 00 00 00	movq	$1, 56(%rax)
100032068:	48 89 df	movq	%rbx, %rdi
10003206b:	e8 20 01 00 00	callq	0x100032190
100032070:	b0 01	movb	$1, %al
100032072:	eb 02	jmp	0x100032076
100032074:	31 c0	xorl	%eax, %eax
100032076:	5b	popq	%rbx
100032077:	41 5e	popq	%r14
100032079:	5d	popq	%rbp
10003207a:	c3	retq
10003207b:	55	pushq	%rbp
10003207c:	48 89 e5	movq	%rsp, %rbp
10003207f:	48 8b 47 28	movq	40(%rdi), %rax
100032083:	5d	popq	%rbp
100032084:	c3	retq
100032085:	55	pushq	%rbp
100032086:	48 89 e5	movq	%rsp, %rbp
100032089:	8a 47 48	movb	72(%rdi), %al
10003208c:	24 01	andb	$1, %al
10003208e:	5d	popq	%rbp
10003208f:	c3	retq
100032090:	55	pushq	%rbp
100032091:	48 89 e5	movq	%rsp, %rbp
100032094:	8a 47 48	movb	72(%rdi), %al
100032097:	24 02	andb	$2, %al
100032099:	d0 e8	shrb	%al
10003209b:	5d	popq	%rbp
10003209c:	c3	retq
10003209d:	55	pushq	%rbp
10003209e:	48 89 e5	movq	%rsp, %rbp
1000320a1:	48 8d 47 08	leaq	8(%rdi), %rax
1000320a5:	48 8b 4f 08	movq	8(%rdi), %rcx
1000320a9:	48 85 c9	testq	%rcx, %rcx
1000320ac:	74 08	je	0x1000320b6
1000320ae:	48 8b 57 10	movq	16(%rdi), %rdx
1000320b2:	48 89 51 10	movq	%rdx, 16(%rcx)
1000320b6:	48 8b 57 10	movq	16(%rdi), %rdx
1000320ba:	48 89 0a	movq	%rcx, (%rdx)
1000320bd:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
1000320c1:	f3 0f 7f 00	movdqu	%xmm0, (%rax)
1000320c5:	be 01 00 00 00	movl	$1, %esi
1000320ca:	5d	popq	%rbp
1000320cb:	e9 ed fb ff ff	jmp	0x100031cbd
1000320d0:	55	pushq	%rbp
1000320d1:	48 89 e5	movq	%rsp, %rbp
1000320d4:	41 56	pushq	%r14
1000320d6:	53	pushq	%rbx
1000320d7:	49 89 fe	movq	%rdi, %r14
1000320da:	31 ff	xorl	%edi, %edi
1000320dc:	e8 c9 0c fe ff	callq	0x100012daa
1000320e1:	48 89 c3	movq	%rax, %rbx
1000320e4:	4d 85 f6	testq	%r14, %r14
1000320e7:	74 27	je	0x100032110
1000320e9:	4c 89 73 28	movq	%r14, 40(%rbx)
1000320ed:	49 8b 46 20	movq	32(%r14), %rax
1000320f1:	49 83 c6 20	addq	$32, %r14
1000320f5:	48 89 43 08	movq	%rax, 8(%rbx)
1000320f9:	48 85 c0	testq	%rax, %rax
1000320fc:	74 0b	je	0x100032109
1000320fe:	48 89 d9	movq	%rbx, %rcx
100032101:	48 83 c1 08	addq	$8, %rcx
100032105:	48 89 48 10	movq	%rcx, 16(%rax)
100032109:	49 89 1e	movq	%rbx, (%r14)
10003210c:	4c 89 73 10	movq	%r14, 16(%rbx)
100032110:	e8 a8 63 00 00	callq	0x1000384bd
100032115:	48 89 43 18	movq	%rax, 24(%rbx)
100032119:	e8 9f 63 00 00	callq	0x1000384bd
10003211e:	48 89 43 30	movq	%rax, 48(%rbx)
100032122:	48 c7 43 38 01 00 00 00	movq	$1, 56(%rbx)
10003212a:	48 89 d8	movq	%rbx, %rax
10003212d:	5b	popq	%rbx
10003212e:	41 5e	popq	%r14
100032130:	5d	popq	%rbp
100032131:	c3	retq
100032132:	55	pushq	%rbp
100032133:	48 89 e5	movq	%rsp, %rbp
100032136:	41 56	pushq	%r14
100032138:	53	pushq	%rbx
100032139:	49 89 f6	movq	%rsi, %r14
10003213c:	48 8b 77 20	movq	32(%rdi), %rsi
100032140:	48 85 f6	testq	%rsi, %rsi
100032143:	74 13	je	0x100032158
100032145:	48 8b 5e 08	movq	8(%rsi), %rbx
100032149:	4c 89 f7	movq	%r14, %rdi
10003214c:	41 ff 56 10	callq	*16(%r14)
100032150:	48 89 de	movq	%rbx, %rsi
100032153:	48 85 db	testq	%rbx, %rbx
100032156:	75 ed	jne	0x100032145
100032158:	5b	popq	%rbx
100032159:	41 5e	popq	%r14
10003215b:	5d	popq	%rbp
10003215c:	c3	retq
10003215d:	55	pushq	%rbp
10003215e:	48 89 e5	movq	%rsp, %rbp
100032161:	80 4f 40 01	orb	$1, 64(%rdi)
100032165:	48 8b 7f 18	movq	24(%rdi), %rdi
100032169:	48 8d 35 a0 90 02 00	leaq	168096(%rip), %rsi
100032170:	5d	popq	%rbp
100032171:	e9 c8 62 00 00	jmp	0x10003843e
100032176:	55	pushq	%rbp
100032177:	48 89 e5	movq	%rsp, %rbp
10003217a:	48 8b 42 20	movq	32(%rdx), %rax
10003217e:	48 83 78 08 00	cmpq	$0, 8(%rax)
100032183:	74 09	je	0x10003218e
100032185:	48 89 d7	movq	%rdx, %rdi
100032188:	5d	popq	%rbp
100032189:	e9 02 00 00 00	jmp	0x100032190
10003218e:	5d	popq	%rbp
10003218f:	c3	retq
100032190:	55	pushq	%rbp
100032191:	48 89 e5	movq	%rsp, %rbp
100032194:	53	pushq	%rbx
100032195:	50	pushq	%rax
100032196:	48 89 fb	movq	%rdi, %rbx
100032199:	80 4f 30 01	orb	$1, 48(%rdi)
10003219d:	48 8b 7f 28	movq	40(%rdi), %rdi
1000321a1:	48 85 ff	testq	%rdi, %rdi
1000321a4:	74 1d	je	0x1000321c3
1000321a6:	e8 45 ff 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
1000321ab:	a9 df ff ff ff	testl	$4294967263, %eax
1000321b0:	75 21	jne	0x1000321d3
1000321b2:	48 8b 7b 28	movq	40(%rbx), %rdi
1000321b6:	e8 41 ff 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000321bb:	48 c7 43 28 00 00 00 00	movq	$0, 40(%rbx)
1000321c3:	48 8b 7b 18	movq	24(%rbx), %rdi
1000321c7:	e8 70 8b fe ff	callq	0x10001ad3c
1000321cc:	48 83 c4 08	addq	$8, %rsp
1000321d0:	5b	popq	%rbx
1000321d1:	5d	popq	%rbp
1000321d2:	c3	retq
1000321d3:	48 63 f8	movslq	%eax, %rdi
1000321d6:	e8 c7 f5 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000321db:	eb d5	jmp	0x1000321b2
1000321dd:	55	pushq	%rbp
1000321de:	48 89 e5	movq	%rsp, %rbp
1000321e1:	41 57	pushq	%r15
1000321e3:	41 56	pushq	%r14
1000321e5:	53	pushq	%rbx
1000321e6:	50	pushq	%rax
1000321e7:	48 8b 5f 78	movq	120(%rdi), %rbx
1000321eb:	48 85 db	testq	%rbx, %rbx
1000321ee:	74 33	je	0x100032223
1000321f0:	49 89 d6	movq	%rdx, %r14
1000321f3:	49 89 f7	movq	%rsi, %r15
1000321f6:	48 8b 7b 38	movq	56(%rbx), %rdi
1000321fa:	48 83 c7 18	addq	$24, %rdi
1000321fe:	4c 89 fe	movq	%r15, %rsi
100032201:	e8 26 fc 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100032206:	85 c0	testl	%eax, %eax
100032208:	75 10	jne	0x10003221a
10003220a:	48 8d 7b 50	leaq	80(%rbx), %rdi
10003220e:	4c 89 f6	movq	%r14, %rsi
100032211:	e8 16 fc 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100032216:	85 c0	testl	%eax, %eax
100032218:	74 0b	je	0x100032225
10003221a:	48 8b 5b 08	movq	8(%rbx), %rbx
10003221e:	48 85 db	testq	%rbx, %rbx
100032221:	75 d3	jne	0x1000321f6
100032223:	31 db	xorl	%ebx, %ebx
100032225:	48 89 d8	movq	%rbx, %rax
100032228:	48 83 c4 08	addq	$8, %rsp
10003222c:	5b	popq	%rbx
10003222d:	41 5e	popq	%r14
10003222f:	41 5f	popq	%r15
100032231:	5d	popq	%rbp
100032232:	c3	retq
100032233:	55	pushq	%rbp
100032234:	48 89 e5	movq	%rsp, %rbp
100032237:	48 83 7f 38 00	cmpq	$0, 56(%rdi)
10003223c:	75 26	jne	0x100032264
10003223e:	48 89 77 38	movq	%rsi, 56(%rdi)
100032242:	48 8b 46 08	movq	8(%rsi), %rax
100032246:	48 83 c6 08	addq	$8, %rsi
10003224a:	48 89 47 18	movq	%rax, 24(%rdi)
10003224e:	48 85 c0	testq	%rax, %rax
100032251:	74 08	je	0x10003225b
100032253:	48 8d 4f 18	leaq	24(%rdi), %rcx
100032257:	48 89 48 20	movq	%rcx, 32(%rax)
10003225b:	48 89 3e	movq	%rdi, (%rsi)
10003225e:	48 89 77 20	movq	%rsi, 32(%rdi)
100032262:	5d	popq	%rbp
100032263:	c3	retq
100032264:	e8 4c e9 00 00	callq	0x100040bb5
100032269:	48 85 ff	testq	%rdi, %rdi
10003226c:	74 06	je	0x100032274
10003226e:	48 89 f8	movq	%rdi, %rax
100032271:	31 d2	xorl	%edx, %edx
100032273:	c3	retq
100032274:	55	pushq	%rbp
100032275:	48 89 e5	movq	%rsp, %rbp
100032278:	e8 4d e9 00 00	callq	0x100040bca
10003227d:	85 ff	testl	%edi, %edi
10003227f:	74 05	je	0x100032286
100032281:	31 c0	xorl	%eax, %eax
100032283:	89 fa	movl	%edi, %edx
100032285:	c3	retq
100032286:	55	pushq	%rbp
100032287:	48 89 e5	movq	%rsp, %rbp
10003228a:	e8 4d e9 00 00	callq	0x100040bdc
10003228f:	55	pushq	%rbp
100032290:	48 89 e5	movq	%rsp, %rbp
100032293:	48 8d 35 0b 00 00 00	leaq	11(%rip), %rsi
10003229a:	bf 08 00 00 00	movl	$8, %edi
10003229f:	5d	popq	%rbp
1000322a0:	e9 b5 76 00 00	jmp	0x10003995a
1000322a5:	55	pushq	%rbp
1000322a6:	48 89 e5	movq	%rsp, %rbp
1000322a9:	41 57	pushq	%r15
1000322ab:	41 56	pushq	%r14
1000322ad:	41 55	pushq	%r13
1000322af:	41 54	pushq	%r12
1000322b1:	53	pushq	%rbx
1000322b2:	48 83 ec 48	subq	$72, %rsp
1000322b6:	49 89 ce	movq	%rcx, %r14
1000322b9:	49 89 d4	movq	%rdx, %r12
1000322bc:	89 f3	movl	%esi, %ebx
1000322be:	e8 61 76 00 00	callq	0x100039924
1000322c3:	81 fb 87 03 00 00	cmpl	$903, %ebx
1000322c9:	0f 84 98 00 00 00	je	0x100032367
1000322cf:	49 89 c7	movq	%rax, %r15
1000322d2:	81 fb 86 03 00 00	cmpl	$902, %ebx
1000322d8:	0f 84 d4 00 00 00	je	0x1000323b2
1000322de:	41 bd 21 00 00 00	movl	$33, %r13d
1000322e4:	81 fb 85 03 00 00	cmpl	$901, %ebx
1000322ea:	0f 85 49 03 00 00	jne	0x100032639
1000322f0:	4c 89 e7	movq	%r12, %rdi
1000322f3:	e8 2c fd 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000322f8:	41 bd 16 00 00 00	movl	$22, %r13d
1000322fe:	84 c0	testb	%al, %al
100032300:	0f 84 33 03 00 00	je	0x100032639
100032306:	be 17 00 00 00	movl	$23, %esi
10003230b:	4c 89 ff	movq	%r15, %rdi
10003230e:	e8 a3 96 fd ff	callq	0x10000b9b6
100032313:	41 bd 90 00 00 00	movl	$144, %r13d
100032319:	84 c0	testb	%al, %al
10003231b:	0f 84 18 03 00 00	je	0x100032639
100032321:	48 8d 35 86 c9 01 00	leaq	117126(%rip), %rsi ## literal pool for: "enable"
100032328:	4c 89 e7	movq	%r12, %rdi
10003232b:	e8 06 fd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100032330:	48 8d 1d c9 03 03 00	leaq	197577(%rip), %rbx
100032337:	48 8b 3b	movq	(%rbx), %rdi
10003233a:	84 c0	testb	%al, %al
10003233c:	0f 84 9f 02 00 00	je	0x1000325e1
100032342:	41 bd 25 00 00 00	movl	$37, %r13d
100032348:	48 85 ff	testq	%rdi, %rdi
10003234b:	0f 85 dd 02 00 00	jne	0x10003262e
100032351:	48 8d 35 f8 8e 02 00	leaq	167672(%rip), %rsi
100032358:	bf 00 10 00 00	movl	$4096, %edi
10003235d:	e8 c4 ee fc ff	callq	0x100001226
100032362:	e9 86 02 00 00	jmp	0x1000325ed
100032367:	4c 89 e7	movq	%r12, %rdi
10003236a:	e8 b5 fc 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10003236f:	41 bd 16 00 00 00	movl	$22, %r13d
100032375:	84 c0	testb	%al, %al
100032377:	0f 84 bc 02 00 00	je	0x100032639
10003237d:	4c 89 e7	movq	%r12, %rdi
100032380:	e8 99 fc 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100032385:	48 89 c3	movq	%rax, %rbx
100032388:	48 8d 05 71 03 03 00	leaq	197489(%rip), %rax
10003238f:	31 d2	xorl	%edx, %edx
100032391:	48 83 38 00	cmpq	$0, (%rax)
100032395:	0f 95 c2	setne	%dl
100032398:	48 8d 35 00 24 01 00	leaq	74752(%rip), %rsi ## literal pool for: "enabled"
10003239f:	48 89 df	movq	%rbx, %rdi
1000323a2:	e8 d1 fc 00 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
1000323a7:	49 89 1e	movq	%rbx, (%r14)
1000323aa:	45 31 ed	xorl	%r13d, %r13d
1000323ad:	e9 87 02 00 00	jmp	0x100032639
1000323b2:	48 c7 45 c8 00 00 00 00	movq	$0, -56(%rbp)
1000323ba:	4c 89 e7	movq	%r12, %rdi
1000323bd:	e8 62 fc 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000323c2:	41 bd 16 00 00 00	movl	$22, %r13d
1000323c8:	84 c0	testb	%al, %al
1000323ca:	0f 84 69 02 00 00	je	0x100032639
1000323d0:	be 17 00 00 00	movl	$23, %esi
1000323d5:	4c 89 ff	movq	%r15, %rdi
1000323d8:	e8 d9 95 fd ff	callq	0x10000b9b6
1000323dd:	41 bd 90 00 00 00	movl	$144, %r13d
1000323e3:	84 c0	testb	%al, %al
1000323e5:	0f 84 4e 02 00 00	je	0x100032639
1000323eb:	48 8d 05 0e 03 03 00	leaq	197390(%rip), %rax
1000323f2:	48 83 38 00	cmpq	$0, (%rax)
1000323f6:	0f 84 f9 01 00 00	je	0x1000325f5
1000323fc:	48 8d 35 66 ea 01 00	leaq	125542(%rip), %rsi ## literal pool for: "shmem"
100032403:	4c 89 e7	movq	%r12, %rdi
100032406:	e8 61 fc 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003240b:	41 bd 16 00 00 00	movl	$22, %r13d
100032411:	48 85 c0	testq	%rax, %rax
100032414:	0f 84 1f 02 00 00	je	0x100032639
10003241a:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10003241e:	48 89 c7	movq	%rax, %rdi
100032421:	48 89 de	movq	%rbx, %rsi
100032424:	e8 df fc 00 00	callq	0x100042108 ## symbol stub for: _xpc_shmem_map
100032429:	49 89 c7	movq	%rax, %r15
10003242c:	48 83 3b 00	cmpq	$0, (%rbx)
100032430:	0f 84 c7 01 00 00	je	0x1000325fd
100032436:	48 8b 05 93 5d 02 00	movq	155027(%rip), %rax ## literal pool symbol address: _vm_page_size
10003243d:	4c 3b 38	cmpq	(%rax), %r15
100032440:	0f 82 b7 01 00 00	jb	0x1000325fd
100032446:	48 b9 8b 7c d6 0d a6 c8 67 dd	movabsq	$-2492803253203993461, %rcx
100032450:	4c 89 f8	movq	%r15, %rax
100032453:	48 f7 e1	mulq	%rcx
100032456:	48 89 d3	movq	%rdx, %rbx
100032459:	48 c1 eb 05	shrq	$5, %rbx
10003245d:	48 8d 05 9c 02 03 00	leaq	197276(%rip), %rax
100032464:	48 8b 38	movq	(%rax), %rdi
100032467:	e8 f8 ee fc ff	callq	0x100001364
10003246c:	39 d8	cmpl	%ebx, %eax
10003246e:	73 11	jae	0x100032481
100032470:	48 8d 05 89 02 03 00	leaq	197257(%rip), %rax
100032477:	48 8b 38	movq	(%rax), %rdi
10003247a:	e8 e5 ee fc ff	callq	0x100001364
10003247f:	89 c3	movl	%eax, %ebx
100032481:	45 31 ed	xorl	%r13d, %r13d
100032484:	31 ff	xorl	%edi, %edi
100032486:	31 f6	xorl	%esi, %esi
100032488:	31 d2	xorl	%edx, %edx
10003248a:	e8 83 fb 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003248f:	48 89 45 c0	movq	%rax, -64(%rbp)
100032493:	31 ff	xorl	%edi, %edi
100032495:	31 f6	xorl	%esi, %esi
100032497:	e8 a4 fa 00 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
10003249c:	48 89 45 d0	movq	%rax, -48(%rbp)
1000324a0:	b8 00 00 00 00	movl	$0, %eax
1000324a5:	85 db	testl	%ebx, %ebx
1000324a7:	0f 84 d9 00 00 00	je	0x100032586
1000324ad:	4c 89 7d b0	movq	%r15, -80(%rbp)
1000324b1:	4c 89 65 a8	movq	%r12, -88(%rbp)
1000324b5:	4c 89 75 a0	movq	%r14, -96(%rbp)
1000324b9:	4c 8b 75 c8	movq	-56(%rbp), %r14
1000324bd:	89 d8	movl	%ebx, %eax
1000324bf:	49 83 c6 1d	addq	$29, %r14
1000324c3:	45 31 e4	xorl	%r12d, %r12d
1000324c6:	48 89 45 98	movq	%rax, -104(%rbp)
1000324ca:	4c 8b 7d c0	movq	-64(%rbp), %r15
1000324ce:	48 8d 05 2b 02 03 00	leaq	197163(%rip), %rax
1000324d5:	48 8b 38	movq	(%rax), %rdi
1000324d8:	44 89 e6	movl	%r12d, %esi
1000324db:	e8 8d ee fc ff	callq	0x10000136d
1000324e0:	49 89 c5	movq	%rax, %r13
1000324e3:	48 8b 18	movq	(%rax), %rbx
1000324e6:	48 83 c3 20	addq	$32, %rbx
1000324ea:	4c 89 ff	movq	%r15, %rdi
1000324ed:	48 89 de	movq	%rbx, %rsi
1000324f0:	e8 77 fb 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000324f5:	48 85 c0	testq	%rax, %rax
1000324f8:	74 0a	je	0x100032504
1000324fa:	48 89 c7	movq	%rax, %rdi
1000324fd:	e8 36 fc 00 00	callq	0x100042138 ## symbol stub for: _xpc_uint64_get_value
100032502:	eb 32	jmp	0x100032536
100032504:	48 8b 7d d0	movq	-48(%rbp), %rdi
100032508:	e8 3f fa 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10003250d:	48 89 45 b8	movq	%rax, -72(%rbp)
100032511:	48 8b 7d d0	movq	-48(%rbp), %rdi
100032515:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
10003251c:	48 89 da	movq	%rbx, %rdx
10003251f:	e8 52 fa 00 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
100032524:	8b 55 b8	movl	-72(%rbp), %edx
100032527:	4c 89 ff	movq	%r15, %rdi
10003252a:	48 89 de	movq	%rbx, %rsi
10003252d:	e8 70 fb 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100032532:	48 8b 45 b8	movq	-72(%rbp), %rax
100032536:	41 89 46 e3	movl	%eax, -29(%r14)
10003253a:	41 0f 10 45 08	movups	8(%r13), %xmm0
10003253f:	41 0f 11 46 e7	movups	%xmm0, -25(%r14)
100032544:	41 8b 45 18	movl	24(%r13), %eax
100032548:	41 89 46 f7	movl	%eax, -9(%r14)
10003254c:	41 8b 45 1c	movl	28(%r13), %eax
100032550:	41 89 46 fb	movl	%eax, -5(%r14)
100032554:	41 8a 45 20	movb	32(%r13), %al
100032558:	41 88 46 ff	movb	%al, -1(%r14)
10003255c:	49 8b 45 21	movq	33(%r13), %rax
100032560:	49 89 06	movq	%rax, (%r14)
100032563:	49 ff c4	incq	%r12
100032566:	49 83 c6 25	addq	$37, %r14
10003256a:	48 8b 45 98	movq	-104(%rbp), %rax
10003256e:	4c 39 e0	cmpq	%r12, %rax
100032571:	0f 85 57 ff ff ff	jne	0x1000324ce
100032577:	4c 8b 75 a0	movq	-96(%rbp), %r14
10003257b:	4c 8b 65 a8	movq	-88(%rbp), %r12
10003257f:	45 31 ed	xorl	%r13d, %r13d
100032582:	4c 8b 7d b0	movq	-80(%rbp), %r15
100032586:	48 8b 7d c0	movq	-64(%rbp), %rdi
10003258a:	48 89 c3	movq	%rax, %rbx
10003258d:	e8 6a fb 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100032592:	48 8d 05 67 01 03 00	leaq	196967(%rip), %rax
100032599:	48 8b 38	movq	(%rax), %rdi
10003259c:	e8 28 ed fc ff	callq	0x1000012c9
1000325a1:	4c 89 e7	movq	%r12, %rdi
1000325a4:	e8 75 fa 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000325a9:	49 89 c4	movq	%rax, %r12
1000325ac:	48 8d 35 bc e8 01 00	leaq	125116(%rip), %rsi ## literal pool for: "count"
1000325b3:	48 89 c7	movq	%rax, %rdi
1000325b6:	48 89 da	movq	%rbx, %rdx
1000325b9:	e8 e4 fa 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
1000325be:	48 8d 35 b0 e8 01 00	leaq	125104(%rip), %rsi ## literal pool for: "labels"
1000325c5:	4c 89 e7	movq	%r12, %rdi
1000325c8:	48 8b 5d d0	movq	-48(%rbp), %rbx
1000325cc:	48 89 da	movq	%rbx, %rdx
1000325cf:	e8 da fa 00 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000325d4:	48 89 df	movq	%rbx, %rdi
1000325d7:	e8 20 fb 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000325dc:	4d 89 26	movq	%r12, (%r14)
1000325df:	eb 2f	jmp	0x100032610
1000325e1:	48 85 ff	testq	%rdi, %rdi
1000325e4:	74 42	je	0x100032628
1000325e6:	e8 7f ec fc ff	callq	0x10000126a
1000325eb:	31 c0	xorl	%eax, %eax
1000325ed:	48 89 03	movq	%rax, (%rbx)
1000325f0:	45 31 ed	xorl	%r13d, %r13d
1000325f3:	eb 39	jmp	0x10003262e
1000325f5:	41 bd 60 00 00 00	movl	$96, %r13d
1000325fb:	eb 3c	jmp	0x100032639
1000325fd:	e8 5e f1 00 00	callq	0x100041760 ## symbol stub for: ___error
100032602:	48 63 38	movslq	(%rax), %rdi
100032605:	41 bd 16 00 00 00	movl	$22, %r13d
10003260b:	48 85 ff	testq	%rdi, %rdi
10003260e:	75 3b	jne	0x10003264b
100032610:	48 8b 7d c8	movq	-56(%rbp), %rdi
100032614:	48 85 ff	testq	%rdi, %rdi
100032617:	74 20	je	0x100032639
100032619:	4d 85 ff	testq	%r15, %r15
10003261c:	74 1b	je	0x100032639
10003261e:	4c 89 fe	movq	%r15, %rsi
100032621:	e8 cc f5 00 00	callq	0x100041bf2 ## symbol stub for: _munmap
100032626:	eb 11	jmp	0x100032639
100032628:	41 bd 25 00 00 00	movl	$37, %r13d
10003262e:	4c 89 e7	movq	%r12, %rdi
100032631:	e8 e8 f9 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100032636:	49 89 06	movq	%rax, (%r14)
100032639:	44 89 e8	movl	%r13d, %eax
10003263c:	48 83 c4 48	addq	$72, %rsp
100032640:	5b	popq	%rbx
100032641:	41 5c	popq	%r12
100032643:	41 5d	popq	%r13
100032645:	41 5e	popq	%r14
100032647:	41 5f	popq	%r15
100032649:	5d	popq	%rbp
10003264a:	c3	retq
10003264b:	e8 52 f1 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100032650:	eb be	jmp	0x100032610
100032652:	55	pushq	%rbp
100032653:	48 89 e5	movq	%rsp, %rbp
100032656:	48 8d 05 a3 00 03 00	leaq	196771(%rip), %rax
10003265d:	48 39 10	cmpq	%rdx, (%rax)
100032660:	75 09	jne	0x10003266b
100032662:	48 89 f7	movq	%rsi, %rdi
100032665:	5d	popq	%rbp
100032666:	e9 6d bc fe ff	jmp	0x10001e2d8
10003266b:	e8 7e e5 00 00	callq	0x100040bee
100032670:	55	pushq	%rbp
100032671:	48 89 e5	movq	%rsp, %rbp
100032674:	41 57	pushq	%r15
100032676:	41 56	pushq	%r14
100032678:	53	pushq	%rbx
100032679:	48 81 ec 08 04 00 00	subq	$1032, %rsp
100032680:	89 fb	movl	%edi, %ebx
100032682:	48 8b 05 9f 59 02 00	movq	154015(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100032689:	48 8b 00	movq	(%rax), %rax
10003268c:	48 89 45 e0	movq	%rax, -32(%rbp)
100032690:	48 8d bd e0 fb ff ff	leaq	-1056(%rbp), %rdi
100032697:	ba 00 04 00 00	movl	$1024, %edx
10003269c:	be aa 00 00 00	movl	$170, %esi
1000326a1:	e8 34 f5 00 00	callq	0x100041bda ## symbol stub for: _memset
1000326a6:	85 db	testl	%ebx, %ebx
1000326a8:	78 2c	js	0x1000326d6
1000326aa:	45 31 f6	xorl	%r14d, %r14d
1000326ad:	4c 8d bd e0 fb ff ff	leaq	-1056(%rbp), %r15
1000326b4:	89 df	movl	%ebx, %edi
1000326b6:	be 32 00 00 00	movl	$50, %esi
1000326bb:	4c 89 fa	movq	%r15, %rdx
1000326be:	31 c0	xorl	%eax, %eax
1000326c0:	e8 47 f3 00 00	callq	0x100041a0c ## symbol stub for: _fcntl
1000326c5:	83 f8 ff	cmpl	$-1, %eax
1000326c8:	75 1c	jne	0x1000326e6
1000326ca:	e8 91 f0 00 00	callq	0x100041760 ## symbol stub for: ___error
1000326cf:	83 38 23	cmpl	$35, (%rax)
1000326d2:	74 e0	je	0x1000326b4
1000326d4:	eb 1f	jmp	0x1000326f5
1000326d6:	e8 85 f0 00 00	callq	0x100041760 ## symbol stub for: ___error
1000326db:	c7 00 09 00 00 00	movl	$9, (%rax)
1000326e1:	45 31 f6	xorl	%r14d, %r14d
1000326e4:	eb 0f	jmp	0x1000326f5
1000326e6:	48 8d bd e0 fb ff ff	leaq	-1056(%rbp), %rdi
1000326ed:	e8 f0 c8 fd ff	callq	0x10000efe2
1000326f2:	49 89 c6	movq	%rax, %r14
1000326f5:	48 8b 05 2c 59 02 00	movq	153900(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000326fc:	48 8b 00	movq	(%rax), %rax
1000326ff:	48 3b 45 e0	cmpq	-32(%rbp), %rax
100032703:	75 11	jne	0x100032716
100032705:	4c 89 f0	movq	%r14, %rax
100032708:	48 81 c4 08 04 00 00	addq	$1032, %rsp
10003270f:	5b	popq	%rbx
100032710:	41 5e	popq	%r14
100032712:	41 5f	popq	%r15
100032714:	5d	popq	%rbp
100032715:	c3	retq
100032716:	e8 57 f0 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003271b:	55	pushq	%rbp
10003271c:	48 89 e5	movq	%rsp, %rbp
10003271f:	41 57	pushq	%r15
100032721:	41 56	pushq	%r14
100032723:	53	pushq	%rbx
100032724:	50	pushq	%rax
100032725:	48 89 f3	movq	%rsi, %rbx
100032728:	41 89 ff	movl	%edi, %r15d
10003272b:	48 8b 7e 60	movq	96(%rsi), %rdi
10003272f:	e8 b1 ad fd ff	callq	0x10000d4e5
100032734:	49 89 c6	movq	%rax, %r14
100032737:	48 8b 53 60	movq	96(%rbx), %rdx
10003273b:	44 89 ff	movl	%r15d, %edi
10003273e:	48 89 c6	movq	%rax, %rsi
100032741:	e8 44 f6 00 00	callq	0x100041d8a ## symbol stub for: _read
100032746:	48 3b 43 60	cmpq	96(%rbx), %rax
10003274a:	75 2e	jne	0x10003277a
10003274c:	4c 89 f7	movq	%r14, %rdi
10003274f:	48 89 c6	movq	%rax, %rsi
100032752:	e8 85 f8 00 00	callq	0x100041fdc ## symbol stub for: _xpc_create_from_plist
100032757:	48 85 c0	testq	%rax, %rax
10003275a:	74 36	je	0x100032792
10003275c:	48 89 c3	movq	%rax, %rbx
10003275f:	48 89 c7	movq	%rax, %rdi
100032762:	e8 5f f9 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100032767:	48 3b 05 92 59 02 00	cmpq	154002(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003276e:	74 24	je	0x100032794
100032770:	48 89 df	movq	%rbx, %rdi
100032773:	e8 84 f9 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100032778:	eb 18	jmp	0x100032792
10003277a:	48 85 c0	testq	%rax, %rax
10003277d:	74 13	je	0x100032792
10003277f:	48 83 f8 ff	cmpq	$-1, %rax
100032783:	75 25	jne	0x1000327aa
100032785:	e8 d6 ef 00 00	callq	0x100041760 ## symbol stub for: ___error
10003278a:	48 63 38	movslq	(%rax), %rdi
10003278d:	48 85 ff	testq	%rdi, %rdi
100032790:	75 1b	jne	0x1000327ad
100032792:	31 db	xorl	%ebx, %ebx
100032794:	4c 89 f7	movq	%r14, %rdi
100032797:	e8 94 f2 00 00	callq	0x100041a30 ## symbol stub for: _free
10003279c:	48 89 d8	movq	%rbx, %rax
10003279f:	48 83 c4 08	addq	$8, %rsp
1000327a3:	5b	popq	%rbx
1000327a4:	41 5e	popq	%r14
1000327a6:	41 5f	popq	%r15
1000327a8:	5d	popq	%rbp
1000327a9:	c3	retq
1000327aa:	48 89 c7	movq	%rax, %rdi
1000327ad:	e8 f0 ef 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000327b2:	eb de	jmp	0x100032792
1000327b4:	55	pushq	%rbp
1000327b5:	48 89 e5	movq	%rsp, %rbp
1000327b8:	85 ff	testl	%edi, %edi
1000327ba:	78 20	js	0x1000327dc
1000327bc:	e8 7d f0 00 00	callq	0x10004183e ## symbol stub for: _close
1000327c1:	85 c0	testl	%eax, %eax
1000327c3:	74 17	je	0x1000327dc
1000327c5:	e8 96 ef 00 00	callq	0x100041760 ## symbol stub for: ___error
1000327ca:	48 63 38	movslq	(%rax), %rdi
1000327cd:	48 85 ff	testq	%rdi, %rdi
1000327d0:	75 0c	jne	0x1000327de
1000327d2:	e8 89 ef 00 00	callq	0x100041760 ## symbol stub for: ___error
1000327d7:	83 38 09	cmpl	$9, (%rax)
1000327da:	74 09	je	0x1000327e5
1000327dc:	5d	popq	%rbp
1000327dd:	c3	retq
1000327de:	e8 bf ef 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000327e3:	eb ed	jmp	0x1000327d2
1000327e5:	e8 19 e4 00 00	callq	0x100040c03
1000327ea:	55	pushq	%rbp
1000327eb:	48 89 e5	movq	%rsp, %rbp
1000327ee:	41 56	pushq	%r14
1000327f0:	53	pushq	%rbx
1000327f1:	48 81 ec 90 00 00 00	subq	$144, %rsp
1000327f8:	31 db	xorl	%ebx, %ebx
1000327fa:	31 f6	xorl	%esi, %esi
1000327fc:	31 c0	xorl	%eax, %eax
1000327fe:	e8 13 f4 00 00	callq	0x100041c16 ## symbol stub for: _open
100032803:	83 f8 ff	cmpl	$-1, %eax
100032806:	74 5e	je	0x100032866
100032808:	41 89 c6	movl	%eax, %r14d
10003280b:	0f 28 05 6e 0a 01 00	movaps	68206(%rip), %xmm0
100032812:	48 8d b5 60 ff ff ff	leaq	-160(%rbp), %rsi
100032819:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
100032820:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
100032824:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
100032828:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
10003282c:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
100032830:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100032834:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100032838:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003283c:	0f 29 06	movaps	%xmm0, (%rsi)
10003283f:	89 c7	movl	%eax, %edi
100032841:	e8 fc f1 00 00	callq	0x100041a42 ## symbol stub for: _fstat$INODE64
100032846:	85 c0	testl	%eax, %eax
100032848:	75 12	jne	0x10003285c
10003284a:	83 bd 70 ff ff ff 00	cmpl	$0, -144(%rbp)
100032851:	75 09	jne	0x10003285c
100032853:	f6 85 64 ff ff ff 12	testb	$18, -156(%rbp)
10003285a:	74 19	je	0x100032875
10003285c:	31 db	xorl	%ebx, %ebx
10003285e:	44 89 f7	movl	%r14d, %edi
100032861:	e8 4e ff ff ff	callq	0x1000327b4
100032866:	48 89 d8	movq	%rbx, %rax
100032869:	48 81 c4 90 00 00 00	addq	$144, %rsp
100032870:	5b	popq	%rbx
100032871:	41 5e	popq	%r14
100032873:	5d	popq	%rbp
100032874:	c3	retq
100032875:	48 8d b5 60 ff ff ff	leaq	-160(%rbp), %rsi
10003287c:	44 89 f7	movl	%r14d, %edi
10003287f:	e8 97 fe ff ff	callq	0x10003271b
100032884:	48 89 c3	movq	%rax, %rbx
100032887:	eb d5	jmp	0x10003285e
100032889:	55	pushq	%rbp
10003288a:	48 89 e5	movq	%rsp, %rbp
10003288d:	41 56	pushq	%r14
10003288f:	53	pushq	%rbx
100032890:	48 83 ec 30	subq	$48, %rsp
100032894:	49 89 d6	movq	%rdx, %r14
100032897:	48 89 f3	movq	%rsi, %rbx
10003289a:	48 85 ff	testq	%rdi, %rdi
10003289d:	75 08	jne	0x1000328a7
10003289f:	e8 b0 ee 00 00	callq	0x100041754 ## symbol stub for: __NSGetMachExecuteHeader
1000328a4:	48 89 c7	movq	%rax, %rdi
1000328a7:	48 c7 45 e8 00 00 00 00	movq	$0, -24(%rbp)
1000328af:	0f 28 05 ca 09 01 00	movaps	68042(%rip), %xmm0
1000328b6:	48 8d 75 c0	leaq	-64(%rbp), %rsi
1000328ba:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
1000328be:	0f 29 06	movaps	%xmm0, (%rsi)
1000328c1:	e8 16 f1 00 00	callq	0x1000419dc ## symbol stub for: _dladdr
1000328c6:	85 c0	testl	%eax, %eax
1000328c8:	74 26	je	0x1000328f0
1000328ca:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000328ce:	48 8d 4d e8	leaq	-24(%rbp), %rcx
1000328d2:	48 89 de	movq	%rbx, %rsi
1000328d5:	4c 89 f2	movq	%r14, %rdx
1000328d8:	e8 d1 f1 00 00	callq	0x100041aae ## symbol stub for: _getsectiondata
1000328dd:	48 85 c0	testq	%rax, %rax
1000328e0:	74 0e	je	0x1000328f0
1000328e2:	48 8b 75 e8	movq	-24(%rbp), %rsi
1000328e6:	48 89 c7	movq	%rax, %rdi
1000328e9:	e8 ee f6 00 00	callq	0x100041fdc ## symbol stub for: _xpc_create_from_plist
1000328ee:	eb 02	jmp	0x1000328f2
1000328f0:	31 c0	xorl	%eax, %eax
1000328f2:	48 83 c4 30	addq	$48, %rsp
1000328f6:	5b	popq	%rbx
1000328f7:	41 5e	popq	%r14
1000328f9:	5d	popq	%rbp
1000328fa:	c3	retq
1000328fb:	55	pushq	%rbp
1000328fc:	48 89 e5	movq	%rsp, %rbp
1000328ff:	e8 02 f1 00 00	callq	0x100041a06 ## symbol stub for: _fclose
100032904:	85 c0	testl	%eax, %eax
100032906:	74 17	je	0x10003291f
100032908:	e8 53 ee 00 00	callq	0x100041760 ## symbol stub for: ___error
10003290d:	48 63 38	movslq	(%rax), %rdi
100032910:	48 85 ff	testq	%rdi, %rdi
100032913:	75 0c	jne	0x100032921
100032915:	e8 46 ee 00 00	callq	0x100041760 ## symbol stub for: ___error
10003291a:	83 38 09	cmpl	$9, (%rax)
10003291d:	74 09	je	0x100032928
10003291f:	5d	popq	%rbp
100032920:	c3	retq
100032921:	e8 7c ee 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100032926:	eb ed	jmp	0x100032915
100032928:	e8 eb e2 00 00	callq	0x100040c18
10003292d:	55	pushq	%rbp
10003292e:	48 89 e5	movq	%rsp, %rbp
100032931:	53	pushq	%rbx
100032932:	48 81 ec 98 00 00 00	subq	$152, %rsp
100032939:	0f 28 05 40 09 01 00	movaps	67904(%rip), %xmm0
100032940:	48 8d b5 60 ff ff ff	leaq	-160(%rbp), %rsi
100032947:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
10003294e:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
100032952:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
100032956:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
10003295a:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
10003295e:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100032962:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100032966:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003296a:	0f 29 06	movaps	%xmm0, (%rsi)
10003296d:	e8 a2 f4 00 00	callq	0x100041e14 ## symbol stub for: _stat$INODE64
100032972:	89 c3	movl	%eax, %ebx
100032974:	85 c0	testl	%eax, %eax
100032976:	74 0f	je	0x100032987
100032978:	e8 e3 ed 00 00	callq	0x100041760 ## symbol stub for: ___error
10003297d:	83 38 02	cmpl	$2, (%rax)
100032980:	74 05	je	0x100032987
100032982:	83 fb ff	cmpl	$-1, %ebx
100032985:	74 0f	je	0x100032996
100032987:	85 db	testl	%ebx, %ebx
100032989:	0f 94 c0	sete	%al
10003298c:	48 81 c4 98 00 00 00	addq	$152, %rsp
100032993:	5b	popq	%rbx
100032994:	5d	popq	%rbp
100032995:	c3	retq
100032996:	e8 92 e2 00 00	callq	0x100040c2d
10003299b:	eb ea	jmp	0x100032987
10003299d:	90	nop
10003299e:	90	nop
10003299f:	90	nop
1000329a0:	48 85 ff	testq	%rdi, %rdi
1000329a3:	74 06	je	0x1000329ab
1000329a5:	48 89 f8	movq	%rdi, %rax
1000329a8:	31 d2	xorl	%edx, %edx
1000329aa:	c3	retq
1000329ab:	55	pushq	%rbp
1000329ac:	48 89 e5	movq	%rsp, %rbp
1000329af:	e8 8f e2 00 00	callq	0x100040c43
1000329b4:	85 ff	testl	%edi, %edi
1000329b6:	74 05	je	0x1000329bd
1000329b8:	31 c0	xorl	%eax, %eax
1000329ba:	89 fa	movl	%edi, %edx
1000329bc:	c3	retq
1000329bd:	55	pushq	%rbp
1000329be:	48 89 e5	movq	%rsp, %rbp
1000329c1:	e8 8f e2 00 00	callq	0x100040c55
1000329c6:	55	pushq	%rbp
1000329c7:	48 89 e5	movq	%rsp, %rbp
1000329ca:	41 57	pushq	%r15
1000329cc:	41 56	pushq	%r14
1000329ce:	53	pushq	%rbx
1000329cf:	50	pushq	%rax
1000329d0:	4c 8b bf 50 01 00 00	movq	336(%rdi), %r15
1000329d7:	4d 85 ff	testq	%r15, %r15
1000329da:	74 62	je	0x100032a3e
1000329dc:	49 83 7f 40 00	cmpq	$0, 64(%r15)
1000329e1:	75 66	jne	0x100032a49
1000329e3:	49 89 fe	movq	%rdi, %r14
1000329e6:	49 8b 7f 38	movq	56(%r15), %rdi
1000329ea:	48 85 ff	testq	%rdi, %rdi
1000329ed:	74 11	je	0x100032a00
1000329ef:	48 8b 5f 18	movq	24(%rdi), %rbx
1000329f3:	e8 56 00 00 00	callq	0x100032a4e
1000329f8:	48 89 df	movq	%rbx, %rdi
1000329fb:	48 85 db	testq	%rbx, %rbx
1000329fe:	75 ef	jne	0x1000329ef
100032a00:	49 8b 7f 30	movq	48(%r15), %rdi
100032a04:	e8 27 f0 00 00	callq	0x100041a30 ## symbol stub for: _free
100032a09:	49 8b 47 20	movq	32(%r15), %rax
100032a0d:	48 85 c0	testq	%rax, %rax
100032a10:	74 08	je	0x100032a1a
100032a12:	49 8b 4f 28	movq	40(%r15), %rcx
100032a16:	48 89 48 28	movq	%rcx, 40(%rax)
100032a1a:	49 8b 4f 28	movq	40(%r15), %rcx
100032a1e:	48 89 01	movq	%rax, (%rcx)
100032a21:	49 c7 86 50 01 00 00 00 00 00 00	movq	$0, 336(%r14)
100032a2c:	4c 89 ff	movq	%r15, %rdi
100032a2f:	48 83 c4 08	addq	$8, %rsp
100032a33:	5b	popq	%rbx
100032a34:	41 5e	popq	%r14
100032a36:	41 5f	popq	%r15
100032a38:	5d	popq	%rbp
100032a39:	e9 f2 ef 00 00	jmp	0x100041a30 ## symbol stub for: _free
100032a3e:	48 83 c4 08	addq	$8, %rsp
100032a42:	5b	popq	%rbx
100032a43:	41 5e	popq	%r14
100032a45:	41 5f	popq	%r15
100032a47:	5d	popq	%rbp
100032a48:	c3	retq
100032a49:	e8 19 e2 00 00	callq	0x100040c67
100032a4e:	55	pushq	%rbp
100032a4f:	48 89 e5	movq	%rsp, %rbp
100032a52:	53	pushq	%rbx
100032a53:	50	pushq	%rax
100032a54:	48 89 fb	movq	%rdi, %rbx
100032a57:	48 8b 7f 10	movq	16(%rdi), %rdi
100032a5b:	48 85 ff	testq	%rdi, %rdi
100032a5e:	74 0d	je	0x100032a6d
100032a60:	e8 97 f6 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100032a65:	48 c7 43 10 00 00 00 00	movq	$0, 16(%rbx)
100032a6d:	48 8b 7b 08	movq	8(%rbx), %rdi
100032a71:	e8 06 ef 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100032a76:	48 8b 43 18	movq	24(%rbx), %rax
100032a7a:	48 85 c0	testq	%rax, %rax
100032a7d:	74 08	je	0x100032a87
100032a7f:	48 8b 4b 20	movq	32(%rbx), %rcx
100032a83:	48 89 48 20	movq	%rcx, 32(%rax)
100032a87:	48 8b 4b 20	movq	32(%rbx), %rcx
100032a8b:	48 89 01	movq	%rax, (%rcx)
100032a8e:	48 89 df	movq	%rbx, %rdi
100032a91:	48 83 c4 08	addq	$8, %rsp
100032a95:	5b	popq	%rbx
100032a96:	5d	popq	%rbp
100032a97:	e9 94 ef 00 00	jmp	0x100041a30 ## symbol stub for: _free
100032a9c:	55	pushq	%rbp
100032a9d:	48 89 e5	movq	%rsp, %rbp
100032aa0:	48 8d 35 0b 00 00 00	leaq	11(%rip), %rsi
100032aa7:	bf 0a 00 00 00	movl	$10, %edi
100032aac:	5d	popq	%rbp
100032aad:	e9 a8 6e 00 00	jmp	0x10003995a
100032ab2:	55	pushq	%rbp
100032ab3:	48 89 e5	movq	%rsp, %rbp
100032ab6:	41 57	pushq	%r15
100032ab8:	41 56	pushq	%r14
100032aba:	41 55	pushq	%r13
100032abc:	41 54	pushq	%r12
100032abe:	53	pushq	%rbx
100032abf:	48 83 ec 68	subq	$104, %rsp
100032ac3:	49 89 ce	movq	%rcx, %r14
100032ac6:	49 89 d7	movq	%rdx, %r15
100032ac9:	89 f3	movl	%esi, %ebx
100032acb:	48 8b 05 56 55 02 00	movq	152918(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100032ad2:	48 8b 00	movq	(%rax), %rax
100032ad5:	48 89 45 d0	movq	%rax, -48(%rbp)
100032ad9:	e8 46 6e 00 00	callq	0x100039924
100032ade:	49 89 c5	movq	%rax, %r13
100032ae1:	be 1b 00 00 00	movl	$27, %esi
100032ae6:	48 89 c7	movq	%rax, %rdi
100032ae9:	e8 c8 8e fd ff	callq	0x10000b9b6
100032aee:	41 bc 90 00 00 00	movl	$144, %r12d
100032af4:	84 c0	testb	%al, %al
100032af6:	0f 84 86 0a 00 00	je	0x100033582
100032afc:	81 c3 18 fc ff ff	addl	$4294966296, %ebx
100032b02:	83 fb 0d	cmpl	$13, %ebx
100032b05:	0f 87 cd 00 00 00	ja	0x100032bd8
100032b0b:	48 8d 05 36 0b 00 00	leaq	2870(%rip), %rax
100032b12:	48 63 0c 98	movslq	(%rax,%rbx,4), %rcx
100032b16:	48 01 c1	addq	%rax, %rcx
100032b19:	ff e1	jmpq	*%rcx
100032b1b:	4c 89 ff	movq	%r15, %rdi
100032b1e:	e8 01 f5 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032b23:	41 bc 16 00 00 00	movl	$22, %r12d
100032b29:	84 c0	testb	%al, %al
100032b2b:	0f 84 51 0a 00 00	je	0x100033582
100032b31:	48 8d 35 de 22 01 00	leaq	74462(%rip), %rsi ## literal pool for: "plist"
100032b38:	4c 89 ff	movq	%r15, %rdi
100032b3b:	e8 2c f5 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100032b40:	48 85 c0	testq	%rax, %rax
100032b43:	0f 84 39 0a 00 00	je	0x100033582
100032b49:	48 89 c3	movq	%rax, %rbx
100032b4c:	48 89 c7	movq	%rax, %rdi
100032b4f:	e8 72 f5 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100032b54:	48 3b 05 a5 55 02 00	cmpq	152997(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100032b5b:	0f 85 21 0a 00 00	jne	0x100033582
100032b61:	48 8d 35 6c 0e 01 00	leaq	69228(%rip), %rsi ## literal pool for: "Label"
100032b68:	48 89 df	movq	%rbx, %rdi
100032b6b:	e8 ea f4 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100032b70:	49 89 c6	movq	%rax, %r14
100032b73:	4c 8d 65 90	leaq	-112(%rbp), %r12
100032b77:	41 c7 04 24 00 00 00 00	movl	$0, (%r12)
100032b7f:	4c 89 ff	movq	%r15, %rdi
100032b82:	31 f6	xorl	%esi, %esi
100032b84:	4c 89 e2	movq	%r12, %rdx
100032b87:	e8 92 84 ff ff	callq	0x10002b01e
100032b8c:	45 8b 24 24	movl	(%r12), %r12d
100032b90:	45 85 e4	testl	%r12d, %r12d
100032b93:	0f 85 e9 09 00 00	jne	0x100033582
100032b99:	4c 8d 65 90	leaq	-112(%rbp), %r12
100032b9d:	48 89 df	movq	%rbx, %rdi
100032ba0:	48 89 45 88	movq	%rax, -120(%rbp)
100032ba4:	48 89 c6	movq	%rax, %rsi
100032ba7:	31 d2	xorl	%edx, %edx
100032ba9:	4c 89 e9	movq	%r13, %rcx
100032bac:	4d 89 e0	movq	%r12, %r8
100032baf:	e8 59 0d 00 00	callq	0x10003390d
100032bb4:	49 89 c5	movq	%rax, %r13
100032bb7:	41 8b 1c 24	movl	(%r12), %ebx
100032bbb:	85 db	testl	%ebx, %ebx
100032bbd:	0f 84 d9 08 00 00	je	0x10003349c
100032bc3:	4d 85 ed	testq	%r13, %r13
100032bc6:	4d 89 f7	movq	%r14, %r15
100032bc9:	4c 8b 75 88	movq	-120(%rbp), %r14
100032bcd:	0f 84 74 09 00 00	je	0x100033547
100032bd3:	e8 b9 e0 00 00	callq	0x100040c91
100032bd8:	41 bc 21 00 00 00	movl	$33, %r12d
100032bde:	e9 9f 09 00 00	jmp	0x100033582
100032be3:	48 8d 75 90	leaq	-112(%rbp), %rsi
100032be7:	c7 06 00 00 00 00	movl	$0, (%rsi)
100032bed:	4c 89 ff	movq	%r15, %rdi
100032bf0:	e8 45 12 00 00	callq	0x100033e3a
100032bf5:	48 85 c0	testq	%rax, %rax
100032bf8:	0f 84 80 09 00 00	je	0x10003357e
100032bfe:	48 89 c3	movq	%rax, %rbx
100032c01:	4c 8d 65 90	leaq	-112(%rbp), %r12
100032c05:	48 89 c7	movq	%rax, %rdi
100032c08:	4c 89 e6	movq	%r12, %rsi
100032c0b:	e8 b2 0e 00 00	callq	0x100033ac2
100032c10:	49 89 c5	movq	%rax, %r13
100032c13:	45 8b 24 24	movl	(%r12), %r12d
100032c17:	45 85 e4	testl	%r12d, %r12d
100032c1a:	0f 84 3a 07 00 00	je	0x10003335a
100032c20:	4d 85 ed	testq	%r13, %r13
100032c23:	0f 85 06 0a 00 00	jne	0x10003362f
100032c29:	48 8b 1b	movq	(%rbx), %rbx
100032c2c:	44 89 e7	movl	%r12d, %edi
100032c2f:	e8 da f4 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100032c34:	48 8d 15 e4 e2 01 00	leaq	123620(%rip), %rdx ## literal pool for: "Could not monitor job: error = %d: %s"
100032c3b:	48 89 df	movq	%rbx, %rdi
100032c3e:	be 03 00 00 00	movl	$3, %esi
100032c43:	44 89 e1	movl	%r12d, %ecx
100032c46:	e9 32 05 00 00	jmp	0x10003317d
100032c4b:	4c 89 ff	movq	%r15, %rdi
100032c4e:	e8 d1 f3 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032c53:	41 bc 16 00 00 00	movl	$22, %r12d
100032c59:	84 c0	testb	%al, %al
100032c5b:	0f 84 21 09 00 00	je	0x100033582
100032c61:	48 8d 75 90	leaq	-112(%rbp), %rsi
100032c65:	c7 06 00 00 00 00	movl	$0, (%rsi)
100032c6b:	4c 89 ff	movq	%r15, %rdi
100032c6e:	e8 c7 11 00 00	callq	0x100033e3a
100032c73:	48 85 c0	testq	%rax, %rax
100032c76:	0f 84 02 09 00 00	je	0x10003357e
100032c7c:	49 89 c4	movq	%rax, %r12
100032c7f:	48 8d 35 19 e3 01 00	leaq	123673(%rip), %rsi ## literal pool for: "client-port"
100032c86:	4c 89 ff	movq	%r15, %rdi
100032c89:	e8 7e f3 00 00	callq	0x10004200c ## symbol stub for: _xpc_dictionary_copy_mach_send
100032c8e:	85 c0	testl	%eax, %eax
100032c90:	0f 84 8c 07 00 00	je	0x100033422
100032c96:	49 8b 5c 24 38	movq	56(%r12), %rbx
100032c9b:	48 85 db	testq	%rbx, %rbx
100032c9e:	0f 84 3f 07 00 00	je	0x1000333e3
100032ca4:	39 03	cmpl	%eax, (%rbx)
100032ca6:	0f 84 39 07 00 00	je	0x1000333e5
100032cac:	48 8b 5b 18	movq	24(%rbx), %rbx
100032cb0:	eb e9	jmp	0x100032c9b
100032cb2:	4c 89 ff	movq	%r15, %rdi
100032cb5:	e8 6a f3 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032cba:	41 bc 16 00 00 00	movl	$22, %r12d
100032cc0:	84 c0	testb	%al, %al
100032cc2:	0f 84 ba 08 00 00	je	0x100033582
100032cc8:	48 8d 75 84	leaq	-124(%rbp), %rsi
100032ccc:	c7 06 00 00 00 00	movl	$0, (%rsi)
100032cd2:	4c 89 ff	movq	%r15, %rdi
100032cd5:	e8 60 11 00 00	callq	0x100033e3a
100032cda:	48 85 c0	testq	%rax, %rax
100032cdd:	0f 84 d0 06 00 00	je	0x1000333b3
100032ce3:	4c 8b 20	movq	(%rax), %r12
100032ce6:	48 8b 70 30	movq	48(%rax), %rsi
100032cea:	48 85 f6	testq	%rsi, %rsi
100032ced:	0f 84 92 06 00 00	je	0x100033385
100032cf3:	4c 89 ef	movq	%r13, %rdi
100032cf6:	e8 95 10 00 00	callq	0x100033d90
100032cfb:	84 c0	testb	%al, %al
100032cfd:	0f 84 82 06 00 00	je	0x100033385
100032d03:	0f 28 05 76 05 01 00	movaps	66934(%rip), %xmm0
100032d0a:	48 8d 75 90	leaq	-112(%rbp), %rsi
100032d0e:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100032d12:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100032d16:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100032d1a:	0f 29 06	movaps	%xmm0, (%rsi)
100032d1d:	4c 89 ef	movq	%r13, %rdi
100032d20:	e8 38 1b 00 00	callq	0x10003485d
100032d25:	48 8d 15 b9 e2 01 00	leaq	123577(%rip), %rdx ## literal pool for: "removing job: caller = %s"
100032d2c:	4c 89 e7	movq	%r12, %rdi
100032d2f:	be 05 00 00 00	movl	$5, %esi
100032d34:	48 89 c1	movq	%rax, %rcx
100032d37:	31 c0	xorl	%eax, %eax
100032d39:	e8 7c 32 fe ff	callq	0x100015fba
100032d3e:	49 8b bc 24 e8 00 00 00	movq	232(%r12), %rdi
100032d46:	4c 89 e6	movq	%r12, %rsi
100032d49:	e8 f4 eb fe ff	callq	0x100021942
100032d4e:	89 45 84	movl	%eax, -124(%rbp)
100032d51:	83 f8 24	cmpl	$36, %eax
100032d54:	0f 84 59 06 00 00	je	0x1000333b3
100032d5a:	89 c3	movl	%eax, %ebx
100032d5c:	85 c0	testl	%eax, %eax
100032d5e:	0f 85 2d 06 00 00	jne	0x100033391
100032d64:	4c 89 ff	movq	%r15, %rdi
100032d67:	e8 b2 f2 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100032d6c:	49 89 06	movq	%rax, (%r14)
100032d6f:	e9 3f 06 00 00	jmp	0x1000333b3
100032d74:	4c 89 ff	movq	%r15, %rdi
100032d77:	e8 a8 f2 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032d7c:	41 bc 16 00 00 00	movl	$22, %r12d
100032d82:	84 c0	testb	%al, %al
100032d84:	0f 84 f8 07 00 00	je	0x100033582
100032d8a:	48 8d 35 55 9d 01 00	leaq	105813(%rip), %rsi ## literal pool for: "manager"
100032d91:	4c 89 ff	movq	%r15, %rdi
100032d94:	e8 c1 f2 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100032d99:	48 85 c0	testq	%rax, %rax
100032d9c:	0f 84 e0 07 00 00	je	0x100033582
100032da2:	48 89 c3	movq	%rax, %rbx
100032da5:	45 31 e4	xorl	%r12d, %r12d
100032da8:	31 ff	xorl	%edi, %edi
100032daa:	31 f6	xorl	%esi, %esi
100032dac:	e8 8f f1 00 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100032db1:	48 89 45 88	movq	%rax, -120(%rbp)
100032db5:	4c 8b 2d d4 08 03 00	movq	198868(%rip), %r13
100032dbc:	4d 85 ed	testq	%r13, %r13
100032dbf:	0f 84 64 05 00 00	je	0x100033329
100032dc5:	49 8b 7d 30	movq	48(%r13), %rdi
100032dc9:	48 85 ff	testq	%rdi, %rdi
100032dcc:	74 20	je	0x100032dee
100032dce:	48 89 de	movq	%rbx, %rsi
100032dd1:	e8 56 f0 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100032dd6:	85 c0	testl	%eax, %eax
100032dd8:	75 14	jne	0x100032dee
100032dda:	49 8d 55 10	leaq	16(%r13), %rdx
100032dde:	48 8b 7d 88	movq	-120(%rbp), %rdi
100032de2:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100032de9:	e8 94 f1 00 00	callq	0x100041f82 ## symbol stub for: _xpc_array_set_uuid
100032dee:	4d 8b 6d 20	movq	32(%r13), %r13
100032df2:	eb c8	jmp	0x100032dbc
100032df4:	4c 89 ff	movq	%r15, %rdi
100032df7:	e8 28 f2 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032dfc:	41 bc 16 00 00 00	movl	$22, %r12d
100032e02:	84 c0	testb	%al, %al
100032e04:	0f 84 78 07 00 00	je	0x100033582
100032e0a:	48 8d 35 69 70 01 00	leaq	94313(%rip), %rsi ## literal pool for: "label"
100032e11:	4c 89 ff	movq	%r15, %rdi
100032e14:	e8 41 f2 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100032e19:	48 85 c0	testq	%rax, %rax
100032e1c:	0f 84 60 07 00 00	je	0x100033582
100032e22:	49 89 c5	movq	%rax, %r13
100032e25:	48 8d 5d 90	leaq	-112(%rbp), %rbx
100032e29:	c7 03 00 00 00 00	movl	$0, (%rbx)
100032e2f:	4c 89 ff	movq	%r15, %rdi
100032e32:	31 f6	xorl	%esi, %esi
100032e34:	48 89 da	movq	%rbx, %rdx
100032e37:	e8 e2 81 ff ff	callq	0x10002b01e
100032e3c:	44 8b 23	movl	(%rbx), %r12d
100032e3f:	45 85 e4	testl	%r12d, %r12d
100032e42:	0f 85 3a 07 00 00	jne	0x100033582
100032e48:	48 89 c3	movq	%rax, %rbx
100032e4b:	48 89 c7	movq	%rax, %rdi
100032e4e:	4c 89 ee	movq	%r13, %rsi
100032e51:	e8 cb 13 ff ff	callq	0x100024221
100032e56:	48 85 c0	testq	%rax, %rax
100032e59:	0f 85 eb 01 00 00	jne	0x10003304a
100032e5f:	48 89 df	movq	%rbx, %rdi
100032e62:	e8 c0 85 ff ff	callq	0x10002b427
100032e67:	48 85 c0	testq	%rax, %rax
100032e6a:	74 1a	je	0x100032e86
100032e6c:	49 89 c4	movq	%rax, %r12
100032e6f:	48 89 c7	movq	%rax, %rdi
100032e72:	4c 89 ee	movq	%r13, %rsi
100032e75:	e8 a7 13 ff ff	callq	0x100024221
100032e7a:	4c 89 e3	movq	%r12, %rbx
100032e7d:	48 85 c0	testq	%rax, %rax
100032e80:	0f 85 c4 01 00 00	jne	0x10003304a
100032e86:	48 8d 15 9f e1 01 00	leaq	123295(%rip), %rdx ## literal pool for: "Could not find job with label %s"
100032e8d:	48 89 df	movq	%rbx, %rdi
100032e90:	be 03 00 00 00	movl	$3, %esi
100032e95:	4c 89 e9	movq	%r13, %rcx
100032e98:	31 c0	xorl	%eax, %eax
100032e9a:	e8 8a d5 fe ff	callq	0x100020429
100032e9f:	e9 34 05 00 00	jmp	0x1000333d8
100032ea4:	4c 89 ff	movq	%r15, %rdi
100032ea7:	e8 78 f1 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032eac:	41 bc 16 00 00 00	movl	$22, %r12d
100032eb2:	84 c0	testb	%al, %al
100032eb4:	0f 84 c8 06 00 00	je	0x100033582
100032eba:	48 8d 75 90	leaq	-112(%rbp), %rsi
100032ebe:	c7 06 00 00 00 00	movl	$0, (%rsi)
100032ec4:	4c 89 ff	movq	%r15, %rdi
100032ec7:	e8 6e 0f 00 00	callq	0x100033e3a
100032ecc:	48 85 c0	testq	%rax, %rax
100032ecf:	0f 84 a9 06 00 00	je	0x10003357e
100032ed5:	48 89 c3	movq	%rax, %rbx
100032ed8:	83 78 08 01	cmpl	$1, 8(%rax)
100032edc:	0f 85 da 04 00 00	jne	0x1000333bc
100032ee2:	4c 89 ff	movq	%r15, %rdi
100032ee5:	e8 34 f1 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100032eea:	49 89 c6	movq	%rax, %r14
100032eed:	48 89 df	movq	%rbx, %rdi
100032ef0:	48 89 c6	movq	%rax, %rsi
100032ef3:	e8 b7 0f 00 00	callq	0x100033eaf
100032ef8:	4c 89 f7	movq	%r14, %rdi
100032efb:	e8 f0 f1 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100032f00:	89 45 90	movl	%eax, -112(%rbp)
100032f03:	a9 df ff ff ff	testl	$4294967263, %eax
100032f08:	0f 85 de 06 00 00	jne	0x1000335ec
100032f0e:	4c 89 f7	movq	%r14, %rdi
100032f11:	e8 e6 f1 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100032f16:	e9 06 04 00 00	jmp	0x100033321
100032f1b:	4c 89 ff	movq	%r15, %rdi
100032f1e:	e8 01 f1 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100032f23:	41 bc 16 00 00 00	movl	$22, %r12d
100032f29:	84 c0	testb	%al, %al
100032f2b:	0f 84 51 06 00 00	je	0x100033582
100032f31:	48 8d 35 90 cd 01 00	leaq	118160(%rip), %rsi ## literal pool for: "overlay"
100032f38:	4c 89 ff	movq	%r15, %rdi
100032f3b:	e8 2c f1 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100032f40:	49 89 c6	movq	%rax, %r14
100032f43:	48 85 c0	testq	%rax, %rax
100032f46:	74 15	je	0x100032f5d
100032f48:	4c 89 f7	movq	%r14, %rdi
100032f4b:	e8 76 f1 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100032f50:	48 3b 05 a9 51 02 00	cmpq	151977(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100032f57:	0f 85 25 06 00 00	jne	0x100033582
100032f5d:	48 8d 35 11 6f 01 00	leaq	93969(%rip), %rsi ## literal pool for: "path"
100032f64:	4c 89 ff	movq	%r15, %rdi
100032f67:	e8 ee f0 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100032f6c:	48 85 c0	testq	%rax, %rax
100032f6f:	0f 84 0d 06 00 00	je	0x100033582
100032f75:	48 89 45 88	movq	%rax, -120(%rbp)
100032f79:	48 8d 5d 84	leaq	-124(%rbp), %rbx
100032f7d:	c7 03 00 00 00 00	movl	$0, (%rbx)
100032f83:	4c 89 ff	movq	%r15, %rdi
100032f86:	31 f6	xorl	%esi, %esi
100032f88:	48 89 da	movq	%rbx, %rdx
100032f8b:	e8 8e 80 ff ff	callq	0x10002b01e
100032f90:	44 8b 23	movl	(%rbx), %r12d
100032f93:	45 85 e4	testl	%r12d, %r12d
100032f96:	0f 85 e6 05 00 00	jne	0x100033582
100032f9c:	48 8b 7d 88	movq	-120(%rbp), %rdi
100032fa0:	48 89 c3	movq	%rax, %rbx
100032fa3:	e8 3a c0 fd ff	callq	0x10000efe2
100032fa8:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
100032faf:	4c 89 ff	movq	%r15, %rdi
100032fb2:	e8 67 f0 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100032fb7:	48 8b 0d 5a 50 02 00	movq	151642(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100032fbe:	4c 8d 45 90	leaq	-112(%rbp), %r8
100032fc2:	49 89 08	movq	%rcx, (%r8)
100032fc5:	49 c7 40 08 00 00 00 40	movq	$1073741824, 8(%r8)
100032fcd:	48 8d 0d 7b 10 00 00	leaq	4219(%rip), %rcx
100032fd4:	49 89 48 10	movq	%rcx, 16(%r8)
100032fd8:	48 8d 0d d1 82 02 00	leaq	164561(%rip), %rcx
100032fdf:	49 89 48 18	movq	%rcx, 24(%r8)
100032fe3:	49 89 40 20	movq	%rax, 32(%r8)
100032fe7:	49 89 58 28	movq	%rbx, 40(%r8)
100032feb:	48 8b 85 78 ff ff ff	movq	-136(%rbp), %rax
100032ff2:	49 89 40 30	movq	%rax, 48(%r8)
100032ff6:	48 89 df	movq	%rbx, %rdi
100032ff9:	48 8b 75 88	movq	-120(%rbp), %rsi
100032ffd:	4c 89 f2	movq	%r14, %rdx
100033000:	4c 89 e9	movq	%r13, %rcx
100033003:	e8 54 dd fd ff	callq	0x100010d5c
100033008:	e9 75 05 00 00	jmp	0x100033582
10003300d:	4c 89 ff	movq	%r15, %rdi
100033010:	e8 0f f0 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100033015:	41 bc 16 00 00 00	movl	$22, %r12d
10003301b:	84 c0	testb	%al, %al
10003301d:	0f 84 5f 05 00 00	je	0x100033582
100033023:	48 8d 35 6b 78 01 00	leaq	96363(%rip), %rsi ## literal pool for: "pid"
10003302a:	4c 89 ff	movq	%r15, %rdi
10003302d:	e8 1c f0 00 00	callq	0x10004204e ## symbol stub for: _xpc_dictionary_get_int64
100033032:	85 c0	testl	%eax, %eax
100033034:	0f 8e 48 05 00 00	jle	0x100033582
10003303a:	89 c7	movl	%eax, %edi
10003303c:	e8 85 7c fe ff	callq	0x10001acc6
100033041:	48 85 c0	testq	%rax, %rax
100033044:	0f 84 8e 03 00 00	je	0x1000333d8
10003304a:	48 8b 98 50 01 00 00	movq	336(%rax), %rbx
100033051:	48 85 db	testq	%rbx, %rbx
100033054:	0f 85 a3 02 00 00	jne	0x1000332fd
10003305a:	48 89 c7	movq	%rax, %rdi
10003305d:	e8 9e 0f 00 00	callq	0x100034000
100033062:	e9 93 02 00 00	jmp	0x1000332fa
100033067:	4c 89 ff	movq	%r15, %rdi
10003306a:	e8 b5 ef 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10003306f:	41 bc 16 00 00 00	movl	$22, %r12d
100033075:	84 c0	testb	%al, %al
100033077:	0f 84 05 05 00 00	je	0x100033582
10003307d:	48 8d 75 90	leaq	-112(%rbp), %rsi
100033081:	c7 06 00 00 00 00	movl	$0, (%rsi)
100033087:	4c 89 ff	movq	%r15, %rdi
10003308a:	e8 ab 0d 00 00	callq	0x100033e3a
10003308f:	48 85 c0	testq	%rax, %rax
100033092:	0f 84 e6 04 00 00	je	0x10003357e
100033098:	48 89 c3	movq	%rax, %rbx
10003309b:	4c 89 ff	movq	%r15, %rdi
10003309e:	e8 7b ef 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000330a3:	49 89 c7	movq	%rax, %r15
1000330a6:	48 8b 3b	movq	(%rbx), %rdi
1000330a9:	e8 16 8a fe ff	callq	0x10001bac4
1000330ae:	48 89 c3	movq	%rax, %rbx
1000330b1:	48 8d 35 4b 83 01 00	leaq	99147(%rip), %rsi ## literal pool for: "attrs"
1000330b8:	4c 89 ff	movq	%r15, %rdi
1000330bb:	48 89 c2	movq	%rax, %rdx
1000330be:	e8 eb ef 00 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
1000330c3:	48 89 df	movq	%rbx, %rdi
1000330c6:	e8 31 f0 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000330cb:	e9 4e 02 00 00	jmp	0x10003331e
1000330d0:	4c 89 ff	movq	%r15, %rdi
1000330d3:	e8 4c ef 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
1000330d8:	41 bc 16 00 00 00	movl	$22, %r12d
1000330de:	84 c0	testb	%al, %al
1000330e0:	0f 84 9c 04 00 00	je	0x100033582
1000330e6:	48 8d 5d 90	leaq	-112(%rbp), %rbx
1000330ea:	c7 03 00 00 00 00	movl	$0, (%rbx)
1000330f0:	4c 89 ff	movq	%r15, %rdi
1000330f3:	48 89 de	movq	%rbx, %rsi
1000330f6:	e8 3f 0d 00 00	callq	0x100033e3a
1000330fb:	48 85 c0	testq	%rax, %rax
1000330fe:	0f 84 7a 04 00 00	je	0x10003357e
100033104:	49 89 c4	movq	%rax, %r12
100033107:	48 8d 35 a2 df 01 00	leaq	122786(%rip), %rsi ## literal pool for: "instance-uuid"
10003310e:	4c 89 ff	movq	%r15, %rdi
100033111:	e8 50 ef 00 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
100033116:	49 8b 34 24	movq	(%r12), %rsi
10003311a:	48 8b be e8 00 00 00	movq	232(%rsi), %rdi
100033121:	48 89 1c 24	movq	%rbx, (%rsp)
100033125:	48 89 c2	movq	%rax, %rdx
100033128:	b9 01 00 00 00	movl	$1, %ecx
10003312d:	45 31 c0	xorl	%r8d, %r8d
100033130:	4d 89 e9	movq	%r13, %r9
100033133:	e8 d6 e9 fe ff	callq	0x100021b0e
100033138:	48 85 c0	testq	%rax, %rax
10003313b:	74 21	je	0x10003315e
10003313d:	48 89 c3	movq	%rax, %rbx
100033140:	48 89 c7	movq	%rax, %rdi
100033143:	be 09 00 00 00	movl	$9, %esi
100033148:	e8 8b b0 fe ff	callq	0x10001e1d8
10003314d:	48 89 df	movq	%rbx, %rdi
100033150:	e8 22 07 00 00	callq	0x100033877
100033155:	48 85 c0	testq	%rax, %rax
100033158:	0f 85 9c 01 00 00	jne	0x1000332fa
10003315e:	4d 8b 34 24	movq	(%r12), %r14
100033162:	8b 5d 90	movl	-112(%rbp), %ebx
100033165:	89 df	movl	%ebx, %edi
100033167:	e8 a2 ef 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10003316c:	48 8d 15 4b df 01 00	leaq	122699(%rip), %rdx ## literal pool for: "instance creation failed: %d %s"
100033173:	4c 89 f7	movq	%r14, %rdi
100033176:	be 04 00 00 00	movl	$4, %esi
10003317b:	89 d9	movl	%ebx, %ecx
10003317d:	49 89 c0	movq	%rax, %r8
100033180:	31 c0	xorl	%eax, %eax
100033182:	e8 33 2e fe ff	callq	0x100015fba
100033187:	e9 f2 03 00 00	jmp	0x10003357e
10003318c:	4c 89 ff	movq	%r15, %rdi
10003318f:	e8 90 ee 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
100033194:	41 bc 16 00 00 00	movl	$22, %r12d
10003319a:	84 c0	testb	%al, %al
10003319c:	0f 84 e0 03 00 00	je	0x100033582
1000331a2:	48 8d 35 6d 1c 01 00	leaq	72813(%rip), %rsi ## literal pool for: "plist"
1000331a9:	4c 89 ff	movq	%r15, %rdi
1000331ac:	e8 bb ee 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000331b1:	48 85 c0	testq	%rax, %rax
1000331b4:	0f 84 c8 03 00 00	je	0x100033582
1000331ba:	48 89 c3	movq	%rax, %rbx
1000331bd:	48 89 c7	movq	%rax, %rdi
1000331c0:	e8 01 ef 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000331c5:	48 3b 05 34 4f 02 00	cmpq	151348(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000331cc:	0f 85 b0 03 00 00	jne	0x100033582
1000331d2:	48 8d 35 fb 07 01 00	leaq	67579(%rip), %rsi ## literal pool for: "Label"
1000331d9:	48 89 df	movq	%rbx, %rdi
1000331dc:	e8 79 ee 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000331e1:	48 89 45 88	movq	%rax, -120(%rbp)
1000331e5:	4c 8d 65 90	leaq	-112(%rbp), %r12
1000331e9:	41 c7 04 24 00 00 00 00	movl	$0, (%r12)
1000331f1:	4c 89 ff	movq	%r15, %rdi
1000331f4:	31 f6	xorl	%esi, %esi
1000331f6:	4c 89 e2	movq	%r12, %rdx
1000331f9:	e8 20 7e ff ff	callq	0x10002b01e
1000331fe:	45 8b 24 24	movl	(%r12), %r12d
100033202:	45 85 e4	testl	%r12d, %r12d
100033205:	0f 85 77 03 00 00	jne	0x100033582
10003320b:	4c 8d 65 90	leaq	-112(%rbp), %r12
10003320f:	48 89 df	movq	%rbx, %rdi
100033212:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
100033219:	48 89 c6	movq	%rax, %rsi
10003321c:	ba 01 00 00 00	movl	$1, %edx
100033221:	4c 89 e9	movq	%r13, %rcx
100033224:	4d 89 e0	movq	%r12, %r8
100033227:	e8 e1 06 00 00	callq	0x10003390d
10003322c:	49 89 c5	movq	%rax, %r13
10003322f:	41 8b 1c 24	movl	(%r12), %ebx
100033233:	85 db	testl	%ebx, %ebx
100033235:	0f 84 a1 02 00 00	je	0x1000334dc
10003323b:	4d 85 ed	testq	%r13, %r13
10003323e:	4c 8b 7d 88	movq	-120(%rbp), %r15
100033242:	0f 85 f8 03 00 00	jne	0x100033640
100033248:	89 df	movl	%ebx, %edi
10003324a:	e8 bf ee 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10003324f:	48 8d 15 49 dc 01 00	leaq	121929(%rip), %rdx ## literal pool for: "Submit job failed: service = %s, error = %d: %s"
100033256:	4c 8b b5 78 ff ff ff	movq	-136(%rbp), %r14
10003325d:	e9 f3 02 00 00	jmp	0x100033555
100033262:	4c 89 ff	movq	%r15, %rdi
100033265:	e8 ba ed 00 00	callq	0x100042024 ## symbol stub for: _xpc_dictionary_expects_reply
10003326a:	41 bc 16 00 00 00	movl	$22, %r12d
100033270:	84 c0	testb	%al, %al
100033272:	0f 84 0a 03 00 00	je	0x100033582
100033278:	48 8d 35 45 80 01 00	leaq	98373(%rip), %rsi ## literal pool for: "endpoint"
10003327f:	4c 89 ff	movq	%r15, %rdi
100033282:	e8 e5 ed 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100033287:	48 85 c0	testq	%rax, %rax
10003328a:	0f 84 f2 02 00 00	je	0x100033582
100033290:	48 89 c3	movq	%rax, %rbx
100033293:	48 89 c7	movq	%rax, %rdi
100033296:	e8 2b ee 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003329b:	48 3b 05 76 4e 02 00	cmpq	151158(%rip), %rax ## literal pool symbol address: __xpc_type_mach_send
1000332a2:	0f 85 da 02 00 00	jne	0x100033582
1000332a8:	48 89 df	movq	%rbx, %rdi
1000332ab:	e8 3a ee 00 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
1000332b0:	8d 48 01	leal	1(%rax), %ecx
1000332b3:	41 bc 71 00 00 00	movl	$113, %r12d
1000332b9:	83 f9 02	cmpl	$2, %ecx
1000332bc:	0f 82 c0 02 00 00	jb	0x100033582
1000332c2:	89 c7	movl	%eax, %edi
1000332c4:	e8 80 79 ff ff	callq	0x10002ac49
1000332c9:	48 85 c0	testq	%rax, %rax
1000332cc:	0f 84 b0 02 00 00	je	0x100033582
1000332d2:	48 89 c7	movq	%rax, %rdi
1000332d5:	e8 f2 83 00 00	callq	0x10003b6cc
1000332da:	e9 6b fd ff ff	jmp	0x10003304a
1000332df:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000332e3:	c7 06 00 00 00 00	movl	$0, (%rsi)
1000332e9:	4c 89 ff	movq	%r15, %rdi
1000332ec:	e8 49 0b 00 00	callq	0x100033e3a
1000332f1:	48 85 c0	testq	%rax, %rax
1000332f4:	0f 84 84 02 00 00	je	0x10003357e
1000332fa:	48 89 c3	movq	%rax, %rbx
1000332fd:	4c 89 ff	movq	%r15, %rdi
100033300:	e8 19 ed 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100033305:	49 89 c7	movq	%rax, %r15
100033308:	48 83 c3 10	addq	$16, %rbx
10003330c:	48 8d 35 32 dc 01 00	leaq	121906(%rip), %rsi ## literal pool for: "job-handle"
100033313:	48 89 c7	movq	%rax, %rdi
100033316:	48 89 da	movq	%rbx, %rdx
100033319:	e8 8a ed 00 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
10003331e:	4d 89 3e	movq	%r15, (%r14)
100033321:	45 31 e4	xorl	%r12d, %r12d
100033324:	e9 59 02 00 00	jmp	0x100033582
100033329:	4c 89 ff	movq	%r15, %rdi
10003332c:	e8 ed ec 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100033331:	49 89 c7	movq	%rax, %r15
100033334:	48 8d 35 e9 dc 01 00	leaq	122089(%rip), %rsi ## literal pool for: "handles"
10003333b:	48 89 c7	movq	%rax, %rdi
10003333e:	48 8b 5d 88	movq	-120(%rbp), %rbx
100033342:	48 89 da	movq	%rbx, %rdx
100033345:	e8 64 ed 00 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003334a:	48 89 df	movq	%rbx, %rdi
10003334d:	e8 aa ed 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100033352:	4d 89 3e	movq	%r15, (%r14)
100033355:	e9 28 02 00 00	jmp	0x100033582
10003335a:	4c 89 ff	movq	%r15, %rdi
10003335d:	e8 bc ec 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100033362:	49 89 c7	movq	%rax, %r15
100033365:	41 8b 55 00	movl	(%r13), %edx
100033369:	48 8d 35 9e 82 01 00	leaq	98974(%rip), %rsi ## literal pool for: "monitor"
100033370:	48 89 c7	movq	%rax, %rdi
100033373:	e8 12 ed 00 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
100033378:	48 89 df	movq	%rbx, %rdi
10003337b:	4c 89 fe	movq	%r15, %rsi
10003337e:	e8 2c 0b 00 00	callq	0x100033eaf
100033383:	eb 99	jmp	0x10003331e
100033385:	c7 45 84 90 00 00 00	movl	$144, -124(%rbp)
10003338c:	bb 90 00 00 00	movl	$144, %ebx
100033391:	89 df	movl	%ebx, %edi
100033393:	e8 76 ed 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100033398:	48 8d 15 60 dc 01 00	leaq	121952(%rip), %rdx ## literal pool for: "Could not remove job: error = %d: %s"
10003339f:	4c 89 e7	movq	%r12, %rdi
1000333a2:	be 03 00 00 00	movl	$3, %esi
1000333a7:	89 d9	movl	%ebx, %ecx
1000333a9:	49 89 c0	movq	%rax, %r8
1000333ac:	31 c0	xorl	%eax, %eax
1000333ae:	e8 07 2c fe ff	callq	0x100015fba
1000333b3:	44 8b 65 84	movl	-124(%rbp), %r12d
1000333b7:	e9 c6 01 00 00	jmp	0x100033582
1000333bc:	48 83 7b 40 00	cmpq	$0, 64(%rbx)
1000333c1:	0f 84 88 00 00 00	je	0x10003344f
1000333c7:	48 8b 3b	movq	(%rbx), %rdi
1000333ca:	48 8d 15 7c dc 01 00	leaq	121980(%rip), %rdx ## literal pool for: "Start job failed: another start request is already inflight"
1000333d1:	be 03 00 00 00	movl	$3, %esi
1000333d6:	eb 38	jmp	0x100033410
1000333d8:	41 bc 71 00 00 00	movl	$113, %r12d
1000333de:	e9 9f 01 00 00	jmp	0x100033582
1000333e3:	31 db	xorl	%ebx, %ebx
1000333e5:	89 c7	movl	%eax, %edi
1000333e7:	e8 4d 69 fd ff	callq	0x100009d39
1000333ec:	85 c0	testl	%eax, %eax
1000333ee:	0f 85 40 02 00 00	jne	0x100033634
1000333f4:	48 85 db	testq	%rbx, %rbx
1000333f7:	74 34	je	0x10003342d
1000333f9:	48 83 7b 10 00	cmpq	$0, 16(%rbx)
1000333fe:	74 67	je	0x100033467
100033400:	49 8b 3c 24	movq	(%r12), %rdi
100033404:	48 8d 15 c1 db 01 00	leaq	121793(%rip), %rdx ## literal pool for: "job is already monitored"
10003340b:	be 05 00 00 00	movl	$5, %esi
100033410:	31 c0	xorl	%eax, %eax
100033412:	e8 a3 2b fe ff	callq	0x100015fba
100033417:	41 bc 25 00 00 00	movl	$37, %r12d
10003341d:	e9 60 01 00 00	jmp	0x100033582
100033422:	41 bc 16 00 00 00	movl	$22, %r12d
100033428:	e9 55 01 00 00	jmp	0x100033582
10003342d:	49 8b 3c 24	movq	(%r12), %rdi
100033431:	48 8d 15 73 db 01 00	leaq	121715(%rip), %rdx ## literal pool for: "job is not monitored, can't poll"
100033438:	be 05 00 00 00	movl	$5, %esi
10003343d:	31 c0	xorl	%eax, %eax
10003343f:	e8 76 2b fe ff	callq	0x100015fba
100033444:	41 bc 03 00 00 00	movl	$3, %r12d
10003344a:	e9 33 01 00 00	jmp	0x100033582
10003344f:	4c 89 ff	movq	%r15, %rdi
100033452:	e8 34 d6 ff ff	callq	0x100030a8b
100033457:	48 89 df	movq	%rbx, %rdi
10003345a:	48 89 c6	movq	%rax, %rsi
10003345d:	e8 08 08 00 00	callq	0x100033c6a
100033462:	e9 ba fe ff ff	jmp	0x100033321
100033467:	44 8a 6b 28	movb	40(%rbx), %r13b
10003346b:	4c 89 ff	movq	%r15, %rdi
10003346e:	e8 ab eb 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100033473:	49 89 c7	movq	%rax, %r15
100033476:	41 f6 c5 01	testb	$1, %r13b
10003347a:	75 09	jne	0x100033485
10003347c:	4c 89 7b 10	movq	%r15, 16(%rbx)
100033480:	e9 9c fe ff ff	jmp	0x100033321
100033485:	4c 89 e7	movq	%r12, %rdi
100033488:	4c 89 fe	movq	%r15, %rsi
10003348b:	e8 1f 0a 00 00	callq	0x100033eaf
100033490:	4d 89 3e	movq	%r15, (%r14)
100033493:	80 63 28 fe	andb	$-2, 40(%rbx)
100033497:	e9 85 fe ff ff	jmp	0x100033321
10003349c:	48 8d 35 6b 81 01 00	leaq	98667(%rip), %rsi ## literal pool for: "monitor"
1000334a3:	4c 89 ff	movq	%r15, %rdi
1000334a6:	e8 8b eb 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000334ab:	84 c0	testb	%al, %al
1000334ad:	74 72	je	0x100033521
1000334af:	48 8d 5d 90	leaq	-112(%rbp), %rbx
1000334b3:	4c 89 ef	movq	%r13, %rdi
1000334b6:	48 89 de	movq	%rbx, %rsi
1000334b9:	e8 04 06 00 00	callq	0x100033ac2
1000334be:	49 89 c4	movq	%rax, %r12
1000334c1:	8b 1b	movl	(%rbx), %ebx
1000334c3:	85 db	testl	%ebx, %ebx
1000334c5:	0f 84 38 01 00 00	je	0x100033603
1000334cb:	4d 85 e4	testq	%r12, %r12
1000334ce:	4d 89 f7	movq	%r14, %r15
1000334d1:	4c 8b 75 88	movq	-120(%rbp), %r14
1000334d5:	74 70	je	0x100033547
1000334d7:	e8 a0 d7 00 00	callq	0x100040c7c
1000334dc:	48 8d 35 2b 81 01 00	leaq	98603(%rip), %rsi ## literal pool for: "monitor"
1000334e3:	4c 89 ff	movq	%r15, %rdi
1000334e6:	e8 4b eb 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000334eb:	84 c0	testb	%al, %al
1000334ed:	0f 84 b5 00 00 00	je	0x1000335a8
1000334f3:	48 8d 5d 90	leaq	-112(%rbp), %rbx
1000334f7:	4c 89 ef	movq	%r13, %rdi
1000334fa:	48 89 de	movq	%rbx, %rsi
1000334fd:	e8 c0 05 00 00	callq	0x100033ac2
100033502:	49 89 c4	movq	%rax, %r12
100033505:	8b 1b	movl	(%rbx), %ebx
100033507:	85 db	testl	%ebx, %ebx
100033509:	0f 84 9c 00 00 00	je	0x1000335ab
10003350f:	4d 85 e4	testq	%r12, %r12
100033512:	4c 8b 7d 88	movq	-120(%rbp), %r15
100033516:	0f 84 2c fd ff ff	je	0x100033248
10003351c:	e8 b0 d7 00 00	callq	0x100040cd1
100033521:	4c 89 ff	movq	%r15, %rdi
100033524:	e8 62 d5 ff ff	callq	0x100030a8b
100033529:	48 89 c3	movq	%rax, %rbx
10003352c:	4d 89 f7	movq	%r14, %r15
10003352f:	4c 89 ef	movq	%r13, %rdi
100033532:	48 89 de	movq	%rbx, %rsi
100033535:	e8 30 07 00 00	callq	0x100033c6a
10003353a:	89 c3	movl	%eax, %ebx
10003353c:	89 45 90	movl	%eax, -112(%rbp)
10003353f:	85 c0	testl	%eax, %eax
100033541:	4c 8b 75 88	movq	-120(%rbp), %r14
100033545:	74 37	je	0x10003357e
100033547:	89 df	movl	%ebx, %edi
100033549:	e8 c0 eb 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10003354e:	48 8d 15 4a d9 01 00	leaq	121162(%rip), %rdx ## literal pool for: "Submit job failed: service = %s, error = %d: %s"
100033555:	4c 89 f7	movq	%r14, %rdi
100033558:	be 03 00 00 00	movl	$3, %esi
10003355d:	4c 89 f9	movq	%r15, %rcx
100033560:	41 89 d8	movl	%ebx, %r8d
100033563:	49 89 c1	movq	%rax, %r9
100033566:	31 c0	xorl	%eax, %eax
100033568:	e8 bc ce fe ff	callq	0x100020429
10003356d:	4d 85 ed	testq	%r13, %r13
100033570:	74 0c	je	0x10003357e
100033572:	49 8b 75 00	movq	(%r13), %rsi
100033576:	4c 89 f7	movq	%r14, %rdi
100033579:	e8 c4 e3 fe ff	callq	0x100021942
10003357e:	44 8b 65 90	movl	-112(%rbp), %r12d
100033582:	48 8b 05 9f 4a 02 00	movq	150175(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100033589:	48 8b 00	movq	(%rax), %rax
10003358c:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100033590:	0f 85 a5 00 00 00	jne	0x10003363b
100033596:	44 89 e0	movl	%r12d, %eax
100033599:	48 83 c4 68	addq	$104, %rsp
10003359d:	5b	popq	%rbx
10003359e:	41 5c	popq	%r12
1000335a0:	41 5d	popq	%r13
1000335a2:	41 5e	popq	%r14
1000335a4:	41 5f	popq	%r15
1000335a6:	5d	popq	%rbp
1000335a7:	c3	retq
1000335a8:	45 31 e4	xorl	%r12d, %r12d
1000335ab:	4c 89 ff	movq	%r15, %rdi
1000335ae:	e8 6b ea 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
1000335b3:	48 89 c3	movq	%rax, %rbx
1000335b6:	49 83 c5 10	addq	$16, %r13
1000335ba:	48 8d 35 84 d9 01 00	leaq	121220(%rip), %rsi ## literal pool for: "job-handle"
1000335c1:	48 89 c7	movq	%rax, %rdi
1000335c4:	4c 89 ea	movq	%r13, %rdx
1000335c7:	e8 dc ea 00 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
1000335cc:	4d 85 e4	testq	%r12, %r12
1000335cf:	74 13	je	0x1000335e4
1000335d1:	41 8b 14 24	movl	(%r12), %edx
1000335d5:	48 8d 35 32 80 01 00	leaq	98354(%rip), %rsi ## literal pool for: "monitor"
1000335dc:	48 89 df	movq	%rbx, %rdi
1000335df:	e8 a6 ea 00 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
1000335e4:	49 89 1e	movq	%rbx, (%r14)
1000335e7:	e9 35 fd ff ff	jmp	0x100033321
1000335ec:	48 63 d0	movslq	%eax, %rdx
1000335ef:	48 8b 33	movq	(%rbx), %rsi
1000335f2:	48 8d 3d 0e 4d fe ff	leaq	-111346(%rip), %rdi
1000335f9:	e8 aa e1 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000335fe:	e9 0b f9 ff ff	jmp	0x100032f0e
100033603:	4c 89 ff	movq	%r15, %rdi
100033606:	e8 80 d4 ff ff	callq	0x100030a8b
10003360b:	48 89 c3	movq	%rax, %rbx
10003360e:	4d 85 e4	testq	%r12, %r12
100033611:	0f 84 15 ff ff ff	je	0x10003352c
100033617:	41 8b 14 24	movl	(%r12), %edx
10003361b:	48 8d 35 ec 7f 01 00	leaq	98284(%rip), %rsi ## literal pool for: "monitor"
100033622:	48 89 df	movq	%rbx, %rdi
100033625:	e8 60 ea 00 00	callq	0x10004208a ## symbol stub for: _xpc_dictionary_set_mach_recv
10003362a:	e9 fd fe ff ff	jmp	0x10003352c
10003362f:	e8 72 d6 00 00	callq	0x100040ca6
100033634:	89 c7	movl	%eax, %edi
100033636:	e8 80 d6 00 00	callq	0x100040cbb
10003363b:	e8 32 e1 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100033640:	e8 a1 d6 00 00	callq	0x100040ce6
100033645:	0f 1f 00	nopl	(%rax)
	.byte 0xd3 #bad opcode
100033649:	f4	hlt
	.byte 0xff #bad opcode
10003364b:	ff 9b f5 ff ff 03	lcalll	*67108853(%rbx)
100033651:	f6 ff	idivb	%bh
100033653:	ff 6a f6	ljmpl	*-10(%rdx)
	.byte 0xff #bad opcode
100033657:	ff 2c f7	ljmpl	*(%rdi,%rsi,8)
	.byte 0xff #bad opcode
10003365b:	ff ac f7 ff ff 5c f8	ljmpl	*-128122881(%rdi,%rsi,8)
	.byte 0xff #bad opcode
100033663:	ff d3	callq	*%rbx
100033665:	f8	clc
	.byte 0xff #bad opcode
100033667:	ff c5	incl	%ebp
100033669:	f9	stc
	.byte 0xff #bad opcode
10003366b:	ff 1f	lcalll	*(%rdi)
10003366d:	fa	cli
	.byte 0xff #bad opcode
10003366f:	ff 88 fa ff ff 44	decl	1157627898(%rax)
100033675:	fb	sti
	.byte 0xff #bad opcode
100033677:	ff 1a	lcalll	*(%rdx)
100033679:	fc	cld
	.byte 0xff #bad opcode
10003367b:	ff 97 fc ff ff 55	callq	*1442840572(%rdi)
100033681:	48 89 e5	movq	%rsp, %rbp
100033684:	53	pushq	%rbx
100033685:	50	pushq	%rax
100033686:	48 89 fb	movq	%rdi, %rbx
100033689:	48 8b bf 50 01 00 00	movq	336(%rdi), %rdi
100033690:	48 85 ff	testq	%rdi, %rdi
100033693:	74 1e	je	0x1000336b3
100033695:	83 fe 09	cmpl	$9, %esi
100033698:	74 36	je	0x1000336d0
10003369a:	83 fe 05	cmpl	$5, %esi
10003369d:	74 49	je	0x1000336e8
10003369f:	83 fe 04	cmpl	$4, %esi
1000336a2:	75 6c	jne	0x100033710
1000336a4:	48 85 d2	testq	%rdx, %rdx
1000336a7:	74 6e	je	0x100033717
1000336a9:	89 57 0c	movl	%edx, 12(%rdi)
1000336ac:	be 02 00 00 00	movl	$2, %esi
1000336b1:	eb 69	jmp	0x10003371c
1000336b3:	83 fe 09	cmpl	$9, %esi
1000336b6:	74 3d	je	0x1000336f5
1000336b8:	83 fe 05	cmpl	$5, %esi
1000336bb:	74 3f	je	0x1000336fc
1000336bd:	83 fe 04	cmpl	$4, %esi
1000336c0:	75 4e	jne	0x100033710
1000336c2:	48 83 fa 01	cmpq	$1, %rdx
1000336c6:	b8 02 00 00 00	movl	$2, %eax
1000336cb:	83 d8 00	sbbl	$0, %eax
1000336ce:	eb 3a	jmp	0x10003370a
1000336d0:	be 04 00 00 00	movl	$4, %esi
1000336d5:	e8 4d 00 00 00	callq	0x100033727
1000336da:	48 89 df	movq	%rbx, %rdi
1000336dd:	48 83 c4 08	addq	$8, %rsp
1000336e1:	5b	popq	%rbx
1000336e2:	5d	popq	%rbp
1000336e3:	e9 de f2 ff ff	jmp	0x1000329c6
1000336e8:	be 03 00 00 00	movl	$3, %esi
1000336ed:	83 7f 08 01	cmpl	$1, 8(%rdi)
1000336f1:	75 1d	jne	0x100033710
1000336f3:	eb 27	jmp	0x10003371c
1000336f5:	b8 04 00 00 00	movl	$4, %eax
1000336fa:	eb 0e	jmp	0x10003370a
1000336fc:	b8 03 00 00 00	movl	$3, %eax
100033701:	83 bb 58 01 00 00 01	cmpl	$1, 344(%rbx)
100033708:	75 06	jne	0x100033710
10003370a:	89 83 58 01 00 00	movl	%eax, 344(%rbx)
100033710:	48 83 c4 08	addq	$8, %rsp
100033714:	5b	popq	%rbx
100033715:	5d	popq	%rbp
100033716:	c3	retq
100033717:	be 01 00 00 00	movl	$1, %esi
10003371c:	48 83 c4 08	addq	$8, %rsp
100033720:	5b	popq	%rbx
100033721:	5d	popq	%rbp
100033722:	e9 00 00 00 00	jmp	0x100033727
100033727:	55	pushq	%rbp
100033728:	48 89 e5	movq	%rsp, %rbp
10003372b:	41 57	pushq	%r15
10003372d:	41 56	pushq	%r14
10003372f:	41 54	pushq	%r12
100033731:	53	pushq	%rbx
100033732:	85 f6	testl	%esi, %esi
100033734:	0f 84 13 01 00 00	je	0x10003384d
10003373a:	49 89 ff	movq	%rdi, %r15
10003373d:	89 77 08	movl	%esi, 8(%rdi)
100033740:	48 8b 3f	movq	(%rdi), %rdi
100033743:	48 8b 87 50 01 00 00	movq	336(%rdi), %rax
10003374a:	48 85 c0	testq	%rax, %rax
10003374d:	74 17	je	0x100033766
10003374f:	48 63 40 08	movslq	8(%rax), %rax
100033753:	48 83 f8 04	cmpq	$4, %rax
100033757:	77 0d	ja	0x100033766
100033759:	48 8d 0d 70 7b 02 00	leaq	162672(%rip), %rcx
100033760:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
100033764:	eb 02	jmp	0x100033768
100033766:	31 c9	xorl	%ecx, %ecx
100033768:	48 8d 15 9d 8c 01 00	leaq	101533(%rip), %rdx ## literal pool for: "job state = %s"
10003376f:	be 05 00 00 00	movl	$5, %esi
100033774:	31 c0	xorl	%eax, %eax
100033776:	e8 3f 28 fe ff	callq	0x100015fba
10003377b:	4d 8b 77 40	movq	64(%r15), %r14
10003377f:	4d 85 f6	testq	%r14, %r14
100033782:	74 42	je	0x1000337c6
100033784:	4c 89 ff	movq	%r15, %rdi
100033787:	4c 89 f6	movq	%r14, %rsi
10003378a:	e8 20 07 00 00	callq	0x100033eaf
10003378f:	49 8d 57 10	leaq	16(%r15), %rdx
100033793:	48 8d 35 ab d7 01 00	leaq	120747(%rip), %rsi ## literal pool for: "job-handle"
10003379a:	4c 89 f7	movq	%r14, %rdi
10003379d:	e8 06 e9 00 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
1000337a2:	4c 89 f7	movq	%r14, %rdi
1000337a5:	e8 46 e9 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
1000337aa:	a9 df ff ff ff	testl	$4294967263, %eax
1000337af:	0f 85 81 00 00 00	jne	0x100033836
1000337b5:	49 8b 7f 40	movq	64(%r15), %rdi
1000337b9:	e8 3e e9 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000337be:	49 c7 47 40 00 00 00 00	movq	$0, 64(%r15)
1000337c6:	49 8b 5f 38	movq	56(%r15), %rbx
1000337ca:	48 85 db	testq	%rbx, %rbx
1000337cd:	74 5e	je	0x10003382d
1000337cf:	4c 8d 35 31 4b fe ff	leaq	-111823(%rip), %r14
1000337d6:	80 4b 28 01	orb	$1, 40(%rbx)
1000337da:	4c 8b 63 10	movq	16(%rbx), %r12
1000337de:	4d 85 e4	testq	%r12, %r12
1000337e1:	74 2f	je	0x100033812
1000337e3:	4c 89 ff	movq	%r15, %rdi
1000337e6:	4c 89 e6	movq	%r12, %rsi
1000337e9:	e8 c1 06 00 00	callq	0x100033eaf
1000337ee:	4c 89 e7	movq	%r12, %rdi
1000337f1:	e8 fa e8 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
1000337f6:	a9 df ff ff ff	testl	$4294967263, %eax
1000337fb:	75 20	jne	0x10003381d
1000337fd:	48 8b 7b 10	movq	16(%rbx), %rdi
100033801:	e8 f6 e8 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100033806:	48 c7 43 10 00 00 00 00	movq	$0, 16(%rbx)
10003380e:	80 63 28 fe	andb	$-2, 40(%rbx)
100033812:	48 8b 5b 18	movq	24(%rbx), %rbx
100033816:	48 85 db	testq	%rbx, %rbx
100033819:	75 bb	jne	0x1000337d6
10003381b:	eb 10	jmp	0x10003382d
10003381d:	48 63 d0	movslq	%eax, %rdx
100033820:	49 8b 37	movq	(%r15), %rsi
100033823:	4c 89 f7	movq	%r14, %rdi
100033826:	e8 7d df 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003382b:	eb d0	jmp	0x1000337fd
10003382d:	5b	popq	%rbx
10003382e:	41 5c	popq	%r12
100033830:	41 5e	popq	%r14
100033832:	41 5f	popq	%r15
100033834:	5d	popq	%rbp
100033835:	c3	retq
100033836:	48 63 d0	movslq	%eax, %rdx
100033839:	49 8b 37	movq	(%r15), %rsi
10003383c:	48 8d 3d c4 4a fe ff	leaq	-111932(%rip), %rdi
100033843:	e8 60 df 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100033848:	e9 68 ff ff ff	jmp	0x1000337b5
10003384d:	e8 a9 d4 00 00	callq	0x100040cfb
100033852:	90	nop
100033853:	90	nop
100033854:	55	pushq	%rbp
100033855:	48 89 e5	movq	%rsp, %rbp
100033858:	41 56	pushq	%r14
10003385a:	53	pushq	%rbx
10003385b:	49 89 f6	movq	%rsi, %r14
10003385e:	e8 14 00 00 00	callq	0x100033877
100033863:	48 89 c3	movq	%rax, %rbx
100033866:	4c 89 f7	movq	%r14, %rdi
100033869:	e8 74 b7 fd ff	callq	0x10000efe2
10003386e:	48 89 43 30	movq	%rax, 48(%rbx)
100033872:	5b	popq	%rbx
100033873:	41 5e	popq	%r14
100033875:	5d	popq	%rbp
100033876:	c3	retq
100033877:	55	pushq	%rbp
100033878:	48 89 e5	movq	%rsp, %rbp
10003387b:	41 56	pushq	%r14
10003387d:	53	pushq	%rbx
10003387e:	48 8b 9f 50 01 00 00	movq	336(%rdi), %rbx
100033885:	48 85 db	testq	%rbx, %rbx
100033888:	75 50	jne	0x1000338da
10003388a:	49 89 fe	movq	%rdi, %r14
10003388d:	bf 48 00 00 00	movl	$72, %edi
100033892:	e8 4e 9c fd ff	callq	0x10000d4e5
100033897:	48 89 c3	movq	%rax, %rbx
10003389a:	49 89 86 50 01 00 00	movq	%rax, 336(%r14)
1000338a1:	4c 89 30	movq	%r14, (%rax)
1000338a4:	48 8d 78 10	leaq	16(%rax), %rdi
1000338a8:	e8 4b e6 00 00	callq	0x100041ef8 ## symbol stub for: _uuid_generate
1000338ad:	48 8b 05 dc fd 02 00	movq	196060(%rip), %rax
1000338b4:	48 89 43 20	movq	%rax, 32(%rbx)
1000338b8:	48 85 c0	testq	%rax, %rax
1000338bb:	74 0b	je	0x1000338c8
1000338bd:	48 89 d9	movq	%rbx, %rcx
1000338c0:	48 83 c1 20	addq	$32, %rcx
1000338c4:	48 89 48 28	movq	%rcx, 40(%rax)
1000338c8:	48 89 1d c1 fd 02 00	movq	%rbx, 196033(%rip)
1000338cf:	48 8d 05 ba fd 02 00	leaq	196026(%rip), %rax
1000338d6:	48 89 43 28	movq	%rax, 40(%rbx)
1000338da:	48 89 d8	movq	%rbx, %rax
1000338dd:	5b	popq	%rbx
1000338de:	41 5e	popq	%r14
1000338e0:	5d	popq	%rbp
1000338e1:	c3	retq
1000338e2:	55	pushq	%rbp
1000338e3:	48 89 e5	movq	%rsp, %rbp
1000338e6:	48 8b 87 50 01 00 00	movq	336(%rdi), %rax
1000338ed:	48 85 c0	testq	%rax, %rax
1000338f0:	74 17	je	0x100033909
1000338f2:	48 63 40 08	movslq	8(%rax), %rax
1000338f6:	48 83 f8 04	cmpq	$4, %rax
1000338fa:	77 0d	ja	0x100033909
1000338fc:	48 8d 0d cd 79 02 00	leaq	162253(%rip), %rcx
100033903:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
100033907:	eb 02	jmp	0x10003390b
100033909:	31 c0	xorl	%eax, %eax
10003390b:	5d	popq	%rbp
10003390c:	c3	retq
10003390d:	55	pushq	%rbp
10003390e:	48 89 e5	movq	%rsp, %rbp
100033911:	41 57	pushq	%r15
100033913:	41 56	pushq	%r14
100033915:	41 55	pushq	%r13
100033917:	41 54	pushq	%r12
100033919:	53	pushq	%rbx
10003391a:	48 81 ec d8 00 00 00	subq	$216, %rsp
100033921:	4d 89 c7	movq	%r8, %r15
100033924:	49 89 cc	movq	%rcx, %r12
100033927:	41 89 d6	movl	%edx, %r14d
10003392a:	49 89 f5	movq	%rsi, %r13
10003392d:	48 89 fb	movq	%rdi, %rbx
100033930:	48 8b 05 f1 46 02 00	movq	149233(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100033937:	48 8b 00	movq	(%rax), %rax
10003393a:	48 89 45 d0	movq	%rax, -48(%rbp)
10003393e:	48 8d 35 5d 2e 01 00	leaq	77405(%rip), %rsi ## literal pool for: "_ManagedBy"
100033945:	e8 10 e7 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10003394a:	48 85 c0	testq	%rax, %rax
10003394d:	0f 84 b5 00 00 00	je	0x100033a08
100033953:	4c 89 e7	movq	%r12, %rdi
100033956:	48 89 c6	movq	%rax, %rsi
100033959:	e8 32 04 00 00	callq	0x100033d90
10003395e:	84 c0	testb	%al, %al
100033960:	0f 84 ab 00 00 00	je	0x100033a11
100033966:	0f 28 05 13 f9 00 00	movaps	63763(%rip), %xmm0
10003396d:	48 8d 75 90	leaq	-112(%rbp), %rsi
100033971:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100033975:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100033979:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003397d:	0f 29 06	movaps	%xmm0, (%rsi)
100033980:	4c 89 e7	movq	%r12, %rdi
100033983:	e8 d5 0e 00 00	callq	0x10003485d
100033988:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
10003398f:	0f 28 05 ea f8 00 00	movaps	63722(%rip), %xmm0
100033996:	0f 29 47 70	movaps	%xmm0, 112(%rdi)
10003399a:	0f 29 47 60	movaps	%xmm0, 96(%rdi)
10003399e:	0f 29 47 50	movaps	%xmm0, 80(%rdi)
1000339a2:	0f 29 47 40	movaps	%xmm0, 64(%rdi)
1000339a6:	0f 29 47 30	movaps	%xmm0, 48(%rdi)
1000339aa:	0f 29 47 20	movaps	%xmm0, 32(%rdi)
1000339ae:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
1000339b2:	0f 29 07	movaps	%xmm0, (%rdi)
1000339b5:	45 8b 44 24 14	movl	20(%r12), %r8d
1000339ba:	48 8d 15 19 00 01 00	leaq	65561(%rip), %rdx ## literal pool for: "(submitted by %s.%d)"
1000339c1:	be 80 00 00 00	movl	$128, %esi
1000339c6:	48 89 c1	movq	%rax, %rcx
1000339c9:	31 c0	xorl	%eax, %eax
1000339cb:	e8 32 e4 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
1000339d0:	48 8d 35 fd ff 00 00	leaq	65533(%rip), %rsi ## literal pool for: "Label"
1000339d7:	48 89 df	movq	%rbx, %rdi
1000339da:	e8 7b e6 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000339df:	48 85 c0	testq	%rax, %rax
1000339e2:	44 89 b5 0c ff ff ff	movl	%r14d, -244(%rbp)
1000339e9:	74 31	je	0x100033a1c
1000339eb:	48 8d 35 a0 02 01 00	leaq	66208(%rip), %rsi ## literal pool for: "com.apple."
1000339f2:	48 89 c7	movq	%rax, %rdi
1000339f5:	e8 b4 b8 fd ff	callq	0x10000f2ae
1000339fa:	44 0f b6 c0	movzbl	%al, %r8d
1000339fe:	49 83 c8 04	orq	$4, %r8
100033a02:	49 c1 e0 07	shlq	$7, %r8
100033a06:	eb 1a	jmp	0x100033a22
100033a08:	41 c7 07 6d 00 00 00	movl	$109, (%r15)
100033a0f:	eb 07	jmp	0x100033a18
100033a11:	41 c7 07 90 00 00 00	movl	$144, (%r15)
100033a18:	31 c0	xorl	%eax, %eax
100033a1a:	eb 75	jmp	0x100033a91
100033a1c:	41 b8 00 02 00 00	movl	$512, %r8d
100033a22:	4c 8d b5 08 ff ff ff	leaq	-248(%rbp), %r14
100033a29:	41 c7 06 00 00 00 00	movl	$0, (%r14)
100033a30:	48 8d 95 10 ff ff ff	leaq	-240(%rbp), %rdx
100033a37:	4c 89 ef	movq	%r13, %rdi
100033a3a:	48 89 de	movq	%rbx, %rsi
100033a3d:	4c 89 e1	movq	%r12, %rcx
100033a40:	4d 89 f1	movq	%r14, %r9
100033a43:	e8 6d 85 ff ff	callq	0x10002bfb5
100033a48:	48 89 c3	movq	%rax, %rbx
100033a4b:	45 8b 36	movl	(%r14), %r14d
100033a4e:	45 85 f6	testl	%r14d, %r14d
100033a51:	74 09	je	0x100033a5c
100033a53:	48 85 db	testq	%rbx, %rbx
100033a56:	75 5b	jne	0x100033ab3
100033a58:	31 c0	xorl	%eax, %eax
100033a5a:	eb 32	jmp	0x100033a8e
100033a5c:	48 85 db	testq	%rbx, %rbx
100033a5f:	74 57	je	0x100033ab8
100033a61:	f6 85 0c ff ff ff 01	testb	$1, -244(%rbp)
100033a68:	75 0d	jne	0x100033a77
100033a6a:	48 89 df	movq	%rbx, %rdi
100033a6d:	be 09 00 00 00	movl	$9, %esi
100033a72:	e8 61 a7 fe ff	callq	0x10001e1d8
100033a77:	48 8b bb e8 00 00 00	movq	232(%rbx), %rdi
100033a7e:	48 89 de	movq	%rbx, %rsi
100033a81:	e8 16 dd fe ff	callq	0x10002179c
100033a86:	48 89 df	movq	%rbx, %rdi
100033a89:	e8 e9 fd ff ff	callq	0x100033877
100033a8e:	45 89 37	movl	%r14d, (%r15)
100033a91:	48 8b 0d 90 45 02 00	movq	148880(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100033a98:	48 8b 09	movq	(%rcx), %rcx
100033a9b:	48 3b 4d d0	cmpq	-48(%rbp), %rcx
100033a9f:	75 1c	jne	0x100033abd
100033aa1:	48 81 c4 d8 00 00 00	addq	$216, %rsp
100033aa8:	5b	popq	%rbx
100033aa9:	41 5c	popq	%r12
100033aab:	41 5d	popq	%r13
100033aad:	41 5e	popq	%r14
100033aaf:	41 5f	popq	%r15
100033ab1:	5d	popq	%rbp
100033ab2:	c3	retq
100033ab3:	e8 6d d2 00 00	callq	0x100040d25
100033ab8:	e8 53 d2 00 00	callq	0x100040d10
100033abd:	e8 b0 dc 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100033ac2:	55	pushq	%rbp
100033ac3:	48 89 e5	movq	%rsp, %rbp
100033ac6:	41 57	pushq	%r15
100033ac8:	41 56	pushq	%r14
100033aca:	41 55	pushq	%r13
100033acc:	41 54	pushq	%r12
100033ace:	53	pushq	%rbx
100033acf:	48 83 ec 58	subq	$88, %rsp
100033ad3:	49 89 f6	movq	%rsi, %r14
100033ad6:	49 89 ff	movq	%rdi, %r15
100033ad9:	bf 12 00 00 00	movl	$18, %edi
100033ade:	be 01 00 00 00	movl	$1, %esi
100033ae3:	31 d2	xorl	%edx, %edx
100033ae5:	e8 68 61 fd ff	callq	0x100009c52
100033aea:	85 c0	testl	%eax, %eax
100033aec:	0f 84 1b 01 00 00	je	0x100033c0d
100033af2:	89 c3	movl	%eax, %ebx
100033af4:	48 8d 75 d4	leaq	-44(%rbp), %rsi
100033af8:	c7 06 00 00 00 00	movl	$0, (%rsi)
100033afe:	89 c7	movl	%eax, %edi
100033b00:	e8 e7 61 fd ff	callq	0x100009cec
100033b05:	85 c0	testl	%eax, %eax
100033b07:	0f 85 ed 00 00 00	jne	0x100033bfa
100033b0d:	83 7d d4 00	cmpl	$0, -44(%rbp)
100033b11:	0f 84 e3 00 00 00	je	0x100033bfa
100033b17:	bf 30 00 00 00	movl	$48, %edi
100033b1c:	e8 c4 99 fd ff	callq	0x10000d4e5
100033b21:	49 89 c4	movq	%rax, %r12
100033b24:	89 18	movl	%ebx, (%rax)
100033b26:	8b 7d d4	movl	-44(%rbp), %edi
100033b29:	e8 98 dc 00 00	callq	0x1000417c6 ## symbol stub for: __xpc_dictionary_create_reply_with_port
100033b2e:	49 89 44 24 10	movq	%rax, 16(%r12)
100033b33:	48 85 c0	testq	%rax, %rax
100033b36:	0f 84 22 01 00 00	je	0x100033c5e
100033b3c:	49 8b 47 38	movq	56(%r15), %rax
100033b40:	49 83 c7 38	addq	$56, %r15
100033b44:	49 89 44 24 18	movq	%rax, 24(%r12)
100033b49:	48 85 c0	testq	%rax, %rax
100033b4c:	74 0b	je	0x100033b59
100033b4e:	4c 89 e1	movq	%r12, %rcx
100033b51:	48 83 c1 18	addq	$24, %rcx
100033b55:	48 89 48 20	movq	%rcx, 32(%rax)
100033b59:	4d 89 27	movq	%r12, (%r15)
100033b5c:	4d 89 7c 24 20	movq	%r15, 32(%r12)
100033b61:	89 db	movl	%ebx, %ebx
100033b63:	e8 92 a9 fd ff	callq	0x10000e4fa
100033b68:	48 8b 3d e9 44 02 00	movq	148713(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_send
100033b6f:	ba 01 00 00 00	movl	$1, %edx
100033b74:	48 89 de	movq	%rbx, %rsi
100033b77:	48 89 c1	movq	%rax, %rcx
100033b7a:	e8 03 de 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100033b7f:	48 89 c3	movq	%rax, %rbx
100033b82:	4c 8b 3d 8f 44 02 00	movq	148623(%rip), %r15 ## literal pool symbol address: __NSConcreteStackBlock
100033b89:	48 8d 75 80	leaq	-128(%rbp), %rsi
100033b8d:	4c 89 3e	movq	%r15, (%rsi)
100033b90:	41 bd 00 00 00 40	movl	$1073741824, %r13d
100033b96:	4c 89 6e 08	movq	%r13, 8(%rsi)
100033b9a:	48 8d 05 58 02 00 00	leaq	600(%rip), %rax
100033ba1:	48 89 46 10	movq	%rax, 16(%rsi)
100033ba5:	48 8d 05 c4 76 02 00	leaq	161476(%rip), %rax
100033bac:	48 89 46 18	movq	%rax, 24(%rsi)
100033bb0:	4c 89 66 20	movq	%r12, 32(%rsi)
100033bb4:	48 89 df	movq	%rbx, %rdi
100033bb7:	e8 e4 dd 00 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
100033bbc:	48 8d 75 a8	leaq	-88(%rbp), %rsi
100033bc0:	4c 89 3e	movq	%r15, (%rsi)
100033bc3:	4c 89 6e 08	movq	%r13, 8(%rsi)
100033bc7:	48 8d 05 39 02 00 00	leaq	569(%rip), %rax
100033bce:	48 89 46 10	movq	%rax, 16(%rsi)
100033bd2:	48 8d 05 b7 76 02 00	leaq	161463(%rip), %rax
100033bd9:	48 89 46 18	movq	%rax, 24(%rsi)
100033bdd:	48 89 5e 20	movq	%rbx, 32(%rsi)
100033be1:	48 89 df	movq	%rbx, %rdi
100033be4:	e8 c3 dd 00 00	callq	0x1000419ac ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler
100033be9:	48 89 df	movq	%rbx, %rdi
100033bec:	e8 d1 dc 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100033bf1:	49 89 5c 24 08	movq	%rbx, 8(%r12)
100033bf6:	31 db	xorl	%ebx, %ebx
100033bf8:	eb 46	jmp	0x100033c40
100033bfa:	85 c0	testl	%eax, %eax
100033bfc:	74 57	je	0x100033c55
100033bfe:	89 df	movl	%ebx, %edi
100033c00:	31 f6	xorl	%esi, %esi
100033c02:	31 d2	xorl	%edx, %edx
100033c04:	e8 45 61 fd ff	callq	0x100009d4e
100033c09:	85 c0	testl	%eax, %eax
100033c0b:	75 56	jne	0x100033c63
100033c0d:	4d 8b 3f	movq	(%r15), %r15
100033c10:	bb 0c 00 00 00	movl	$12, %ebx
100033c15:	bf 0c 00 00 00	movl	$12, %edi
100033c1a:	e8 ef e4 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100033c1f:	48 8d 15 a9 d2 01 00	leaq	119465(%rip), %rdx ## literal pool for: "Failed to create a job monitor. error = %d: %s"
100033c26:	45 31 e4	xorl	%r12d, %r12d
100033c29:	4c 89 ff	movq	%r15, %rdi
100033c2c:	be 03 00 00 00	movl	$3, %esi
100033c31:	b9 0c 00 00 00	movl	$12, %ecx
100033c36:	49 89 c0	movq	%rax, %r8
100033c39:	31 c0	xorl	%eax, %eax
100033c3b:	e8 7a 23 fe ff	callq	0x100015fba
100033c40:	41 89 1e	movl	%ebx, (%r14)
100033c43:	4c 89 e0	movq	%r12, %rax
100033c46:	48 83 c4 58	addq	$88, %rsp
100033c4a:	5b	popq	%rbx
100033c4b:	41 5c	popq	%r12
100033c4d:	41 5d	popq	%r13
100033c4f:	41 5e	popq	%r14
100033c51:	41 5f	popq	%r15
100033c53:	5d	popq	%rbp
100033c54:	c3	retq
100033c55:	31 ff	xorl	%edi, %edi
100033c57:	e8 46 db 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100033c5c:	eb a0	jmp	0x100033bfe
100033c5e:	e8 ed d0 00 00	callq	0x100040d50
100033c63:	89 c7	movl	%eax, %edi
100033c65:	e8 d0 d0 00 00	callq	0x100040d3a
100033c6a:	55	pushq	%rbp
100033c6b:	48 89 e5	movq	%rsp, %rbp
100033c6e:	41 57	pushq	%r15
100033c70:	41 56	pushq	%r14
100033c72:	41 55	pushq	%r13
100033c74:	41 54	pushq	%r12
100033c76:	53	pushq	%rbx
100033c77:	50	pushq	%rax
100033c78:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
100033c7d:	0f 85 03 01 00 00	jne	0x100033d86
100033c83:	49 89 fd	movq	%rdi, %r13
100033c86:	83 7f 08 01	cmpl	$1, 8(%rdi)
100033c8a:	0f 84 fb 00 00 00	je	0x100033d8b
100033c90:	4d 8b 75 00	movq	(%r13), %r14
100033c94:	49 89 75 40	movq	%rsi, 64(%r13)
100033c98:	4c 89 f7	movq	%r14, %rdi
100033c9b:	be 19 00 00 00	movl	$25, %esi
100033ca0:	e8 29 ec fd ff	callq	0x1000128ce
100033ca5:	49 8b 5d 00	movq	(%r13), %rbx
100033ca9:	48 89 df	movq	%rbx, %rdi
100033cac:	e8 92 04 fd ff	callq	0x100004143
100033cb1:	41 bf 89 00 00 00	movl	$137, %r15d
100033cb7:	84 c0	testb	%al, %al
100033cb9:	75 38	jne	0x100033cf3
100033cbb:	48 89 df	movq	%rbx, %rdi
100033cbe:	be 09 00 00 00	movl	$9, %esi
100033cc3:	e8 d4 70 fe ff	callq	0x10001ad9c
100033cc8:	45 31 ff	xorl	%r15d, %r15d
100033ccb:	83 f8 24	cmpl	$36, %eax
100033cce:	44 0f 45 f8	cmovnel	%eax, %r15d
100033cd2:	45 85 ff	testl	%r15d, %r15d
100033cd5:	74 7c	je	0x100033d53
100033cd7:	41 83 ff 25	cmpl	$37, %r15d
100033cdb:	75 16	jne	0x100033cf3
100033cdd:	49 8b 7d 00	movq	(%r13), %rdi
100033ce1:	e8 1b 7b fe ff	callq	0x10001b801
100033ce6:	45 31 ff	xorl	%r15d, %r15d
100033ce9:	85 c0	testl	%eax, %eax
100033ceb:	75 66	jne	0x100033d53
100033ced:	41 bf 25 00 00 00	movl	$37, %r15d
100033cf3:	49 83 7d 40 00	cmpq	$0, 64(%r13)
100033cf8:	74 59	je	0x100033d53
100033cfa:	44 89 ff	movl	%r15d, %edi
100033cfd:	e8 0c e4 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100033d02:	48 8d 15 f5 d1 01 00	leaq	119285(%rip), %rdx ## literal pool for: "Start job failed: error = %d: %s"
100033d09:	4c 89 f7	movq	%r14, %rdi
100033d0c:	be 03 00 00 00	movl	$3, %esi
100033d11:	44 89 f9	movl	%r15d, %ecx
100033d14:	49 89 c0	movq	%rax, %r8
100033d17:	31 c0	xorl	%eax, %eax
100033d19:	e8 9c 22 fe ff	callq	0x100015fba
100033d1e:	4d 8b 65 40	movq	64(%r13), %r12
100033d22:	49 63 d7	movslq	%r15d, %rdx
100033d25:	48 8d 35 4b 72 01 00	leaq	94795(%rip), %rsi ## literal pool for: "error"
100033d2c:	4c 89 e7	movq	%r12, %rdi
100033d2f:	e8 50 e3 00 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100033d34:	4c 89 e7	movq	%r12, %rdi
100033d37:	e8 b4 e3 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
100033d3c:	a9 df ff ff ff	testl	$4294967263, %eax
100033d41:	75 2f	jne	0x100033d72
100033d43:	49 c7 45 40 00 00 00 00	movq	$0, 64(%r13)
100033d4b:	4c 89 e7	movq	%r12, %rdi
100033d4e:	e8 a9 e3 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100033d53:	4c 89 f7	movq	%r14, %rdi
100033d56:	be 19 00 00 00	movl	$25, %esi
100033d5b:	e8 f1 eb fd ff	callq	0x100012951
100033d60:	44 89 f8	movl	%r15d, %eax
100033d63:	48 83 c4 08	addq	$8, %rsp
100033d67:	5b	popq	%rbx
100033d68:	41 5c	popq	%r12
100033d6a:	41 5d	popq	%r13
100033d6c:	41 5e	popq	%r14
100033d6e:	41 5f	popq	%r15
100033d70:	5d	popq	%rbp
100033d71:	c3	retq
100033d72:	48 63 d0	movslq	%eax, %rdx
100033d75:	48 8d 3d 8b 45 fe ff	leaq	-113269(%rip), %rdi
100033d7c:	4c 89 f6	movq	%r14, %rsi
100033d7f:	e8 24 da 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100033d84:	eb bd	jmp	0x100033d43
100033d86:	e8 ef cf 00 00	callq	0x100040d7a
100033d8b:	e8 d5 cf 00 00	callq	0x100040d65
100033d90:	55	pushq	%rbp
100033d91:	48 89 e5	movq	%rsp, %rbp
100033d94:	41 56	pushq	%r14
100033d96:	53	pushq	%rbx
100033d97:	48 85 f6	testq	%rsi, %rsi
100033d9a:	74 58	je	0x100033df4
100033d9c:	49 89 f6	movq	%rsi, %r14
100033d9f:	e8 83 13 00 00	callq	0x100035127
100033da4:	48 85 c0	testq	%rax, %rax
100033da7:	74 19	je	0x100033dc2
100033da9:	48 89 c3	movq	%rax, %rbx
100033dac:	48 89 c7	movq	%rax, %rdi
100033daf:	e8 12 e3 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100033db4:	48 3b 05 45 43 02 00	cmpq	148293(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100033dbb:	74 0a	je	0x100033dc7
100033dbd:	45 31 f6	xorl	%r14d, %r14d
100033dc0:	eb 22	jmp	0x100033de4
100033dc2:	45 31 f6	xorl	%r14d, %r14d
100033dc5:	eb 25	jmp	0x100033dec
100033dc7:	48 8d 35 2d 41 01 00	leaq	82221(%rip), %rsi ## literal pool for: "com.apple.private.xpc.launchd.job-manager"
100033dce:	48 89 df	movq	%rbx, %rdi
100033dd1:	e8 84 e2 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100033dd6:	48 89 c7	movq	%rax, %rdi
100033dd9:	4c 89 f6	movq	%r14, %rsi
100033ddc:	e8 52 b5 fd ff	callq	0x10000f333
100033de1:	41 89 c6	movl	%eax, %r14d
100033de4:	48 89 df	movq	%rbx, %rdi
100033de7:	e8 10 e3 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100033dec:	44 89 f0	movl	%r14d, %eax
100033def:	5b	popq	%rbx
100033df0:	41 5e	popq	%r14
100033df2:	5d	popq	%rbp
100033df3:	c3	retq
100033df4:	e8 96 cf 00 00	callq	0x100040d8f
100033df9:	55	pushq	%rbp
100033dfa:	48 89 e5	movq	%rsp, %rbp
100033dfd:	48 8b 7f 20	movq	32(%rdi), %rdi
100033e01:	5d	popq	%rbp
100033e02:	e9 47 ec ff ff	jmp	0x100032a4e
100033e07:	55	pushq	%rbp
100033e08:	48 89 e5	movq	%rsp, %rbp
100033e0b:	53	pushq	%rbx
100033e0c:	50	pushq	%rax
100033e0d:	48 89 fb	movq	%rdi, %rbx
100033e10:	48 8b 7f 20	movq	32(%rdi), %rdi
100033e14:	e8 75 db 00 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
100033e19:	89 c7	movl	%eax, %edi
100033e1b:	e8 19 5f fd ff	callq	0x100009d39
100033e20:	85 c0	testl	%eax, %eax
100033e22:	75 0f	jne	0x100033e33
100033e24:	48 8b 7b 20	movq	32(%rbx), %rdi
100033e28:	48 83 c4 08	addq	$8, %rsp
100033e2c:	5b	popq	%rbx
100033e2d:	5d	popq	%rbp
100033e2e:	e9 25 db 00 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
100033e33:	89 c7	movl	%eax, %edi
100033e35:	e8 6a cf 00 00	callq	0x100040da4
100033e3a:	55	pushq	%rbp
100033e3b:	48 89 e5	movq	%rsp, %rbp
100033e3e:	41 57	pushq	%r15
100033e40:	41 56	pushq	%r14
100033e42:	41 54	pushq	%r12
100033e44:	53	pushq	%rbx
100033e45:	48 85 f6	testq	%rsi, %rsi
100033e48:	74 60	je	0x100033eaa
100033e4a:	49 89 f6	movq	%rsi, %r14
100033e4d:	48 8d 35 f1 d0 01 00	leaq	119025(%rip), %rsi ## literal pool for: "job-handle"
100033e54:	e8 0d e2 00 00	callq	0x100042066 ## symbol stub for: _xpc_dictionary_get_uuid
100033e59:	48 85 c0	testq	%rax, %rax
100033e5c:	74 30	je	0x100033e8e
100033e5e:	48 8b 1d 2b f8 02 00	movq	194603(%rip), %rbx
100033e65:	41 bc 03 00 00 00	movl	$3, %r12d
100033e6b:	48 85 db	testq	%rbx, %rbx
100033e6e:	74 24	je	0x100033e94
100033e70:	49 89 c7	movq	%rax, %r15
100033e73:	48 8d 7b 10	leaq	16(%rbx), %rdi
100033e77:	4c 89 fe	movq	%r15, %rsi
100033e7a:	e8 6d e0 00 00	callq	0x100041eec ## symbol stub for: _uuid_compare
100033e7f:	85 c0	testl	%eax, %eax
100033e81:	74 22	je	0x100033ea5
100033e83:	48 8b 5b 20	movq	32(%rbx), %rbx
100033e87:	48 85 db	testq	%rbx, %rbx
100033e8a:	75 e7	jne	0x100033e73
100033e8c:	eb 06	jmp	0x100033e94
100033e8e:	41 bc 16 00 00 00	movl	$22, %r12d
100033e94:	31 db	xorl	%ebx, %ebx
100033e96:	45 89 26	movl	%r12d, (%r14)
100033e99:	48 89 d8	movq	%rbx, %rax
100033e9c:	5b	popq	%rbx
100033e9d:	41 5c	popq	%r12
100033e9f:	41 5e	popq	%r14
100033ea1:	41 5f	popq	%r15
100033ea3:	5d	popq	%rbp
100033ea4:	c3	retq
100033ea5:	45 31 e4	xorl	%r12d, %r12d
100033ea8:	eb ec	jmp	0x100033e96
100033eaa:	e8 0b cf 00 00	callq	0x100040dba
100033eaf:	55	pushq	%rbp
100033eb0:	48 89 e5	movq	%rsp, %rbp
100033eb3:	41 57	pushq	%r15
100033eb5:	41 56	pushq	%r14
100033eb7:	53	pushq	%rbx
100033eb8:	50	pushq	%rax
100033eb9:	49 89 f7	movq	%rsi, %r15
100033ebc:	48 89 fb	movq	%rdi, %rbx
100033ebf:	4c 8b 37	movq	(%rdi), %r14
100033ec2:	8b 57 08	movl	8(%rdi), %edx
100033ec5:	48 8d 35 84 d0 01 00	leaq	118916(%rip), %rsi ## literal pool for: "job-state"
100033ecc:	4c 89 ff	movq	%r15, %rdi
100033ecf:	e8 ce e1 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033ed4:	8b 43 08	movl	8(%rbx), %eax
100033ed7:	ff c8	decl	%eax
100033ed9:	83 f8 03	cmpl	$3, %eax
100033edc:	77 27	ja	0x100033f05
100033ede:	48 8d 0d 0b 01 00 00	leaq	267(%rip), %rcx
100033ee5:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
100033ee9:	48 01 c8	addq	%rcx, %rax
100033eec:	ff e0	jmpq	*%rax
100033eee:	4c 89 f7	movq	%r14, %rdi
100033ef1:	e8 0b 79 fe ff	callq	0x10001b801
100033ef6:	48 63 d0	movslq	%eax, %rdx
100033ef9:	48 8d 35 95 69 01 00	leaq	92565(%rip), %rsi ## literal pool for: "pid"
100033f00:	e9 84 00 00 00	jmp	0x100033f89
100033f05:	48 83 c4 08	addq	$8, %rsp
100033f09:	5b	popq	%rbx
100033f0a:	41 5e	popq	%r14
100033f0c:	41 5f	popq	%r15
100033f0e:	5d	popq	%rbp
100033f0f:	c3	retq
100033f10:	48 63 53 0c	movslq	12(%rbx), %rdx
100033f14:	48 8d 35 3f d0 01 00	leaq	118847(%rip), %rsi ## literal pool for: "spawn-error"
100033f1b:	eb 6c	jmp	0x100033f89
100033f1d:	4c 89 f7	movq	%r14, %rdi
100033f20:	e8 47 7f fe ff	callq	0x10001be6c
100033f25:	49 89 c6	movq	%rax, %r14
100033f28:	48 89 c7	movq	%rax, %rdi
100033f2b:	e8 46 55 00 00	callq	0x100039476
100033f30:	84 c0	testb	%al, %al
100033f32:	74 67	je	0x100033f9b
100033f34:	49 63 56 1c	movslq	28(%r14), %rdx
100033f38:	48 8d 35 27 d0 01 00	leaq	118823(%rip), %rsi ## literal pool for: "wait4-status"
100033f3f:	4c 89 ff	movq	%r15, %rdi
100033f42:	e8 3d e1 00 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100033f47:	41 8b 56 04	movl	4(%r14), %edx
100033f4b:	48 8d 35 21 d0 01 00	leaq	118817(%rip), %rsi ## literal pool for: "os-reason-ns"
100033f52:	4c 89 ff	movq	%r15, %rdi
100033f55:	e8 48 e1 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033f5a:	49 8b 56 08	movq	8(%r14), %rdx
100033f5e:	48 8d 35 1b d0 01 00	leaq	118811(%rip), %rsi ## literal pool for: "os-reason-code"
100033f65:	4c 89 ff	movq	%r15, %rdi
100033f68:	e8 35 e1 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033f6d:	49 8b 56 10	movq	16(%r14), %rdx
100033f71:	48 8d 35 17 d0 01 00	leaq	118807(%rip), %rsi ## literal pool for: "os-reason-flags"
100033f78:	4c 89 ff	movq	%r15, %rdi
100033f7b:	eb 63	jmp	0x100033fe0
100033f7d:	48 8d 35 f3 6f 01 00	leaq	94195(%rip), %rsi ## literal pool for: "error"
100033f84:	ba 71 00 00 00	movl	$113, %edx
100033f89:	4c 89 ff	movq	%r15, %rdi
100033f8c:	48 83 c4 08	addq	$8, %rsp
100033f90:	5b	popq	%rbx
100033f91:	41 5e	popq	%r14
100033f93:	41 5f	popq	%r15
100033f95:	5d	popq	%rbp
100033f96:	e9 e9 e0 00 00	jmp	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100033f9b:	48 8d 35 c4 cf 01 00	leaq	118724(%rip), %rsi ## literal pool for: "wait4-status"
100033fa2:	4c 89 ff	movq	%r15, %rdi
100033fa5:	31 d2	xorl	%edx, %edx
100033fa7:	e8 d8 e0 00 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
100033fac:	48 8d 35 c0 cf 01 00	leaq	118720(%rip), %rsi ## literal pool for: "os-reason-ns"
100033fb3:	ba 07 00 00 00	movl	$7, %edx
100033fb8:	4c 89 ff	movq	%r15, %rdi
100033fbb:	e8 e2 e0 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033fc0:	48 8d 35 b9 cf 01 00	leaq	118713(%rip), %rsi ## literal pool for: "os-reason-code"
100033fc7:	ba 05 00 00 00	movl	$5, %edx
100033fcc:	4c 89 ff	movq	%r15, %rdi
100033fcf:	e8 ce e0 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033fd4:	48 8d 35 b4 cf 01 00	leaq	118708(%rip), %rsi ## literal pool for: "os-reason-flags"
100033fdb:	4c 89 ff	movq	%r15, %rdi
100033fde:	31 d2	xorl	%edx, %edx
100033fe0:	48 83 c4 08	addq	$8, %rsp
100033fe4:	5b	popq	%rbx
100033fe5:	41 5e	popq	%r14
100033fe7:	41 5f	popq	%r15
100033fe9:	5d	popq	%rbp
100033fea:	e9 b3 e0 00 00	jmp	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100033fef:	90	nop
	.byte 0xfe #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100033ff3:	ff 20	jmpq	*(%rax)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100033ff7:	ff 2d ff ff ff 8d	ljmpl	*-1912602625(%rip)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100033fff:	ff 55 48	callq	*72(%rbp)
100034002:	89 e5	movl	%esp, %ebp
100034004:	41 56	pushq	%r14
100034006:	53	pushq	%rbx
100034007:	48 83 bf 50 01 00 00 00	cmpq	$0, 336(%rdi)
10003400f:	75 39	jne	0x10003404a
100034011:	48 89 fb	movq	%rdi, %rbx
100034014:	e8 5e f8 ff ff	callq	0x100033877
100034019:	49 89 c6	movq	%rax, %r14
10003401c:	8b 83 60 01 00 00	movl	352(%rbx), %eax
100034022:	41 89 46 0c	movl	%eax, 12(%r14)
100034026:	8b b3 58 01 00 00	movl	344(%rbx), %esi
10003402c:	85 f6	testl	%esi, %esi
10003402e:	74 08	je	0x100034038
100034030:	4c 89 f7	movq	%r14, %rdi
100034033:	e8 ef f6 ff ff	callq	0x100033727
100034038:	c7 83 58 01 00 00 00 00 00 00	movl	$0, 344(%rbx)
100034042:	4c 89 f0	movq	%r14, %rax
100034045:	5b	popq	%rbx
100034046:	41 5e	popq	%r14
100034048:	5d	popq	%rbp
100034049:	c3	retq
10003404a:	e8 80 cd 00 00	callq	0x100040dcf
10003404f:	55	pushq	%rbp
100034050:	48 89 e5	movq	%rsp, %rbp
100034053:	41 57	pushq	%r15
100034055:	41 56	pushq	%r14
100034057:	41 55	pushq	%r13
100034059:	41 54	pushq	%r12
10003405b:	53	pushq	%rbx
10003405c:	50	pushq	%rax
10003405d:	49 89 ff	movq	%rdi, %r15
100034060:	48 85 f6	testq	%rsi, %rsi
100034063:	74 32	je	0x100034097
100034065:	48 89 f3	movq	%rsi, %rbx
100034068:	48 89 f7	movq	%rsi, %rdi
10003406b:	e8 07 f8 ff ff	callq	0x100033877
100034070:	4d 8d 6f 20	leaq	32(%r15), %r13
100034074:	49 8b 7f 20	movq	32(%r15), %rdi
100034078:	48 8d 50 10	leaq	16(%rax), %rdx
10003407c:	48 8d 35 c2 ce 01 00	leaq	118466(%rip), %rsi ## literal pool for: "job-handle"
100034083:	e8 20 e0 00 00	callq	0x1000420a8 ## symbol stub for: _xpc_dictionary_set_uuid
100034088:	48 89 df	movq	%rbx, %rdi
10003408b:	be 09 00 00 00	movl	$9, %esi
100034090:	e8 43 a1 fe ff	callq	0x10001e1d8
100034095:	eb 51	jmp	0x1000340e8
100034097:	41 89 d6	movl	%edx, %r14d
10003409a:	85 d2	testl	%edx, %edx
10003409c:	0f 84 8c 00 00 00	je	0x10003412e
1000340a2:	4d 8d 6f 20	leaq	32(%r15), %r13
1000340a6:	49 8b 7f 20	movq	32(%r15), %rdi
1000340aa:	49 63 d6	movslq	%r14d, %rdx
1000340ad:	48 8d 35 c3 6e 01 00	leaq	93891(%rip), %rsi ## literal pool for: "error"
1000340b4:	e8 cb df 00 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
1000340b9:	49 8b 5f 28	movq	40(%r15), %rbx
1000340bd:	4d 8b 67 30	movq	48(%r15), %r12
1000340c1:	44 89 f7	movl	%r14d, %edi
1000340c4:	e8 45 e0 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000340c9:	48 8d 15 b9 cf 01 00	leaq	118713(%rip), %rdx ## literal pool for: "Could not submit extension %s: %d - %s"
1000340d0:	48 89 df	movq	%rbx, %rdi
1000340d3:	be 04 00 00 00	movl	$4, %esi
1000340d8:	4c 89 e1	movq	%r12, %rcx
1000340db:	45 89 f0	movl	%r14d, %r8d
1000340de:	49 89 c1	movq	%rax, %r9
1000340e1:	31 c0	xorl	%eax, %eax
1000340e3:	e8 41 c3 fe ff	callq	0x100020429
1000340e8:	49 8b 7d 00	movq	(%r13), %rdi
1000340ec:	e8 ff df 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
1000340f1:	a9 df ff ff ff	testl	$4294967263, %eax
1000340f6:	75 21	jne	0x100034119
1000340f8:	49 8b 7f 20	movq	32(%r15), %rdi
1000340fc:	e8 fb df 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100034101:	49 8b 7f 30	movq	48(%r15), %rdi
100034105:	e8 26 d9 00 00	callq	0x100041a30 ## symbol stub for: _free
10003410a:	48 83 c4 08	addq	$8, %rsp
10003410e:	5b	popq	%rbx
10003410f:	41 5c	popq	%r12
100034111:	41 5d	popq	%r13
100034113:	41 5e	popq	%r14
100034115:	41 5f	popq	%r15
100034117:	5d	popq	%rbp
100034118:	c3	retq
100034119:	48 63 d0	movslq	%eax, %rdx
10003411c:	49 8b 77 28	movq	40(%r15), %rsi
100034120:	48 8d 3d e1 c2 fe ff	leaq	-81183(%rip), %rdi
100034127:	e8 7c d6 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003412c:	eb ca	jmp	0x1000340f8
10003412e:	e8 b1 cc 00 00	callq	0x100040de4
100034133:	48 85 ff	testq	%rdi, %rdi
100034136:	74 06	je	0x10003413e
100034138:	48 89 f8	movq	%rdi, %rax
10003413b:	31 d2	xorl	%edx, %edx
10003413d:	c3	retq
10003413e:	55	pushq	%rbp
10003413f:	48 89 e5	movq	%rsp, %rbp
100034142:	e8 b2 cc 00 00	callq	0x100040df9
100034147:	85 ff	testl	%edi, %edi
100034149:	74 05	je	0x100034150
10003414b:	31 c0	xorl	%eax, %eax
10003414d:	89 fa	movl	%edi, %edx
10003414f:	c3	retq
100034150:	55	pushq	%rbp
100034151:	48 89 e5	movq	%rsp, %rbp
100034154:	e8 b2 cc 00 00	callq	0x100040e0b
100034159:	55	pushq	%rbp
10003415a:	48 89 e5	movq	%rsp, %rbp
10003415d:	41 56	pushq	%r14
10003415f:	53	pushq	%rbx
100034160:	48 81 ec 10 02 00 00	subq	$528, %rsp
100034167:	48 8b 05 ba 3e 02 00	movq	147130(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003416e:	48 8b 00	movq	(%rax), %rax
100034171:	48 89 45 e8	movq	%rax, -24(%rbp)
100034175:	41 be 52 4a 00 c1	movl	$3238021714, %r14d
10003417b:	48 8d 9d e0 fe ff ff	leaq	-288(%rbp), %rbx
100034182:	be 04 01 00 00	movl	$260, %esi
100034187:	48 89 df	movq	%rbx, %rdi
10003418a:	e8 cb d5 00 00	callq	0x10004175a ## symbol stub for: ___bzero
10003418f:	c6 03 01	movb	$1, (%rbx)
100034192:	66 c7 43 02 40 00	movw	$64, 2(%rbx)
100034198:	49 8d b6 fe ff 03 00	leaq	262142(%r14), %rsi
10003419f:	48 8d 3d ee 87 01 00	leaq	100334(%rip), %rdi ## literal pool for: "/System/Volumes/macOS"
1000341a6:	48 89 da	movq	%rbx, %rdx
1000341a9:	31 c9	xorl	%ecx, %ecx
1000341ab:	e8 8c d8 00 00	callq	0x100041a3c ## symbol stub for: _fsctl
1000341b0:	85 c0	testl	%eax, %eax
1000341b2:	74 13	je	0x1000341c7
1000341b4:	e8 a7 d5 00 00	callq	0x100041760 ## symbol stub for: ___error
1000341b9:	8b 10	movl	(%rax), %edx
1000341bb:	48 8d 35 1c cf 01 00	leaq	118556(%rip), %rsi ## literal pool for: "fsctl(APFSIOC_GET_DEV_BY_ROLE) error: %d"
1000341c2:	e9 a6 00 00 00	jmp	0x10003426d
1000341c7:	0f 28 05 b2 f0 00 00	movaps	61618(%rip), %xmm0
1000341ce:	48 8d 9d e0 fd ff ff	leaq	-544(%rbp), %rbx
1000341d5:	0f 29 83 f0 00 00 00	movaps	%xmm0, 240(%rbx)
1000341dc:	0f 29 83 e0 00 00 00	movaps	%xmm0, 224(%rbx)
1000341e3:	0f 29 83 d0 00 00 00	movaps	%xmm0, 208(%rbx)
1000341ea:	0f 29 83 c0 00 00 00	movaps	%xmm0, 192(%rbx)
1000341f1:	0f 29 83 b0 00 00 00	movaps	%xmm0, 176(%rbx)
1000341f8:	0f 29 83 a0 00 00 00	movaps	%xmm0, 160(%rbx)
1000341ff:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
100034206:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
10003420d:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
100034211:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
100034215:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
100034219:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
10003421d:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100034221:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100034225:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100034229:	0f 29 03	movaps	%xmm0, (%rbx)
10003422c:	48 8d b5 e4 fe ff ff	leaq	-284(%rbp), %rsi
100034233:	ba ff 00 00 00	movl	$255, %edx
100034238:	b9 ff 00 00 00	movl	$255, %ecx
10003423d:	48 89 df	movq	%rbx, %rdi
100034240:	e8 33 d5 00 00	callq	0x100041778 ## symbol stub for: ___strlcpy_chk
100034245:	48 8d 3d 43 33 01 00	leaq	78659(%rip), %rdi ## literal pool for: "/"
10003424c:	be 52 4a 00 c1	movl	$3238021714, %esi
100034251:	48 89 da	movq	%rbx, %rdx
100034254:	31 c9	xorl	%ecx, %ecx
100034256:	e8 e1 d7 00 00	callq	0x100041a3c ## symbol stub for: _fsctl
10003425b:	85 c0	testl	%eax, %eax
10003425d:	74 3b	je	0x10003429a
10003425f:	e8 fc d4 00 00	callq	0x100041760 ## symbol stub for: ___error
100034264:	8b 10	movl	(%rax), %edx
100034266:	48 8d 35 9a ce 01 00	leaq	118426(%rip), %rsi ## literal pool for: "fsctl(APFSIOC_IS_VOL_LOCKED) error: %d"
10003426d:	31 db	xorl	%ebx, %ebx
10003426f:	bf 03 00 01 00	movl	$65539, %edi
100034274:	31 c0	xorl	%eax, %eax
100034276:	e8 4d 13 00 00	callq	0x1000355c8
10003427b:	48 8b 05 a6 3d 02 00	movq	146854(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100034282:	48 8b 00	movq	(%rax), %rax
100034285:	48 3b 45 e8	cmpq	-24(%rbp), %rax
100034289:	75 4d	jne	0x1000342d8
10003428b:	48 89 d8	movq	%rbx, %rax
10003428e:	48 81 c4 10 02 00 00	addq	$528, %rsp
100034295:	5b	popq	%rbx
100034296:	41 5e	popq	%r14
100034298:	5d	popq	%rbp
100034299:	c3	retq
10003429a:	80 bd df fe ff ff 00	cmpb	$0, -289(%rbp)
1000342a1:	48 8d 05 9f ce 01 00	leaq	118431(%rip), %rax ## literal pool for: "unlocked"
1000342a8:	48 8d 15 91 ce 01 00	leaq	118417(%rip), %rdx ## literal pool for: "locked"
1000342af:	48 0f 44 d0	cmoveq	%rax, %rdx
1000342b3:	48 8d 35 74 ce 01 00	leaq	118388(%rip), %rsi ## literal pool for: "Data Volume is %s"
1000342ba:	bf 05 00 01 00	movl	$65541, %edi
1000342bf:	31 c0	xorl	%eax, %eax
1000342c1:	e8 02 13 00 00	callq	0x1000355c8
1000342c6:	80 bd df fe ff ff 01	cmpb	$1, -289(%rbp)
1000342cd:	bb 02 00 00 00	movl	$2, %ebx
1000342d2:	48 83 db 00	sbbq	$0, %rbx
1000342d6:	eb a3	jmp	0x10003427b
1000342d8:	e8 95 d4 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000342dd:	55	pushq	%rbp
1000342de:	48 89 e5	movq	%rsp, %rbp
1000342e1:	41 56	pushq	%r14
1000342e3:	53	pushq	%rbx
1000342e4:	48 83 ec 10	subq	$16, %rsp
1000342e8:	48 89 fb	movq	%rdi, %rbx
1000342eb:	48 8d 75 e8	leaq	-24(%rbp), %rsi
1000342ef:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
1000342f6:	48 8d 3d 53 ce 01 00	leaq	118355(%rip), %rdi ## literal pool for: "kern.apfsprebootuuid"
1000342fd:	e8 c3 05 00 00	callq	0x1000348c5
100034302:	48 85 c0	testq	%rax, %rax
100034305:	74 09	je	0x100034310
100034307:	48 8b 75 e8	movq	-24(%rbp), %rsi
10003430b:	48 85 f6	testq	%rsi, %rsi
10003430e:	75 38	jne	0x100034348
100034310:	48 8d 35 4e ce 01 00	leaq	118350(%rip), %rsi ## literal pool for: "Unable to get apfsprebootuuid"
100034317:	bf 04 00 01 00	movl	$65540, %edi
10003431c:	31 c0	xorl	%eax, %eax
10003431e:	e8 a5 12 00 00	callq	0x1000355c8
100034323:	48 8d 75 e8	leaq	-24(%rbp), %rsi
100034327:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10003432e:	48 8d 3d 4e ce 01 00	leaq	118350(%rip), %rdi ## literal pool for: "kern.bootuuid"
100034335:	e8 8b 05 00 00	callq	0x1000348c5
10003433a:	48 85 c0	testq	%rax, %rax
10003433d:	74 5f	je	0x10003439e
10003433f:	48 8b 75 e8	movq	-24(%rbp), %rsi
100034343:	48 85 f6	testq	%rsi, %rsi
100034346:	74 56	je	0x10003439e
100034348:	48 8d 3d 64 ce 01 00	leaq	118372(%rip), %rdi ## literal pool for: "/System/Volumes/Preboot/%s/%s"
10003434f:	48 89 da	movq	%rbx, %rdx
100034352:	31 c0	xorl	%eax, %eax
100034354:	e8 dc ad fd ff	callq	0x10000f135
100034359:	48 89 c3	movq	%rax, %rbx
10003435c:	48 89 c7	movq	%rax, %rdi
10003435f:	e8 c9 e5 ff ff	callq	0x10003292d
100034364:	41 89 c6	movl	%eax, %r14d
100034367:	48 8d 05 63 ce 01 00	leaq	118371(%rip), %rax ## literal pool for: "Found cookie: %s"
10003436e:	48 8d 35 6d ce 01 00	leaq	118381(%rip), %rsi ## literal pool for: "No cookie: %s"
100034375:	45 84 f6	testb	%r14b, %r14b
100034378:	48 0f 45 f0	cmovneq	%rax, %rsi
10003437c:	bf 05 00 01 00	movl	$65541, %edi
100034381:	48 89 da	movq	%rbx, %rdx
100034384:	31 c0	xorl	%eax, %eax
100034386:	e8 3d 12 00 00	callq	0x1000355c8
10003438b:	48 8b 7d e8	movq	-24(%rbp), %rdi
10003438f:	e8 9c d6 00 00	callq	0x100041a30 ## symbol stub for: _free
100034394:	48 89 df	movq	%rbx, %rdi
100034397:	e8 94 d6 00 00	callq	0x100041a30 ## symbol stub for: _free
10003439c:	eb 16	jmp	0x1000343b4
10003439e:	48 8d 35 ec cd 01 00	leaq	118252(%rip), %rsi ## literal pool for: "Unable to get bootuuid. Giving up"
1000343a5:	45 31 f6	xorl	%r14d, %r14d
1000343a8:	bf 04 00 01 00	movl	$65540, %edi
1000343ad:	31 c0	xorl	%eax, %eax
1000343af:	e8 14 12 00 00	callq	0x1000355c8
1000343b4:	44 89 f0	movl	%r14d, %eax
1000343b7:	48 83 c4 10	addq	$16, %rsp
1000343bb:	5b	popq	%rbx
1000343bc:	41 5e	popq	%r14
1000343be:	5d	popq	%rbp
1000343bf:	c3	retq
1000343c0:	48 85 ff	testq	%rdi, %rdi
1000343c3:	74 06	je	0x1000343cb
1000343c5:	48 89 f8	movq	%rdi, %rax
1000343c8:	31 d2	xorl	%edx, %edx
1000343ca:	c3	retq
1000343cb:	55	pushq	%rbp
1000343cc:	48 89 e5	movq	%rsp, %rbp
1000343cf:	e8 49 ca 00 00	callq	0x100040e1d
1000343d4:	85 ff	testl	%edi, %edi
1000343d6:	74 05	je	0x1000343dd
1000343d8:	31 c0	xorl	%eax, %eax
1000343da:	89 fa	movl	%edi, %edx
1000343dc:	c3	retq
1000343dd:	55	pushq	%rbp
1000343de:	48 89 e5	movq	%rsp, %rbp
1000343e1:	e8 49 ca 00 00	callq	0x100040e2f
1000343e6:	48 85 ff	testq	%rdi, %rdi
1000343e9:	74 06	je	0x1000343f1
1000343eb:	48 89 f8	movq	%rdi, %rax
1000343ee:	31 d2	xorl	%edx, %edx
1000343f0:	c3	retq
1000343f1:	55	pushq	%rbp
1000343f2:	48 89 e5	movq	%rsp, %rbp
1000343f5:	e8 47 ca 00 00	callq	0x100040e41
1000343fa:	85 ff	testl	%edi, %edi
1000343fc:	74 05	je	0x100034403
1000343fe:	31 c0	xorl	%eax, %eax
100034400:	89 fa	movl	%edi, %edx
100034402:	c3	retq
100034403:	55	pushq	%rbp
100034404:	48 89 e5	movq	%rsp, %rbp
100034407:	e8 47 ca 00 00	callq	0x100040e53
10003440c:	55	pushq	%rbp
10003440d:	48 89 e5	movq	%rsp, %rbp
100034410:	5d	popq	%rbp
100034411:	c3	retq
100034412:	55	pushq	%rbp
100034413:	48 89 e5	movq	%rsp, %rbp
100034416:	41 56	pushq	%r14
100034418:	53	pushq	%rbx
100034419:	48 81 ec d0 00 00 00	subq	$208, %rsp
100034420:	49 89 fe	movq	%rdi, %r14
100034423:	48 8d bd 20 ff ff ff	leaq	-224(%rbp), %rdi
10003442a:	48 89 77 08	movq	%rsi, 8(%rdi)
10003442e:	48 89 57 10	movq	%rdx, 16(%rdi)
100034432:	48 89 4f 18	movq	%rcx, 24(%rdi)
100034436:	4c 89 47 20	movq	%r8, 32(%rdi)
10003443a:	4c 89 4f 28	movq	%r9, 40(%rdi)
10003443e:	84 c0	testb	%al, %al
100034440:	74 29	je	0x10003446b
100034442:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100034449:	0f 29 8d 60 ff ff ff	movaps	%xmm1, -160(%rbp)
100034450:	0f 29 95 70 ff ff ff	movaps	%xmm2, -144(%rbp)
100034457:	0f 29 5d 80	movaps	%xmm3, -128(%rbp)
10003445b:	0f 29 65 90	movaps	%xmm4, -112(%rbp)
10003445f:	0f 29 6d a0	movaps	%xmm5, -96(%rbp)
100034463:	0f 29 75 b0	movaps	%xmm6, -80(%rbp)
100034467:	0f 29 7d c0	movaps	%xmm7, -64(%rbp)
10003446b:	0f 28 05 0e ee 00 00	movaps	60942(%rip), %xmm0
100034472:	48 8d 55 d0	leaq	-48(%rbp), %rdx
100034476:	0f 29 02	movaps	%xmm0, (%rdx)
100034479:	48 89 7a 10	movq	%rdi, 16(%rdx)
10003447d:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
100034487:	48 89 02	movq	%rax, (%rdx)
10003448a:	48 8d 45 10	leaq	16(%rbp), %rax
10003448e:	48 89 42 08	movq	%rax, 8(%rdx)
100034492:	48 8d 5d e8	leaq	-24(%rbp), %rbx
100034496:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10003449d:	48 89 df	movq	%rbx, %rdi
1000344a0:	4c 89 f6	movq	%r14, %rsi
1000344a3:	e8 5c da 00 00	callq	0x100041f04 ## symbol stub for: _vasprintf
1000344a8:	48 83 3b 00	cmpq	$0, (%rbx)
1000344ac:	75 04	jne	0x1000344b2
1000344ae:	4c 89 75 e8	movq	%r14, -24(%rbp)
1000344b2:	48 8b 55 e8	movq	-24(%rbp), %rdx
1000344b6:	be 01 00 00 00	movl	$1, %esi
1000344bb:	bf 07 00 00 00	movl	$7, %edi
1000344c0:	31 c9	xorl	%ecx, %ecx
1000344c2:	e8 11 d3 00 00	callq	0x1000417d8 ## symbol stub for: _abort_with_reason
1000344c7:	55	pushq	%rbp
1000344c8:	48 89 e5	movq	%rsp, %rbp
1000344cb:	41 56	pushq	%r14
1000344cd:	53	pushq	%rbx
1000344ce:	48 81 ec d0 00 00 00	subq	$208, %rsp
1000344d5:	49 89 fe	movq	%rdi, %r14
1000344d8:	48 8d bd 20 ff ff ff	leaq	-224(%rbp), %rdi
1000344df:	48 89 77 08	movq	%rsi, 8(%rdi)
1000344e3:	48 89 57 10	movq	%rdx, 16(%rdi)
1000344e7:	48 89 4f 18	movq	%rcx, 24(%rdi)
1000344eb:	4c 89 47 20	movq	%r8, 32(%rdi)
1000344ef:	4c 89 4f 28	movq	%r9, 40(%rdi)
1000344f3:	84 c0	testb	%al, %al
1000344f5:	74 29	je	0x100034520
1000344f7:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
1000344fe:	0f 29 8d 60 ff ff ff	movaps	%xmm1, -160(%rbp)
100034505:	0f 29 95 70 ff ff ff	movaps	%xmm2, -144(%rbp)
10003450c:	0f 29 5d 80	movaps	%xmm3, -128(%rbp)
100034510:	0f 29 65 90	movaps	%xmm4, -112(%rbp)
100034514:	0f 29 6d a0	movaps	%xmm5, -96(%rbp)
100034518:	0f 29 75 b0	movaps	%xmm6, -80(%rbp)
10003451c:	0f 29 7d c0	movaps	%xmm7, -64(%rbp)
100034520:	0f 28 05 59 ed 00 00	movaps	60761(%rip), %xmm0
100034527:	48 8d 55 d0	leaq	-48(%rbp), %rdx
10003452b:	0f 29 02	movaps	%xmm0, (%rdx)
10003452e:	48 89 7a 10	movq	%rdi, 16(%rdx)
100034532:	48 b8 08 00 00 00 30 00 00 00	movabsq	$206158430216, %rax
10003453c:	48 89 02	movq	%rax, (%rdx)
10003453f:	48 8d 45 10	leaq	16(%rbp), %rax
100034543:	48 89 42 08	movq	%rax, 8(%rdx)
100034547:	48 8d 5d e8	leaq	-24(%rbp), %rbx
10003454b:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100034552:	48 89 df	movq	%rbx, %rdi
100034555:	4c 89 f6	movq	%r14, %rsi
100034558:	e8 a7 d9 00 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10003455d:	48 83 3b 00	cmpq	$0, (%rbx)
100034561:	75 04	jne	0x100034567
100034563:	4c 89 75 e8	movq	%r14, -24(%rbp)
100034567:	48 8b 55 e8	movq	-24(%rbp), %rdx
10003456b:	bf 37 00 00 00	movl	$55, %edi
100034570:	be 00 0c 00 00	movl	$3072, %esi
100034575:	31 c0	xorl	%eax, %eax
100034577:	e8 22 d9 00 00	callq	0x100041e9e ## symbol stub for: _syscall
10003457c:	e8 2d d2 00 00	callq	0x1000417ae ## symbol stub for: __os_avoid_tail_call
100034581:	0f 0b	ud2
100034583:	55	pushq	%rbp
100034584:	48 89 e5	movq	%rsp, %rbp
100034587:	5d	popq	%rbp
100034588:	c3	retq
100034589:	55	pushq	%rbp
10003458a:	48 89 e5	movq	%rsp, %rbp
10003458d:	5d	popq	%rbp
10003458e:	c3	retq
10003458f:	48 85 ff	testq	%rdi, %rdi
100034592:	74 06	je	0x10003459a
100034594:	48 89 f8	movq	%rdi, %rax
100034597:	31 d2	xorl	%edx, %edx
100034599:	c3	retq
10003459a:	55	pushq	%rbp
10003459b:	48 89 e5	movq	%rsp, %rbp
10003459e:	e8 c2 c8 00 00	callq	0x100040e65
1000345a3:	85 ff	testl	%edi, %edi
1000345a5:	74 05	je	0x1000345ac
1000345a7:	31 c0	xorl	%eax, %eax
1000345a9:	89 fa	movl	%edi, %edx
1000345ab:	c3	retq
1000345ac:	55	pushq	%rbp
1000345ad:	48 89 e5	movq	%rsp, %rbp
1000345b0:	e8 c2 c8 00 00	callq	0x100040e77
1000345b5:	55	pushq	%rbp
1000345b6:	48 89 e5	movq	%rsp, %rbp
1000345b9:	e8 80 d5 00 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
1000345be:	89 c7	movl	%eax, %edi
1000345c0:	be 00 10 00 00	movl	$4096, %esi
1000345c5:	e8 1a d5 00 00	callq	0x100041ae4 ## symbol stub for: _host_reboot
1000345ca:	0f 0b	ud2
1000345cc:	55	pushq	%rbp
1000345cd:	48 89 e5	movq	%rsp, %rbp
1000345d0:	bf 00 00 00 08	movl	$134217728, %edi
1000345d5:	e8 24 d6 00 00	callq	0x100041bfe ## symbol stub for: _notify_set_options
1000345da:	48 8d 3d 0f cc 01 00	leaq	117775(%rip), %rdi ## literal pool for: "mdns"
1000345e1:	be 01 00 00 00	movl	$1, %esi
1000345e6:	e8 05 d8 00 00	callq	0x100041df0 ## symbol stub for: _si_search_module_set_flags
1000345eb:	48 8d 3d 03 cc 01 00	leaq	117763(%rip), %rdi ## literal pool for: "ds"
1000345f2:	be 01 00 00 00	movl	$1, %esi
1000345f7:	e8 f4 d7 00 00	callq	0x100041df0 ## symbol stub for: _si_search_module_set_flags
1000345fc:	bf 00 01 00 00	movl	$256, %edi
100034601:	5d	popq	%rbp
100034602:	e9 5d d6 00 00	jmp	0x100041c64 ## symbol stub for: _os_trace_set_mode
100034607:	55	pushq	%rbp
100034608:	48 89 e5	movq	%rsp, %rbp
10003460b:	53	pushq	%rbx
10003460c:	50	pushq	%rax
10003460d:	48 89 cb	movq	%rcx, %rbx
100034610:	48 85 f6	testq	%rsi, %rsi
100034613:	74 15	je	0x10003462a
100034615:	48 89 f0	movq	%rsi, %rax
100034618:	89 d6	movl	%edx, %esi
10003461a:	48 89 da	movq	%rbx, %rdx
10003461d:	4c 89 c1	movq	%r8, %rcx
100034620:	49 89 c0	movq	%rax, %r8
100034623:	e8 5e d2 00 00	callq	0x100041886 ## symbol stub for: _csops_audittoken
100034628:	eb 0d	jmp	0x100034637
10003462a:	89 d6	movl	%edx, %esi
10003462c:	48 89 da	movq	%rbx, %rdx
10003462f:	4c 89 c1	movq	%r8, %rcx
100034632:	e8 49 d2 00 00	callq	0x100041880 ## symbol stub for: _csops
100034637:	8b 0b	movl	(%rbx), %ecx
100034639:	8b 53 04	movl	4(%rbx), %edx
10003463c:	0f c9	bswapl	%ecx
10003463e:	89 0b	movl	%ecx, (%rbx)
100034640:	0f ca	bswapl	%edx
100034642:	89 53 04	movl	%edx, 4(%rbx)
100034645:	48 83 c4 08	addq	$8, %rsp
100034649:	5b	popq	%rbx
10003464a:	5d	popq	%rbp
10003464b:	c3	retq
10003464c:	55	pushq	%rbp
10003464d:	48 89 e5	movq	%rsp, %rbp
100034650:	41 57	pushq	%r15
100034652:	41 56	pushq	%r14
100034654:	41 55	pushq	%r13
100034656:	41 54	pushq	%r12
100034658:	53	pushq	%rbx
100034659:	48 81 ec 18 04 00 00	subq	$1048, %rsp
100034660:	41 89 d5	movl	%edx, %r13d
100034663:	49 89 f7	movq	%rsi, %r15
100034666:	41 89 fc	movl	%edi, %r12d
100034669:	48 8b 05 b8 39 02 00	movq	145848(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100034670:	48 8b 00	movq	(%rax), %rax
100034673:	48 89 45 d0	movq	%rax, -48(%rbp)
100034677:	48 8d 9d c0 fb ff ff	leaq	-1088(%rbp), %rbx
10003467e:	ba 08 04 00 00	movl	$1032, %edx
100034683:	48 89 df	movq	%rbx, %rdi
100034686:	be aa 00 00 00	movl	$170, %esi
10003468b:	e8 4a d5 00 00	callq	0x100041bda ## symbol stub for: _memset
100034690:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100034697:	41 83 fd 10	cmpl	$16, %r13d
10003469b:	74 0a	je	0x1000346a7
10003469d:	41 83 fd 07	cmpl	$7, %r13d
1000346a1:	0f 85 ad 00 00 00	jne	0x100034754
1000346a7:	48 8d 8d c0 fb ff ff	leaq	-1088(%rbp), %rcx
1000346ae:	41 b8 08 04 00 00	movl	$1032, %r8d
1000346b4:	44 89 e7	movl	%r12d, %edi
1000346b7:	4c 89 fe	movq	%r15, %rsi
1000346ba:	44 89 ea	movl	%r13d, %edx
1000346bd:	e8 45 ff ff ff	callq	0x100034607
1000346c2:	85 c0	testl	%eax, %eax
1000346c4:	78 3d	js	0x100034703
1000346c6:	31 db	xorl	%ebx, %ebx
1000346c8:	85 c0	testl	%eax, %eax
1000346ca:	0f 85 b6 00 00 00	jne	0x100034786
1000346d0:	8b b5 c4 fb ff ff	movl	-1084(%rbp), %esi
1000346d6:	85 f6	testl	%esi, %esi
1000346d8:	0f 84 a8 00 00 00	je	0x100034786
1000346de:	83 bd c0 fb ff ff 00	cmpl	$0, -1088(%rbp)
1000346e5:	0f 84 9b 00 00 00	je	0x100034786
1000346eb:	48 8d bd c8 fb ff ff	leaq	-1080(%rbp), %rdi
1000346f2:	48 83 c6 f8	addq	$-8, %rsi
1000346f6:	e8 e7 d8 00 00	callq	0x100041fe2 ## symbol stub for: _xpc_data_create
1000346fb:	48 89 c3	movq	%rax, %rbx
1000346fe:	e9 83 00 00 00	jmp	0x100034786
100034703:	e8 58 d0 00 00	callq	0x100041760 ## symbol stub for: ___error
100034708:	83 38 22	cmpl	$34, (%rax)
10003470b:	75 47	jne	0x100034754
10003470d:	8b 9d c4 fb ff ff	movl	-1084(%rbp), %ebx
100034713:	48 89 df	movq	%rbx, %rdi
100034716:	e8 ca 8d fd ff	callq	0x10000d4e5
10003471b:	49 89 c6	movq	%rax, %r14
10003471e:	44 89 e7	movl	%r12d, %edi
100034721:	4c 89 fe	movq	%r15, %rsi
100034724:	44 89 ea	movl	%r13d, %edx
100034727:	48 89 c1	movq	%rax, %rcx
10003472a:	49 89 d8	movq	%rbx, %r8
10003472d:	e8 d5 fe ff ff	callq	0x100034607
100034732:	85 c0	testl	%eax, %eax
100034734:	74 22	je	0x100034758
100034736:	e8 25 d0 00 00	callq	0x100041760 ## symbol stub for: ___error
10003473b:	83 38 03	cmpl	$3, (%rax)
10003473e:	74 3c	je	0x10003477c
100034740:	e8 1b d0 00 00	callq	0x100041760 ## symbol stub for: ___error
100034745:	48 63 38	movslq	(%rax), %rdi
100034748:	48 85 ff	testq	%rdi, %rdi
10003474b:	74 2f	je	0x10003477c
10003474d:	e8 50 d0 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034752:	eb 28	jmp	0x10003477c
100034754:	31 db	xorl	%ebx, %ebx
100034756:	eb 2e	jmp	0x100034786
100034758:	41 8b 76 04	movl	4(%r14), %esi
10003475c:	48 85 f6	testq	%rsi, %rsi
10003475f:	74 1b	je	0x10003477c
100034761:	41 83 3e 00	cmpl	$0, (%r14)
100034765:	74 15	je	0x10003477c
100034767:	4c 89 f7	movq	%r14, %rdi
10003476a:	48 83 c7 08	addq	$8, %rdi
10003476e:	48 83 c6 f8	addq	$-8, %rsi
100034772:	e8 6b d8 00 00	callq	0x100041fe2 ## symbol stub for: _xpc_data_create
100034777:	48 89 c3	movq	%rax, %rbx
10003477a:	eb 02	jmp	0x10003477e
10003477c:	31 db	xorl	%ebx, %ebx
10003477e:	4c 89 f7	movq	%r14, %rdi
100034781:	e8 aa d2 00 00	callq	0x100041a30 ## symbol stub for: _free
100034786:	48 8b 05 9b 38 02 00	movq	145563(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003478d:	48 8b 00	movq	(%rax), %rax
100034790:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100034794:	75 15	jne	0x1000347ab
100034796:	48 89 d8	movq	%rbx, %rax
100034799:	48 81 c4 18 04 00 00	addq	$1048, %rsp
1000347a0:	5b	popq	%rbx
1000347a1:	41 5c	popq	%r12
1000347a3:	41 5d	popq	%r13
1000347a5:	41 5e	popq	%r14
1000347a7:	41 5f	popq	%r15
1000347a9:	5d	popq	%rbp
1000347aa:	c3	retq
1000347ab:	e8 c2 cf 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000347b0:	55	pushq	%rbp
1000347b1:	48 89 e5	movq	%rsp, %rbp
1000347b4:	41 56	pushq	%r14
1000347b6:	53	pushq	%rbx
1000347b7:	ba 10 00 00 00	movl	$16, %edx
1000347bc:	e8 8b fe ff ff	callq	0x10003464c
1000347c1:	48 85 c0	testq	%rax, %rax
1000347c4:	74 31	je	0x1000347f7
1000347c6:	48 89 c3	movq	%rax, %rbx
1000347c9:	48 89 c7	movq	%rax, %rdi
1000347cc:	e8 1d d8 00 00	callq	0x100041fee ## symbol stub for: _xpc_data_get_bytes_ptr
1000347d1:	49 89 c6	movq	%rax, %r14
1000347d4:	48 89 df	movq	%rbx, %rdi
1000347d7:	e8 18 d8 00 00	callq	0x100041ff4 ## symbol stub for: _xpc_data_get_length
1000347dc:	4c 89 f7	movq	%r14, %rdi
1000347df:	48 89 c6	movq	%rax, %rsi
1000347e2:	e8 89 7a fd ff	callq	0x10000c270
1000347e7:	49 89 c6	movq	%rax, %r14
1000347ea:	48 89 df	movq	%rbx, %rdi
1000347ed:	e8 0a d9 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000347f2:	4c 89 f0	movq	%r14, %rax
1000347f5:	eb 02	jmp	0x1000347f9
1000347f7:	31 c0	xorl	%eax, %eax
1000347f9:	5b	popq	%rbx
1000347fa:	41 5e	popq	%r14
1000347fc:	5d	popq	%rbp
1000347fd:	c3	retq
1000347fe:	55	pushq	%rbp
1000347ff:	48 89 e5	movq	%rsp, %rbp
100034802:	48 89 f1	movq	%rsi, %rcx
100034805:	ba 01 00 00 00	movl	$1, %edx
10003480a:	be 0d 00 00 00	movl	$13, %esi
10003480f:	41 b8 40 00 00 00	movl	$64, %r8d
100034815:	e8 2e d5 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
10003481a:	89 c1	movl	%eax, %ecx
10003481c:	31 c0	xorl	%eax, %eax
10003481e:	83 f9 40	cmpl	$64, %ecx
100034821:	74 07	je	0x10003482a
100034823:	e8 38 cf 00 00	callq	0x100041760 ## symbol stub for: ___error
100034828:	8b 00	movl	(%rax), %eax
10003482a:	5d	popq	%rbp
10003482b:	c3	retq
10003482c:	55	pushq	%rbp
10003482d:	48 89 e5	movq	%rsp, %rbp
100034830:	48 89 f1	movq	%rsi, %rcx
100034833:	ba 01 00 00 00	movl	$1, %edx
100034838:	be 12 00 00 00	movl	$18, %esi
10003483d:	41 b8 c0 00 00 00	movl	$192, %r8d
100034843:	e8 00 d5 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
100034848:	89 c1	movl	%eax, %ecx
10003484a:	31 c0	xorl	%eax, %eax
10003484c:	81 f9 c0 00 00 00	cmpl	$192, %ecx
100034852:	74 07	je	0x10003485b
100034854:	e8 07 cf 00 00	callq	0x100041760 ## symbol stub for: ___error
100034859:	8b 00	movl	(%rax), %eax
10003485b:	5d	popq	%rbp
10003485c:	c3	retq
10003485d:	55	pushq	%rbp
10003485e:	48 89 e5	movq	%rsp, %rbp
100034861:	53	pushq	%rbx
100034862:	50	pushq	%rax
100034863:	48 89 f3	movq	%rsi, %rbx
100034866:	8b 7f 14	movl	20(%rdi), %edi
100034869:	e8 90 ff ff ff	callq	0x1000347fe
10003486e:	85 c0	testl	%eax, %eax
100034870:	74 0e	je	0x100034880
100034872:	83 f8 03	cmpl	$3, %eax
100034875:	75 0f	jne	0x100034886
100034877:	48 8d 1d 7a c9 01 00	leaq	117114(%rip), %rbx ## literal pool for: "(dead-on-arrival)"
10003487e:	eb 0d	jmp	0x10003488d
100034880:	48 83 c3 10	addq	$16, %rbx
100034884:	eb 07	jmp	0x10003488d
100034886:	48 8d 1d 7d c9 01 00	leaq	117117(%rip), %rbx ## literal pool for: "(confusing)"
10003488d:	48 89 d8	movq	%rbx, %rax
100034890:	48 83 c4 08	addq	$8, %rsp
100034894:	5b	popq	%rbx
100034895:	5d	popq	%rbp
100034896:	c3	retq
100034897:	55	pushq	%rbp
100034898:	48 89 e5	movq	%rsp, %rbp
10003489b:	48 89 f1	movq	%rsi, %rcx
10003489e:	ba 01 00 00 00	movl	$1, %edx
1000348a3:	be 14 00 00 00	movl	$20, %esi
1000348a8:	41 b8 28 00 00 00	movl	$40, %r8d
1000348ae:	e8 95 d4 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
1000348b3:	89 c1	movl	%eax, %ecx
1000348b5:	31 c0	xorl	%eax, %eax
1000348b7:	83 f9 28	cmpl	$40, %ecx
1000348ba:	74 07	je	0x1000348c3
1000348bc:	e8 9f ce 00 00	callq	0x100041760 ## symbol stub for: ___error
1000348c1:	8b 00	movl	(%rax), %eax
1000348c3:	5d	popq	%rbp
1000348c4:	c3	retq
1000348c5:	55	pushq	%rbp
1000348c6:	48 89 e5	movq	%rsp, %rbp
1000348c9:	41 57	pushq	%r15
1000348cb:	41 56	pushq	%r14
1000348cd:	41 55	pushq	%r13
1000348cf:	41 54	pushq	%r12
1000348d1:	53	pushq	%rbx
1000348d2:	48 81 ec 98 00 00 00	subq	$152, %rsp
1000348d9:	49 89 f6	movq	%rsi, %r14
1000348dc:	49 89 ff	movq	%rdi, %r15
1000348df:	48 8b 05 42 37 02 00	movq	145218(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000348e6:	48 8b 00	movq	(%rax), %rax
1000348e9:	48 89 45 d0	movq	%rax, -48(%rbp)
1000348ed:	e8 6e ce 00 00	callq	0x100041760 ## symbol stub for: ___error
1000348f2:	c7 00 00 00 00 00	movl	$0, (%rax)
1000348f8:	0f 28 05 81 e9 00 00	movaps	59777(%rip), %xmm0
1000348ff:	48 8d 9d 50 ff ff ff	leaq	-176(%rbp), %rbx
100034906:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
10003490a:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
10003490e:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
100034912:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
100034916:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10003491a:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10003491e:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100034922:	0f 29 03	movaps	%xmm0, (%rbx)
100034925:	4c 8d ad 48 ff ff ff	leaq	-184(%rbp), %r13
10003492c:	49 c7 45 00 80 00 00 00	movq	$128, (%r13)
100034934:	4c 89 ff	movq	%r15, %rdi
100034937:	48 89 de	movq	%rbx, %rsi
10003493a:	4c 89 ea	movq	%r13, %rdx
10003493d:	31 c9	xorl	%ecx, %ecx
10003493f:	45 31 c0	xorl	%r8d, %r8d
100034942:	e8 63 d5 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034947:	41 89 c4	movl	%eax, %r12d
10003494a:	49 83 7d 00 00	cmpq	$0, (%r13)
10003494f:	75 16	jne	0x100034967
100034951:	48 c7 85 48 ff ff ff 80 00 00 00	movq	$128, -184(%rbp)
10003495c:	e8 ff cd 00 00	callq	0x100041760 ## symbol stub for: ___error
100034961:	c7 00 0c 00 00 00	movl	$12, (%rax)
100034967:	45 85 e4	testl	%r12d, %r12d
10003496a:	74 0a	je	0x100034976
10003496c:	e8 ef cd 00 00	callq	0x100041760 ## symbol stub for: ___error
100034971:	83 38 0c	cmpl	$12, (%rax)
100034974:	75 7f	jne	0x1000349f5
100034976:	48 81 bd 48 ff ff ff 80 00 00 00	cmpq	$128, -184(%rbp)
100034981:	75 5d	jne	0x1000349e0
100034983:	e8 d8 cd 00 00	callq	0x100041760 ## symbol stub for: ___error
100034988:	83 38 0c	cmpl	$12, (%rax)
10003498b:	75 53	jne	0x1000349e0
10003498d:	31 db	xorl	%ebx, %ebx
10003498f:	48 8d 95 48 ff ff ff	leaq	-184(%rbp), %rdx
100034996:	4c 89 ff	movq	%r15, %rdi
100034999:	31 f6	xorl	%esi, %esi
10003499b:	31 c9	xorl	%ecx, %ecx
10003499d:	45 31 c0	xorl	%r8d, %r8d
1000349a0:	e8 05 d5 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
1000349a5:	85 c0	testl	%eax, %eax
1000349a7:	75 74	jne	0x100034a1d
1000349a9:	48 8b bd 48 ff ff ff	movq	-184(%rbp), %rdi
1000349b0:	48 81 ff 81 00 00 00	cmpq	$129, %rdi
1000349b7:	72 40	jb	0x1000349f9
1000349b9:	e8 27 8b fd ff	callq	0x10000d4e5
1000349be:	48 89 c3	movq	%rax, %rbx
1000349c1:	48 8d 95 48 ff ff ff	leaq	-184(%rbp), %rdx
1000349c8:	4c 89 ff	movq	%r15, %rdi
1000349cb:	48 89 c6	movq	%rax, %rsi
1000349ce:	31 c9	xorl	%ecx, %ecx
1000349d0:	45 31 c0	xorl	%r8d, %r8d
1000349d3:	e8 d2 d4 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
1000349d8:	41 89 c4	movl	%eax, %r12d
1000349db:	49 89 df	movq	%rbx, %r15
1000349de:	eb 03	jmp	0x1000349e3
1000349e0:	45 31 ff	xorl	%r15d, %r15d
1000349e3:	45 85 e4	testl	%r12d, %r12d
1000349e6:	74 1b	je	0x100034a03
1000349e8:	48 c7 85 48 ff ff ff 00 00 00 00	movq	$0, -184(%rbp)
1000349f3:	eb 19	jmp	0x100034a0e
1000349f5:	31 db	xorl	%ebx, %ebx
1000349f7:	eb 24	jmp	0x100034a1d
1000349f9:	48 8d 9d 50 ff ff ff	leaq	-176(%rbp), %rbx
100034a00:	45 31 ff	xorl	%r15d, %r15d
100034a03:	48 89 df	movq	%rbx, %rdi
100034a06:	e8 2d d4 00 00	callq	0x100041e38 ## symbol stub for: _strdup
100034a0b:	49 89 06	movq	%rax, (%r14)
100034a0e:	4c 89 ff	movq	%r15, %rdi
100034a11:	e8 1a d0 00 00	callq	0x100041a30 ## symbol stub for: _free
100034a16:	48 8b 9d 48 ff ff ff	movq	-184(%rbp), %rbx
100034a1d:	48 8b 05 04 36 02 00	movq	144900(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100034a24:	48 8b 00	movq	(%rax), %rax
100034a27:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100034a2b:	75 15	jne	0x100034a42
100034a2d:	48 89 d8	movq	%rbx, %rax
100034a30:	48 81 c4 98 00 00 00	addq	$152, %rsp
100034a37:	5b	popq	%rbx
100034a38:	41 5c	popq	%r12
100034a3a:	41 5d	popq	%r13
100034a3c:	41 5e	popq	%r14
100034a3e:	41 5f	popq	%r15
100034a40:	5d	popq	%rbp
100034a41:	c3	retq
100034a42:	e8 2b cd 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100034a47:	55	pushq	%rbp
100034a48:	48 89 e5	movq	%rsp, %rbp
100034a4b:	41 57	pushq	%r15
100034a4d:	41 56	pushq	%r14
100034a4f:	53	pushq	%rbx
100034a50:	48 83 ec 18	subq	$24, %rsp
100034a54:	49 89 f6	movq	%rsi, %r14
100034a57:	49 89 ff	movq	%rdi, %r15
100034a5a:	48 8d 55 e0	leaq	-32(%rbp), %rdx
100034a5e:	48 c7 02 00 00 00 00	movq	$0, (%rdx)
100034a65:	31 db	xorl	%ebx, %ebx
100034a67:	31 f6	xorl	%esi, %esi
100034a69:	31 c9	xorl	%ecx, %ecx
100034a6b:	45 31 c0	xorl	%r8d, %r8d
100034a6e:	e8 37 d4 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034a73:	85 c0	testl	%eax, %eax
100034a75:	74 0e	je	0x100034a85
100034a77:	48 89 d8	movq	%rbx, %rax
100034a7a:	48 83 c4 18	addq	$24, %rsp
100034a7e:	5b	popq	%rbx
100034a7f:	41 5e	popq	%r14
100034a81:	41 5f	popq	%r15
100034a83:	5d	popq	%rbp
100034a84:	c3	retq
100034a85:	48 8b 45 e0	movq	-32(%rbp), %rax
100034a89:	48 83 f8 08	cmpq	$8, %rax
100034a8d:	74 35	je	0x100034ac4
100034a8f:	48 83 f8 04	cmpq	$4, %rax
100034a93:	75 50	jne	0x100034ae5
100034a95:	48 8d 75 dc	leaq	-36(%rbp), %rsi
100034a99:	c7 06 00 00 00 00	movl	$0, (%rsi)
100034a9f:	31 db	xorl	%ebx, %ebx
100034aa1:	48 8d 55 e0	leaq	-32(%rbp), %rdx
100034aa5:	4c 89 ff	movq	%r15, %rdi
100034aa8:	31 c9	xorl	%ecx, %ecx
100034aaa:	45 31 c0	xorl	%r8d, %r8d
100034aad:	e8 f8 d3 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034ab2:	85 c0	testl	%eax, %eax
100034ab4:	75 c1	jne	0x100034a77
100034ab6:	48 63 45 dc	movslq	-36(%rbp), %rax
100034aba:	49 89 06	movq	%rax, (%r14)
100034abd:	bb 08 00 00 00	movl	$8, %ebx
100034ac2:	eb b3	jmp	0x100034a77
100034ac4:	48 8d 55 e0	leaq	-32(%rbp), %rdx
100034ac8:	4c 89 ff	movq	%r15, %rdi
100034acb:	4c 89 f6	movq	%r14, %rsi
100034ace:	31 c9	xorl	%ecx, %ecx
100034ad0:	45 31 c0	xorl	%r8d, %r8d
100034ad3:	e8 d2 d3 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034ad8:	31 db	xorl	%ebx, %ebx
100034ada:	85 c0	testl	%eax, %eax
100034adc:	0f 94 c3	sete	%bl
100034adf:	48 c1 e3 03	shlq	$3, %rbx
100034ae3:	eb 92	jmp	0x100034a77
100034ae5:	31 db	xorl	%ebx, %ebx
100034ae7:	eb 8e	jmp	0x100034a77
100034ae9:	55	pushq	%rbp
100034aea:	48 89 e5	movq	%rsp, %rbp
100034aed:	53	pushq	%rbx
100034aee:	50	pushq	%rax
100034aef:	48 8d 4d f4	leaq	-12(%rbp), %rcx
100034af3:	89 31	movl	%esi, (%rcx)
100034af5:	41 b8 04 00 00 00	movl	$4, %r8d
100034afb:	31 f6	xorl	%esi, %esi
100034afd:	31 d2	xorl	%edx, %edx
100034aff:	e8 a6 d3 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034b04:	85 c0	testl	%eax, %eax
100034b06:	74 11	je	0x100034b19
100034b08:	89 c3	movl	%eax, %ebx
100034b0a:	e8 51 cc 00 00	callq	0x100041760 ## symbol stub for: ___error
100034b0f:	83 38 02	cmpl	$2, (%rax)
100034b12:	74 05	je	0x100034b19
100034b14:	83 fb ff	cmpl	$-1, %ebx
100034b17:	74 07	je	0x100034b20
100034b19:	48 83 c4 08	addq	$8, %rsp
100034b1d:	5b	popq	%rbx
100034b1e:	5d	popq	%rbp
100034b1f:	c3	retq
100034b20:	e8 64 c3 00 00	callq	0x100040e89
100034b25:	eb f2	jmp	0x100034b19
100034b27:	55	pushq	%rbp
100034b28:	48 89 e5	movq	%rsp, %rbp
100034b2b:	41 57	pushq	%r15
100034b2d:	41 56	pushq	%r14
100034b2f:	41 54	pushq	%r12
100034b31:	53	pushq	%rbx
100034b32:	48 83 ec 10	subq	$16, %rsp
100034b36:	49 89 d6	movq	%rdx, %r14
100034b39:	49 89 f7	movq	%rsi, %r15
100034b3c:	e8 3f d3 00 00	callq	0x100041e80 ## symbol stub for: _strstr
100034b41:	48 85 c0	testq	%rax, %rax
100034b44:	74 32	je	0x100034b78
100034b46:	48 89 c3	movq	%rax, %rbx
100034b49:	4c 8d 65 d8	leaq	-40(%rbp), %r12
100034b4d:	49 c7 04 24 00 00 00 00	movq	$0, (%r12)
100034b55:	4c 89 ff	movq	%r15, %rdi
100034b58:	e8 f9 d2 00 00	callq	0x100041e56 ## symbol stub for: _strlen
100034b5d:	48 01 c3	addq	%rax, %rbx
100034b60:	48 89 df	movq	%rbx, %rdi
100034b63:	4c 89 e6	movq	%r12, %rsi
100034b66:	ba 0a 00 00 00	movl	$10, %edx
100034b6b:	e8 1c d3 00 00	callq	0x100041e8c ## symbol stub for: _strtoul
100034b70:	49 3b 1c 24	cmpq	(%r12), %rbx
100034b74:	4c 0f 45 f0	cmovneq	%rax, %r14
100034b78:	4c 89 f0	movq	%r14, %rax
100034b7b:	48 83 c4 10	addq	$16, %rsp
100034b7f:	5b	popq	%rbx
100034b80:	41 5c	popq	%r12
100034b82:	41 5e	popq	%r14
100034b84:	41 5f	popq	%r15
100034b86:	5d	popq	%rbp
100034b87:	c3	retq
100034b88:	55	pushq	%rbp
100034b89:	48 89 e5	movq	%rsp, %rbp
100034b8c:	31 d2	xorl	%edx, %edx
100034b8e:	5d	popq	%rbp
100034b8f:	e9 93 ff ff ff	jmp	0x100034b27
100034b94:	55	pushq	%rbp
100034b95:	48 89 e5	movq	%rsp, %rbp
100034b98:	48 83 ec 30	subq	$48, %rsp
100034b9c:	0f 28 05 dd e6 00 00	movaps	59101(%rip), %xmm0
100034ba3:	48 8d 7d d0	leaq	-48(%rbp), %rdi
100034ba7:	0f 29 47 20	movaps	%xmm0, 32(%rdi)
100034bab:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
100034baf:	0f 29 07	movaps	%xmm0, (%rdi)
100034bb2:	be 30 00 00 00	movl	$48, %esi
100034bb7:	e8 bc ce 00 00	callq	0x100041a78 ## symbol stub for: _getaudit_addr
100034bbc:	89 c1	movl	%eax, %ecx
100034bbe:	31 c0	xorl	%eax, %eax
100034bc0:	85 c9	testl	%ecx, %ecx
100034bc2:	75 03	jne	0x100034bc7
100034bc4:	8b 45 f4	movl	-12(%rbp), %eax
100034bc7:	48 83 c4 30	addq	$48, %rsp
100034bcb:	5d	popq	%rbp
100034bcc:	c3	retq
100034bcd:	55	pushq	%rbp
100034bce:	48 89 e5	movq	%rsp, %rbp
100034bd1:	89 7e 24	movl	%edi, 36(%rsi)
100034bd4:	bf 20 00 00 00	movl	$32, %edi
100034bd9:	ba 30 00 00 00	movl	$48, %edx
100034bde:	e8 25 cc 00 00	callq	0x100041808 ## symbol stub for: _auditon
100034be3:	89 c1	movl	%eax, %ecx
100034be5:	31 c0	xorl	%eax, %eax
100034be7:	83 f9 ff	cmpl	$-1, %ecx
100034bea:	75 07	jne	0x100034bf3
100034bec:	e8 6f cb 00 00	callq	0x100041760 ## symbol stub for: ___error
100034bf1:	8b 00	movl	(%rax), %eax
100034bf3:	5d	popq	%rbp
100034bf4:	c3	retq
100034bf5:	55	pushq	%rbp
100034bf6:	48 89 e5	movq	%rsp, %rbp
100034bf9:	41 57	pushq	%r15
100034bfb:	41 56	pushq	%r14
100034bfd:	41 55	pushq	%r13
100034bff:	41 54	pushq	%r12
100034c01:	53	pushq	%rbx
100034c02:	48 83 ec 38	subq	$56, %rsp
100034c06:	49 89 d7	movq	%rdx, %r15
100034c09:	49 89 f6	movq	%rsi, %r14
100034c0c:	41 89 fd	movl	%edi, %r13d
100034c0f:	e8 ee cb 00 00	callq	0x100041802 ## symbol stub for: _audit_session_self
100034c14:	41 89 c4	movl	%eax, %r12d
100034c17:	41 8d 44 24 01	leal	1(%r12), %eax
100034c1c:	bb 02 00 00 00	movl	$2, %ebx
100034c21:	83 f8 02	cmpl	$2, %eax
100034c24:	0f 82 94 00 00 00	jb	0x100034cbe
100034c2a:	0f 57 c0	xorps	%xmm0, %xmm0
100034c2d:	48 8d 7d a0	leaq	-96(%rbp), %rdi
100034c31:	0f 29 07	movaps	%xmm0, (%rdi)
100034c34:	0f 29 47 10	movaps	%xmm0, 16(%rdi)
100034c38:	0f 29 47 20	movaps	%xmm0, 32(%rdi)
100034c3c:	44 89 2f	movl	%r13d, (%rdi)
100034c3f:	c7 47 10 04 00 00 00	movl	$4, 16(%rdi)
100034c46:	c7 47 24 ff ff ff ff	movl	$4294967295, 36(%rdi)
100034c4d:	be 30 00 00 00	movl	$48, %esi
100034c52:	e8 69 d1 00 00	callq	0x100041dc0 ## symbol stub for: _setaudit_addr
100034c57:	83 f8 ff	cmpl	$-1, %eax
100034c5a:	74 2a	je	0x100034c86
100034c5c:	e8 a1 cb 00 00	callq	0x100041802 ## symbol stub for: _audit_session_self
100034c61:	41 89 07	movl	%eax, (%r15)
100034c64:	ff c0	incl	%eax
100034c66:	83 f8 01	cmpl	$1, %eax
100034c69:	77 30	ja	0x100034c9b
100034c6b:	44 89 e7	movl	%r12d, %edi
100034c6e:	e8 c6 50 fd ff	callq	0x100009d39
100034c73:	bb 02 00 00 00	movl	$2, %ebx
100034c78:	85 c0	testl	%eax, %eax
100034c7a:	74 42	je	0x100034cbe
100034c7c:	48 63 f8	movslq	%eax, %rdi
100034c7f:	e8 1e cb 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034c84:	eb 38	jmp	0x100034cbe
100034c86:	44 89 e7	movl	%r12d, %edi
100034c89:	e8 ab 50 fd ff	callq	0x100009d39
100034c8e:	85 c0	testl	%eax, %eax
100034c90:	75 3d	jne	0x100034ccf
100034c92:	e8 c9 ca 00 00	callq	0x100041760 ## symbol stub for: ___error
100034c97:	8b 18	movl	(%rax), %ebx
100034c99:	eb 23	jmp	0x100034cbe
100034c9b:	44 89 e7	movl	%r12d, %edi
100034c9e:	e8 59 cb 00 00	callq	0x1000417fc ## symbol stub for: _audit_session_join
100034ca3:	89 c3	movl	%eax, %ebx
100034ca5:	44 89 e7	movl	%r12d, %edi
100034ca8:	e8 8c 50 fd ff	callq	0x100009d39
100034cad:	83 fb ff	cmpl	$-1, %ebx
100034cb0:	74 dc	je	0x100034c8e
100034cb2:	85 c0	testl	%eax, %eax
100034cb4:	75 23	jne	0x100034cd9
100034cb6:	8b 45 c4	movl	-60(%rbp), %eax
100034cb9:	41 89 06	movl	%eax, (%r14)
100034cbc:	31 db	xorl	%ebx, %ebx
100034cbe:	89 d8	movl	%ebx, %eax
100034cc0:	48 83 c4 38	addq	$56, %rsp
100034cc4:	5b	popq	%rbx
100034cc5:	41 5c	popq	%r12
100034cc7:	41 5d	popq	%r13
100034cc9:	41 5e	popq	%r14
100034ccb:	41 5f	popq	%r15
100034ccd:	5d	popq	%rbp
100034cce:	c3	retq
100034ccf:	48 63 f8	movslq	%eax, %rdi
100034cd2:	e8 cb ca 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034cd7:	eb b9	jmp	0x100034c92
100034cd9:	48 63 f8	movslq	%eax, %rdi
100034cdc:	e8 c1 ca 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034ce1:	eb d3	jmp	0x100034cb6
100034ce3:	55	pushq	%rbp
100034ce4:	48 89 e5	movq	%rsp, %rbp
100034ce7:	41 56	pushq	%r14
100034ce9:	53	pushq	%rbx
100034cea:	48 83 ec 10	subq	$16, %rsp
100034cee:	49 89 d6	movq	%rdx, %r14
100034cf1:	48 89 f3	movq	%rsi, %rbx
100034cf4:	0f 28 05 85 e5 00 00	movaps	58757(%rip), %xmm0
100034cfb:	48 8d 75 e0	leaq	-32(%rbp), %rsi
100034cff:	0f 29 06	movaps	%xmm0, (%rsi)
100034d02:	e8 9b cd 00 00	callq	0x100041aa2 ## symbol stub for: _getrlimit
100034d07:	85 c0	testl	%eax, %eax
100034d09:	75 2d	jne	0x100034d38
100034d0b:	48 8b 45 e0	movq	-32(%rbp), %rax
100034d0f:	48 8b 4d e8	movq	-24(%rbp), %rcx
100034d13:	48 ba ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rdx
100034d1d:	48 39 d0	cmpq	%rdx, %rax
100034d20:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100034d27:	48 0f 44 c6	cmoveq	%rsi, %rax
100034d2b:	48 39 d1	cmpq	%rdx, %rcx
100034d2e:	48 0f 44 ce	cmoveq	%rsi, %rcx
100034d32:	48 89 03	movq	%rax, (%rbx)
100034d35:	49 89 0e	movq	%rcx, (%r14)
100034d38:	48 83 c4 10	addq	$16, %rsp
100034d3c:	5b	popq	%rbx
100034d3d:	41 5e	popq	%r14
100034d3f:	5d	popq	%rbp
100034d40:	c3	retq
100034d41:	55	pushq	%rbp
100034d42:	48 89 e5	movq	%rsp, %rbp
100034d45:	53	pushq	%rbx
100034d46:	48 83 ec 28	subq	$40, %rsp
100034d4a:	89 fb	movl	%edi, %ebx
100034d4c:	83 ff 08	cmpl	$8, %edi
100034d4f:	b8 00 28 00 00	movl	$10240, %eax
100034d54:	48 b9 ff ff ff ff ff ff ff 7f	movabsq	$9223372036854775807, %rcx
100034d5e:	48 0f 44 c8	cmoveq	%rax, %rcx
100034d62:	48 83 fe ff	cmpq	$-1, %rsi
100034d66:	48 0f 44 f1	cmoveq	%rcx, %rsi
100034d6a:	48 83 fa ff	cmpq	$-1, %rdx
100034d6e:	48 0f 45 ca	cmovneq	%rdx, %rcx
100034d72:	48 89 75 e8	movq	%rsi, -24(%rbp)
100034d76:	48 89 4d f0	movq	%rcx, -16(%rbp)
100034d7a:	48 89 75 d8	movq	%rsi, -40(%rbp)
100034d7e:	48 89 4d e0	movq	%rcx, -32(%rbp)
100034d82:	83 ff 08	cmpl	$8, %edi
100034d85:	75 27	jne	0x100034dae
100034d87:	48 8d 3d c2 c4 01 00	leaq	115906(%rip), %rdi ## literal pool for: "kern.maxfiles"
100034d8e:	48 8d 4d f0	leaq	-16(%rbp), %rcx
100034d92:	41 b8 08 00 00 00	movl	$8, %r8d
100034d98:	31 f6	xorl	%esi, %esi
100034d9a:	31 d2	xorl	%edx, %edx
100034d9c:	e8 09 d1 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034da1:	85 c0	testl	%eax, %eax
100034da3:	75 74	jne	0x100034e19
100034da5:	48 8d 3d b2 c4 01 00	leaq	115890(%rip), %rdi ## literal pool for: "kern.maxfilesperproc"
100034dac:	eb 2a	jmp	0x100034dd8
100034dae:	83 fb 07	cmpl	$7, %ebx
100034db1:	75 3c	jne	0x100034def
100034db3:	48 8d 3d b9 c4 01 00	leaq	115897(%rip), %rdi ## literal pool for: "kern.maxproc"
100034dba:	48 8d 4d f0	leaq	-16(%rbp), %rcx
100034dbe:	41 b8 08 00 00 00	movl	$8, %r8d
100034dc4:	31 f6	xorl	%esi, %esi
100034dc6:	31 d2	xorl	%edx, %edx
100034dc8:	e8 dd d0 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034dcd:	85 c0	testl	%eax, %eax
100034dcf:	75 52	jne	0x100034e23
100034dd1:	48 8d 3d a8 c4 01 00	leaq	115880(%rip), %rdi ## literal pool for: "kern.maxprocperuid"
100034dd8:	48 8d 4d e8	leaq	-24(%rbp), %rcx
100034ddc:	41 b8 08 00 00 00	movl	$8, %r8d
100034de2:	31 f6	xorl	%esi, %esi
100034de4:	31 d2	xorl	%edx, %edx
100034de6:	e8 bf d0 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034deb:	85 c0	testl	%eax, %eax
100034ded:	75 20	jne	0x100034e0f
100034def:	48 8d 75 d8	leaq	-40(%rbp), %rsi
100034df3:	89 df	movl	%ebx, %edi
100034df5:	e8 de cf 00 00	callq	0x100041dd8 ## symbol stub for: _setrlimit
100034dfa:	85 c0	testl	%eax, %eax
100034dfc:	75 07	jne	0x100034e05
100034dfe:	48 83 c4 28	addq	$40, %rsp
100034e02:	5b	popq	%rbx
100034e03:	5d	popq	%rbp
100034e04:	c3	retq
100034e05:	48 63 f8	movslq	%eax, %rdi
100034e08:	e8 95 c9 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034e0d:	eb ef	jmp	0x100034dfe
100034e0f:	48 63 f8	movslq	%eax, %rdi
100034e12:	e8 8b c9 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034e17:	eb d6	jmp	0x100034def
100034e19:	48 63 f8	movslq	%eax, %rdi
100034e1c:	e8 81 c9 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034e21:	eb 82	jmp	0x100034da5
100034e23:	48 63 f8	movslq	%eax, %rdi
100034e26:	e8 77 c9 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100034e2b:	eb a4	jmp	0x100034dd1
100034e2d:	55	pushq	%rbp
100034e2e:	48 89 e5	movq	%rsp, %rbp
100034e31:	41 57	pushq	%r15
100034e33:	41 56	pushq	%r14
100034e35:	41 55	pushq	%r13
100034e37:	41 54	pushq	%r12
100034e39:	53	pushq	%rbx
100034e3a:	50	pushq	%rax
100034e3b:	49 89 d6	movq	%rdx, %r14
100034e3e:	49 89 f7	movq	%rsi, %r15
100034e41:	49 89 fc	movq	%rdi, %r12
100034e44:	bb 08 00 00 00	movl	$8, %ebx
100034e49:	4c 8d 2d 20 d7 02 00	leaq	186144(%rip), %r13
100034e50:	4a 8b 7c 2b f8	movq	-8(%rbx,%r13), %rdi
100034e55:	4c 89 e6	movq	%r12, %rsi
100034e58:	e8 cf cf 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
100034e5d:	85 c0	testl	%eax, %eax
100034e5f:	74 1c	je	0x100034e7d
100034e61:	48 83 c3 10	addq	$16, %rbx
100034e65:	48 81 fb 98 00 00 00	cmpq	$152, %rbx
100034e6c:	75 e2	jne	0x100034e50
100034e6e:	48 83 c4 08	addq	$8, %rsp
100034e72:	5b	popq	%rbx
100034e73:	41 5c	popq	%r12
100034e75:	41 5d	popq	%r13
100034e77:	41 5e	popq	%r14
100034e79:	41 5f	popq	%r15
100034e7b:	5d	popq	%rbp
100034e7c:	c3	retq
100034e7d:	42 8b 3c 2b	movl	(%rbx,%r13), %edi
100034e81:	4c 89 fe	movq	%r15, %rsi
100034e84:	4c 89 f2	movq	%r14, %rdx
100034e87:	48 83 c4 08	addq	$8, %rsp
100034e8b:	5b	popq	%rbx
100034e8c:	41 5c	popq	%r12
100034e8e:	41 5d	popq	%r13
100034e90:	41 5e	popq	%r14
100034e92:	41 5f	popq	%r15
100034e94:	5d	popq	%rbp
100034e95:	e9 a7 fe ff ff	jmp	0x100034d41
100034e9a:	55	pushq	%rbp
100034e9b:	48 89 e5	movq	%rsp, %rbp
100034e9e:	b9 08 00 00 00	movl	$8, %ecx
100034ea3:	48 8d 15 c6 d6 02 00	leaq	186054(%rip), %rdx
100034eaa:	31 c0	xorl	%eax, %eax
100034eac:	39 3c 11	cmpl	%edi, (%rcx,%rdx)
100034eaf:	74 0f	je	0x100034ec0
100034eb1:	48 83 c1 10	addq	$16, %rcx
100034eb5:	48 81 f9 98 00 00 00	cmpq	$152, %rcx
100034ebc:	75 ee	jne	0x100034eac
100034ebe:	eb 05	jmp	0x100034ec5
100034ec0:	48 8b 44 11 f8	movq	-8(%rcx,%rdx), %rax
100034ec5:	5d	popq	%rbp
100034ec6:	c3	retq
100034ec7:	55	pushq	%rbp
100034ec8:	48 89 e5	movq	%rsp, %rbp
100034ecb:	53	pushq	%rbx
100034ecc:	48 83 ec 18	subq	$24, %rsp
100034ed0:	48 8d 5d f4	leaq	-12(%rbp), %rbx
100034ed4:	c7 03 00 00 00 00	movl	$0, (%rbx)
100034eda:	48 8d 55 e8	leaq	-24(%rbp), %rdx
100034ede:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
100034ee5:	48 8d 3d a7 c3 01 00	leaq	115623(%rip), %rdi ## literal pool for: "kern.netboot"
100034eec:	48 89 de	movq	%rbx, %rsi
100034eef:	31 c9	xorl	%ecx, %ecx
100034ef1:	45 31 c0	xorl	%r8d, %r8d
100034ef4:	e8 b1 cf 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100034ef9:	83 f8 ff	cmpl	$-1, %eax
100034efc:	0f 95 c1	setne	%cl
100034eff:	83 3b 00	cmpl	$0, (%rbx)
100034f02:	0f 95 c0	setne	%al
100034f05:	20 c8	andb	%cl, %al
100034f07:	48 83 c4 18	addq	$24, %rsp
100034f0b:	5b	popq	%rbx
100034f0c:	5d	popq	%rbp
100034f0d:	c3	retq
100034f0e:	55	pushq	%rbp
100034f0f:	48 89 e5	movq	%rsp, %rbp
100034f12:	48 83 ec 20	subq	$32, %rsp
100034f16:	48 b8 01 00 00 00 42 00 00 00	movabsq	$283467841537, %rax
100034f20:	48 8d 7d e8	leaq	-24(%rbp), %rdi
100034f24:	48 89 07	movq	%rax, (%rdi)
100034f27:	48 8d 55 fc	leaq	-4(%rbp), %rdx
100034f2b:	c7 02 00 00 00 00	movl	$0, (%rdx)
100034f31:	48 8d 4d f0	leaq	-16(%rbp), %rcx
100034f35:	48 c7 01 04 00 00 00	movq	$4, (%rcx)
100034f3c:	be 02 00 00 00	movl	$2, %esi
100034f41:	45 31 c0	xorl	%r8d, %r8d
100034f44:	45 31 c9	xorl	%r9d, %r9d
100034f47:	e8 58 cf 00 00	callq	0x100041ea4 ## symbol stub for: _sysctl
100034f4c:	83 f8 ff	cmpl	$-1, %eax
100034f4f:	74 0d	je	0x100034f5e
100034f51:	83 7d fc 00	cmpl	$0, -4(%rbp)
100034f55:	0f 95 c0	setne	%al
100034f58:	48 83 c4 20	addq	$32, %rsp
100034f5c:	5d	popq	%rbp
100034f5d:	c3	retq
100034f5e:	e8 39 bf 00 00	callq	0x100040e9c
100034f63:	31 c0	xorl	%eax, %eax
100034f65:	eb f1	jmp	0x100034f58
100034f67:	55	pushq	%rbp
100034f68:	48 89 e5	movq	%rsp, %rbp
100034f6b:	48 8d 35 8e 63 02 00	leaq	156558(%rip), %rsi
100034f72:	ba 1b 00 00 00	movl	$27, %edx
100034f77:	5d	popq	%rbp
100034f78:	e9 6e a4 fd ff	jmp	0x10000f3eb
100034f7d:	55	pushq	%rbp
100034f7e:	48 89 e5	movq	%rsp, %rbp
100034f81:	48 8d 35 28 65 02 00	leaq	156968(%rip), %rsi
100034f88:	ba 1a 00 00 00	movl	$26, %edx
100034f8d:	5d	popq	%rbp
100034f8e:	e9 58 a4 fd ff	jmp	0x10000f3eb
100034f93:	48 85 ff	testq	%rdi, %rdi
100034f96:	74 06	je	0x100034f9e
100034f98:	48 89 f8	movq	%rdi, %rax
100034f9b:	31 d2	xorl	%edx, %edx
100034f9d:	c3	retq
100034f9e:	55	pushq	%rbp
100034f9f:	48 89 e5	movq	%rsp, %rbp
100034fa2:	e8 08 bf 00 00	callq	0x100040eaf
100034fa7:	85 ff	testl	%edi, %edi
100034fa9:	74 05	je	0x100034fb0
100034fab:	31 c0	xorl	%eax, %eax
100034fad:	89 fa	movl	%edi, %edx
100034faf:	c3	retq
100034fb0:	55	pushq	%rbp
100034fb1:	48 89 e5	movq	%rsp, %rbp
100034fb4:	e8 08 bf 00 00	callq	0x100040ec1
100034fb9:	55	pushq	%rbp
100034fba:	48 89 e5	movq	%rsp, %rbp
100034fbd:	53	pushq	%rbx
100034fbe:	50	pushq	%rax
100034fbf:	49 89 c8	movq	%rcx, %r8
100034fc2:	48 89 d1	movq	%rdx, %rcx
100034fc5:	49 81 c8 00 01 00 00	orq	$256, %r8
100034fcc:	89 f2	movl	%esi, %edx
100034fce:	be 07 00 00 00	movl	$7, %esi
100034fd3:	e8 fc ce 00 00	callq	0x100041ed4 ## symbol stub for: _terminate_with_reason
100034fd8:	31 db	xorl	%ebx, %ebx
100034fda:	85 c0	testl	%eax, %eax
100034fdc:	74 11	je	0x100034fef
100034fde:	e8 7d c7 00 00	callq	0x100041760 ## symbol stub for: ___error
100034fe3:	83 38 03	cmpl	$3, (%rax)
100034fe6:	74 07	je	0x100034fef
100034fe8:	e8 73 c7 00 00	callq	0x100041760 ## symbol stub for: ___error
100034fed:	8b 18	movl	(%rax), %ebx
100034fef:	89 d8	movl	%ebx, %eax
100034ff1:	48 83 c4 08	addq	$8, %rsp
100034ff5:	5b	popq	%rbx
100034ff6:	5d	popq	%rbp
100034ff7:	c3	retq
100034ff8:	55	pushq	%rbp
100034ff9:	48 89 e5	movq	%rsp, %rbp
100034ffc:	53	pushq	%rbx
100034ffd:	50	pushq	%rax
100034ffe:	bf ff ff ff ff	movl	$4294967295, %edi
100035003:	be 09 00 00 00	movl	$9, %esi
100035008:	e8 01 cb 00 00	callq	0x100041b0e ## symbol stub for: _kill
10003500d:	89 c3	movl	%eax, %ebx
10003500f:	85 c0	testl	%eax, %eax
100035011:	74 24	je	0x100035037
100035013:	e8 48 c7 00 00	callq	0x100041760 ## symbol stub for: ___error
100035018:	83 38 01	cmpl	$1, (%rax)
10003501b:	75 15	jne	0x100035032
10003501d:	48 8d 35 3c c5 01 00	leaq	116028(%rip), %rsi ## literal pool for: "kill(-1, SIGKILL) returned EPERM (expected at most twice)"
100035024:	bf 04 00 01 00	movl	$65540, %edi
100035029:	31 c0	xorl	%eax, %eax
10003502b:	e8 98 05 00 00	callq	0x1000355c8
100035030:	eb 05	jmp	0x100035037
100035032:	83 fb ff	cmpl	$-1, %ebx
100035035:	74 09	je	0x100035040
100035037:	89 d8	movl	%ebx, %eax
100035039:	48 83 c4 08	addq	$8, %rsp
10003503d:	5b	popq	%rbx
10003503e:	5d	popq	%rbp
10003503f:	c3	retq
100035040:	e8 8e be 00 00	callq	0x100040ed3
100035045:	eb f0	jmp	0x100035037
100035047:	55	pushq	%rbp
100035048:	48 89 e5	movq	%rsp, %rbp
10003504b:	5d	popq	%rbp
10003504c:	e9 fd cc 00 00	jmp	0x100041d4e ## symbol stub for: _proc_terminate
100035051:	55	pushq	%rbp
100035052:	48 89 e5	movq	%rsp, %rbp
100035055:	53	pushq	%rbx
100035056:	50	pushq	%rax
100035057:	89 f3	movl	%esi, %ebx
100035059:	49 89 f8	movq	%rdi, %r8
10003505c:	48 8d 55 f4	leaq	-12(%rbp), %rdx
100035060:	c7 02 00 00 00 00	movl	$0, (%rdx)
100035066:	8b 7f 14	movl	20(%rdi), %edi
100035069:	b9 04 00 00 00	movl	$4, %ecx
10003506e:	31 f6	xorl	%esi, %esi
100035070:	e8 11 c8 00 00	callq	0x100041886 ## symbol stub for: _csops_audittoken
100035075:	85 c0	testl	%eax, %eax
100035077:	74 1b	je	0x100035094
100035079:	e8 e2 c6 00 00	callq	0x100041760 ## symbol stub for: ___error
10003507e:	83 38 03	cmpl	$3, (%rax)
100035081:	74 0d	je	0x100035090
100035083:	e8 d8 c6 00 00	callq	0x100041760 ## symbol stub for: ___error
100035088:	48 63 38	movslq	(%rax), %rdi
10003508b:	48 85 ff	testq	%rdi, %rdi
10003508e:	75 15	jne	0x1000350a5
100035090:	31 c0	xorl	%eax, %eax
100035092:	eb 0a	jmp	0x10003509e
100035094:	8b 45 f4	movl	-12(%rbp), %eax
100035097:	f7 d0	notl	%eax
100035099:	85 c3	testl	%eax, %ebx
10003509b:	0f 94 c0	sete	%al
10003509e:	48 83 c4 08	addq	$8, %rsp
1000350a2:	5b	popq	%rbx
1000350a3:	5d	popq	%rbp
1000350a4:	c3	retq
1000350a5:	e8 f8 c6 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000350aa:	eb e4	jmp	0x100035090
1000350ac:	55	pushq	%rbp
1000350ad:	48 89 e5	movq	%rsp, %rbp
1000350b0:	41 56	pushq	%r14
1000350b2:	53	pushq	%rbx
1000350b3:	48 83 ec 40	subq	$64, %rsp
1000350b7:	89 fb	movl	%edi, %ebx
1000350b9:	e8 62 ca 00 00	callq	0x100041b20 ## symbol stub for: _kqueue
1000350be:	41 89 c6	movl	%eax, %r14d
1000350c1:	48 63 c3	movslq	%ebx, %rax
1000350c4:	48 8d 4d c0	leaq	-64(%rbp), %rcx
1000350c8:	48 89 01	movq	%rax, (%rcx)
1000350cb:	48 b8 fb ff 11 00 00 00 00 80	movabsq	$-9223372036853596165, %rax
1000350d5:	48 89 41 08	movq	%rax, 8(%rcx)
1000350d9:	0f 57 c0	xorps	%xmm0, %xmm0
1000350dc:	0f 11 41 10	movups	%xmm0, 16(%rcx)
1000350e0:	0f 11 41 20	movups	%xmm0, 32(%rcx)
1000350e4:	48 c7 04 24 00 00 00 00	movq	$0, (%rsp)
1000350ec:	44 89 f7	movl	%r14d, %edi
1000350ef:	48 89 ce	movq	%rcx, %rsi
1000350f2:	ba 01 00 00 00	movl	$1, %edx
1000350f7:	41 b8 01 00 00 00	movl	$1, %r8d
1000350fd:	45 31 c9	xorl	%r9d, %r9d
100035100:	e8 03 ca 00 00	callq	0x100041b08 ## symbol stub for: _kevent64
100035105:	89 c3	movl	%eax, %ebx
100035107:	44 89 f7	movl	%r14d, %edi
10003510a:	e8 2f c7 00 00	callq	0x10004183e ## symbol stub for: _close
10003510f:	83 fb 01	cmpl	$1, %ebx
100035112:	75 08	jne	0x10003511c
100035114:	b0 01	movb	$1, %al
100035116:	f6 45 cb 40	testb	$64, -53(%rbp)
10003511a:	74 02	je	0x10003511e
10003511c:	31 c0	xorl	%eax, %eax
10003511e:	48 83 c4 40	addq	$64, %rsp
100035122:	5b	popq	%rbx
100035123:	41 5e	popq	%r14
100035125:	5d	popq	%rbp
100035126:	c3	retq
100035127:	55	pushq	%rbp
100035128:	48 89 e5	movq	%rsp, %rbp
10003512b:	48 89 fe	movq	%rdi, %rsi
10003512e:	8b 7f 14	movl	20(%rdi), %edi
100035131:	5d	popq	%rbp
100035132:	e9 79 f6 ff ff	jmp	0x1000347b0
100035137:	55	pushq	%rbp
100035138:	48 89 e5	movq	%rsp, %rbp
10003513b:	53	pushq	%rbx
10003513c:	48 83 ec 48	subq	$72, %rsp
100035140:	48 8b 05 e1 2e 02 00	movq	143073(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100035147:	48 8b 00	movq	(%rax), %rax
10003514a:	48 89 45 f0	movq	%rax, -16(%rbp)
10003514e:	0f 28 05 2b e1 00 00	movaps	57643(%rip), %xmm0
100035155:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100035159:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10003515d:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100035161:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100035165:	0f 29 06	movaps	%xmm0, (%rsi)
100035168:	e8 91 f6 ff ff	callq	0x1000347fe
10003516d:	89 c3	movl	%eax, %ebx
10003516f:	85 c0	testl	%eax, %eax
100035171:	75 26	jne	0x100035199
100035173:	85 db	testl	%ebx, %ebx
100035175:	0f 94 c0	sete	%al
100035178:	8b 4d d0	movl	-48(%rbp), %ecx
10003517b:	48 8b 15 a6 2e 02 00	movq	143014(%rip), %rdx ## literal pool symbol address: ___stack_chk_guard
100035182:	48 8b 12	movq	(%rdx), %rdx
100035185:	48 3b 55 f0	cmpq	-16(%rbp), %rdx
100035189:	75 17	jne	0x1000351a2
10003518b:	83 e1 02	andl	$2, %ecx
10003518e:	d1 e9	shrl	%ecx
100035190:	20 c8	andb	%cl, %al
100035192:	48 83 c4 48	addq	$72, %rsp
100035196:	5b	popq	%rbx
100035197:	5d	popq	%rbp
100035198:	c3	retq
100035199:	31 ff	xorl	%edi, %edi
10003519b:	e8 02 c6 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000351a0:	eb d1	jmp	0x100035173
1000351a2:	e8 cb c5 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000351a7:	55	pushq	%rbp
1000351a8:	48 89 e5	movq	%rsp, %rbp
1000351ab:	48 8b 05 16 d5 02 00	movq	185622(%rip), %rax
1000351b2:	5d	popq	%rbp
1000351b3:	c3	retq
1000351b4:	55	pushq	%rbp
1000351b5:	48 89 e5	movq	%rsp, %rbp
1000351b8:	53	pushq	%rbx
1000351b9:	48 81 ec a8 00 00 00	subq	$168, %rsp
1000351c0:	48 89 f9	movq	%rdi, %rcx
1000351c3:	0f 28 05 b6 e0 00 00	movaps	57526(%rip), %xmm0
1000351ca:	48 8d 9d 50 ff ff ff	leaq	-176(%rbp), %rbx
1000351d1:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
1000351d8:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
1000351df:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
1000351e3:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
1000351e7:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
1000351eb:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
1000351ef:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
1000351f3:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
1000351f7:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
1000351fb:	0f 29 03	movaps	%xmm0, (%rbx)
1000351fe:	48 8d 15 95 c3 01 00	leaq	115605(%rip), %rdx ## literal pool for: "XPC API Misuse: %s"
100035205:	be a0 00 00 00	movl	$160, %esi
10003520a:	48 89 df	movq	%rbx, %rdi
10003520d:	31 c0	xorl	%eax, %eax
10003520f:	e8 ee cb 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
100035214:	48 89 1d ad d4 02 00	movq	%rbx, 185517(%rip)
10003521b:	48 8d 05 8b c3 01 00	leaq	115595(%rip), %rax ## literal pool for: "API Misuse"
100035222:	48 89 05 a7 d4 02 00	movq	%rax, 185511(%rip)
100035229:	0f 0b	ud2
10003522b:	55	pushq	%rbp
10003522c:	48 89 e5	movq	%rsp, %rbp
10003522f:	48 8b 05 92 d4 02 00	movq	185490(%rip), %rax
100035236:	5d	popq	%rbp
100035237:	c3	retq
100035238:	48 85 ff	testq	%rdi, %rdi
10003523b:	74 06	je	0x100035243
10003523d:	48 89 f8	movq	%rdi, %rax
100035240:	31 d2	xorl	%edx, %edx
100035242:	c3	retq
100035243:	55	pushq	%rbp
100035244:	48 89 e5	movq	%rsp, %rbp
100035247:	e8 9a bc 00 00	callq	0x100040ee6
10003524c:	85 ff	testl	%edi, %edi
10003524e:	74 05	je	0x100035255
100035250:	31 c0	xorl	%eax, %eax
100035252:	89 fa	movl	%edi, %edx
100035254:	c3	retq
100035255:	55	pushq	%rbp
100035256:	48 89 e5	movq	%rsp, %rbp
100035259:	e8 9a bc 00 00	callq	0x100040ef8
10003525e:	55	pushq	%rbp
10003525f:	48 89 e5	movq	%rsp, %rbp
100035262:	53	pushq	%rbx
100035263:	50	pushq	%rax
100035264:	48 89 fb	movq	%rdi, %rbx
100035267:	48 8b 7f 10	movq	16(%rdi), %rdi
10003526b:	e8 c0 c7 00 00	callq	0x100041a30 ## symbol stub for: _free
100035270:	48 8b 7b 28	movq	40(%rbx), %rdi
100035274:	48 83 c4 08	addq	$8, %rsp
100035278:	5b	popq	%rbx
100035279:	5d	popq	%rbp
10003527a:	e9 b1 c7 00 00	jmp	0x100041a30 ## symbol stub for: _free
10003527f:	55	pushq	%rbp
100035280:	48 89 e5	movq	%rsp, %rbp
100035283:	31 c0	xorl	%eax, %eax
100035285:	80 3d 1c e4 02 00 00	cmpb	$0, 189468(%rip)
10003528c:	48 89 fa	movq	%rdi, %rdx
10003528f:	0f 94 c0	sete	%al
100035292:	c1 e0 10	shll	$16, %eax
100035295:	83 c8 03	orl	$3, %eax
100035298:	48 8d 35 77 23 01 00	leaq	74615(%rip), %rsi ## literal pool for: "%s"
10003529f:	89 c7	movl	%eax, %edi
1000352a1:	31 c0	xorl	%eax, %eax
1000352a3:	e8 20 03 00 00	callq	0x1000355c8
1000352a8:	b0 01	movb	$1, %al
1000352aa:	5d	popq	%rbp
1000352ab:	c3	retq
1000352ac:	55	pushq	%rbp
1000352ad:	48 89 e5	movq	%rsp, %rbp
1000352b0:	41 57	pushq	%r15
1000352b2:	41 56	pushq	%r14
1000352b4:	41 54	pushq	%r12
1000352b6:	53	pushq	%rbx
1000352b7:	48 81 ec 80 04 00 00	subq	$1152, %rsp
1000352be:	48 8b 05 63 2d 02 00	movq	142691(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000352c5:	48 8b 00	movq	(%rax), %rax
1000352c8:	48 89 45 d8	movq	%rax, -40(%rbp)
1000352cc:	48 83 3d c4 e3 02 00 ff	cmpq	$-1, 189380(%rip)
1000352d4:	0f 85 63 02 00 00	jne	0x10003553d
1000352da:	48 8d 05 57 d3 02 00	leaq	185175(%rip), %rax
1000352e1:	48 8b 38	movq	(%rax), %rdi
1000352e4:	be c0 01 00 00	movl	$448, %esi
1000352e9:	e8 f8 c8 00 00	callq	0x100041be6 ## symbol stub for: _mkdir
1000352ee:	48 8d 05 dd d4 02 00	leaq	185565(%rip), %rax
1000352f5:	80 38 00	cmpb	$0, (%rax)
1000352f8:	74 5e	je	0x100035358
1000352fa:	48 8b 3d 9f e3 02 00	movq	189343(%rip), %rdi
100035301:	e8 bc c5 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100035306:	c6 05 9b e3 02 00 01	movb	$1, 189339(%rip)
10003530d:	48 8d 05 3c d3 02 00	leaq	185148(%rip), %rax
100035314:	48 8b 18	movq	(%rax), %rbx
100035317:	e8 7a c7 00 00	callq	0x100041a96 ## symbol stub for: _getpid
10003531c:	48 8d 35 95 c2 01 00	leaq	115349(%rip), %rsi ## literal pool for: "launchd logging initialized. name: %s pid: %d"
100035323:	bf 05 00 01 00	movl	$65541, %edi
100035328:	48 89 da	movq	%rbx, %rdx
10003532b:	89 c1	movl	%eax, %ecx
10003532d:	31 c0	xorl	%eax, %eax
10003532f:	e8 94 02 00 00	callq	0x1000355c8
100035334:	48 8b 05 ed 2c 02 00	movq	142573(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003533b:	48 8b 00	movq	(%rax), %rax
10003533e:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100035342:	0f 85 0f 02 00 00	jne	0x100035557
100035348:	48 81 c4 80 04 00 00	addq	$1152, %rsp
10003534f:	5b	popq	%rbx
100035350:	41 5c	popq	%r12
100035352:	41 5e	popq	%r14
100035354:	41 5f	popq	%r15
100035356:	5d	popq	%rbp
100035357:	c3	retq
100035358:	48 8d 9d d0 fb ff ff	leaq	-1072(%rbp), %rbx
10003535f:	ba 00 04 00 00	movl	$1024, %edx
100035364:	48 89 df	movq	%rbx, %rdi
100035367:	be aa 00 00 00	movl	$170, %esi
10003536c:	e8 69 c8 00 00	callq	0x100041bda ## symbol stub for: _memset
100035371:	48 8d 15 8d c2 01 00	leaq	115341(%rip), %rdx ## literal pool for: "/private/%s"
100035378:	48 8d 0d 6d 40 01 00	leaq	82029(%rip), %rcx ## literal pool for: "/var/run/syslog"
10003537f:	be 00 04 00 00	movl	$1024, %esi
100035384:	48 89 df	movq	%rbx, %rdi
100035387:	31 c0	xorl	%eax, %eax
100035389:	e8 74 ca 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003538e:	0f 57 c0	xorps	%xmm0, %xmm0
100035391:	4c 8d b5 62 fb ff ff	leaq	-1182(%rbp), %r14
100035398:	41 0f 29 46 fe	movaps	%xmm0, -2(%r14)
10003539d:	41 0f 11 46 58	movups	%xmm0, 88(%r14)
1000353a2:	41 0f 29 46 4e	movaps	%xmm0, 78(%r14)
1000353a7:	41 0f 29 46 3e	movaps	%xmm0, 62(%r14)
1000353ac:	41 0f 29 46 2e	movaps	%xmm0, 46(%r14)
1000353b1:	41 0f 29 46 1e	movaps	%xmm0, 30(%r14)
1000353b6:	41 0f 29 46 0e	movaps	%xmm0, 14(%r14)
1000353bb:	41 c6 46 ff 01	movb	$1, -1(%r14)
1000353c0:	ba 67 00 00 00	movl	$103, %edx
1000353c5:	4c 89 f7	movq	%r14, %rdi
1000353c8:	48 89 de	movq	%rbx, %rsi
1000353cb:	e8 92 ca 00 00	callq	0x100041e62 ## symbol stub for: _strncpy
1000353d0:	bf 01 00 00 00	movl	$1, %edi
1000353d5:	be 02 00 00 00	movl	$2, %esi
1000353da:	31 d2	xorl	%edx, %edx
1000353dc:	e8 27 ca 00 00	callq	0x100041e08 ## symbol stub for: _socket
1000353e1:	83 f8 ff	cmpl	$-1, %eax
1000353e4:	74 6f	je	0x100035455
1000353e6:	41 89 c7	movl	%eax, %r15d
1000353e9:	4c 89 f7	movq	%r14, %rdi
1000353ec:	e8 e9 ca 00 00	callq	0x100041eda ## symbol stub for: _unlink
1000353f1:	83 f8 ff	cmpl	$-1, %eax
1000353f4:	75 0e	jne	0x100035404
1000353f6:	e8 65 c3 00 00	callq	0x100041760 ## symbol stub for: ___error
1000353fb:	83 38 02	cmpl	$2, (%rax)
1000353fe:	0f 85 81 00 00 00	jne	0x100035485
100035404:	48 8d b5 60 fb ff ff	leaq	-1184(%rbp), %rsi
10003540b:	44 89 ff	movl	%r15d, %edi
10003540e:	ba 6a 00 00 00	movl	$106, %edx
100035413:	e8 fc c3 00 00	callq	0x100041814 ## symbol stub for: _bind
100035418:	85 c0	testl	%eax, %eax
10003541a:	0f 84 86 00 00 00	je	0x1000354a6
100035420:	89 c3	movl	%eax, %ebx
100035422:	4c 8d a5 60 fb ff ff	leaq	-1184(%rbp), %r12
100035429:	e8 32 c3 00 00	callq	0x100041760 ## symbol stub for: ___error
10003542e:	83 38 23	cmpl	$35, (%rax)
100035431:	74 0a	je	0x10003543d
100035433:	e8 28 c3 00 00	callq	0x100041760 ## symbol stub for: ___error
100035438:	83 38 04	cmpl	$4, (%rax)
10003543b:	75 64	jne	0x1000354a1
10003543d:	44 89 ff	movl	%r15d, %edi
100035440:	4c 89 e6	movq	%r12, %rsi
100035443:	ba 6a 00 00 00	movl	$106, %edx
100035448:	e8 c7 c3 00 00	callq	0x100041814 ## symbol stub for: _bind
10003544d:	89 c3	movl	%eax, %ebx
10003544f:	85 c0	testl	%eax, %eax
100035451:	75 d6	jne	0x100035429
100035453:	eb 51	jmp	0x1000354a6
100035455:	e8 06 c3 00 00	callq	0x100041760 ## symbol stub for: ___error
10003545a:	8b 18	movl	(%rax), %ebx
10003545c:	e8 ff c2 00 00	callq	0x100041760 ## symbol stub for: ___error
100035461:	8b 38	movl	(%rax), %edi
100035463:	e8 a6 cc 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100035468:	48 8d 35 a2 c1 01 00	leaq	115106(%rip), %rsi ## literal pool for: "Could not create system logger socket: error = %d: %s"
10003546f:	bf 03 00 01 00	movl	$65539, %edi
100035474:	89 da	movl	%ebx, %edx
100035476:	48 89 c1	movq	%rax, %rcx
100035479:	31 c0	xorl	%eax, %eax
10003547b:	e8 48 01 00 00	callq	0x1000355c8
100035480:	e9 75 fe ff ff	jmp	0x1000352fa
100035485:	e8 d6 c2 00 00	callq	0x100041760 ## symbol stub for: ___error
10003548a:	8b 18	movl	(%rax), %ebx
10003548c:	e8 cf c2 00 00	callq	0x100041760 ## symbol stub for: ___error
100035491:	8b 38	movl	(%rax), %edi
100035493:	e8 76 cc 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100035498:	48 8d 35 a8 c1 01 00	leaq	115112(%rip), %rsi ## literal pool for: "Could not unlink previous system logger socket: error = %d: %s"
10003549f:	eb 7e	jmp	0x10003551f
1000354a1:	83 fb ff	cmpl	$-1, %ebx
1000354a4:	74 5f	je	0x100035505
1000354a6:	4c 89 f7	movq	%r14, %rdi
1000354a9:	be b6 01 00 00	movl	$438, %esi
1000354ae:	e8 73 c3 00 00	callq	0x100041826 ## symbol stub for: _chmod
1000354b3:	83 f8 ff	cmpl	$-1, %eax
1000354b6:	74 0c	je	0x1000354c4
1000354b8:	44 89 3d 41 d1 02 00	movl	%r15d, 184641(%rip)
1000354bf:	e9 36 fe ff ff	jmp	0x1000352fa
1000354c4:	e8 97 c2 00 00	callq	0x100041760 ## symbol stub for: ___error
1000354c9:	8b 18	movl	(%rax), %ebx
1000354cb:	e8 90 c2 00 00	callq	0x100041760 ## symbol stub for: ___error
1000354d0:	8b 38	movl	(%rax), %edi
1000354d2:	e8 37 cc 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
1000354d7:	48 8d 35 df c1 01 00	leaq	115167(%rip), %rsi ## literal pool for: "Could not make system logger socket world-writable: error = %d: %s"
1000354de:	bf 03 00 01 00	movl	$65539, %edi
1000354e3:	89 da	movl	%ebx, %edx
1000354e5:	48 89 c1	movq	%rax, %rcx
1000354e8:	31 c0	xorl	%eax, %eax
1000354ea:	e8 d9 00 00 00	callq	0x1000355c8
1000354ef:	4c 89 f7	movq	%r14, %rdi
1000354f2:	e8 e3 c9 00 00	callq	0x100041eda ## symbol stub for: _unlink
1000354f7:	83 f8 ff	cmpl	$-1, %eax
1000354fa:	0f 85 fa fd ff ff	jne	0x1000352fa
100035500:	e8 05 ba 00 00	callq	0x100040f0a
100035505:	e8 56 c2 00 00	callq	0x100041760 ## symbol stub for: ___error
10003550a:	8b 18	movl	(%rax), %ebx
10003550c:	e8 4f c2 00 00	callq	0x100041760 ## symbol stub for: ___error
100035511:	8b 38	movl	(%rax), %edi
100035513:	e8 f6 cb 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
100035518:	48 8d 35 67 c1 01 00	leaq	115047(%rip), %rsi ## literal pool for: "Could not bind to system logger socket: error = %d: %s"
10003551f:	bf 03 00 01 00	movl	$65539, %edi
100035524:	89 da	movl	%ebx, %edx
100035526:	48 89 c1	movq	%rax, %rcx
100035529:	31 c0	xorl	%eax, %eax
10003552b:	e8 98 00 00 00	callq	0x1000355c8
100035530:	44 89 ff	movl	%r15d, %edi
100035533:	e8 7c d2 ff ff	callq	0x1000327b4
100035538:	e9 bd fd ff ff	jmp	0x1000352fa
10003553d:	48 8d 3d 54 e1 02 00	leaq	188756(%rip), %rdi
100035544:	48 8d 15 11 00 00 00	leaq	17(%rip), %rdx
10003554b:	31 f6	xorl	%esi, %esi
10003554d:	e8 ee c3 00 00	callq	0x100041940 ## symbol stub for: _dispatch_once_f
100035552:	e9 83 fd ff ff	jmp	0x1000352da
100035557:	e8 16 c2 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003555c:	55	pushq	%rbp
10003555d:	48 89 e5	movq	%rsp, %rbp
100035560:	31 ff	xorl	%edi, %edi
100035562:	be 11 00 00 00	movl	$17, %esi
100035567:	31 d2	xorl	%edx, %edx
100035569:	e8 de c3 00 00	callq	0x10004194c ## symbol stub for: _dispatch_queue_attr_make_with_qos_class
10003556e:	48 8d 3d 75 c0 01 00	leaq	114805(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd.logq"
100035575:	48 89 c6	movq	%rax, %rsi
100035578:	e8 d5 c3 00 00	callq	0x100041952 ## symbol stub for: _dispatch_queue_create
10003557d:	48 89 05 2c e1 02 00	movq	%rax, 188716(%rip)
100035584:	48 8b 3d bd 2a 02 00	movq	142013(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_data_or
10003558b:	31 f6	xorl	%esi, %esi
10003558d:	31 d2	xorl	%edx, %edx
10003558f:	48 89 c1	movq	%rax, %rcx
100035592:	e8 eb c3 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100035597:	48 89 05 02 e1 02 00	movq	%rax, 188674(%rip)
10003559e:	48 8d 35 0b 61 02 00	leaq	155915(%rip), %rsi
1000355a5:	48 89 c7	movq	%rax, %rdi
1000355a8:	e8 f3 c3 00 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
1000355ad:	48 c7 05 98 d2 02 00 00 00 00 00	movq	$0, 184984(%rip)
1000355b8:	48 8d 05 91 d2 02 00	leaq	184977(%rip), %rax
1000355bf:	48 89 05 92 d2 02 00	movq	%rax, 184978(%rip)
1000355c6:	5d	popq	%rbp
1000355c7:	c3	retq
1000355c8:	55	pushq	%rbp
1000355c9:	48 89 e5	movq	%rsp, %rbp
1000355cc:	48 81 ec d0 00 00 00	subq	$208, %rsp
1000355d3:	49 89 f2	movq	%rsi, %r10
1000355d6:	89 fe	movl	%edi, %esi
1000355d8:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
1000355df:	48 89 57 10	movq	%rdx, 16(%rdi)
1000355e3:	48 89 4f 18	movq	%rcx, 24(%rdi)
1000355e7:	4c 89 47 20	movq	%r8, 32(%rdi)
1000355eb:	4c 89 4f 28	movq	%r9, 40(%rdi)
1000355ef:	84 c0	testb	%al, %al
1000355f1:	74 26	je	0x100035619
1000355f3:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
1000355fa:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
100035601:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
100035605:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
100035609:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
10003560d:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
100035611:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
100035615:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
100035619:	48 8b 05 08 2a 02 00	movq	141832(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100035620:	48 8b 00	movq	(%rax), %rax
100035623:	48 89 45 f8	movq	%rax, -8(%rbp)
100035627:	0f 28 05 52 dc 00 00	movaps	56402(%rip), %xmm0
10003562e:	48 8d 4d e0	leaq	-32(%rbp), %rcx
100035632:	0f 29 01	movaps	%xmm0, (%rcx)
100035635:	48 89 79 10	movq	%rdi, 16(%rcx)
100035639:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
100035643:	48 89 01	movq	%rax, (%rcx)
100035646:	48 8d 45 10	leaq	16(%rbp), %rax
10003564a:	48 89 41 08	movq	%rax, 8(%rcx)
10003564e:	4c 8b 45 08	movq	8(%rbp), %r8
100035652:	31 ff	xorl	%edi, %edi
100035654:	4c 89 d2	movq	%r10, %rdx
100035657:	e8 07 01 00 00	callq	0x100035763
10003565c:	48 8b 05 c5 29 02 00	movq	141765(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100035663:	48 8b 00	movq	(%rax), %rax
100035666:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10003566a:	75 09	jne	0x100035675
10003566c:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100035673:	5d	popq	%rbp
100035674:	c3	retq
100035675:	e8 f8 c0 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003567a:	55	pushq	%rbp
10003567b:	48 89 e5	movq	%rsp, %rbp
10003567e:	48 8d 35 61 bf 01 00	leaq	114529(%rip), %rsi ## literal pool for: "bye"
100035685:	bf 05 00 00 00	movl	$5, %edi
10003568a:	31 c0	xorl	%eax, %eax
10003568c:	e8 0d 00 00 00	callq	0x10003569e
100035691:	48 8b 3d 18 e0 02 00	movq	188440(%rip), %rdi
100035698:	5d	popq	%rbp
100035699:	e9 26 c3 00 00	jmp	0x1000419c4 ## symbol stub for: _dispatch_suspend
10003569e:	55	pushq	%rbp
10003569f:	48 89 e5	movq	%rsp, %rbp
1000356a2:	48 81 ec d0 00 00 00	subq	$208, %rsp
1000356a9:	49 89 f2	movq	%rsi, %r10
1000356ac:	89 fe	movl	%edi, %esi
1000356ae:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
1000356b5:	48 89 57 10	movq	%rdx, 16(%rdi)
1000356b9:	48 89 4f 18	movq	%rcx, 24(%rdi)
1000356bd:	4c 89 47 20	movq	%r8, 32(%rdi)
1000356c1:	4c 89 4f 28	movq	%r9, 40(%rdi)
1000356c5:	84 c0	testb	%al, %al
1000356c7:	74 26	je	0x1000356ef
1000356c9:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
1000356d0:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
1000356d7:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
1000356db:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
1000356df:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
1000356e3:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
1000356e7:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
1000356eb:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
1000356ef:	48 8b 05 32 29 02 00	movq	141618(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000356f6:	48 8b 00	movq	(%rax), %rax
1000356f9:	48 89 45 f8	movq	%rax, -8(%rbp)
1000356fd:	0f 28 05 7c db 00 00	movaps	56188(%rip), %xmm0
100035704:	48 8d 4d e0	leaq	-32(%rbp), %rcx
100035708:	0f 29 01	movaps	%xmm0, (%rcx)
10003570b:	48 89 79 10	movq	%rdi, 16(%rcx)
10003570f:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
100035719:	48 89 01	movq	%rax, (%rcx)
10003571c:	48 8d 45 10	leaq	16(%rbp), %rax
100035720:	48 89 41 08	movq	%rax, 8(%rcx)
100035724:	4c 8b 45 08	movq	8(%rbp), %r8
100035728:	31 ff	xorl	%edi, %edi
10003572a:	4c 89 d2	movq	%r10, %rdx
10003572d:	e8 31 00 00 00	callq	0x100035763
100035732:	48 8b 3d 77 df 02 00	movq	188279(%rip), %rdi
100035739:	48 8d 35 30 5f 02 00	leaq	155440(%rip), %rsi
100035740:	e8 85 c2 00 00	callq	0x1000419ca ## symbol stub for: _dispatch_sync
100035745:	48 8b 05 dc 28 02 00	movq	141532(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003574c:	48 8b 00	movq	(%rax), %rax
10003574f:	48 3b 45 f8	cmpq	-8(%rbp), %rax
100035753:	75 09	jne	0x10003575e
100035755:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10003575c:	5d	popq	%rbp
10003575d:	c3	retq
10003575e:	e8 0f c0 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100035763:	89 f0	movl	%esi, %eax
100035765:	25 ff ff fe ff	andl	$4294901759, %eax
10003576a:	83 f8 05	cmpl	$5, %eax
10003576d:	0f 8f 1c 01 00 00	jg	0x10003588f
100035773:	55	pushq	%rbp
100035774:	48 89 e5	movq	%rsp, %rbp
100035777:	41 57	pushq	%r15
100035779:	41 56	pushq	%r14
10003577b:	53	pushq	%rbx
10003577c:	50	pushq	%rax
10003577d:	4d 89 c6	movq	%r8, %r14
100035780:	89 f3	movl	%esi, %ebx
100035782:	49 89 ff	movq	%rdi, %r15
100035785:	48 8d 7d e0	leaq	-32(%rbp), %rdi
100035789:	48 c7 07 00 00 00 00	movq	$0, (%rdi)
100035790:	48 89 d6	movq	%rdx, %rsi
100035793:	48 89 ca	movq	%rcx, %rdx
100035796:	e8 69 c7 00 00	callq	0x100041f04 ## symbol stub for: _vasprintf
10003579b:	83 f8 ff	cmpl	$-1, %eax
10003579e:	0f 84 e1 00 00 00	je	0x100035885
1000357a4:	48 8b 55 e0	movq	-32(%rbp), %rdx
1000357a8:	89 df	movl	%ebx, %edi
1000357aa:	4c 89 fe	movq	%r15, %rsi
1000357ad:	4c 89 f1	movq	%r14, %rcx
1000357b0:	e8 1d 04 00 00	callq	0x100035bd2
1000357b5:	48 89 c3	movq	%rax, %rbx
1000357b8:	80 3d e9 de 02 00 00	cmpb	$0, 188137(%rip)
1000357bf:	75 38	jne	0x1000357f9
1000357c1:	80 7b 0c 00	cmpb	$0, 12(%rbx)
1000357c5:	74 32	je	0x1000357f9
1000357c7:	48 89 df	movq	%rbx, %rdi
1000357ca:	e8 b0 08 00 00	callq	0x10003607f
1000357cf:	49 89 c6	movq	%rax, %r14
1000357d2:	48 8d 05 77 ce 02 00	leaq	183927(%rip), %rax
1000357d9:	48 8b 30	movq	(%rax), %rsi
1000357dc:	48 8d 3d bb bf 01 00	leaq	114619(%rip), %rdi ## literal pool for: "%s|%s"
1000357e3:	4c 89 f2	movq	%r14, %rdx
1000357e6:	31 c0	xorl	%eax, %eax
1000357e8:	e8 2f 5e fd ff	callq	0x10000b61c
1000357ed:	c6 43 0c 00	movb	$0, 12(%rbx)
1000357f1:	4c 89 f7	movq	%r14, %rdi
1000357f4:	e8 37 c2 00 00	callq	0x100041a30 ## symbol stub for: _free
1000357f9:	48 83 3d 97 de 02 00 ff	cmpq	$-1, 188055(%rip)
100035801:	0f 85 89 00 00 00	jne	0x100035890
100035807:	48 8d 3d aa de 02 00	leaq	188074(%rip), %rdi
10003580e:	e8 5d c4 00 00	callq	0x100041c70 ## symbol stub for: _os_unfair_lock_lock
100035813:	48 8b 05 a6 de 02 00	movq	188070(%rip), %rax
10003581a:	48 3d 0f 27 00 00	cmpq	$9999, %rax
100035820:	76 1f	jbe	0x100035841
100035822:	48 ff 05 9f de 02 00	incq	188063(%rip)
100035829:	48 8d 3d 88 de 02 00	leaq	188040(%rip), %rdi
100035830:	e8 47 c4 00 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100035835:	48 89 df	movq	%rbx, %rdi
100035838:	31 f6	xorl	%esi, %esi
10003583a:	e8 12 d1 fd ff	callq	0x100012951
10003583f:	eb 44	jmp	0x100035885
100035841:	48 89 d8	movq	%rbx, %rax
100035844:	48 83 c0 48	addq	$72, %rax
100035848:	48 c7 43 48 00 00 00 00	movq	$0, 72(%rbx)
100035850:	48 8b 0d 01 d0 02 00	movq	184321(%rip), %rcx
100035857:	48 89 19	movq	%rbx, (%rcx)
10003585a:	48 89 05 f7 cf 02 00	movq	%rax, 184311(%rip)
100035861:	48 ff 05 58 de 02 00	incq	187992(%rip)
100035868:	48 8d 3d 49 de 02 00	leaq	187977(%rip), %rdi
10003586f:	e8 08 c4 00 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
100035874:	48 8b 3d 25 de 02 00	movq	187941(%rip), %rdi
10003587b:	be 01 00 00 00	movl	$1, %esi
100035880:	e8 0f c1 00 00	callq	0x100041994 ## symbol stub for: _dispatch_source_merge_data
100035885:	48 83 c4 08	addq	$8, %rsp
100035889:	5b	popq	%rbx
10003588a:	41 5e	popq	%r14
10003588c:	41 5f	popq	%r15
10003588e:	5d	popq	%rbp
10003588f:	c3	retq
100035890:	48 8d 3d 01 de 02 00	leaq	187905(%rip), %rdi
100035897:	48 8d 15 be fc ff ff	leaq	-834(%rip), %rdx
10003589e:	31 f6	xorl	%esi, %esi
1000358a0:	e8 9b c0 00 00	callq	0x100041940 ## symbol stub for: _dispatch_once_f
1000358a5:	e9 5d ff ff ff	jmp	0x100035807
1000358aa:	55	pushq	%rbp
1000358ab:	48 89 e5	movq	%rsp, %rbp
1000358ae:	48 81 ec d0 00 00 00	subq	$208, %rsp
1000358b5:	4c 8d 95 30 ff ff ff	leaq	-208(%rbp), %r10
1000358bc:	49 89 4a 18	movq	%rcx, 24(%r10)
1000358c0:	4d 89 42 20	movq	%r8, 32(%r10)
1000358c4:	4d 89 4a 28	movq	%r9, 40(%r10)
1000358c8:	84 c0	testb	%al, %al
1000358ca:	74 26	je	0x1000358f2
1000358cc:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
1000358d3:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
1000358da:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
1000358de:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
1000358e2:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
1000358e6:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
1000358ea:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
1000358ee:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
1000358f2:	48 8b 05 2f 27 02 00	movq	141103(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000358f9:	48 8b 00	movq	(%rax), %rax
1000358fc:	48 89 45 f8	movq	%rax, -8(%rbp)
100035900:	0f 28 05 79 d9 00 00	movaps	55673(%rip), %xmm0
100035907:	48 8d 4d e0	leaq	-32(%rbp), %rcx
10003590b:	0f 29 01	movaps	%xmm0, (%rcx)
10003590e:	4c 89 51 10	movq	%r10, 16(%rcx)
100035912:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
10003591c:	48 89 01	movq	%rax, (%rcx)
10003591f:	48 8d 45 10	leaq	16(%rbp), %rax
100035923:	48 89 41 08	movq	%rax, 8(%rcx)
100035927:	4c 8b 45 08	movq	8(%rbp), %r8
10003592b:	e8 33 fe ff ff	callq	0x100035763
100035930:	48 8b 05 f1 26 02 00	movq	141041(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100035937:	48 8b 00	movq	(%rax), %rax
10003593a:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10003593e:	75 09	jne	0x100035949
100035940:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100035947:	5d	popq	%rbp
100035948:	c3	retq
100035949:	e8 24 be 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003594e:	55	pushq	%rbp
10003594f:	48 89 e5	movq	%rsp, %rbp
100035952:	5d	popq	%rbp
100035953:	e9 00 00 00 00	jmp	0x100035958
100035958:	55	pushq	%rbp
100035959:	48 89 e5	movq	%rsp, %rbp
10003595c:	41 57	pushq	%r15
10003595e:	41 56	pushq	%r14
100035960:	41 55	pushq	%r13
100035962:	41 54	pushq	%r12
100035964:	53	pushq	%rbx
100035965:	48 83 ec 28	subq	$40, %rsp
100035969:	48 8d 45 c0	leaq	-64(%rbp), %rax
10003596d:	48 c7 00 00 00 00 00	movq	$0, (%rax)
100035974:	48 89 40 08	movq	%rax, 8(%rax)
100035978:	48 8d 3d 39 dd 02 00	leaq	187705(%rip), %rdi
10003597f:	e8 ec c2 00 00	callq	0x100041c70 ## symbol stub for: _os_unfair_lock_lock
100035984:	48 8b 05 c5 ce 02 00	movq	184005(%rip), %rax
10003598b:	48 85 c0	testq	%rax, %rax
10003598e:	74 2b	je	0x1000359bb
100035990:	48 8b 4d c8	movq	-56(%rbp), %rcx
100035994:	48 89 01	movq	%rax, (%rcx)
100035997:	48 8d 05 b2 ce 02 00	leaq	183986(%rip), %rax
10003599e:	48 8b 0d b3 ce 02 00	movq	183987(%rip), %rcx
1000359a5:	48 89 4d c8	movq	%rcx, -56(%rbp)
1000359a9:	48 c7 05 9c ce 02 00 00 00 00 00	movq	$0, 183964(%rip)
1000359b4:	48 89 05 9d ce 02 00	movq	%rax, 183965(%rip)
1000359bb:	48 8b 05 fe dc 02 00	movq	187646(%rip), %rax
1000359c2:	48 89 45 b0	movq	%rax, -80(%rbp)
1000359c6:	45 31 e4	xorl	%r12d, %r12d
1000359c9:	4c 89 25 f0 dc 02 00	movq	%r12, 187632(%rip)
1000359d0:	48 8b 05 f1 dc 02 00	movq	187633(%rip), %rax
1000359d7:	48 89 45 b8	movq	%rax, -72(%rbp)
1000359db:	4c 89 25 e6 dc 02 00	movq	%r12, 187622(%rip)
1000359e2:	48 8d 3d cf dc 02 00	leaq	187599(%rip), %rdi
1000359e9:	e8 8e c2 00 00	callq	0x100041c7c ## symbol stub for: _os_unfair_lock_unlock
1000359ee:	4c 8b 6d c0	movq	-64(%rbp), %r13
1000359f2:	41 be 00 00 00 00	movl	$0, %r14d
1000359f8:	4d 85 ed	testq	%r13, %r13
1000359fb:	0f 84 27 01 00 00	je	0x100035b28
100035a01:	4c 8d 7d d4	leaq	-44(%rbp), %r15
100035a05:	45 31 f6	xorl	%r14d, %r14d
100035a08:	45 31 e4	xorl	%r12d, %r12d
100035a0b:	48 8b 1d c6 dc 02 00	movq	187590(%rip), %rbx
100035a12:	48 85 db	testq	%rbx, %rbx
100035a15:	0f 84 a4 00 00 00	je	0x100035abf
100035a1b:	8b 43 08	movl	8(%rbx), %eax
100035a1e:	41 3b 45 08	cmpl	8(%r13), %eax
100035a22:	75 2e	jne	0x100035a52
100035a24:	48 8b 7b 10	movq	16(%rbx), %rdi
100035a28:	49 8b 75 10	movq	16(%r13), %rsi
100035a2c:	e8 02 99 fd ff	callq	0x10000f333
100035a31:	84 c0	testb	%al, %al
100035a33:	74 1d	je	0x100035a52
100035a35:	48 8b 7b 28	movq	40(%rbx), %rdi
100035a39:	49 8b 75 28	movq	40(%r13), %rsi
100035a3d:	e8 f1 98 fd ff	callq	0x10000f333
100035a42:	84 c0	testb	%al, %al
100035a44:	74 0c	je	0x100035a52
100035a46:	48 ff 05 93 dc 02 00	incq	187539(%rip)
100035a4d:	e9 a3 00 00 00	jmp	0x100035af5
100035a52:	48 8b 3d 7f dc 02 00	movq	187519(%rip), %rdi
100035a59:	48 85 ff	testq	%rdi, %rdi
100035a5c:	74 61	je	0x100035abf
100035a5e:	48 8b 35 7b dc 02 00	movq	187515(%rip), %rsi
100035a65:	48 85 f6	testq	%rsi, %rsi
100035a68:	74 43	je	0x100035aad
100035a6a:	48 8d 3d f6 bc 01 00	leaq	113910(%rip), %rdi ## literal pool for: "Last log repeated %llu times"
100035a71:	31 c0	xorl	%eax, %eax
100035a73:	e8 bd 96 fd ff	callq	0x10000f135
100035a78:	bf 05 00 00 00	movl	$5, %edi
100035a7d:	31 f6	xorl	%esi, %esi
100035a7f:	48 89 c2	movq	%rax, %rdx
100035a82:	31 c9	xorl	%ecx, %ecx
100035a84:	e8 49 01 00 00	callq	0x100035bd2
100035a89:	4c 89 fb	movq	%r15, %rbx
100035a8c:	49 89 c7	movq	%rax, %r15
100035a8f:	48 89 c7	movq	%rax, %rdi
100035a92:	31 f6	xorl	%esi, %esi
100035a94:	e8 09 02 00 00	callq	0x100035ca2
100035a99:	4c 89 ff	movq	%r15, %rdi
100035a9c:	49 89 df	movq	%rbx, %r15
100035a9f:	31 f6	xorl	%esi, %esi
100035aa1:	e8 ab ce fd ff	callq	0x100012951
100035aa6:	48 8b 3d 2b dc 02 00	movq	187435(%rip), %rdi
100035aad:	31 f6	xorl	%esi, %esi
100035aaf:	e8 9d ce fd ff	callq	0x100012951
100035ab4:	48 c7 05 19 dc 02 00 00 00 00 00	movq	$0, 187417(%rip)
100035abf:	4c 89 ef	movq	%r13, %rdi
100035ac2:	31 f6	xorl	%esi, %esi
100035ac4:	e8 05 ce fd ff	callq	0x1000128ce
100035ac9:	48 89 05 08 dc 02 00	movq	%rax, 187400(%rip)
100035ad0:	48 c7 05 05 dc 02 00 00 00 00 00	movq	$0, 187397(%rip)
100035adb:	c7 45 d4 00 00 00 00	movl	$0, -44(%rbp)
100035ae2:	4c 89 ef	movq	%r13, %rdi
100035ae5:	4c 89 fe	movq	%r15, %rsi
100035ae8:	e8 b5 01 00 00	callq	0x100035ca2
100035aed:	83 7d d4 01	cmpl	$1, -44(%rbp)
100035af1:	49 83 dc ff	sbbq	$-1, %r12
100035af5:	48 8b 45 c0	movq	-64(%rbp), %rax
100035af9:	48 8b 40 48	movq	72(%rax), %rax
100035afd:	48 89 45 c0	movq	%rax, -64(%rbp)
100035b01:	48 85 c0	testq	%rax, %rax
100035b04:	75 08	jne	0x100035b0e
100035b06:	48 8d 45 c0	leaq	-64(%rbp), %rax
100035b0a:	48 89 45 c8	movq	%rax, -56(%rbp)
100035b0e:	4c 89 ef	movq	%r13, %rdi
100035b11:	31 f6	xorl	%esi, %esi
100035b13:	e8 39 ce fd ff	callq	0x100012951
100035b18:	49 ff c6	incq	%r14
100035b1b:	4c 8b 6d c0	movq	-64(%rbp), %r13
100035b1f:	4d 85 ed	testq	%r13, %r13
100035b22:	0f 85 e3 fe ff ff	jne	0x100035a0b
100035b28:	48 8b 5d b0	movq	-80(%rbp), %rbx
100035b2c:	49 39 de	cmpq	%rbx, %r14
100035b2f:	0f 85 91 00 00 00	jne	0x100035bc6
100035b35:	48 8b 75 b8	movq	-72(%rbp), %rsi
100035b39:	48 85 f6	testq	%rsi, %rsi
100035b3c:	74 1b	je	0x100035b59
100035b3e:	48 8d 3d bb bb 01 00	leaq	113595(%rip), %rdi ## literal pool for: "%lld file logs dropped [in-flight %lld]: %lld os_log_simple logs dropped"
100035b45:	48 89 da	movq	%rbx, %rdx
100035b48:	4c 89 e1	movq	%r12, %rcx
100035b4b:	31 c0	xorl	%eax, %eax
100035b4d:	e8 e3 95 fd ff	callq	0x10000f135
100035b52:	bf 04 00 00 00	movl	$4, %edi
100035b57:	eb 25	jmp	0x100035b7e
100035b59:	48 8d 05 20 cb 02 00	leaq	183072(%rip), %rax
100035b60:	48 63 10	movslq	(%rax), %rdx
100035b63:	48 39 d3	cmpq	%rdx, %rbx
100035b66:	72 3e	jb	0x100035ba6
100035b68:	48 8d 3d da bb 01 00	leaq	113626(%rip), %rdi ## literal pool for: "Flushed %lld logs [limit: %d]"
100035b6f:	48 89 de	movq	%rbx, %rsi
100035b72:	31 c0	xorl	%eax, %eax
100035b74:	e8 bc 95 fd ff	callq	0x10000f135
100035b79:	bf 05 00 00 00	movl	$5, %edi
100035b7e:	31 f6	xorl	%esi, %esi
100035b80:	48 89 c2	movq	%rax, %rdx
100035b83:	31 c9	xorl	%ecx, %ecx
100035b85:	e8 48 00 00 00	callq	0x100035bd2
100035b8a:	48 89 c3	movq	%rax, %rbx
100035b8d:	48 85 c0	testq	%rax, %rax
100035b90:	74 14	je	0x100035ba6
100035b92:	48 89 df	movq	%rbx, %rdi
100035b95:	31 f6	xorl	%esi, %esi
100035b97:	e8 06 01 00 00	callq	0x100035ca2
100035b9c:	48 89 df	movq	%rbx, %rdi
100035b9f:	31 f6	xorl	%esi, %esi
100035ba1:	e8 ab cd fd ff	callq	0x100012951
100035ba6:	48 8b 3d 23 db 02 00	movq	187171(%rip), %rdi
100035bad:	48 85 ff	testq	%rdi, %rdi
100035bb0:	74 05	je	0x100035bb7
100035bb2:	e8 5b be 00 00	callq	0x100041a12 ## symbol stub for: _fflush
100035bb7:	48 83 c4 28	addq	$40, %rsp
100035bbb:	5b	popq	%rbx
100035bbc:	41 5c	popq	%r12
100035bbe:	41 5d	popq	%r13
100035bc0:	41 5e	popq	%r14
100035bc2:	41 5f	popq	%r15
100035bc4:	5d	popq	%rbp
100035bc5:	c3	retq
100035bc6:	31 ff	xorl	%edi, %edi
100035bc8:	e8 d5 bb 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100035bcd:	e9 63 ff ff ff	jmp	0x100035b35
100035bd2:	55	pushq	%rbp
100035bd3:	48 89 e5	movq	%rsp, %rbp
100035bd6:	41 57	pushq	%r15
100035bd8:	41 56	pushq	%r14
100035bda:	41 55	pushq	%r13
100035bdc:	41 54	pushq	%r12
100035bde:	53	pushq	%rbx
100035bdf:	50	pushq	%rax
100035be0:	49 89 ce	movq	%rcx, %r14
100035be3:	49 89 d7	movq	%rdx, %r15
100035be6:	49 89 f4	movq	%rsi, %r12
100035be9:	41 89 fd	movl	%edi, %r13d
100035bec:	31 ff	xorl	%edi, %edi
100035bee:	e8 67 d2 fd ff	callq	0x100012e5a
100035bf3:	48 89 c3	movq	%rax, %rbx
100035bf6:	41 0f ba e5 10	btl	$16, %r13d
100035bfb:	72 15	jb	0x100035c12
100035bfd:	48 8d 05 06 cc 02 00	leaq	183302(%rip), %rax
100035c04:	80 38 00	cmpb	$0, (%rax)
100035c07:	75 09	jne	0x100035c12
100035c09:	83 3d f0 c9 02 00 ff	cmpl	$-1, 182768(%rip)
100035c10:	75 04	jne	0x100035c16
100035c12:	c6 43 0c 01	movb	$1, 12(%rbx)
100035c16:	66 c7 43 0d 01 01	movw	$257, 13(%rbx)
100035c1c:	41 81 e5 ff ff fe ff	andl	$4294901759, %r13d
100035c23:	44 89 6b 08	movl	%r13d, 8(%rbx)
100035c27:	4d 85 e4	testq	%r12, %r12
100035c2a:	74 0a	je	0x100035c36
100035c2c:	4c 89 e7	movq	%r12, %rdi
100035c2f:	e8 ae 93 fd ff	callq	0x10000efe2
100035c34:	eb 02	jmp	0x100035c38
100035c36:	31 c0	xorl	%eax, %eax
100035c38:	48 89 43 10	movq	%rax, 16(%rbx)
100035c3c:	4c 89 7b 28	movq	%r15, 40(%rbx)
100035c40:	48 89 df	movq	%rbx, %rdi
100035c43:	48 83 c7 18	addq	$24, %rdi
100035c47:	31 f6	xorl	%esi, %esi
100035c49:	e8 6c be 00 00	callq	0x100041aba ## symbol stub for: _gettimeofday
100035c4e:	4d 85 f6	testq	%r14, %r14
100035c51:	75 04	jne	0x100035c57
100035c53:	4c 8b 75 08	movq	8(%rbp), %r14
100035c57:	4c 89 73 30	movq	%r14, 48(%rbx)
100035c5b:	e8 bc bf 00 00	callq	0x100041c1c ## symbol stub for: _os_log_simple_now
100035c60:	48 89 43 38	movq	%rax, 56(%rbx)
100035c64:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100035c6e:	4c 8d 75 d0	leaq	-48(%rbp), %r14
100035c72:	49 89 06	movq	%rax, (%r14)
100035c75:	31 ff	xorl	%edi, %edi
100035c77:	4c 89 f6	movq	%r14, %rsi
100035c7a:	e8 db c0 00 00	callq	0x100041d5a ## symbol stub for: _pthread_threadid_np
100035c7f:	49 8b 06	movq	(%r14), %rax
100035c82:	48 89 43 40	movq	%rax, 64(%rbx)
100035c86:	48 89 d8	movq	%rbx, %rax
100035c89:	48 83 c4 08	addq	$8, %rsp
100035c8d:	5b	popq	%rbx
100035c8e:	41 5c	popq	%r12
100035c90:	41 5d	popq	%r13
100035c92:	41 5e	popq	%r14
100035c94:	41 5f	popq	%r15
100035c96:	5d	popq	%rbp
100035c97:	c3	retq
100035c98:	55	pushq	%rbp
100035c99:	48 89 e5	movq	%rsp, %rbp
100035c9c:	5d	popq	%rbp
100035c9d:	e9 b6 fc ff ff	jmp	0x100035958
100035ca2:	55	pushq	%rbp
100035ca3:	48 89 e5	movq	%rsp, %rbp
100035ca6:	41 57	pushq	%r15
100035ca8:	41 56	pushq	%r14
100035caa:	53	pushq	%rbx
100035cab:	48 81 ec 08 0c 00 00	subq	$3080, %rsp
100035cb2:	49 89 ff	movq	%rdi, %r15
100035cb5:	48 8b 05 6c 23 02 00	movq	140140(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100035cbc:	48 8b 00	movq	(%rax), %rax
100035cbf:	48 89 45 e0	movq	%rax, -32(%rbp)
100035cc3:	80 7f 0d 00	cmpb	$0, 13(%rdi)
100035cc7:	0f 84 80 01 00 00	je	0x100035e4d
100035ccd:	49 89 f6	movq	%rsi, %r14
100035cd0:	31 c0	xorl	%eax, %eax
100035cd2:	83 3d 27 c9 02 00 ff	cmpl	$-1, 182567(%rip)
100035cd9:	0f 84 66 01 00 00	je	0x100035e45
100035cdf:	48 8d 0d ec ca 02 00	leaq	183020(%rip), %rcx
100035ce6:	80 39 00	cmpb	$0, (%rcx)
100035ce9:	0f 85 56 01 00 00	jne	0x100035e45
100035cef:	48 83 3d 11 da 02 00 00	cmpq	$0, 186897(%rip)
100035cf7:	0f 85 a8 00 00 00	jne	0x100035da5
100035cfd:	e8 94 bd 00 00	callq	0x100041a96 ## symbol stub for: _getpid
100035d02:	48 98	cltq
100035d04:	48 89 05 fd d9 02 00	movq	%rax, 186877(%rip)
100035d0b:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
100035d15:	48 8d 9d e0 fb ff ff	leaq	-1056(%rbp), %rbx
100035d1c:	48 89 43 30	movq	%rax, 48(%rbx)
100035d20:	0f 28 05 59 d5 00 00	movaps	54617(%rip), %xmm0
100035d27:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100035d2b:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100035d2f:	0f 29 03	movaps	%xmm0, (%rbx)
100035d32:	e8 5f bd 00 00	callq	0x100041a96 ## symbol stub for: _getpid
100035d37:	89 c7	movl	%eax, %edi
100035d39:	be 11 00 00 00	movl	$17, %esi
100035d3e:	31 d2	xorl	%edx, %edx
100035d40:	48 89 d9	movq	%rbx, %rcx
100035d43:	41 b8 38 00 00 00	movl	$56, %r8d
100035d49:	e8 fa bf 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
100035d4e:	48 8b 43 10	movq	16(%rbx), %rax
100035d52:	48 89 05 b7 d9 02 00	movq	%rax, 186807(%rip)
100035d59:	48 63 43 20	movslq	32(%rbx), %rax
100035d5d:	48 89 05 b4 d9 02 00	movq	%rax, 186804(%rip)
100035d64:	48 8d 3d c5 d9 02 00	leaq	186821(%rip), %rdi
100035d6b:	48 89 de	movq	%rbx, %rsi
100035d6e:	e8 7f c1 00 00	callq	0x100041ef2 ## symbol stub for: _uuid_copy
100035d73:	48 8d 3d c6 d9 02 00	leaq	186822(%rip), %rdi
100035d7a:	48 89 de	movq	%rbx, %rsi
100035d7d:	e8 70 c1 00 00	callq	0x100041ef2 ## symbol stub for: _uuid_copy
100035d82:	48 8d 1d c7 d9 02 00	leaq	186823(%rip), %rbx
100035d89:	48 89 df	movq	%rbx, %rdi
100035d8c:	e8 55 c1 00 00	callq	0x100041ee6 ## symbol stub for: _uuid_clear
100035d91:	48 89 df	movq	%rbx, %rdi
100035d94:	e8 f7 b9 00 00	callq	0x100041790 ## symbol stub for: __dyld_get_shared_cache_uuid
100035d99:	e8 b6 b9 00 00	callq	0x100041754 ## symbol stub for: __NSGetMachExecuteHeader
100035d9e:	48 89 05 bb d9 02 00	movq	%rax, 186811(%rip)
100035da5:	48 8b 05 ac d9 02 00	movq	186796(%rip), %rax
100035dac:	48 8d 9d e0 fb ff ff	leaq	-1056(%rbp), %rbx
100035db3:	48 89 43 70	movq	%rax, 112(%rbx)
100035db7:	0f 10 05 8a d9 02 00	movups	186762(%rip), %xmm0
100035dbe:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
100035dc2:	0f 10 05 6f d9 02 00	movups	186735(%rip), %xmm0
100035dc9:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
100035dcd:	0f 10 05 54 d9 02 00	movups	186708(%rip), %xmm0
100035dd4:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
100035dd8:	0f 10 05 39 d9 02 00	movups	186681(%rip), %xmm0
100035ddf:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100035de3:	0f 10 05 1e d9 02 00	movups	186654(%rip), %xmm0
100035dea:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100035dee:	0f 10 05 03 d9 02 00	movups	186627(%rip), %xmm0
100035df5:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100035df9:	0f 10 05 e8 d8 02 00	movups	186600(%rip), %xmm0
100035e00:	0f 29 03	movaps	%xmm0, (%rbx)
100035e03:	41 8b 7f 08	movl	8(%r15), %edi
100035e07:	e8 16 be 00 00	callq	0x100041c22 ## symbol stub for: _os_log_simple_type_from_asl
100035e0c:	88 03	movb	%al, (%rbx)
100035e0e:	49 8b 47 10	movq	16(%r15), %rax
100035e12:	48 89 43 08	movq	%rax, 8(%rbx)
100035e16:	49 8b 47 28	movq	40(%r15), %rax
100035e1a:	48 89 43 10	movq	%rax, 16(%rbx)
100035e1e:	49 8b 47 38	movq	56(%r15), %rax
100035e22:	48 89 43 18	movq	%rax, 24(%rbx)
100035e26:	49 8b 47 40	movq	64(%r15), %rax
100035e2a:	48 89 43 38	movq	%rax, 56(%rbx)
100035e2e:	49 8b 47 30	movq	48(%r15), %rax
100035e32:	48 2b 05 27 d9 02 00	subq	186663(%rip), %rax
100035e39:	48 89 43 40	movq	%rax, 64(%rbx)
100035e3d:	48 89 df	movq	%rbx, %rdi
100035e40:	e8 75 b9 00 00	callq	0x1000417ba ## symbol stub for: __os_log_simple_send
100035e45:	4d 85 f6	testq	%r14, %r14
100035e48:	74 03	je	0x100035e4d
100035e4a:	41 89 06	movl	%eax, (%r14)
100035e4d:	4c 89 ff	movq	%r15, %rdi
100035e50:	e8 2a 02 00 00	callq	0x10003607f
100035e55:	48 85 c0	testq	%rax, %rax
100035e58:	0f 84 61 01 00 00	je	0x100035fbf
100035e5e:	49 89 c6	movq	%rax, %r14
100035e61:	41 80 7f 0c 00	cmpb	$0, 12(%r15)
100035e66:	74 1b	je	0x100035e83
100035e68:	48 8d 05 e1 c7 02 00	leaq	182241(%rip), %rax
100035e6f:	48 8b 30	movq	(%rax), %rsi
100035e72:	48 8d 3d 25 b9 01 00	leaq	112933(%rip), %rdi ## literal pool for: "%s|%s"
100035e79:	4c 89 f2	movq	%r14, %rdx
100035e7c:	31 c0	xorl	%eax, %eax
100035e7e:	e8 90 58 fd ff	callq	0x10000b713
100035e83:	41 80 7f 0e 00	cmpb	$0, 14(%r15)
100035e88:	0f 84 c6 01 00 00	je	0x100036054
100035e8e:	48 8b 1d 3b d8 02 00	movq	186427(%rip), %rbx
100035e95:	48 85 db	testq	%rbx, %rbx
100035e98:	0f 85 55 01 00 00	jne	0x100035ff3
100035e9e:	48 8d 05 2d c9 02 00	leaq	182573(%rip), %rax
100035ea5:	80 38 00	cmpb	$0, (%rax)
100035ea8:	0f 85 45 01 00 00	jne	0x100035ff3
100035eae:	48 8d 9d e0 fb ff ff	leaq	-1056(%rbp), %rbx
100035eb5:	ba 00 04 00 00	movl	$1024, %edx
100035eba:	48 89 df	movq	%rbx, %rdi
100035ebd:	be aa 00 00 00	movl	$170, %esi
100035ec2:	e8 13 bd 00 00	callq	0x100041bda ## symbol stub for: _memset
100035ec7:	4c 8d 3d 6a c7 02 00	leaq	182122(%rip), %r15
100035ece:	49 8b 0f	movq	(%r15), %rcx
100035ed1:	48 8d 15 41 b9 01 00	leaq	112961(%rip), %rdx ## literal pool for: "%s/launchd.log"
100035ed8:	be 00 04 00 00	movl	$1024, %esi
100035edd:	48 89 df	movq	%rbx, %rdi
100035ee0:	31 c0	xorl	%eax, %eax
100035ee2:	e8 1b bf 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
100035ee7:	48 89 df	movq	%rbx, %rdi
100035eea:	31 f6	xorl	%esi, %esi
100035eec:	e8 f3 b8 00 00	callq	0x1000417e4 ## symbol stub for: _access
100035ef1:	85 c0	testl	%eax, %eax
100035ef3:	0f 85 94 00 00 00	jne	0x100035f8d
100035ef9:	48 8d 9d e0 f7 ff ff	leaq	-2080(%rbp), %rbx
100035f00:	ba 00 04 00 00	movl	$1024, %edx
100035f05:	48 89 df	movq	%rbx, %rdi
100035f08:	be aa 00 00 00	movl	$170, %esi
100035f0d:	e8 c8 bc 00 00	callq	0x100041bda ## symbol stub for: _memset
100035f12:	49 8b 0f	movq	(%r15), %rcx
100035f15:	48 8d 15 0c b9 01 00	leaq	112908(%rip), %rdx ## literal pool for: "%s/launchd.log.1"
100035f1c:	be 00 04 00 00	movl	$1024, %esi
100035f21:	48 89 df	movq	%rbx, %rdi
100035f24:	31 c0	xorl	%eax, %eax
100035f26:	e8 d7 be 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
100035f2b:	48 89 df	movq	%rbx, %rdi
100035f2e:	31 f6	xorl	%esi, %esi
100035f30:	e8 af b8 00 00	callq	0x1000417e4 ## symbol stub for: _access
100035f35:	85 c0	testl	%eax, %eax
100035f37:	75 41	jne	0x100035f7a
100035f39:	48 8d 9d e0 f3 ff ff	leaq	-3104(%rbp), %rbx
100035f40:	ba 00 04 00 00	movl	$1024, %edx
100035f45:	48 89 df	movq	%rbx, %rdi
100035f48:	be aa 00 00 00	movl	$170, %esi
100035f4d:	e8 88 bc 00 00	callq	0x100041bda ## symbol stub for: _memset
100035f52:	49 8b 0f	movq	(%r15), %rcx
100035f55:	48 8d 15 dd b8 01 00	leaq	112861(%rip), %rdx ## literal pool for: "%s/launchd.log.2"
100035f5c:	be 00 04 00 00	movl	$1024, %esi
100035f61:	48 89 df	movq	%rbx, %rdi
100035f64:	31 c0	xorl	%eax, %eax
100035f66:	e8 97 be 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
100035f6b:	48 8d bd e0 f7 ff ff	leaq	-2080(%rbp), %rdi
100035f72:	48 89 de	movq	%rbx, %rsi
100035f75:	e8 28 be 00 00	callq	0x100041da2 ## symbol stub for: _rename
100035f7a:	48 8d bd e0 fb ff ff	leaq	-1056(%rbp), %rdi
100035f81:	48 8d b5 e0 f7 ff ff	leaq	-2080(%rbp), %rsi
100035f88:	e8 15 be 00 00	callq	0x100041da2 ## symbol stub for: _rename
100035f8d:	48 8d 35 b6 b8 01 00	leaq	112822(%rip), %rsi ## literal pool for: "w"
100035f94:	48 8d bd e0 fb ff ff	leaq	-1056(%rbp), %rdi
100035f9b:	e8 84 ba 00 00	callq	0x100041a24 ## symbol stub for: _fopen
100035fa0:	48 89 05 29 d7 02 00	movq	%rax, 186153(%rip)
100035fa7:	48 85 c0	testq	%rax, %rax
100035faa:	74 24	je	0x100035fd0
100035fac:	b9 00 40 00 00	movl	$16384, %ecx
100035fb1:	48 89 c7	movq	%rax, %rdi
100035fb4:	31 f6	xorl	%esi, %esi
100035fb6:	31 d2	xorl	%edx, %edx
100035fb8:	e8 2d be 00 00	callq	0x100041dea ## symbol stub for: _setvbuf
100035fbd:	eb 2d	jmp	0x100035fec
100035fbf:	48 8d 3d be b7 01 00	leaq	112574(%rip), %rdi ## literal pool for: "_launch_log_format failed"
100035fc6:	e8 b7 55 fd ff	callq	0x10000b582
100035fcb:	e9 8c 00 00 00	jmp	0x10003605c
100035fd0:	e8 8b b7 00 00	callq	0x100041760 ## symbol stub for: ___error
100035fd5:	8b 10	movl	(%rax), %edx
100035fd7:	48 8d 3d 6e b8 01 00	leaq	112750(%rip), %rdi ## literal pool for: "launchd.log: fopen(%s): %d\n"
100035fde:	48 8d b5 e0 fb ff ff	leaq	-1056(%rbp), %rsi
100035fe5:	31 c0	xorl	%eax, %eax
100035fe7:	e8 27 57 fd ff	callq	0x10000b713
100035fec:	48 8b 1d dd d6 02 00	movq	186077(%rip), %rbx
100035ff3:	48 85 db	testq	%rbx, %rbx
100035ff6:	74 5c	je	0x100036054
100035ff8:	4c 89 f7	movq	%r14, %rdi
100035ffb:	e8 56 be 00 00	callq	0x100041e56 ## symbol stub for: _strlen
100036000:	49 89 c7	movq	%rax, %r15
100036003:	be 01 00 00 00	movl	$1, %esi
100036008:	4c 89 f7	movq	%r14, %rdi
10003600b:	48 89 c2	movq	%rax, %rdx
10003600e:	48 89 d9	movq	%rbx, %rcx
100036011:	e8 50 ba 00 00	callq	0x100041a66 ## symbol stub for: _fwrite
100036016:	48 8d 05 5b c6 02 00	leaq	181851(%rip), %rax
10003601d:	48 8b 00	movq	(%rax), %rax
100036020:	48 85 c0	testq	%rax, %rax
100036023:	7e 2f	jle	0x100036054
100036025:	4c 03 3d 3c d7 02 00	addq	186172(%rip), %r15
10003602c:	4c 89 3d 35 d7 02 00	movq	%r15, 186165(%rip)
100036033:	49 39 c7	cmpq	%rax, %r15
100036036:	7c 1c	jl	0x100036054
100036038:	48 8b 3d 91 d6 02 00	movq	186001(%rip), %rdi
10003603f:	e8 b7 c8 ff ff	callq	0x1000328fb
100036044:	31 c0	xorl	%eax, %eax
100036046:	48 89 05 83 d6 02 00	movq	%rax, 185987(%rip)
10003604d:	48 89 05 14 d7 02 00	movq	%rax, 186132(%rip)
100036054:	4c 89 f7	movq	%r14, %rdi
100036057:	e8 d4 b9 00 00	callq	0x100041a30 ## symbol stub for: _free
10003605c:	48 8b 05 c5 1f 02 00	movq	139205(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036063:	48 8b 00	movq	(%rax), %rax
100036066:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10003606a:	75 0e	jne	0x10003607a
10003606c:	48 81 c4 08 0c 00 00	addq	$3080, %rsp
100036073:	5b	popq	%rbx
100036074:	41 5e	popq	%r14
100036076:	41 5f	popq	%r15
100036078:	5d	popq	%rbp
100036079:	c3	retq
10003607a:	e8 f3 b6 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003607f:	55	pushq	%rbp
100036080:	48 89 e5	movq	%rsp, %rbp
100036083:	41 57	pushq	%r15
100036085:	41 56	pushq	%r14
100036087:	41 54	pushq	%r12
100036089:	53	pushq	%rbx
10003608a:	48 83 ec 70	subq	$112, %rsp
10003608e:	49 89 ff	movq	%rdi, %r15
100036091:	48 8b 05 90 1f 02 00	movq	139152(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036098:	48 8b 00	movq	(%rax), %rax
10003609b:	48 89 45 d8	movq	%rax, -40(%rbp)
10003609f:	0f 28 05 da d1 00 00	movaps	53722(%rip), %xmm0
1000360a6:	4c 8d 75 b0	leaq	-80(%rbp), %r14
1000360aa:	41 0f 11 46 0b	movups	%xmm0, 11(%r14)
1000360af:	41 0f 29 06	movaps	%xmm0, (%r14)
1000360b3:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
1000360bd:	48 8d 9d 70 ff ff ff	leaq	-144(%rbp), %rbx
1000360c4:	48 89 43 30	movq	%rax, 48(%rbx)
1000360c8:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
1000360cc:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
1000360d0:	0f 29 03	movaps	%xmm0, (%rbx)
1000360d3:	48 83 c7 18	addq	$24, %rdi
1000360d7:	48 89 de	movq	%rbx, %rsi
1000360da:	e8 53 ba 00 00	callq	0x100041b32 ## symbol stub for: _localtime_r
1000360df:	b9 6c 07 00 00	movl	$1900, %ecx
1000360e4:	03 4b 14	addl	20(%rbx), %ecx
1000360e7:	44 8b 43 10	movl	16(%rbx), %r8d
1000360eb:	41 ff c0	incl	%r8d
1000360ee:	44 8b 4b 0c	movl	12(%rbx), %r9d
1000360f2:	44 8b 53 08	movl	8(%rbx), %r10d
1000360f6:	44 8b 1b	movl	(%rbx), %r11d
1000360f9:	44 8b 63 04	movl	4(%rbx), %r12d
1000360fd:	41 8b 5f 20	movl	32(%r15), %ebx
100036101:	48 8d 15 9c b6 01 00	leaq	112284(%rip), %rdx ## literal pool for: "%04d-%02d-%02d %02d:%02d:%02d.%06d"
100036108:	be 1b 00 00 00	movl	$27, %esi
10003610d:	4c 89 f7	movq	%r14, %rdi
100036110:	31 c0	xorl	%eax, %eax
100036112:	53	pushq	%rbx
100036113:	41 53	pushq	%r11
100036115:	41 54	pushq	%r12
100036117:	41 52	pushq	%r10
100036119:	e8 e4 bc 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003611e:	48 83 c4 20	addq	$32, %rsp
100036122:	49 63 47 08	movslq	8(%r15), %rax
100036126:	48 8d 0d a3 55 02 00	leaq	152995(%rip), %rcx
10003612d:	48 8b 0c c1	movq	(%rcx,%rax,8), %rcx
100036131:	49 8b 57 10	movq	16(%r15), %rdx
100036135:	4d 8b 47 28	movq	40(%r15), %r8
100036139:	48 85 d2	testq	%rdx, %rdx
10003613c:	74 14	je	0x100036152
10003613e:	48 8d 3d 82 b6 01 00	leaq	112258(%rip), %rdi ## literal pool for: "%s (%s) <%s>: %s\n"
100036145:	48 8d 75 b0	leaq	-80(%rbp), %rsi
100036149:	31 c0	xorl	%eax, %eax
10003614b:	e8 e5 8f fd ff	callq	0x10000f135
100036150:	eb 18	jmp	0x10003616a
100036152:	48 8d 3d 80 b6 01 00	leaq	112256(%rip), %rdi ## literal pool for: "%s <%s>: %s\n"
100036159:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10003615d:	48 89 ca	movq	%rcx, %rdx
100036160:	4c 89 c1	movq	%r8, %rcx
100036163:	31 c0	xorl	%eax, %eax
100036165:	e8 cb 8f fd ff	callq	0x10000f135
10003616a:	48 8b 0d b7 1e 02 00	movq	138935(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100036171:	48 8b 09	movq	(%rcx), %rcx
100036174:	48 3b 4d d8	cmpq	-40(%rbp), %rcx
100036178:	75 0d	jne	0x100036187
10003617a:	48 83 c4 70	addq	$112, %rsp
10003617e:	5b	popq	%rbx
10003617f:	41 5c	popq	%r12
100036181:	41 5e	popq	%r14
100036183:	41 5f	popq	%r15
100036185:	5d	popq	%rbp
100036186:	c3	retq
100036187:	e8 e6 b5 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003618c:	48 85 ff	testq	%rdi, %rdi
10003618f:	74 06	je	0x100036197
100036191:	48 89 f8	movq	%rdi, %rax
100036194:	31 d2	xorl	%edx, %edx
100036196:	c3	retq
100036197:	55	pushq	%rbp
100036198:	48 89 e5	movq	%rsp, %rbp
10003619b:	e8 85 ad 00 00	callq	0x100040f25
1000361a0:	85 ff	testl	%edi, %edi
1000361a2:	74 05	je	0x1000361a9
1000361a4:	31 c0	xorl	%eax, %eax
1000361a6:	89 fa	movl	%edi, %edx
1000361a8:	c3	retq
1000361a9:	55	pushq	%rbp
1000361aa:	48 89 e5	movq	%rsp, %rbp
1000361ad:	e8 85 ad 00 00	callq	0x100040f37
1000361b2:	55	pushq	%rbp
1000361b3:	48 89 e5	movq	%rsp, %rbp
1000361b6:	5d	popq	%rbp
1000361b7:	e9 10 e4 ff ff	jmp	0x1000345cc
1000361bc:	55	pushq	%rbp
1000361bd:	48 89 e5	movq	%rsp, %rbp
1000361c0:	41 57	pushq	%r15
1000361c2:	41 56	pushq	%r14
1000361c4:	41 54	pushq	%r12
1000361c6:	53	pushq	%rbx
1000361c7:	49 89 fc	movq	%rdi, %r12
1000361ca:	48 8d 05 3f c6 02 00	leaq	181823(%rip), %rax
1000361d1:	48 8b 38	movq	(%rax), %rdi
1000361d4:	48 85 ff	testq	%rdi, %rdi
1000361d7:	74 6b	je	0x100036244
1000361d9:	49 89 d7	movq	%rdx, %r15
1000361dc:	41 89 f6	movl	%esi, %r14d
1000361df:	4c 89 e6	movq	%r12, %rsi
1000361e2:	e8 85 be 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000361e7:	48 85 c0	testq	%rax, %rax
1000361ea:	74 66	je	0x100036252
1000361ec:	48 89 c3	movq	%rax, %rbx
1000361ef:	48 89 c7	movq	%rax, %rdi
1000361f2:	e8 cf be 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000361f7:	48 3b 05 02 1f 02 00	cmpq	139010(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000361fe:	75 5b	jne	0x10003625b
100036200:	48 89 de	movq	%rbx, %rsi
100036203:	e8 64 00 00 00	callq	0x10003626c
100036208:	84 c0	testb	%al, %al
10003620a:	74 1a	je	0x100036226
10003620c:	49 8b 47 10	movq	16(%r15), %rax
100036210:	4c 89 ff	movq	%r15, %rdi
100036213:	4c 89 e6	movq	%r12, %rsi
100036216:	48 89 da	movq	%rbx, %rdx
100036219:	44 89 f1	movl	%r14d, %ecx
10003621c:	5b	popq	%rbx
10003621d:	41 5c	popq	%r12
10003621f:	41 5e	popq	%r14
100036221:	41 5f	popq	%r15
100036223:	5d	popq	%rbp
100036224:	ff e0	jmpq	*%rax
100036226:	48 8d 35 99 b6 01 00	leaq	112281(%rip), %rsi ## literal pool for: "Skipping boot-task: %s"
10003622d:	bf 05 00 01 00	movl	$65541, %edi
100036232:	4c 89 e2	movq	%r12, %rdx
100036235:	31 c0	xorl	%eax, %eax
100036237:	5b	popq	%rbx
100036238:	41 5c	popq	%r12
10003623a:	41 5e	popq	%r14
10003623c:	41 5f	popq	%r15
10003623e:	5d	popq	%rbp
10003623f:	e9 84 f3 ff ff	jmp	0x1000355c8
100036244:	48 8d 3d 1d b6 01 00	leaq	112157(%rip), %rdi ## literal pool for: "boot task dictionary is not populated"
10003624b:	31 c0	xorl	%eax, %eax
10003624d:	e8 c0 e1 ff ff	callq	0x100034412
100036252:	48 8d 3d 35 b6 01 00	leaq	112181(%rip), %rdi ## literal pool for: "undefined boot task %s"
100036259:	eb 07	jmp	0x100036262
10003625b:	48 8d 3d 43 b6 01 00	leaq	112195(%rip), %rdi ## literal pool for: "boot task %s is not a dictionary"
100036262:	4c 89 e6	movq	%r12, %rsi
100036265:	31 c0	xorl	%eax, %eax
100036267:	e8 a6 e1 ff ff	callq	0x100034412
10003626c:	55	pushq	%rbp
10003626d:	48 89 e5	movq	%rsp, %rbp
100036270:	41 56	pushq	%r14
100036272:	53	pushq	%rbx
100036273:	48 89 f3	movq	%rsi, %rbx
100036276:	48 8d 35 60 b6 01 00	leaq	112224(%rip), %rsi ## literal pool for: "PerformAlways"
10003627d:	48 89 df	movq	%rbx, %rdi
100036280:	e8 b1 bd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036285:	89 c1	movl	%eax, %ecx
100036287:	b0 01	movb	$1, %al
100036289:	84 c9	testb	%cl, %cl
10003628b:	0f 85 85 00 00 00	jne	0x100036316
100036291:	48 8d 05 50 c5 02 00	leaq	181584(%rip), %rax
100036298:	80 38 00	cmpb	$0, (%rax)
10003629b:	74 13	je	0x1000362b0
10003629d:	48 8d 35 47 b6 01 00	leaq	112199(%rip), %rsi ## literal pool for: "PerformAfterUserspaceReboot"
1000362a4:	48 89 df	movq	%rbx, %rdi
1000362a7:	e8 8a bd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000362ac:	84 c0	testb	%al, %al
1000362ae:	74 42	je	0x1000362f2
1000362b0:	48 8d 35 50 b6 01 00	leaq	112208(%rip), %rsi ## literal pool for: "PerformInRestore"
1000362b7:	48 89 df	movq	%rbx, %rdi
1000362ba:	e8 77 bd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000362bf:	4c 8d 35 0d c5 02 00	leaq	181517(%rip), %r14
1000362c6:	41 80 3e 00	cmpb	$0, (%r14)
1000362ca:	74 04	je	0x1000362d0
1000362cc:	84 c0	testb	%al, %al
1000362ce:	74 22	je	0x1000362f2
1000362d0:	e8 f2 eb ff ff	callq	0x100034ec7
1000362d5:	84 c0	testb	%al, %al
1000362d7:	74 1d	je	0x1000362f6
1000362d9:	41 80 3e 00	cmpb	$0, (%r14)
1000362dd:	75 17	jne	0x1000362f6
1000362df:	48 8d 35 32 b6 01 00	leaq	112178(%rip), %rsi ## literal pool for: "SkipInNetBoot"
1000362e6:	48 89 df	movq	%rbx, %rdi
1000362e9:	e8 48 bd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
1000362ee:	84 c0	testb	%al, %al
1000362f0:	74 04	je	0x1000362f6
1000362f2:	31 c0	xorl	%eax, %eax
1000362f4:	eb 20	jmp	0x100036316
1000362f6:	48 8d 35 29 b6 01 00	leaq	112169(%rip), %rsi ## literal pool for: "PerformInBaseSystem"
1000362fd:	48 89 df	movq	%rbx, %rdi
100036300:	e8 31 bd 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036305:	89 c1	movl	%eax, %ecx
100036307:	48 8d 05 c6 c4 02 00	leaq	181446(%rip), %rax
10003630e:	80 38 00	cmpb	$0, (%rax)
100036311:	0f 94 c0	sete	%al
100036314:	08 c8	orb	%cl, %al
100036316:	5b	popq	%rbx
100036317:	41 5e	popq	%r14
100036319:	5d	popq	%rbp
10003631a:	c3	retq
10003631b:	55	pushq	%rbp
10003631c:	48 89 e5	movq	%rsp, %rbp
10003631f:	41 57	pushq	%r15
100036321:	41 56	pushq	%r14
100036323:	41 55	pushq	%r13
100036325:	41 54	pushq	%r12
100036327:	53	pushq	%rbx
100036328:	48 81 ec f8 08 00 00	subq	$2296, %rsp
10003632f:	49 89 fe	movq	%rdi, %r14
100036332:	48 8b 05 ef 1c 02 00	movq	138479(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036339:	48 8b 00	movq	(%rax), %rax
10003633c:	48 89 45 d0	movq	%rax, -48(%rbp)
100036340:	c6 05 22 c4 02 00 00	movb	$0, 181282(%rip)
100036347:	48 8b 3d 22 d4 02 00	movq	185378(%rip), %rdi
10003634e:	48 85 ff	testq	%rdi, %rdi
100036351:	0f 84 b2 00 00 00	je	0x100036409
100036357:	e8 32 b6 00 00	callq	0x10004198e ## symbol stub for: _dispatch_source_get_handle
10003635c:	48 89 c3	movq	%rax, %rbx
10003635f:	48 8d b5 10 f7 ff ff	leaq	-2288(%rbp), %rsi
100036366:	c7 06 00 00 00 00	movl	$0, (%rsi)
10003636c:	89 df	movl	%ebx, %edi
10003636e:	ba 01 00 00 00	movl	$1, %edx
100036373:	e8 aa bb 00 00	callq	0x100041f22 ## symbol stub for: _waitpid
100036378:	83 fb ff	cmpl	$-1, %ebx
10003637b:	74 09	je	0x100036386
10003637d:	83 f8 ff	cmpl	$-1, %eax
100036380:	0f 84 60 08 00 00	je	0x100036be6
100036386:	8b 95 10 f7 ff ff	movl	-2288(%rbp), %edx
10003638c:	89 d7	movl	%edx, %edi
10003638e:	83 e7 7f	andl	$127, %edi
100036391:	83 ff 7f	cmpl	$127, %edi
100036394:	74 3f	je	0x1000363d5
100036396:	85 ff	testl	%edi, %edi
100036398:	75 20	jne	0x1000363ba
10003639a:	c1 ea 08	shrl	$8, %edx
10003639d:	81 e2 ff 00 00 00	andl	$255, %edx
1000363a3:	74 30	je	0x1000363d5
1000363a5:	48 8d 35 8e b5 01 00	leaq	112014(%rip), %rsi ## literal pool for: "Single-user shell exited with status: %d"
1000363ac:	bf 05 00 01 00	movl	$65541, %edi
1000363b1:	31 c0	xorl	%eax, %eax
1000363b3:	e8 10 f2 ff ff	callq	0x1000355c8
1000363b8:	eb 1b	jmp	0x1000363d5
1000363ba:	e8 bb ba 00 00	callq	0x100041e7a ## symbol stub for: _strsignal
1000363bf:	48 8d 35 9d b5 01 00	leaq	112029(%rip), %rsi ## literal pool for: "Single-user shell was signaled: %s"
1000363c6:	bf 05 00 01 00	movl	$65541, %edi
1000363cb:	48 89 c2	movq	%rax, %rdx
1000363ce:	31 c0	xorl	%eax, %eax
1000363d0:	e8 f3 f1 ff ff	callq	0x1000355c8
1000363d5:	48 8b 3d 94 d3 02 00	movq	185236(%rip), %rdi
1000363dc:	e8 77 b5 00 00	callq	0x100041958 ## symbol stub for: _dispatch_release
1000363e1:	48 c7 05 84 d3 02 00 00 00 00 00	movq	$0, 185220(%rip)
1000363ec:	48 8d 3d 93 b5 01 00	leaq	112019(%rip), %rdi ## literal pool for: "security.mac.sandbox.sandcastle.enabled"
1000363f3:	48 8d 0d 7e d3 02 00	leaq	185214(%rip), %rcx
1000363fa:	41 b8 04 00 00 00	movl	$4, %r8d
100036400:	31 f6	xorl	%esi, %esi
100036402:	31 d2	xorl	%edx, %edx
100036404:	e8 a1 ba 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100036409:	48 8d 9d 10 f7 ff ff	leaq	-2288(%rbp), %rbx
100036410:	ba 78 08 00 00	movl	$2168, %edx
100036415:	48 89 df	movq	%rbx, %rdi
100036418:	be aa 00 00 00	movl	$170, %esi
10003641d:	e8 b8 b7 00 00	callq	0x100041bda ## symbol stub for: _memset
100036422:	48 8d 3d 66 11 01 00	leaq	69990(%rip), %rdi ## literal pool for: "/"
100036429:	48 89 de	movq	%rbx, %rsi
10003642c:	e8 e9 b9 00 00	callq	0x100041e1a ## symbol stub for: _statfs$INODE64
100036431:	83 f8 ff	cmpl	$-1, %eax
100036434:	0f 84 91 07 00 00	je	0x100036bcb
10003643a:	f6 85 50 f7 ff ff 01	testb	$1, -2224(%rbp)
100036441:	74 11	je	0x100036454
100036443:	48 8d 3d 64 b5 01 00	leaq	111972(%rip), %rdi ## literal pool for: "fsck"
10003644a:	31 f6	xorl	%esi, %esi
10003644c:	4c 89 f2	movq	%r14, %rdx
10003644f:	e8 68 fd ff ff	callq	0x1000361bc
100036454:	48 8d 3d 58 b5 01 00	leaq	111960(%rip), %rdi ## literal pool for: "mount-phase-1"
10003645b:	31 f6	xorl	%esi, %esi
10003645d:	4c 89 f2	movq	%r14, %rdx
100036460:	e8 57 fd ff ff	callq	0x1000361bc
100036465:	48 8d 3d 55 b5 01 00	leaq	111957(%rip), %rdi ## literal pool for: "data-protection"
10003646c:	31 f6	xorl	%esi, %esi
10003646e:	4c 89 f2	movq	%r14, %rdx
100036471:	e8 46 fd ff ff	callq	0x1000361bc
100036476:	48 8d 3d 13 d0 00 00	leaq	53267(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
10003647d:	e8 24 b8 00 00	callq	0x100041ca6 ## symbol stub for: _os_variant_is_darwinos
100036482:	84 c0	testb	%al, %al
100036484:	74 11	je	0x100036497
100036486:	48 8d 3d 44 b5 01 00	leaq	111940(%rip), %rdi ## literal pool for: "finish-obliteration"
10003648d:	31 f6	xorl	%esi, %esi
10003648f:	4c 89 f2	movq	%r14, %rdx
100036492:	e8 25 fd ff ff	callq	0x1000361bc
100036497:	48 8d 3d 6b 63 01 00	leaq	90987(%rip), %rdi ## literal pool for: "select-boot-mode"
10003649e:	31 f6	xorl	%esi, %esi
1000364a0:	4c 89 f2	movq	%r14, %rdx
1000364a3:	e8 14 fd ff ff	callq	0x1000361bc
1000364a8:	48 8d 3d 7b 63 01 00	leaq	91003(%rip), %rdi ## literal pool for: "commit-boot-mode"
1000364af:	31 f6	xorl	%esi, %esi
1000364b1:	4c 89 f2	movq	%r14, %rdx
1000364b4:	e8 03 fd ff ff	callq	0x1000361bc
1000364b9:	48 8d 3d 5a 63 01 00	leaq	90970(%rip), %rdi ## literal pool for: "auto-pivot-root"
1000364c0:	31 f6	xorl	%esi, %esi
1000364c2:	4c 89 f2	movq	%r14, %rdx
1000364c5:	e8 f2 fc ff ff	callq	0x1000361bc
1000364ca:	48 8d 3d 96 63 01 00	leaq	91030(%rip), %rdi ## literal pool for: "allow-non-platform-code"
1000364d1:	31 f6	xorl	%esi, %esi
1000364d3:	4c 89 f2	movq	%r14, %rdx
1000364d6:	e8 e1 fc ff ff	callq	0x1000361bc
1000364db:	48 8d 3d 03 b5 01 00	leaq	111875(%rip), %rdi ## literal pool for: "restore-datapartition"
1000364e2:	31 f6	xorl	%esi, %esi
1000364e4:	4c 89 f2	movq	%r14, %rdx
1000364e7:	e8 d0 fc ff ff	callq	0x1000361bc
1000364ec:	48 8d 3d 08 b5 01 00	leaq	111880(%rip), %rdi ## literal pool for: "mount-phase-2"
1000364f3:	31 f6	xorl	%esi, %esi
1000364f5:	4c 89 f2	movq	%r14, %rdx
1000364f8:	e8 bf fc ff ff	callq	0x1000361bc
1000364fd:	48 8d 3d 37 63 01 00	leaq	90935(%rip), %rdi ## literal pool for: "enable-swap"
100036504:	31 f6	xorl	%esi, %esi
100036506:	4c 89 f2	movq	%r14, %rdx
100036509:	e8 ae fc ff ff	callq	0x1000361bc
10003650e:	48 8d 3d 32 63 01 00	leaq	90930(%rip), %rdi ## literal pool for: "sandbox-enable-root-translation"
100036515:	31 f6	xorl	%esi, %esi
100036517:	4c 89 f2	movq	%r14, %rdx
10003651a:	e8 9d fc ff ff	callq	0x1000361bc
10003651f:	4c 8d 3d ae c2 02 00	leaq	180910(%rip), %r15
100036526:	41 80 3f 00	cmpb	$0, (%r15)
10003652a:	74 11	je	0x10003653d
10003652c:	48 8d 3d d6 b4 01 00	leaq	111830(%rip), %rdi ## literal pool for: "rc.cdrom"
100036533:	31 f6	xorl	%esi, %esi
100036535:	4c 89 f2	movq	%r14, %rdx
100036538:	e8 7f fc ff ff	callq	0x1000361bc
10003653d:	48 8d 3d 3b 63 01 00	leaq	90939(%rip), %rdi ## literal pool for: "init-with-data-volume"
100036544:	31 f6	xorl	%esi, %esi
100036546:	4c 89 f2	movq	%r14, %rdx
100036549:	e8 6e fc ff ff	callq	0x1000361bc
10003654e:	48 8d 3d cc 21 01 00	leaq	74188(%rip), %rdi ## literal pool for: "deferred_install"
100036555:	31 f6	xorl	%esi, %esi
100036557:	4c 89 f2	movq	%r14, %rdx
10003655a:	e8 5d fc ff ff	callq	0x1000361bc
10003655f:	48 8d 3d ac b4 01 00	leaq	111788(%rip), %rdi ## literal pool for: "fips"
100036566:	31 f6	xorl	%esi, %esi
100036568:	4c 89 f2	movq	%r14, %rdx
10003656b:	e8 4c fc ff ff	callq	0x1000361bc
100036570:	48 8d 3d 19 cf 00 00	leaq	53017(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
100036577:	e8 2a b7 00 00	callq	0x100041ca6 ## symbol stub for: _os_variant_is_darwinos
10003657c:	84 c0	testb	%al, %al
10003657e:	74 11	je	0x100036591
100036580:	48 8d 3d 90 b4 01 00	leaq	111760(%rip), %rdi ## literal pool for: "darwinos-boot-task"
100036587:	31 f6	xorl	%esi, %esi
100036589:	4c 89 f2	movq	%r14, %rdx
10003658c:	e8 2b fc ff ff	callq	0x1000361bc
100036591:	48 8d 3d 92 b4 01 00	leaq	111762(%rip), %rdi ## literal pool for: "cache-start"
100036598:	31 f6	xorl	%esi, %esi
10003659a:	4c 89 f2	movq	%r14, %rdx
10003659d:	e8 1a fc ff ff	callq	0x1000361bc
1000365a2:	48 8d 3d 8d b4 01 00	leaq	111757(%rip), %rdi ## literal pool for: "bootroot"
1000365a9:	31 f6	xorl	%esi, %esi
1000365ab:	4c 89 f2	movq	%r14, %rdx
1000365ae:	e8 09 fc ff ff	callq	0x1000361bc
1000365b3:	48 8d 3d 85 b4 01 00	leaq	111749(%rip), %rdi ## literal pool for: "dirs_cleaner"
1000365ba:	31 f6	xorl	%esi, %esi
1000365bc:	4c 89 f2	movq	%r14, %rdx
1000365bf:	e8 f8 fb ff ff	callq	0x1000361bc
1000365c4:	e8 e3 ec ff ff	callq	0x1000352ac
1000365c9:	4c 8d 2d 03 c2 02 00	leaq	180739(%rip), %r13
1000365d0:	41 8a 45 00	movb	(%r13), %al
1000365d4:	41 0a 07	orb	(%r15), %al
1000365d7:	75 05	jne	0x1000365de
1000365d9:	e8 ab df ff ff	callq	0x100034589
1000365de:	48 8d 3d 67 b4 01 00	leaq	111719(%rip), %rdi ## literal pool for: "xpcroleaccountd"
1000365e5:	31 f6	xorl	%esi, %esi
1000365e7:	4c 89 f2	movq	%r14, %rdx
1000365ea:	e8 cd fb ff ff	callq	0x1000361bc
1000365ef:	48 8d 3d 66 b4 01 00	leaq	111718(%rip), %rdi ## literal pool for: "init_featureflags"
1000365f6:	31 f6	xorl	%esi, %esi
1000365f8:	4c 89 f2	movq	%r14, %rdx
1000365fb:	e8 bc fb ff ff	callq	0x1000361bc
100036600:	e8 4d 6a 00 00	callq	0x10003d052
100036605:	41 8a 4d 00	movb	(%r13), %cl
100036609:	41 8a 07	movb	(%r15), %al
10003660c:	89 ca	movl	%ecx, %edx
10003660e:	08 c2	orb	%al, %dl
100036610:	49 bc aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %r12
10003661a:	0f 85 e6 03 00 00	jne	0x100036a06
100036620:	48 c7 85 08 f7 ff ff 00 00 00 00	movq	$0, -2296(%rbp)
10003662b:	48 8d bd 10 f7 ff ff	leaq	-2288(%rbp), %rdi
100036632:	ba 00 04 00 00	movl	$1024, %edx
100036637:	be aa 00 00 00	movl	$170, %esi
10003663c:	e8 99 b5 00 00	callq	0x100041bda ## symbol stub for: _memset
100036641:	48 8d 05 a0 c1 02 00	leaq	180640(%rip), %rax
100036648:	80 38 00	cmpb	$0, (%rax)
10003664b:	0f 85 ae 03 00 00	jne	0x1000369ff
100036651:	48 8d 3d cc b6 01 00	leaq	112332(%rip), %rdi ## literal pool for: "/etc/sysctl.conf"
100036658:	48 8d 35 d6 b6 01 00	leaq	112342(%rip), %rsi ## literal pool for: "r"
10003665f:	e8 c0 b3 00 00	callq	0x100041a24 ## symbol stub for: _fopen
100036664:	48 85 c0	testq	%rax, %rax
100036667:	0f 84 5d 03 00 00	je	0x1000369ca
10003666d:	48 89 c3	movq	%rax, %rbx
100036670:	48 8d b5 08 f7 ff ff	leaq	-2296(%rbp), %rsi
100036677:	48 89 c7	movq	%rax, %rdi
10003667a:	e8 99 b3 00 00	callq	0x100041a18 ## symbol stub for: _fgetln
10003667f:	48 85 c0	testq	%rax, %rax
100036682:	0f 84 20 03 00 00	je	0x1000369a8
100036688:	49 89 c5	movq	%rax, %r13
10003668b:	41 bc 00 40 00 00	movl	$16384, %r12d
100036691:	4c 8b bd 08 f7 ff ff	movq	-2296(%rbp), %r15
100036698:	4d 85 ff	testq	%r15, %r15
10003669b:	0f 84 4d 02 00 00	je	0x1000368ee
1000366a1:	49 ff cf	decq	%r15
1000366a4:	41 0f be 7d 00	movsbl	(%r13), %edi
1000366a9:	85 ff	testl	%edi, %edi
1000366ab:	78 12	js	0x1000366bf
1000366ad:	89 f8	movl	%edi, %eax
1000366af:	48 8b 0d 5a 19 02 00	movq	137562(%rip), %rcx ## literal pool symbol address: __DefaultRuneLocale
1000366b6:	8b 44 81 3c	movl	60(%rcx,%rax,4), %eax
1000366ba:	44 21 e0	andl	%r12d, %eax
1000366bd:	eb 0a	jmp	0x1000366c9
1000366bf:	be 00 40 00 00	movl	$16384, %esi
1000366c4:	e8 9d b0 00 00	callq	0x100041766 ## symbol stub for: ___maskrune
1000366c9:	85 c0	testl	%eax, %eax
1000366cb:	74 15	je	0x1000366e2
1000366cd:	49 ff c5	incq	%r13
1000366d0:	4c 89 bd 08 f7 ff ff	movq	%r15, -2296(%rbp)
1000366d7:	49 83 c7 ff	addq	$-1, %r15
1000366db:	72 c7	jb	0x1000366a4
1000366dd:	e9 0c 02 00 00	jmp	0x1000368ee
1000366e2:	48 8b 95 08 f7 ff ff	movq	-2296(%rbp), %rdx
1000366e9:	48 85 d2	testq	%rdx, %rdx
1000366ec:	0f 84 fc 01 00 00	je	0x1000368ee
1000366f2:	41 8a 44 15 ff	movb	-1(%r13,%rdx), %al
1000366f7:	3c 0d	cmpb	$13, %al
1000366f9:	74 04	je	0x1000366ff
1000366fb:	3c 0a	cmpb	$10, %al
1000366fd:	75 11	jne	0x100036710
1000366ff:	48 ff ca	decq	%rdx
100036702:	48 89 95 08 f7 ff ff	movq	%rdx, -2296(%rbp)
100036709:	75 e7	jne	0x1000366f2
10003670b:	e9 de 01 00 00	jmp	0x1000368ee
100036710:	41 80 7d 00 23	cmpb	$35, (%r13)
100036715:	0f 84 d3 01 00 00	je	0x1000368ee
10003671b:	b8 ff 03 00 00	movl	$1023, %eax
100036720:	48 39 c2	cmpq	%rax, %rdx
100036723:	48 0f 43 d0	cmovaeq	%rax, %rdx
100036727:	48 89 95 08 f7 ff ff	movq	%rdx, -2296(%rbp)
10003672e:	b9 00 04 00 00	movl	$1024, %ecx
100036733:	4c 8d bd 10 f7 ff ff	leaq	-2288(%rbp), %r15
10003673a:	4c 89 ff	movq	%r15, %rdi
10003673d:	4c 89 ee	movq	%r13, %rsi
100036740:	e8 27 b0 00 00	callq	0x10004176c ## symbol stub for: ___memcpy_chk
100036745:	48 8b 85 08 f7 ff ff	movq	-2296(%rbp), %rax
10003674c:	c6 84 05 10 f7 ff ff 00	movb	$0, -2288(%rbp,%rax)
100036754:	48 8d 05 10 b6 01 00	leaq	112144(%rip), %rax ## literal pool for: "sysctl"
10003675b:	48 89 45 b0	movq	%rax, -80(%rbp)
10003675f:	4c 89 7d b8	movq	%r15, -72(%rbp)
100036763:	48 c7 45 c0 00 00 00 00	movq	$0, -64(%rbp)
10003676b:	49 bf aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %r15
100036775:	4c 89 bd e8 f6 ff ff	movq	%r15, -2328(%rbp)
10003677c:	4c 8d ad e8 f6 ff ff	leaq	-2328(%rbp), %r13
100036783:	4c 89 ef	movq	%r13, %rdi
100036786:	e8 51 b5 00 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
10003678b:	85 c0	testl	%eax, %eax
10003678d:	0f 85 5d 04 00 00	jne	0x100036bf0
100036793:	4c 89 ef	movq	%r13, %rdi
100036796:	be 0c 40 00 00	movl	$16396, %esi
10003679b:	e8 78 b5 00 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
1000367a0:	85 c0	testl	%eax, %eax
1000367a2:	0f 85 4f 04 00 00	jne	0x100036bf7
1000367a8:	c7 85 f8 f6 ff ff 00 00 00 00	movl	$0, -2312(%rbp)
1000367b2:	4c 89 ef	movq	%r13, %rdi
1000367b5:	48 8d b5 f8 f6 ff ff	leaq	-2312(%rbp), %rsi
1000367bc:	e8 6f b5 00 00	callq	0x100041d30 ## symbol stub for: _posix_spawnattr_setsigmask
1000367c1:	85 c0	testl	%eax, %eax
1000367c3:	0f 85 35 04 00 00	jne	0x100036bfe
1000367c9:	c7 85 fc f6 ff ff ff ff ff ff	movl	$4294967295, -2308(%rbp)
1000367d3:	4c 89 ef	movq	%r13, %rdi
1000367d6:	48 8d b5 fc f6 ff ff	leaq	-2308(%rbp), %rsi
1000367dd:	e8 48 b5 00 00	callq	0x100041d2a ## symbol stub for: _posix_spawnattr_setsigdefault
1000367e2:	85 c0	testl	%eax, %eax
1000367e4:	0f 85 1b 04 00 00	jne	0x100036c05
1000367ea:	4c 89 bd f0 f6 ff ff	movq	%r15, -2320(%rbp)
1000367f1:	4c 8d ad f0 f6 ff ff	leaq	-2320(%rbp), %r13
1000367f8:	4c 89 ef	movq	%r13, %rdi
1000367fb:	e8 d0 b4 00 00	callq	0x100041cd0 ## symbol stub for: _posix_spawn_file_actions_init
100036800:	83 f8 ff	cmpl	$-1, %eax
100036803:	0f 84 03 04 00 00	je	0x100036c0c
100036809:	4c 89 ef	movq	%r13, %rdi
10003680c:	31 f6	xorl	%esi, %esi
10003680e:	48 8d 15 21 12 01 00	leaq	70177(%rip), %rdx ## literal pool for: "/dev/console"
100036815:	b9 00 00 02 00	movl	$131072, %ecx
10003681a:	45 31 c0	xorl	%r8d, %r8d
10003681d:	e8 a2 b4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100036822:	83 f8 ff	cmpl	$-1, %eax
100036825:	4c 8d bd 10 f7 ff ff	leaq	-2288(%rbp), %r15
10003682c:	0f 84 df 03 00 00	je	0x100036c11
100036832:	4c 89 ef	movq	%r13, %rdi
100036835:	be 01 00 00 00	movl	$1, %esi
10003683a:	48 8d 15 f5 11 01 00	leaq	70133(%rip), %rdx ## literal pool for: "/dev/console"
100036841:	b9 01 00 02 00	movl	$131073, %ecx
100036846:	45 31 c0	xorl	%r8d, %r8d
100036849:	e8 76 b4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
10003684e:	83 f8 ff	cmpl	$-1, %eax
100036851:	0f 84 bf 03 00 00	je	0x100036c16
100036857:	4c 89 ef	movq	%r13, %rdi
10003685a:	be 02 00 00 00	movl	$2, %esi
10003685f:	48 8d 15 d0 11 01 00	leaq	70096(%rip), %rdx ## literal pool for: "/dev/console"
100036866:	b9 02 00 02 00	movl	$131074, %ecx
10003686b:	45 31 c0	xorl	%r8d, %r8d
10003686e:	e8 51 b4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100036873:	83 f8 ff	cmpl	$-1, %eax
100036876:	0f 84 9f 03 00 00	je	0x100036c1b
10003687c:	0f 28 05 3d 4f 02 00	movaps	151357(%rip), %xmm0
100036883:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100036887:	0f 28 05 22 4f 02 00	movaps	151330(%rip), %xmm0
10003688e:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100036892:	c7 85 04 f7 ff ff 00 00 00 00	movl	$0, -2300(%rbp)
10003689c:	48 8d bd 04 f7 ff ff	leaq	-2300(%rbp), %rdi
1000368a3:	48 8d 35 b0 b4 01 00	leaq	111792(%rip), %rsi ## literal pool for: "/usr/sbin/sysctl"
1000368aa:	4c 89 ea	movq	%r13, %rdx
1000368ad:	4c 8d ad e8 f6 ff ff	leaq	-2328(%rbp), %r13
1000368b4:	4c 89 e9	movq	%r13, %rcx
1000368b7:	4c 8d 45 b0	leaq	-80(%rbp), %r8
1000368bb:	4c 8d 4d 90	leaq	-112(%rbp), %r9
1000368bf:	e8 72 b4 00 00	callq	0x100041d36 ## symbol stub for: _posix_spawnp
1000368c4:	85 c0	testl	%eax, %eax
1000368c6:	74 46	je	0x10003690e
1000368c8:	4c 89 ef	movq	%r13, %rdi
1000368cb:	e8 06 b4 00 00	callq	0x100041cd6 ## symbol stub for: _posix_spawnattr_destroy
1000368d0:	83 f8 ff	cmpl	$-1, %eax
1000368d3:	0f 84 47 03 00 00	je	0x100036c20
1000368d9:	48 8d bd f0 f6 ff ff	leaq	-2320(%rbp), %rdi
1000368e0:	e8 e5 b3 00 00	callq	0x100041cca ## symbol stub for: _posix_spawn_file_actions_destroy
1000368e5:	83 f8 ff	cmpl	$-1, %eax
1000368e8:	0f 84 37 03 00 00	je	0x100036c25
1000368ee:	48 89 df	movq	%rbx, %rdi
1000368f1:	48 8d b5 08 f7 ff ff	leaq	-2296(%rbp), %rsi
1000368f8:	e8 1b b1 00 00	callq	0x100041a18 ## symbol stub for: _fgetln
1000368fd:	49 89 c5	movq	%rax, %r13
100036900:	48 85 c0	testq	%rax, %rax
100036903:	0f 85 88 fd ff ff	jne	0x100036691
100036909:	e9 9a 00 00 00	jmp	0x1000369a8
10003690e:	c7 85 00 f7 ff ff 00 00 00 00	movl	$0, -2304(%rbp)
100036918:	8b bd 04 f7 ff ff	movl	-2300(%rbp), %edi
10003691e:	48 8d b5 00 f7 ff ff	leaq	-2304(%rbp), %rsi
100036925:	31 d2	xorl	%edx, %edx
100036927:	e8 f6 b5 00 00	callq	0x100041f22 ## symbol stub for: _waitpid
10003692c:	3b 85 04 f7 ff ff	cmpl	-2300(%rbp), %eax
100036932:	74 0f	je	0x100036943
100036934:	e8 27 ae 00 00	callq	0x100041760 ## symbol stub for: ___error
100036939:	8b 38	movl	(%rax), %edi
10003693b:	85 ff	testl	%edi, %edi
10003693d:	0f 85 e7 02 00 00	jne	0x100036c2a
100036943:	8b 8d 00 f7 ff ff	movl	-2304(%rbp), %ecx
100036949:	89 cf	movl	%ecx, %edi
10003694b:	83 e7 7f	andl	$127, %edi
10003694e:	83 ff 7f	cmpl	$127, %edi
100036951:	0f 84 71 ff ff ff	je	0x1000368c8
100036957:	85 ff	testl	%edi, %edi
100036959:	75 2a	jne	0x100036985
10003695b:	c1 e9 08	shrl	$8, %ecx
10003695e:	81 e1 ff 00 00 00	andl	$255, %ecx
100036964:	0f 84 5e ff ff ff	je	0x1000368c8
10003696a:	bf 03 00 01 00	movl	$65539, %edi
10003696f:	48 8d 35 fc b3 01 00	leaq	111612(%rip), %rsi ## literal pool for: "Could not set sysctl \"%s\": exit code = %d"
100036976:	4c 89 fa	movq	%r15, %rdx
100036979:	31 c0	xorl	%eax, %eax
10003697b:	e8 48 ec ff ff	callq	0x1000355c8
100036980:	e9 43 ff ff ff	jmp	0x1000368c8
100036985:	e8 f0 b4 00 00	callq	0x100041e7a ## symbol stub for: _strsignal
10003698a:	bf 03 00 01 00	movl	$65539, %edi
10003698f:	48 8d 35 06 b4 01 00	leaq	111622(%rip), %rsi ## literal pool for: "Could not set sysctl \"%s\": signal = %s"
100036996:	4c 89 fa	movq	%r15, %rdx
100036999:	48 89 c1	movq	%rax, %rcx
10003699c:	31 c0	xorl	%eax, %eax
10003699e:	e8 25 ec ff ff	callq	0x1000355c8
1000369a3:	e9 20 ff ff ff	jmp	0x1000368c8
1000369a8:	48 89 df	movq	%rbx, %rdi
1000369ab:	e8 4b bf ff ff	callq	0x1000328fb
1000369b0:	49 bc aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %r12
1000369ba:	4c 8d 2d 12 be 02 00	leaq	179730(%rip), %r13
1000369c1:	4c 8d 3d 0c be 02 00	leaq	179724(%rip), %r15
1000369c8:	eb 35	jmp	0x1000369ff
1000369ca:	e8 91 ad 00 00	callq	0x100041760 ## symbol stub for: ___error
1000369cf:	83 38 02	cmpl	$2, (%rax)
1000369d2:	74 2b	je	0x1000369ff
1000369d4:	e8 87 ad 00 00	callq	0x100041760 ## symbol stub for: ___error
1000369d9:	8b 18	movl	(%rax), %ebx
1000369db:	e8 80 ad 00 00	callq	0x100041760 ## symbol stub for: ___error
1000369e0:	8b 38	movl	(%rax), %edi
1000369e2:	e8 57 b4 00 00	callq	0x100041e3e ## symbol stub for: _strerror
1000369e7:	48 8d 35 49 b3 01 00	leaq	111433(%rip), %rsi ## literal pool for: "Could not open sysctl.conf: %d: %s"
1000369ee:	bf 03 00 01 00	movl	$65539, %edi
1000369f3:	89 da	movl	%ebx, %edx
1000369f5:	48 89 c1	movq	%rax, %rcx
1000369f8:	31 c0	xorl	%eax, %eax
1000369fa:	e8 c9 eb ff ff	callq	0x1000355c8
1000369ff:	41 8a 4d 00	movb	(%r13), %cl
100036a03:	41 8a 07	movb	(%r15), %al
100036a06:	84 c9	testb	%cl, %cl
100036a08:	75 3a	jne	0x100036a44
100036a0a:	84 c0	testb	%al, %al
100036a0c:	75 36	jne	0x100036a44
100036a0e:	48 8d 05 d3 bd 02 00	leaq	179667(%rip), %rax
100036a15:	80 38 00	cmpb	$0, (%rax)
100036a18:	75 2a	jne	0x100036a44
100036a1a:	e8 d9 b1 00 00	callq	0x100041bf8 ## symbol stub for: _ne_session_initialize_necp_drop_all
100036a1f:	85 c0	testl	%eax, %eax
100036a21:	74 21	je	0x100036a44
100036a23:	89 c3	movl	%eax, %ebx
100036a25:	89 c7	movl	%eax, %edi
100036a27:	e8 12 b4 00 00	callq	0x100041e3e ## symbol stub for: _strerror
100036a2c:	48 8d 35 90 b3 01 00	leaq	111504(%rip), %rsi ## literal pool for: "Could not opt into Always-On VPN: %d: %s"
100036a33:	bf 03 00 01 00	movl	$65539, %edi
100036a38:	89 da	movl	%ebx, %edx
100036a3a:	48 89 c1	movq	%rax, %rcx
100036a3d:	31 c0	xorl	%eax, %eax
100036a3f:	e8 84 eb ff ff	callq	0x1000355c8
100036a44:	48 8d 3d 23 b0 01 00	leaq	110627(%rip), %rdi ## literal pool for: "EndpointSecurity"
100036a4b:	31 f6	xorl	%esi, %esi
100036a4d:	4c 89 f2	movq	%r14, %rdx
100036a50:	e8 67 f7 ff ff	callq	0x1000361bc
100036a55:	48 8d 3d 23 b0 01 00	leaq	110627(%rip), %rdi ## literal pool for: "rc.server"
100036a5c:	31 f6	xorl	%esi, %esi
100036a5e:	4c 89 f2	movq	%r14, %rdx
100036a61:	e8 56 f7 ff ff	callq	0x1000361bc
100036a66:	48 8d 3d 1c b0 01 00	leaq	110620(%rip), %rdi ## literal pool for: "tzinit"
100036a6d:	31 f6	xorl	%esi, %esi
100036a6f:	4c 89 f2	movq	%r14, %rdx
100036a72:	e8 45 f7 ff ff	callq	0x1000361bc
100036a77:	48 8d 3d 12 b0 01 00	leaq	110610(%rip), %rdi ## literal pool for: "dirhelper"
100036a7e:	31 f6	xorl	%esi, %esi
100036a80:	4c 89 f2	movq	%r14, %rdx
100036a83:	e8 34 f7 ff ff	callq	0x1000361bc
100036a88:	48 8d 3d 0b b0 01 00	leaq	110603(%rip), %rdi ## literal pool for: "rootless-init"
100036a8f:	31 f6	xorl	%esi, %esi
100036a91:	4c 89 f2	movq	%r14, %rdx
100036a94:	e8 23 f7 ff ff	callq	0x1000361bc
100036a99:	48 8d 3d 08 b0 01 00	leaq	110600(%rip), %rdi ## literal pool for: "finish-demo-restore"
100036aa0:	31 f6	xorl	%esi, %esi
100036aa2:	4c 89 f2	movq	%r14, %rdx
100036aa5:	e8 12 f7 ff ff	callq	0x1000361bc
100036aaa:	e8 43 5e 00 00	callq	0x10003c8f2
100036aaf:	48 8d 3d 06 b0 01 00	leaq	110598(%rip), %rdi ## literal pool for: "systemstats"
100036ab6:	31 f6	xorl	%esi, %esi
100036ab8:	4c 89 f2	movq	%r14, %rdx
100036abb:	e8 fc f6 ff ff	callq	0x1000361bc
100036ac0:	48 8d 3d 01 b0 01 00	leaq	110593(%rip), %rdi ## literal pool for: "prng_seedctl"
100036ac7:	31 f6	xorl	%esi, %esi
100036ac9:	4c 89 f2	movq	%r14, %rdx
100036acc:	e8 eb f6 ff ff	callq	0x1000361bc
100036ad1:	41 80 7d 00 00	cmpb	$0, (%r13)
100036ad6:	75 4d	jne	0x100036b25
100036ad8:	48 8d 3d f6 af 01 00	leaq	110582(%rip), %rdi ## literal pool for: "/var/run/utmpx"
100036adf:	be 00 02 00 00	movl	$512, %esi
100036ae4:	ba b6 01 00 00	movl	$438, %edx
100036ae9:	31 c0	xorl	%eax, %eax
100036aeb:	e8 26 b1 00 00	callq	0x100041c16 ## symbol stub for: _open
100036af0:	83 f8 ff	cmpl	$-1, %eax
100036af3:	74 07	je	0x100036afc
100036af5:	89 c7	movl	%eax, %edi
100036af7:	e8 b8 bc ff ff	callq	0x1000327b4
100036afc:	48 8d 3d e1 af 01 00	leaq	110561(%rip), %rdi ## literal pool for: "/etc/nologin"
100036b03:	e8 94 b2 00 00	callq	0x100041d9c ## symbol stub for: _remove
100036b08:	48 8d 05 de bc 02 00	leaq	179422(%rip), %rax
100036b0f:	80 38 00	cmpb	$0, (%rax)
100036b12:	74 11	je	0x100036b25
100036b14:	48 8d 3d d6 af 01 00	leaq	110550(%rip), %rdi ## literal pool for: "rc.trampoline"
100036b1b:	31 f6	xorl	%esi, %esi
100036b1d:	4c 89 f2	movq	%r14, %rdx
100036b20:	e8 97 f6 ff ff	callq	0x1000361bc
100036b25:	e8 c2 67 00 00	callq	0x10003d2ec
100036b2a:	31 ff	xorl	%edi, %edi
100036b2c:	e8 53 b5 fd ff	callq	0x100012084
100036b31:	4c 89 a5 2d f7 ff ff	movq	%r12, -2259(%rbp)
100036b38:	0f 28 05 41 c7 00 00	movaps	51009(%rip), %xmm0
100036b3f:	0f 29 85 20 f7 ff ff	movaps	%xmm0, -2272(%rbp)
100036b46:	0f 29 85 10 f7 ff ff	movaps	%xmm0, -2288(%rbp)
100036b4d:	48 8d 5d 90	leaq	-112(%rbp), %rbx
100036b51:	0f 29 03	movaps	%xmm0, (%rbx)
100036b54:	e8 fb ab 00 00	callq	0x100041754 ## symbol stub for: __NSGetMachExecuteHeader
100036b59:	48 89 c7	movq	%rax, %rdi
100036b5c:	48 89 de	movq	%rbx, %rsi
100036b5f:	e8 26 ac 00 00	callq	0x10004178a ## symbol stub for: __dyld_get_image_uuid
100036b64:	84 c0	testb	%al, %al
100036b66:	74 75	je	0x100036bdd
100036b68:	48 8d 7d 90	leaq	-112(%rbp), %rdi
100036b6c:	48 8d 9d 10 f7 ff ff	leaq	-2288(%rbp), %rbx
100036b73:	48 89 de	movq	%rbx, %rsi
100036b76:	e8 83 b3 00 00	callq	0x100041efe ## symbol stub for: _uuid_unparse
100036b7b:	48 8d 35 7d af 01 00	leaq	110461(%rip), %rsi ## literal pool for: "launchd UUID: %s"
100036b82:	bf 05 00 01 00	movl	$65541, %edi
100036b87:	48 89 da	movq	%rbx, %rdx
100036b8a:	31 c0	xorl	%eax, %eax
100036b8c:	e8 37 ea ff ff	callq	0x1000355c8
100036b91:	48 8d 35 78 af 01 00	leaq	110456(%rip), %rsi ## literal pool for: "Early boot complete. Continuing system boot."
100036b98:	bf 05 00 01 00	movl	$65541, %edi
100036b9d:	31 c0	xorl	%eax, %eax
100036b9f:	e8 24 ea ff ff	callq	0x1000355c8
100036ba4:	e8 bc 3f ff ff	callq	0x10002ab65
100036ba9:	48 8b 05 78 14 02 00	movq	136312(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036bb0:	48 8b 00	movq	(%rax), %rax
100036bb3:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100036bb7:	75 76	jne	0x100036c2f
100036bb9:	48 81 c4 f8 08 00 00	addq	$2296, %rsp
100036bc0:	5b	popq	%rbx
100036bc1:	41 5c	popq	%r12
100036bc3:	41 5d	popq	%r13
100036bc5:	41 5e	popq	%r14
100036bc7:	41 5f	popq	%r15
100036bc9:	5d	popq	%rbp
100036bca:	c3	retq
100036bcb:	e8 90 ab 00 00	callq	0x100041760 ## symbol stub for: ___error
100036bd0:	48 63 38	movslq	(%rax), %rdi
100036bd3:	e8 ca ab 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100036bd8:	e9 77 f8 ff ff	jmp	0x100036454
100036bdd:	31 ff	xorl	%edi, %edi
100036bdf:	e8 be ab 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100036be4:	eb ab	jmp	0x100036b91
100036be6:	e8 6e a4 00 00	callq	0x100041059
100036beb:	e9 96 f7 ff ff	jmp	0x100036386
100036bf0:	89 c7	movl	%eax, %edi
100036bf2:	e8 4c a4 00 00	callq	0x100041043
100036bf7:	89 c7	movl	%eax, %edi
100036bf9:	e8 2f a4 00 00	callq	0x10004102d
100036bfe:	89 c7	movl	%eax, %edi
100036c00:	e8 12 a4 00 00	callq	0x100041017
100036c05:	89 c7	movl	%eax, %edi
100036c07:	e8 f5 a3 00 00	callq	0x100041001
100036c0c:	e8 38 a3 00 00	callq	0x100040f49
100036c11:	e8 4e a3 00 00	callq	0x100040f64
100036c16:	e8 64 a3 00 00	callq	0x100040f7f
100036c1b:	e8 7a a3 00 00	callq	0x100040f9a
100036c20:	e8 90 a3 00 00	callq	0x100040fb5
100036c25:	e8 a6 a3 00 00	callq	0x100040fd0
100036c2a:	e8 bc a3 00 00	callq	0x100040feb
100036c2f:	e8 3e ab 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100036c34:	55	pushq	%rbp
100036c35:	48 89 e5	movq	%rsp, %rbp
100036c38:	41 57	pushq	%r15
100036c3a:	41 56	pushq	%r14
100036c3c:	41 55	pushq	%r13
100036c3e:	41 54	pushq	%r12
100036c40:	53	pushq	%rbx
100036c41:	48 81 ec 98 01 00 00	subq	$408, %rsp
100036c48:	89 d3	movl	%edx, %ebx
100036c4a:	49 89 f5	movq	%rsi, %r13
100036c4d:	49 89 ff	movq	%rdi, %r15
100036c50:	48 8b 05 d1 13 02 00	movq	136145(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036c57:	48 8b 00	movq	(%rax), %rax
100036c5a:	48 89 45 d0	movq	%rax, -48(%rbp)
100036c5e:	48 8d 35 d8 ae 01 00	leaq	110296(%rip), %rsi ## literal pool for: "Doing boot task: %s"
100036c65:	bf 05 00 01 00	movl	$65541, %edi
100036c6a:	4c 89 fa	movq	%r15, %rdx
100036c6d:	31 c0	xorl	%eax, %eax
100036c6f:	e8 54 e9 ff ff	callq	0x1000355c8
100036c74:	48 8d 35 d6 ae 01 00	leaq	110294(%rip), %rsi ## literal pool for: "Block"
100036c7b:	4c 89 ef	movq	%r13, %rdi
100036c7e:	e8 d7 b3 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100036c83:	48 85 c0	testq	%rax, %rax
100036c86:	0f 84 a0 00 00 00	je	0x100036d2c
100036c8c:	48 8d 35 92 cc 00 00	leaq	52370(%rip), %rsi ## literal pool for: "Program"
100036c93:	4c 89 ef	movq	%r13, %rdi
100036c96:	e8 bf b3 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100036c9b:	48 85 c0	testq	%rax, %rax
100036c9e:	0f 85 52 08 00 00	jne	0x1000374f6
100036ca4:	48 8d 35 82 cc 00 00	leaq	52354(%rip), %rsi ## literal pool for: "ProgramArguments"
100036cab:	4c 89 ef	movq	%r13, %rdi
100036cae:	e8 b9 b3 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100036cb3:	48 85 c0	testq	%rax, %rax
100036cb6:	0f 85 3f 08 00 00	jne	0x1000374fb
100036cbc:	48 8d 35 8e ae 01 00	leaq	110222(%rip), %rsi ## literal pool for: "Block"
100036cc3:	4c 89 ef	movq	%r13, %rdi
100036cc6:	e8 8f b3 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100036ccb:	48 85 c0	testq	%rax, %rax
100036cce:	0f 84 72 08 00 00	je	0x100037546
100036cd4:	48 89 c7	movq	%rax, %rdi
100036cd7:	e8 15 87 fe ff	callq	0x10001f3f1
100036cdc:	48 89 c3	movq	%rax, %rbx
100036cdf:	bf 45 00 00 22	movl	$570425413, %edi
100036ce4:	4c 89 fe	movq	%r15, %rsi
100036ce7:	e8 03 62 fd ff	callq	0x10000ceef
100036cec:	48 89 df	movq	%rbx, %rdi
100036cef:	ff 53 10	callq	*16(%rbx)
100036cf2:	bf 46 00 00 22	movl	$570425414, %edi
100036cf7:	4c 89 fe	movq	%r15, %rsi
100036cfa:	e8 f0 61 fd ff	callq	0x10000ceef
100036cff:	48 8b 05 22 13 02 00	movq	135970(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100036d06:	48 8b 00	movq	(%rax), %rax
100036d09:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100036d0d:	0f 85 2e 08 00 00	jne	0x100037541
100036d13:	48 89 df	movq	%rbx, %rdi
100036d16:	48 81 c4 98 01 00 00	addq	$408, %rsp
100036d1d:	5b	popq	%rbx
100036d1e:	41 5c	popq	%r12
100036d20:	41 5d	popq	%r13
100036d22:	41 5e	popq	%r14
100036d24:	41 5f	popq	%r15
100036d26:	5d	popq	%rbp
100036d27:	e9 0a aa 00 00	jmp	0x100041736 ## symbol stub for: __Block_release
100036d2c:	c7 85 8c fe ff ff ff ff ff ff	movl	$4294967295, -372(%rbp)
100036d36:	f6 c3 01	testb	$1, %bl
100036d39:	0f 85 a8 00 00 00	jne	0x100036de7
100036d3f:	48 8d 35 d2 b0 01 00	leaq	110802(%rip), %rsi ## literal pool for: "RequireRun"
100036d46:	4c 89 ef	movq	%r13, %rdi
100036d49:	e8 e8 b2 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036d4e:	89 85 88 fe ff ff	movl	%eax, -376(%rbp)
100036d54:	48 8d 35 c8 b0 01 00	leaq	110792(%rip), %rsi ## literal pool for: "RequireSuccess"
100036d5b:	4c 89 ef	movq	%r13, %rdi
100036d5e:	e8 d3 b2 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036d63:	41 89 c4	movl	%eax, %r12d
100036d66:	48 8d 35 c5 b0 01 00	leaq	110789(%rip), %rsi ## literal pool for: "RebootOnSuccess"
100036d6d:	4c 89 ef	movq	%r13, %rdi
100036d70:	e8 c1 b2 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036d75:	41 89 c6	movl	%eax, %r14d
100036d78:	48 8d 35 c3 b0 01 00	leaq	110787(%rip), %rsi ## literal pool for: "AssumeSingleUserSuccess"
100036d7f:	4c 89 ef	movq	%r13, %rdi
100036d82:	e8 af b2 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036d87:	89 85 84 fe ff ff	movl	%eax, -380(%rbp)
100036d8d:	48 8d 35 c6 b0 01 00	leaq	110790(%rip), %rsi ## literal pool for: "RebootOnExitCode"
100036d94:	4c 89 ef	movq	%r13, %rdi
100036d97:	e8 d0 b2 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100036d9c:	48 85 c0	testq	%rax, %rax
100036d9f:	74 60	je	0x100036e01
100036da1:	48 89 c3	movq	%rax, %rbx
100036da4:	48 89 c7	movq	%rax, %rdi
100036da7:	e8 1a b3 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100036dac:	48 3b 05 5d 13 02 00	cmpq	136029(%rip), %rax ## literal pool symbol address: __xpc_type_int64
100036db3:	75 4c	jne	0x100036e01
100036db5:	48 89 df	movq	%rbx, %rdi
100036db8:	e8 15 b3 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
100036dbd:	48 89 c3	movq	%rax, %rbx
100036dc0:	83 fb ff	cmpl	$-1, %ebx
100036dc3:	74 3c	je	0x100036e01
100036dc5:	48 8d 35 9f b0 01 00	leaq	110751(%rip), %rsi ## literal pool for: "%s: will reboot if exits with code: %d"
100036dcc:	bf 07 00 01 00	movl	$65543, %edi
100036dd1:	4c 89 fa	movq	%r15, %rdx
100036dd4:	89 d9	movl	%ebx, %ecx
100036dd6:	31 c0	xorl	%eax, %eax
100036dd8:	e8 eb e7 ff ff	callq	0x1000355c8
100036ddd:	89 d8	movl	%ebx, %eax
100036ddf:	89 9d 8c fe ff ff	movl	%ebx, -372(%rbp)
100036de5:	eb 1a	jmp	0x100036e01
100036de7:	c7 85 88 fe ff ff 00 00 00 00	movl	$0, -376(%rbp)
100036df1:	45 31 e4	xorl	%r12d, %r12d
100036df4:	45 31 f6	xorl	%r14d, %r14d
100036df7:	c7 85 84 fe ff ff 00 00 00 00	movl	$0, -380(%rbp)
100036e01:	48 8d 35 8a b0 01 00	leaq	110730(%rip), %rsi ## literal pool for: "RemoveOnSuccess"
100036e08:	4c 89 ef	movq	%r13, %rdi
100036e0b:	e8 26 b2 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036e10:	84 c0	testb	%al, %al
100036e12:	74 5f	je	0x100036e73
100036e14:	4c 89 ef	movq	%r13, %rdi
100036e17:	e8 1e 14 00 00	callq	0x10003823a
100036e1c:	48 85 c0	testq	%rax, %rax
100036e1f:	74 52	je	0x100036e73
100036e21:	48 89 c3	movq	%rax, %rbx
100036e24:	0f 28 05 55 c4 00 00	movaps	50261(%rip), %xmm0
100036e2b:	48 8d b5 10 ff ff ff	leaq	-240(%rbp), %rsi
100036e32:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
100036e39:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
100036e3d:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
100036e41:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
100036e45:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
100036e49:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
100036e4d:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
100036e51:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
100036e55:	0f 29 06	movaps	%xmm0, (%rsi)
100036e58:	48 89 c7	movq	%rax, %rdi
100036e5b:	e8 b4 af 00 00	callq	0x100041e14 ## symbol stub for: _stat$INODE64
100036e60:	85 c0	testl	%eax, %eax
100036e62:	0f 85 6c 06 00 00	jne	0x1000374d4
100036e68:	b0 01	movb	$1, %al
100036e6a:	48 89 85 68 fe ff ff	movq	%rax, -408(%rbp)
100036e71:	eb 0b	jmp	0x100036e7e
100036e73:	31 c0	xorl	%eax, %eax
100036e75:	48 89 85 68 fe ff ff	movq	%rax, -408(%rbp)
100036e7c:	31 db	xorl	%ebx, %ebx
100036e7e:	48 89 9d 48 fe ff ff	movq	%rbx, -440(%rbp)
100036e85:	0f 28 05 34 49 02 00	movaps	149812(%rip), %xmm0
100036e8c:	0f 29 85 20 ff ff ff	movaps	%xmm0, -224(%rbp)
100036e93:	0f 28 05 16 49 02 00	movaps	149782(%rip), %xmm0
100036e9a:	0f 29 85 10 ff ff ff	movaps	%xmm0, -240(%rbp)
100036ea1:	4c 89 ef	movq	%r13, %rdi
100036ea4:	e8 91 13 00 00	callq	0x10003823a
100036ea9:	48 89 85 78 fe ff ff	movq	%rax, -392(%rbp)
100036eb0:	48 85 c0	testq	%rax, %rax
100036eb3:	0f 84 9e 06 00 00	je	0x100037557
100036eb9:	48 8d 35 6d ca 00 00	leaq	51821(%rip), %rsi ## literal pool for: "ProgramArguments"
100036ec0:	4c 89 ef	movq	%r13, %rdi
100036ec3:	e8 a4 b1 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100036ec8:	48 85 c0	testq	%rax, %rax
100036ecb:	44 89 b5 58 fe ff ff	movl	%r14d, -424(%rbp)
100036ed2:	74 22	je	0x100036ef6
100036ed4:	48 89 c3	movq	%rax, %rbx
100036ed7:	48 89 c7	movq	%rax, %rdi
100036eda:	e8 e7 b1 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100036edf:	48 3b 05 f2 11 02 00	cmpq	135666(%rip), %rax ## literal pool symbol address: __xpc_type_array
100036ee6:	0f 85 76 06 00 00	jne	0x100037562
100036eec:	48 89 df	movq	%rbx, %rdi
100036eef:	e8 0e b2 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
100036ef4:	eb 09	jmp	0x100036eff
100036ef6:	31 ff	xorl	%edi, %edi
100036ef8:	31 f6	xorl	%esi, %esi
100036efa:	e8 41 b0 00 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
100036eff:	49 89 c6	movq	%rax, %r14
100036f02:	48 89 c7	movq	%rax, %rdi
100036f05:	e8 42 b0 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100036f0a:	48 85 c0	testq	%rax, %rax
100036f0d:	75 16	jne	0x100036f25
100036f0f:	4c 89 f7	movq	%r14, %rdi
100036f12:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100036f19:	48 8b 95 78 fe ff ff	movq	-392(%rbp), %rdx
100036f20:	e8 51 b0 00 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
100036f25:	48 8d 35 8f b0 01 00	leaq	110735(%rip), %rsi ## literal pool for: "PassLaunchBootModeAsArgument"
100036f2c:	4c 89 ef	movq	%r13, %rdi
100036f2f:	e8 02 b1 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
100036f34:	84 c0	testb	%al, %al
100036f36:	74 1c	je	0x100036f54
100036f38:	e8 dc a9 fc ff	callq	0x100001919
100036f3d:	48 85 c0	testq	%rax, %rax
100036f40:	74 12	je	0x100036f54
100036f42:	4c 89 f7	movq	%r14, %rdi
100036f45:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
100036f4c:	48 89 c2	movq	%rax, %rdx
100036f4f:	e8 22 b0 00 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
100036f54:	44 89 a5 5c fe ff ff	movl	%r12d, -420(%rbp)
100036f5b:	4c 89 bd 60 fe ff ff	movq	%r15, -416(%rbp)
100036f62:	4c 89 f7	movq	%r14, %rdi
100036f65:	e8 e2 af 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100036f6a:	49 89 c7	movq	%rax, %r15
100036f6d:	31 f6	xorl	%esi, %esi
100036f6f:	48 ff c0	incq	%rax
100036f72:	40 0f 94 c6	sete	%sil
100036f76:	48 89 f1	movq	%rsi, %rcx
100036f79:	48 f7 d9	negq	%rcx
100036f7c:	ba 08 00 00 00	movl	$8, %edx
100036f81:	48 f7 e2	mulq	%rdx
100036f84:	0f 90 c2	seto	%dl
100036f87:	48 31 ce	xorq	%rcx, %rsi
100036f8a:	0f 85 d0 05 00 00	jne	0x100037560
100036f90:	48 85 c9	testq	%rcx, %rcx
100036f93:	0f 88 c7 05 00 00	js	0x100037560
100036f99:	84 d2	testb	%dl, %dl
100036f9b:	0f 85 bf 05 00 00	jne	0x100037560
100036fa1:	48 89 c7	movq	%rax, %rdi
100036fa4:	e8 3c 65 fd ff	callq	0x10000d4e5
100036fa9:	49 89 c4	movq	%rax, %r12
100036fac:	4d 85 ff	testq	%r15, %r15
100036faf:	74 1e	je	0x100036fcf
100036fb1:	31 db	xorl	%ebx, %ebx
100036fb3:	4c 89 f7	movq	%r14, %rdi
100036fb6:	48 89 de	movq	%rbx, %rsi
100036fb9:	e8 94 af 00 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
100036fbe:	48 85 c0	testq	%rax, %rax
100036fc1:	74 04	je	0x100036fc7
100036fc3:	49 89 04 dc	movq	%rax, (%r12,%rbx,8)
100036fc7:	48 ff c3	incq	%rbx
100036fca:	49 39 df	cmpq	%rbx, %r15
100036fcd:	75 e4	jne	0x100036fb3
100036fcf:	48 bb aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rbx
100036fd9:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100036fe0:	48 89 1f	movq	%rbx, (%rdi)
100036fe3:	e8 f4 ac 00 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
100036fe8:	85 c0	testl	%eax, %eax
100036fea:	0f 85 10 05 00 00	jne	0x100037500
100036ff0:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100036ff7:	be 0c 40 00 00	movl	$16396, %esi
100036ffc:	e8 17 ad 00 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
100037001:	85 c0	testl	%eax, %eax
100037003:	0f 85 fe 04 00 00	jne	0x100037507
100037009:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100037010:	be 00 04 00 00	movl	$1024, %esi
100037015:	e8 0a ad 00 00	callq	0x100041d24 ## symbol stub for: _posix_spawnattr_setprocesstype_np
10003701a:	85 c0	testl	%eax, %eax
10003701c:	0f 85 ec 04 00 00	jne	0x10003750e
100037022:	48 8d b5 40 fe ff ff	leaq	-448(%rbp), %rsi
100037029:	c7 06 00 00 00 00	movl	$0, (%rsi)
10003702f:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100037036:	e8 f5 ac 00 00	callq	0x100041d30 ## symbol stub for: _posix_spawnattr_setsigmask
10003703b:	85 c0	testl	%eax, %eax
10003703d:	0f 85 d2 04 00 00	jne	0x100037515
100037043:	48 8d b5 44 fe ff ff	leaq	-444(%rbp), %rsi
10003704a:	c7 06 ff ff ff ff	movl	$4294967295, (%rsi)
100037050:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100037057:	e8 ce ac 00 00	callq	0x100041d2a ## symbol stub for: _posix_spawnattr_setsigdefault
10003705c:	85 c0	testl	%eax, %eax
10003705e:	0f 85 b8 04 00 00	jne	0x10003751c
100037064:	48 8d bd 70 fe ff ff	leaq	-400(%rbp), %rdi
10003706b:	48 89 1f	movq	%rbx, (%rdi)
10003706e:	e8 5d ac 00 00	callq	0x100041cd0 ## symbol stub for: _posix_spawn_file_actions_init
100037073:	83 f8 ff	cmpl	$-1, %eax
100037076:	0f 84 a7 04 00 00	je	0x100037523
10003707c:	48 8d 15 b3 09 01 00	leaq	68019(%rip), %rdx ## literal pool for: "/dev/console"
100037083:	48 8d bd 70 fe ff ff	leaq	-400(%rbp), %rdi
10003708a:	31 f6	xorl	%esi, %esi
10003708c:	b9 00 00 02 00	movl	$131072, %ecx
100037091:	45 31 c0	xorl	%r8d, %r8d
100037094:	e8 2b ac 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100037099:	83 f8 ff	cmpl	$-1, %eax
10003709c:	0f 84 86 04 00 00	je	0x100037528
1000370a2:	48 8d 15 8d 09 01 00	leaq	67981(%rip), %rdx ## literal pool for: "/dev/console"
1000370a9:	48 8d bd 70 fe ff ff	leaq	-400(%rbp), %rdi
1000370b0:	be 01 00 00 00	movl	$1, %esi
1000370b5:	b9 01 00 02 00	movl	$131073, %ecx
1000370ba:	45 31 c0	xorl	%r8d, %r8d
1000370bd:	e8 02 ac 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
1000370c2:	83 f8 ff	cmpl	$-1, %eax
1000370c5:	0f 84 62 04 00 00	je	0x10003752d
1000370cb:	48 8d 15 64 09 01 00	leaq	67940(%rip), %rdx ## literal pool for: "/dev/console"
1000370d2:	48 8d bd 70 fe ff ff	leaq	-400(%rbp), %rdi
1000370d9:	be 02 00 00 00	movl	$2, %esi
1000370de:	b9 02 00 02 00	movl	$131074, %ecx
1000370e3:	45 31 c0	xorl	%r8d, %r8d
1000370e6:	e8 d9 ab 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
1000370eb:	83 f8 ff	cmpl	$-1, %eax
1000370ee:	0f 84 3e 04 00 00	je	0x100037532
1000370f4:	e8 45 aa 00 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
1000370f9:	89 c7	movl	%eax, %edi
1000370fb:	e8 72 2d fd ff	callq	0x100009e72
100037100:	89 85 54 fe ff ff	movl	%eax, -428(%rbp)
100037106:	e8 33 aa 00 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
10003710b:	89 c7	movl	%eax, %edi
10003710d:	31 f6	xorl	%esi, %esi
10003710f:	e8 4f 0d 00 00	callq	0x100037e63
100037114:	bf 45 00 00 22	movl	$570425413, %edi
100037119:	48 8b 9d 60 fe ff ff	movq	-416(%rbp), %rbx
100037120:	48 89 de	movq	%rbx, %rsi
100037123:	e8 c7 5d fd ff	callq	0x10000ceef
100037128:	48 8d bd 50 fe ff ff	leaq	-432(%rbp), %rdi
10003712f:	c7 07 00 00 00 00	movl	$0, (%rdi)
100037135:	4c 8d bd 70 fe ff ff	leaq	-400(%rbp), %r15
10003713c:	48 8d 8d 90 fe ff ff	leaq	-368(%rbp), %rcx
100037143:	4c 8d 8d 10 ff ff ff	leaq	-240(%rbp), %r9
10003714a:	48 8b b5 78 fe ff ff	movq	-392(%rbp), %rsi
100037151:	4c 89 fa	movq	%r15, %rdx
100037154:	4d 89 e0	movq	%r12, %r8
100037157:	e8 da ab 00 00	callq	0x100041d36 ## symbol stub for: _posix_spawnp
10003715c:	89 85 78 fe ff ff	movl	%eax, -392(%rbp)
100037162:	bf 46 00 00 22	movl	$570425414, %edi
100037167:	48 89 de	movq	%rbx, %rsi
10003716a:	e8 80 5d fd ff	callq	0x10000ceef
10003716f:	4c 89 ff	movq	%r15, %rdi
100037172:	e8 53 ab 00 00	callq	0x100041cca ## symbol stub for: _posix_spawn_file_actions_destroy
100037177:	83 f8 ff	cmpl	$-1, %eax
10003717a:	0f 84 b7 03 00 00	je	0x100037537
100037180:	48 8d bd 90 fe ff ff	leaq	-368(%rbp), %rdi
100037187:	e8 4a ab 00 00	callq	0x100041cd6 ## symbol stub for: _posix_spawnattr_destroy
10003718c:	83 f8 ff	cmpl	$-1, %eax
10003718f:	0f 84 a7 03 00 00	je	0x10003753c
100037195:	4c 89 e7	movq	%r12, %rdi
100037198:	e8 93 a8 00 00	callq	0x100041a30 ## symbol stub for: _free
10003719d:	4c 89 f7	movq	%r14, %rdi
1000371a0:	e8 57 af 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
1000371a5:	e8 94 a9 00 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
1000371aa:	89 c7	movl	%eax, %edi
1000371ac:	8b b5 54 fe ff ff	movl	-428(%rbp), %esi
1000371b2:	e8 ac 0c 00 00	callq	0x100037e63
1000371b7:	8b 9d 78 fe ff ff	movl	-392(%rbp), %ebx
1000371bd:	83 fb 02	cmpl	$2, %ebx
1000371c0:	0f 84 59 01 00 00	je	0x10003731f
1000371c6:	85 db	testl	%ebx, %ebx
1000371c8:	4c 8b bd 60 fe ff ff	movq	-416(%rbp), %r15
1000371cf:	0f 85 a3 01 00 00	jne	0x100037378
1000371d5:	44 8b b5 50 fe ff ff	movl	-432(%rbp), %r14d
1000371dc:	44 8b a5 5c fe ff ff	movl	-420(%rbp), %r12d
1000371e3:	45 84 e4	testb	%r12b, %r12b
1000371e6:	74 4b	je	0x100037233
1000371e8:	44 89 f7	movl	%r14d, %edi
1000371eb:	e8 bc de ff ff	callq	0x1000350ac
1000371f0:	84 c0	testb	%al, %al
1000371f2:	74 3f	je	0x100037233
1000371f4:	0f 57 c0	xorps	%xmm0, %xmm0
1000371f7:	48 8d 8d 10 ff ff ff	leaq	-240(%rbp), %rcx
1000371fe:	0f 29 01	movaps	%xmm0, (%rcx)
100037201:	48 c7 41 10 00 00 00 00	movq	$0, 16(%rcx)
100037209:	ba 01 00 00 00	movl	$1, %edx
10003720e:	44 89 f7	movl	%r14d, %edi
100037211:	be 19 00 00 00	movl	$25, %esi
100037216:	41 b8 18 00 00 00	movl	$24, %r8d
10003721c:	e8 27 ab 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
100037221:	83 f8 18	cmpl	$24, %eax
100037224:	75 0d	jne	0x100037233
100037226:	83 bd 10 ff ff ff 00	cmpl	$0, -240(%rbp)
10003722d:	0f 85 9b 03 00 00	jne	0x1000375ce
100037233:	0f 57 c0	xorps	%xmm0, %xmm0
100037236:	48 8d 9d 10 ff ff ff	leaq	-240(%rbp), %rbx
10003723d:	0f 29 83 a0 00 00 00	movaps	%xmm0, 160(%rbx)
100037244:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
10003724b:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
100037252:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
100037256:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
10003725a:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
10003725e:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
100037262:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100037266:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10003726a:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10003726e:	0f 29 03	movaps	%xmm0, (%rbx)
100037271:	48 c7 83 b0 00 00 00 00 00 00 00	movq	$0, 176(%rbx)
10003727c:	48 89 df	movq	%rbx, %rdi
10003727f:	44 89 f6	movl	%r14d, %esi
100037282:	e8 1f 1b 00 00	callq	0x100038da6
100037287:	83 3b 03	cmpl	$3, (%rbx)
10003728a:	0f 85 e0 02 00 00	jne	0x100037570
100037290:	49 89 c6	movq	%rax, %r14
100037293:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
10003729a:	e8 35 21 00 00	callq	0x1000393d4
10003729f:	84 c0	testb	%al, %al
1000372a1:	0f 84 4a 01 00 00	je	0x1000373f1
1000372a7:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
1000372ae:	e8 3d 21 00 00	callq	0x1000393f0
1000372b3:	85 c0	testl	%eax, %eax
1000372b5:	0f 94 c3	sete	%bl
1000372b8:	48 8b 85 68 fe ff ff	movq	-408(%rbp), %rax
1000372bf:	20 d8	andb	%bl, %al
1000372c1:	3c 01	cmpb	$1, %al
1000372c3:	0f 85 2a 01 00 00	jne	0x1000373f3
1000372c9:	48 8d 35 f4 ab 01 00	leaq	109556(%rip), %rsi ## literal pool for: "%s: exited successfully, removing"
1000372d0:	bf 07 00 01 00	movl	$65543, %edi
1000372d5:	4c 89 fa	movq	%r15, %rdx
1000372d8:	31 c0	xorl	%eax, %eax
1000372da:	e8 e9 e2 ff ff	callq	0x1000355c8
1000372df:	48 8b bd 48 fe ff ff	movq	-440(%rbp), %rdi
1000372e6:	e8 b1 aa 00 00	callq	0x100041d9c ## symbol stub for: _remove
1000372eb:	b3 01	movb	$1, %bl
1000372ed:	83 f8 ff	cmpl	$-1, %eax
1000372f0:	0f 85 fd 00 00 00	jne	0x1000373f3
1000372f6:	e8 65 a4 00 00	callq	0x100041760 ## symbol stub for: ___error
1000372fb:	83 38 02	cmpl	$2, (%rax)
1000372fe:	0f 84 ef 00 00 00	je	0x1000373f3
100037304:	e8 57 a4 00 00	callq	0x100041760 ## symbol stub for: ___error
100037309:	48 63 38	movslq	(%rax), %rdi
10003730c:	48 85 ff	testq	%rdi, %rdi
10003730f:	0f 84 de 00 00 00	je	0x1000373f3
100037315:	e8 88 a4 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003731a:	e9 d4 00 00 00	jmp	0x1000373f3
10003731f:	8b 9d 88 fe ff ff	movl	-376(%rbp), %ebx
100037325:	89 d8	movl	%ebx, %eax
100037327:	34 01	xorb	$1, %al
100037329:	0f b6 c0	movzbl	%al, %eax
10003732c:	8d 3c 00	leal	(%rax,%rax), %edi
10003732f:	81 c7 03 00 01 00	addl	$65539, %edi
100037335:	48 8d 05 17 ac 01 00	leaq	109591(%rip), %rax ## literal pool for: "required"
10003733c:	48 8d 0d 19 ac 01 00	leaq	109593(%rip), %rcx ## literal pool for: "optional"
100037343:	84 db	testb	%bl, %bl
100037345:	48 0f 45 c8	cmovneq	%rax, %rcx
100037349:	48 8d 35 e6 ab 01 00	leaq	109542(%rip), %rsi ## literal pool for: "%s: %s boot task not present"
100037350:	4c 8b b5 60 fe ff ff	movq	-416(%rbp), %r14
100037357:	4c 89 f2	movq	%r14, %rdx
10003735a:	31 c0	xorl	%eax, %eax
10003735c:	e8 67 e2 ff ff	callq	0x1000355c8
100037361:	84 db	testb	%bl, %bl
100037363:	0f 84 6b 01 00 00	je	0x1000374d4
100037369:	48 8d 35 f5 ab 01 00	leaq	109557(%rip), %rsi ## literal pool for: "required boot task executable not found"
100037370:	4c 89 f7	movq	%r14, %rdi
100037373:	e8 78 0b 00 00	callq	0x100037ef0
100037378:	89 df	movl	%ebx, %edi
10003737a:	e8 bf aa 00 00	callq	0x100041e3e ## symbol stub for: _strerror
10003737f:	48 8d 35 07 ac 01 00	leaq	109575(%rip), %rsi ## literal pool for: "%s: posix_spawn(): %d: %s"
100037386:	bf 03 00 01 00	movl	$65539, %edi
10003738b:	4c 89 fa	movq	%r15, %rdx
10003738e:	89 d9	movl	%ebx, %ecx
100037390:	49 89 c0	movq	%rax, %r8
100037393:	31 c0	xorl	%eax, %eax
100037395:	e8 2e e2 ff ff	callq	0x1000355c8
10003739a:	80 bd 88 fe ff ff 00	cmpb	$0, -376(%rbp)
1000373a1:	0f 84 2d 01 00 00	je	0x1000374d4
1000373a7:	0f 57 c0	xorps	%xmm0, %xmm0
1000373aa:	4c 8d b5 10 ff ff ff	leaq	-240(%rbp), %r14
1000373b1:	41 0f 29 46 30	movaps	%xmm0, 48(%r14)
1000373b6:	41 0f 29 46 20	movaps	%xmm0, 32(%r14)
1000373bb:	41 0f 29 46 10	movaps	%xmm0, 16(%r14)
1000373c0:	41 0f 29 06	movaps	%xmm0, (%r14)
1000373c4:	89 df	movl	%ebx, %edi
1000373c6:	e8 73 aa 00 00	callq	0x100041e3e ## symbol stub for: _strerror
1000373cb:	48 8d 15 d5 ab 01 00	leaq	109525(%rip), %rdx ## literal pool for: "posix_spawn: %d: %s"
1000373d2:	be 40 00 00 00	movl	$64, %esi
1000373d7:	4c 89 f7	movq	%r14, %rdi
1000373da:	89 d9	movl	%ebx, %ecx
1000373dc:	49 89 c0	movq	%rax, %r8
1000373df:	31 c0	xorl	%eax, %eax
1000373e1:	e8 1c aa 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
1000373e6:	4c 89 ff	movq	%r15, %rdi
1000373e9:	4c 89 f6	movq	%r14, %rsi
1000373ec:	e8 ff 0a 00 00	callq	0x100037ef0
1000373f1:	31 db	xorl	%ebx, %ebx
1000373f3:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
1000373fa:	e8 d5 1f 00 00	callq	0x1000393d4
1000373ff:	84 c0	testb	%al, %al
100037401:	74 18	je	0x10003741b
100037403:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
10003740a:	e8 e1 1f 00 00	callq	0x1000393f0
10003740f:	3b 85 8c fe ff ff	cmpl	-372(%rbp), %eax
100037415:	0f 84 89 01 00 00	je	0x1000375a4
10003741b:	b0 01	movb	$1, %al
10003741d:	84 db	testb	%bl, %bl
10003741f:	0f 85 96 00 00 00	jne	0x1000374bb
100037425:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
10003742c:	e8 a3 1f 00 00	callq	0x1000393d4
100037431:	0f b6 c0	movzbl	%al, %eax
100037434:	8d 3c 85 03 00 01 00	leal	65539(,%rax,4), %edi
10003743b:	48 8d 35 c3 aa 01 00	leaq	109251(%rip), %rsi ## literal pool for: "%s: exited due to %s"
100037442:	4c 89 fa	movq	%r15, %rdx
100037445:	4c 89 f1	movq	%r14, %rcx
100037448:	31 c0	xorl	%eax, %eax
10003744a:	e8 79 e1 ff ff	callq	0x1000355c8
10003744f:	48 8d 05 7b b3 02 00	leaq	177019(%rip), %rax
100037456:	80 38 00	cmpb	$0, (%rax)
100037459:	0f 95 c0	setne	%al
10003745c:	8b 8d 84 fe ff ff	movl	-380(%rbp), %ecx
100037462:	20 c1	andb	%al, %cl
100037464:	89 c8	movl	%ecx, %eax
100037466:	75 53	jne	0x1000374bb
100037468:	41 80 f4 01	xorb	$1, %r12b
10003746c:	75 4d	jne	0x1000374bb
10003746e:	0f 57 c0	xorps	%xmm0, %xmm0
100037471:	48 8d 9d 90 fe ff ff	leaq	-368(%rbp), %rbx
100037478:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
10003747c:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
100037480:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
100037484:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
100037488:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10003748c:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100037490:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100037494:	0f 29 03	movaps	%xmm0, (%rbx)
100037497:	48 8d 15 de 32 01 00	leaq	78558(%rip), %rdx ## literal pool for: "exited due to %s"
10003749e:	be 80 00 00 00	movl	$128, %esi
1000374a3:	48 89 df	movq	%rbx, %rdi
1000374a6:	4c 89 f1	movq	%r14, %rcx
1000374a9:	31 c0	xorl	%eax, %eax
1000374ab:	e8 52 a9 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
1000374b0:	4c 89 ff	movq	%r15, %rdi
1000374b3:	48 89 de	movq	%rbx, %rsi
1000374b6:	e8 35 0a 00 00	callq	0x100037ef0
1000374bb:	8b 8d 58 fe ff ff	movl	-424(%rbp), %ecx
1000374c1:	20 c1	andb	%al, %cl
1000374c3:	80 f9 01	cmpb	$1, %cl
1000374c6:	0f 84 c0 00 00 00	je	0x10003758c
1000374cc:	4c 89 f7	movq	%r14, %rdi
1000374cf:	e8 5c a5 00 00	callq	0x100041a30 ## symbol stub for: _free
1000374d4:	48 8b 05 4d 0b 02 00	movq	133965(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000374db:	48 8b 00	movq	(%rax), %rax
1000374de:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000374e2:	75 5d	jne	0x100037541
1000374e4:	48 81 c4 98 01 00 00	addq	$408, %rsp
1000374eb:	5b	popq	%rbx
1000374ec:	41 5c	popq	%r12
1000374ee:	41 5d	popq	%r13
1000374f0:	41 5e	popq	%r14
1000374f2:	41 5f	popq	%r15
1000374f4:	5d	popq	%rbp
1000374f5:	c3	retq
1000374f6:	e8 96 9c 00 00	callq	0x100041191
1000374fb:	e8 7c 9c 00 00	callq	0x10004117c
100037500:	89 c7	movl	%eax, %edi
100037502:	e8 5f 9c 00 00	callq	0x100041166
100037507:	89 c7	movl	%eax, %edi
100037509:	e8 42 9c 00 00	callq	0x100041150
10003750e:	89 c7	movl	%eax, %edi
100037510:	e8 25 9c 00 00	callq	0x10004113a
100037515:	89 c7	movl	%eax, %edi
100037517:	e8 08 9c 00 00	callq	0x100041124
10003751c:	89 c7	movl	%eax, %edi
10003751e:	e8 eb 9b 00 00	callq	0x10004110e
100037523:	e8 44 9b 00 00	callq	0x10004106c
100037528:	e8 5a 9b 00 00	callq	0x100041087
10003752d:	e8 70 9b 00 00	callq	0x1000410a2
100037532:	e8 86 9b 00 00	callq	0x1000410bd
100037537:	e8 9c 9b 00 00	callq	0x1000410d8
10003753c:	e8 b2 9b 00 00	callq	0x1000410f3
100037541:	e8 2c a2 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100037546:	48 8d 3d 9f a8 01 00	leaq	108703(%rip), %rdi ## literal pool for: "Malformed boot-task (missing block key): %s"
10003754d:	4c 89 fe	movq	%r15, %rsi
100037550:	31 c0	xorl	%eax, %eax
100037552:	e8 bb ce ff ff	callq	0x100034412
100037557:	48 8d 3d 72 a6 01 00	leaq	108146(%rip), %rdi ## literal pool for: "boot task has no program"
10003755e:	eb 09	jmp	0x100037569
100037560:	0f 0b	ud2
100037562:	48 8d 3d 80 a6 01 00	leaq	108160(%rip), %rdi ## literal pool for: "boot task argument vector is not an array"
100037569:	31 c0	xorl	%eax, %eax
10003756b:	e8 a2 ce ff ff	callq	0x100034412
100037570:	4c 89 ef	movq	%r13, %rdi
100037573:	e8 c2 0c 00 00	callq	0x10003823a
100037578:	48 8d 3d 23 a9 01 00	leaq	108835(%rip), %rdi ## literal pool for: "failed to reap boot-task (%s, %s)"
10003757f:	4c 89 fe	movq	%r15, %rsi
100037582:	48 89 c2	movq	%rax, %rdx
100037585:	31 c0	xorl	%eax, %eax
100037587:	e8 86 ce ff ff	callq	0x100034412
10003758c:	48 8d 35 87 a9 01 00	leaq	108935(%rip), %rsi ## literal pool for: "%s: rebooting after success"
100037593:	bf 07 00 01 00	movl	$65543, %edi
100037598:	4c 89 fa	movq	%r15, %rdx
10003759b:	31 c0	xorl	%eax, %eax
10003759d:	e8 26 e0 ff ff	callq	0x1000355c8
1000375a2:	eb 1c	jmp	0x1000375c0
1000375a4:	48 8d 35 3b a9 01 00	leaq	108859(%rip), %rsi ## literal pool for: "%s: rebooting on exit code: %d"
1000375ab:	bf 07 00 01 00	movl	$65543, %edi
1000375b0:	4c 89 fa	movq	%r15, %rdx
1000375b3:	8b 8d 8c fe ff ff	movl	-372(%rbp), %ecx
1000375b9:	31 c0	xorl	%eax, %eax
1000375bb:	e8 08 e0 ff ff	callq	0x1000355c8
1000375c0:	bf 01 00 00 00	movl	$1, %edi
1000375c5:	31 f6	xorl	%esi, %esi
1000375c7:	31 d2	xorl	%edx, %edx
1000375c9:	e8 d3 09 00 00	callq	0x100037fa1
1000375ce:	48 8d bd 10 ff ff ff	leaq	-240(%rbp), %rdi
1000375d5:	e8 c8 0c 00 00	callq	0x1000382a2
1000375da:	4c 89 ff	movq	%r15, %rdi
1000375dd:	48 89 c6	movq	%rax, %rsi
1000375e0:	e8 0b 09 00 00	callq	0x100037ef0
1000375e5:	55	pushq	%rbp
1000375e6:	48 89 e5	movq	%rsp, %rbp
1000375e9:	41 57	pushq	%r15
1000375eb:	41 56	pushq	%r14
1000375ed:	41 55	pushq	%r13
1000375ef:	41 54	pushq	%r12
1000375f1:	53	pushq	%rbx
1000375f2:	48 83 ec 58	subq	$88, %rsp
1000375f6:	49 89 fe	movq	%rdi, %r14
1000375f9:	48 8b 05 28 0a 02 00	movq	133672(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100037600:	48 8b 00	movq	(%rax), %rax
100037603:	48 89 45 d0	movq	%rax, -48(%rbp)
100037607:	48 8d 05 02 b2 02 00	leaq	176642(%rip), %rax
10003760e:	48 8b 38	movq	(%rax), %rdi
100037611:	48 85 ff	testq	%rdi, %rdi
100037614:	0f 84 bb 03 00 00	je	0x1000379d5
10003761a:	41 89 f7	movl	%esi, %r15d
10003761d:	4c 89 f6	movq	%r14, %rsi
100037620:	e8 47 aa 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100037625:	48 89 c3	movq	%rax, %rbx
100037628:	48 89 c7	movq	%rax, %rdi
10003762b:	e8 96 aa 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100037630:	48 3b 05 c9 0a 02 00	cmpq	133833(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
100037637:	0f 85 a1 03 00 00	jne	0x1000379de
10003763d:	0f 28 05 dc 40 02 00	movaps	147676(%rip), %xmm0
100037644:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100037648:	0f 28 05 c1 40 02 00	movaps	147649(%rip), %xmm0
10003764f:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100037653:	41 f6 c7 01	testb	$1, %r15b
100037657:	74 16	je	0x10003766f
100037659:	48 8d 05 38 a5 01 00	leaq	107832(%rip), %rax ## literal pool for: "XPC_SERVICES_UNAVAILABLE=1"
100037660:	48 89 45 b8	movq	%rax, -72(%rbp)
100037664:	48 8d 05 28 0c 01 00	leaq	68648(%rip), %rax ## literal pool for: "XPC_NULL_BOOTSTRAP=1"
10003766b:	48 89 45 c0	movq	%rax, -64(%rbp)
10003766f:	48 8d 35 3d a5 01 00	leaq	107837(%rip), %rsi ## literal pool for: "%s: performing non-boot task"
100037676:	bf 07 00 01 00	movl	$65543, %edi
10003767b:	4c 89 f2	movq	%r14, %rdx
10003767e:	31 c0	xorl	%eax, %eax
100037680:	e8 43 df ff ff	callq	0x1000355c8
100037685:	48 8d 35 99 c2 00 00	leaq	49817(%rip), %rsi ## literal pool for: "Program"
10003768c:	48 89 df	movq	%rbx, %rdi
10003768f:	e8 c6 a9 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100037694:	48 85 c0	testq	%rax, %rax
100037697:	0f 84 4a 03 00 00	je	0x1000379e7
10003769d:	49 89 c4	movq	%rax, %r12
1000376a0:	48 8d 35 86 c2 00 00	leaq	49798(%rip), %rsi ## literal pool for: "ProgramArguments"
1000376a7:	48 89 df	movq	%rbx, %rdi
1000376aa:	e8 bd a9 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000376af:	48 85 c0	testq	%rax, %rax
1000376b2:	4c 89 75 88	movq	%r14, -120(%rbp)
1000376b6:	74 25	je	0x1000376dd
1000376b8:	48 89 c3	movq	%rax, %rbx
1000376bb:	48 89 c7	movq	%rax, %rdi
1000376be:	e8 03 aa 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000376c3:	48 3b 05 0e 0a 02 00	cmpq	133646(%rip), %rax ## literal pool symbol address: __xpc_type_array
1000376ca:	0f 85 27 03 00 00	jne	0x1000379f7
1000376d0:	48 89 df	movq	%rbx, %rdi
1000376d3:	e8 2a aa 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
1000376d8:	49 89 c5	movq	%rax, %r13
1000376db:	eb 1e	jmp	0x1000376fb
1000376dd:	31 ff	xorl	%edi, %edi
1000376df:	31 f6	xorl	%esi, %esi
1000376e1:	e8 5a a8 00 00	callq	0x100041f40 ## symbol stub for: _xpc_array_create
1000376e6:	49 89 c5	movq	%rax, %r13
1000376e9:	48 89 c7	movq	%rax, %rdi
1000376ec:	48 c7 c6 ff ff ff ff	movq	$-1, %rsi
1000376f3:	4c 89 e2	movq	%r12, %rdx
1000376f6:	e8 7b a8 00 00	callq	0x100041f76 ## symbol stub for: _xpc_array_set_string
1000376fb:	44 89 7d 94	movl	%r15d, -108(%rbp)
1000376ff:	4c 89 ef	movq	%r13, %rdi
100037702:	e8 45 a8 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
100037707:	49 89 c6	movq	%rax, %r14
10003770a:	31 f6	xorl	%esi, %esi
10003770c:	48 ff c0	incq	%rax
10003770f:	40 0f 94 c6	sete	%sil
100037713:	48 89 f1	movq	%rsi, %rcx
100037716:	48 f7 d9	negq	%rcx
100037719:	ba 08 00 00 00	movl	$8, %edx
10003771e:	48 f7 e2	mulq	%rdx
100037721:	0f 90 c2	seto	%dl
100037724:	48 31 ce	xorq	%rcx, %rsi
100037727:	0f 85 c3 02 00 00	jne	0x1000379f0
10003772d:	48 85 c9	testq	%rcx, %rcx
100037730:	0f 88 ba 02 00 00	js	0x1000379f0
100037736:	84 d2	testb	%dl, %dl
100037738:	0f 85 b2 02 00 00	jne	0x1000379f0
10003773e:	48 89 c7	movq	%rax, %rdi
100037741:	e8 9f 5d fd ff	callq	0x10000d4e5
100037746:	49 89 c7	movq	%rax, %r15
100037749:	4d 85 f6	testq	%r14, %r14
10003774c:	74 1e	je	0x10003776c
10003774e:	31 db	xorl	%ebx, %ebx
100037750:	4c 89 ef	movq	%r13, %rdi
100037753:	48 89 de	movq	%rbx, %rsi
100037756:	e8 f7 a7 00 00	callq	0x100041f52 ## symbol stub for: _xpc_array_get_string
10003775b:	48 85 c0	testq	%rax, %rax
10003775e:	74 04	je	0x100037764
100037760:	49 89 04 df	movq	%rax, (%r15,%rbx,8)
100037764:	48 ff c3	incq	%rbx
100037767:	49 39 de	cmpq	%rbx, %r14
10003776a:	75 e4	jne	0x100037750
10003776c:	48 bb aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rbx
100037776:	48 8d 7d a0	leaq	-96(%rbp), %rdi
10003777a:	48 89 1f	movq	%rbx, (%rdi)
10003777d:	e8 5a a5 00 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
100037782:	85 c0	testl	%eax, %eax
100037784:	0f 85 05 02 00 00	jne	0x10003798f
10003778a:	48 8d 7d a0	leaq	-96(%rbp), %rdi
10003778e:	be 0c 40 00 00	movl	$16396, %esi
100037793:	e8 80 a5 00 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
100037798:	85 c0	testl	%eax, %eax
10003779a:	0f 85 f6 01 00 00	jne	0x100037996
1000377a0:	48 8d 7d a0	leaq	-96(%rbp), %rdi
1000377a4:	be 00 04 00 00	movl	$1024, %esi
1000377a9:	e8 76 a5 00 00	callq	0x100041d24 ## symbol stub for: _posix_spawnattr_setprocesstype_np
1000377ae:	85 c0	testl	%eax, %eax
1000377b0:	0f 85 e7 01 00 00	jne	0x10003799d
1000377b6:	48 8d 75 80	leaq	-128(%rbp), %rsi
1000377ba:	c7 06 00 00 00 00	movl	$0, (%rsi)
1000377c0:	48 8d 7d a0	leaq	-96(%rbp), %rdi
1000377c4:	e8 67 a5 00 00	callq	0x100041d30 ## symbol stub for: _posix_spawnattr_setsigmask
1000377c9:	85 c0	testl	%eax, %eax
1000377cb:	0f 85 d3 01 00 00	jne	0x1000379a4
1000377d1:	48 8d 75 84	leaq	-124(%rbp), %rsi
1000377d5:	c7 06 ff ff ff ff	movl	$4294967295, (%rsi)
1000377db:	48 8d 7d a0	leaq	-96(%rbp), %rdi
1000377df:	e8 46 a5 00 00	callq	0x100041d2a ## symbol stub for: _posix_spawnattr_setsigdefault
1000377e4:	85 c0	testl	%eax, %eax
1000377e6:	0f 85 bf 01 00 00	jne	0x1000379ab
1000377ec:	48 8d 7d 98	leaq	-104(%rbp), %rdi
1000377f0:	48 89 1f	movq	%rbx, (%rdi)
1000377f3:	e8 d8 a4 00 00	callq	0x100041cd0 ## symbol stub for: _posix_spawn_file_actions_init
1000377f8:	83 f8 ff	cmpl	$-1, %eax
1000377fb:	0f 84 b1 01 00 00	je	0x1000379b2
100037801:	f6 45 94 02	testb	$2, -108(%rbp)
100037805:	48 8d 05 47 13 01 00	leaq	70471(%rip), %rax ## literal pool for: "/dev/null"
10003780c:	48 8d 1d 23 02 01 00	leaq	66083(%rip), %rbx ## literal pool for: "/dev/console"
100037813:	48 0f 44 d8	cmoveq	%rax, %rbx
100037817:	48 8d 7d 98	leaq	-104(%rbp), %rdi
10003781b:	31 f6	xorl	%esi, %esi
10003781d:	48 89 da	movq	%rbx, %rdx
100037820:	b9 00 00 02 00	movl	$131072, %ecx
100037825:	45 31 c0	xorl	%r8d, %r8d
100037828:	e8 97 a4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
10003782d:	83 f8 ff	cmpl	$-1, %eax
100037830:	0f 84 81 01 00 00	je	0x1000379b7
100037836:	48 8d 7d 98	leaq	-104(%rbp), %rdi
10003783a:	be 01 00 00 00	movl	$1, %esi
10003783f:	48 89 da	movq	%rbx, %rdx
100037842:	b9 01 00 02 00	movl	$131073, %ecx
100037847:	45 31 c0	xorl	%r8d, %r8d
10003784a:	e8 75 a4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
10003784f:	83 f8 ff	cmpl	$-1, %eax
100037852:	0f 84 64 01 00 00	je	0x1000379bc
100037858:	48 8d 7d 98	leaq	-104(%rbp), %rdi
10003785c:	be 02 00 00 00	movl	$2, %esi
100037861:	48 89 da	movq	%rbx, %rdx
100037864:	b9 02 00 02 00	movl	$131074, %ecx
100037869:	45 31 c0	xorl	%r8d, %r8d
10003786c:	e8 53 a4 00 00	callq	0x100041cc4 ## symbol stub for: _posix_spawn_file_actions_addopen
100037871:	83 f8 ff	cmpl	$-1, %eax
100037874:	0f 84 47 01 00 00	je	0x1000379c1
10003787a:	48 8d 7d ac	leaq	-84(%rbp), %rdi
10003787e:	c7 07 00 00 00 00	movl	$0, (%rdi)
100037884:	48 8d 55 98	leaq	-104(%rbp), %rdx
100037888:	48 8d 4d a0	leaq	-96(%rbp), %rcx
10003788c:	4c 8d 4d b0	leaq	-80(%rbp), %r9
100037890:	4c 89 e6	movq	%r12, %rsi
100037893:	4d 89 f8	movq	%r15, %r8
100037896:	e8 9b a4 00 00	callq	0x100041d36 ## symbol stub for: _posix_spawnp
10003789b:	85 c0	testl	%eax, %eax
10003789d:	74 27	je	0x1000378c6
10003789f:	89 c3	movl	%eax, %ebx
1000378a1:	89 c7	movl	%eax, %edi
1000378a3:	e8 96 a5 00 00	callq	0x100041e3e ## symbol stub for: _strerror
1000378a8:	48 8d 35 ce a3 01 00	leaq	107470(%rip), %rsi ## literal pool for: "%s: non-boot task posix_spawn() failed: %d: %s"
1000378af:	bf 03 00 01 00	movl	$65539, %edi
1000378b4:	48 8b 55 88	movq	-120(%rbp), %rdx
1000378b8:	89 d9	movl	%ebx, %ecx
1000378ba:	49 89 c0	movq	%rax, %r8
1000378bd:	31 c0	xorl	%eax, %eax
1000378bf:	e8 04 dd ff ff	callq	0x1000355c8
1000378c4:	eb 7e	jmp	0x100037944
1000378c6:	8b 4d ac	movl	-84(%rbp), %ecx
1000378c9:	48 8d 35 43 a3 01 00	leaq	107331(%rip), %rsi ## literal pool for: "%s: non-boot task spawned with PID %d"
1000378d0:	bf 07 00 01 00	movl	$65543, %edi
1000378d5:	48 8b 5d 88	movq	-120(%rbp), %rbx
1000378d9:	48 89 da	movq	%rbx, %rdx
1000378dc:	31 c0	xorl	%eax, %eax
1000378de:	e8 e5 dc ff ff	callq	0x1000355c8
1000378e3:	48 8d 75 90	leaq	-112(%rbp), %rsi
1000378e7:	c7 06 00 00 00 00	movl	$0, (%rsi)
1000378ed:	8b 7d ac	movl	-84(%rbp), %edi
1000378f0:	31 d2	xorl	%edx, %edx
1000378f2:	e8 2b a6 00 00	callq	0x100041f22 ## symbol stub for: _waitpid
1000378f7:	3b 45 ac	cmpl	-84(%rbp), %eax
1000378fa:	74 0f	je	0x10003790b
1000378fc:	e8 5f 9e 00 00	callq	0x100041760 ## symbol stub for: ___error
100037901:	8b 38	movl	(%rax), %edi
100037903:	85 ff	testl	%edi, %edi
100037905:	0f 85 c5 00 00 00	jne	0x1000379d0
10003790b:	8b 4d 90	movl	-112(%rbp), %ecx
10003790e:	f7 c1 7f ff 00 00	testl	$65407, %ecx
100037914:	74 18	je	0x10003792e
100037916:	48 8d 35 38 a3 01 00	leaq	107320(%rip), %rsi ## literal pool for: "%s: non-boot task exited with status %d"
10003791d:	bf 04 00 01 00	movl	$65540, %edi
100037922:	48 89 da	movq	%rbx, %rdx
100037925:	31 c0	xorl	%eax, %eax
100037927:	e8 9c dc ff ff	callq	0x1000355c8
10003792c:	eb 16	jmp	0x100037944
10003792e:	48 8d 35 04 a3 01 00	leaq	107268(%rip), %rsi ## literal pool for: "%s: non-boot task succeeded"
100037935:	bf 07 00 01 00	movl	$65543, %edi
10003793a:	48 89 da	movq	%rbx, %rdx
10003793d:	31 c0	xorl	%eax, %eax
10003793f:	e8 84 dc ff ff	callq	0x1000355c8
100037944:	48 8d 7d 98	leaq	-104(%rbp), %rdi
100037948:	e8 7d a3 00 00	callq	0x100041cca ## symbol stub for: _posix_spawn_file_actions_destroy
10003794d:	83 f8 ff	cmpl	$-1, %eax
100037950:	74 74	je	0x1000379c6
100037952:	48 8d 7d a0	leaq	-96(%rbp), %rdi
100037956:	e8 7b a3 00 00	callq	0x100041cd6 ## symbol stub for: _posix_spawnattr_destroy
10003795b:	83 f8 ff	cmpl	$-1, %eax
10003795e:	74 6b	je	0x1000379cb
100037960:	4c 89 ff	movq	%r15, %rdi
100037963:	e8 c8 a0 00 00	callq	0x100041a30 ## symbol stub for: _free
100037968:	4c 89 ef	movq	%r13, %rdi
10003796b:	e8 8c a7 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100037970:	48 8b 05 b1 06 02 00	movq	132785(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100037977:	48 8b 00	movq	(%rax), %rax
10003797a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003797e:	75 72	jne	0x1000379f2
100037980:	48 83 c4 58	addq	$88, %rsp
100037984:	5b	popq	%rbx
100037985:	41 5c	popq	%r12
100037987:	41 5d	popq	%r13
100037989:	41 5e	popq	%r14
10003798b:	41 5f	popq	%r15
10003798d:	5d	popq	%rbp
10003798e:	c3	retq
10003798f:	89 c7	movl	%eax, %edi
100037991:	e8 20 99 00 00	callq	0x1000412b6
100037996:	89 c7	movl	%eax, %edi
100037998:	e8 03 99 00 00	callq	0x1000412a0
10003799d:	89 c7	movl	%eax, %edi
10003799f:	e8 e6 98 00 00	callq	0x10004128a
1000379a4:	89 c7	movl	%eax, %edi
1000379a6:	e8 c9 98 00 00	callq	0x100041274
1000379ab:	89 c7	movl	%eax, %edi
1000379ad:	e8 ac 98 00 00	callq	0x10004125e
1000379b2:	e8 ef 97 00 00	callq	0x1000411a6
1000379b7:	e8 05 98 00 00	callq	0x1000411c1
1000379bc:	e8 1b 98 00 00	callq	0x1000411dc
1000379c1:	e8 31 98 00 00	callq	0x1000411f7
1000379c6:	e8 47 98 00 00	callq	0x100041212
1000379cb:	e8 5d 98 00 00	callq	0x10004122d
1000379d0:	e8 73 98 00 00	callq	0x100041248
1000379d5:	48 8d 3d 8c 9e 01 00	leaq	106124(%rip), %rdi ## literal pool for: "boot task dictionary is not populated"
1000379dc:	eb 20	jmp	0x1000379fe
1000379de:	48 8d 3d 72 a1 01 00	leaq	106866(%rip), %rdi ## literal pool for: "boot task is not a dictionary"
1000379e5:	eb 17	jmp	0x1000379fe
1000379e7:	48 8d 3d e2 a1 01 00	leaq	106978(%rip), %rdi ## literal pool for: "boot task has no program"
1000379ee:	eb 0e	jmp	0x1000379fe
1000379f0:	0f 0b	ud2
1000379f2:	e8 7b 9d 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000379f7:	48 8d 3d eb a1 01 00	leaq	106987(%rip), %rdi ## literal pool for: "boot task argument vector is not an array"
1000379fe:	31 c0	xorl	%eax, %eax
100037a00:	e8 0d ca ff ff	callq	0x100034412
100037a05:	55	pushq	%rbp
100037a06:	48 89 e5	movq	%rsp, %rbp
100037a09:	41 57	pushq	%r15
100037a0b:	41 56	pushq	%r14
100037a0d:	41 55	pushq	%r13
100037a0f:	41 54	pushq	%r12
100037a11:	53	pushq	%rbx
100037a12:	48 81 ec a8 00 00 00	subq	$168, %rsp
100037a19:	48 8b 05 08 06 02 00	movq	132616(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100037a20:	48 8b 00	movq	(%rax), %rax
100037a23:	48 89 45 d0	movq	%rax, -48(%rbp)
100037a27:	4c 8d 3d ba ad 02 00	leaq	175546(%rip), %r15
100037a2e:	41 80 3f 00	cmpb	$0, (%r15)
100037a32:	75 26	jne	0x100037a5a
100037a34:	48 8d 3d df a5 01 00	leaq	107999(%rip), %rdi ## literal pool for: "kern.hostname"
100037a3b:	48 8d 0d e6 a5 01 00	leaq	108006(%rip), %rcx ## literal pool for: "localhost"
100037a42:	41 b8 0a 00 00 00	movl	$10, %r8d
100037a48:	31 f6	xorl	%esi, %esi
100037a4a:	31 d2	xorl	%edx, %edx
100037a4c:	e8 59 a4 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100037a51:	83 f8 ff	cmpl	$-1, %eax
100037a54:	0f 84 ed 03 00 00	je	0x100037e47
100037a5a:	e8 6a 4f fd ff	callq	0x10000c9c9
100037a5f:	41 80 3f 00	cmpb	$0, (%r15)
100037a63:	0f 85 c8 01 00 00	jne	0x100037c31
100037a69:	41 be 11 69 20 c0	movl	$3223349521, %r14d
100037a6f:	66 0f ef c0	pxor	%xmm0, %xmm0
100037a73:	66 0f 7f 85 30 ff ff ff	movdqa	%xmm0, -208(%rbp)
100037a7b:	66 0f 7f 85 40 ff ff ff	movdqa	%xmm0, -192(%rbp)
100037a83:	c7 85 30 ff ff ff 6c 6f 30 00	movl	$3174252, -208(%rbp)
100037a8d:	bf 02 00 00 00	movl	$2, %edi
100037a92:	be 02 00 00 00	movl	$2, %esi
100037a97:	31 d2	xorl	%edx, %edx
100037a99:	e8 6a a3 00 00	callq	0x100041e08 ## symbol stub for: _socket
100037a9e:	83 f8 ff	cmpl	$-1, %eax
100037aa1:	0f 84 52 03 00 00	je	0x100037df9
100037aa7:	89 c3	movl	%eax, %ebx
100037aa9:	48 8d 95 30 ff ff ff	leaq	-208(%rbp), %rdx
100037ab0:	be 11 69 20 c0	movl	$3223349521, %esi
100037ab5:	89 c7	movl	%eax, %edi
100037ab7:	31 c0	xorl	%eax, %eax
100037ab9:	e8 38 a0 00 00	callq	0x100041af6 ## symbol stub for: _ioctl
100037abe:	83 f8 ff	cmpl	$-1, %eax
100037ac1:	0f 84 3c 03 00 00	je	0x100037e03
100037ac7:	48 8d 95 30 ff ff ff	leaq	-208(%rbp), %rdx
100037ace:	80 4a 10 01	orb	$1, 16(%rdx)
100037ad2:	49 8d b6 ff ff ff bf	leaq	-1073741825(%r14), %rsi
100037ad9:	89 df	movl	%ebx, %edi
100037adb:	31 c0	xorl	%eax, %eax
100037add:	e8 14 a0 00 00	callq	0x100041af6 ## symbol stub for: _ioctl
100037ae2:	83 f8 ff	cmpl	$-1, %eax
100037ae5:	0f 84 24 03 00 00	je	0x100037e0f
100037aeb:	66 0f ef c0	pxor	%xmm0, %xmm0
100037aef:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
100037af6:	f3 0f 7f 42 14	movdqu	%xmm0, 20(%rdx)
100037afb:	f3 0f 7f 42 04	movdqu	%xmm0, 4(%rdx)
100037b00:	f3 0f 7f 42 30	movdqu	%xmm0, 48(%rdx)
100037b05:	f3 0f 7f 42 24	movdqu	%xmm0, 36(%rdx)
100037b0a:	c7 02 6c 6f 30 00	movl	$3174252, (%rdx)
100037b10:	c7 42 14 7f 00 00 01	movl	$16777343, 20(%rdx)
100037b17:	66 b8 10 02	movw	$528, %ax
100037b1b:	66 89 42 10	movw	%ax, 16(%rdx)
100037b1f:	c7 42 34 ff 00 00 00	movl	$255, 52(%rdx)
100037b26:	66 89 42 30	movw	%ax, 48(%rdx)
100037b2a:	49 8d b6 09 00 20 c0	leaq	-1071644663(%r14), %rsi
100037b31:	89 df	movl	%ebx, %edi
100037b33:	31 c0	xorl	%eax, %eax
100037b35:	e8 bc 9f 00 00	callq	0x100041af6 ## symbol stub for: _ioctl
100037b3a:	89 df	movl	%ebx, %edi
100037b3c:	83 f8 ff	cmpl	$-1, %eax
100037b3f:	0f 84 d6 02 00 00	je	0x100037e1b
100037b45:	e8 6a ac ff ff	callq	0x1000327b4
100037b4a:	41 80 3f 00	cmpb	$0, (%r15)
100037b4e:	0f 85 dd 00 00 00	jne	0x100037c31
100037b54:	bf 1e 00 00 00	movl	$30, %edi
100037b59:	be 02 00 00 00	movl	$2, %esi
100037b5e:	31 d2	xorl	%edx, %edx
100037b60:	e8 a3 a2 00 00	callq	0x100041e08 ## symbol stub for: _socket
100037b65:	83 f8 ff	cmpl	$-1, %eax
100037b68:	0f 84 b7 02 00 00	je	0x100037e25
100037b6e:	89 c3	movl	%eax, %ebx
100037b70:	66 0f ef c0	pxor	%xmm0, %xmm0
100037b74:	48 8d 95 30 ff ff ff	leaq	-208(%rbp), %rdx
100037b7b:	66 0f 7f 02	movdqa	%xmm0, (%rdx)
100037b7f:	66 0f 7f 42 10	movdqa	%xmm0, 16(%rdx)
100037b84:	c7 02 6c 6f 30 00	movl	$3174252, (%rdx)
100037b8a:	be 11 69 20 c0	movl	$3223349521, %esi
100037b8f:	89 c7	movl	%eax, %edi
100037b91:	31 c0	xorl	%eax, %eax
100037b93:	e8 5e 9f 00 00	callq	0x100041af6 ## symbol stub for: _ioctl
100037b98:	83 f8 ff	cmpl	$-1, %eax
100037b9b:	0f 84 8e 02 00 00	je	0x100037e2f
100037ba1:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
100037ba8:	66 0f ef c0	pxor	%xmm0, %xmm0
100037bac:	66 0f 7f 02	movdqa	%xmm0, (%rdx)
100037bb0:	66 0f 7f 42 20	movdqa	%xmm0, 32(%rdx)
100037bb5:	66 0f 7f 42 10	movdqa	%xmm0, 16(%rdx)
100037bba:	66 0f 7f 42 40	movdqa	%xmm0, 64(%rdx)
100037bbf:	66 0f 7f 42 60	movdqa	%xmm0, 96(%rdx)
100037bc4:	66 0f 7f 42 30	movdqa	%xmm0, 48(%rdx)
100037bc9:	48 c7 42 70 00 00 00 00	movq	$0, 112(%rdx)
100037bd1:	c7 02 6c 6f 30 00	movl	$3174252, (%rdx)
100037bd7:	48 8b 05 6a 05 02 00	movq	132458(%rip), %rax ## literal pool symbol address: _in6addr_loopback
100037bde:	f3 0f 6f 00	movdqu	(%rax), %xmm0
100037be2:	f3 0f 7f 42 18	movdqu	%xmm0, 24(%rdx)
100037be7:	66 b8 1c 1e	movw	$7708, %ax
100037beb:	66 89 42 10	movw	%ax, 16(%rdx)
100037bef:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100037bf3:	66 0f 7f 42 50	movdqa	%xmm0, 80(%rdx)
100037bf8:	66 89 42 48	movw	%ax, 72(%rdx)
100037bfc:	48 c7 42 78 ff ff ff ff	movq	$-1, 120(%rdx)
100037c04:	49 81 c6 09 00 60 c0	addq	$-1067450359, %r14
100037c0b:	89 df	movl	%ebx, %edi
100037c0d:	4c 89 f6	movq	%r14, %rsi
100037c10:	31 c0	xorl	%eax, %eax
100037c12:	e8 df 9e 00 00	callq	0x100041af6 ## symbol stub for: _ioctl
100037c17:	83 f8 ff	cmpl	$-1, %eax
100037c1a:	75 0e	jne	0x100037c2a
100037c1c:	e8 3f 9b 00 00	callq	0x100041760 ## symbol stub for: ___error
100037c21:	83 38 11	cmpl	$17, (%rax)
100037c24:	0f 85 11 02 00 00	jne	0x100037e3b
100037c2a:	89 df	movl	%ebx, %edi
100037c2c:	e8 83 ab ff ff	callq	0x1000327b4
100037c31:	e8 91 d2 ff ff	callq	0x100034ec7
100037c36:	84 c0	testb	%al, %al
100037c38:	74 21	je	0x100037c5b
100037c3a:	48 8d 05 92 ab 02 00	leaq	174994(%rip), %rax
100037c41:	80 38 00	cmpb	$0, (%rax)
100037c44:	75 15	jne	0x100037c5b
100037c46:	48 8d 3d 5f a0 01 00	leaq	106591(%rip), %rdi ## literal pool for: "rc.netboot"
100037c4d:	48 8d 15 fc 3a 02 00	leaq	146172(%rip), %rdx
100037c54:	31 f6	xorl	%esi, %esi
100037c56:	e8 61 e5 ff ff	callq	0x1000361bc
100037c5b:	48 8d 3d 8e 3b 02 00	leaq	146318(%rip), %rdi
100037c62:	e8 bd 9a 00 00	callq	0x100041724 ## symbol stub for: __Block_copy
100037c67:	48 89 05 12 bb 02 00	movq	%rax, 178962(%rip)
100037c6e:	e8 c9 9a 00 00	callq	0x10004173c ## symbol stub for: __NSGetArgc
100037c73:	44 8b 30	movl	(%rax), %r14d
100037c76:	e8 c7 9a 00 00	callq	0x100041742 ## symbol stub for: __NSGetArgv
100037c7b:	48 8b 18	movq	(%rax), %rbx
100037c7e:	41 b5 01	movb	$1, %r13b
100037c81:	4c 8d 3d aa a3 01 00	leaq	107434(%rip), %r15 ## literal pool for: "s"
100037c88:	4c 8d 25 a5 a3 01 00	leaq	107429(%rip), %r12 ## literal pool for: "Ignoring unknown argument: %c"
100037c8f:	44 89 f7	movl	%r14d, %edi
100037c92:	48 89 de	movq	%rbx, %rsi
100037c95:	4c 89 fa	movq	%r15, %rdx
100037c98:	e8 f3 9d 00 00	callq	0x100041a90 ## symbol stub for: _getopt
100037c9d:	83 f8 ff	cmpl	$-1, %eax
100037ca0:	74 1d	je	0x100037cbf
100037ca2:	83 f8 73	cmpl	$115, %eax
100037ca5:	74 13	je	0x100037cba
100037ca7:	bf 04 00 01 00	movl	$65540, %edi
100037cac:	4c 89 e6	movq	%r12, %rsi
100037caf:	89 c2	movl	%eax, %edx
100037cb1:	31 c0	xorl	%eax, %eax
100037cb3:	e8 10 d9 ff ff	callq	0x1000355c8
100037cb8:	eb d5	jmp	0x100037c8f
100037cba:	45 31 ed	xorl	%r13d, %r13d
100037cbd:	eb d0	jmp	0x100037c8f
100037cbf:	41 f6 c5 01	testb	$1, %r13b
100037cc3:	74 1b	je	0x100037ce0
100037cc5:	e8 30 68 fd ff	callq	0x10000e4fa
100037cca:	48 8b 35 af ba 02 00	movq	178863(%rip), %rsi
100037cd1:	48 8d 15 43 e6 ff ff	leaq	-6589(%rip), %rdx
100037cd8:	48 89 c7	movq	%rax, %rdi
100037cdb:	e9 f2 00 00 00	jmp	0x100037dd2
100037ce0:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
100037ce7:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
100037cee:	48 8d 8d 30 ff ff ff	leaq	-208(%rbp), %rcx
100037cf5:	c7 01 00 00 00 00	movl	$0, (%rcx)
100037cfb:	48 8d 3d 84 9c 01 00	leaq	105604(%rip), %rdi ## literal pool for: "security.mac.sandbox.sandcastle.enabled"
100037d02:	48 8d 35 6f ba 02 00	leaq	178799(%rip), %rsi
100037d09:	41 b8 04 00 00 00	movl	$4, %r8d
100037d0f:	e8 96 a1 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
100037d14:	48 8d 05 b6 aa 02 00	leaq	174774(%rip), %rax
100037d1b:	c6 00 01	movb	$1, (%rax)
100037d1e:	48 8d 35 2d a3 01 00	leaq	107309(%rip), %rsi ## literal pool for: "Entering single-user mode."
100037d25:	bf 05 00 01 00	movl	$65541, %edi
100037d2a:	31 c0	xorl	%eax, %eax
100037d2c:	e8 97 d8 ff ff	callq	0x1000355c8
100037d31:	48 8d 3d de f8 00 00	leaq	63710(%rip), %rdi ## literal pool for: "%s"
100037d38:	48 8d 35 2e a3 01 00	leaq	107310(%rip), %rsi ## literal pool for: "*** Single-user boot ***\nRoot device is mounted read-only\nMAC enforcement has been neutered for debugging purposes and will be\nrestored upon exiting single-user mode.\nEnabling and disabling services is not supported in single-user mode,\nand disabled services will not be respected when loading services\nwhile in single-user mode.\nTo mount the root device as read-write:\n\t$ /sbin/mount -uw /\nTo mount the data partition on an SEP-enabled device:\n\t$ /sbin/mount -P 1\n\t$ /usr/libexec/init_data_protection\n\t$ /sbin/mount -P 2\nOn all other devices:\n\t$ /sbin/mount -vat nonfs\nTo boot the system:\n\t$ exit\n"
100037d3f:	31 c0	xorl	%eax, %eax
100037d41:	e8 bb 55 fd ff	callq	0x10000d301
100037d46:	85 c0	testl	%eax, %eax
100037d48:	74 64	je	0x100037dae
100037d4a:	c6 05 18 aa 02 00 01	movb	$1, 174616(%rip)
100037d51:	48 63 d8	movslq	%eax, %rbx
100037d54:	e8 a1 67 fd ff	callq	0x10000e4fa
100037d59:	ba 11 69 20 c0	movl	$3223349521, %edx
100037d5e:	48 81 c2 ef 96 df bf	addq	$-1075865873, %rdx
100037d65:	48 8b 3d f4 02 02 00	movq	131828(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_proc
100037d6c:	48 89 de	movq	%rbx, %rsi
100037d6f:	48 89 c1	movq	%rax, %rcx
100037d72:	e8 0b 9c 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100037d77:	48 89 05 f2 b9 02 00	movq	%rax, 178674(%rip)
100037d7e:	48 8d 35 96 e5 ff ff	leaq	-6762(%rip), %rsi
100037d85:	48 89 c7	movq	%rax, %rdi
100037d88:	e8 19 9c 00 00	callq	0x1000419a6 ## symbol stub for: _dispatch_source_set_event_handler_f
100037d8d:	48 8b 3d dc b9 02 00	movq	178652(%rip), %rdi
100037d94:	48 8b 35 e5 b9 02 00	movq	178661(%rip), %rsi
100037d9b:	e8 d6 9b 00 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100037da0:	48 8b 3d c9 b9 02 00	movq	178633(%rip), %rdi
100037da7:	e8 16 9b 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100037dac:	eb 29	jmp	0x100037dd7
100037dae:	48 8d 35 0f a5 01 00	leaq	107791(%rip), %rsi ## literal pool for: "Could not enter single-user mode."
100037db5:	bf 03 00 01 00	movl	$65539, %edi
100037dba:	31 c0	xorl	%eax, %eax
100037dbc:	e8 07 d8 ff ff	callq	0x1000355c8
100037dc1:	e8 34 67 fd ff	callq	0x10000e4fa
100037dc6:	48 8d 15 4e e5 ff ff	leaq	-6834(%rip), %rdx
100037dcd:	48 89 c7	movq	%rax, %rdi
100037dd0:	31 f6	xorl	%esi, %esi
100037dd2:	e8 09 9b 00 00	callq	0x1000418e0 ## symbol stub for: _dispatch_async_f
100037dd7:	48 8b 05 4a 02 02 00	movq	131658(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100037dde:	48 8b 00	movq	(%rax), %rax
100037de1:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100037de5:	75 65	jne	0x100037e4c
100037de7:	48 81 c4 a8 00 00 00	addq	$168, %rsp
100037dee:	5b	popq	%rbx
100037def:	41 5c	popq	%r12
100037df1:	41 5d	popq	%r13
100037df3:	41 5e	popq	%r14
100037df5:	41 5f	popq	%r15
100037df7:	5d	popq	%rbp
100037df8:	c3	retq
100037df9:	e8 42 95 00 00	callq	0x100041340
100037dfe:	e9 47 fd ff ff	jmp	0x100037b4a
100037e03:	89 df	movl	%ebx, %edi
100037e05:	e8 49 95 00 00	callq	0x100041353
100037e0a:	e9 3b fd ff ff	jmp	0x100037b4a
100037e0f:	89 df	movl	%ebx, %edi
100037e11:	e8 60 95 00 00	callq	0x100041376
100037e16:	e9 2f fd ff ff	jmp	0x100037b4a
100037e1b:	e8 79 95 00 00	callq	0x100041399
100037e20:	e9 25 fd ff ff	jmp	0x100037b4a
100037e25:	e8 bd 94 00 00	callq	0x1000412e7
100037e2a:	e9 02 fe ff ff	jmp	0x100037c31
100037e2f:	89 df	movl	%ebx, %edi
100037e31:	e8 c4 94 00 00	callq	0x1000412fa
100037e36:	e9 f6 fd ff ff	jmp	0x100037c31
100037e3b:	89 df	movl	%ebx, %edi
100037e3d:	e8 db 94 00 00	callq	0x10004131d
100037e42:	e9 ea fd ff ff	jmp	0x100037c31
100037e47:	e8 80 94 00 00	callq	0x1000412cc
100037e4c:	e8 21 99 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100037e51:	55	pushq	%rbp
100037e52:	48 89 e5	movq	%rsp, %rbp
100037e55:	48 89 f7	movq	%rsi, %rdi
100037e58:	48 89 d6	movq	%rdx, %rsi
100037e5b:	89 ca	movl	%ecx, %edx
100037e5d:	5d	popq	%rbp
100037e5e:	e9 d1 ed ff ff	jmp	0x100036c34
100037e63:	55	pushq	%rbp
100037e64:	48 89 e5	movq	%rsp, %rbp
100037e67:	41 56	pushq	%r14
100037e69:	53	pushq	%rbx
100037e6a:	48 8d 05 97 a9 02 00	leaq	174487(%rip), %rax
100037e71:	80 38 00	cmpb	$0, (%rax)
100037e74:	b8 00 28 00 00	movl	$10240, %eax
100037e79:	bb 00 1c 00 00	movl	$7168, %ebx
100037e7e:	0f 44 d8	cmovel	%eax, %ebx
100037e81:	41 89 f6	movl	%esi, %r14d
100037e84:	48 8b 05 1d 03 02 00	movq	131869(%rip), %rax ## literal pool symbol address: _mach_task_self_
100037e8b:	39 38	cmpl	%edi, (%rax)
100037e8d:	75 19	jne	0x100037ea8
100037e8f:	89 de	movl	%ebx, %esi
100037e91:	44 89 f2	movl	%r14d, %edx
100037e94:	b9 04 00 00 80	movl	$2147483652, %ecx
100037e99:	41 b8 07 00 00 00	movl	$7, %r8d
100037e9f:	5b	popq	%rbx
100037ea0:	41 5e	popq	%r14
100037ea2:	5d	popq	%rbp
100037ea3:	e9 20 a0 00 00	jmp	0x100041ec8 ## symbol stub for: _task_set_exception_ports
100037ea8:	e8 91 9c 00 00	callq	0x100041b3e ## symbol stub for: _mach_host_self
100037ead:	89 c7	movl	%eax, %edi
100037eaf:	89 de	movl	%ebx, %esi
100037eb1:	44 89 f2	movl	%r14d, %edx
100037eb4:	b9 04 00 00 80	movl	$2147483652, %ecx
100037eb9:	41 b8 07 00 00 00	movl	$7, %r8d
100037ebf:	5b	popq	%rbx
100037ec0:	41 5e	popq	%r14
100037ec2:	5d	popq	%rbp
100037ec3:	e9 22 9c 00 00	jmp	0x100041aea ## symbol stub for: _host_set_exception_ports
100037ec8:	55	pushq	%rbp
100037ec9:	48 89 e5	movq	%rsp, %rbp
100037ecc:	48 8d 15 bd 38 02 00	leaq	145597(%rip), %rdx
100037ed3:	be 01 00 00 00	movl	$1, %esi
100037ed8:	5d	popq	%rbp
100037ed9:	e9 de e2 ff ff	jmp	0x1000361bc
100037ede:	55	pushq	%rbp
100037edf:	48 89 e5	movq	%rsp, %rbp
100037ee2:	48 89 f7	movq	%rsi, %rdi
100037ee5:	48 89 d6	movq	%rdx, %rsi
100037ee8:	89 ca	movl	%ecx, %edx
100037eea:	5d	popq	%rbp
100037eeb:	e9 44 ed ff ff	jmp	0x100036c34
100037ef0:	55	pushq	%rbp
100037ef1:	48 89 e5	movq	%rsp, %rbp
100037ef4:	41 57	pushq	%r15
100037ef6:	41 56	pushq	%r14
100037ef8:	53	pushq	%rbx
100037ef9:	48 83 ec 48	subq	$72, %rsp
100037efd:	48 89 f2	movq	%rsi, %rdx
100037f00:	48 89 fe	movq	%rdi, %rsi
100037f03:	48 85 d2	testq	%rdx, %rdx
100037f06:	75 0a	jne	0x100037f12
100037f08:	48 89 f7	movq	%rsi, %rdi
100037f0b:	e8 d2 70 fd ff	callq	0x10000efe2
100037f10:	eb 0e	jmp	0x100037f20
100037f12:	48 8d 3d af 9d 01 00	leaq	105903(%rip), %rdi ## literal pool for: "%s - %s"
100037f19:	31 c0	xorl	%eax, %eax
100037f1b:	e8 15 72 fd ff	callq	0x10000f135
100037f20:	49 89 c7	movq	%rax, %r15
100037f23:	0f 28 05 56 b3 00 00	movaps	45910(%rip), %xmm0
100037f2a:	48 8d 5d a0	leaq	-96(%rbp), %rbx
100037f2e:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
100037f32:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
100037f36:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
100037f3a:	0f 29 03	movaps	%xmm0, (%rbx)
100037f3d:	4c 8d 35 8c 9d 01 00	leaq	105868(%rip), %r14 ## literal pool for: "boot task failure: %s"
100037f44:	be 40 00 00 00	movl	$64, %esi
100037f49:	48 89 df	movq	%rbx, %rdi
100037f4c:	4c 89 f2	movq	%r14, %rdx
100037f4f:	48 89 c1	movq	%rax, %rcx
100037f52:	31 c0	xorl	%eax, %eax
100037f54:	e8 a9 9e 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
100037f59:	48 89 df	movq	%rbx, %rdi
100037f5c:	e8 f3 9d 00 00	callq	0x100041d54 ## symbol stub for: _pthread_setname_np
100037f61:	48 8d 35 7e 9d 01 00	leaq	105854(%rip), %rsi ## literal pool for: "Boot task failed: %s"
100037f68:	bf 00 00 01 00	movl	$65536, %edi
100037f6d:	4c 89 fa	movq	%r15, %rdx
100037f70:	31 c0	xorl	%eax, %eax
100037f72:	e8 51 d6 ff ff	callq	0x1000355c8
100037f77:	48 8d 35 7d 9d 01 00	leaq	105853(%rip), %rsi ## literal pool for: "Panicking in 3 seconds."
100037f7e:	bf 00 00 01 00	movl	$65536, %edi
100037f83:	31 c0	xorl	%eax, %eax
100037f85:	e8 3e d6 ff ff	callq	0x1000355c8
100037f8a:	bf 03 00 00 00	movl	$3, %edi
100037f8f:	e8 68 9e 00 00	callq	0x100041dfc ## symbol stub for: _sleep
100037f94:	4c 89 f7	movq	%r14, %rdi
100037f97:	4c 89 fe	movq	%r15, %rsi
100037f9a:	31 c0	xorl	%eax, %eax
100037f9c:	e8 26 c5 ff ff	callq	0x1000344c7
100037fa1:	55	pushq	%rbp
100037fa2:	48 89 e5	movq	%rsp, %rbp
100037fa5:	41 56	pushq	%r14
100037fa7:	53	pushq	%rbx
100037fa8:	83 ff 03	cmpl	$3, %edi
100037fab:	74 2e	je	0x100037fdb
100037fad:	83 ff 02	cmpl	$2, %edi
100037fb0:	74 37	je	0x100037fe9
100037fb2:	89 f3	movl	%esi, %ebx
100037fb4:	83 ff 01	cmpl	$1, %edi
100037fb7:	75 35	jne	0x100037fee
100037fb9:	bf 3c 00 00 22	movl	$570425404, %edi
100037fbe:	31 f6	xorl	%esi, %esi
100037fc0:	e8 0a 4f fd ff	callq	0x10000cecf
100037fc5:	89 df	movl	%ebx, %edi
100037fc7:	e8 ca 9d 00 00	callq	0x100041d96 ## symbol stub for: _reboot
100037fcc:	e8 8f 97 00 00	callq	0x100041760 ## symbol stub for: ___error
100037fd1:	83 38 10	cmpl	$16, (%rax)
100037fd4:	75 34	jne	0x10003800a
100037fd6:	e8 46 00 00 00	callq	0x100038021
100037fdb:	48 8d 3d 31 9d 01 00	leaq	105777(%rip), %rdi ## literal pool for: "no recovery mode"
100037fe2:	31 f6	xorl	%esi, %esi
100037fe4:	e8 07 ff ff ff	callq	0x100037ef0
100037fe9:	e8 c7 c5 ff ff	callq	0x1000345b5
100037fee:	49 89 d6	movq	%rdx, %r14
100037ff1:	be 02 00 00 00	movl	$2, %esi
100037ff6:	bf 3c 00 00 22	movl	$570425404, %edi
100037ffb:	e8 cf 4e fd ff	callq	0x10000cecf
100038000:	89 df	movl	%ebx, %edi
100038002:	4c 89 f6	movq	%r14, %rsi
100038005:	e8 22 00 00 00	callq	0x10003802c
10003800a:	e8 51 97 00 00	callq	0x100041760 ## symbol stub for: ___error
10003800f:	48 63 38	movslq	(%rax), %rdi
100038012:	e8 85 97 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100038017:	48 89 c7	movq	%rax, %rdi
10003801a:	e8 95 97 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003801f:	0f 0b	ud2
100038021:	55	pushq	%rbp
100038022:	48 89 e5	movq	%rsp, %rbp
100038025:	e8 88 9c 00 00	callq	0x100041cb2 ## symbol stub for: _pause
10003802a:	eb f9	jmp	0x100038025
10003802c:	55	pushq	%rbp
10003802d:	48 89 e5	movq	%rsp, %rbp
100038030:	41 57	pushq	%r15
100038032:	41 56	pushq	%r14
100038034:	53	pushq	%rbx
100038035:	48 81 ec 38 04 00 00	subq	$1080, %rsp
10003803c:	49 89 f6	movq	%rsi, %r14
10003803f:	89 fb	movl	%edi, %ebx
100038041:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10003804b:	48 89 45 e0	movq	%rax, -32(%rbp)
10003804f:	4c 8d bd b0 fb ff ff	leaq	-1104(%rbp), %r15
100038056:	ba 00 04 00 00	movl	$1024, %edx
10003805b:	4c 89 ff	movq	%r15, %rdi
10003805e:	be aa 00 00 00	movl	$170, %esi
100038063:	e8 72 9b 00 00	callq	0x100041bda ## symbol stub for: _memset
100038068:	e8 d5 96 00 00	callq	0x100041742 ## symbol stub for: __NSGetArgv
10003806d:	48 8b 00	movq	(%rax), %rax
100038070:	31 c9	xorl	%ecx, %ecx
100038072:	f6 c3 02	testb	$2, %bl
100038075:	48 8b 00	movq	(%rax), %rax
100038078:	48 89 45 b0	movq	%rax, -80(%rbp)
10003807c:	48 8d 05 63 a2 01 00	leaq	107107(%rip), %rax ## literal pool for: "-s"
100038083:	48 0f 45 c8	cmovneq	%rax, %rcx
100038087:	48 89 4d b8	movq	%rcx, -72(%rbp)
10003808b:	48 c7 45 c0 00 00 00 00	movq	$0, -64(%rbp)
100038093:	48 8d 75 d8	leaq	-40(%rbp), %rsi
100038097:	c7 06 00 04 00 00	movl	$1024, (%rsi)
10003809d:	4c 89 ff	movq	%r15, %rdi
1000380a0:	e8 a9 96 00 00	callq	0x10004174e ## symbol stub for: __NSGetExecutablePath
1000380a5:	c7 45 dc 00 00 00 00	movl	$0, -36(%rbp)
1000380ac:	31 ff	xorl	%edi, %edi
1000380ae:	e8 2d 9e 00 00	callq	0x100041ee0 ## symbol stub for: _usrctl
1000380b3:	83 f8 ff	cmpl	$-1, %eax
1000380b6:	75 0d	jne	0x1000380c5
1000380b8:	e8 a3 96 00 00	callq	0x100041760 ## symbol stub for: ___error
1000380bd:	48 63 38	movslq	(%rax), %rdi
1000380c0:	e8 dd 96 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000380c5:	48 8d 4d d4	leaq	-44(%rbp), %rcx
1000380c9:	c7 01 01 00 00 00	movl	$1, (%rcx)
1000380cf:	48 8d 3d 13 a2 01 00	leaq	107027(%rip), %rdi ## literal pool for: "vm.shared_region_pivot"
1000380d6:	41 b8 04 00 00 00	movl	$4, %r8d
1000380dc:	31 f6	xorl	%esi, %esi
1000380de:	31 d2	xorl	%edx, %edx
1000380e0:	e8 c5 9d 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
1000380e5:	83 f8 ff	cmpl	$-1, %eax
1000380e8:	0f 84 f0 00 00 00	je	0x1000381de
1000380ee:	4d 85 f6	testq	%r14, %r14
1000380f1:	74 4c	je	0x10003813f
1000380f3:	48 8d 1d 8e a5 02 00	leaq	173454(%rip), %rbx
1000380fa:	48 8b 33	movq	(%rbx), %rsi
1000380fd:	4c 89 f7	movq	%r14, %rdi
100038100:	e8 b3 9b 00 00	callq	0x100041cb8 ## symbol stub for: _pivot_root
100038105:	85 c0	testl	%eax, %eax
100038107:	0f 85 b6 00 00 00	jne	0x1000381c3
10003810d:	48 8d 3d 7b f4 00 00	leaq	62587(%rip), %rdi ## literal pool for: "/"
100038114:	e8 07 97 00 00	callq	0x100041820 ## symbol stub for: _chdir
100038119:	83 f8 ff	cmpl	$-1, %eax
10003811c:	0f 84 ea 00 00 00	je	0x10003820c
100038122:	48 8d 3d 03 a2 01 00	leaq	107011(%rip), %rdi ## literal pool for: "XPC_USERSPACE_PIVOTEDROOT"
100038129:	4c 89 f6	movq	%r14, %rsi
10003812c:	ba 01 00 00 00	movl	$1, %edx
100038131:	e8 90 9c 00 00	callq	0x100041dc6 ## symbol stub for: _setenv
100038136:	83 f8 ff	cmpl	$-1, %eax
100038139:	0f 84 e4 00 00 00	je	0x100038223
10003813f:	48 8d 3d 78 09 01 00	leaq	67960(%rip), %rdi ## literal pool for: "XPC_USERSPACE_REBOOTED"
100038146:	48 8d 35 eb b2 00 00	leaq	45803(%rip), %rsi ## literal pool for: "1"
10003814d:	ba 01 00 00 00	movl	$1, %edx
100038152:	e8 6f 9c 00 00	callq	0x100041dc6 ## symbol stub for: _setenv
100038157:	83 f8 ff	cmpl	$-1, %eax
10003815a:	0f 84 95 00 00 00	je	0x1000381f5
100038160:	48 8d 7d e0	leaq	-32(%rbp), %rdi
100038164:	e8 73 9b 00 00	callq	0x100041cdc ## symbol stub for: _posix_spawnattr_init
100038169:	85 c0	testl	%eax, %eax
10003816b:	74 08	je	0x100038175
10003816d:	48 63 f8	movslq	%eax, %rdi
100038170:	e8 2d 96 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100038175:	48 8d 7d e0	leaq	-32(%rbp), %rdi
100038179:	be 40 40 00 00	movl	$16448, %esi
10003817e:	e8 95 9b 00 00	callq	0x100041d18 ## symbol stub for: _posix_spawnattr_setflags
100038183:	85 c0	testl	%eax, %eax
100038185:	74 08	je	0x10003818f
100038187:	48 63 f8	movslq	%eax, %rdi
10003818a:	e8 13 96 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003818f:	e8 b4 95 00 00	callq	0x100041748 ## symbol stub for: __NSGetEnviron
100038194:	4c 8b 08	movq	(%rax), %r9
100038197:	48 8d 7d dc	leaq	-36(%rbp), %rdi
10003819b:	48 8d b5 b0 fb ff ff	leaq	-1104(%rbp), %rsi
1000381a2:	48 8d 4d e0	leaq	-32(%rbp), %rcx
1000381a6:	4c 8d 45 b0	leaq	-80(%rbp), %r8
1000381aa:	31 d2	xorl	%edx, %edx
1000381ac:	e8 0d 9b 00 00	callq	0x100041cbe ## symbol stub for: _posix_spawn
1000381b1:	48 63 f8	movslq	%eax, %rdi
1000381b4:	e8 e3 95 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000381b9:	48 89 c7	movq	%rax, %rdi
1000381bc:	e8 f3 95 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000381c1:	0f 0b	ud2
1000381c3:	e8 98 95 00 00	callq	0x100041760 ## symbol stub for: ___error
1000381c8:	8b 30	movl	(%rax), %esi
1000381ca:	48 8b 0b	movq	(%rbx), %rcx
1000381cd:	48 8d 3d 2c a1 01 00	leaq	106796(%rip), %rdi ## literal pool for: "pivot_root() failed: errno=%d new=%s old=%s"
1000381d4:	4c 89 f2	movq	%r14, %rdx
1000381d7:	31 c0	xorl	%eax, %eax
1000381d9:	e8 e9 c2 ff ff	callq	0x1000344c7
1000381de:	e8 7d 95 00 00	callq	0x100041760 ## symbol stub for: ___error
1000381e3:	48 63 38	movslq	(%rax), %rdi
1000381e6:	e8 b1 95 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000381eb:	48 89 c7	movq	%rax, %rdi
1000381ee:	e8 c1 95 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000381f3:	0f 0b	ud2
1000381f5:	e8 66 95 00 00	callq	0x100041760 ## symbol stub for: ___error
1000381fa:	48 63 38	movslq	(%rax), %rdi
1000381fd:	e8 9a 95 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100038202:	48 89 c7	movq	%rax, %rdi
100038205:	e8 aa 95 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003820a:	0f 0b	ud2
10003820c:	e8 4f 95 00 00	callq	0x100041760 ## symbol stub for: ___error
100038211:	48 63 38	movslq	(%rax), %rdi
100038214:	e8 83 95 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100038219:	48 89 c7	movq	%rax, %rdi
10003821c:	e8 93 95 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100038221:	0f 0b	ud2
100038223:	e8 38 95 00 00	callq	0x100041760 ## symbol stub for: ___error
100038228:	48 63 38	movslq	(%rax), %rdi
10003822b:	e8 6c 95 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100038230:	48 89 c7	movq	%rax, %rdi
100038233:	e8 7c 95 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100038238:	0f 0b	ud2
10003823a:	55	pushq	%rbp
10003823b:	48 89 e5	movq	%rsp, %rbp
10003823e:	53	pushq	%rbx
10003823f:	50	pushq	%rax
100038240:	48 89 fb	movq	%rdi, %rbx
100038243:	48 8d 35 db b6 00 00	leaq	46811(%rip), %rsi ## literal pool for: "Program"
10003824a:	e8 0b 9e 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
10003824f:	48 85 c0	testq	%rax, %rax
100038252:	75 2a	jne	0x10003827e
100038254:	48 8d 35 d2 b6 00 00	leaq	46802(%rip), %rsi ## literal pool for: "ProgramArguments"
10003825b:	48 89 df	movq	%rbx, %rdi
10003825e:	e8 09 9e 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
100038263:	48 85 c0	testq	%rax, %rax
100038266:	74 14	je	0x10003827c
100038268:	48 89 c3	movq	%rax, %rbx
10003826b:	48 89 c7	movq	%rax, %rdi
10003826e:	e8 53 9e 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
100038273:	48 3b 05 5e fe 01 00	cmpq	130654(%rip), %rax ## literal pool symbol address: __xpc_type_array
10003827a:	74 09	je	0x100038285
10003827c:	31 c0	xorl	%eax, %eax
10003827e:	48 83 c4 08	addq	$8, %rsp
100038282:	5b	popq	%rbx
100038283:	5d	popq	%rbp
100038284:	c3	retq
100038285:	48 89 df	movq	%rbx, %rdi
100038288:	e8 bf 9c 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10003828d:	48 85 c0	testq	%rax, %rax
100038290:	74 ea	je	0x10003827c
100038292:	48 89 df	movq	%rbx, %rdi
100038295:	31 f6	xorl	%esi, %esi
100038297:	48 83 c4 08	addq	$8, %rsp
10003829b:	5b	popq	%rbx
10003829c:	5d	popq	%rbp
10003829d:	e9 b0 9c 00 00	jmp	0x100041f52 ## symbol stub for: _xpc_array_get_string
1000382a2:	55	pushq	%rbp
1000382a3:	48 89 e5	movq	%rsp, %rbp
1000382a6:	53	pushq	%rbx
1000382a7:	50	pushq	%rax
1000382a8:	48 89 fb	movq	%rdi, %rbx
1000382ab:	8b 3f	movl	(%rdi), %edi
1000382ad:	83 ff 02	cmpl	$2, %edi
1000382b0:	75 26	jne	0x1000382d8
1000382b2:	8b 7b 04	movl	4(%rbx), %edi
1000382b5:	e8 ad cc ff ff	callq	0x100034f67
1000382ba:	48 85 c0	testq	%rax, %rax
1000382bd:	74 17	je	0x1000382d6
1000382bf:	48 8d 3d b6 24 01 00	leaq	74934(%rip), %rdi ## literal pool for: "exited due to %s"
1000382c6:	48 89 c6	movq	%rax, %rsi
1000382c9:	31 c0	xorl	%eax, %eax
1000382cb:	48 83 c4 08	addq	$8, %rsp
1000382cf:	5b	popq	%rbx
1000382d0:	5d	popq	%rbp
1000382d1:	e9 5f 6e fd ff	jmp	0x10000f135
1000382d6:	8b 3b	movl	(%rbx), %edi
1000382d8:	e8 a0 cc ff ff	callq	0x100034f7d
1000382dd:	48 85 c0	testq	%rax, %rax
1000382e0:	74 1b	je	0x1000382fd
1000382e2:	48 8b 53 04	movq	4(%rbx), %rdx
1000382e6:	48 8d 3d eb 9c 01 00	leaq	105707(%rip), %rdi ## literal pool for: "exited due to %s, code %llu"
1000382ed:	48 89 c6	movq	%rax, %rsi
1000382f0:	31 c0	xorl	%eax, %eax
1000382f2:	48 83 c4 08	addq	$8, %rsp
1000382f6:	5b	popq	%rbx
1000382f7:	5d	popq	%rbp
1000382f8:	e9 38 6e fd ff	jmp	0x10000f135
1000382fd:	8b 33	movl	(%rbx), %esi
1000382ff:	48 8b 53 04	movq	4(%rbx), %rdx
100038303:	48 8d 3d ea 9c 01 00	leaq	105706(%rip), %rdi ## literal pool for: "exit reason | namespace %u, code %llu"
10003830a:	31 c0	xorl	%eax, %eax
10003830c:	48 83 c4 08	addq	$8, %rsp
100038310:	5b	popq	%rbx
100038311:	5d	popq	%rbp
100038312:	e9 1e 6e fd ff	jmp	0x10000f135
100038317:	55	pushq	%rbp
100038318:	48 89 e5	movq	%rsp, %rbp
10003831b:	48 89 f7	movq	%rsi, %rdi
10003831e:	48 89 d6	movq	%rdx, %rsi
100038321:	89 ca	movl	%ecx, %edx
100038323:	5d	popq	%rbp
100038324:	e9 0b e9 ff ff	jmp	0x100036c34
100038329:	48 85 ff	testq	%rdi, %rdi
10003832c:	74 06	je	0x100038334
10003832e:	48 89 f8	movq	%rdi, %rax
100038331:	31 d2	xorl	%edx, %edx
100038333:	c3	retq
100038334:	55	pushq	%rbp
100038335:	48 89 e5	movq	%rsp, %rbp
100038338:	e8 7f 90 00 00	callq	0x1000413bc
10003833d:	85 ff	testl	%edi, %edi
10003833f:	74 05	je	0x100038346
100038341:	31 c0	xorl	%eax, %eax
100038343:	89 fa	movl	%edi, %edx
100038345:	c3	retq
100038346:	55	pushq	%rbp
100038347:	48 89 e5	movq	%rsp, %rbp
10003834a:	e8 7f 90 00 00	callq	0x1000413ce
10003834f:	55	pushq	%rbp
100038350:	48 89 e5	movq	%rsp, %rbp
100038353:	48 8b 7e 18	movq	24(%rsi), %rdi
100038357:	48 8b 72 18	movq	24(%rdx), %rsi
10003835b:	5d	popq	%rbp
10003835c:	e9 cb 9a 00 00	jmp	0x100041e2c ## symbol stub for: _strcmp
100038361:	55	pushq	%rbp
100038362:	48 89 e5	movq	%rsp, %rbp
100038365:	48 8b 7e 18	movq	24(%rsi), %rdi
100038369:	48 89 d6	movq	%rdx, %rsi
10003836c:	5d	popq	%rbp
10003836d:	e9 ba 9a 00 00	jmp	0x100041e2c ## symbol stub for: _strcmp
100038372:	55	pushq	%rbp
100038373:	48 89 e5	movq	%rsp, %rbp
100038376:	41 57	pushq	%r15
100038378:	41 56	pushq	%r14
10003837a:	41 54	pushq	%r12
10003837c:	53	pushq	%rbx
10003837d:	81 7f 10 75 13 00 00	cmpl	$4981, 16(%rdi)
100038384:	0f 85 8b 00 00 00	jne	0x100038415
10003838a:	49 89 d6	movq	%rdx, %r14
10003838d:	49 89 f7	movq	%rsi, %r15
100038390:	49 89 fc	movq	%rdi, %r12
100038393:	48 8b 7f 08	movq	8(%rdi), %rdi
100038397:	e8 d0 99 00 00	callq	0x100041d6c ## symbol stub for: _rb_tree_find_node
10003839c:	48 85 c0	testq	%rax, %rax
10003839f:	74 2a	je	0x1000383cb
1000383a1:	48 89 c3	movq	%rax, %rbx
1000383a4:	49 8b 7c 24 08	movq	8(%r12), %rdi
1000383a9:	48 89 c6	movq	%rax, %rsi
1000383ac:	e8 d3 99 00 00	callq	0x100041d84 ## symbol stub for: _rb_tree_remove_node
1000383b1:	48 8b 7b 20	movq	32(%rbx), %rdi
1000383b5:	e8 9e 98 00 00	callq	0x100041c58 ## symbol stub for: _os_release
1000383ba:	48 8b 7b 18	movq	24(%rbx), %rdi
1000383be:	e8 6d 96 00 00	callq	0x100041a30 ## symbol stub for: _free
1000383c3:	48 89 df	movq	%rbx, %rdi
1000383c6:	e8 65 96 00 00	callq	0x100041a30 ## symbol stub for: _free
1000383cb:	4d 85 f6	testq	%r14, %r14
1000383ce:	74 37	je	0x100038407
1000383d0:	bf 28 00 00 00	movl	$40, %edi
1000383d5:	e8 e8 97 00 00	callq	0x100041bc2 ## symbol stub for: _malloc
1000383da:	48 89 c3	movq	%rax, %rbx
1000383dd:	4c 89 ff	movq	%r15, %rdi
1000383e0:	e8 53 9a 00 00	callq	0x100041e38 ## symbol stub for: _strdup
1000383e5:	48 89 43 18	movq	%rax, 24(%rbx)
1000383e9:	4c 89 f7	movq	%r14, %rdi
1000383ec:	e8 6d 98 00 00	callq	0x100041c5e ## symbol stub for: _os_retain
1000383f1:	48 89 43 20	movq	%rax, 32(%rbx)
1000383f5:	49 8b 7c 24 08	movq	8(%r12), %rdi
1000383fa:	48 89 de	movq	%rbx, %rsi
1000383fd:	e8 76 99 00 00	callq	0x100041d78 ## symbol stub for: _rb_tree_insert_node
100038402:	48 39 d8	cmpq	%rbx, %rax
100038405:	75 09	jne	0x100038410
100038407:	5b	popq	%rbx
100038408:	41 5c	popq	%r12
10003840a:	41 5e	popq	%r14
10003840c:	41 5f	popq	%r15
10003840e:	5d	popq	%rbp
10003840f:	c3	retq
100038410:	e8 cb 8f 00 00	callq	0x1000413e0
100038415:	0f 0b	ud2
100038417:	55	pushq	%rbp
100038418:	48 89 e5	movq	%rsp, %rbp
10003841b:	81 7f 10 75 13 00 00	cmpl	$4981, 16(%rdi)
100038422:	75 18	jne	0x10003843c
100038424:	48 8b 7f 08	movq	8(%rdi), %rdi
100038428:	e8 3f 99 00 00	callq	0x100041d6c ## symbol stub for: _rb_tree_find_node
10003842d:	48 85 c0	testq	%rax, %rax
100038430:	74 06	je	0x100038438
100038432:	48 8b 40 20	movq	32(%rax), %rax
100038436:	eb 02	jmp	0x10003843a
100038438:	31 c0	xorl	%eax, %eax
10003843a:	5d	popq	%rbp
10003843b:	c3	retq
10003843c:	0f 0b	ud2
10003843e:	55	pushq	%rbp
10003843f:	48 89 e5	movq	%rsp, %rbp
100038442:	41 57	pushq	%r15
100038444:	41 56	pushq	%r14
100038446:	53	pushq	%rbx
100038447:	50	pushq	%rax
100038448:	81 7f 10 75 13 00 00	cmpl	$4981, 16(%rdi)
10003844f:	75 51	jne	0x1000384a2
100038451:	49 89 f7	movq	%rsi, %r15
100038454:	49 89 fe	movq	%rdi, %r14
100038457:	48 8b 7f 08	movq	8(%rdi), %rdi
10003845b:	31 f6	xorl	%esi, %esi
10003845d:	ba 01 00 00 00	movl	$1, %edx
100038462:	e8 17 99 00 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
100038467:	48 85 c0	testq	%rax, %rax
10003846a:	74 2b	je	0x100038497
10003846c:	48 89 c3	movq	%rax, %rbx
10003846f:	48 8b 73 18	movq	24(%rbx), %rsi
100038473:	48 8b 53 20	movq	32(%rbx), %rdx
100038477:	4c 89 ff	movq	%r15, %rdi
10003847a:	41 ff 57 10	callq	*16(%r15)
10003847e:	49 8b 7e 08	movq	8(%r14), %rdi
100038482:	48 89 de	movq	%rbx, %rsi
100038485:	ba 01 00 00 00	movl	$1, %edx
10003848a:	e8 ef 98 00 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
10003848f:	48 89 c3	movq	%rax, %rbx
100038492:	48 85 c0	testq	%rax, %rax
100038495:	75 d8	jne	0x10003846f
100038497:	48 83 c4 08	addq	$8, %rsp
10003849b:	5b	popq	%rbx
10003849c:	41 5e	popq	%r14
10003849e:	41 5f	popq	%r15
1000384a0:	5d	popq	%rbp
1000384a1:	c3	retq
1000384a2:	0f 0b	ud2
1000384a4:	55	pushq	%rbp
1000384a5:	48 89 e5	movq	%rsp, %rbp
1000384a8:	81 7f 10 75 13 00 00	cmpl	$4981, 16(%rdi)
1000384af:	75 0a	jne	0x1000384bb
1000384b1:	48 8b 7f 08	movq	8(%rdi), %rdi
1000384b5:	5d	popq	%rbp
1000384b6:	e9 ab 98 00 00	jmp	0x100041d66 ## symbol stub for: _rb_tree_count
1000384bb:	0f 0b	ud2
1000384bd:	55	pushq	%rbp
1000384be:	48 89 e5	movq	%rsp, %rbp
1000384c1:	53	pushq	%rbx
1000384c2:	50	pushq	%rax
1000384c3:	31 ff	xorl	%edi, %edi
1000384c5:	e8 ed a7 fd ff	callq	0x100012cb7
1000384ca:	48 89 c3	movq	%rax, %rbx
1000384cd:	bf 40 00 00 00	movl	$64, %edi
1000384d2:	e8 eb 96 00 00	callq	0x100041bc2 ## symbol stub for: _malloc
1000384d7:	48 89 43 08	movq	%rax, 8(%rbx)
1000384db:	48 8d 35 26 a1 02 00	leaq	172326(%rip), %rsi
1000384e2:	48 89 c7	movq	%rax, %rdi
1000384e5:	e8 88 98 00 00	callq	0x100041d72 ## symbol stub for: _rb_tree_init
1000384ea:	c7 43 10 75 13 00 00	movl	$4981, 16(%rbx)
1000384f1:	48 89 d8	movq	%rbx, %rax
1000384f4:	48 83 c4 08	addq	$8, %rsp
1000384f8:	5b	popq	%rbx
1000384f9:	5d	popq	%rbp
1000384fa:	c3	retq
1000384fb:	55	pushq	%rbp
1000384fc:	48 89 e5	movq	%rsp, %rbp
1000384ff:	41 57	pushq	%r15
100038501:	41 56	pushq	%r14
100038503:	53	pushq	%rbx
100038504:	50	pushq	%rax
100038505:	81 7f 10 75 13 00 00	cmpl	$4981, 16(%rdi)
10003850c:	75 77	jne	0x100038585
10003850e:	49 89 fe	movq	%rdi, %r14
100038511:	c7 47 10 00 00 00 00	movl	$0, 16(%rdi)
100038518:	48 8b 7f 08	movq	8(%rdi), %rdi
10003851c:	31 f6	xorl	%esi, %esi
10003851e:	ba 01 00 00 00	movl	$1, %edx
100038523:	e8 56 98 00 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
100038528:	48 85 c0	testq	%rax, %rax
10003852b:	74 45	je	0x100038572
10003852d:	48 89 c3	movq	%rax, %rbx
100038530:	49 8b 7e 08	movq	8(%r14), %rdi
100038534:	48 89 de	movq	%rbx, %rsi
100038537:	ba 01 00 00 00	movl	$1, %edx
10003853c:	e8 3d 98 00 00	callq	0x100041d7e ## symbol stub for: _rb_tree_iterate
100038541:	49 89 c7	movq	%rax, %r15
100038544:	49 8b 7e 08	movq	8(%r14), %rdi
100038548:	48 89 de	movq	%rbx, %rsi
10003854b:	e8 34 98 00 00	callq	0x100041d84 ## symbol stub for: _rb_tree_remove_node
100038550:	48 8b 7b 20	movq	32(%rbx), %rdi
100038554:	e8 ff 96 00 00	callq	0x100041c58 ## symbol stub for: _os_release
100038559:	48 8b 7b 18	movq	24(%rbx), %rdi
10003855d:	e8 ce 94 00 00	callq	0x100041a30 ## symbol stub for: _free
100038562:	48 89 df	movq	%rbx, %rdi
100038565:	e8 c6 94 00 00	callq	0x100041a30 ## symbol stub for: _free
10003856a:	4c 89 fb	movq	%r15, %rbx
10003856d:	4d 85 ff	testq	%r15, %r15
100038570:	75 be	jne	0x100038530
100038572:	49 8b 7e 08	movq	8(%r14), %rdi
100038576:	48 83 c4 08	addq	$8, %rsp
10003857a:	5b	popq	%rbx
10003857b:	41 5e	popq	%r14
10003857d:	41 5f	popq	%r15
10003857f:	5d	popq	%rbp
100038580:	e9 ab 94 00 00	jmp	0x100041a30 ## symbol stub for: _free
100038585:	0f 0b	ud2
100038587:	48 85 ff	testq	%rdi, %rdi
10003858a:	74 06	je	0x100038592
10003858c:	48 89 f8	movq	%rdi, %rax
10003858f:	31 d2	xorl	%edx, %edx
100038591:	c3	retq
100038592:	55	pushq	%rbp
100038593:	48 89 e5	movq	%rsp, %rbp
100038596:	e8 5a 8e 00 00	callq	0x1000413f5
10003859b:	85 ff	testl	%edi, %edi
10003859d:	74 05	je	0x1000385a4
10003859f:	31 c0	xorl	%eax, %eax
1000385a1:	89 fa	movl	%edi, %edx
1000385a3:	c3	retq
1000385a4:	55	pushq	%rbp
1000385a5:	48 89 e5	movq	%rsp, %rbp
1000385a8:	e8 5a 8e 00 00	callq	0x100041407
1000385ad:	55	pushq	%rbp
1000385ae:	48 89 e5	movq	%rsp, %rbp
1000385b1:	41 57	pushq	%r15
1000385b3:	41 56	pushq	%r14
1000385b5:	41 55	pushq	%r13
1000385b7:	41 54	pushq	%r12
1000385b9:	53	pushq	%rbx
1000385ba:	48 81 ec 88 00 00 00	subq	$136, %rsp
1000385c1:	49 89 d4	movq	%rdx, %r12
1000385c4:	49 89 f6	movq	%rsi, %r14
1000385c7:	49 89 fd	movq	%rdi, %r13
1000385ca:	48 8b 7f 08	movq	8(%rdi), %rdi
1000385ce:	e8 44 fe ff ff	callq	0x100038417
1000385d3:	49 89 c7	movq	%rax, %r15
1000385d6:	48 89 c3	movq	%rax, %rbx
1000385d9:	48 85 c0	testq	%rax, %rax
1000385dc:	0f 85 33 01 00 00	jne	0x100038715
1000385e2:	49 8b 7d 08	movq	8(%r13), %rdi
1000385e6:	e8 b9 fe ff ff	callq	0x1000384a4
1000385eb:	49 3b 45 10	cmpq	16(%r13), %rax
1000385ef:	0f 82 00 01 00 00	jb	0x1000386f5
1000385f5:	4c 89 65 d0	movq	%r12, -48(%rbp)
1000385f9:	31 c0	xorl	%eax, %eax
1000385fb:	48 8d 4d 88	leaq	-120(%rbp), %rcx
1000385ff:	48 89 01	movq	%rax, (%rcx)
100038602:	48 89 49 08	movq	%rcx, 8(%rcx)
100038606:	48 ba 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rdx
100038610:	48 89 51 10	movq	%rdx, 16(%rcx)
100038614:	48 c7 41 18 ff ff ff ff	movq	$-1, 24(%rcx)
10003861c:	48 8d 5d a8	leaq	-88(%rbp), %rbx
100038620:	48 89 03	movq	%rax, (%rbx)
100038623:	48 89 5b 08	movq	%rbx, 8(%rbx)
100038627:	48 89 53 10	movq	%rdx, 16(%rbx)
10003862b:	48 89 43 18	movq	%rax, 24(%rbx)
10003862f:	49 8b 7d 08	movq	8(%r13), %rdi
100038633:	48 8b 05 de f9 01 00	movq	129502(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10003863a:	48 8d b5 58 ff ff ff	leaq	-168(%rbp), %rsi
100038641:	48 89 06	movq	%rax, (%rsi)
100038644:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10003864c:	48 8d 05 59 02 00 00	leaq	601(%rip), %rax
100038653:	48 89 46 10	movq	%rax, 16(%rsi)
100038657:	48 8d 05 d2 31 02 00	leaq	143826(%rip), %rax
10003865e:	48 89 46 18	movq	%rax, 24(%rsi)
100038662:	48 89 4e 20	movq	%rcx, 32(%rsi)
100038666:	48 89 5e 28	movq	%rbx, 40(%rsi)
10003866a:	e8 cf fd ff ff	callq	0x10003843e
10003866f:	48 8b 43 08	movq	8(%rbx), %rax
100038673:	48 8b 78 18	movq	24(%rax), %rdi
100038677:	48 8d 35 c8 9c 01 00	leaq	105672(%rip), %rsi ## literal pool for: "key"
10003867e:	e8 d7 99 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
100038683:	48 89 45 c8	movq	%rax, -56(%rbp)
100038687:	48 8b 43 08	movq	8(%rbx), %rax
10003868b:	48 8b 78 18	movq	24(%rax), %rdi
10003868f:	48 8d 35 73 6b 01 00	leaq	93043(%rip), %rsi ## literal pool for: "value"
100038696:	e8 b9 99 00 00	callq	0x100042054 ## symbol stub for: _xpc_dictionary_get_pointer
10003869b:	49 89 c4	movq	%rax, %r12
10003869e:	48 8b 5d c8	movq	-56(%rbp), %rbx
1000386a2:	48 89 df	movq	%rbx, %rdi
1000386a5:	48 89 c6	movq	%rax, %rsi
1000386a8:	41 ff 55 20	callq	*32(%r13)
1000386ac:	49 8b 7d 08	movq	8(%r13), %rdi
1000386b0:	48 89 de	movq	%rbx, %rsi
1000386b3:	31 d2	xorl	%edx, %edx
1000386b5:	e8 b8 fc ff ff	callq	0x100038372
1000386ba:	4c 89 e7	movq	%r12, %rdi
1000386bd:	e8 96 95 00 00	callq	0x100041c58 ## symbol stub for: _os_release
1000386c2:	49 8b 7d 08	movq	8(%r13), %rdi
1000386c6:	e8 d9 fd ff ff	callq	0x1000384a4
1000386cb:	49 3b 45 10	cmpq	16(%r13), %rax
1000386cf:	0f 83 a3 00 00 00	jae	0x100038778
1000386d5:	48 8d 7d a8	leaq	-88(%rbp), %rdi
1000386d9:	be 08 00 00 00	movl	$8, %esi
1000386de:	e8 4d 90 00 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
1000386e3:	48 8d 7d 88	leaq	-120(%rbp), %rdi
1000386e7:	be 08 00 00 00	movl	$8, %esi
1000386ec:	e8 3f 90 00 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
1000386f1:	4c 8b 65 d0	movq	-48(%rbp), %r12
1000386f5:	31 ff	xorl	%edi, %edi
1000386f7:	31 f6	xorl	%esi, %esi
1000386f9:	31 d2	xorl	%edx, %edx
1000386fb:	e8 12 99 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
100038700:	48 89 c3	movq	%rax, %rbx
100038703:	48 8d 35 3c 9c 01 00	leaq	105532(%rip), %rsi ## literal pool for: "key"
10003870a:	48 89 c7	movq	%rax, %rdi
10003870d:	4c 89 f2	movq	%r14, %rdx
100038710:	e8 87 99 00 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
100038715:	4c 89 e7	movq	%r12, %rdi
100038718:	e8 41 95 00 00	callq	0x100041c5e ## symbol stub for: _os_retain
10003871d:	48 8d 35 e5 6a 01 00	leaq	92901(%rip), %rsi ## literal pool for: "value"
100038724:	48 89 df	movq	%rbx, %rdi
100038727:	48 89 c2	movq	%rax, %rdx
10003872a:	e8 67 99 00 00	callq	0x100042096 ## symbol stub for: _xpc_dictionary_set_pointer
10003872f:	49 8b 55 18	movq	24(%r13), %rdx
100038733:	48 8d 42 01	leaq	1(%rdx), %rax
100038737:	49 89 45 18	movq	%rax, 24(%r13)
10003873b:	48 8d 35 08 9c 01 00	leaq	105480(%rip), %rsi ## literal pool for: "timestamp"
100038742:	48 89 df	movq	%rbx, %rdi
100038745:	e8 58 99 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10003874a:	4d 85 ff	testq	%r15, %r15
10003874d:	75 17	jne	0x100038766
10003874f:	49 8b 7d 08	movq	8(%r13), %rdi
100038753:	4c 89 f6	movq	%r14, %rsi
100038756:	48 89 da	movq	%rbx, %rdx
100038759:	e8 14 fc ff ff	callq	0x100038372
10003875e:	48 89 df	movq	%rbx, %rdi
100038761:	e8 96 99 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
100038766:	48 81 c4 88 00 00 00	addq	$136, %rsp
10003876d:	5b	popq	%rbx
10003876e:	41 5c	popq	%r12
100038770:	41 5d	popq	%r13
100038772:	41 5e	popq	%r14
100038774:	41 5f	popq	%r15
100038776:	5d	popq	%rbp
100038777:	c3	retq
100038778:	e8 9c 8c 00 00	callq	0x100041419
10003877d:	55	pushq	%rbp
10003877e:	48 89 e5	movq	%rsp, %rbp
100038781:	41 56	pushq	%r14
100038783:	53	pushq	%rbx
100038784:	48 89 fb	movq	%rdi, %rbx
100038787:	48 8b 7f 08	movq	8(%rdi), %rdi
10003878b:	e8 87 fc ff ff	callq	0x100038417
100038790:	48 85 c0	testq	%rax, %rax
100038793:	74 39	je	0x1000387ce
100038795:	49 89 c6	movq	%rax, %r14
100038798:	48 8b 53 18	movq	24(%rbx), %rdx
10003879c:	48 8d 42 01	leaq	1(%rdx), %rax
1000387a0:	48 89 43 18	movq	%rax, 24(%rbx)
1000387a4:	48 8d 35 9f 9b 01 00	leaq	105375(%rip), %rsi ## literal pool for: "timestamp"
1000387ab:	4c 89 f7	movq	%r14, %rdi
1000387ae:	e8 ef 98 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
1000387b3:	48 8d 35 4f 6a 01 00	leaq	92751(%rip), %rsi ## literal pool for: "value"
1000387ba:	4c 89 f7	movq	%r14, %rdi
1000387bd:	e8 92 98 00 00	callq	0x100042054 ## symbol stub for: _xpc_dictionary_get_pointer
1000387c2:	48 89 c7	movq	%rax, %rdi
1000387c5:	5b	popq	%rbx
1000387c6:	41 5e	popq	%r14
1000387c8:	5d	popq	%rbp
1000387c9:	e9 90 94 00 00	jmp	0x100041c5e ## symbol stub for: _os_retain
1000387ce:	31 c0	xorl	%eax, %eax
1000387d0:	5b	popq	%rbx
1000387d1:	41 5e	popq	%r14
1000387d3:	5d	popq	%rbp
1000387d4:	c3	retq
1000387d5:	55	pushq	%rbp
1000387d6:	48 89 e5	movq	%rsp, %rbp
1000387d9:	41 57	pushq	%r15
1000387db:	41 56	pushq	%r14
1000387dd:	53	pushq	%rbx
1000387de:	50	pushq	%rax
1000387df:	49 89 f6	movq	%rsi, %r14
1000387e2:	49 89 ff	movq	%rdi, %r15
1000387e5:	31 ff	xorl	%edi, %edi
1000387e7:	e8 10 a7 fd ff	callq	0x100012efc
1000387ec:	48 89 c3	movq	%rax, %rbx
1000387ef:	e8 c9 fc ff ff	callq	0x1000384bd
1000387f4:	48 89 43 08	movq	%rax, 8(%rbx)
1000387f8:	4c 89 7b 10	movq	%r15, 16(%rbx)
1000387fc:	48 c7 43 18 01 00 00 00	movq	$1, 24(%rbx)
100038804:	4c 89 73 20	movq	%r14, 32(%rbx)
100038808:	48 89 d8	movq	%rbx, %rax
10003880b:	48 83 c4 08	addq	$8, %rsp
10003880f:	5b	popq	%rbx
100038810:	41 5e	popq	%r14
100038812:	41 5f	popq	%r15
100038814:	5d	popq	%rbp
100038815:	c3	retq
100038816:	55	pushq	%rbp
100038817:	48 89 e5	movq	%rsp, %rbp
10003881a:	53	pushq	%rbx
10003881b:	48 83 ec 28	subq	$40, %rsp
10003881f:	48 89 fb	movq	%rdi, %rbx
100038822:	48 8b 7f 08	movq	8(%rdi), %rdi
100038826:	48 8b 05 eb f7 01 00	movq	129003(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10003882d:	48 8d 75 d0	leaq	-48(%rbp), %rsi
100038831:	48 89 06	movq	%rax, (%rsi)
100038834:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10003883c:	48 8d 05 28 00 00 00	leaq	40(%rip), %rax
100038843:	48 89 46 10	movq	%rax, 16(%rsi)
100038847:	48 8d 05 c2 2f 02 00	leaq	143298(%rip), %rax
10003884e:	48 89 46 18	movq	%rax, 24(%rsi)
100038852:	48 89 5e 20	movq	%rbx, 32(%rsi)
100038856:	e8 e3 fb ff ff	callq	0x10003843e
10003885b:	48 8b 7b 08	movq	8(%rbx), %rdi
10003885f:	e8 f4 93 00 00	callq	0x100041c58 ## symbol stub for: _os_release
100038864:	48 83 c4 28	addq	$40, %rsp
100038868:	5b	popq	%rbx
100038869:	5d	popq	%rbp
10003886a:	c3	retq
10003886b:	55	pushq	%rbp
10003886c:	48 89 e5	movq	%rsp, %rbp
10003886f:	41 57	pushq	%r15
100038871:	41 56	pushq	%r14
100038873:	53	pushq	%rbx
100038874:	50	pushq	%rax
100038875:	49 89 f6	movq	%rsi, %r14
100038878:	49 89 ff	movq	%rdi, %r15
10003887b:	48 8d 35 87 69 01 00	leaq	92551(%rip), %rsi ## literal pool for: "value"
100038882:	48 89 d7	movq	%rdx, %rdi
100038885:	e8 ca 97 00 00	callq	0x100042054 ## symbol stub for: _xpc_dictionary_get_pointer
10003888a:	48 89 c3	movq	%rax, %rbx
10003888d:	49 8b 47 20	movq	32(%r15), %rax
100038891:	4c 89 f7	movq	%r14, %rdi
100038894:	48 89 de	movq	%rbx, %rsi
100038897:	ff 50 20	callq	*32(%rax)
10003889a:	48 89 df	movq	%rbx, %rdi
10003889d:	48 83 c4 08	addq	$8, %rsp
1000388a1:	5b	popq	%rbx
1000388a2:	41 5e	popq	%r14
1000388a4:	41 5f	popq	%r15
1000388a6:	5d	popq	%rbp
1000388a7:	e9 ac 93 00 00	jmp	0x100041c58 ## symbol stub for: _os_release
1000388ac:	55	pushq	%rbp
1000388ad:	48 89 e5	movq	%rsp, %rbp
1000388b0:	41 56	pushq	%r14
1000388b2:	53	pushq	%rbx
1000388b3:	48 89 d3	movq	%rdx, %rbx
1000388b6:	49 89 fe	movq	%rdi, %r14
1000388b9:	48 89 d7	movq	%rdx, %rdi
1000388bc:	e8 05 98 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
1000388c1:	48 3b 05 38 f8 01 00	cmpq	129080(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
1000388c8:	75 32	jne	0x1000388fc
1000388ca:	48 8d 35 79 9a 01 00	leaq	105081(%rip), %rsi ## literal pool for: "timestamp"
1000388d1:	48 89 df	movq	%rbx, %rdi
1000388d4:	e8 87 97 00 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
1000388d9:	49 8b 4e 20	movq	32(%r14), %rcx
1000388dd:	48 8b 49 08	movq	8(%rcx), %rcx
1000388e1:	48 3b 41 18	cmpq	24(%rcx), %rax
1000388e5:	73 10	jae	0x1000388f7
1000388e7:	48 89 41 18	movq	%rax, 24(%rcx)
1000388eb:	49 8b 46 28	movq	40(%r14), %rax
1000388ef:	48 8b 40 08	movq	8(%rax), %rax
1000388f3:	48 89 58 18	movq	%rbx, 24(%rax)
1000388f7:	5b	popq	%rbx
1000388f8:	41 5e	popq	%r14
1000388fa:	5d	popq	%rbp
1000388fb:	c3	retq
1000388fc:	e8 2d 8b 00 00	callq	0x10004142e
100038901:	55	pushq	%rbp
100038902:	48 89 e5	movq	%rsp, %rbp
100038905:	41 56	pushq	%r14
100038907:	53	pushq	%rbx
100038908:	49 89 f6	movq	%rsi, %r14
10003890b:	48 89 fb	movq	%rdi, %rbx
10003890e:	48 83 c7 20	addq	$32, %rdi
100038912:	48 8b 76 20	movq	32(%rsi), %rsi
100038916:	ba 08 00 00 00	movl	$8, %edx
10003891b:	e8 0a 8e 00 00	callq	0x10004172a ## symbol stub for: __Block_object_assign
100038920:	48 83 c3 28	addq	$40, %rbx
100038924:	49 8b 76 28	movq	40(%r14), %rsi
100038928:	48 89 df	movq	%rbx, %rdi
10003892b:	ba 08 00 00 00	movl	$8, %edx
100038930:	5b	popq	%rbx
100038931:	41 5e	popq	%r14
100038933:	5d	popq	%rbp
100038934:	e9 f1 8d 00 00	jmp	0x10004172a ## symbol stub for: __Block_object_assign
100038939:	55	pushq	%rbp
10003893a:	48 89 e5	movq	%rsp, %rbp
10003893d:	53	pushq	%rbx
10003893e:	50	pushq	%rax
10003893f:	48 89 fb	movq	%rdi, %rbx
100038942:	48 8b 7f 28	movq	40(%rdi), %rdi
100038946:	be 08 00 00 00	movl	$8, %esi
10003894b:	e8 e0 8d 00 00	callq	0x100041730 ## symbol stub for: __Block_object_dispose
100038950:	48 8b 7b 20	movq	32(%rbx), %rdi
100038954:	be 08 00 00 00	movl	$8, %esi
100038959:	48 83 c4 08	addq	$8, %rsp
10003895d:	5b	popq	%rbx
10003895e:	5d	popq	%rbp
10003895f:	e9 cc 8d 00 00	jmp	0x100041730 ## symbol stub for: __Block_object_dispose
100038964:	48 85 ff	testq	%rdi, %rdi
100038967:	74 06	je	0x10003896f
100038969:	48 89 f8	movq	%rdi, %rax
10003896c:	31 d2	xorl	%edx, %edx
10003896e:	c3	retq
10003896f:	55	pushq	%rbp
100038970:	48 89 e5	movq	%rsp, %rbp
100038973:	e8 cb 8a 00 00	callq	0x100041443
100038978:	85 ff	testl	%edi, %edi
10003897a:	74 05	je	0x100038981
10003897c:	31 c0	xorl	%eax, %eax
10003897e:	89 fa	movl	%edi, %edx
100038980:	c3	retq
100038981:	55	pushq	%rbp
100038982:	48 89 e5	movq	%rsp, %rbp
100038985:	e8 cb 8a 00 00	callq	0x100041455
10003898a:	55	pushq	%rbp
10003898b:	48 89 e5	movq	%rsp, %rbp
10003898e:	41 57	pushq	%r15
100038990:	41 56	pushq	%r14
100038992:	41 55	pushq	%r13
100038994:	41 54	pushq	%r12
100038996:	53	pushq	%rbx
100038997:	48 83 ec 18	subq	$24, %rsp
10003899b:	49 89 d6	movq	%rdx, %r14
10003899e:	49 89 f5	movq	%rsi, %r13
1000389a1:	49 89 fc	movq	%rdi, %r12
1000389a4:	48 8d 35 be 84 01 00	leaq	99518(%rip), %rsi ## literal pool for: "shmem"
1000389ab:	e8 bc 96 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
1000389b0:	48 85 c0	testq	%rax, %rax
1000389b3:	0f 84 97 00 00 00	je	0x100038a50
1000389b9:	48 8d 5d c8	leaq	-56(%rbp), %rbx
1000389bd:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
1000389c4:	48 89 c7	movq	%rax, %rdi
1000389c7:	48 89 de	movq	%rbx, %rsi
1000389ca:	e8 39 97 00 00	callq	0x100042108 ## symbol stub for: _xpc_shmem_map
1000389cf:	49 89 c7	movq	%rax, %r15
1000389d2:	48 8b 3b	movq	(%rbx), %rdi
1000389d5:	48 85 ff	testq	%rdi, %rdi
1000389d8:	74 7d	je	0x100038a57
1000389da:	48 8b 05 ef f7 01 00	movq	129007(%rip), %rax ## literal pool symbol address: _vm_page_size
1000389e1:	4c 3b 38	cmpq	(%rax), %r15
1000389e4:	72 71	jb	0x100038a57
1000389e6:	4c 89 6d d0	movq	%r13, -48(%rbp)
1000389ea:	48 8d 15 59 8e 01 00	leaq	101977(%rip), %rdx ## literal pool for: "w"
1000389f1:	4c 89 fe	movq	%r15, %rsi
1000389f4:	e8 25 90 00 00	callq	0x100041a1e ## symbol stub for: _fmemopen
1000389f9:	48 85 c0	testq	%rax, %rax
1000389fc:	74 68	je	0x100038a66
1000389fe:	49 89 c5	movq	%rax, %r13
100038a01:	4c 89 f7	movq	%r14, %rdi
100038a04:	48 89 c6	movq	%rax, %rsi
100038a07:	41 ff 56 10	callq	*16(%r14)
100038a0b:	4c 89 ef	movq	%r13, %rdi
100038a0e:	e8 35 90 00 00	callq	0x100041a48 ## symbol stub for: _ftello
100038a13:	bb 99 00 00 00	movl	$153, %ebx
100038a18:	48 3d 00 00 00 40	cmpq	$1073741824, %rax
100038a1e:	77 26	ja	0x100038a46
100038a20:	49 89 c6	movq	%rax, %r14
100038a23:	4c 89 e7	movq	%r12, %rdi
100038a26:	e8 f3 95 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
100038a2b:	48 8b 4d d0	movq	-48(%rbp), %rcx
100038a2f:	48 89 01	movq	%rax, (%rcx)
100038a32:	48 8d 35 1b 99 01 00	leaq	104731(%rip), %rsi ## literal pool for: "bytes-written"
100038a39:	48 89 c7	movq	%rax, %rdi
100038a3c:	4c 89 f2	movq	%r14, %rdx
100038a3f:	e8 5e 96 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
100038a44:	31 db	xorl	%ebx, %ebx
100038a46:	4c 89 ef	movq	%r13, %rdi
100038a49:	e8 ad 9e ff ff	callq	0x1000328fb
100038a4e:	eb 28	jmp	0x100038a78
100038a50:	bb 16 00 00 00	movl	$22, %ebx
100038a55:	eb 37	jmp	0x100038a8e
100038a57:	e8 04 8d 00 00	callq	0x100041760 ## symbol stub for: ___error
100038a5c:	48 63 38	movslq	(%rax), %rdi
100038a5f:	bb 16 00 00 00	movl	$22, %ebx
100038a64:	eb 0d	jmp	0x100038a73
100038a66:	e8 f5 8c 00 00	callq	0x100041760 ## symbol stub for: ___error
100038a6b:	48 63 38	movslq	(%rax), %rdi
100038a6e:	bb 09 00 00 00	movl	$9, %ebx
100038a73:	48 85 ff	testq	%rdi, %rdi
100038a76:	75 27	jne	0x100038a9f
100038a78:	48 8b 7d c8	movq	-56(%rbp), %rdi
100038a7c:	48 85 ff	testq	%rdi, %rdi
100038a7f:	74 0d	je	0x100038a8e
100038a81:	4d 85 ff	testq	%r15, %r15
100038a84:	74 20	je	0x100038aa6
100038a86:	4c 89 fe	movq	%r15, %rsi
100038a89:	e8 64 91 00 00	callq	0x100041bf2 ## symbol stub for: _munmap
100038a8e:	89 d8	movl	%ebx, %eax
100038a90:	48 83 c4 18	addq	$24, %rsp
100038a94:	5b	popq	%rbx
100038a95:	41 5c	popq	%r12
100038a97:	41 5d	popq	%r13
100038a99:	41 5e	popq	%r14
100038a9b:	41 5f	popq	%r15
100038a9d:	5d	popq	%rbp
100038a9e:	c3	retq
100038a9f:	e8 fe 8c 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100038aa4:	eb d2	jmp	0x100038a78
100038aa6:	e8 bc 89 00 00	callq	0x100041467
100038aab:	55	pushq	%rbp
100038aac:	48 89 e5	movq	%rsp, %rbp
100038aaf:	41 57	pushq	%r15
100038ab1:	41 56	pushq	%r14
100038ab3:	53	pushq	%rbx
100038ab4:	50	pushq	%rax
100038ab5:	48 85 f6	testq	%rsi, %rsi
100038ab8:	74 1f	je	0x100038ad9
100038aba:	48 89 f3	movq	%rsi, %rbx
100038abd:	49 89 fe	movq	%rdi, %r14
100038ac0:	4c 8d 3d 9b 98 01 00	leaq	104603(%rip), %r15 ## literal pool for: "\t"
100038ac7:	4c 89 f7	movq	%r14, %rdi
100038aca:	4c 89 fe	movq	%r15, %rsi
100038acd:	31 c0	xorl	%eax, %eax
100038acf:	e8 10 00 00 00	callq	0x100038ae4
100038ad4:	48 ff cb	decq	%rbx
100038ad7:	75 ee	jne	0x100038ac7
100038ad9:	48 83 c4 08	addq	$8, %rsp
100038add:	5b	popq	%rbx
100038ade:	41 5e	popq	%r14
100038ae0:	41 5f	popq	%r15
100038ae2:	5d	popq	%rbp
100038ae3:	c3	retq
100038ae4:	55	pushq	%rbp
100038ae5:	48 89 e5	movq	%rsp, %rbp
100038ae8:	48 81 ec d0 00 00 00	subq	$208, %rsp
100038aef:	4c 8d 95 30 ff ff ff	leaq	-208(%rbp), %r10
100038af6:	49 89 52 10	movq	%rdx, 16(%r10)
100038afa:	49 89 4a 18	movq	%rcx, 24(%r10)
100038afe:	4d 89 42 20	movq	%r8, 32(%r10)
100038b02:	4d 89 4a 28	movq	%r9, 40(%r10)
100038b06:	84 c0	testb	%al, %al
100038b08:	74 26	je	0x100038b30
100038b0a:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100038b11:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
100038b18:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
100038b1c:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
100038b20:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
100038b24:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
100038b28:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
100038b2c:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
100038b30:	48 8b 05 f1 f4 01 00	movq	128241(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038b37:	48 8b 00	movq	(%rax), %rax
100038b3a:	48 89 45 f8	movq	%rax, -8(%rbp)
100038b3e:	0f 28 05 3b a7 00 00	movaps	42811(%rip), %xmm0
100038b45:	48 8d 55 e0	leaq	-32(%rbp), %rdx
100038b49:	0f 29 02	movaps	%xmm0, (%rdx)
100038b4c:	4c 89 52 10	movq	%r10, 16(%rdx)
100038b50:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
100038b5a:	48 89 02	movq	%rax, (%rdx)
100038b5d:	48 8d 45 10	leaq	16(%rbp), %rax
100038b61:	48 89 42 08	movq	%rax, 8(%rdx)
100038b65:	e8 a0 93 00 00	callq	0x100041f0a ## symbol stub for: _vfprintf
100038b6a:	48 8b 05 b7 f4 01 00	movq	128183(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038b71:	48 8b 00	movq	(%rax), %rax
100038b74:	48 3b 45 f8	cmpq	-8(%rbp), %rax
100038b78:	75 09	jne	0x100038b83
100038b7a:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100038b81:	5d	popq	%rbp
100038b82:	c3	retq
100038b83:	e8 ea 8b 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100038b88:	55	pushq	%rbp
100038b89:	48 89 e5	movq	%rsp, %rbp
100038b8c:	41 57	pushq	%r15
100038b8e:	41 56	pushq	%r14
100038b90:	41 54	pushq	%r12
100038b92:	53	pushq	%rbx
100038b93:	48 81 ec d0 00 00 00	subq	$208, %rsp
100038b9a:	49 89 d6	movq	%rdx, %r14
100038b9d:	49 89 ff	movq	%rdi, %r15
100038ba0:	48 89 8d 28 ff ff ff	movq	%rcx, -216(%rbp)
100038ba7:	4c 89 85 30 ff ff ff	movq	%r8, -208(%rbp)
100038bae:	4c 89 8d 38 ff ff ff	movq	%r9, -200(%rbp)
100038bb5:	84 c0	testb	%al, %al
100038bb7:	74 2c	je	0x100038be5
100038bb9:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100038bc0:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
100038bc7:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
100038bce:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
100038bd5:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
100038bd9:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
100038bdd:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
100038be1:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
100038be5:	48 8b 05 3c f4 01 00	movq	128060(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038bec:	48 8b 00	movq	(%rax), %rax
100038bef:	48 89 45 d8	movq	%rax, -40(%rbp)
100038bf3:	48 85 f6	testq	%rsi, %rsi
100038bf6:	74 1c	je	0x100038c14
100038bf8:	48 89 f3	movq	%rsi, %rbx
100038bfb:	4c 8d 25 60 97 01 00	leaq	104288(%rip), %r12 ## literal pool for: "\t"
100038c02:	4c 89 ff	movq	%r15, %rdi
100038c05:	4c 89 e6	movq	%r12, %rsi
100038c08:	31 c0	xorl	%eax, %eax
100038c0a:	e8 d5 fe ff ff	callq	0x100038ae4
100038c0f:	48 ff cb	decq	%rbx
100038c12:	75 ee	jne	0x100038c02
100038c14:	0f 28 05 65 a6 00 00	movaps	42597(%rip), %xmm0
100038c1b:	48 8d 55 c0	leaq	-64(%rbp), %rdx
100038c1f:	0f 29 02	movaps	%xmm0, (%rdx)
100038c22:	48 8d 85 10 ff ff ff	leaq	-240(%rbp), %rax
100038c29:	48 89 42 10	movq	%rax, 16(%rdx)
100038c2d:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
100038c37:	48 89 02	movq	%rax, (%rdx)
100038c3a:	48 8d 45 10	leaq	16(%rbp), %rax
100038c3e:	48 89 42 08	movq	%rax, 8(%rdx)
100038c42:	4c 89 ff	movq	%r15, %rdi
100038c45:	4c 89 f6	movq	%r14, %rsi
100038c48:	e8 bd 92 00 00	callq	0x100041f0a ## symbol stub for: _vfprintf
100038c4d:	48 8b 05 d4 f3 01 00	movq	127956(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038c54:	48 8b 00	movq	(%rax), %rax
100038c57:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100038c5b:	75 10	jne	0x100038c6d
100038c5d:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100038c64:	5b	popq	%rbx
100038c65:	41 5c	popq	%r12
100038c67:	41 5e	popq	%r14
100038c69:	41 5f	popq	%r15
100038c6b:	5d	popq	%rbp
100038c6c:	c3	retq
100038c6d:	e8 00 8b 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100038c72:	55	pushq	%rbp
100038c73:	48 89 e5	movq	%rsp, %rbp
100038c76:	41 57	pushq	%r15
100038c78:	41 56	pushq	%r14
100038c7a:	41 54	pushq	%r12
100038c7c:	53	pushq	%rbx
100038c7d:	48 81 ec d0 00 00 00	subq	$208, %rsp
100038c84:	49 89 d6	movq	%rdx, %r14
100038c87:	49 89 ff	movq	%rdi, %r15
100038c8a:	48 89 8d 28 ff ff ff	movq	%rcx, -216(%rbp)
100038c91:	4c 89 85 30 ff ff ff	movq	%r8, -208(%rbp)
100038c98:	4c 89 8d 38 ff ff ff	movq	%r9, -200(%rbp)
100038c9f:	84 c0	testb	%al, %al
100038ca1:	74 2c	je	0x100038ccf
100038ca3:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100038caa:	0f 29 8d 50 ff ff ff	movaps	%xmm1, -176(%rbp)
100038cb1:	0f 29 95 60 ff ff ff	movaps	%xmm2, -160(%rbp)
100038cb8:	0f 29 9d 70 ff ff ff	movaps	%xmm3, -144(%rbp)
100038cbf:	0f 29 65 80	movaps	%xmm4, -128(%rbp)
100038cc3:	0f 29 6d 90	movaps	%xmm5, -112(%rbp)
100038cc7:	0f 29 75 a0	movaps	%xmm6, -96(%rbp)
100038ccb:	0f 29 7d b0	movaps	%xmm7, -80(%rbp)
100038ccf:	48 8b 05 52 f3 01 00	movq	127826(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038cd6:	48 8b 00	movq	(%rax), %rax
100038cd9:	48 89 45 d8	movq	%rax, -40(%rbp)
100038cdd:	48 85 f6	testq	%rsi, %rsi
100038ce0:	74 1c	je	0x100038cfe
100038ce2:	48 89 f3	movq	%rsi, %rbx
100038ce5:	4c 8d 25 76 96 01 00	leaq	104054(%rip), %r12 ## literal pool for: "\t"
100038cec:	4c 89 ff	movq	%r15, %rdi
100038cef:	4c 89 e6	movq	%r12, %rsi
100038cf2:	31 c0	xorl	%eax, %eax
100038cf4:	e8 eb fd ff ff	callq	0x100038ae4
100038cf9:	48 ff cb	decq	%rbx
100038cfc:	75 ee	jne	0x100038cec
100038cfe:	0f 28 05 7b a5 00 00	movaps	42363(%rip), %xmm0
100038d05:	48 8d 55 c0	leaq	-64(%rbp), %rdx
100038d09:	0f 29 02	movaps	%xmm0, (%rdx)
100038d0c:	48 8d 85 10 ff ff ff	leaq	-240(%rbp), %rax
100038d13:	48 89 42 10	movq	%rax, 16(%rdx)
100038d17:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
100038d21:	48 89 02	movq	%rax, (%rdx)
100038d24:	48 8d 45 10	leaq	16(%rbp), %rax
100038d28:	48 89 42 08	movq	%rax, 8(%rdx)
100038d2c:	4c 89 ff	movq	%r15, %rdi
100038d2f:	4c 89 f6	movq	%r14, %rsi
100038d32:	e8 d3 91 00 00	callq	0x100041f0a ## symbol stub for: _vfprintf
100038d37:	48 8d 35 26 96 01 00	leaq	103974(%rip), %rsi ## literal pool for: "\n"
100038d3e:	4c 89 ff	movq	%r15, %rdi
100038d41:	31 c0	xorl	%eax, %eax
100038d43:	e8 9c fd ff ff	callq	0x100038ae4
100038d48:	48 8b 05 d9 f2 01 00	movq	127705(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038d4f:	48 8b 00	movq	(%rax), %rax
100038d52:	48 3b 45 d8	cmpq	-40(%rbp), %rax
100038d56:	75 10	jne	0x100038d68
100038d58:	48 81 c4 d0 00 00 00	addq	$208, %rsp
100038d5f:	5b	popq	%rbx
100038d60:	41 5c	popq	%r12
100038d62:	41 5e	popq	%r14
100038d64:	41 5f	popq	%r15
100038d66:	5d	popq	%rbp
100038d67:	c3	retq
100038d68:	e8 05 8a 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
100038d6d:	55	pushq	%rbp
100038d6e:	48 89 e5	movq	%rsp, %rbp
100038d71:	48 8d 35 ec 95 01 00	leaq	103916(%rip), %rsi ## literal pool for: "\n"
100038d78:	31 c0	xorl	%eax, %eax
100038d7a:	5d	popq	%rbp
100038d7b:	e9 64 fd ff ff	jmp	0x100038ae4
100038d80:	48 85 ff	testq	%rdi, %rdi
100038d83:	74 06	je	0x100038d8b
100038d85:	48 89 f8	movq	%rdi, %rax
100038d88:	31 d2	xorl	%edx, %edx
100038d8a:	c3	retq
100038d8b:	55	pushq	%rbp
100038d8c:	48 89 e5	movq	%rsp, %rbp
100038d8f:	e8 e8 86 00 00	callq	0x10004147c
100038d94:	85 ff	testl	%edi, %edi
100038d96:	74 05	je	0x100038d9d
100038d98:	31 c0	xorl	%eax, %eax
100038d9a:	89 fa	movl	%edi, %edx
100038d9c:	c3	retq
100038d9d:	55	pushq	%rbp
100038d9e:	48 89 e5	movq	%rsp, %rbp
100038da1:	e8 e8 86 00 00	callq	0x10004148e
100038da6:	55	pushq	%rbp
100038da7:	48 89 e5	movq	%rsp, %rbp
100038daa:	41 57	pushq	%r15
100038dac:	41 56	pushq	%r14
100038dae:	41 55	pushq	%r13
100038db0:	41 54	pushq	%r12
100038db2:	53	pushq	%rbx
100038db3:	48 83 ec 68	subq	$104, %rsp
100038db7:	41 89 f6	movl	%esi, %r14d
100038dba:	48 89 fb	movq	%rdi, %rbx
100038dbd:	48 8b 05 64 f2 01 00	movq	127588(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100038dc4:	48 8b 00	movq	(%rax), %rax
100038dc7:	48 89 45 d0	movq	%rax, -48(%rbp)
100038dcb:	0f 57 c0	xorps	%xmm0, %xmm0
100038dce:	0f 11 87 a0 00 00 00	movups	%xmm0, 160(%rdi)
100038dd5:	0f 11 87 90 00 00 00	movups	%xmm0, 144(%rdi)
100038ddc:	0f 11 87 80 00 00 00	movups	%xmm0, 128(%rdi)
100038de3:	0f 11 47 70	movups	%xmm0, 112(%rdi)
100038de7:	0f 11 47 60	movups	%xmm0, 96(%rdi)
100038deb:	0f 11 47 50	movups	%xmm0, 80(%rdi)
100038def:	0f 11 47 40	movups	%xmm0, 64(%rdi)
100038df3:	0f 11 47 30	movups	%xmm0, 48(%rdi)
100038df7:	0f 11 47 20	movups	%xmm0, 32(%rdi)
100038dfb:	0f 11 47 10	movups	%xmm0, 16(%rdi)
100038dff:	0f 11 07	movups	%xmm0, (%rdi)
100038e02:	48 c7 87 b0 00 00 00 00 00 00 00	movq	$0, 176(%rdi)
100038e0d:	48 8d 75 94	leaq	-108(%rbp), %rsi
100038e11:	c7 06 00 00 00 00	movl	$0, (%rsi)
100038e17:	44 89 f7	movl	%r14d, %edi
100038e1a:	e8 23 8f 00 00	callq	0x100041d42 ## symbol stub for: _proc_get_dirty
100038e1f:	85 c0	testl	%eax, %eax
100038e21:	0f 85 93 01 00 00	jne	0x100038fba
100038e27:	8a 45 94	movb	-108(%rbp), %al
100038e2a:	89 c1	movl	%eax, %ecx
100038e2c:	c0 e9 02	shrb	$2, %cl
100038e2f:	80 e1 01	andb	$1, %cl
100038e32:	8a 93 b0 00 00 00	movb	176(%rbx), %dl
100038e38:	80 e2 fc	andb	$-4, %dl
100038e3b:	24 02	andb	$2, %al
100038e3d:	08 d0	orb	%dl, %al
100038e3f:	08 c8	orb	%cl, %al
100038e41:	88 83 b0 00 00 00	movb	%al, 176(%rbx)
100038e47:	48 8d 4b 04	leaq	4(%rbx), %rcx
100038e4b:	ba 01 00 00 00	movl	$1, %edx
100038e50:	44 89 f7	movl	%r14d, %edi
100038e53:	be 19 00 00 00	movl	$25, %esi
100038e58:	41 b8 18 00 00 00	movl	$24, %r8d
100038e5e:	e8 e5 8e 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
100038e63:	83 f8 18	cmpl	$24, %eax
100038e66:	74 1b	je	0x100038e83
100038e68:	e8 f3 88 00 00	callq	0x100041760 ## symbol stub for: ___error
100038e6d:	83 38 02	cmpl	$2, (%rax)
100038e70:	74 11	je	0x100038e83
100038e72:	e8 e9 88 00 00	callq	0x100041760 ## symbol stub for: ___error
100038e77:	48 63 38	movslq	(%rax), %rdi
100038e7a:	48 85 ff	testq	%rdi, %rdi
100038e7d:	0f 85 fc 03 00 00	jne	0x10003927f
100038e83:	44 8b 7b 18	movl	24(%rbx), %r15d
100038e87:	49 81 ff 01 14 00 00	cmpq	$5121, %r15
100038e8e:	0f 83 3e 04 00 00	jae	0x1000392d2
100038e94:	45 85 ff	testl	%r15d, %r15d
100038e97:	74 69	je	0x100038f02
100038e99:	bf 20 00 00 00	movl	$32, %edi
100038e9e:	e8 42 46 fd ff	callq	0x10000d4e5
100038ea3:	49 89 c4	movq	%rax, %r12
100038ea6:	4c 89 ff	movq	%r15, %rdi
100038ea9:	e8 37 46 fd ff	callq	0x10000d4e5
100038eae:	49 89 44 24 18	movq	%rax, 24(%r12)
100038eb3:	45 89 7c 24 14	movl	%r15d, 20(%r12)
100038eb8:	ba 01 00 00 00	movl	$1, %edx
100038ebd:	44 89 f7	movl	%r14d, %edi
100038ec0:	be 18 00 00 00	movl	$24, %esi
100038ec5:	4c 89 65 a8	movq	%r12, -88(%rbp)
100038ec9:	4c 89 e1	movq	%r12, %rcx
100038ecc:	41 b8 20 00 00 00	movl	$32, %r8d
100038ed2:	e8 71 8e 00 00	callq	0x100041d48 ## symbol stub for: _proc_pidinfo
100038ed7:	83 f8 20	cmpl	$32, %eax
100038eda:	74 2c	je	0x100038f08
100038edc:	e8 7f 88 00 00	callq	0x100041760 ## symbol stub for: ___error
100038ee1:	48 63 38	movslq	(%rax), %rdi
100038ee4:	48 85 ff	testq	%rdi, %rdi
100038ee7:	0f 85 88 03 00 00	jne	0x100039275
100038eed:	4c 8b 7d a8	movq	-88(%rbp), %r15
100038ef1:	49 8b 7f 18	movq	24(%r15), %rdi
100038ef5:	e8 36 8b 00 00	callq	0x100041a30 ## symbol stub for: _free
100038efa:	4c 89 ff	movq	%r15, %rdi
100038efd:	e8 2e 8b 00 00	callq	0x100041a30 ## symbol stub for: _free
100038f02:	31 c0	xorl	%eax, %eax
100038f04:	48 89 45 a8	movq	%rax, -88(%rbp)
100038f08:	48 8d 73 1c	leaq	28(%rbx), %rsi
100038f0c:	48 8d 4b 20	leaq	32(%rbx), %rcx
100038f10:	44 89 f7	movl	%r14d, %edi
100038f13:	48 89 75 80	movq	%rsi, -128(%rbp)
100038f17:	31 d2	xorl	%edx, %edx
100038f19:	e8 fe 8f 00 00	callq	0x100041f1c ## symbol stub for: _wait4
100038f1e:	41 be 03 00 00 00	movl	$3, %r14d
100038f24:	83 f8 ff	cmpl	$-1, %eax
100038f27:	75 17	jne	0x100038f40
100038f29:	e8 32 88 00 00	callq	0x100041760 ## symbol stub for: ___error
100038f2e:	48 63 38	movslq	(%rax), %rdi
100038f31:	41 be 02 00 00 00	movl	$2, %r14d
100038f37:	48 85 ff	testq	%rdi, %rdi
100038f3a:	0f 85 2b 03 00 00	jne	0x10003926b
100038f40:	44 89 33	movl	%r14d, (%rbx)
100038f43:	4c 8b 75 a8	movq	-88(%rbp), %r14
100038f47:	4d 85 f6	testq	%r14, %r14
100038f4a:	0f 84 47 02 00 00	je	0x100039197
100038f50:	48 89 df	movq	%rbx, %rdi
100038f53:	e8 9f 03 00 00	callq	0x1000392f7
100038f58:	49 89 c5	movq	%rax, %r13
100038f5b:	49 8b 56 18	movq	24(%r14), %rdx
100038f5f:	48 85 d2	testq	%rdx, %rdx
100038f62:	49 89 df	movq	%rbx, %r15
100038f65:	74 7f	je	0x100038fe6
100038f67:	41 8b 4e 14	movl	20(%r14), %ecx
100038f6b:	48 85 c9	testq	%rcx, %rcx
100038f6e:	74 76	je	0x100038fe6
100038f70:	48 01 d1	addq	%rdx, %rcx
100038f73:	48 8d 7a 10	leaq	16(%rdx), %rdi
100038f77:	31 c0	xorl	%eax, %eax
100038f79:	be 00 00 00 00	movl	$0, %esi
100038f7e:	48 39 cf	cmpq	%rcx, %rdi
100038f81:	77 4a	ja	0x100038fcd
100038f83:	31 c0	xorl	%eax, %eax
100038f85:	8b 72 04	movl	4(%rdx), %esi
100038f88:	48 01 fe	addq	%rdi, %rsi
100038f8b:	48 39 ce	cmpq	%rcx, %rsi
100038f8e:	77 26	ja	0x100038fb6
100038f90:	8b 3a	movl	(%rdx), %edi
100038f92:	81 ff ed 58 91 f1	cmpl	$4052834541, %edi
100038f98:	74 1c	je	0x100038fb6
100038f9a:	81 ff 02 10 00 00	cmpl	$4098, %edi
100038fa0:	75 08	jne	0x100038faa
100038fa2:	83 e7 f0	andl	$-16, %edi
100038fa5:	83 ff 20	cmpl	$32, %edi
100038fa8:	75 1d	jne	0x100038fc7
100038faa:	48 8d 7e 10	leaq	16(%rsi), %rdi
100038fae:	48 89 f2	movq	%rsi, %rdx
100038fb1:	48 39 cf	cmpq	%rcx, %rdi
100038fb4:	76 cf	jbe	0x100038f85
100038fb6:	31 f6	xorl	%esi, %esi
100038fb8:	eb 13	jmp	0x100038fcd
100038fba:	48 63 f8	movslq	%eax, %rdi
100038fbd:	e8 e0 87 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100038fc2:	e9 60 fe ff ff	jmp	0x100038e27
100038fc7:	48 89 d0	movq	%rdx, %rax
100038fca:	48 89 ce	movq	%rcx, %rsi
100038fcd:	48 8d 58 10	leaq	16(%rax), %rbx
100038fd1:	48 39 f3	cmpq	%rsi, %rbx
100038fd4:	77 10	ja	0x100038fe6
100038fd6:	8b 48 04	movl	4(%rax), %ecx
100038fd9:	48 8d 14 0b	leaq	(%rbx,%rcx), %rdx
100038fdd:	48 39 f2	cmpq	%rsi, %rdx
100038fe0:	0f 86 38 02 00 00	jbe	0x10003921e
100038fe6:	31 c9	xorl	%ecx, %ecx
100038fe8:	48 c7 45 b0 00 00 00 00	movq	$0, -80(%rbp)
100038ff0:	41 83 3e 02	cmpl	$2, (%r14)
100038ff4:	4c 89 bd 78 ff ff ff	movq	%r15, -136(%rbp)
100038ffb:	75 2f	jne	0x10003902c
100038ffd:	48 89 4d 88	movq	%rcx, -120(%rbp)
100039001:	4d 8b 7e 18	movq	24(%r14), %r15
100039005:	45 8b 76 14	movl	20(%r14), %r14d
100039009:	4d 01 fe	addq	%r15, %r14
10003900c:	4d 8d 67 10	leaq	16(%r15), %r12
100039010:	4d 39 f4	cmpq	%r14, %r12
100039013:	76 1e	jbe	0x100039033
100039015:	48 8d 35 92 94 01 00	leaq	103570(%rip), %rsi ## literal pool for: "(signal info malformed)"
10003901c:	48 8d 7d b0	leaq	-80(%rbp), %rdi
100039020:	31 c0	xorl	%eax, %eax
100039022:	e8 c9 87 00 00	callq	0x1000417f0 ## symbol stub for: _asprintf
100039027:	e9 db 00 00 00	jmp	0x100039107
10003902c:	31 c0	xorl	%eax, %eax
10003902e:	e9 dc 00 00 00	jmp	0x10003910f
100039033:	c7 45 a4 ff ff ff ff	movl	$4294967295, -92(%rbp)
10003903a:	31 f6	xorl	%esi, %esi
10003903c:	bf 11 00 00 00	movl	$17, %edi
100039041:	31 c0	xorl	%eax, %eax
100039043:	48 89 45 98	movq	%rax, -104(%rbp)
100039047:	41 8b 5f 04	movl	4(%r15), %ebx
10003904b:	49 8d 04 1c	leaq	(%r12,%rbx), %rax
10003904f:	4c 39 f0	cmpq	%r14, %rax
100039052:	0f 87 84 00 00 00	ja	0x1000390dc
100039058:	41 8b 0f	movl	(%r15), %ecx
10003905b:	81 f9 ed 58 91 f1	cmpl	$4052834541, %ecx
100039061:	74 79	je	0x1000390dc
100039063:	89 ca	movl	%ecx, %edx
100039065:	83 e2 f0	andl	$-16, %edx
100039068:	83 fa 20	cmpl	$32, %edx
10003906b:	0f 44 cf	cmovel	%edi, %ecx
10003906e:	83 f9 36	cmpl	$54, %ecx
100039071:	74 3d	je	0x1000390b0
100039073:	83 f9 37	cmpl	$55, %ecx
100039076:	75 54	jne	0x1000390cc
100039078:	41 8b 47 08	movl	8(%r15), %eax
10003907c:	83 e0 0f	andl	$15, %eax
10003907f:	29 c3	subl	%eax, %ebx
100039081:	0f 42 de	cmovbl	%esi, %ebx
100039084:	49 8d 7f 10	leaq	16(%r15), %rdi
100039088:	48 89 7d 98	movq	%rdi, -104(%rbp)
10003908c:	48 89 de	movq	%rbx, %rsi
10003908f:	e8 d4 8d 00 00	callq	0x100041e68 ## symbol stub for: _strnlen
100039094:	48 39 d8	cmpq	%rbx, %rax
100039097:	0f 83 43 02 00 00	jae	0x1000392e0
10003909d:	41 8b 47 04	movl	4(%r15), %eax
1000390a1:	49 01 c4	addq	%rax, %r12
1000390a4:	4c 89 e0	movq	%r12, %rax
1000390a7:	31 f6	xorl	%esi, %esi
1000390a9:	bf 11 00 00 00	movl	$17, %edi
1000390ae:	eb 1c	jmp	0x1000390cc
1000390b0:	41 8b 4f 08	movl	8(%r15), %ecx
1000390b4:	83 e1 0f	andl	$15, %ecx
1000390b7:	29 cb	subl	%ecx, %ebx
1000390b9:	0f 42 de	cmovbl	%esi, %ebx
1000390bc:	83 fb 04	cmpl	$4, %ebx
1000390bf:	0f 85 24 02 00 00	jne	0x1000392e9
1000390c5:	41 8b 4f 10	movl	16(%r15), %ecx
1000390c9:	89 4d a4	movl	%ecx, -92(%rbp)
1000390cc:	4c 8d 60 10	leaq	16(%rax), %r12
1000390d0:	49 89 c7	movq	%rax, %r15
1000390d3:	4d 39 f4	cmpq	%r14, %r12
1000390d6:	0f 86 6b ff ff ff	jbe	0x100039047
1000390dc:	48 8b 55 98	movq	-104(%rbp), %rdx
1000390e0:	48 85 d2	testq	%rdx, %rdx
1000390e3:	8b 4d a4	movl	-92(%rbp), %ecx
1000390e6:	0f 84 29 ff ff ff	je	0x100039015
1000390ec:	83 f9 ff	cmpl	$-1, %ecx
1000390ef:	0f 84 20 ff ff ff	je	0x100039015
1000390f5:	48 8d 35 a3 93 01 00	leaq	103331(%rip), %rsi ## literal pool for: "sent by %s[%d]"
1000390fc:	48 8d 7d b0	leaq	-80(%rbp), %rdi
100039100:	31 c0	xorl	%eax, %eax
100039102:	e8 e9 86 00 00	callq	0x1000417f0 ## symbol stub for: _asprintf
100039107:	48 8b 4d 88	movq	-120(%rbp), %rcx
10003910b:	48 8b 45 b0	movq	-80(%rbp), %rax
10003910f:	4c 89 6d b0	movq	%r13, -80(%rbp)
100039113:	48 89 4d b8	movq	%rcx, -72(%rbp)
100039117:	48 89 45 98	movq	%rax, -104(%rbp)
10003911b:	48 89 45 c0	movq	%rax, -64(%rbp)
10003911f:	4c 8d 35 40 92 01 00	leaq	102976(%rip), %r14 ## literal pool for: "%s | %s"
100039126:	31 db	xorl	%ebx, %ebx
100039128:	45 31 ff	xorl	%r15d, %r15d
10003912b:	4d 85 ed	testq	%r13, %r13
10003912e:	74 2d	je	0x10003915d
100039130:	4d 85 ff	testq	%r15, %r15
100039133:	74 12	je	0x100039147
100039135:	4c 89 f7	movq	%r14, %rdi
100039138:	4c 89 fe	movq	%r15, %rsi
10003913b:	4c 89 ea	movq	%r13, %rdx
10003913e:	31 c0	xorl	%eax, %eax
100039140:	e8 f0 5f fd ff	callq	0x10000f135
100039145:	eb 08	jmp	0x10003914f
100039147:	4c 89 ef	movq	%r13, %rdi
10003914a:	e8 93 5e fd ff	callq	0x10000efe2
10003914f:	49 89 c4	movq	%rax, %r12
100039152:	4c 89 ff	movq	%r15, %rdi
100039155:	e8 d6 88 00 00	callq	0x100041a30 ## symbol stub for: _free
10003915a:	4d 89 e7	movq	%r12, %r15
10003915d:	48 83 fb 02	cmpq	$2, %rbx
100039161:	74 0a	je	0x10003916d
100039163:	4c 8b 6c dd b8	movq	-72(%rbp,%rbx,8), %r13
100039168:	48 ff c3	incq	%rbx
10003916b:	eb be	jmp	0x10003912b
10003916d:	48 8b 7d 98	movq	-104(%rbp), %rdi
100039171:	e8 ba 88 00 00	callq	0x100041a30 ## symbol stub for: _free
100039176:	48 8b 5d a8	movq	-88(%rbp), %rbx
10003917a:	48 8b 7b 18	movq	24(%rbx), %rdi
10003917e:	e8 ad 88 00 00	callq	0x100041a30 ## symbol stub for: _free
100039183:	48 89 df	movq	%rbx, %rdi
100039186:	e8 a5 88 00 00	callq	0x100041a30 ## symbol stub for: _free
10003918b:	4d 85 ff	testq	%r15, %r15
10003918e:	48 8b 9d 78 ff ff ff	movq	-136(%rbp), %rbx
100039195:	75 1e	jne	0x1000391b5
100039197:	48 89 df	movq	%rbx, %rdi
10003919a:	e8 58 01 00 00	callq	0x1000392f7
10003919f:	48 85 c0	testq	%rax, %rax
1000391a2:	48 8d 3d c5 91 01 00	leaq	102853(%rip), %rdi ## literal pool for: "(unknown reason)"
1000391a9:	48 0f 45 f8	cmovneq	%rax, %rdi
1000391ad:	e8 30 5e fd ff	callq	0x10000efe2
1000391b2:	49 89 c7	movq	%rax, %r15
1000391b5:	8b 03	movl	(%rbx), %eax
1000391b7:	83 f8 03	cmpl	$3, %eax
1000391ba:	75 34	jne	0x1000391f0
1000391bc:	83 7b 04 00	cmpl	$0, 4(%rbx)
1000391c0:	75 36	jne	0x1000391f8
1000391c2:	48 8b 45 80	movq	-128(%rbp), %rax
1000391c6:	f6 00 7f	testb	$127, (%rax)
1000391c9:	75 2d	jne	0x1000391f8
1000391cb:	4c 89 ff	movq	%r15, %rdi
1000391ce:	e8 5d 88 00 00	callq	0x100041a30 ## symbol stub for: _free
1000391d3:	48 89 df	movq	%rbx, %rdi
1000391d6:	e8 15 02 00 00	callq	0x1000393f0
1000391db:	48 8d 3d 9d 91 01 00	leaq	102813(%rip), %rdi ## literal pool for: "exit(%d)"
1000391e2:	89 c6	movl	%eax, %esi
1000391e4:	31 c0	xorl	%eax, %eax
1000391e6:	e8 4a 5f fd ff	callq	0x10000f135
1000391eb:	49 89 c7	movq	%rax, %r15
1000391ee:	8b 03	movl	(%rbx), %eax
1000391f0:	85 c0	testl	%eax, %eax
1000391f2:	0f 84 d5 00 00 00	je	0x1000392cd
1000391f8:	48 8b 05 29 ee 01 00	movq	126505(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000391ff:	48 8b 00	movq	(%rax), %rax
100039202:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100039206:	0f 85 cf 00 00 00	jne	0x1000392db
10003920c:	4c 89 f8	movq	%r15, %rax
10003920f:	48 83 c4 68	addq	$104, %rsp
100039213:	5b	popq	%rbx
100039214:	41 5c	popq	%r12
100039216:	41 5d	popq	%r13
100039218:	41 5e	popq	%r14
10003921a:	41 5f	popq	%r15
10003921c:	5d	popq	%rbp
10003921d:	c3	retq
10003921e:	8b 30	movl	(%rax), %esi
100039220:	89 f2	movl	%esi, %edx
100039222:	83 e2 f0	andl	$-16, %edx
100039225:	83 fa 20	cmpl	$32, %edx
100039228:	ba 11 00 00 00	movl	$17, %edx
10003922d:	0f 45 d6	cmovnel	%esi, %edx
100039230:	81 fa 05 09 00 00	cmpl	$2309, %edx
100039236:	7f 0c	jg	0x100039244
100039238:	83 fa 11	cmpl	$17, %edx
10003923b:	74 69	je	0x1000392a6
10003923d:	83 fa 13	cmpl	$19, %edx
100039240:	74 64	je	0x1000392a6
100039242:	eb 55	jmp	0x100039299
100039244:	81 fa 08 09 00 00	cmpl	$2312, %edx
10003924a:	74 3d	je	0x100039289
10003924c:	81 fa 06 09 00 00	cmpl	$2310, %edx
100039252:	75 45	jne	0x100039299
100039254:	83 f9 70	cmpl	$112, %ecx
100039257:	75 40	jne	0x100039299
100039259:	b9 70 00 00 00	movl	$112, %ecx
10003925e:	f6 40 08 8f	testb	$-113, 8(%rax)
100039262:	75 35	jne	0x100039299
100039264:	b9 68 00 00 00	movl	$104, %ecx
100039269:	eb 3b	jmp	0x1000392a6
10003926b:	e8 32 85 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039270:	e9 cb fc ff ff	jmp	0x100038f40
100039275:	e8 28 85 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003927a:	e9 6e fc ff ff	jmp	0x100038eed
10003927f:	e8 1e 85 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039284:	e9 fa fb ff ff	jmp	0x100038e83
100039289:	83 f9 20	cmpl	$32, %ecx
10003928c:	75 0b	jne	0x100039299
10003928e:	b9 20 00 00 00	movl	$32, %ecx
100039293:	f6 40 08 8f	testb	$-113, 8(%rax)
100039297:	74 2d	je	0x1000392c6
100039299:	8b 40 08	movl	8(%rax), %eax
10003929c:	83 e0 0f	andl	$15, %eax
10003929f:	31 d2	xorl	%edx, %edx
1000392a1:	29 c1	subl	%eax, %ecx
1000392a3:	0f 42 ca	cmovbl	%edx, %ecx
1000392a6:	41 89 ce	movl	%ecx, %r14d
1000392a9:	48 89 df	movq	%rbx, %rdi
1000392ac:	4c 89 f6	movq	%r14, %rsi
1000392af:	e8 b4 8b 00 00	callq	0x100041e68 ## symbol stub for: _strnlen
1000392b4:	31 c9	xorl	%ecx, %ecx
1000392b6:	4c 39 f0	cmpq	%r14, %rax
1000392b9:	48 0f 42 cb	cmovbq	%rbx, %rcx
1000392bd:	4c 8b 75 a8	movq	-88(%rbp), %r14
1000392c1:	e9 22 fd ff ff	jmp	0x100038fe8
1000392c6:	b9 18 00 00 00	movl	$24, %ecx
1000392cb:	eb d9	jmp	0x1000392a6
1000392cd:	e8 ce 81 00 00	callq	0x1000414a0
1000392d2:	48 8d 3d 3b 91 01 00	leaq	102715(%rip), %rdi ## literal pool for: "retrieved exit reason with invalid reason buffer size"
1000392d9:	eb 15	jmp	0x1000392f0
1000392db:	e8 92 84 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
1000392e0:	48 8d 3d 63 91 01 00	leaq	102755(%rip), %rdi ## literal pool for: "kernel returned invalid sender procname for signal"
1000392e7:	eb 07	jmp	0x1000392f0
1000392e9:	48 8d 3d 8d 91 01 00	leaq	102797(%rip), %rdi ## literal pool for: "PID size for exit reason mismatch"
1000392f0:	31 c0	xorl	%eax, %eax
1000392f2:	e8 1b b1 ff ff	callq	0x100034412
1000392f7:	55	pushq	%rbp
1000392f8:	48 89 e5	movq	%rsp, %rbp
1000392fb:	41 56	pushq	%r14
1000392fd:	53	pushq	%rbx
1000392fe:	8b 07	movl	(%rdi), %eax
100039300:	8b 5f 04	movl	4(%rdi), %ebx
100039303:	4c 8b 77 08	movq	8(%rdi), %r14
100039307:	83 f8 03	cmpl	$3, %eax
10003930a:	75 1b	jne	0x100039327
10003930c:	85 db	testl	%ebx, %ebx
10003930e:	75 17	jne	0x100039327
100039310:	8b 47 1c	movl	28(%rdi), %eax
100039313:	83 e0 7f	andl	$127, %eax
100039316:	74 57	je	0x10003936f
100039318:	85 c0	testl	%eax, %eax
10003931a:	0f 84 80 00 00 00	je	0x1000393a0
100039320:	83 f8 7f	cmpl	$127, %eax
100039323:	74 7b	je	0x1000393a0
100039325:	eb 24	jmp	0x10003934b
100039327:	83 fb 09	cmpl	$9, %ebx
10003932a:	77 74	ja	0x1000393a0
10003932c:	89 d9	movl	%ebx, %ecx
10003932e:	48 8d 15 77 00 00 00	leaq	119(%rip), %rdx
100039335:	48 63 0c 8a	movslq	(%rdx,%rcx,4), %rcx
100039339:	48 01 d1	addq	%rdx, %rcx
10003933c:	ff e1	jmpq	*%rcx
10003933e:	83 f8 03	cmpl	$3, %eax
100039341:	75 5d	jne	0x1000393a0
100039343:	8b 47 1c	movl	28(%rdi), %eax
100039346:	83 e0 7f	andl	$127, %eax
100039349:	eb cd	jmp	0x100039318
10003934b:	e8 6c 01 00 00	callq	0x1000394bc
100039350:	89 c7	movl	%eax, %edi
100039352:	e8 10 bc ff ff	callq	0x100034f67
100039357:	48 85 c0	testq	%rax, %rax
10003935a:	75 3f	jne	0x10003939b
10003935c:	83 fb 01	cmpl	$1, %ebx
10003935f:	75 3f	jne	0x1000393a0
100039361:	48 8d 35 08 25 02 00	leaq	140552(%rip), %rsi
100039368:	ba 03 00 00 00	movl	$3, %edx
10003936d:	eb 1f	jmp	0x10003938e
10003936f:	48 8d 05 12 90 01 00	leaq	102418(%rip), %rax ## literal pool for: "exit()"
100039376:	eb 23	jmp	0x10003939b
100039378:	44 89 f7	movl	%r14d, %edi
10003937b:	e8 40 8d 00 00	callq	0x1000420c0 ## symbol stub for: _xpc_exit_reason_get_label
100039380:	eb 14	jmp	0x100039396
100039382:	48 8d 35 d7 24 02 00	leaq	140503(%rip), %rsi
100039389:	ba 01 00 00 00	movl	$1, %edx
10003938e:	44 89 f7	movl	%r14d, %edi
100039391:	e8 55 60 fd ff	callq	0x10000f3eb
100039396:	48 85 c0	testq	%rax, %rax
100039399:	74 05	je	0x1000393a0
10003939b:	5b	popq	%rbx
10003939c:	41 5e	popq	%r14
10003939e:	5d	popq	%rbp
10003939f:	c3	retq
1000393a0:	89 df	movl	%ebx, %edi
1000393a2:	5b	popq	%rbx
1000393a3:	41 5e	popq	%r14
1000393a5:	5d	popq	%rbp
1000393a6:	e9 d2 bb ff ff	jmp	0x100034f7d
1000393ab:	90	nop
1000393ac:	92	xchgl	%edx, %eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393af:	ff b5 ff ff ff 9f	pushq	-1610612737(%rbp)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393b7:	ff f4	pushq	%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393bb:	ff f4	pushq	%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393bf:	ff f4	pushq	%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393c3:	ff f4	pushq	%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393c7:	ff cc	decl	%esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393cb:	ff f4	pushq	%rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393cf:	ff d6	callq	*%rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000393d3:	ff 55 48	callq	*72(%rbp)
1000393d6:	89 e5	movl	%esp, %ebp
1000393d8:	83 3f 03	cmpl	$3, (%rdi)
1000393db:	75 06	jne	0x1000393e3
1000393dd:	83 7f 04 00	cmpl	$0, 4(%rdi)
1000393e1:	74 04	je	0x1000393e7
1000393e3:	31 c0	xorl	%eax, %eax
1000393e5:	eb 07	jmp	0x1000393ee
1000393e7:	f6 47 1c 7f	testb	$127, 28(%rdi)
1000393eb:	0f 94 c0	sete	%al
1000393ee:	5d	popq	%rbp
1000393ef:	c3	retq
1000393f0:	55	pushq	%rbp
1000393f1:	48 89 e5	movq	%rsp, %rbp
1000393f4:	83 3f 03	cmpl	$3, (%rdi)
1000393f7:	75 12	jne	0x10003940b
1000393f9:	83 7f 04 00	cmpl	$0, 4(%rdi)
1000393fd:	75 0c	jne	0x10003940b
1000393ff:	8b 47 1c	movl	28(%rdi), %eax
100039402:	a8 7f	testb	$127, %al
100039404:	75 05	jne	0x10003940b
100039406:	0f b6 c4	movzbl	%ah, %eax
100039409:	5d	popq	%rbp
10003940a:	c3	retq
10003940b:	e8 a5 80 00 00	callq	0x1000414b5
100039410:	55	pushq	%rbp
100039411:	48 89 e5	movq	%rsp, %rbp
100039414:	0f 57 c0	xorps	%xmm0, %xmm0
100039417:	0f 11 07	movups	%xmm0, (%rdi)
10003941a:	0f 11 87 a0 00 00 00	movups	%xmm0, 160(%rdi)
100039421:	0f 11 87 90 00 00 00	movups	%xmm0, 144(%rdi)
100039428:	0f 11 87 80 00 00 00	movups	%xmm0, 128(%rdi)
10003942f:	0f 11 47 70	movups	%xmm0, 112(%rdi)
100039433:	0f 11 47 60	movups	%xmm0, 96(%rdi)
100039437:	0f 11 47 50	movups	%xmm0, 80(%rdi)
10003943b:	0f 11 47 40	movups	%xmm0, 64(%rdi)
10003943f:	0f 11 47 30	movups	%xmm0, 48(%rdi)
100039443:	0f 11 47 20	movups	%xmm0, 32(%rdi)
100039447:	0f 11 47 10	movups	%xmm0, 16(%rdi)
10003944b:	48 c7 87 b0 00 00 00 00 00 00 00	movq	$0, 176(%rdi)
100039456:	c7 07 01 00 00 00	movl	$1, (%rdi)
10003945c:	5d	popq	%rbp
10003945d:	c3	retq
10003945e:	55	pushq	%rbp
10003945f:	48 89 e5	movq	%rsp, %rbp
100039462:	83 7f 04 00	cmpl	$0, 4(%rdi)
100039466:	74 0a	je	0x100039472
100039468:	8a 47 10	movb	16(%rdi), %al
10003946b:	24 40	andb	$64, %al
10003946d:	c0 e8 06	shrb	$6, %al
100039470:	eb 02	jmp	0x100039474
100039472:	31 c0	xorl	%eax, %eax
100039474:	5d	popq	%rbp
100039475:	c3	retq
100039476:	55	pushq	%rbp
100039477:	48 89 e5	movq	%rsp, %rbp
10003947a:	b0 01	movb	$1, %al
10003947c:	83 3f 03	cmpl	$3, (%rdi)
10003947f:	74 07	je	0x100039488
100039481:	83 7f 04 00	cmpl	$0, 4(%rdi)
100039485:	0f 95 c0	setne	%al
100039488:	5d	popq	%rbp
100039489:	c3	retq
10003948a:	55	pushq	%rbp
10003948b:	48 89 e5	movq	%rsp, %rbp
10003948e:	8b 47 04	movl	4(%rdi), %eax
100039491:	83 f8 02	cmpl	$2, %eax
100039494:	74 22	je	0x1000394b8
100039496:	85 c0	testl	%eax, %eax
100039498:	75 1a	jne	0x1000394b4
10003949a:	83 3f 03	cmpl	$3, (%rdi)
10003949d:	75 15	jne	0x1000394b4
10003949f:	8b 47 1c	movl	28(%rdi), %eax
1000394a2:	83 e0 7f	andl	$127, %eax
1000394a5:	83 f8 7f	cmpl	$127, %eax
1000394a8:	0f 95 c1	setne	%cl
1000394ab:	85 c0	testl	%eax, %eax
1000394ad:	0f 95 c0	setne	%al
1000394b0:	20 c8	andb	%cl, %al
1000394b2:	eb 06	jmp	0x1000394ba
1000394b4:	31 c0	xorl	%eax, %eax
1000394b6:	eb 02	jmp	0x1000394ba
1000394b8:	b0 01	movb	$1, %al
1000394ba:	5d	popq	%rbp
1000394bb:	c3	retq
1000394bc:	55	pushq	%rbp
1000394bd:	48 89 e5	movq	%rsp, %rbp
1000394c0:	8b 47 04	movl	4(%rdi), %eax
1000394c3:	83 f8 02	cmpl	$2, %eax
1000394c6:	74 1d	je	0x1000394e5
1000394c8:	85 c0	testl	%eax, %eax
1000394ca:	75 14	jne	0x1000394e0
1000394cc:	83 3f 03	cmpl	$3, (%rdi)
1000394cf:	75 0f	jne	0x1000394e0
1000394d1:	8b 47 1c	movl	28(%rdi), %eax
1000394d4:	83 e0 7f	andl	$127, %eax
1000394d7:	83 f8 7f	cmpl	$127, %eax
1000394da:	74 04	je	0x1000394e0
1000394dc:	85 c0	testl	%eax, %eax
1000394de:	75 08	jne	0x1000394e8
1000394e0:	e8 e5 7f 00 00	callq	0x1000414ca
1000394e5:	8b 47 08	movl	8(%rdi), %eax
1000394e8:	5d	popq	%rbp
1000394e9:	c3	retq
1000394ea:	55	pushq	%rbp
1000394eb:	48 89 e5	movq	%rsp, %rbp
1000394ee:	53	pushq	%rbx
1000394ef:	50	pushq	%rax
1000394f0:	48 89 fb	movq	%rdi, %rbx
1000394f3:	8b 47 04	movl	4(%rdi), %eax
1000394f6:	83 f8 02	cmpl	$2, %eax
1000394f9:	74 16	je	0x100039511
1000394fb:	85 c0	testl	%eax, %eax
1000394fd:	75 36	jne	0x100039535
1000394ff:	83 3b 03	cmpl	$3, (%rbx)
100039502:	75 39	jne	0x10003953d
100039504:	8b 43 1c	movl	28(%rbx), %eax
100039507:	83 e0 7f	andl	$127, %eax
10003950a:	74 31	je	0x10003953d
10003950c:	83 f8 7f	cmpl	$127, %eax
10003950f:	74 2c	je	0x10003953d
100039511:	48 89 df	movq	%rbx, %rdi
100039514:	e8 a3 ff ff ff	callq	0x1000394bc
100039519:	89 c1	movl	%eax, %ecx
10003951b:	83 c1 fc	addl	$-4, %ecx
10003951e:	83 f9 09	cmpl	$9, %ecx
100039521:	73 0c	jae	0x10003952f
100039523:	b0 01	movb	$1, %al
100039525:	ba d7 01 00 00	movl	$471, %edx
10003952a:	0f a3 ca	btl	%ecx, %edx
10003952d:	72 10	jb	0x10003953f
10003952f:	83 7b 04 00	cmpl	$0, 4(%rbx)
100039533:	74 08	je	0x10003953d
100039535:	b0 01	movb	$1, %al
100039537:	f6 43 11 02	testb	$2, 17(%rbx)
10003953b:	75 02	jne	0x10003953f
10003953d:	31 c0	xorl	%eax, %eax
10003953f:	48 83 c4 08	addq	$8, %rsp
100039543:	5b	popq	%rbx
100039544:	5d	popq	%rbp
100039545:	c3	retq
100039546:	55	pushq	%rbp
100039547:	48 89 e5	movq	%rsp, %rbp
10003954a:	8a 47 11	movb	17(%rdi), %al
10003954d:	24 04	andb	$4, %al
10003954f:	c0 e8 02	shrb	$2, %al
100039552:	5d	popq	%rbp
100039553:	c3	retq
100039554:	55	pushq	%rbp
100039555:	48 89 e5	movq	%rsp, %rbp
100039558:	83 3f 03	cmpl	$3, (%rdi)
10003955b:	8b 47 04	movl	4(%rdi), %eax
10003955e:	0f 94 c1	sete	%cl
100039561:	85 c0	testl	%eax, %eax
100039563:	0f 95 c2	setne	%dl
100039566:	08 ca	orb	%cl, %dl
100039568:	83 f8 01	cmpl	$1, %eax
10003956b:	0f 94 c0	sete	%al
10003956e:	20 d0	andb	%dl, %al
100039570:	5d	popq	%rbp
100039571:	c3	retq
100039572:	55	pushq	%rbp
100039573:	48 89 e5	movq	%rsp, %rbp
100039576:	8b 4f 04	movl	4(%rdi), %ecx
100039579:	83 3f 03	cmpl	$3, (%rdi)
10003957c:	0f 94 c0	sete	%al
10003957f:	85 c9	testl	%ecx, %ecx
100039581:	0f 95 c2	setne	%dl
100039584:	08 c2	orb	%al, %dl
100039586:	31 c0	xorl	%eax, %eax
100039588:	80 fa 01	cmpb	$1, %dl
10003958b:	75 19	jne	0x1000395a6
10003958d:	83 f9 01	cmpl	$1, %ecx
100039590:	75 14	jne	0x1000395a6
100039592:	48 8b 47 08	movq	8(%rdi), %rax
100039596:	48 83 f8 02	cmpq	$2, %rax
10003959a:	0f 94 c1	sete	%cl
10003959d:	48 83 f8 07	cmpq	$7, %rax
1000395a1:	0f 94 c0	sete	%al
1000395a4:	08 c8	orb	%cl, %al
1000395a6:	5d	popq	%rbp
1000395a7:	c3	retq
1000395a8:	55	pushq	%rbp
1000395a9:	48 89 e5	movq	%rsp, %rbp
1000395ac:	8b 4f 04	movl	4(%rdi), %ecx
1000395af:	83 3f 03	cmpl	$3, (%rdi)
1000395b2:	0f 94 c0	sete	%al
1000395b5:	85 c9	testl	%ecx, %ecx
1000395b7:	0f 95 c2	setne	%dl
1000395ba:	08 c2	orb	%al, %dl
1000395bc:	31 c0	xorl	%eax, %eax
1000395be:	80 fa 01	cmpb	$1, %dl
1000395c1:	75 0d	jne	0x1000395d0
1000395c3:	83 f9 01	cmpl	$1, %ecx
1000395c6:	75 08	jne	0x1000395d0
1000395c8:	48 83 7f 08 09	cmpq	$9, 8(%rdi)
1000395cd:	0f 94 c0	sete	%al
1000395d0:	5d	popq	%rbp
1000395d1:	c3	retq
1000395d2:	55	pushq	%rbp
1000395d3:	48 89 e5	movq	%rsp, %rbp
1000395d6:	8b 4f 04	movl	4(%rdi), %ecx
1000395d9:	83 3f 03	cmpl	$3, (%rdi)
1000395dc:	0f 94 c0	sete	%al
1000395df:	85 c9	testl	%ecx, %ecx
1000395e1:	0f 95 c2	setne	%dl
1000395e4:	08 c2	orb	%al, %dl
1000395e6:	31 c0	xorl	%eax, %eax
1000395e8:	80 fa 01	cmpb	$1, %dl
1000395eb:	75 0d	jne	0x1000395fa
1000395ed:	83 f9 09	cmpl	$9, %ecx
1000395f0:	75 08	jne	0x1000395fa
1000395f2:	48 83 7f 08 0a	cmpq	$10, 8(%rdi)
1000395f7:	0f 94 c0	sete	%al
1000395fa:	5d	popq	%rbp
1000395fb:	c3	retq
1000395fc:	55	pushq	%rbp
1000395fd:	48 89 e5	movq	%rsp, %rbp
100039600:	83 3f 03	cmpl	$3, (%rdi)
100039603:	8b 47 04	movl	4(%rdi), %eax
100039606:	0f 94 c1	sete	%cl
100039609:	85 c0	testl	%eax, %eax
10003960b:	0f 95 c2	setne	%dl
10003960e:	08 ca	orb	%cl, %dl
100039610:	83 f8 03	cmpl	$3, %eax
100039613:	0f 94 c0	sete	%al
100039616:	20 d0	andb	%dl, %al
100039618:	5d	popq	%rbp
100039619:	c3	retq
10003961a:	55	pushq	%rbp
10003961b:	48 89 e5	movq	%rsp, %rbp
10003961e:	8b 4f 04	movl	4(%rdi), %ecx
100039621:	83 3f 03	cmpl	$3, (%rdi)
100039624:	0f 94 c0	sete	%al
100039627:	85 c9	testl	%ecx, %ecx
100039629:	0f 95 c2	setne	%dl
10003962c:	08 c2	orb	%al, %dl
10003962e:	31 c0	xorl	%eax, %eax
100039630:	80 fa 01	cmpb	$1, %dl
100039633:	75 0d	jne	0x100039642
100039635:	83 f9 07	cmpl	$7, %ecx
100039638:	75 08	jne	0x100039642
10003963a:	48 83 7f 08 03	cmpq	$3, 8(%rdi)
10003963f:	0f 94 c0	sete	%al
100039642:	5d	popq	%rbp
100039643:	c3	retq
100039644:	48 85 ff	testq	%rdi, %rdi
100039647:	74 06	je	0x10003964f
100039649:	48 89 f8	movq	%rdi, %rax
10003964c:	31 d2	xorl	%edx, %edx
10003964e:	c3	retq
10003964f:	55	pushq	%rbp
100039650:	48 89 e5	movq	%rsp, %rbp
100039653:	e8 87 7e 00 00	callq	0x1000414df
100039658:	85 ff	testl	%edi, %edi
10003965a:	74 05	je	0x100039661
10003965c:	31 c0	xorl	%eax, %eax
10003965e:	89 fa	movl	%edi, %edx
100039660:	c3	retq
100039661:	55	pushq	%rbp
100039662:	48 89 e5	movq	%rsp, %rbp
100039665:	e8 87 7e 00 00	callq	0x1000414f1
10003966a:	55	pushq	%rbp
10003966b:	48 89 e5	movq	%rsp, %rbp
10003966e:	53	pushq	%rbx
10003966f:	50	pushq	%rax
100039670:	48 89 fb	movq	%rdi, %rbx
100039673:	48 8b 7f 10	movq	16(%rdi), %rdi
100039677:	e8 80 8a 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003967c:	48 8b 7b 08	movq	8(%rbx), %rdi
100039680:	48 83 c4 08	addq	$8, %rsp
100039684:	5b	popq	%rbx
100039685:	5d	popq	%rbp
100039686:	e9 a5 83 00 00	jmp	0x100041a30 ## symbol stub for: _free
10003968b:	55	pushq	%rbp
10003968c:	48 89 e5	movq	%rsp, %rbp
10003968f:	41 57	pushq	%r15
100039691:	41 56	pushq	%r14
100039693:	41 55	pushq	%r13
100039695:	41 54	pushq	%r12
100039697:	53	pushq	%rbx
100039698:	48 83 ec 28	subq	$40, %rsp
10003969c:	4c 89 c3	movq	%r8, %rbx
10003969f:	48 89 4d b8	movq	%rcx, -72(%rbp)
1000396a3:	49 89 d6	movq	%rdx, %r14
1000396a6:	49 89 f7	movq	%rsi, %r15
1000396a9:	49 89 fd	movq	%rdi, %r13
1000396ac:	48 89 f7	movq	%rsi, %rdi
1000396af:	be 02 00 00 00	movl	$2, %esi
1000396b4:	e8 0b 89 00 00	callq	0x100041fc4 ## symbol stub for: _xpc_bundle_get_property
1000396b9:	48 85 c0	testq	%rax, %rax
1000396bc:	0f 84 9b 00 00 00	je	0x10003975d
1000396c2:	49 89 c4	movq	%rax, %r12
1000396c5:	4c 89 75 c0	movq	%r14, -64(%rbp)
1000396c9:	48 89 5d d0	movq	%rbx, -48(%rbp)
1000396cd:	4c 89 ff	movq	%r15, %rdi
1000396d0:	e8 e3 88 00 00	callq	0x100041fb8 ## symbol stub for: _xpc_bundle_get_info_dictionary
1000396d5:	48 85 c0	testq	%rax, %rax
1000396d8:	0f 84 9f 00 00 00	je	0x10003977d
1000396de:	49 89 c6	movq	%rax, %r14
1000396e1:	4c 89 6d c8	movq	%r13, -56(%rbp)
1000396e5:	48 8d 35 52 a2 00 00	leaq	41554(%rip), %rsi ## literal pool for: "CFBundleIdentifier"
1000396ec:	48 89 c7	movq	%rax, %rdi
1000396ef:	e8 66 89 00 00	callq	0x10004205a ## symbol stub for: _xpc_dictionary_get_string
1000396f4:	48 85 c0	testq	%rax, %rax
1000396f7:	0f 84 a7 00 00 00	je	0x1000397a4
1000396fd:	49 89 c5	movq	%rax, %r13
100039700:	48 89 c7	movq	%rax, %rdi
100039703:	e8 4e 87 00 00	callq	0x100041e56 ## symbol stub for: _strlen
100039708:	48 8d 78 01	leaq	1(%rax), %rdi
10003970c:	e8 9a 97 fd ff	callq	0x100012eab
100039711:	48 89 c3	movq	%rax, %rbx
100039714:	48 8b 45 c0	movq	-64(%rbp), %rax
100039718:	0f 10 00	movups	(%rax), %xmm0
10003971b:	0f 10 48 10	movups	16(%rax), %xmm1
10003971f:	0f 11 43 18	movups	%xmm0, 24(%rbx)
100039723:	0f 11 4b 28	movups	%xmm1, 40(%rbx)
100039727:	48 8d 7b 40	leaq	64(%rbx), %rdi
10003972b:	4c 89 ee	movq	%r13, %rsi
10003972e:	e8 ff 86 00 00	callq	0x100041e32 ## symbol stub for: _strcpy
100039733:	4c 89 ff	movq	%r15, %rdi
100039736:	e8 77 88 00 00	callq	0x100041fb2 ## symbol stub for: _xpc_bundle_get_executable_path
10003973b:	48 89 c7	movq	%rax, %rdi
10003973e:	e8 9f 58 fd ff	callq	0x10000efe2
100039743:	48 89 43 08	movq	%rax, 8(%rbx)
100039747:	4c 89 f7	movq	%r14, %rdi
10003974a:	e8 b3 89 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10003974f:	48 89 43 10	movq	%rax, 16(%rbx)
100039753:	48 8b 45 b8	movq	-72(%rbp), %rax
100039757:	48 89 43 38	movq	%rax, 56(%rbx)
10003975b:	eb 6d	jmp	0x1000397ca
10003975d:	c7 03 6b 00 00 00	movl	$107, (%rbx)
100039763:	48 8d 15 5f a3 00 00	leaq	41823(%rip), %rdx ## literal pool for: "Could not get path for service bundle."
10003976a:	31 db	xorl	%ebx, %ebx
10003976c:	4c 89 ef	movq	%r13, %rdi
10003976f:	be 03 00 00 00	movl	$3, %esi
100039774:	31 c0	xorl	%eax, %eax
100039776:	e8 ae 6c fe ff	callq	0x100020429
10003977b:	eb 4d	jmp	0x1000397ca
10003977d:	48 8b 45 d0	movq	-48(%rbp), %rax
100039781:	c7 00 6b 00 00 00	movl	$107, (%rax)
100039787:	48 8d 15 62 a3 00 00	leaq	41826(%rip), %rdx ## literal pool for: "Could not get Info.plist for bundle at %s"
10003978e:	31 db	xorl	%ebx, %ebx
100039790:	4c 89 ef	movq	%r13, %rdi
100039793:	be 03 00 00 00	movl	$3, %esi
100039798:	4c 89 e1	movq	%r12, %rcx
10003979b:	31 c0	xorl	%eax, %eax
10003979d:	e8 87 6c fe ff	callq	0x100020429
1000397a2:	eb 26	jmp	0x1000397ca
1000397a4:	48 8d 15 6f a3 00 00	leaq	41839(%rip), %rdx ## literal pool for: "Bundle Info.plist at %s does not have a CFBundleIdentifier"
1000397ab:	31 db	xorl	%ebx, %ebx
1000397ad:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000397b1:	be 03 00 00 00	movl	$3, %esi
1000397b6:	4c 89 e1	movq	%r12, %rcx
1000397b9:	31 c0	xorl	%eax, %eax
1000397bb:	e8 69 6c fe ff	callq	0x100020429
1000397c0:	48 8b 45 d0	movq	-48(%rbp), %rax
1000397c4:	c7 00 6b 00 00 00	movl	$107, (%rax)
1000397ca:	48 89 d8	movq	%rbx, %rax
1000397cd:	48 83 c4 28	addq	$40, %rsp
1000397d1:	5b	popq	%rbx
1000397d2:	41 5c	popq	%r12
1000397d4:	41 5d	popq	%r13
1000397d6:	41 5e	popq	%r14
1000397d8:	41 5f	popq	%r15
1000397da:	5d	popq	%rbp
1000397db:	c3	retq
1000397dc:	90	nop
1000397dd:	90	nop
1000397de:	90	nop
1000397df:	90	nop
1000397e0:	48 85 ff	testq	%rdi, %rdi
1000397e3:	74 06	je	0x1000397eb
1000397e5:	48 89 f8	movq	%rdi, %rax
1000397e8:	31 d2	xorl	%edx, %edx
1000397ea:	c3	retq
1000397eb:	55	pushq	%rbp
1000397ec:	48 89 e5	movq	%rsp, %rbp
1000397ef:	e8 13 7d 00 00	callq	0x100041507
1000397f4:	85 ff	testl	%edi, %edi
1000397f6:	74 05	je	0x1000397fd
1000397f8:	31 c0	xorl	%eax, %eax
1000397fa:	89 fa	movl	%edi, %edx
1000397fc:	c3	retq
1000397fd:	55	pushq	%rbp
1000397fe:	48 89 e5	movq	%rsp, %rbp
100039801:	e8 13 7d 00 00	callq	0x100041519
100039806:	55	pushq	%rbp
100039807:	48 89 e5	movq	%rsp, %rbp
10003980a:	48 8d 35 b5 8c 01 00	leaq	101557(%rip), %rsi ## literal pool for: "misfired notification: port-deleted"
100039811:	bf 03 00 00 00	movl	$3, %edi
100039816:	31 c0	xorl	%eax, %eax
100039818:	e8 ab bd ff ff	callq	0x1000355c8
10003981d:	b8 05 00 00 00	movl	$5, %eax
100039822:	5d	popq	%rbp
100039823:	c3	retq
100039824:	55	pushq	%rbp
100039825:	48 89 e5	movq	%rsp, %rbp
100039828:	53	pushq	%rbx
100039829:	50	pushq	%rax
10003982a:	bb 05 00 00 00	movl	$5, %ebx
10003982f:	83 3d 6e 9f 02 00 00	cmpl	$0, 171886(%rip)
100039836:	75 21	jne	0x100039859
100039838:	89 f7	movl	%esi, %edi
10003983a:	be 01 00 00 00	movl	$1, %esi
10003983f:	e8 1e 00 00 00	callq	0x100039862
100039844:	31 db	xorl	%ebx, %ebx
100039846:	48 85 c0	testq	%rax, %rax
100039849:	74 0e	je	0x100039859
10003984b:	48 8b 78 18	movq	24(%rax), %rdi
10003984f:	be 45 00 00 00	movl	$69, %esi
100039854:	e8 3b 81 00 00	callq	0x100041994 ## symbol stub for: _dispatch_source_merge_data
100039859:	89 d8	movl	%ebx, %eax
10003985b:	48 83 c4 08	addq	$8, %rsp
10003985f:	5b	popq	%rbx
100039860:	5d	popq	%rbp
100039861:	c3	retq
100039862:	55	pushq	%rbp
100039863:	48 89 e5	movq	%rsp, %rbp
100039866:	41 56	pushq	%r14
100039868:	53	pushq	%rbx
100039869:	89 f3	movl	%esi, %ebx
10003986b:	41 89 fe	movl	%edi, %r14d
10003986e:	e8 2c 0f 00 00	callq	0x10003a79f
100039873:	48 8d 0d 96 9f 02 00	leaq	171926(%rip), %rcx
10003987a:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
10003987e:	48 85 c0	testq	%rax, %rax
100039881:	74 10	je	0x100039893
100039883:	38 58 28	cmpb	%bl, 40(%rax)
100039886:	75 06	jne	0x10003988e
100039888:	44 39 70 10	cmpl	%r14d, 16(%rax)
10003988c:	74 07	je	0x100039895
10003988e:	48 8b 00	movq	(%rax), %rax
100039891:	eb eb	jmp	0x10003987e
100039893:	31 c0	xorl	%eax, %eax
100039895:	5b	popq	%rbx
100039896:	41 5e	popq	%r14
100039898:	5d	popq	%rbp
100039899:	c3	retq
10003989a:	55	pushq	%rbp
10003989b:	48 89 e5	movq	%rsp, %rbp
10003989e:	48 8d 35 45 8c 01 00	leaq	101445(%rip), %rsi ## literal pool for: "misfired notification: no-senders"
1000398a5:	bf 03 00 00 00	movl	$3, %edi
1000398aa:	31 c0	xorl	%eax, %eax
1000398ac:	e8 17 bd ff ff	callq	0x1000355c8
1000398b1:	b8 05 00 00 00	movl	$5, %eax
1000398b6:	5d	popq	%rbp
1000398b7:	c3	retq
1000398b8:	55	pushq	%rbp
1000398b9:	48 89 e5	movq	%rsp, %rbp
1000398bc:	48 8d 35 49 8c 01 00	leaq	101449(%rip), %rsi ## literal pool for: "misfired notification: send-once"
1000398c3:	bf 03 00 00 00	movl	$3, %edi
1000398c8:	31 c0	xorl	%eax, %eax
1000398ca:	e8 f9 bc ff ff	callq	0x1000355c8
1000398cf:	b8 05 00 00 00	movl	$5, %eax
1000398d4:	5d	popq	%rbp
1000398d5:	c3	retq
1000398d6:	55	pushq	%rbp
1000398d7:	48 89 e5	movq	%rsp, %rbp
1000398da:	48 8d 35 4c 8c 01 00	leaq	101452(%rip), %rsi ## literal pool for: "misfired notification: dead-name"
1000398e1:	bf 03 00 00 00	movl	$3, %edi
1000398e6:	31 c0	xorl	%eax, %eax
1000398e8:	e8 db bc ff ff	callq	0x1000355c8
1000398ed:	b8 05 00 00 00	movl	$5, %eax
1000398f2:	5d	popq	%rbp
1000398f3:	c3	retq
1000398f4:	90	nop
1000398f5:	90	nop
1000398f6:	90	nop
1000398f7:	90	nop
1000398f8:	90	nop
1000398f9:	90	nop
1000398fa:	90	nop
1000398fb:	90	nop
1000398fc:	90	nop
1000398fd:	90	nop
1000398fe:	90	nop
1000398ff:	90	nop
100039900:	90	nop
100039901:	90	nop
100039902:	55	pushq	%rbp
100039903:	48 89 e5	movq	%rsp, %rbp
100039906:	48 c7 05 9f 9e 02 00 00 00 00 00	movq	$0, 171679(%rip)
100039911:	0f 57 c0	xorps	%xmm0, %xmm0
100039914:	0f 11 05 75 9e 02 00	movups	%xmm0, 171637(%rip)
10003991b:	0f 11 05 7e 9e 02 00	movups	%xmm0, 171646(%rip)
100039922:	5d	popq	%rbp
100039923:	c3	retq
100039924:	55	pushq	%rbp
100039925:	48 89 e5	movq	%rsp, %rbp
100039928:	48 8d 05 61 9e 02 00	leaq	171617(%rip), %rax
10003992f:	5d	popq	%rbp
100039930:	c3	retq
100039931:	90	nop
100039932:	90	nop
100039933:	90	nop
100039934:	90	nop
100039935:	90	nop
100039936:	90	nop
100039937:	90	nop
100039938:	90	nop
100039939:	90	nop
10003993a:	90	nop
10003993b:	90	nop
10003993c:	90	nop
10003993d:	90	nop
10003993e:	90	nop
10003993f:	90	nop
100039940:	55	pushq	%rbp
100039941:	48 89 e5	movq	%rsp, %rbp
100039944:	48 8b 05 65 9e 02 00	movq	171621(%rip), %rax
10003994b:	5d	popq	%rbp
10003994c:	c3	retq
10003994d:	55	pushq	%rbp
10003994e:	48 89 e5	movq	%rsp, %rbp
100039951:	c6 05 60 9e 02 00 01	movb	$1, 171616(%rip)
100039958:	5d	popq	%rbp
100039959:	c3	retq
10003995a:	55	pushq	%rbp
10003995b:	48 89 e5	movq	%rsp, %rbp
10003995e:	41 56	pushq	%r14
100039960:	53	pushq	%rbx
100039961:	49 89 f6	movq	%rsi, %r14
100039964:	89 fb	movl	%edi, %ebx
100039966:	48 83 3d 52 9e 02 00 ff	cmpq	$-1, 171602(%rip)
10003996e:	0f 85 89 00 00 00	jne	0x1000399fd
100039974:	48 8b 15 4d 9e 02 00	movq	171597(%rip), %rdx
10003997b:	48 3b 15 a6 8c 02 00	cmpq	167078(%rip), %rdx
100039982:	75 55	jne	0x1000399d9
100039984:	48 8d 34 d5 00 00 00 00	leaq	(,%rdx,8), %rsi
10003998c:	48 c1 e2 04	shlq	$4, %rdx
100039990:	48 8b 3d 39 9e 02 00	movq	171577(%rip), %rdi
100039997:	e8 93 3b fd ff	callq	0x10000d52f
10003999c:	48 89 05 2d 9e 02 00	movq	%rax, 171565(%rip)
1000399a3:	48 8b 15 7e 8c 02 00	movq	167038(%rip), %rdx
1000399aa:	48 8d 34 95 00 00 00 00	leaq	(,%rdx,4), %rsi
1000399b2:	48 c1 e2 03	shlq	$3, %rdx
1000399b6:	48 8b 3d 1b 9e 02 00	movq	171547(%rip), %rdi
1000399bd:	e8 6d 3b fd ff	callq	0x10000d52f
1000399c2:	48 d1 25 5f 8c 02 00	shlq	167007(%rip)
1000399c9:	48 89 05 08 9e 02 00	movq	%rax, 171528(%rip)
1000399d0:	48 8b 15 f1 9d 02 00	movq	171505(%rip), %rdx
1000399d7:	eb 07	jmp	0x1000399e0
1000399d9:	48 8b 05 f8 9d 02 00	movq	171512(%rip), %rax
1000399e0:	48 8b 0d e9 9d 02 00	movq	171497(%rip), %rcx
1000399e7:	4c 89 34 d1	movq	%r14, (%rcx,%rdx,8)
1000399eb:	89 1c 90	movl	%ebx, (%rax,%rdx,4)
1000399ee:	48 ff c2	incq	%rdx
1000399f1:	48 89 15 d0 9d 02 00	movq	%rdx, 171472(%rip)
1000399f8:	5b	popq	%rbx
1000399f9:	41 5e	popq	%r14
1000399fb:	5d	popq	%rbp
1000399fc:	c3	retq
1000399fd:	48 8d 3d bc 9d 02 00	leaq	171452(%rip), %rdi
100039a04:	48 8d 15 0c 00 00 00	leaq	12(%rip), %rdx
100039a0b:	31 f6	xorl	%esi, %esi
100039a0d:	e8 2e 7f 00 00	callq	0x100041940 ## symbol stub for: _dispatch_once_f
100039a12:	e9 5d ff ff ff	jmp	0x100039974
100039a17:	55	pushq	%rbp
100039a18:	48 89 e5	movq	%rsp, %rbp
100039a1b:	8b 3d 4f 8d 02 00	movl	167247(%rip), %edi
100039a21:	31 f6	xorl	%esi, %esi
100039a23:	e8 1c 01 00 00	callq	0x100039b44
100039a28:	b8 08 00 00 00	movl	$8, %eax
100039a2d:	48 f7 25 f4 8b 02 00	mulq	166900(%rip)
100039a34:	70 6b	jo	0x100039aa1
100039a36:	48 89 c7	movq	%rax, %rdi
100039a39:	e8 a7 3a fd ff	callq	0x10000d4e5
100039a3e:	48 89 05 8b 9d 02 00	movq	%rax, 171403(%rip)
100039a45:	b8 04 00 00 00	movl	$4, %eax
100039a4a:	48 f7 25 d7 8b 02 00	mulq	166871(%rip)
100039a51:	70 4e	jo	0x100039aa1
100039a53:	48 89 c7	movq	%rax, %rdi
100039a56:	e8 8a 3a fd ff	callq	0x10000d4e5
100039a5b:	48 89 05 76 9d 02 00	movq	%rax, 171382(%rip)
100039a62:	b8 08 00 00 00	movl	$8, %eax
100039a67:	48 f7 25 c2 8b 02 00	mulq	166850(%rip)
100039a6e:	70 31	jo	0x100039aa1
100039a70:	48 89 c7	movq	%rax, %rdi
100039a73:	e8 6d 3a fd ff	callq	0x10000d4e5
100039a78:	48 89 05 69 9d 02 00	movq	%rax, 171369(%rip)
100039a7f:	48 8d 0d 73 3e 00 00	leaq	15987(%rip), %rcx
100039a86:	48 89 08	movq	%rcx, (%rax)
100039a89:	48 c7 05 4c 9d 02 00 01 00 00 00	movq	$1, 171340(%rip)
100039a94:	48 c7 05 51 9d 02 00 28 00 00 00	movq	$40, 171345(%rip)
100039a9f:	5d	popq	%rbp
100039aa0:	c3	retq
100039aa1:	0f 0b	ud2
100039aa3:	55	pushq	%rbp
100039aa4:	48 89 e5	movq	%rsp, %rbp
100039aa7:	41 56	pushq	%r14
100039aa9:	53	pushq	%rbx
100039aaa:	48 89 f3	movq	%rsi, %rbx
100039aad:	49 89 fe	movq	%rdi, %r14
100039ab0:	48 83 3d 08 9d 02 00 ff	cmpq	$-1, 171272(%rip)
100039ab8:	75 69	jne	0x100039b23
100039aba:	48 8b 15 1f 9d 02 00	movq	171295(%rip), %rdx
100039ac1:	48 3b 15 68 8b 02 00	cmpq	166760(%rip), %rdx
100039ac8:	75 2f	jne	0x100039af9
100039aca:	48 8d 34 d5 00 00 00 00	leaq	(,%rdx,8), %rsi
100039ad2:	48 c1 e2 04	shlq	$4, %rdx
100039ad6:	48 8b 3d 0b 9d 02 00	movq	171275(%rip), %rdi
100039add:	e8 4d 3a fd ff	callq	0x10000d52f
100039ae2:	48 d1 25 47 8b 02 00	shlq	166727(%rip)
100039ae9:	48 89 05 f8 9c 02 00	movq	%rax, 171256(%rip)
100039af0:	48 8b 15 e9 9c 02 00	movq	171241(%rip), %rdx
100039af7:	eb 07	jmp	0x100039b00
100039af9:	48 8b 05 e8 9c 02 00	movq	171240(%rip), %rax
100039b00:	4c 89 34 d0	movq	%r14, (%rax,%rdx,8)
100039b04:	48 ff c2	incq	%rdx
100039b07:	48 89 15 d2 9c 02 00	movq	%rdx, 171218(%rip)
100039b0e:	48 39 1d db 9c 02 00	cmpq	%rbx, 171227(%rip)
100039b15:	73 07	jae	0x100039b1e
100039b17:	48 89 1d d2 9c 02 00	movq	%rbx, 171218(%rip)
100039b1e:	5b	popq	%rbx
100039b1f:	41 5e	popq	%r14
100039b21:	5d	popq	%rbp
100039b22:	c3	retq
100039b23:	48 8d 3d 96 9c 02 00	leaq	171158(%rip), %rdi
100039b2a:	48 8d 15 e6 fe ff ff	leaq	-282(%rip), %rdx
100039b31:	31 f6	xorl	%esi, %esi
100039b33:	e8 08 7e 00 00	callq	0x100041940 ## symbol stub for: _dispatch_once_f
100039b38:	eb 80	jmp	0x100039aba
100039b3a:	55	pushq	%rbp
100039b3b:	48 89 e5	movq	%rsp, %rbp
100039b3e:	5d	popq	%rbp
100039b3f:	e9 00 00 00 00	jmp	0x100039b44
100039b44:	55	pushq	%rbp
100039b45:	48 89 e5	movq	%rsp, %rbp
100039b48:	41 57	pushq	%r15
100039b4a:	41 56	pushq	%r14
100039b4c:	53	pushq	%rbx
100039b4d:	50	pushq	%rax
100039b4e:	49 89 f7	movq	%rsi, %r15
100039b51:	41 89 fe	movl	%edi, %r14d
100039b54:	bf 30 00 00 00	movl	$48, %edi
100039b59:	e8 87 39 fd ff	callq	0x10000d4e5
100039b5e:	48 89 c3	movq	%rax, %rbx
100039b61:	44 89 70 10	movl	%r14d, 16(%rax)
100039b65:	c6 40 28 00	movb	$0, 40(%rax)
100039b69:	4c 89 78 20	movq	%r15, 32(%rax)
100039b6d:	e8 88 49 fd ff	callq	0x10000e4fa
100039b72:	48 8d 3d e5 8a 01 00	leaq	101093(%rip), %rdi ## literal pool for: "server"
100039b79:	48 8d 0d 6a 0c 00 00	leaq	3178(%rip), %rcx
100039b80:	48 89 c6	movq	%rax, %rsi
100039b83:	48 89 da	movq	%rbx, %rdx
100039b86:	e8 9d 7d 00 00	callq	0x100041928 ## symbol stub for: _dispatch_mach_create_f
100039b8b:	48 89 43 18	movq	%rax, 24(%rbx)
100039b8f:	44 39 35 da 8b 02 00	cmpl	%r14d, 166874(%rip)
100039b96:	75 07	jne	0x100039b9f
100039b98:	48 89 05 19 9e 02 00	movq	%rax, 171545(%rip)
100039b9f:	44 89 f7	movl	%r14d, %edi
100039ba2:	e8 76 01 fd ff	callq	0x100009d1d
100039ba7:	85 c0	testl	%eax, %eax
100039ba9:	75 22	jne	0x100039bcd
100039bab:	48 89 df	movq	%rbx, %rdi
100039bae:	e8 d5 02 00 00	callq	0x100039e88
100039bb3:	48 8b 7b 18	movq	24(%rbx), %rdi
100039bb7:	44 89 f6	movl	%r14d, %esi
100039bba:	31 d2	xorl	%edx, %edx
100039bbc:	31 c9	xorl	%ecx, %ecx
100039bbe:	48 83 c4 08	addq	$8, %rsp
100039bc2:	5b	popq	%rbx
100039bc3:	41 5e	popq	%r14
100039bc5:	41 5f	popq	%r15
100039bc7:	5d	popq	%rbp
100039bc8:	e9 55 7d 00 00	jmp	0x100041922 ## symbol stub for: _dispatch_mach_connect
100039bcd:	48 63 f8	movslq	%eax, %rdi
100039bd0:	e8 cd 7b 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039bd5:	eb d4	jmp	0x100039bab
100039bd7:	55	pushq	%rbp
100039bd8:	48 89 e5	movq	%rsp, %rbp
100039bdb:	53	pushq	%rbx
100039bdc:	50	pushq	%rax
100039bdd:	31 f6	xorl	%esi, %esi
100039bdf:	e8 7e fc ff ff	callq	0x100039862
100039be4:	48 85 c0	testq	%rax, %rax
100039be7:	74 1a	je	0x100039c03
100039be9:	48 89 c3	movq	%rax, %rbx
100039bec:	48 8b 78 18	movq	24(%rax), %rdi
100039bf0:	e8 27 7d 00 00	callq	0x10004191c ## symbol stub for: _dispatch_mach_cancel
100039bf5:	48 89 df	movq	%rbx, %rdi
100039bf8:	48 83 c4 08	addq	$8, %rsp
100039bfc:	5b	popq	%rbx
100039bfd:	5d	popq	%rbp
100039bfe:	e9 b3 01 00 00	jmp	0x100039db6
100039c03:	48 8d 3d df 8a 01 00	leaq	101087(%rip), %rdi ## literal pool for: "attempt to remove non-existent server port"
100039c0a:	31 c0	xorl	%eax, %eax
100039c0c:	e8 01 a8 ff ff	callq	0x100034412
100039c11:	55	pushq	%rbp
100039c12:	48 89 e5	movq	%rsp, %rbp
100039c15:	41 57	pushq	%r15
100039c17:	41 56	pushq	%r14
100039c19:	41 55	pushq	%r13
100039c1b:	41 54	pushq	%r12
100039c1d:	53	pushq	%rbx
100039c1e:	48 83 ec 68	subq	$104, %rsp
100039c22:	83 fe 45	cmpl	$69, %esi
100039c25:	0f 85 3d 01 00 00	jne	0x100039d68
100039c2b:	49 89 d4	movq	%rdx, %r12
100039c2e:	41 89 ff	movl	%edi, %r15d
100039c31:	bf 30 00 00 00	movl	$48, %edi
100039c36:	e8 aa 38 fd ff	callq	0x10000d4e5
100039c3b:	49 89 c6	movq	%rax, %r14
100039c3e:	44 89 78 10	movl	%r15d, 16(%rax)
100039c42:	c6 40 28 01	movb	$1, 40(%rax)
100039c46:	e8 af 48 fd ff	callq	0x10000e4fa
100039c4b:	48 8b 3d ee e3 01 00	movq	123886(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_data_add
100039c52:	31 f6	xorl	%esi, %esi
100039c54:	31 d2	xorl	%edx, %edx
100039c56:	48 89 c1	movq	%rax, %rcx
100039c59:	e8 24 7d 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
100039c5e:	48 89 c3	movq	%rax, %rbx
100039c61:	48 89 c7	movq	%rax, %rdi
100039c64:	4c 89 f6	movq	%r14, %rsi
100039c67:	e8 0a 7d 00 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
100039c6c:	4c 8b 2d a5 e3 01 00	movq	123813(%rip), %r13 ## literal pool symbol address: __NSConcreteStackBlock
100039c73:	48 8d b5 78 ff ff ff	leaq	-136(%rbp), %rsi
100039c7a:	4c 89 2e	movq	%r13, (%rsi)
100039c7d:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
100039c85:	48 8d 05 e1 00 00 00	leaq	225(%rip), %rax
100039c8c:	48 89 46 10	movq	%rax, 16(%rsi)
100039c90:	48 8d 05 09 1c 02 00	leaq	138249(%rip), %rax
100039c97:	48 89 46 18	movq	%rax, 24(%rsi)
100039c9b:	48 89 5e 28	movq	%rbx, 40(%rsi)
100039c9f:	4c 89 66 20	movq	%r12, 32(%rsi)
100039ca3:	48 89 df	movq	%rbx, %rdi
100039ca6:	e8 f5 7c 00 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
100039cab:	48 8d 75 a8	leaq	-88(%rbp), %rsi
100039caf:	4c 89 2e	movq	%r13, (%rsi)
100039cb2:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100039cba:	48 8d 05 54 01 00 00	leaq	340(%rip), %rax
100039cc1:	48 89 46 10	movq	%rax, 16(%rsi)
100039cc5:	48 8d 05 04 1c 02 00	leaq	138244(%rip), %rax
100039ccc:	48 89 46 18	movq	%rax, 24(%rsi)
100039cd0:	48 89 5e 20	movq	%rbx, 32(%rsi)
100039cd4:	48 89 df	movq	%rbx, %rdi
100039cd7:	e8 d0 7c 00 00	callq	0x1000419ac ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler
100039cdc:	48 89 df	movq	%rbx, %rdi
100039cdf:	e8 de 7b 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
100039ce4:	44 89 ff	movl	%r15d, %edi
100039ce7:	e8 e4 ff fc ff	callq	0x100009cd0
100039cec:	85 c0	testl	%eax, %eax
100039cee:	75 64	jne	0x100039d54
100039cf0:	4c 8d 65 d4	leaq	-44(%rbp), %r12
100039cf4:	41 c7 04 24 00 00 00 00	movl	$0, (%r12)
100039cfc:	8b 35 6e 8a 02 00	movl	166510(%rip), %esi
100039d02:	44 89 ff	movl	%r15d, %edi
100039d05:	4c 89 e2	movq	%r12, %rdx
100039d08:	e8 7a 00 fd ff	callq	0x100009d87
100039d0d:	41 89 c7	movl	%eax, %r15d
100039d10:	41 83 3c 24 00	cmpl	$0, (%r12)
100039d15:	74 1f	je	0x100039d36
100039d17:	48 8d 35 66 88 01 00	leaq	100454(%rip), %rsi ## literal pool for: "Attempt to share port-destroyed. Ignoring."
100039d1e:	bf 04 00 00 00	movl	$4, %edi
100039d23:	31 c0	xorl	%eax, %eax
100039d25:	e8 9e b8 ff ff	callq	0x1000355c8
100039d2a:	8b 7d d4	movl	-44(%rbp), %edi
100039d2d:	e8 07 00 fd ff	callq	0x100009d39
100039d32:	85 c0	testl	%eax, %eax
100039d34:	75 28	jne	0x100039d5e
100039d36:	49 89 5e 18	movq	%rbx, 24(%r14)
100039d3a:	4c 89 f7	movq	%r14, %rdi
100039d3d:	e8 46 01 00 00	callq	0x100039e88
100039d42:	44 89 f8	movl	%r15d, %eax
100039d45:	48 83 c4 68	addq	$104, %rsp
100039d49:	5b	popq	%rbx
100039d4a:	41 5c	popq	%r12
100039d4c:	41 5d	popq	%r13
100039d4e:	41 5e	popq	%r14
100039d50:	41 5f	popq	%r15
100039d52:	5d	popq	%rbp
100039d53:	c3	retq
100039d54:	48 63 f8	movslq	%eax, %rdi
100039d57:	e8 46 7a 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039d5c:	eb 92	jmp	0x100039cf0
100039d5e:	48 63 f8	movslq	%eax, %rdi
100039d61:	e8 3c 7a 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039d66:	eb ce	jmp	0x100039d36
100039d68:	e8 be 77 00 00	callq	0x10004152b
100039d6d:	55	pushq	%rbp
100039d6e:	48 89 e5	movq	%rsp, %rbp
100039d71:	41 57	pushq	%r15
100039d73:	41 56	pushq	%r14
100039d75:	53	pushq	%rbx
100039d76:	50	pushq	%rax
100039d77:	49 89 ff	movq	%rdi, %r15
100039d7a:	48 8b 5f 28	movq	40(%rdi), %rbx
100039d7e:	48 89 df	movq	%rbx, %rdi
100039d81:	e8 6c 7b 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
100039d86:	48 3b 58 18	cmpq	24(%rax), %rbx
100039d8a:	75 25	jne	0x100039db1
100039d8c:	49 89 c6	movq	%rax, %r14
100039d8f:	49 8b 7f 20	movq	32(%r15), %rdi
100039d93:	ff 57 10	callq	*16(%rdi)
100039d96:	49 8b 7f 28	movq	40(%r15), %rdi
100039d9a:	e8 dd 7b 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100039d9f:	4c 89 f7	movq	%r14, %rdi
100039da2:	48 83 c4 08	addq	$8, %rsp
100039da6:	5b	popq	%rbx
100039da7:	41 5e	popq	%r14
100039da9:	41 5f	popq	%r15
100039dab:	5d	popq	%rbp
100039dac:	e9 05 00 00 00	jmp	0x100039db6
100039db1:	e8 8a 77 00 00	callq	0x100041540
100039db6:	55	pushq	%rbp
100039db7:	48 89 e5	movq	%rsp, %rbp
100039dba:	48 8b 07	movq	(%rdi), %rax
100039dbd:	48 83 f8 ff	cmpq	$-1, %rax
100039dc1:	74 0b	je	0x100039dce
100039dc3:	48 85 c0	testq	%rax, %rax
100039dc6:	74 14	je	0x100039ddc
100039dc8:	48 8b 4f 08	movq	8(%rdi), %rcx
100039dcc:	eb 0a	jmp	0x100039dd8
100039dce:	48 8b 4f 08	movq	8(%rdi), %rcx
100039dd2:	48 83 f9 ff	cmpq	$-1, %rcx
100039dd6:	74 15	je	0x100039ded
100039dd8:	48 89 48 08	movq	%rcx, 8(%rax)
100039ddc:	48 8b 4f 08	movq	8(%rdi), %rcx
100039de0:	48 89 01	movq	%rax, (%rcx)
100039de3:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
100039de7:	f3 0f 7f 07	movdqu	%xmm0, (%rdi)
100039deb:	5d	popq	%rbp
100039dec:	c3	retq
100039ded:	48 8d 3d 20 89 01 00	leaq	100640(%rip), %rdi ## literal pool for: "multiple removals of port entry"
100039df4:	31 c0	xorl	%eax, %eax
100039df6:	e8 17 a6 ff ff	callq	0x100034412
100039dfb:	90	nop
100039dfc:	90	nop
100039dfd:	90	nop
100039dfe:	90	nop
100039dff:	90	nop
100039e00:	90	nop
100039e01:	90	nop
100039e02:	55	pushq	%rbp
100039e03:	48 89 e5	movq	%rsp, %rbp
100039e06:	48 8b 7f 20	movq	32(%rdi), %rdi
100039e0a:	be 07 00 00 00	movl	$7, %esi
100039e0f:	5d	popq	%rbp
100039e10:	e9 1b 79 00 00	jmp	0x100041730 ## symbol stub for: __Block_object_dispose
100039e15:	55	pushq	%rbp
100039e16:	48 89 e5	movq	%rsp, %rbp
100039e19:	41 57	pushq	%r15
100039e1b:	41 56	pushq	%r14
100039e1d:	53	pushq	%rbx
100039e1e:	50	pushq	%rax
100039e1f:	49 89 fe	movq	%rdi, %r14
100039e22:	48 8b 5f 20	movq	32(%rdi), %rbx
100039e26:	48 89 df	movq	%rbx, %rdi
100039e29:	e8 c4 7a 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
100039e2e:	48 3b 58 18	cmpq	24(%rax), %rbx
100039e32:	75 4f	jne	0x100039e83
100039e34:	49 89 c7	movq	%rax, %r15
100039e37:	8b 50 10	movl	16(%rax), %edx
100039e3a:	f6 40 29 01	testb	$1, 41(%rax)
100039e3e:	75 15	jne	0x100039e55
100039e40:	89 d7	movl	%edx, %edi
100039e42:	e8 f2 fe fc ff	callq	0x100009d39
100039e47:	85 c0	testl	%eax, %eax
100039e49:	74 1d	je	0x100039e68
100039e4b:	48 63 f8	movslq	%eax, %rdi
100039e4e:	e8 4f 79 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100039e53:	eb 13	jmp	0x100039e68
100039e55:	48 8d 35 f2 86 01 00	leaq	100082(%rip), %rsi ## literal pool for: "Abandoning send right to 0x%x (canceled notification)"
100039e5c:	bf 04 00 00 00	movl	$4, %edi
100039e61:	31 c0	xorl	%eax, %eax
100039e63:	e8 60 b7 ff ff	callq	0x1000355c8
100039e68:	49 8b 7e 20	movq	32(%r14), %rdi
100039e6c:	e8 e7 7a 00 00	callq	0x100041958 ## symbol stub for: _dispatch_release
100039e71:	4c 89 ff	movq	%r15, %rdi
100039e74:	48 83 c4 08	addq	$8, %rsp
100039e78:	5b	popq	%rbx
100039e79:	41 5e	popq	%r14
100039e7b:	41 5f	popq	%r15
100039e7d:	5d	popq	%rbp
100039e7e:	e9 ad 7b 00 00	jmp	0x100041a30 ## symbol stub for: _free
100039e83:	e8 cd 76 00 00	callq	0x100041555
100039e88:	55	pushq	%rbp
100039e89:	48 89 e5	movq	%rsp, %rbp
100039e8c:	53	pushq	%rbx
100039e8d:	50	pushq	%rax
100039e8e:	48 89 fb	movq	%rdi, %rbx
100039e91:	8b 47 10	movl	16(%rdi), %eax
100039e94:	48 8d 7d f4	leaq	-12(%rbp), %rdi
100039e98:	89 07	movl	%eax, (%rdi)
100039e9a:	be 04 00 00 00	movl	$4, %esi
100039e9f:	e8 d5 54 fd ff	callq	0x10000f379
100039ea4:	48 89 c1	movq	%rax, %rcx
100039ea7:	48 ba 53 13 8c b7 b2 cf 21 35	movabsq	$3828569524732171091, %rdx
100039eb1:	48 f7 e2	mulq	%rdx
100039eb4:	48 89 c8	movq	%rcx, %rax
100039eb7:	48 29 d0	subq	%rdx, %rax
100039eba:	48 d1 e8	shrq	%rax
100039ebd:	48 01 d0	addq	%rdx, %rax
100039ec0:	48 c1 e8 05	shrq	$5, %rax
100039ec4:	48 6b c0 35	imulq	$53, %rax, %rax
100039ec8:	48 29 c1	subq	%rax, %rcx
100039ecb:	48 8d 05 3e 99 02 00	leaq	170302(%rip), %rax
100039ed2:	48 8d 04 c8	leaq	(%rax,%rcx,8), %rax
100039ed6:	48 8b 08	movq	(%rax), %rcx
100039ed9:	48 89 0b	movq	%rcx, (%rbx)
100039edc:	48 85 c9	testq	%rcx, %rcx
100039edf:	74 04	je	0x100039ee5
100039ee1:	48 89 59 08	movq	%rbx, 8(%rcx)
100039ee5:	48 89 18	movq	%rbx, (%rax)
100039ee8:	48 89 43 08	movq	%rax, 8(%rbx)
100039eec:	48 83 c4 08	addq	$8, %rsp
100039ef0:	5b	popq	%rbx
100039ef1:	5d	popq	%rbp
100039ef2:	c3	retq
100039ef3:	55	pushq	%rbp
100039ef4:	48 89 e5	movq	%rsp, %rbp
100039ef7:	53	pushq	%rbx
100039ef8:	50	pushq	%rax
100039ef9:	be 01 00 00 00	movl	$1, %esi
100039efe:	e8 5f f9 ff ff	callq	0x100039862
100039f03:	48 85 c0	testq	%rax, %rax
100039f06:	74 1e	je	0x100039f26
100039f08:	48 89 c3	movq	%rax, %rbx
100039f0b:	48 8b 78 18	movq	24(%rax), %rdi
100039f0f:	e8 68 7a 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
100039f14:	80 4b 29 01	orb	$1, 41(%rbx)
100039f18:	48 89 df	movq	%rbx, %rdi
100039f1b:	48 83 c4 08	addq	$8, %rsp
100039f1f:	5b	popq	%rbx
100039f20:	5d	popq	%rbp
100039f21:	e9 90 fe ff ff	jmp	0x100039db6
100039f26:	48 8d 3d 82 86 01 00	leaq	99970(%rip), %rdi ## literal pool for: "attempt to cancel notification on non-existent port entry"
100039f2d:	31 c0	xorl	%eax, %eax
100039f2f:	e8 de a4 ff ff	callq	0x100034412
100039f34:	55	pushq	%rbp
100039f35:	48 89 e5	movq	%rsp, %rbp
100039f38:	41 56	pushq	%r14
100039f3a:	53	pushq	%rbx
100039f3b:	48 89 f3	movq	%rsi, %rbx
100039f3e:	89 fa	movl	%edi, %edx
100039f40:	48 89 f7	movq	%rsi, %rdi
100039f43:	31 f6	xorl	%esi, %esi
100039f45:	e8 9d 89 fd ff	callq	0x1000128e7
100039f4a:	49 89 c6	movq	%rax, %r14
100039f4d:	48 8d 35 95 86 01 00	leaq	99989(%rip), %rsi ## literal pool for: "dispatching request"
100039f54:	48 89 df	movq	%rbx, %rdi
100039f57:	e8 1b 00 00 00	callq	0x100039f77
100039f5c:	e8 99 45 fd ff	callq	0x10000e4fa
100039f61:	48 8d 15 ec 00 00 00	leaq	236(%rip), %rdx
100039f68:	48 89 c7	movq	%rax, %rdi
100039f6b:	4c 89 f6	movq	%r14, %rsi
100039f6e:	5b	popq	%rbx
100039f6f:	41 5e	popq	%r14
100039f71:	5d	popq	%rbp
100039f72:	e9 69 79 00 00	jmp	0x1000418e0 ## symbol stub for: _dispatch_async_f
100039f77:	55	pushq	%rbp
100039f78:	48 89 e5	movq	%rsp, %rbp
100039f7b:	41 57	pushq	%r15
100039f7d:	41 56	pushq	%r14
100039f7f:	41 55	pushq	%r13
100039f81:	41 54	pushq	%r12
100039f83:	53	pushq	%rbx
100039f84:	48 83 ec 78	subq	$120, %rsp
100039f88:	48 8b 05 99 e0 01 00	movq	123033(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100039f8f:	48 8b 00	movq	(%rax), %rax
100039f92:	48 89 45 d0	movq	%rax, -48(%rbp)
100039f96:	0f 57 c0	xorps	%xmm0, %xmm0
100039f99:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100039f9d:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100039fa4:	0f 28 05 d5 92 00 00	movaps	37589(%rip), %xmm0
100039fab:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100039faf:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100039fb3:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100039fb7:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100039fbb:	48 8d 05 4a 88 02 00	leaq	165962(%rip), %rax
100039fc2:	80 38 00	cmpb	$0, (%rax)
100039fc5:	74 69	je	0x10003a030
100039fc7:	49 89 f7	movq	%rsi, %r15
100039fca:	48 89 fb	movq	%rdi, %rbx
100039fcd:	48 8d 35 60 87 01 00	leaq	100192(%rip), %rsi ## literal pool for: "subsystem"
100039fd4:	e8 87 80 00 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100039fd9:	49 89 c6	movq	%rax, %r14
100039fdc:	48 8d 35 5b 87 01 00	leaq	100187(%rip), %rsi ## literal pool for: "routine"
100039fe3:	48 89 df	movq	%rbx, %rdi
100039fe6:	e8 75 80 00 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
100039feb:	49 89 c4	movq	%rax, %r12
100039fee:	4c 8d ad 70 ff ff ff	leaq	-144(%rbp), %r13
100039ff5:	48 89 df	movq	%rbx, %rdi
100039ff8:	4c 89 ee	movq	%r13, %rsi
100039ffb:	e8 30 80 00 00	callq	0x100042030 ## symbol stub for: _xpc_dictionary_get_audit_token
10003a000:	48 8d 75 90	leaq	-112(%rbp), %rsi
10003a004:	4c 89 ef	movq	%r13, %rdi
10003a007:	e8 51 a8 ff ff	callq	0x10003485d
10003a00c:	41 8b 4d 14	movl	20(%r13), %ecx
10003a010:	4c 89 3c 24	movq	%r15, (%rsp)
10003a014:	48 8d 35 2b 87 01 00	leaq	100139(%rip), %rsi ## literal pool for: "ipc: caller = %s.%d, subsystem = %d, routine = %d, %s"
10003a01b:	bf 05 00 00 00	movl	$5, %edi
10003a020:	48 89 c2	movq	%rax, %rdx
10003a023:	45 89 f0	movl	%r14d, %r8d
10003a026:	45 89 e1	movl	%r12d, %r9d
10003a029:	31 c0	xorl	%eax, %eax
10003a02b:	e8 98 b5 ff ff	callq	0x1000355c8
10003a030:	48 8b 05 f1 df 01 00	movq	122865(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a037:	48 8b 00	movq	(%rax), %rax
10003a03a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003a03e:	75 0f	jne	0x10003a04f
10003a040:	48 83 c4 78	addq	$120, %rsp
10003a044:	5b	popq	%rbx
10003a045:	41 5c	popq	%r12
10003a047:	41 5d	popq	%r13
10003a049:	41 5e	popq	%r14
10003a04b:	41 5f	popq	%r15
10003a04d:	5d	popq	%rbp
10003a04e:	c3	retq
10003a04f:	e8 1e 77 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003a054:	55	pushq	%rbp
10003a055:	48 89 e5	movq	%rsp, %rbp
10003a058:	41 57	pushq	%r15
10003a05a:	41 56	pushq	%r14
10003a05c:	53	pushq	%rbx
10003a05d:	50	pushq	%rax
10003a05e:	48 89 fb	movq	%rdi, %rbx
10003a061:	4c 8b 37	movq	(%rdi), %r14
10003a064:	44 8b 7f 10	movl	16(%rdi), %r15d
10003a068:	44 89 ff	movl	%r15d, %edi
10003a06b:	31 f6	xorl	%esi, %esi
10003a06d:	e8 f0 f7 ff ff	callq	0x100039862
10003a072:	48 85 c0	testq	%rax, %rax
10003a075:	74 0b	je	0x10003a082
10003a077:	48 8b 40 20	movq	32(%rax), %rax
10003a07b:	48 89 05 2e 97 02 00	movq	%rax, 169774(%rip)
10003a082:	48 8d 35 f3 86 01 00	leaq	100083(%rip), %rsi ## literal pool for: "processing dispatched request"
10003a089:	4c 89 f7	movq	%r14, %rdi
10003a08c:	e8 e6 fe ff ff	callq	0x100039f77
10003a091:	44 89 ff	movl	%r15d, %edi
10003a094:	4c 89 f6	movq	%r14, %rsi
10003a097:	e8 2e 01 00 00	callq	0x10003a1ca
10003a09c:	48 c7 05 09 97 02 00 00 00 00 00	movq	$0, 169737(%rip)
10003a0a7:	48 89 df	movq	%rbx, %rdi
10003a0aa:	48 83 c4 08	addq	$8, %rsp
10003a0ae:	5b	popq	%rbx
10003a0af:	41 5e	popq	%r14
10003a0b1:	41 5f	popq	%r15
10003a0b3:	5d	popq	%rbp
10003a0b4:	e9 a3 88 fd ff	jmp	0x10001295c
10003a0b9:	55	pushq	%rbp
10003a0ba:	48 89 e5	movq	%rsp, %rbp
10003a0bd:	41 57	pushq	%r15
10003a0bf:	41 56	pushq	%r14
10003a0c1:	41 55	pushq	%r13
10003a0c3:	41 54	pushq	%r12
10003a0c5:	53	pushq	%rbx
10003a0c6:	48 81 ec d8 08 00 00	subq	$2264, %rsp
10003a0cd:	49 89 f7	movq	%rsi, %r15
10003a0d0:	49 89 fe	movq	%rdi, %r14
10003a0d3:	4c 8d ad 00 f7 ff ff	leaq	-2304(%rbp), %r13
10003a0da:	49 89 55 10	movq	%rdx, 16(%r13)
10003a0de:	49 89 4d 18	movq	%rcx, 24(%r13)
10003a0e2:	4d 89 45 20	movq	%r8, 32(%r13)
10003a0e6:	4d 89 4d 28	movq	%r9, 40(%r13)
10003a0ea:	84 c0	testb	%al, %al
10003a0ec:	74 38	je	0x10003a126
10003a0ee:	0f 29 85 30 f7 ff ff	movaps	%xmm0, -2256(%rbp)
10003a0f5:	0f 29 8d 40 f7 ff ff	movaps	%xmm1, -2240(%rbp)
10003a0fc:	0f 29 95 50 f7 ff ff	movaps	%xmm2, -2224(%rbp)
10003a103:	0f 29 9d 60 f7 ff ff	movaps	%xmm3, -2208(%rbp)
10003a10a:	0f 29 a5 70 f7 ff ff	movaps	%xmm4, -2192(%rbp)
10003a111:	0f 29 ad 80 f7 ff ff	movaps	%xmm5, -2176(%rbp)
10003a118:	0f 29 b5 90 f7 ff ff	movaps	%xmm6, -2160(%rbp)
10003a11f:	0f 29 bd a0 f7 ff ff	movaps	%xmm7, -2144(%rbp)
10003a126:	48 8b 05 fb de 01 00	movq	122619(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a12d:	48 8b 00	movq	(%rax), %rax
10003a130:	48 89 45 d0	movq	%rax, -48(%rbp)
10003a134:	48 b8 aa aa aa aa aa aa aa aa	movabsq	$-6148914691236517206, %rax
10003a13e:	48 8d 5d b0	leaq	-80(%rbp), %rbx
10003a142:	48 89 43 10	movq	%rax, 16(%rbx)
10003a146:	0f 28 05 33 91 00 00	movaps	37171(%rip), %xmm0
10003a14d:	0f 29 03	movaps	%xmm0, (%rbx)
10003a150:	4c 8d a5 b0 f7 ff ff	leaq	-2128(%rbp), %r12
10003a157:	ba 00 08 00 00	movl	$2048, %edx
10003a15c:	4c 89 e7	movq	%r12, %rdi
10003a15f:	be aa 00 00 00	movl	$170, %esi
10003a164:	e8 71 7a 00 00	callq	0x100041bda ## symbol stub for: _memset
10003a169:	48 b8 10 00 00 00 30 00 00 00	movabsq	$206158430224, %rax
10003a173:	48 89 03	movq	%rax, (%rbx)
10003a176:	48 8d 45 10	leaq	16(%rbp), %rax
10003a17a:	48 89 43 08	movq	%rax, 8(%rbx)
10003a17e:	4c 89 6b 10	movq	%r13, 16(%rbx)
10003a182:	be 00 08 00 00	movl	$2048, %esi
10003a187:	4c 89 e7	movq	%r12, %rdi
10003a18a:	4c 89 fa	movq	%r15, %rdx
10003a18d:	48 89 d9	movq	%rbx, %rcx
10003a190:	e8 7b 7d 00 00	callq	0x100041f10 ## symbol stub for: _vsnprintf
10003a195:	4c 89 f7	movq	%r14, %rdi
10003a198:	4c 89 e6	movq	%r12, %rsi
10003a19b:	e8 d7 fd ff ff	callq	0x100039f77
10003a1a0:	48 8b 05 81 de 01 00	movq	122497(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a1a7:	48 8b 00	movq	(%rax), %rax
10003a1aa:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003a1ae:	75 12	jne	0x10003a1c2
10003a1b0:	48 81 c4 d8 08 00 00	addq	$2264, %rsp
10003a1b7:	5b	popq	%rbx
10003a1b8:	41 5c	popq	%r12
10003a1ba:	41 5d	popq	%r13
10003a1bc:	41 5e	popq	%r14
10003a1be:	41 5f	popq	%r15
10003a1c0:	5d	popq	%rbp
10003a1c1:	c3	retq
10003a1c2:	e8 ab 75 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003a1c7:	90	nop
10003a1c8:	90	nop
10003a1c9:	90	nop
10003a1ca:	55	pushq	%rbp
10003a1cb:	48 89 e5	movq	%rsp, %rbp
10003a1ce:	41 57	pushq	%r15
10003a1d0:	41 56	pushq	%r14
10003a1d2:	53	pushq	%rbx
10003a1d3:	50	pushq	%rax
10003a1d4:	48 8b 05 4d de 01 00	movq	122445(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a1db:	48 8b 00	movq	(%rax), %rax
10003a1de:	48 89 45 e0	movq	%rax, -32(%rbp)
10003a1e2:	80 3d 1f 96 02 00 01	cmpb	$1, 169503(%rip)
10003a1e9:	0f 84 13 01 00 00	je	0x10003a302
10003a1ef:	49 89 f6	movq	%rsi, %r14
10003a1f2:	41 89 ff	movl	%edi, %r15d
10003a1f5:	31 f6	xorl	%esi, %esi
10003a1f7:	e8 66 f6 ff ff	callq	0x100039862
10003a1fc:	48 85 c0	testq	%rax, %rax
10003a1ff:	74 0b	je	0x10003a20c
10003a201:	48 8b 40 20	movq	32(%rax), %rax
10003a205:	48 89 05 a4 95 02 00	movq	%rax, 169380(%rip)
10003a20c:	48 8d 35 ea 83 01 00	leaq	99306(%rip), %rsi ## literal pool for: "mig-request"
10003a213:	4c 89 f7	movq	%r14, %rdi
10003a216:	e8 51 7e 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003a21b:	48 85 c0	testq	%rax, %rax
10003a21e:	0f 84 93 00 00 00	je	0x10003a2b7
10003a224:	48 89 c3	movq	%rax, %rbx
10003a227:	48 89 c7	movq	%rax, %rdi
10003a22a:	e8 97 7e 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003a22f:	48 3b 05 ba de 01 00	cmpq	122554(%rip), %rax ## literal pool symbol address: __xpc_type_data
10003a236:	0f 85 88 00 00 00	jne	0x10003a2c4
10003a23c:	c6 05 3d 85 02 00 01	movb	$1, 165181(%rip)
10003a243:	48 89 df	movq	%rbx, %rdi
10003a246:	e8 a3 7d 00 00	callq	0x100041fee ## symbol stub for: _xpc_data_get_bytes_ptr
10003a24b:	49 89 c6	movq	%rax, %r14
10003a24e:	48 89 df	movq	%rbx, %rdi
10003a251:	e8 9e 7d 00 00	callq	0x100041ff4 ## symbol stub for: _xpc_data_get_length
10003a256:	48 83 f8 17	cmpq	$23, %rax
10003a25a:	0f 86 94 00 00 00	jbe	0x10003a2f4
10003a260:	4c 8b 3d 89 95 02 00	movq	169353(%rip), %r15
10003a267:	4c 89 f8	movq	%r15, %rax
10003a26a:	e8 b1 07 00 00	callq	0x10003aa20
10003a26f:	48 83 c0 0f	addq	$15, %rax
10003a273:	48 83 e0 f0	andq	$-16, %rax
10003a277:	48 29 c4	subq	%rax, %rsp
10003a27a:	48 89 e3	movq	%rsp, %rbx
10003a27d:	48 89 df	movq	%rbx, %rdi
10003a280:	be aa 00 00 00	movl	$170, %esi
10003a285:	4c 89 fa	movq	%r15, %rdx
10003a288:	e8 4d 79 00 00	callq	0x100041bda ## symbol stub for: _memset
10003a28d:	48 89 df	movq	%rbx, %rdi
10003a290:	4c 89 fe	movq	%r15, %rsi
10003a293:	e8 c2 74 00 00	callq	0x10004175a ## symbol stub for: ___bzero
10003a298:	48 8d 15 71 00 00 00	leaq	113(%rip), %rdx
10003a29f:	4c 89 f7	movq	%r14, %rdi
10003a2a2:	48 89 de	movq	%rbx, %rsi
10003a2a5:	e8 28 75 00 00	callq	0x1000417d2 ## symbol stub for: __xpc_pipe_handle_mig
10003a2aa:	85 c0	testl	%eax, %eax
10003a2ac:	75 3c	jne	0x10003a2ea
10003a2ae:	c6 05 cb 84 02 00 00	movb	$0, 165067(%rip)
10003a2b5:	eb 0d	jmp	0x10003a2c4
10003a2b7:	44 89 ff	movl	%r15d, %edi
10003a2ba:	31 f6	xorl	%esi, %esi
10003a2bc:	4c 89 f2	movq	%r14, %rdx
10003a2bf:	e8 cb 01 00 00	callq	0x10003a48f
10003a2c4:	48 c7 05 e1 94 02 00 00 00 00 00	movq	$0, 169185(%rip)
10003a2cf:	48 8b 05 52 dd 01 00	movq	122194(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a2d6:	48 8b 00	movq	(%rax), %rax
10003a2d9:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10003a2dd:	75 2c	jne	0x10003a30b
10003a2df:	48 8d 65 e8	leaq	-24(%rbp), %rsp
10003a2e3:	5b	popq	%rbx
10003a2e4:	41 5e	popq	%r14
10003a2e6:	41 5f	popq	%r15
10003a2e8:	5d	popq	%rbp
10003a2e9:	c3	retq
10003a2ea:	48 63 f8	movslq	%eax, %rdi
10003a2ed:	e8 b0 74 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003a2f2:	eb ba	jmp	0x10003a2ae
10003a2f4:	48 8d 3d 33 83 01 00	leaq	99123(%rip), %rdi ## literal pool for: "Message buffer was shorter than mach_msg_header"
10003a2fb:	31 c0	xorl	%eax, %eax
10003a2fd:	e8 10 a1 ff ff	callq	0x100034412
10003a302:	48 8d 3d 00 83 01 00	leaq	99072(%rip), %rdi ## literal pool for: "attempt to re-enter the server layer"
10003a309:	eb f0	jmp	0x10003a2fb
10003a30b:	e8 62 74 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003a310:	55	pushq	%rbp
10003a311:	48 89 e5	movq	%rsp, %rbp
10003a314:	41 57	pushq	%r15
10003a316:	41 56	pushq	%r14
10003a318:	41 55	pushq	%r13
10003a31a:	41 54	pushq	%r12
10003a31c:	53	pushq	%rbx
10003a31d:	48 83 ec 48	subq	$72, %rsp
10003a321:	49 89 f6	movq	%rsi, %r14
10003a324:	49 89 fd	movq	%rdi, %r13
10003a327:	48 8b 05 fa dc 01 00	movq	122106(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a32e:	48 8b 00	movq	(%rax), %rax
10003a331:	48 89 45 d0	movq	%rax, -48(%rbp)
10003a335:	e8 89 fa fc ff	callq	0x100009dc3
10003a33a:	49 89 c7	movq	%rax, %r15
10003a33d:	0f 10 00	movups	(%rax), %xmm0
10003a340:	0f 10 48 10	movups	16(%rax), %xmm1
10003a344:	0f 11 05 45 94 02 00	movups	%xmm0, 169029(%rip)
10003a34b:	0f 11 0d 4e 94 02 00	movups	%xmm1, 169038(%rip)
10003a352:	4c 89 2d 9f 94 02 00	movq	%r13, 169119(%rip)
10003a359:	41 8b 45 04	movl	4(%r13), %eax
10003a35d:	48 83 c0 03	addq	$3, %rax
10003a361:	48 83 e0 fc	andq	$-4, %rax
10003a365:	48 83 c0 34	addq	$52, %rax
10003a369:	48 89 05 90 94 02 00	movq	%rax, 169104(%rip)
10003a370:	48 83 3d 68 94 02 00 00	cmpq	$0, 169064(%rip)
10003a378:	74 26	je	0x10003a3a0
10003a37a:	31 db	xorl	%ebx, %ebx
10003a37c:	48 8b 05 65 94 02 00	movq	169061(%rip), %rax
10003a383:	4c 89 ef	movq	%r13, %rdi
10003a386:	4c 89 f6	movq	%r14, %rsi
10003a389:	ff 14 d8	callq	*(%rax,%rbx,8)
10003a38c:	85 c0	testl	%eax, %eax
10003a38e:	0f 85 be 00 00 00	jne	0x10003a452
10003a394:	48 ff c3	incq	%rbx
10003a397:	48 3b 1d 42 94 02 00	cmpq	169026(%rip), %rbx
10003a39e:	72 dc	jb	0x10003a37c
10003a3a0:	0f 28 05 d9 8e 00 00	movaps	36569(%rip), %xmm0
10003a3a7:	48 8d 75 90	leaq	-112(%rbp), %rsi
10003a3ab:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10003a3af:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10003a3b3:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003a3b7:	0f 29 06	movaps	%xmm0, (%rsi)
10003a3ba:	48 8d 3d cf 93 02 00	leaq	168911(%rip), %rdi
10003a3c1:	e8 97 a4 ff ff	callq	0x10003485d
10003a3c6:	49 89 c4	movq	%rax, %r12
10003a3c9:	41 8b 4f 14	movl	20(%r15), %ecx
10003a3cd:	45 8b 45 00	movl	(%r13), %r8d
10003a3d1:	45 8b 4d 04	movl	4(%r13), %r9d
10003a3d5:	45 8b 55 08	movl	8(%r13), %r10d
10003a3d9:	45 8b 5d 0c	movl	12(%r13), %r11d
10003a3dd:	41 8b 5d 14	movl	20(%r13), %ebx
10003a3e1:	48 83 ec 08	subq	$8, %rsp
10003a3e5:	48 8d 35 ae 83 01 00	leaq	99246(%rip), %rsi ## literal pool for: "%s.%d sent an invalid request: msgh_bits = 0x%x, msgh_size = %u, msgh_remote_port = 0x%x, msgh_local_port = 0x%x, msgh_id = 0x%x"
10003a3ec:	45 31 f6	xorl	%r14d, %r14d
10003a3ef:	bf 04 00 01 00	movl	$65540, %edi
10003a3f4:	48 89 c2	movq	%rax, %rdx
10003a3f7:	31 c0	xorl	%eax, %eax
10003a3f9:	53	pushq	%rbx
10003a3fa:	41 53	pushq	%r11
10003a3fc:	41 52	pushq	%r10
10003a3fe:	e8 c5 b1 ff ff	callq	0x1000355c8
10003a403:	48 83 c4 20	addq	$32, %rsp
10003a407:	48 8d 05 d7 83 02 00	leaq	164823(%rip), %rax
10003a40e:	80 38 00	cmpb	$0, (%rax)
10003a411:	74 45	je	0x10003a458
10003a413:	41 8b 4f 14	movl	20(%r15), %ecx
10003a417:	48 8d 35 fd 83 01 00	leaq	99325(%rip), %rsi ## literal pool for: "Killing sender of bogus IPC message: %s.%d"
10003a41e:	bf 05 00 01 00	movl	$65541, %edi
10003a423:	4c 89 e2	movq	%r12, %rdx
10003a426:	31 c0	xorl	%eax, %eax
10003a428:	e8 9b b1 ff ff	callq	0x1000355c8
10003a42d:	41 8b 7f 14	movl	20(%r15), %edi
10003a431:	48 8d 15 0e 84 01 00	leaq	99342(%rip), %rdx ## literal pool for: "unknown IPC"
10003a438:	be 02 00 00 00	movl	$2, %esi
10003a43d:	31 c9	xorl	%ecx, %ecx
10003a43f:	e8 75 ab ff ff	callq	0x100034fb9
10003a444:	85 c0	testl	%eax, %eax
10003a446:	74 10	je	0x10003a458
10003a448:	48 63 f8	movslq	%eax, %rdi
10003a44b:	e8 52 73 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003a450:	eb 06	jmp	0x10003a458
10003a452:	41 be 01 00 00 00	movl	$1, %r14d
10003a458:	31 c0	xorl	%eax, %eax
10003a45a:	48 89 05 97 93 02 00	movq	%rax, 168855(%rip)
10003a461:	48 89 05 98 93 02 00	movq	%rax, 168856(%rip)
10003a468:	48 8b 05 b9 db 01 00	movq	121785(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a46f:	48 8b 00	movq	(%rax), %rax
10003a472:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003a476:	75 12	jne	0x10003a48a
10003a478:	44 89 f0	movl	%r14d, %eax
10003a47b:	48 83 c4 48	addq	$72, %rsp
10003a47f:	5b	popq	%rbx
10003a480:	41 5c	popq	%r12
10003a482:	41 5d	popq	%r13
10003a484:	41 5e	popq	%r14
10003a486:	41 5f	popq	%r15
10003a488:	5d	popq	%rbp
10003a489:	c3	retq
10003a48a:	e8 e3 72 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003a48f:	55	pushq	%rbp
10003a490:	48 89 e5	movq	%rsp, %rbp
10003a493:	41 57	pushq	%r15
10003a495:	41 56	pushq	%r14
10003a497:	41 55	pushq	%r13
10003a499:	41 54	pushq	%r12
10003a49b:	53	pushq	%rbx
10003a49c:	48 83 ec 58	subq	$88, %rsp
10003a4a0:	48 8b 05 81 db 01 00	movq	121729(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a4a7:	48 8b 00	movq	(%rax), %rax
10003a4aa:	48 89 45 d0	movq	%rax, -48(%rbp)
10003a4ae:	80 3d 53 93 02 00 01	cmpb	$1, 168787(%rip)
10003a4b5:	0f 84 d1 02 00 00	je	0x10003a78c
10003a4bb:	49 89 d7	movq	%rdx, %r15
10003a4be:	41 89 f4	movl	%esi, %r12d
10003a4c1:	41 89 fe	movl	%edi, %r14d
10003a4c4:	c6 05 3d 93 02 00 01	movb	$1, 168765(%rip)
10003a4cb:	c6 05 e6 92 02 00 00	movb	$0, 168678(%rip)
10003a4d2:	48 8d 35 24 81 01 00	leaq	98596(%rip), %rsi ## literal pool for: "mig-request"
10003a4d9:	48 89 d7	movq	%rdx, %rdi
10003a4dc:	31 d2	xorl	%edx, %edx
10003a4de:	e8 cb 7b 00 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003a4e3:	48 c7 45 88 00 00 00 00	movq	$0, -120(%rbp)
10003a4eb:	0f 28 05 8e 8d 00 00	movaps	36238(%rip), %xmm0
10003a4f2:	48 8d 5d 90	leaq	-112(%rbp), %rbx
10003a4f6:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10003a4fa:	0f 29 03	movaps	%xmm0, (%rbx)
10003a4fd:	4c 89 ff	movq	%r15, %rdi
10003a500:	48 89 de	movq	%rbx, %rsi
10003a503:	e8 28 7b 00 00	callq	0x100042030 ## symbol stub for: _xpc_dictionary_get_audit_token
10003a508:	0f 28 03	movaps	(%rbx), %xmm0
10003a50b:	0f 28 4b 10	movaps	16(%rbx), %xmm1
10003a50f:	0f 11 0d 8a 92 02 00	movups	%xmm1, 168586(%rip)
10003a516:	0f 11 05 73 92 02 00	movups	%xmm0, 168563(%rip)
10003a51d:	45 85 e4	testl	%r12d, %r12d
10003a520:	74 5d	je	0x10003a57f
10003a522:	41 81 fc 4b 04 00 00	cmpl	$1099, %r12d
10003a529:	0f 87 ab 00 00 00	ja	0x10003a5da
10003a52f:	41 0f b7 c4	movzwl	%r12w, %eax
10003a533:	c1 e8 02	shrl	$2, %eax
10003a536:	69 c0 7b 14 00 00	imull	$5243, %eax, %eax
10003a53c:	c1 e8 11	shrl	$17, %eax
10003a53f:	b9 61 00 00 00	movl	$97, %ecx
10003a544:	48 0f a3 c1	btq	%rax, %rcx
10003a548:	0f 82 8c 00 00 00	jb	0x10003a5da
10003a54e:	48 8d 0d 2b 8e 00 00	leaq	36395(%rip), %rcx
10003a555:	44 8b 2c 81	movl	(%rcx,%rax,4), %r13d
10003a559:	49 63 d5	movslq	%r13d, %rdx
10003a55c:	48 8d 35 d1 81 01 00	leaq	98769(%rip), %rsi ## literal pool for: "subsystem"
10003a563:	4c 89 ff	movq	%r15, %rdi
10003a566:	e8 37 7b 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10003a56b:	44 89 e2	movl	%r12d, %edx
10003a56e:	48 8d 35 c9 81 01 00	leaq	98761(%rip), %rsi ## literal pool for: "routine"
10003a575:	4c 89 ff	movq	%r15, %rdi
10003a578:	e8 25 7b 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10003a57d:	eb 34	jmp	0x10003a5b3
10003a57f:	48 8d 35 ae 81 01 00	leaq	98734(%rip), %rsi ## literal pool for: "subsystem"
10003a586:	4c 89 ff	movq	%r15, %rdi
10003a589:	e8 d2 7a 00 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10003a58e:	49 89 c5	movq	%rax, %r13
10003a591:	45 85 ed	testl	%r13d, %r13d
10003a594:	74 44	je	0x10003a5da
10003a596:	41 83 fd 0b	cmpl	$11, %r13d
10003a59a:	7f 3e	jg	0x10003a5da
10003a59c:	48 8d 35 9b 81 01 00	leaq	98715(%rip), %rsi ## literal pool for: "routine"
10003a5a3:	4c 89 ff	movq	%r15, %rdi
10003a5a6:	e8 b5 7a 00 00	callq	0x100042060 ## symbol stub for: _xpc_dictionary_get_uint64
10003a5ab:	49 89 c4	movq	%rax, %r12
10003a5ae:	45 85 e4	testl	%r12d, %r12d
10003a5b1:	74 27	je	0x10003a5da
10003a5b3:	48 8b 05 0e 92 02 00	movq	168462(%rip), %rax
10003a5ba:	48 85 c0	testq	%rax, %rax
10003a5bd:	74 1b	je	0x10003a5da
10003a5bf:	48 8b 0d 12 92 02 00	movq	168466(%rip), %rcx
10003a5c6:	31 db	xorl	%ebx, %ebx
10003a5c8:	44 39 2c 99	cmpl	%r13d, (%rcx,%rbx,4)
10003a5cc:	0f 84 cf 00 00 00	je	0x10003a6a1
10003a5d2:	48 ff c3	incq	%rbx
10003a5d5:	48 39 d8	cmpq	%rbx, %rax
10003a5d8:	75 ee	jne	0x10003a5c8
10003a5da:	48 8d 75 90	leaq	-112(%rbp), %rsi
10003a5de:	0f 28 05 9b 8c 00 00	movaps	35995(%rip), %xmm0
10003a5e5:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10003a5e9:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10003a5ed:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003a5f1:	0f 29 06	movaps	%xmm0, (%rsi)
10003a5f4:	48 8d 3d 95 91 02 00	leaq	168341(%rip), %rdi
10003a5fb:	e8 5d a2 ff ff	callq	0x10003485d
10003a600:	48 89 c3	movq	%rax, %rbx
10003a603:	48 8d 35 9f 82 01 00	leaq	98975(%rip), %rsi ## literal pool for: "xpc demux failed"
10003a60a:	4c 89 ff	movq	%r15, %rdi
10003a60d:	e8 65 f9 ff ff	callq	0x100039f77
10003a612:	8b 0d 8c 91 02 00	movl	168332(%rip), %ecx
10003a618:	48 8d 35 9b 82 01 00	leaq	98971(%rip), %rsi ## literal pool for: "%s.%d sent an invalid request"
10003a61f:	bf 05 00 01 00	movl	$65541, %edi
10003a624:	48 89 da	movq	%rbx, %rdx
10003a627:	31 c0	xorl	%eax, %eax
10003a629:	e8 9a af ff ff	callq	0x1000355c8
10003a62e:	48 8d 05 b0 81 02 00	leaq	164272(%rip), %rax
10003a635:	80 38 00	cmpb	$0, (%rax)
10003a638:	74 3d	je	0x10003a677
10003a63a:	8b 0d 64 91 02 00	movl	168292(%rip), %ecx
10003a640:	48 8d 35 d4 81 01 00	leaq	98772(%rip), %rsi ## literal pool for: "Killing sender of bogus IPC message: %s.%d"
10003a647:	bf 05 00 01 00	movl	$65541, %edi
10003a64c:	48 89 da	movq	%rbx, %rdx
10003a64f:	31 c0	xorl	%eax, %eax
10003a651:	e8 72 af ff ff	callq	0x1000355c8
10003a656:	8b 3d 48 91 02 00	movl	168264(%rip), %edi
10003a65c:	48 8d 15 e3 81 01 00	leaq	98787(%rip), %rdx ## literal pool for: "unknown IPC"
10003a663:	be 02 00 00 00	movl	$2, %esi
10003a668:	31 c9	xorl	%ecx, %ecx
10003a66a:	e8 4a a9 ff ff	callq	0x100034fb9
10003a66f:	85 c0	testl	%eax, %eax
10003a671:	0f 85 fe 00 00 00	jne	0x10003a775
10003a677:	c6 05 8a 91 02 00 00	movb	$0, 168330(%rip)
10003a67e:	48 8b 05 a3 d9 01 00	movq	121251(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a685:	48 8b 00	movq	(%rax), %rax
10003a688:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003a68c:	0f 85 08 01 00 00	jne	0x10003a79a
10003a692:	48 83 c4 58	addq	$88, %rsp
10003a696:	5b	popq	%rbx
10003a697:	41 5c	popq	%r12
10003a699:	41 5d	popq	%r13
10003a69b:	41 5e	popq	%r14
10003a69d:	41 5f	popq	%r15
10003a69f:	5d	popq	%rbp
10003a6a0:	c3	retq
10003a6a1:	48 8b 05 28 91 02 00	movq	168232(%rip), %rax
10003a6a8:	48 8d 4d 88	leaq	-120(%rbp), %rcx
10003a6ac:	44 89 f7	movl	%r14d, %edi
10003a6af:	44 89 e6	movl	%r12d, %esi
10003a6b2:	4c 89 fa	movq	%r15, %rdx
10003a6b5:	ff 14 d8	callq	*(%rax,%rbx,8)
10003a6b8:	85 c0	testl	%eax, %eax
10003a6ba:	74 3b	je	0x10003a6f7
10003a6bc:	89 c3	movl	%eax, %ebx
10003a6be:	48 8d 35 13 82 01 00	leaq	98835(%rip), %rsi ## literal pool for: "demux error = %d"
10003a6c5:	4c 89 ff	movq	%r15, %rdi
10003a6c8:	89 c2	movl	%eax, %edx
10003a6ca:	31 c0	xorl	%eax, %eax
10003a6cc:	e8 e8 f9 ff ff	callq	0x10003a0b9
10003a6d1:	4c 89 ff	movq	%r15, %rdi
10003a6d4:	e8 45 79 00 00	callq	0x10004201e ## symbol stub for: _xpc_dictionary_create_reply
10003a6d9:	48 85 c0	testq	%rax, %rax
10003a6dc:	74 19	je	0x10003a6f7
10003a6de:	49 89 c6	movq	%rax, %r14
10003a6e1:	48 63 d3	movslq	%ebx, %rdx
10003a6e4:	48 8d 35 8c 08 01 00	leaq	67724(%rip), %rsi ## literal pool for: "error"
10003a6eb:	48 89 c7	movq	%rax, %rdi
10003a6ee:	e8 91 79 00 00	callq	0x100042084 ## symbol stub for: _xpc_dictionary_set_int64
10003a6f3:	4c 89 75 88	movq	%r14, -120(%rbp)
10003a6f7:	48 8d 35 75 81 01 00	leaq	98677(%rip), %rsi ## literal pool for: "xpc demux succeeded"
10003a6fe:	4c 89 ff	movq	%r15, %rdi
10003a701:	e8 71 f8 ff ff	callq	0x100039f77
10003a706:	48 83 7d 88 00	cmpq	$0, -120(%rbp)
10003a70b:	0f 84 66 ff ff ff	je	0x10003a677
10003a711:	48 8d 35 6f 81 01 00	leaq	98671(%rip), %rsi ## literal pool for: "sending reply"
10003a718:	4c 89 ff	movq	%r15, %rdi
10003a71b:	e8 57 f8 ff ff	callq	0x100039f77
10003a720:	80 3d 91 90 02 00 01	cmpb	$1, 168081(%rip)
10003a727:	75 2e	jne	0x10003a757
10003a729:	48 8b 7d 88	movq	-120(%rbp), %rdi
10003a72d:	48 63 15 70 90 02 00	movslq	168048(%rip), %rdx
10003a734:	48 8d 35 5a 81 01 00	leaq	98650(%rip), %rsi ## literal pool for: "req_pid"
10003a73b:	e8 62 79 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10003a740:	48 8b 7d 88	movq	-120(%rbp), %rdi
10003a744:	48 63 15 61 90 02 00	movslq	168033(%rip), %rdx
10003a74b:	48 8d 35 4b 81 01 00	leaq	98635(%rip), %rsi ## literal pool for: "rec_execcnt"
10003a752:	e8 4b 79 00 00	callq	0x1000420a2 ## symbol stub for: _xpc_dictionary_set_uint64
10003a757:	48 8b 7d 88	movq	-120(%rbp), %rdi
10003a75b:	e8 90 79 00 00	callq	0x1000420f0 ## symbol stub for: _xpc_pipe_routine_reply
10003a760:	a9 df ff ff ff	testl	$4294967263, %eax
10003a765:	75 1b	jne	0x10003a782
10003a767:	48 8b 7d 88	movq	-120(%rbp), %rdi
10003a76b:	e8 8c 79 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003a770:	e9 02 ff ff ff	jmp	0x10003a677
10003a775:	48 63 f8	movslq	%eax, %rdi
10003a778:	e8 25 70 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003a77d:	e9 f5 fe ff ff	jmp	0x10003a677
10003a782:	48 63 f8	movslq	%eax, %rdi
10003a785:	e8 18 70 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003a78a:	eb db	jmp	0x10003a767
10003a78c:	48 8d 3d bf 80 01 00	leaq	98495(%rip), %rdi ## literal pool for: "reentrant call into server layer"
10003a793:	31 c0	xorl	%eax, %eax
10003a795:	e8 78 9c ff ff	callq	0x100034412
10003a79a:	e8 d3 6f 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003a79f:	55	pushq	%rbp
10003a7a0:	48 89 e5	movq	%rsp, %rbp
10003a7a3:	48 83 ec 10	subq	$16, %rsp
10003a7a7:	48 8d 45 fc	leaq	-4(%rbp), %rax
10003a7ab:	89 38	movl	%edi, (%rax)
10003a7ad:	be 04 00 00 00	movl	$4, %esi
10003a7b2:	48 89 c7	movq	%rax, %rdi
10003a7b5:	e8 bf 4b fd ff	callq	0x10000f379
10003a7ba:	48 89 c1	movq	%rax, %rcx
10003a7bd:	48 ba 53 13 8c b7 b2 cf 21 35	movabsq	$3828569524732171091, %rdx
10003a7c7:	48 f7 e2	mulq	%rdx
10003a7ca:	48 89 c8	movq	%rcx, %rax
10003a7cd:	48 29 d0	subq	%rdx, %rax
10003a7d0:	48 d1 e8	shrq	%rax
10003a7d3:	48 01 d0	addq	%rdx, %rax
10003a7d6:	48 c1 e8 05	shrq	$5, %rax
10003a7da:	48 6b c0 35	imulq	$53, %rax, %rax
10003a7de:	48 29 c1	subq	%rax, %rcx
10003a7e1:	48 89 c8	movq	%rcx, %rax
10003a7e4:	48 83 c4 10	addq	$16, %rsp
10003a7e8:	5d	popq	%rbp
10003a7e9:	c3	retq
10003a7ea:	55	pushq	%rbp
10003a7eb:	48 89 e5	movq	%rsp, %rbp
10003a7ee:	41 56	pushq	%r14
10003a7f0:	53	pushq	%rbx
10003a7f1:	48 89 fb	movq	%rdi, %rbx
10003a7f4:	48 83 fe 08	cmpq	$8, %rsi
10003a7f8:	74 33	je	0x10003a82d
10003a7fa:	44 8b 73 10	movl	16(%rbx), %r14d
10003a7fe:	48 83 fe 07	cmpq	$7, %rsi
10003a802:	74 3e	je	0x10003a842
10003a804:	48 83 fe 02	cmpq	$2, %rsi
10003a808:	75 7b	jne	0x10003a885
10003a80a:	48 8b 43 20	movq	32(%rbx), %rax
10003a80e:	48 89 05 9b 8f 02 00	movq	%rax, 167835(%rip)
10003a815:	44 89 f7	movl	%r14d, %edi
10003a818:	48 89 d6	movq	%rdx, %rsi
10003a81b:	e8 85 00 00 00	callq	0x10003a8a5
10003a820:	48 c7 05 85 8f 02 00 00 00 00 00	movq	$0, 167813(%rip)
10003a82b:	eb 58	jmp	0x10003a885
10003a82d:	48 8b 7b 18	movq	24(%rbx), %rdi
10003a831:	e8 22 71 00 00	callq	0x100041958 ## symbol stub for: _dispatch_release
10003a836:	48 89 df	movq	%rbx, %rdi
10003a839:	5b	popq	%rbx
10003a83a:	41 5e	popq	%r14
10003a83c:	5d	popq	%rbp
10003a83d:	e9 ee 71 00 00	jmp	0x100041a30 ## symbol stub for: _free
10003a842:	48 89 d7	movq	%rdx, %rdi
10003a845:	31 f6	xorl	%esi, %esi
10003a847:	e8 e2 70 00 00	callq	0x10004192e ## symbol stub for: _dispatch_mach_msg_get_msg
10003a84c:	8b 78 08	movl	8(%rax), %edi
10003a84f:	8d 4f 01	leal	1(%rdi), %ecx
10003a852:	83 f9 02	cmpl	$2, %ecx
10003a855:	73 44	jae	0x10003a89b
10003a857:	8b 40 0c	movl	12(%rax), %eax
10003a85a:	8d 48 01	leal	1(%rax), %ecx
10003a85d:	83 f9 02	cmpl	$2, %ecx
10003a860:	72 23	jb	0x10003a885
10003a862:	41 39 c6	cmpl	%eax, %r14d
10003a865:	75 39	jne	0x10003a8a0
10003a867:	44 89 f7	movl	%r14d, %edi
10003a86a:	e8 ca f4 fc ff	callq	0x100009d39
10003a86f:	85 c0	testl	%eax, %eax
10003a871:	75 17	jne	0x10003a88a
10003a873:	48 8b 53 20	movq	32(%rbx), %rdx
10003a877:	44 89 f7	movl	%r14d, %edi
10003a87a:	31 f6	xorl	%esi, %esi
10003a87c:	e8 cd f4 fc ff	callq	0x100009d4e
10003a881:	85 c0	testl	%eax, %eax
10003a883:	75 0f	jne	0x10003a894
10003a885:	5b	popq	%rbx
10003a886:	41 5e	popq	%r14
10003a888:	5d	popq	%rbp
10003a889:	c3	retq
10003a88a:	48 63 f8	movslq	%eax, %rdi
10003a88d:	e8 10 6f 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003a892:	eb df	jmp	0x10003a873
10003a894:	89 c7	movl	%eax, %edi
10003a896:	e8 ec 6c 00 00	callq	0x100041587
10003a89b:	e8 ca 6c 00 00	callq	0x10004156a
10003a8a0:	e8 f8 6c 00 00	callq	0x10004159d
10003a8a5:	55	pushq	%rbp
10003a8a6:	48 89 e5	movq	%rsp, %rbp
10003a8a9:	41 57	pushq	%r15
10003a8ab:	41 56	pushq	%r14
10003a8ad:	41 55	pushq	%r13
10003a8af:	41 54	pushq	%r12
10003a8b1:	53	pushq	%rbx
10003a8b2:	48 83 ec 18	subq	$24, %rsp
10003a8b6:	49 89 f4	movq	%rsi, %r12
10003a8b9:	41 89 fe	movl	%edi, %r14d
10003a8bc:	48 8b 05 65 d7 01 00	movq	120677(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a8c3:	48 8b 00	movq	(%rax), %rax
10003a8c6:	48 89 45 d0	movq	%rax, -48(%rbp)
10003a8ca:	45 31 ff	xorl	%r15d, %r15d
10003a8cd:	48 8d 5d c0	leaq	-64(%rbp), %rbx
10003a8d1:	4c 89 3b	movq	%r15, (%rbx)
10003a8d4:	48 89 f7	movq	%rsi, %rdi
10003a8d7:	48 89 de	movq	%rbx, %rsi
10003a8da:	e8 4f 70 00 00	callq	0x10004192e ## symbol stub for: _dispatch_mach_msg_get_msg
10003a8df:	4c 89 7d c8	movq	%r15, -56(%rbp)
10003a8e3:	48 83 3b 17	cmpq	$23, (%rbx)
10003a8e7:	0f 86 17 01 00 00	jbe	0x10003aa04
10003a8ed:	49 89 c5	movq	%rax, %r13
10003a8f0:	44 8b 78 14	movl	20(%rax), %r15d
10003a8f4:	44 89 f8	movl	%r15d, %eax
10003a8f7:	25 00 00 00 ff	andl	$4278190080, %eax
10003a8fc:	3d 00 00 00 40	cmpl	$1073741824, %eax
10003a901:	74 07	je	0x10003a90a
10003a903:	3d 00 00 00 10	cmpl	$268435456, %eax
10003a908:	75 52	jne	0x10003a95c
10003a90a:	41 89 45 14	movl	%eax, 20(%r13)
10003a90e:	4c 8d 45 c8	leaq	-56(%rbp), %r8
10003a912:	4c 89 e7	movq	%r12, %rdi
10003a915:	31 f6	xorl	%esi, %esi
10003a917:	31 d2	xorl	%edx, %edx
10003a919:	31 c9	xorl	%ecx, %ecx
10003a91b:	e8 d6 77 00 00	callq	0x1000420f6 ## symbol stub for: _xpc_receive_mach_msg
10003a920:	85 c0	testl	%eax, %eax
10003a922:	0f 85 bd 00 00 00	jne	0x10003a9e5
10003a928:	41 81 e7 ff ff ff 00	andl	$16777215, %r15d
10003a92f:	48 8b 7d c8	movq	-56(%rbp), %rdi
10003a933:	e8 a4 61 ff ff	callq	0x100030adc
10003a938:	48 8b 55 c8	movq	-56(%rbp), %rdx
10003a93c:	44 89 f7	movl	%r14d, %edi
10003a93f:	44 89 fe	movl	%r15d, %esi
10003a942:	e8 48 fb ff ff	callq	0x10003a48f
10003a947:	48 8b 7d c8	movq	-56(%rbp), %rdi
10003a94b:	e8 ac 77 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003a950:	31 ff	xorl	%edi, %edi
10003a952:	e8 85 61 ff ff	callq	0x100030adc
10003a957:	e9 89 00 00 00	jmp	0x10003a9e5
10003a95c:	4c 8b 35 8d 8e 02 00	movq	167565(%rip), %r14
10003a963:	4c 89 f0	movq	%r14, %rax
10003a966:	e8 b5 00 00 00	callq	0x10003aa20
10003a96b:	48 83 c0 0f	addq	$15, %rax
10003a96f:	48 83 e0 f0	andq	$-16, %rax
10003a973:	48 29 c4	subq	%rax, %rsp
10003a976:	48 89 e3	movq	%rsp, %rbx
10003a979:	48 89 df	movq	%rbx, %rdi
10003a97c:	be aa 00 00 00	movl	$170, %esi
10003a981:	4c 89 f2	movq	%r14, %rdx
10003a984:	e8 51 72 00 00	callq	0x100041bda ## symbol stub for: _memset
10003a989:	48 89 df	movq	%rbx, %rdi
10003a98c:	4c 89 f6	movq	%r14, %rsi
10003a98f:	e8 c6 6d 00 00	callq	0x10004175a ## symbol stub for: ___bzero
10003a994:	48 8d 15 75 f9 ff ff	leaq	-1675(%rip), %rdx
10003a99b:	4c 89 ef	movq	%r13, %rdi
10003a99e:	48 89 de	movq	%rbx, %rsi
10003a9a1:	e8 2c 6e 00 00	callq	0x1000417d2 ## symbol stub for: __xpc_pipe_handle_mig
10003a9a6:	85 c0	testl	%eax, %eax
10003a9a8:	74 3b	je	0x10003a9e5
10003a9aa:	89 c3	movl	%eax, %ebx
10003a9ac:	83 f8 16	cmpl	$22, %eax
10003a9af:	75 15	jne	0x10003a9c6
10003a9b1:	48 8d 35 f8 7c 01 00	leaq	97528(%rip), %rsi ## literal pool for: "Rejected invalid request."
10003a9b8:	bf 03 00 01 00	movl	$65539, %edi
10003a9bd:	31 c0	xorl	%eax, %eax
10003a9bf:	e8 04 ac ff ff	callq	0x1000355c8
10003a9c4:	eb 1f	jmp	0x10003a9e5
10003a9c6:	89 df	movl	%ebx, %edi
10003a9c8:	e8 71 74 00 00	callq	0x100041e3e ## symbol stub for: _strerror
10003a9cd:	48 8d 35 f6 7c 01 00	leaq	97526(%rip), %rsi ## literal pool for: "Rejected bogus request: %d: %s"
10003a9d4:	bf 03 00 01 00	movl	$65539, %edi
10003a9d9:	89 da	movl	%ebx, %edx
10003a9db:	48 89 c1	movq	%rax, %rcx
10003a9de:	31 c0	xorl	%eax, %eax
10003a9e0:	e8 e3 ab ff ff	callq	0x1000355c8
10003a9e5:	48 8b 05 3c d6 01 00	movq	120380(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003a9ec:	48 8b 00	movq	(%rax), %rax
10003a9ef:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003a9f3:	75 1d	jne	0x10003aa12
10003a9f5:	48 8d 65 d8	leaq	-40(%rbp), %rsp
10003a9f9:	5b	popq	%rbx
10003a9fa:	41 5c	popq	%r12
10003a9fc:	41 5d	popq	%r13
10003a9fe:	41 5e	popq	%r14
10003aa00:	41 5f	popq	%r15
10003aa02:	5d	popq	%rbp
10003aa03:	c3	retq
10003aa04:	48 8d 3d 23 7c 01 00	leaq	97315(%rip), %rdi ## literal pool for: "Message buffer was shorter than mach_msg_header"
10003aa0b:	31 c0	xorl	%eax, %eax
10003aa0d:	e8 00 9a ff ff	callq	0x100034412
10003aa12:	e8 5b 6d 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003aa17:	90	nop
10003aa18:	90	nop
10003aa19:	90	nop
10003aa1a:	90	nop
10003aa1b:	90	nop
10003aa1c:	90	nop
10003aa1d:	90	nop
10003aa1e:	90	nop
10003aa1f:	90	nop
10003aa20:	51	pushq	%rcx
10003aa21:	50	pushq	%rax
10003aa22:	48 8b 0d f7 d5 01 00	movq	120311(%rip), %rcx ## literal pool symbol address: ____chkstk_darwin
10003aa29:	48 85 c9	testq	%rcx, %rcx
10003aa2c:	75 07	jne	0x10003aa35
10003aa2e:	48 8d 0d 0b 00 00 00	leaq	11(%rip), %rcx
10003aa35:	ff d1	callq	*%rcx
10003aa37:	58	popq	%rax
10003aa38:	59	popq	%rcx
10003aa39:	c3	retq
10003aa3a:	66 0f 1f 44 00 00	nopw	(%rax,%rax)
10003aa40:	48 3d 00 10 00 00	cmpq	$4096, %rax
10003aa46:	48 8d 4c 24 18	leaq	24(%rsp), %rcx
10003aa4b:	72 17	jb	0x10003aa64
10003aa4d:	48 81 e9 00 10 00 00	subq	$4096, %rcx
10003aa54:	84 09	testb	%cl, (%rcx)
10003aa56:	48 2d 00 10 00 00	subq	$4096, %rax
10003aa5c:	48 3d 00 10 00 00	cmpq	$4096, %rax
10003aa62:	77 e9	ja	0x10003aa4d
10003aa64:	48 29 c1	subq	%rax, %rcx
10003aa67:	84 09	testb	%cl, (%rcx)
10003aa69:	c3	retq
10003aa6a:	48 85 ff	testq	%rdi, %rdi
10003aa6d:	74 06	je	0x10003aa75
10003aa6f:	48 89 f8	movq	%rdi, %rax
10003aa72:	31 d2	xorl	%edx, %edx
10003aa74:	c3	retq
10003aa75:	55	pushq	%rbp
10003aa76:	48 89 e5	movq	%rsp, %rbp
10003aa79:	e8 42 6b 00 00	callq	0x1000415c0
10003aa7e:	85 ff	testl	%edi, %edi
10003aa80:	74 05	je	0x10003aa87
10003aa82:	31 c0	xorl	%eax, %eax
10003aa84:	89 fa	movl	%edi, %edx
10003aa86:	c3	retq
10003aa87:	55	pushq	%rbp
10003aa88:	48 89 e5	movq	%rsp, %rbp
10003aa8b:	e8 42 6b 00 00	callq	0x1000415d2
10003aa90:	55	pushq	%rbp
10003aa91:	48 89 e5	movq	%rsp, %rbp
10003aa94:	53	pushq	%rbx
10003aa95:	50	pushq	%rax
10003aa96:	48 83 7f 08 ff	cmpq	$-1, 8(%rdi)
10003aa9b:	0f 85 91 00 00 00	jne	0x10003ab32
10003aaa1:	48 89 fb	movq	%rdi, %rbx
10003aaa4:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
10003aaa9:	0f 85 83 00 00 00	jne	0x10003ab32
10003aaaf:	48 83 7b 18 ff	cmpq	$-1, 24(%rbx)
10003aab4:	0f 85 81 00 00 00	jne	0x10003ab3b
10003aaba:	48 83 7b 20 ff	cmpq	$-1, 32(%rbx)
10003aabf:	75 7a	jne	0x10003ab3b
10003aac1:	0f b7 83 88 00 00 00	movzwl	136(%rbx), %eax
10003aac8:	a8 01	testb	$1, %al
10003aaca:	75 78	jne	0x10003ab44
10003aacc:	a8 02	testb	$2, %al
10003aace:	75 7d	jne	0x10003ab4d
10003aad0:	f6 43 50 20	testb	$32, 80(%rbx)
10003aad4:	74 0a	je	0x10003aae0
10003aad6:	89 c1	movl	%eax, %ecx
10003aad8:	83 e1 20	andl	$32, %ecx
10003aadb:	66 85 c9	testw	%cx, %cx
10003aade:	74 76	je	0x10003ab56
10003aae0:	48 83 7b 60 00	cmpq	$0, 96(%rbx)
10003aae5:	74 30	je	0x10003ab17
10003aae7:	a8 88	testb	$-120, %al
10003aae9:	75 1d	jne	0x10003ab08
10003aaeb:	48 89 df	movq	%rbx, %rdi
10003aaee:	be 04 00 00 00	movl	$4, %esi
10003aaf3:	e8 6c 00 00 00	callq	0x10003ab64
10003aaf8:	89 c7	movl	%eax, %edi
10003aafa:	31 f6	xorl	%esi, %esi
10003aafc:	48 89 da	movq	%rbx, %rdx
10003aaff:	e8 4a f2 fc ff	callq	0x100009d4e
10003ab04:	85 c0	testl	%eax, %eax
10003ab06:	75 16	jne	0x10003ab1e
10003ab08:	48 8b 7b 60	movq	96(%rbx), %rdi
10003ab0c:	48 83 c4 08	addq	$8, %rsp
10003ab10:	5b	popq	%rbx
10003ab11:	5d	popq	%rbp
10003ab12:	e9 e5 75 00 00	jmp	0x1000420fc ## symbol stub for: _xpc_release
10003ab17:	48 83 c4 08	addq	$8, %rsp
10003ab1b:	5b	popq	%rbx
10003ab1c:	5d	popq	%rbp
10003ab1d:	c3	retq
10003ab1e:	48 63 d0	movslq	%eax, %rdx
10003ab21:	48 8d 3d 6c 00 00 00	leaq	108(%rip), %rdi
10003ab28:	48 89 de	movq	%rbx, %rsi
10003ab2b:	e8 78 6c 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003ab30:	eb d6	jmp	0x10003ab08
10003ab32:	48 8d 3d b0 7d 01 00	leaq	97712(%rip), %rdi ## literal pool for: "endpoint deallocation while still in service list"
10003ab39:	eb 22	jmp	0x10003ab5d
10003ab3b:	48 8d 3d d9 7d 01 00	leaq	97753(%rip), %rdi ## literal pool for: "endpoint deallocation while still in domain list"
10003ab42:	eb 19	jmp	0x10003ab5d
10003ab44:	48 8d 3d 01 7e 01 00	leaq	97793(%rip), %rdi ## literal pool for: "endpoint deallocation while still active"
10003ab4b:	eb 10	jmp	0x10003ab5d
10003ab4d:	48 8d 3d 21 7e 01 00	leaq	97825(%rip), %rdi ## literal pool for: "endpoint deallocation while still being watched"
10003ab54:	eb 07	jmp	0x10003ab5d
10003ab56:	48 8d 3d 48 7e 01 00	leaq	97864(%rip), %rdi ## literal pool for: "endpoint deallocation without cancellation"
10003ab5d:	31 c0	xorl	%eax, %eax
10003ab5f:	e8 ae 98 ff ff	callq	0x100034412
10003ab64:	55	pushq	%rbp
10003ab65:	48 89 e5	movq	%rsp, %rbp
10003ab68:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003ab6d:	75 17	jne	0x10003ab86
10003ab6f:	e8 39 09 00 00	callq	0x10003b4ad
10003ab74:	48 85 c0	testq	%rax, %rax
10003ab77:	74 09	je	0x10003ab82
10003ab79:	48 89 c7	movq	%rax, %rdi
10003ab7c:	5d	popq	%rbp
10003ab7d:	e9 68 75 00 00	jmp	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10003ab82:	31 c0	xorl	%eax, %eax
10003ab84:	5d	popq	%rbp
10003ab85:	c3	retq
10003ab86:	48 8d 3d 3b 7f 01 00	leaq	98107(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003ab8d:	31 c0	xorl	%eax, %eax
10003ab8f:	e8 7e 98 ff ff	callq	0x100034412
10003ab94:	55	pushq	%rbp
10003ab95:	48 89 e5	movq	%rsp, %rbp
10003ab98:	48 89 d1	movq	%rdx, %rcx
10003ab9b:	48 89 f7	movq	%rsi, %rdi
10003ab9e:	48 8d 15 71 ca 00 00	leaq	51825(%rip), %rdx ## literal pool for: "%s"
10003aba5:	be 03 00 00 00	movl	$3, %esi
10003abaa:	31 c0	xorl	%eax, %eax
10003abac:	e8 04 00 00 00	callq	0x10003abb5
10003abb1:	b0 01	movb	$1, %al
10003abb3:	5d	popq	%rbp
10003abb4:	c3	retq
10003abb5:	55	pushq	%rbp
10003abb6:	48 89 e5	movq	%rsp, %rbp
10003abb9:	48 81 ec d0 00 00 00	subq	$208, %rsp
10003abc0:	4c 8d 95 30 ff ff ff	leaq	-208(%rbp), %r10
10003abc7:	49 89 4a 18	movq	%rcx, 24(%r10)
10003abcb:	4d 89 42 20	movq	%r8, 32(%r10)
10003abcf:	4d 89 4a 28	movq	%r9, 40(%r10)
10003abd3:	84 c0	testb	%al, %al
10003abd5:	74 26	je	0x10003abfd
10003abd7:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10003abde:	0f 29 8d 70 ff ff ff	movaps	%xmm1, -144(%rbp)
10003abe5:	0f 29 55 80	movaps	%xmm2, -128(%rbp)
10003abe9:	0f 29 5d 90	movaps	%xmm3, -112(%rbp)
10003abed:	0f 29 65 a0	movaps	%xmm4, -96(%rbp)
10003abf1:	0f 29 6d b0	movaps	%xmm5, -80(%rbp)
10003abf5:	0f 29 75 c0	movaps	%xmm6, -64(%rbp)
10003abf9:	0f 29 7d d0	movaps	%xmm7, -48(%rbp)
10003abfd:	48 8b 05 24 d4 01 00	movq	119844(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003ac04:	48 8b 00	movq	(%rax), %rax
10003ac07:	48 89 45 f8	movq	%rax, -8(%rbp)
10003ac0b:	0f 28 05 6e 86 00 00	movaps	34414(%rip), %xmm0
10003ac12:	48 8d 4d e0	leaq	-32(%rbp), %rcx
10003ac16:	0f 29 01	movaps	%xmm0, (%rcx)
10003ac19:	4c 89 51 10	movq	%r10, 16(%rcx)
10003ac1d:	48 b8 18 00 00 00 30 00 00 00	movabsq	$206158430232, %rax
10003ac27:	48 89 01	movq	%rax, (%rcx)
10003ac2a:	48 8d 45 10	leaq	16(%rbp), %rax
10003ac2e:	48 89 41 08	movq	%rax, 8(%rcx)
10003ac32:	48 81 c7 90 00 00 00	addq	$144, %rdi
10003ac39:	4c 8b 45 08	movq	8(%rbp), %r8
10003ac3d:	e8 21 ab ff ff	callq	0x100035763
10003ac42:	48 8b 05 df d3 01 00	movq	119775(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003ac49:	48 8b 00	movq	(%rax), %rax
10003ac4c:	48 3b 45 f8	cmpq	-8(%rbp), %rax
10003ac50:	75 09	jne	0x10003ac5b
10003ac52:	48 81 c4 d0 00 00 00	addq	$208, %rsp
10003ac59:	5d	popq	%rbp
10003ac5a:	c3	retq
10003ac5b:	e8 12 6b 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003ac60:	55	pushq	%rbp
10003ac61:	48 89 e5	movq	%rsp, %rbp
10003ac64:	5d	popq	%rbp
10003ac65:	e9 00 00 00 00	jmp	0x10003ac6a
10003ac6a:	55	pushq	%rbp
10003ac6b:	48 89 e5	movq	%rsp, %rbp
10003ac6e:	41 57	pushq	%r15
10003ac70:	41 56	pushq	%r14
10003ac72:	41 55	pushq	%r13
10003ac74:	41 54	pushq	%r12
10003ac76:	53	pushq	%rbx
10003ac77:	50	pushq	%rax
10003ac78:	49 89 ce	movq	%rcx, %r14
10003ac7b:	49 89 d7	movq	%rdx, %r15
10003ac7e:	49 89 f5	movq	%rsi, %r13
10003ac81:	49 89 fc	movq	%rdi, %r12
10003ac84:	48 89 f7	movq	%rsi, %rdi
10003ac87:	e8 ca 71 00 00	callq	0x100041e56 ## symbol stub for: _strlen
10003ac8c:	48 8d 78 01	leaq	1(%rax), %rdi
10003ac90:	e8 c4 80 fd ff	callq	0x100012d59
10003ac95:	48 89 c3	movq	%rax, %rbx
10003ac98:	4c 89 60 58	movq	%r12, 88(%rax)
10003ac9c:	4c 89 78 78	movq	%r15, 120(%rax)
10003aca0:	4c 89 b0 80 00 00 00	movq	%r14, 128(%rax)
10003aca7:	48 8d b8 90 00 00 00	leaq	144(%rax), %rdi
10003acae:	4c 89 ee	movq	%r13, %rsi
10003acb1:	e8 7c 71 00 00	callq	0x100041e32 ## symbol stub for: _strcpy
10003acb6:	66 0f 76 c0	pcmpeqd	%xmm0, %xmm0
10003acba:	f3 0f 7f 43 08	movdqu	%xmm0, 8(%rbx)
10003acbf:	f3 0f 7f 43 18	movdqu	%xmm0, 24(%rbx)
10003acc4:	48 89 d8	movq	%rbx, %rax
10003acc7:	48 83 c4 08	addq	$8, %rsp
10003accb:	5b	popq	%rbx
10003accc:	41 5c	popq	%r12
10003acce:	41 5d	popq	%r13
10003acd0:	41 5e	popq	%r14
10003acd2:	41 5f	popq	%r15
10003acd4:	5d	popq	%rbp
10003acd5:	c3	retq
10003acd6:	55	pushq	%rbp
10003acd7:	48 89 e5	movq	%rsp, %rbp
10003acda:	41 56	pushq	%r14
10003acdc:	53	pushq	%rbx
10003acdd:	49 89 d6	movq	%rdx, %r14
10003ace0:	48 89 ca	movq	%rcx, %rdx
10003ace3:	4c 89 c1	movq	%r8, %rcx
10003ace6:	e8 7f ff ff ff	callq	0x10003ac6a
10003aceb:	48 89 c3	movq	%rax, %rbx
10003acee:	4c 89 f7	movq	%r14, %rdi
10003acf1:	e8 0c 74 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10003acf6:	48 89 43 60	movq	%rax, 96(%rbx)
10003acfa:	80 8b 88 00 00 00 08	orb	$8, 136(%rbx)
10003ad01:	48 89 df	movq	%rbx, %rdi
10003ad04:	e8 08 00 00 00	callq	0x10003ad11
10003ad09:	48 89 d8	movq	%rbx, %rax
10003ad0c:	5b	popq	%rbx
10003ad0d:	41 5e	popq	%r14
10003ad0f:	5d	popq	%rbp
10003ad10:	c3	retq
10003ad11:	55	pushq	%rbp
10003ad12:	48 89 e5	movq	%rsp, %rbp
10003ad15:	41 57	pushq	%r15
10003ad17:	41 56	pushq	%r14
10003ad19:	41 55	pushq	%r13
10003ad1b:	41 54	pushq	%r12
10003ad1d:	53	pushq	%rbx
10003ad1e:	48 81 ec 88 00 00 00	subq	$136, %rsp
10003ad25:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003ad2a:	0f 85 88 01 00 00	jne	0x10003aeb8
10003ad30:	48 89 fb	movq	%rdi, %rbx
10003ad33:	0f b7 8f 88 00 00 00	movzwl	136(%rdi), %ecx
10003ad3a:	b8 25 00 00 00	movl	$37, %eax
10003ad3f:	f6 c1 01	testb	$1, %cl
10003ad42:	0f 85 42 01 00 00	jne	0x10003ae8a
10003ad48:	f6 c1 08	testb	$8, %cl
10003ad4b:	75 65	jne	0x10003adb2
10003ad4d:	48 89 df	movq	%rbx, %rdi
10003ad50:	be 01 00 00 00	movl	$1, %esi
10003ad55:	e8 0a fe ff ff	callq	0x10003ab64
10003ad5a:	41 89 c6	movl	%eax, %r14d
10003ad5d:	48 8b 05 b4 d2 01 00	movq	119476(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10003ad64:	48 8d 55 b0	leaq	-80(%rbp), %rdx
10003ad68:	48 89 02	movq	%rax, (%rdx)
10003ad6b:	48 c7 42 08 00 00 00 40	movq	$1073741824, 8(%rdx)
10003ad73:	48 8d 05 3e 0e 00 00	leaq	3646(%rip), %rax
10003ad7a:	48 89 42 10	movq	%rax, 16(%rdx)
10003ad7e:	48 8d 05 8b 0b 02 00	leaq	134027(%rip), %rax
10003ad85:	48 89 42 18	movq	%rax, 24(%rdx)
10003ad89:	48 89 5a 20	movq	%rbx, 32(%rdx)
10003ad8d:	44 89 f7	movl	%r14d, %edi
10003ad90:	be 45 00 00 00	movl	$69, %esi
10003ad95:	e8 77 ee ff ff	callq	0x100039c11
10003ad9a:	85 c0	testl	%eax, %eax
10003ad9c:	0f 85 fa 00 00 00	jne	0x10003ae9c
10003ada2:	44 89 f7	movl	%r14d, %edi
10003ada5:	48 89 de	movq	%rbx, %rsi
10003ada8:	e8 ce ee fc ff	callq	0x100009c7b
10003adad:	e9 cf 00 00 00	jmp	0x10003ae81
10003adb2:	4c 8b 73 60	movq	96(%rbx), %r14
10003adb6:	4c 89 f7	movq	%r14, %rdi
10003adb9:	e8 2c 73 00 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10003adbe:	41 89 c7	movl	%eax, %r15d
10003adc1:	e8 34 37 fd ff	callq	0x10000e4fa
10003adc6:	48 8b 3d 8b d2 01 00	movq	119435(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_send
10003adcd:	ba 01 00 00 00	movl	$1, %edx
10003add2:	4c 89 fe	movq	%r15, %rsi
10003add5:	48 89 c1	movq	%rax, %rcx
10003add8:	e8 a5 6b 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10003addd:	49 89 c7	movq	%rax, %r15
10003ade0:	4c 89 f7	movq	%r14, %rdi
10003ade3:	e8 1a 73 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10003ade8:	4c 89 ff	movq	%r15, %rdi
10003adeb:	48 89 de	movq	%rbx, %rsi
10003adee:	e8 83 6b 00 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10003adf3:	4c 8b 25 1e d2 01 00	movq	119326(%rip), %r12 ## literal pool symbol address: __NSConcreteStackBlock
10003adfa:	48 8d 75 88	leaq	-120(%rbp), %rsi
10003adfe:	4c 89 26	movq	%r12, (%rsi)
10003ae01:	41 bd 00 00 00 40	movl	$1073741824, %r13d
10003ae07:	4c 89 6e 08	movq	%r13, 8(%rsi)
10003ae0b:	48 8d 05 bc 10 00 00	leaq	4284(%rip), %rax
10003ae12:	48 89 46 10	movq	%rax, 16(%rsi)
10003ae16:	48 8d 05 73 0b 02 00	leaq	134003(%rip), %rax
10003ae1d:	48 89 46 18	movq	%rax, 24(%rsi)
10003ae21:	4c 89 7e 20	movq	%r15, 32(%rsi)
10003ae25:	4c 89 ff	movq	%r15, %rdi
10003ae28:	e8 73 6b 00 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
10003ae2d:	48 8d b5 58 ff ff ff	leaq	-168(%rbp), %rsi
10003ae34:	4c 89 26	movq	%r12, (%rsi)
10003ae37:	4c 89 6e 08	movq	%r13, 8(%rsi)
10003ae3b:	48 8d 05 f4 10 00 00	leaq	4340(%rip), %rax
10003ae42:	48 89 46 10	movq	%rax, 16(%rsi)
10003ae46:	48 8d 05 63 0b 02 00	leaq	133987(%rip), %rax
10003ae4d:	48 89 46 18	movq	%rax, 24(%rsi)
10003ae51:	4c 89 7e 20	movq	%r15, 32(%rsi)
10003ae55:	4c 89 76 28	movq	%r14, 40(%rsi)
10003ae59:	4c 89 ff	movq	%r15, %rdi
10003ae5c:	e8 4b 6b 00 00	callq	0x1000419ac ## symbol stub for: _dispatch_source_set_mandatory_cancel_handler
10003ae61:	4c 89 ff	movq	%r15, %rdi
10003ae64:	e8 59 6a 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10003ae69:	48 89 df	movq	%rbx, %rdi
10003ae6c:	be 28 00 00 00	movl	$40, %esi
10003ae71:	e8 58 7a fd ff	callq	0x1000128ce
10003ae76:	48 83 7b 68 00	cmpq	$0, 104(%rbx)
10003ae7b:	75 36	jne	0x10003aeb3
10003ae7d:	4c 89 7b 68	movq	%r15, 104(%rbx)
10003ae81:	80 8b 88 00 00 00 01	orb	$1, 136(%rbx)
10003ae88:	31 c0	xorl	%eax, %eax
10003ae8a:	48 81 c4 88 00 00 00	addq	$136, %rsp
10003ae91:	5b	popq	%rbx
10003ae92:	41 5c	popq	%r12
10003ae94:	41 5d	popq	%r13
10003ae96:	41 5e	popq	%r14
10003ae98:	41 5f	popq	%r15
10003ae9a:	5d	popq	%rbp
10003ae9b:	c3	retq
10003ae9c:	48 63 d0	movslq	%eax, %rdx
10003ae9f:	48 8d 3d ee fc ff ff	leaq	-786(%rip), %rdi
10003aea6:	48 89 de	movq	%rbx, %rsi
10003aea9:	e8 fa 68 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003aeae:	e9 ef fe ff ff	jmp	0x10003ada2
10003aeb3:	e8 2c 67 00 00	callq	0x1000415e4
10003aeb8:	48 8d 3d 09 7c 01 00	leaq	97289(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003aebf:	31 c0	xorl	%eax, %eax
10003aec1:	e8 4c 95 ff ff	callq	0x100034412
10003aec6:	55	pushq	%rbp
10003aec7:	48 89 e5	movq	%rsp, %rbp
10003aeca:	41 57	pushq	%r15
10003aecc:	41 56	pushq	%r14
10003aece:	41 55	pushq	%r13
10003aed0:	41 54	pushq	%r12
10003aed2:	53	pushq	%rbx
10003aed3:	48 83 ec 48	subq	$72, %rsp
10003aed7:	48 3b 15 ea d1 01 00	cmpq	119274(%rip), %rdx ## literal pool symbol address: __xpc_bool_false
10003aede:	0f 84 99 01 00 00	je	0x10003b07d
10003aee4:	49 89 cc	movq	%rcx, %r12
10003aee7:	49 89 d5	movq	%rdx, %r13
10003aeea:	49 89 f6	movq	%rsi, %r14
10003aeed:	49 89 ff	movq	%rdi, %r15
10003aef0:	4c 89 4d c8	movq	%r9, -56(%rbp)
10003aef4:	4c 89 45 d0	movq	%r8, -48(%rbp)
10003aef8:	48 89 d7	movq	%rdx, %rdi
10003aefb:	e8 c6 71 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003af00:	48 89 c3	movq	%rax, %rbx
10003af03:	48 3b 05 d6 d1 01 00	cmpq	119254(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10003af0a:	74 0d	je	0x10003af19
10003af0c:	48 3b 1d ed d1 01 00	cmpq	119277(%rip), %rbx ## literal pool symbol address: __xpc_type_dictionary
10003af13:	0f 85 64 01 00 00	jne	0x10003b07d
10003af19:	4c 89 ff	movq	%r15, %rdi
10003af1c:	4c 89 f6	movq	%r14, %rsi
10003af1f:	4c 89 e2	movq	%r12, %rdx
10003af22:	48 8b 4d c8	movq	-56(%rbp), %rcx
10003af26:	e8 3f fd ff ff	callq	0x10003ac6a
10003af2b:	48 85 c0	testq	%rax, %rax
10003af2e:	0f 84 49 01 00 00	je	0x10003b07d
10003af34:	49 89 c7	movq	%rax, %r15
10003af37:	49 89 c4	movq	%rax, %r12
10003af3a:	48 3b 1d bf d1 01 00	cmpq	119231(%rip), %rbx ## literal pool symbol address: __xpc_type_dictionary
10003af41:	48 8b 5d d0	movq	-48(%rbp), %rbx
10003af45:	75 3c	jne	0x10003af83
10003af47:	48 8b 05 ca d0 01 00	movq	118986(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10003af4e:	48 8d 75 98	leaq	-104(%rbp), %rsi
10003af52:	48 89 06	movq	%rax, (%rsi)
10003af55:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10003af5d:	48 8d 05 2e 01 00 00	leaq	302(%rip), %rax
10003af64:	48 89 46 10	movq	%rax, 16(%rsi)
10003af68:	48 8d 05 81 09 02 00	leaq	133505(%rip), %rax
10003af6f:	48 89 46 18	movq	%rax, 24(%rsi)
10003af73:	4c 89 66 20	movq	%r12, 32(%rsi)
10003af77:	48 89 5e 28	movq	%rbx, 40(%rsi)
10003af7b:	4c 89 ef	movq	%r13, %rdi
10003af7e:	e8 7d 70 00 00	callq	0x100042000 ## symbol stub for: _xpc_dictionary_apply
10003af83:	41 80 7c 24 50 00	cmpb	$0, 80(%r12)
10003af89:	79 0f	jns	0x10003af9a
10003af8b:	41 f6 84 24 88 00 00 00 04	testb	$4, 136(%r12)
10003af94:	0f 85 b9 00 00 00	jne	0x10003b053
10003af9a:	49 81 c7 90 00 00 00	addq	$144, %r15
10003afa1:	4c 89 ff	movq	%r15, %rdi
10003afa4:	e8 ad 6e 00 00	callq	0x100041e56 ## symbol stub for: _strlen
10003afa9:	48 3d ff 00 00 00	cmpq	$255, %rax
10003afaf:	72 19	jb	0x10003afca
10003afb1:	48 8d 15 68 7a 01 00	leaq	96872(%rip), %rdx ## literal pool for: "The endpoint name %s is too long to support some features"
10003afb8:	48 89 df	movq	%rbx, %rdi
10003afbb:	be 04 00 00 00	movl	$4, %esi
10003afc0:	4c 89 f9	movq	%r15, %rcx
10003afc3:	31 c0	xorl	%eax, %eax
10003afc5:	e8 7b 36 fd ff	callq	0x10000e645
10003afca:	41 83 7c 24 48 09	cmpl	$9, 72(%r12)
10003afd0:	41 0f b7 84 24 88 00 00 00	movzwl	136(%r12), %eax
10003afd9:	75 64	jne	0x10003b03f
10003afdb:	a8 10	testb	$16, %al
10003afdd:	74 2e	je	0x10003b00d
10003afdf:	48 8d 15 74 7a 01 00	leaq	96884(%rip), %rdx ## literal pool for: "The task-access port for %s may not be ResetAtClose."
10003afe6:	48 89 df	movq	%rbx, %rdi
10003afe9:	be 03 00 00 00	movl	$3, %esi
10003afee:	4c 89 f9	movq	%r15, %rcx
10003aff1:	31 c0	xorl	%eax, %eax
10003aff3:	e8 4d 36 fd ff	callq	0x10000e645
10003aff8:	41 0f b7 84 24 88 00 00 00	movzwl	136(%r12), %eax
10003b001:	83 e0 ef	andl	$-17, %eax
10003b004:	66 41 89 84 24 88 00 00 00	movw	%ax, 136(%r12)
10003b00d:	a8 04	testb	$4, %al
10003b00f:	74 2e	je	0x10003b03f
10003b011:	48 8d 15 77 7a 01 00	leaq	96887(%rip), %rdx ## literal pool for: "The task-access port for %s may not be HideUntilCheckIn."
10003b018:	48 89 df	movq	%rbx, %rdi
10003b01b:	be 03 00 00 00	movl	$3, %esi
10003b020:	4c 89 f9	movq	%r15, %rcx
10003b023:	31 c0	xorl	%eax, %eax
10003b025:	e8 1b 36 fd ff	callq	0x10000e645
10003b02a:	41 0f b7 84 24 88 00 00 00	movzwl	136(%r12), %eax
10003b033:	83 e0 fb	andl	$-5, %eax
10003b036:	66 41 89 84 24 88 00 00 00	movw	%ax, 136(%r12)
10003b03f:	a8 04	testb	$4, %al
10003b041:	75 3d	jne	0x10003b080
10003b043:	0d 00 02 00 00	orl	$512, %eax
10003b048:	66 41 89 84 24 88 00 00 00	movw	%ax, 136(%r12)
10003b051:	eb 2d	jmp	0x10003b080
10003b053:	49 81 c7 90 00 00 00	addq	$144, %r15
10003b05a:	48 8d 15 6f 79 01 00	leaq	96623(%rip), %rdx ## literal pool for: "%s: _ExperimentalNonLaunching is not compatible with HideUntilCheckIn, ignoring"
10003b061:	48 89 df	movq	%rbx, %rdi
10003b064:	be 03 00 00 00	movl	$3, %esi
10003b069:	4c 89 f9	movq	%r15, %rcx
10003b06c:	31 c0	xorl	%eax, %eax
10003b06e:	e8 d2 35 fd ff	callq	0x10000e645
10003b073:	4c 89 e7	movq	%r12, %rdi
10003b076:	31 f6	xorl	%esi, %esi
10003b078:	e8 d4 78 fd ff	callq	0x100012951
10003b07d:	45 31 e4	xorl	%r12d, %r12d
10003b080:	4c 89 e0	movq	%r12, %rax
10003b083:	48 83 c4 48	addq	$72, %rsp
10003b087:	5b	popq	%rbx
10003b088:	41 5c	popq	%r12
10003b08a:	41 5d	popq	%r13
10003b08c:	41 5e	popq	%r14
10003b08e:	41 5f	popq	%r15
10003b090:	5d	popq	%rbp
10003b091:	c3	retq
10003b092:	55	pushq	%rbp
10003b093:	48 89 e5	movq	%rsp, %rbp
10003b096:	41 57	pushq	%r15
10003b098:	41 56	pushq	%r14
10003b09a:	41 54	pushq	%r12
10003b09c:	53	pushq	%rbx
10003b09d:	48 89 d3	movq	%rdx, %rbx
10003b0a0:	49 89 f4	movq	%rsi, %r12
10003b0a3:	4c 8b 7f 20	movq	32(%rdi), %r15
10003b0a7:	4c 8b 77 28	movq	40(%rdi), %r14
10003b0ab:	48 89 d7	movq	%rdx, %rdi
10003b0ae:	e8 13 70 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003b0b3:	48 3b 05 56 d0 01 00	cmpq	118870(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003b0ba:	74 6d	je	0x10003b129
10003b0bc:	48 3b 05 1d d0 01 00	cmpq	118813(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10003b0c3:	0f 84 b6 00 00 00	je	0x10003b17f
10003b0c9:	48 3b 05 58 d0 01 00	cmpq	118872(%rip), %rax ## literal pool symbol address: __xpc_type_string
10003b0d0:	0f 84 0a 01 00 00	je	0x10003b1e0
10003b0d6:	48 3b 05 23 d0 01 00	cmpq	118819(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003b0dd:	0f 85 5d 02 00 00	jne	0x10003b340
10003b0e3:	48 8d 35 6e 7c 01 00	leaq	97390(%rip), %rsi ## literal pool for: "ExceptionServer"
10003b0ea:	4c 89 e7	movq	%r12, %rdi
10003b0ed:	e8 3a 6d 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
10003b0f2:	85 c0	testl	%eax, %eax
10003b0f4:	0f 85 14 01 00 00	jne	0x10003b20e
10003b0fa:	48 89 df	movq	%rbx, %rdi
10003b0fd:	e8 3a 6f 00 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10003b102:	48 85 c0	testq	%rax, %rax
10003b105:	0f 84 57 02 00 00	je	0x10003b362
10003b10b:	49 81 c7 90 00 00 00	addq	$144, %r15
10003b112:	48 8d 15 e5 7c 01 00	leaq	97509(%rip), %rdx ## literal pool for: "Non-empty dictionary property on MachService: %s"
10003b119:	4c 89 f7	movq	%r14, %rdi
10003b11c:	be 03 00 00 00	movl	$3, %esi
10003b121:	4c 89 f9	movq	%r15, %rcx
10003b124:	e9 f7 00 00 00	jmp	0x10003b220
10003b129:	48 8d 35 45 7b 01 00	leaq	97093(%rip), %rsi ## literal pool for: "TaskSpecialPort"
10003b130:	4c 89 e7	movq	%r12, %rdi
10003b133:	e8 e8 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b138:	85 c0	testl	%eax, %eax
10003b13a:	0f 84 ec 00 00 00	je	0x10003b22c
10003b140:	48 8d 35 3e 7b 01 00	leaq	97086(%rip), %rsi ## literal pool for: "HostSpecialPort"
10003b147:	4c 89 e7	movq	%r12, %rdi
10003b14a:	e8 d1 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b14f:	85 c0	testl	%eax, %eax
10003b151:	0f 85 b7 00 00 00	jne	0x10003b20e
10003b157:	48 89 df	movq	%rbx, %rdi
10003b15a:	e8 73 6f 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003b15f:	48 89 c3	movq	%rax, %rbx
10003b162:	48 83 f8 08	cmpq	$8, %rax
10003b166:	0f 8c 58 01 00 00	jl	0x10003b2c4
10003b16c:	48 83 fb 20	cmpq	$32, %rbx
10003b170:	0f 8f d5 01 00 00	jg	0x10003b34b
10003b176:	41 89 5f 4c	movl	%ebx, 76(%r15)
10003b17a:	e9 c1 01 00 00	jmp	0x10003b340
10003b17f:	48 8d 35 35 7b 01 00	leaq	97077(%rip), %rsi ## literal pool for: "ResetAtClose"
10003b186:	4c 89 e7	movq	%r12, %rdi
10003b189:	e8 92 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b18e:	85 c0	testl	%eax, %eax
10003b190:	0f 84 a8 00 00 00	je	0x10003b23e
10003b196:	48 8d 35 2b 7b 01 00	leaq	97067(%rip), %rsi ## literal pool for: "HideUntilCheckIn"
10003b19d:	4c 89 e7	movq	%r12, %rdi
10003b1a0:	e8 7b 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b1a5:	85 c0	testl	%eax, %eax
10003b1a7:	0f 84 b9 00 00 00	je	0x10003b266
10003b1ad:	48 8d 35 8a 7b 01 00	leaq	97162(%rip), %rsi ## literal pool for: "_ExperimentalNonLaunching"
10003b1b4:	4c 89 e7	movq	%r12, %rdi
10003b1b7:	e8 64 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b1bc:	85 c0	testl	%eax, %eax
10003b1be:	0f 84 25 01 00 00	je	0x10003b2e9
10003b1c4:	48 8d 35 8d 7b 01 00	leaq	97165(%rip), %rsi ## literal pool for: "ExceptionServer"
10003b1cb:	4c 89 e7	movq	%r12, %rdi
10003b1ce:	e8 4d 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b1d3:	85 c0	testl	%eax, %eax
10003b1d5:	75 37	jne	0x10003b20e
10003b1d7:	48 8d 15 8a 7b 01 00	leaq	97162(%rip), %rdx ## literal pool for: "An empty dictionary needs to be used as the value for %s."
10003b1de:	eb 35	jmp	0x10003b215
10003b1e0:	48 8d 35 8e 7a 01 00	leaq	96910(%rip), %rsi ## literal pool for: "TaskSpecialPort"
10003b1e7:	4c 89 e7	movq	%r12, %rdi
10003b1ea:	e8 31 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b1ef:	85 c0	testl	%eax, %eax
10003b1f1:	0f 84 ab 00 00 00	je	0x10003b2a2
10003b1f7:	48 8d 35 87 7a 01 00	leaq	96903(%rip), %rsi ## literal pool for: "HostSpecialPort"
10003b1fe:	4c 89 e7	movq	%r12, %rdi
10003b201:	e8 1a 6c 00 00	callq	0x100041e20 ## symbol stub for: _strcasecmp
10003b206:	85 c0	testl	%eax, %eax
10003b208:	0f 84 f3 00 00 00	je	0x10003b301
10003b20e:	48 8d 15 80 7a 01 00	leaq	96896(%rip), %rdx ## literal pool for: "Unrecognized MachService property: %s"
10003b215:	4c 89 f7	movq	%r14, %rdi
10003b218:	be 03 00 00 00	movl	$3, %esi
10003b21d:	4c 89 e1	movq	%r12, %rcx
10003b220:	31 c0	xorl	%eax, %eax
10003b222:	e8 1e 34 fd ff	callq	0x10000e645
10003b227:	e9 14 01 00 00	jmp	0x10003b340
10003b22c:	48 89 df	movq	%rbx, %rdi
10003b22f:	e8 9e 6e 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003b234:	4c 89 ff	movq	%r15, %rdi
10003b237:	89 c6	movl	%eax, %esi
10003b239:	e9 fa 00 00 00	jmp	0x10003b338
10003b23e:	31 c0	xorl	%eax, %eax
10003b240:	48 3b 1d 89 ce 01 00	cmpq	118409(%rip), %rbx ## literal pool symbol address: __xpc_bool_true
10003b247:	0f 94 c0	sete	%al
10003b24a:	41 8b 8f 88 00 00 00	movl	136(%r15), %ecx
10003b251:	c1 e0 04	shll	$4, %eax
10003b254:	83 e1 ef	andl	$-17, %ecx
10003b257:	09 c1	orl	%eax, %ecx
10003b259:	66 41 89 8f 88 00 00 00	movw	%cx, 136(%r15)
10003b261:	e9 da 00 00 00	jmp	0x10003b340
10003b266:	48 8d 15 6c 7a 01 00	leaq	96876(%rip), %rdx ## literal pool for: "The HideUntilCheckIn property is an architectural performance issue. Please transition away from it."
10003b26d:	4c 89 f7	movq	%r14, %rdi
10003b270:	be 04 00 00 00	movl	$4, %esi
10003b275:	31 c0	xorl	%eax, %eax
10003b277:	e8 c9 33 fd ff	callq	0x10000e645
10003b27c:	31 c0	xorl	%eax, %eax
10003b27e:	48 3b 1d 4b ce 01 00	cmpq	118347(%rip), %rbx ## literal pool symbol address: __xpc_bool_true
10003b285:	0f 94 c0	sete	%al
10003b288:	41 8b 8f 88 00 00 00	movl	136(%r15), %ecx
10003b28f:	83 e1 fb	andl	$-5, %ecx
10003b292:	8d 04 81	leal	(%rcx,%rax,4), %eax
10003b295:	66 41 89 87 88 00 00 00	movw	%ax, 136(%r15)
10003b29d:	e9 9e 00 00 00	jmp	0x10003b340
10003b2a2:	48 89 df	movq	%rbx, %rdi
10003b2a5:	e8 7c 6e 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003b2aa:	49 89 c4	movq	%rax, %r12
10003b2ad:	48 89 c7	movq	%rax, %rdi
10003b2b0:	e8 fb 68 00 00	callq	0x100041bb0 ## symbol stub for: _mach_task_special_port_for_id
10003b2b5:	89 c3	movl	%eax, %ebx
10003b2b7:	85 c0	testl	%eax, %eax
10003b2b9:	7f 78	jg	0x10003b333
10003b2bb:	48 8d 15 e0 7a 01 00	leaq	96992(%rip), %rdx ## literal pool for: "Tried to set an unknown task-special port: %s"
10003b2c2:	eb 5d	jmp	0x10003b321
10003b2c4:	89 df	movl	%ebx, %edi
10003b2c6:	e8 79 68 00 00	callq	0x100041b44 ## symbol stub for: _mach_host_special_port_description
10003b2cb:	48 8d 15 dc 7b 01 00	leaq	97244(%rip), %rdx ## literal pool for: "Tried to set a reserved host-special port: %lld: %s"
10003b2d2:	4c 89 f7	movq	%r14, %rdi
10003b2d5:	be 03 00 00 00	movl	$3, %esi
10003b2da:	48 89 d9	movq	%rbx, %rcx
10003b2dd:	49 89 c0	movq	%rax, %r8
10003b2e0:	31 c0	xorl	%eax, %eax
10003b2e2:	e8 5e 33 fd ff	callq	0x10000e645
10003b2e7:	eb 57	jmp	0x10003b340
10003b2e9:	48 3b 1d e0 cd 01 00	cmpq	118240(%rip), %rbx ## literal pool symbol address: __xpc_bool_true
10003b2f0:	75 4e	jne	0x10003b340
10003b2f2:	41 80 4f 50 80	orb	$-128, 80(%r15)
10003b2f7:	41 80 8f 89 00 00 00 04	orb	$4, 137(%r15)
10003b2ff:	eb 3f	jmp	0x10003b340
10003b301:	48 89 df	movq	%rbx, %rdi
10003b304:	e8 1d 6e 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003b309:	49 89 c4	movq	%rax, %r12
10003b30c:	48 89 c7	movq	%rax, %rdi
10003b30f:	e8 36 68 00 00	callq	0x100041b4a ## symbol stub for: _mach_host_special_port_for_id
10003b314:	89 c3	movl	%eax, %ebx
10003b316:	85 c0	testl	%eax, %eax
10003b318:	7f 19	jg	0x10003b333
10003b31a:	48 8d 15 af 7a 01 00	leaq	96943(%rip), %rdx ## literal pool for: "Tried to set an unknown host-special port: %s"
10003b321:	4c 89 f7	movq	%r14, %rdi
10003b324:	be 03 00 00 00	movl	$3, %esi
10003b329:	4c 89 e1	movq	%r12, %rcx
10003b32c:	31 c0	xorl	%eax, %eax
10003b32e:	e8 12 33 fd ff	callq	0x10000e645
10003b333:	4c 89 ff	movq	%r15, %rdi
10003b336:	89 de	movl	%ebx, %esi
10003b338:	4c 89 f2	movq	%r14, %rdx
10003b33b:	e8 aa 0a 00 00	callq	0x10003bdea
10003b340:	b0 01	movb	$1, %al
10003b342:	5b	popq	%rbx
10003b343:	41 5c	popq	%r12
10003b345:	41 5e	popq	%r14
10003b347:	41 5f	popq	%r15
10003b349:	5d	popq	%rbp
10003b34a:	c3	retq
10003b34b:	48 8d 15 2c 7b 01 00	leaq	97068(%rip), %rdx ## literal pool for: "Tried to set an invalid host-special port: %lld"
10003b352:	4c 89 f7	movq	%r14, %rdi
10003b355:	be 03 00 00 00	movl	$3, %esi
10003b35a:	48 89 d9	movq	%rbx, %rcx
10003b35d:	e9 be fe ff ff	jmp	0x10003b220
10003b362:	41 80 4f 50 10	orb	$16, 80(%r15)
10003b367:	eb d7	jmp	0x10003b340
10003b369:	55	pushq	%rbp
10003b36a:	48 89 e5	movq	%rsp, %rbp
10003b36d:	80 8f 89 00 00 00 02	orb	$2, 137(%rdi)
10003b374:	5d	popq	%rbp
10003b375:	c3	retq
10003b376:	55	pushq	%rbp
10003b377:	48 89 e5	movq	%rsp, %rbp
10003b37a:	53	pushq	%rbx
10003b37b:	50	pushq	%rax
10003b37c:	48 89 d0	movq	%rdx, %rax
10003b37f:	48 89 f2	movq	%rsi, %rdx
10003b382:	48 89 fb	movq	%rdi, %rbx
10003b385:	48 8d b7 90 00 00 00	leaq	144(%rdi), %rsi
10003b38c:	48 89 c7	movq	%rax, %rdi
10003b38f:	e8 d6 f8 ff ff	callq	0x10003ac6a
10003b394:	0f b7 8b 88 00 00 00	movzwl	136(%rbx), %ecx
10003b39b:	83 e1 04	andl	$4, %ecx
10003b39e:	8b 90 88 00 00 00	movl	136(%rax), %edx
10003b3a4:	83 e2 fb	andl	$-5, %edx
10003b3a7:	09 ca	orl	%ecx, %edx
10003b3a9:	66 89 90 88 00 00 00	movw	%dx, 136(%rax)
10003b3b0:	0f b7 8b 88 00 00 00	movzwl	136(%rbx), %ecx
10003b3b7:	83 e1 10	andl	$16, %ecx
10003b3ba:	83 e2 ef	andl	$-17, %edx
10003b3bd:	09 ca	orl	%ecx, %edx
10003b3bf:	66 89 90 88 00 00 00	movw	%dx, 136(%rax)
10003b3c6:	48 83 c4 08	addq	$8, %rsp
10003b3ca:	5b	popq	%rbx
10003b3cb:	5d	popq	%rbp
10003b3cc:	c3	retq
10003b3cd:	55	pushq	%rbp
10003b3ce:	48 89 e5	movq	%rsp, %rbp
10003b3d1:	41 56	pushq	%r14
10003b3d3:	53	pushq	%rbx
10003b3d4:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b3d9:	0f 85 8d 00 00 00	jne	0x10003b46c
10003b3df:	49 89 fe	movq	%rdi, %r14
10003b3e2:	31 ff	xorl	%edi, %edi
10003b3e4:	31 f6	xorl	%esi, %esi
10003b3e6:	31 d2	xorl	%edx, %edx
10003b3e8:	e8 25 6c 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003b3ed:	48 89 c3	movq	%rax, %rbx
10003b3f0:	48 8b 05 91 cd 01 00	movq	118161(%rip), %rax ## literal pool symbol address: _launch_perfcheck_property_endpoint_name
10003b3f7:	48 8b 30	movq	(%rax), %rsi
10003b3fa:	49 8d 96 90 00 00 00	leaq	144(%r14), %rdx
10003b401:	48 89 df	movq	%rbx, %rdi
10003b404:	e8 93 6c 00 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10003b409:	48 8b 05 68 cd 01 00	movq	118120(%rip), %rax ## literal pool symbol address: _launch_perfcheck_property_endpoint_active
10003b410:	48 8b 30	movq	(%rax), %rsi
10003b413:	41 0f b7 96 88 00 00 00	movzwl	136(%r14), %edx
10003b41b:	83 e2 01	andl	$1, %edx
10003b41e:	48 89 df	movq	%rbx, %rdi
10003b421:	e8 52 6c 00 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10003b426:	48 8b 05 63 cd 01 00	movq	118115(%rip), %rax ## literal pool symbol address: _launch_perfcheck_property_endpoint_needs_activation
10003b42d:	48 8b 30	movq	(%rax), %rsi
10003b430:	41 0f b7 96 88 00 00 00	movzwl	136(%r14), %edx
10003b438:	c1 ea 09	shrl	$9, %edx
10003b43b:	83 e2 01	andl	$1, %edx
10003b43e:	48 89 df	movq	%rbx, %rdi
10003b441:	e8 32 6c 00 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10003b446:	48 8b 05 33 cd 01 00	movq	118067(%rip), %rax ## literal pool symbol address: _launch_perfcheck_property_endpoint_event
10003b44d:	48 8b 30	movq	(%rax), %rsi
10003b450:	41 8a 46 50	movb	80(%r14), %al
10003b454:	24 08	andb	$8, %al
10003b456:	c0 e8 03	shrb	$3, %al
10003b459:	0f b6 d0	movzbl	%al, %edx
10003b45c:	48 89 df	movq	%rbx, %rdi
10003b45f:	e8 14 6c 00 00	callq	0x100042078 ## symbol stub for: _xpc_dictionary_set_bool
10003b464:	48 89 d8	movq	%rbx, %rax
10003b467:	5b	popq	%rbx
10003b468:	41 5e	popq	%r14
10003b46a:	5d	popq	%rbp
10003b46b:	c3	retq
10003b46c:	48 8d 3d 55 76 01 00	leaq	95829(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b473:	31 c0	xorl	%eax, %eax
10003b475:	e8 98 8f ff ff	callq	0x100034412
10003b47a:	55	pushq	%rbp
10003b47b:	48 89 e5	movq	%rsp, %rbp
10003b47e:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b483:	75 1a	jne	0x10003b49f
10003b485:	0f b7 87 88 00 00 00	movzwl	136(%rdi), %eax
10003b48c:	83 e0 05	andl	$5, %eax
10003b48f:	66 83 f8 04	cmpw	$4, %ax
10003b493:	75 04	jne	0x10003b499
10003b495:	31 c0	xorl	%eax, %eax
10003b497:	5d	popq	%rbp
10003b498:	c3	retq
10003b499:	5d	popq	%rbp
10003b49a:	e9 0e 00 00 00	jmp	0x10003b4ad
10003b49f:	48 8d 3d 22 76 01 00	leaq	95778(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b4a6:	31 c0	xorl	%eax, %eax
10003b4a8:	e8 65 8f ff ff	callq	0x100034412
10003b4ad:	55	pushq	%rbp
10003b4ae:	48 89 e5	movq	%rsp, %rbp
10003b4b1:	41 57	pushq	%r15
10003b4b3:	41 56	pushq	%r14
10003b4b5:	41 54	pushq	%r12
10003b4b7:	53	pushq	%rbx
10003b4b8:	48 81 ec 30 01 00 00	subq	$304, %rsp
10003b4bf:	48 8b 05 62 cb 01 00	movq	117602(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003b4c6:	48 8b 00	movq	(%rax), %rax
10003b4c9:	48 89 45 d8	movq	%rax, -40(%rbp)
10003b4cd:	48 8b 47 60	movq	96(%rdi), %rax
10003b4d1:	48 85 c0	testq	%rax, %rax
10003b4d4:	0f 85 96 01 00 00	jne	0x10003b670
10003b4da:	49 89 fc	movq	%rdi, %r12
10003b4dd:	83 e6 07	andl	$7, %esi
10003b4e0:	83 fe 01	cmpl	$1, %esi
10003b4e3:	74 10	je	0x10003b4f5
10003b4e5:	83 fe 02	cmpl	$2, %esi
10003b4e8:	0f 85 b3 01 00 00	jne	0x10003b6a1
10003b4ee:	31 c0	xorl	%eax, %eax
10003b4f0:	e9 7b 01 00 00	jmp	0x10003b670
10003b4f5:	41 0f b7 bc 24 88 00 00 00	movzwl	136(%r12), %edi
10003b4fe:	89 f8	movl	%edi, %eax
10003b500:	66 83 e0 08	andw	$8, %ax
10003b504:	0f 85 86 01 00 00	jne	0x10003b690
10003b50a:	66 83 e7 01	andw	$1, %di
10003b50e:	0f 85 83 01 00 00	jne	0x10003b697
10003b514:	48 8b 05 a5 7e 00 00	movq	32421(%rip), %rax
10003b51b:	48 89 85 c0 fe ff ff	movq	%rax, -320(%rbp)
10003b522:	0f 10 05 87 7e 00 00	movups	32391(%rip), %xmm0
10003b529:	0f 29 85 b0 fe ff ff	movaps	%xmm0, -336(%rbp)
10003b530:	49 8b 44 24 58	movq	88(%r12), %rax
10003b535:	48 8b b8 e8 00 00 00	movq	232(%rax), %rdi
10003b53c:	e8 1b fc fe ff	callq	0x10002b15c
10003b541:	49 89 c7	movq	%rax, %r15
10003b544:	4d 8d b4 24 90 00 00 00	leaq	144(%r12), %r14
10003b54c:	4c 89 f7	movq	%r14, %rdi
10003b54f:	e8 02 69 00 00	callq	0x100041e56 ## symbol stub for: _strlen
10003b554:	4c 3b 3d 3d cb 01 00	cmpq	117565(%rip), %r15
10003b55b:	74 38	je	0x10003b595
10003b55d:	b1 02	movb	$2, %cl
10003b55f:	4c 3b 3d 42 cb 01 00	cmpq	117570(%rip), %r15
10003b566:	74 2f	je	0x10003b597
10003b568:	4c 3b 3d 31 cb 01 00	cmpq	117553(%rip), %r15
10003b56f:	74 26	je	0x10003b597
10003b571:	4c 3b 3d 10 cb 01 00	cmpq	117520(%rip), %r15
10003b578:	74 1d	je	0x10003b597
10003b57a:	b1 05	movb	$5, %cl
10003b57c:	4c 3b 3d 0d cb 01 00	cmpq	117517(%rip), %r15
10003b583:	74 12	je	0x10003b597
10003b585:	49 8b 77 70	movq	112(%r15), %rsi
10003b589:	48 8d 3d b9 79 01 00	leaq	96697(%rip), %rdi ## literal pool for: "Endpoint with unexpected domain type \"%s\""
10003b590:	e9 22 01 00 00	jmp	0x10003b6b7
10003b595:	b1 01	movb	$1, %cl
10003b597:	48 3d ff 00 00 00	cmpq	$255, %rax
10003b59d:	48 8d 05 8c 79 01 00	leaq	96652(%rip), %rax ## literal pool for: "<endpoint name too long>"
10003b5a4:	4c 0f 43 f0	cmovaeq	%rax, %r14
10003b5a8:	0f 57 c0	xorps	%xmm0, %xmm0
10003b5ab:	48 8d 9d d0 fe ff ff	leaq	-304(%rbp), %rbx
10003b5b2:	0f 11 83 ef 00 00 00	movups	%xmm0, 239(%rbx)
10003b5b9:	0f 29 83 e0 00 00 00	movaps	%xmm0, 224(%rbx)
10003b5c0:	0f 29 83 d0 00 00 00	movaps	%xmm0, 208(%rbx)
10003b5c7:	0f 29 83 c0 00 00 00	movaps	%xmm0, 192(%rbx)
10003b5ce:	0f 29 83 b0 00 00 00	movaps	%xmm0, 176(%rbx)
10003b5d5:	0f 29 83 a0 00 00 00	movaps	%xmm0, 160(%rbx)
10003b5dc:	0f 29 83 90 00 00 00	movaps	%xmm0, 144(%rbx)
10003b5e3:	0f 29 83 80 00 00 00	movaps	%xmm0, 128(%rbx)
10003b5ea:	0f 29 43 70	movaps	%xmm0, 112(%rbx)
10003b5ee:	0f 29 43 60	movaps	%xmm0, 96(%rbx)
10003b5f2:	0f 29 43 50	movaps	%xmm0, 80(%rbx)
10003b5f6:	0f 29 43 40	movaps	%xmm0, 64(%rbx)
10003b5fa:	0f 29 43 30	movaps	%xmm0, 48(%rbx)
10003b5fe:	0f 29 43 20	movaps	%xmm0, 32(%rbx)
10003b602:	0f 29 43 10	movaps	%xmm0, 16(%rbx)
10003b606:	0f 29 03	movaps	%xmm0, (%rbx)
10003b609:	88 8b ff 00 00 00	movb	%cl, 255(%rbx)
10003b60f:	ba ff 00 00 00	movl	$255, %edx
10003b614:	b9 ff 00 00 00	movl	$255, %ecx
10003b619:	48 89 df	movq	%rbx, %rdi
10003b61c:	4c 89 f6	movq	%r14, %rsi
10003b61f:	e8 54 61 00 00	callq	0x100041778 ## symbol stub for: ___strlcpy_chk
10003b624:	48 8d bd b0 fe ff ff	leaq	-336(%rbp), %rdi
10003b62b:	c7 07 37 04 00 00	movl	$1079, (%rdi)
10003b631:	48 89 5f 08	movq	%rbx, 8(%rdi)
10003b635:	4c 89 e6	movq	%r12, %rsi
10003b638:	e8 ea e5 fc ff	callq	0x100009c27
10003b63d:	89 c7	movl	%eax, %edi
10003b63f:	be 11 00 00 00	movl	$17, %esi
10003b644:	e8 9b 6a 00 00	callq	0x1000420e4 ## symbol stub for: _xpc_mach_send_create_with_disposition
10003b649:	49 89 44 24 60	movq	%rax, 96(%r12)
10003b64e:	41 0f b7 8c 24 88 00 00 00	movzwl	136(%r12), %ecx
10003b657:	81 e1 02 04 00 00	andl	$1026, %ecx
10003b65d:	66 83 f9 02	cmpw	$2, %cx
10003b661:	75 0d	jne	0x10003b670
10003b663:	4c 89 e7	movq	%r12, %rdi
10003b666:	e8 c4 03 00 00	callq	0x10003ba2f
10003b66b:	49 8b 44 24 60	movq	96(%r12), %rax
10003b670:	48 8b 0d b1 c9 01 00	movq	117169(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10003b677:	48 8b 09	movq	(%rcx), %rcx
10003b67a:	48 3b 4d d8	cmpq	-40(%rbp), %rcx
10003b67e:	75 1c	jne	0x10003b69c
10003b680:	48 81 c4 30 01 00 00	addq	$304, %rsp
10003b687:	5b	popq	%rbx
10003b688:	41 5c	popq	%r12
10003b68a:	41 5e	popq	%r14
10003b68c:	41 5f	popq	%r15
10003b68e:	5d	popq	%rbp
10003b68f:	c3	retq
10003b690:	89 c7	movl	%eax, %edi
10003b692:	e8 7b 5f 00 00	callq	0x100041612
10003b697:	e8 5d 5f 00 00	callq	0x1000415f9
10003b69c:	e8 d1 60 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003b6a1:	83 fe 04	cmpl	$4, %esi
10003b6a4:	75 18	jne	0x10003b6be
10003b6a6:	49 81 c4 90 00 00 00	addq	$144, %r12
10003b6ad:	48 8d 3d 2e 78 01 00	leaq	96302(%rip), %rdi ## literal pool for: "GET_PORT_FORCE for endpoint %s but port not yet made"
10003b6b4:	4c 89 e6	movq	%r12, %rsi
10003b6b7:	31 c0	xorl	%eax, %eax
10003b6b9:	e8 54 8d ff ff	callq	0x100034412
10003b6be:	48 8d 3d 52 78 01 00	leaq	96338(%rip), %rdi ## literal pool for: "Invalid get_port() flags"
10003b6c5:	31 c0	xorl	%eax, %eax
10003b6c7:	e8 46 8d ff ff	callq	0x100034412
10003b6cc:	55	pushq	%rbp
10003b6cd:	48 89 e5	movq	%rsp, %rbp
10003b6d0:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b6d5:	75 06	jne	0x10003b6dd
10003b6d7:	48 8b 47 58	movq	88(%rdi), %rax
10003b6db:	5d	popq	%rbp
10003b6dc:	c3	retq
10003b6dd:	48 8d 3d e4 73 01 00	leaq	95204(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b6e4:	31 c0	xorl	%eax, %eax
10003b6e6:	e8 27 8d ff ff	callq	0x100034412
10003b6eb:	55	pushq	%rbp
10003b6ec:	48 89 e5	movq	%rsp, %rbp
10003b6ef:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b6f4:	75 0c	jne	0x10003b702
10003b6f6:	f6 87 88 00 00 00 08	testb	$8, 136(%rdi)
10003b6fd:	0f 94 c0	sete	%al
10003b700:	5d	popq	%rbp
10003b701:	c3	retq
10003b702:	48 8d 3d bf 73 01 00	leaq	95167(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b709:	31 c0	xorl	%eax, %eax
10003b70b:	e8 02 8d ff ff	callq	0x100034412
10003b710:	55	pushq	%rbp
10003b711:	48 89 e5	movq	%rsp, %rbp
10003b714:	41 57	pushq	%r15
10003b716:	41 56	pushq	%r14
10003b718:	41 55	pushq	%r13
10003b71a:	41 54	pushq	%r12
10003b71c:	53	pushq	%rbx
10003b71d:	50	pushq	%rax
10003b71e:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b723:	0f 85 b5 01 00 00	jne	0x10003b8de
10003b729:	48 89 d3	movq	%rdx, %rbx
10003b72c:	49 89 f7	movq	%rsi, %r15
10003b72f:	49 89 fd	movq	%rdi, %r13
10003b732:	48 8d 8f 90 00 00 00	leaq	144(%rdi), %rcx
10003b739:	48 8d 15 0c de 00 00	leaq	56844(%rip), %rdx ## literal pool for: "\"%s\" = {"
10003b740:	48 89 f7	movq	%rsi, %rdi
10003b743:	48 89 de	movq	%rbx, %rsi
10003b746:	31 c0	xorl	%eax, %eax
10003b748:	e8 25 d5 ff ff	callq	0x100038c72
10003b74d:	48 89 5d d0	movq	%rbx, -48(%rbp)
10003b751:	4c 8d 63 01	leaq	1(%rbx), %r12
10003b755:	4c 89 ef	movq	%r13, %rdi
10003b758:	be 02 00 00 00	movl	$2, %esi
10003b75d:	e8 02 f4 ff ff	callq	0x10003ab64
10003b762:	48 8d 15 8a 73 01 00	leaq	95114(%rip), %rdx ## literal pool for: "port = 0x%x"
10003b769:	4c 89 ff	movq	%r15, %rdi
10003b76c:	4c 89 e6	movq	%r12, %rsi
10003b76f:	89 c1	movl	%eax, %ecx
10003b771:	31 c0	xorl	%eax, %eax
10003b773:	e8 fa d4 ff ff	callq	0x100038c72
10003b778:	41 8b 5d 4c	movl	76(%r13), %ebx
10003b77c:	85 db	testl	%ebx, %ebx
10003b77e:	74 1b	je	0x10003b79b
10003b780:	89 df	movl	%ebx, %edi
10003b782:	e8 bd 63 00 00	callq	0x100041b44 ## symbol stub for: _mach_host_special_port_description
10003b787:	48 8d 15 71 73 01 00	leaq	95089(%rip), %rdx ## literal pool for: "host-special port = %u (%s)"
10003b78e:	4c 89 ff	movq	%r15, %rdi
10003b791:	4c 89 e6	movq	%r12, %rsi
10003b794:	89 d9	movl	%ebx, %ecx
10003b796:	49 89 c0	movq	%rax, %r8
10003b799:	eb 34	jmp	0x10003b7cf
10003b79b:	41 8b 4d 48	movl	72(%r13), %ecx
10003b79f:	85 c9	testl	%ecx, %ecx
10003b7a1:	74 33	je	0x10003b7d6
10003b7a3:	81 f9 80 00 00 00	cmpl	$128, %ecx
10003b7a9:	75 09	jne	0x10003b7b4
10003b7ab:	4c 8d 05 56 23 01 00	leaq	74582(%rip), %r8 ## literal pool for: "exception"
10003b7b2:	eb 0e	jmp	0x10003b7c2
10003b7b4:	89 cf	movl	%ecx, %edi
10003b7b6:	e8 ef 63 00 00	callq	0x100041baa ## symbol stub for: _mach_task_special_port_description
10003b7bb:	49 89 c0	movq	%rax, %r8
10003b7be:	41 8b 4d 48	movl	72(%r13), %ecx
10003b7c2:	48 8d 15 52 73 01 00	leaq	95058(%rip), %rdx ## literal pool for: "task-special port = %u (%s)"
10003b7c9:	4c 89 ff	movq	%r15, %rdi
10003b7cc:	4c 89 e6	movq	%r12, %rsi
10003b7cf:	31 c0	xorl	%eax, %eax
10003b7d1:	e8 9c d4 ff ff	callq	0x100038c72
10003b7d6:	41 0f b7 85 88 00 00 00	movzwl	136(%r13), %eax
10003b7de:	a8 01	testb	$1, %al
10003b7e0:	4c 8d 35 87 bf 00 00	leaq	49031(%rip), %r14 ## literal pool for: "0"
10003b7e7:	48 8d 1d 4a 7c 00 00	leaq	31818(%rip), %rbx ## literal pool for: "1"
10003b7ee:	48 89 d9	movq	%rbx, %rcx
10003b7f1:	49 0f 44 ce	cmoveq	%r14, %rcx
10003b7f5:	48 8d 15 47 de 00 00	leaq	56903(%rip), %rdx ## literal pool for: "active = %s"
10003b7fc:	4c 89 ff	movq	%r15, %rdi
10003b7ff:	4c 89 e6	movq	%r12, %rsi
10003b802:	31 c0	xorl	%eax, %eax
10003b804:	e8 69 d4 ff ff	callq	0x100038c72
10003b809:	41 0f b7 85 88 00 00 00	movzwl	136(%r13), %eax
10003b811:	a8 08	testb	$8, %al
10003b813:	4c 89 f1	movq	%r14, %rcx
10003b816:	48 0f 44 cb	cmoveq	%rbx, %rcx
10003b81a:	48 8d 15 16 73 01 00	leaq	94998(%rip), %rdx ## literal pool for: "managed = %s"
10003b821:	4c 89 ff	movq	%r15, %rdi
10003b824:	4c 89 e6	movq	%r12, %rsi
10003b827:	31 c0	xorl	%eax, %eax
10003b829:	e8 44 d4 ff ff	callq	0x100038c72
10003b82e:	41 0f b7 85 88 00 00 00	movzwl	136(%r13), %eax
10003b836:	a8 10	testb	$16, %al
10003b838:	48 89 d9	movq	%rbx, %rcx
10003b83b:	49 0f 44 ce	cmoveq	%r14, %rcx
10003b83f:	48 8d 15 fe 72 01 00	leaq	94974(%rip), %rdx ## literal pool for: "reset = %s"
10003b846:	4c 89 ff	movq	%r15, %rdi
10003b849:	4c 89 e6	movq	%r12, %rsi
10003b84c:	31 c0	xorl	%eax, %eax
10003b84e:	e8 1f d4 ff ff	callq	0x100038c72
10003b853:	41 0f b7 85 88 00 00 00	movzwl	136(%r13), %eax
10003b85b:	a8 04	testb	$4, %al
10003b85d:	48 89 d9	movq	%rbx, %rcx
10003b860:	49 0f 44 ce	cmoveq	%r14, %rcx
10003b864:	48 8d 15 e4 72 01 00	leaq	94948(%rip), %rdx ## literal pool for: "hide = %s"
10003b86b:	4c 89 ff	movq	%r15, %rdi
10003b86e:	4c 89 e6	movq	%r12, %rsi
10003b871:	31 c0	xorl	%eax, %eax
10003b873:	e8 fa d3 ff ff	callq	0x100038c72
10003b878:	41 0f b7 85 88 00 00 00	movzwl	136(%r13), %eax
10003b880:	a8 02	testb	$2, %al
10003b882:	49 0f 44 de	cmoveq	%r14, %rbx
10003b886:	48 8d 15 cc 72 01 00	leaq	94924(%rip), %rdx ## literal pool for: "watching = %s"
10003b88d:	4c 89 ff	movq	%r15, %rdi
10003b890:	4c 89 e6	movq	%r12, %rsi
10003b893:	48 89 d9	movq	%rbx, %rcx
10003b896:	31 c0	xorl	%eax, %eax
10003b898:	e8 d5 d3 ff ff	callq	0x100038c72
10003b89d:	41 f6 85 89 00 00 00 04	testb	$4, 137(%r13)
10003b8a5:	74 14	je	0x10003b8bb
10003b8a7:	48 8d 15 b9 72 01 00	leaq	94905(%rip), %rdx ## literal pool for: "non-launching = 1"
10003b8ae:	4c 89 ff	movq	%r15, %rdi
10003b8b1:	4c 89 e6	movq	%r12, %rsi
10003b8b4:	31 c0	xorl	%eax, %eax
10003b8b6:	e8 b7 d3 ff ff	callq	0x100038c72
10003b8bb:	48 8d 15 bc d1 00 00	leaq	53692(%rip), %rdx ## literal pool for: "}"
10003b8c2:	4c 89 ff	movq	%r15, %rdi
10003b8c5:	48 8b 75 d0	movq	-48(%rbp), %rsi
10003b8c9:	31 c0	xorl	%eax, %eax
10003b8cb:	48 83 c4 08	addq	$8, %rsp
10003b8cf:	5b	popq	%rbx
10003b8d0:	41 5c	popq	%r12
10003b8d2:	41 5d	popq	%r13
10003b8d4:	41 5e	popq	%r14
10003b8d6:	41 5f	popq	%r15
10003b8d8:	5d	popq	%rbp
10003b8d9:	e9 94 d3 ff ff	jmp	0x100038c72
10003b8de:	48 8d 3d e3 71 01 00	leaq	94691(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b8e5:	31 c0	xorl	%eax, %eax
10003b8e7:	e8 26 8b ff ff	callq	0x100034412
10003b8ec:	55	pushq	%rbp
10003b8ed:	48 89 e5	movq	%rsp, %rbp
10003b8f0:	53	pushq	%rbx
10003b8f1:	50	pushq	%rax
10003b8f2:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003b8f7:	75 7f	jne	0x10003b978
10003b8f9:	48 89 fb	movq	%rdi, %rbx
10003b8fc:	0f b7 87 88 00 00 00	movzwl	136(%rdi), %eax
10003b903:	a8 08	testb	$8, %al
10003b905:	75 7a	jne	0x10003b981
10003b907:	a8 02	testb	$2, %al
10003b909:	75 7f	jne	0x10003b98a
10003b90b:	a8 01	testb	$1, %al
10003b90d:	0f 85 80 00 00 00	jne	0x10003b993
10003b913:	89 c1	movl	%eax, %ecx
10003b915:	83 e1 50	andl	$80, %ecx
10003b918:	66 83 f9 10	cmpw	$16, %cx
10003b91c:	75 0f	jne	0x10003b92d
10003b91e:	48 89 df	movq	%rbx, %rdi
10003b921:	e8 7b 00 00 00	callq	0x10003b9a1
10003b926:	0f b7 83 88 00 00 00	movzwl	136(%rbx), %eax
10003b92d:	83 e0 bd	andl	$-67, %eax
10003b930:	83 c8 02	orl	$2, %eax
10003b933:	66 89 83 88 00 00 00	movw	%ax, 136(%rbx)
10003b93a:	48 8b 7b 58	movq	88(%rbx), %rdi
10003b93e:	be 01 00 00 00	movl	$1, %esi
10003b943:	e8 9c 28 fe ff	callq	0x10001e1e4
10003b948:	84 c0	testb	%al, %al
10003b94a:	74 07	je	0x10003b953
10003b94c:	80 8b 89 00 00 00 04	orb	$4, 137(%rbx)
10003b953:	48 83 7b 60 00	cmpq	$0, 96(%rbx)
10003b958:	74 17	je	0x10003b971
10003b95a:	f6 83 89 00 00 00 04	testb	$4, 137(%rbx)
10003b961:	75 0e	jne	0x10003b971
10003b963:	48 89 df	movq	%rbx, %rdi
10003b966:	48 83 c4 08	addq	$8, %rsp
10003b96a:	5b	popq	%rbx
10003b96b:	5d	popq	%rbp
10003b96c:	e9 be 00 00 00	jmp	0x10003ba2f
10003b971:	48 83 c4 08	addq	$8, %rsp
10003b975:	5b	popq	%rbx
10003b976:	5d	popq	%rbp
10003b977:	c3	retq
10003b978:	48 8d 3d 49 71 01 00	leaq	94537(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003b97f:	eb 19	jmp	0x10003b99a
10003b981:	48 8d 3d f1 71 01 00	leaq	94705(%rip), %rdi ## literal pool for: "attempt to watch unmanaged endpoint"
10003b988:	eb 10	jmp	0x10003b99a
10003b98a:	48 8d 3d 0c 72 01 00	leaq	94732(%rip), %rdi ## literal pool for: "attempt to watch endpoint that is already watched"
10003b991:	eb 07	jmp	0x10003b99a
10003b993:	48 8d 3d 35 72 01 00	leaq	94773(%rip), %rdi ## literal pool for: "attempt to watch an active endpoint"
10003b99a:	31 c0	xorl	%eax, %eax
10003b99c:	e8 71 8a ff ff	callq	0x100034412
10003b9a1:	55	pushq	%rbp
10003b9a2:	48 89 e5	movq	%rsp, %rbp
10003b9a5:	41 56	pushq	%r14
10003b9a7:	53	pushq	%rbx
10003b9a8:	48 83 ec 30	subq	$48, %rsp
10003b9ac:	48 83 7f 70 00	cmpq	$0, 112(%rdi)
10003b9b1:	75 72	jne	0x10003ba25
10003b9b3:	48 89 fb	movq	%rdi, %rbx
10003b9b6:	48 83 7f 68 00	cmpq	$0, 104(%rdi)
10003b9bb:	75 6d	jne	0x10003ba2a
10003b9bd:	4c 8b 73 60	movq	96(%rbx), %r14
10003b9c1:	4d 85 f6	testq	%r14, %r14
10003b9c4:	74 56	je	0x10003ba1c
10003b9c6:	48 c7 43 60 00 00 00 00	movq	$0, 96(%rbx)
10003b9ce:	48 89 df	movq	%rbx, %rdi
10003b9d1:	be 29 00 00 00	movl	$41, %esi
10003b9d6:	e8 f3 6e fd ff	callq	0x1000128ce
10003b9db:	e8 1a 2b fd ff	callq	0x10000e4fa
10003b9e0:	48 8b 0d 31 c6 01 00	movq	116273(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10003b9e7:	48 8d 75 c0	leaq	-64(%rbp), %rsi
10003b9eb:	48 89 0e	movq	%rcx, (%rsi)
10003b9ee:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10003b9f6:	48 8d 0d 24 04 00 00	leaq	1060(%rip), %rcx
10003b9fd:	48 89 4e 10	movq	%rcx, 16(%rsi)
10003ba01:	48 8d 0d 28 ff 01 00	leaq	130856(%rip), %rcx
10003ba08:	48 89 4e 18	movq	%rcx, 24(%rsi)
10003ba0c:	4c 89 76 20	movq	%r14, 32(%rsi)
10003ba10:	48 89 5e 28	movq	%rbx, 40(%rsi)
10003ba14:	48 89 c7	movq	%rax, %rdi
10003ba17:	e8 b8 5e 00 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10003ba1c:	48 83 c4 30	addq	$48, %rsp
10003ba20:	5b	popq	%rbx
10003ba21:	41 5e	popq	%r14
10003ba23:	5d	popq	%rbp
10003ba24:	c3	retq
10003ba25:	e8 19 5c 00 00	callq	0x100041643
10003ba2a:	e8 ff 5b 00 00	callq	0x10004162e
10003ba2f:	55	pushq	%rbp
10003ba30:	48 89 e5	movq	%rsp, %rbp
10003ba33:	41 57	pushq	%r15
10003ba35:	41 56	pushq	%r14
10003ba37:	41 55	pushq	%r13
10003ba39:	41 54	pushq	%r12
10003ba3b:	53	pushq	%rbx
10003ba3c:	48 83 ec 58	subq	$88, %rsp
10003ba40:	49 89 ff	movq	%rdi, %r15
10003ba43:	4c 8b 77 60	movq	96(%rdi), %r14
10003ba47:	4c 89 f7	movq	%r14, %rdi
10003ba4a:	e8 9b 66 00 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10003ba4f:	89 c3	movl	%eax, %ebx
10003ba51:	e8 a4 2a fd ff	callq	0x10000e4fa
10003ba56:	48 8b 3d f3 c5 01 00	movq	116211(%rip), %rdi ## literal pool symbol address: __dispatch_source_type_mach_recv
10003ba5d:	ba 00 80 00 00	movl	$32768, %edx
10003ba62:	48 89 de	movq	%rbx, %rsi
10003ba65:	48 89 c1	movq	%rax, %rcx
10003ba68:	e8 15 5f 00 00	callq	0x100041982 ## symbol stub for: _dispatch_source_create
10003ba6d:	48 89 c3	movq	%rax, %rbx
10003ba70:	48 89 c7	movq	%rax, %rdi
10003ba73:	4c 89 fe	movq	%r15, %rsi
10003ba76:	e8 fb 5e 00 00	callq	0x100041976 ## symbol stub for: _dispatch_set_context
10003ba7b:	4c 89 f7	movq	%r14, %rdi
10003ba7e:	e8 7f 66 00 00	callq	0x100042102 ## symbol stub for: _xpc_retain
10003ba83:	4c 8b 25 8e c5 01 00	movq	116110(%rip), %r12 ## literal pool symbol address: __NSConcreteStackBlock
10003ba8a:	48 8d 75 b0	leaq	-80(%rbp), %rsi
10003ba8e:	4c 89 26	movq	%r12, (%rsi)
10003ba91:	41 bd 00 00 00 40	movl	$1073741824, %r13d
10003ba97:	4c 89 6e 08	movq	%r13, 8(%rsi)
10003ba9b:	48 8d 05 d5 03 00 00	leaq	981(%rip), %rax
10003baa2:	48 89 46 10	movq	%rax, 16(%rsi)
10003baa6:	48 8d 05 a3 fe 01 00	leaq	130723(%rip), %rax
10003baad:	48 89 46 18	movq	%rax, 24(%rsi)
10003bab1:	48 89 5e 20	movq	%rbx, 32(%rsi)
10003bab5:	48 89 df	movq	%rbx, %rdi
10003bab8:	e8 e3 5e 00 00	callq	0x1000419a0 ## symbol stub for: _dispatch_source_set_event_handler
10003babd:	48 8d 75 80	leaq	-128(%rbp), %rsi
10003bac1:	4c 89 26	movq	%r12, (%rsi)
10003bac4:	4c 89 6e 08	movq	%r13, 8(%rsi)
10003bac8:	48 8d 05 c8 03 00 00	leaq	968(%rip), %rax
10003bacf:	48 89 46 10	movq	%rax, 16(%rsi)
10003bad3:	48 8d 05 96 fe 01 00	leaq	130710(%rip), %rax
10003bada:	48 89 46 18	movq	%rax, 24(%rsi)
10003bade:	48 89 5e 20	movq	%rbx, 32(%rsi)
10003bae2:	4c 89 76 28	movq	%r14, 40(%rsi)
10003bae6:	48 89 df	movq	%rbx, %rdi
10003bae9:	e8 ac 5e 00 00	callq	0x10004199a ## symbol stub for: _dispatch_source_set_cancel_handler
10003baee:	48 89 df	movq	%rbx, %rdi
10003baf1:	e8 cc 5d 00 00	callq	0x1000418c2 ## symbol stub for: _dispatch_activate
10003baf6:	4c 89 ff	movq	%r15, %rdi
10003baf9:	be 27 00 00 00	movl	$39, %esi
10003bafe:	e8 cb 6d fd ff	callq	0x1000128ce
10003bb03:	49 83 7f 70 00	cmpq	$0, 112(%r15)
10003bb08:	75 13	jne	0x10003bb1d
10003bb0a:	49 89 5f 70	movq	%rbx, 112(%r15)
10003bb0e:	48 83 c4 58	addq	$88, %rsp
10003bb12:	5b	popq	%rbx
10003bb13:	41 5c	popq	%r12
10003bb15:	41 5d	popq	%r13
10003bb17:	41 5e	popq	%r14
10003bb19:	41 5f	popq	%r15
10003bb1b:	5d	popq	%rbp
10003bb1c:	c3	retq
10003bb1d:	e8 36 5b 00 00	callq	0x100041658
10003bb22:	55	pushq	%rbp
10003bb23:	48 89 e5	movq	%rsp, %rbp
10003bb26:	53	pushq	%rbx
10003bb27:	50	pushq	%rax
10003bb28:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003bb2d:	75 51	jne	0x10003bb80
10003bb2f:	48 89 fb	movq	%rdi, %rbx
10003bb32:	0f b7 87 88 00 00 00	movzwl	136(%rdi), %eax
10003bb39:	a8 08	testb	$8, %al
10003bb3b:	75 4c	jne	0x10003bb89
10003bb3d:	a8 02	testb	$2, %al
10003bb3f:	74 51	je	0x10003bb92
10003bb41:	89 c1	movl	%eax, %ecx
10003bb43:	81 e1 fd ff 00 00	andl	$65533, %ecx
10003bb49:	66 89 8b 88 00 00 00	movw	%cx, 136(%rbx)
10003bb50:	48 83 7b 60 00	cmpq	$0, 96(%rbx)
10003bb55:	48 8b 7b 70	movq	112(%rbx), %rdi
10003bb59:	74 19	je	0x10003bb74
10003bb5b:	25 00 04 00 00	andl	$1024, %eax
10003bb60:	66 85 c0	testw	%ax, %ax
10003bb63:	75 0f	jne	0x10003bb74
10003bb65:	e8 12 5e 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10003bb6a:	48 c7 43 70 00 00 00 00	movq	$0, 112(%rbx)
10003bb72:	eb 05	jmp	0x10003bb79
10003bb74:	48 85 ff	testq	%rdi, %rdi
10003bb77:	75 27	jne	0x10003bba0
10003bb79:	48 83 c4 08	addq	$8, %rsp
10003bb7d:	5b	popq	%rbx
10003bb7e:	5d	popq	%rbp
10003bb7f:	c3	retq
10003bb80:	48 8d 3d 41 6f 01 00	leaq	94017(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003bb87:	eb 10	jmp	0x10003bb99
10003bb89:	48 8d 3d 63 70 01 00	leaq	94307(%rip), %rdi ## literal pool for: "attempt to ignore unmanaged endpoint"
10003bb90:	eb 07	jmp	0x10003bb99
10003bb92:	48 8d 3d 7f 70 01 00	leaq	94335(%rip), %rdi ## literal pool for: "attempt to ignore endpoint that is already ignored"
10003bb99:	31 c0	xorl	%eax, %eax
10003bb9b:	e8 72 88 ff ff	callq	0x100034412
10003bba0:	48 81 c3 90 00 00 00	addq	$144, %rbx
10003bba7:	48 8d 3d 9d 70 01 00	leaq	94365(%rip), %rdi ## literal pool for: "endpoint %s has unexpected receive_source"
10003bbae:	48 89 de	movq	%rbx, %rsi
10003bbb1:	31 c0	xorl	%eax, %eax
10003bbb3:	e8 5a 88 ff ff	callq	0x100034412
10003bbb8:	55	pushq	%rbp
10003bbb9:	48 89 e5	movq	%rsp, %rbp
10003bbbc:	41 56	pushq	%r14
10003bbbe:	53	pushq	%rbx
10003bbbf:	48 8b 5f 20	movq	32(%rdi), %rbx
10003bbc3:	f6 83 88 00 00 00 10	testb	$16, 136(%rbx)
10003bbca:	75 3a	jne	0x10003bc06
10003bbcc:	48 89 df	movq	%rbx, %rdi
10003bbcf:	be 04 00 00 00	movl	$4, %esi
10003bbd4:	e8 8b ef ff ff	callq	0x10003ab64
10003bbd9:	41 89 c6	movl	%eax, %r14d
10003bbdc:	89 c7	movl	%eax, %edi
10003bbde:	48 89 de	movq	%rbx, %rsi
10003bbe1:	e8 ad e0 fc ff	callq	0x100009c93
10003bbe6:	44 89 f7	movl	%r14d, %edi
10003bbe9:	e8 7a e1 fc ff	callq	0x100009d68
10003bbee:	85 c0	testl	%eax, %eax
10003bbf0:	74 1c	je	0x10003bc0e
10003bbf2:	48 63 d0	movslq	%eax, %rdx
10003bbf5:	48 8d 3d 98 ef ff ff	leaq	-4200(%rip), %rdi
10003bbfc:	48 89 de	movq	%rbx, %rsi
10003bbff:	e8 a4 5b 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003bc04:	eb 08	jmp	0x10003bc0e
10003bc06:	48 89 df	movq	%rbx, %rdi
10003bc09:	e8 93 fd ff ff	callq	0x10003b9a1
10003bc0e:	8b 83 88 00 00 00	movl	136(%rbx), %eax
10003bc14:	89 c1	movl	%eax, %ecx
10003bc16:	83 e1 be	andl	$-66, %ecx
10003bc19:	83 c9 40	orl	$64, %ecx
10003bc1c:	66 89 8b 88 00 00 00	movw	%cx, 136(%rbx)
10003bc23:	0f ba e0 08	btl	$8, %eax
10003bc27:	73 0f	jae	0x10003bc38
10003bc29:	48 89 df	movq	%rbx, %rdi
10003bc2c:	e8 f7 00 00 00	callq	0x10003bd28
10003bc31:	80 a3 89 00 00 00 fe	andb	$-2, 137(%rbx)
10003bc38:	48 8b 43 78	movq	120(%rbx), %rax
10003bc3c:	48 8b 93 80 00 00 00	movq	128(%rbx), %rdx
10003bc43:	48 89 df	movq	%rbx, %rdi
10003bc46:	be 01 00 00 00	movl	$1, %esi
10003bc4b:	5b	popq	%rbx
10003bc4c:	41 5e	popq	%r14
10003bc4e:	5d	popq	%rbp
10003bc4f:	ff e0	jmpq	*%rax
10003bc51:	55	pushq	%rbp
10003bc52:	48 89 e5	movq	%rsp, %rbp
10003bc55:	53	pushq	%rbx
10003bc56:	50	pushq	%rax
10003bc57:	48 83 7f 40 00	cmpq	$0, 64(%rdi)
10003bc5c:	0f 85 90 00 00 00	jne	0x10003bcf2
10003bc62:	48 89 fb	movq	%rdi, %rbx
10003bc65:	0f b7 87 88 00 00 00	movzwl	136(%rdi), %eax
10003bc6c:	89 c1	movl	%eax, %ecx
10003bc6e:	83 c9 20	orl	$32, %ecx
10003bc71:	66 89 8f 88 00 00 00	movw	%cx, 136(%rdi)
10003bc78:	a8 02	testb	$2, %al
10003bc7a:	75 0b	jne	0x10003bc87
10003bc7c:	a8 01	testb	$1, %al
10003bc7e:	75 15	jne	0x10003bc95
10003bc80:	48 83 c4 08	addq	$8, %rsp
10003bc84:	5b	popq	%rbx
10003bc85:	5d	popq	%rbp
10003bc86:	c3	retq
10003bc87:	48 89 df	movq	%rbx, %rdi
10003bc8a:	48 83 c4 08	addq	$8, %rsp
10003bc8e:	5b	popq	%rbx
10003bc8f:	5d	popq	%rbp
10003bc90:	e9 8d fe ff ff	jmp	0x10003bb22
10003bc95:	a8 08	testb	$8, %al
10003bc97:	75 16	jne	0x10003bcaf
10003bc99:	48 89 df	movq	%rbx, %rdi
10003bc9c:	be 04 00 00 00	movl	$4, %esi
10003bca1:	e8 be ee ff ff	callq	0x10003ab64
10003bca6:	89 c7	movl	%eax, %edi
10003bca8:	e8 46 e2 ff ff	callq	0x100039ef3
10003bcad:	eb 11	jmp	0x10003bcc0
10003bcaf:	48 8b 7b 68	movq	104(%rbx), %rdi
10003bcb3:	e8 c4 5c 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10003bcb8:	48 c7 43 68 00 00 00 00	movq	$0, 104(%rbx)
10003bcc0:	b8 7e ff ff ff	movl	$4294967166, %eax
10003bcc5:	23 83 88 00 00 00	andl	136(%rbx), %eax
10003bccb:	0d 80 00 00 00	orl	$128, %eax
10003bcd0:	66 89 83 88 00 00 00	movw	%ax, 136(%rbx)
10003bcd7:	48 8b 43 78	movq	120(%rbx), %rax
10003bcdb:	48 8b 93 80 00 00 00	movq	128(%rbx), %rdx
10003bce2:	48 89 df	movq	%rbx, %rdi
10003bce5:	be 01 00 00 00	movl	$1, %esi
10003bcea:	48 83 c4 08	addq	$8, %rsp
10003bcee:	5b	popq	%rbx
10003bcef:	5d	popq	%rbp
10003bcf0:	ff e0	jmpq	*%rax
10003bcf2:	48 8d 3d cf 6d 01 00	leaq	93647(%rip), %rdi ## literal pool for: "alias endpoint given to endpoint interface"
10003bcf9:	31 c0	xorl	%eax, %eax
10003bcfb:	e8 12 87 ff ff	callq	0x100034412
10003bd00:	55	pushq	%rbp
10003bd01:	48 89 e5	movq	%rsp, %rbp
10003bd04:	8b 87 88 00 00 00	movl	136(%rdi), %eax
10003bd0a:	0f ba e0 08	btl	$8, %eax
10003bd0e:	72 16	jb	0x10003bd26
10003bd10:	a8 01	testb	$1, %al
10003bd12:	75 06	jne	0x10003bd1a
10003bd14:	5d	popq	%rbp
10003bd15:	e9 0e 00 00 00	jmp	0x10003bd28
10003bd1a:	0d 00 01 00 00	orl	$256, %eax
10003bd1f:	66 89 87 88 00 00 00	movw	%ax, 136(%rdi)
10003bd26:	5d	popq	%rbp
10003bd27:	c3	retq
10003bd28:	55	pushq	%rbp
10003bd29:	48 89 e5	movq	%rsp, %rbp
10003bd2c:	41 57	pushq	%r15
10003bd2e:	41 56	pushq	%r14
10003bd30:	41 55	pushq	%r13
10003bd32:	41 54	pushq	%r12
10003bd34:	53	pushq	%rbx
10003bd35:	48 83 ec 38	subq	$56, %rsp
10003bd39:	f6 87 88 00 00 00 01	testb	$1, 136(%rdi)
10003bd40:	0f 85 96 00 00 00	jne	0x10003bddc
10003bd46:	49 89 fe	movq	%rdi, %r14
10003bd49:	be 02 00 00 00	movl	$2, %esi
10003bd4e:	e8 11 ee ff ff	callq	0x10003ab64
10003bd53:	41 89 c5	movl	%eax, %r13d
10003bd56:	41 8d 45 01	leal	1(%r13), %eax
10003bd5a:	83 f8 02	cmpl	$2, %eax
10003bd5d:	72 6e	jb	0x10003bdcd
10003bd5f:	bb 14 00 00 00	movl	$20, %ebx
10003bd64:	4c 8d 7d b0	leaq	-80(%rbp), %r15
10003bd68:	4c 8d 25 25 72 01 00	leaq	94757(%rip), %r12 ## literal pool for: "draining message: id = 0x%x"
10003bd6f:	0f 28 05 0a 75 00 00	movaps	29962(%rip), %xmm0
10003bd76:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10003bd7a:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10003bd7e:	c7 04 24 00 00 00 00	movl	$0, (%rsp)
10003bd85:	4c 89 ff	movq	%r15, %rdi
10003bd88:	be 02 01 00 00	movl	$258, %esi
10003bd8d:	31 d2	xorl	%edx, %edx
10003bd8f:	b9 20 00 00 00	movl	$32, %ecx
10003bd94:	45 89 e8	movl	%r13d, %r8d
10003bd97:	45 31 c9	xorl	%r9d, %r9d
10003bd9a:	e8 b1 5d 00 00	callq	0x100041b50 ## symbol stub for: _mach_msg
10003bd9f:	85 c0	testl	%eax, %eax
10003bda1:	74 09	je	0x10003bdac
10003bda3:	3d 03 40 00 10	cmpl	$268451843, %eax
10003bda8:	75 1f	jne	0x10003bdc9
10003bdaa:	eb 21	jmp	0x10003bdcd
10003bdac:	8b 4d c4	movl	-60(%rbp), %ecx
10003bdaf:	4c 89 f7	movq	%r14, %rdi
10003bdb2:	be 05 00 00 00	movl	$5, %esi
10003bdb7:	4c 89 e2	movq	%r12, %rdx
10003bdba:	31 c0	xorl	%eax, %eax
10003bdbc:	e8 f4 ed ff ff	callq	0x10003abb5
10003bdc1:	4c 89 ff	movq	%r15, %rdi
10003bdc4:	e8 8d 5d 00 00	callq	0x100041b56 ## symbol stub for: _mach_msg_destroy
10003bdc9:	ff cb	decl	%ebx
10003bdcb:	75 a2	jne	0x10003bd6f
10003bdcd:	48 83 c4 38	addq	$56, %rsp
10003bdd1:	5b	popq	%rbx
10003bdd2:	41 5c	popq	%r12
10003bdd4:	41 5d	popq	%r13
10003bdd6:	41 5e	popq	%r14
10003bdd8:	41 5f	popq	%r15
10003bdda:	5d	popq	%rbp
10003bddb:	c3	retq
10003bddc:	48 8d 3d 90 71 01 00	leaq	94608(%rip), %rdi ## literal pool for: "attempt to drain active endpoint"
10003bde3:	31 c0	xorl	%eax, %eax
10003bde5:	e8 28 86 ff ff	callq	0x100034412
10003bdea:	89 f1	movl	%esi, %ecx
10003bdec:	83 fe 06	cmpl	$6, %esi
10003bdef:	77 09	ja	0x10003bdfa
10003bdf1:	48 8d 05 37 70 01 00	leaq	94263(%rip), %rax ## literal pool for: "Tried to set a reserved task special port: %d"
10003bdf8:	eb 15	jmp	0x10003be0f
10003bdfa:	83 f9 0b	cmpl	$11, %ecx
10003bdfd:	7f 09	jg	0x10003be08
10003bdff:	55	pushq	%rbp
10003be00:	48 89 e5	movq	%rsp, %rbp
10003be03:	89 4f 48	movl	%ecx, 72(%rdi)
10003be06:	5d	popq	%rbp
10003be07:	c3	retq
10003be08:	48 8d 05 4e 70 01 00	leaq	94286(%rip), %rax ## literal pool for: "Bogus TaskSpecialPort number: %d"
10003be0f:	48 89 d7	movq	%rdx, %rdi
10003be12:	be 03 00 00 00	movl	$3, %esi
10003be17:	48 89 c2	movq	%rax, %rdx
10003be1a:	31 c0	xorl	%eax, %eax
10003be1c:	e9 24 28 fd ff	jmp	0x10000e645
10003be21:	55	pushq	%rbp
10003be22:	48 89 e5	movq	%rsp, %rbp
10003be25:	53	pushq	%rbx
10003be26:	50	pushq	%rax
10003be27:	48 89 fb	movq	%rdi, %rbx
10003be2a:	48 8b 7f 20	movq	32(%rdi), %rdi
10003be2e:	e8 b7 62 00 00	callq	0x1000420ea ## symbol stub for: _xpc_mach_send_get_right
10003be33:	48 8b 53 28	movq	40(%rbx), %rdx
10003be37:	89 c7	movl	%eax, %edi
10003be39:	31 f6	xorl	%esi, %esi
10003be3b:	e8 0e df fc ff	callq	0x100009d4e
10003be40:	85 c0	testl	%eax, %eax
10003be42:	75 1e	jne	0x10003be62
10003be44:	48 8b 7b 20	movq	32(%rbx), %rdi
10003be48:	e8 af 62 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003be4d:	48 8b 7b 28	movq	40(%rbx), %rdi
10003be51:	be 29 00 00 00	movl	$41, %esi
10003be56:	e8 f6 6a fd ff	callq	0x100012951
10003be5b:	48 83 c4 08	addq	$8, %rsp
10003be5f:	5b	popq	%rbx
10003be60:	5d	popq	%rbp
10003be61:	c3	retq
10003be62:	48 63 d0	movslq	%eax, %rdx
10003be65:	48 8b 73 28	movq	40(%rbx), %rsi
10003be69:	48 8d 3d 24 ed ff ff	leaq	-4828(%rip), %rdi
10003be70:	e8 33 59 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003be75:	eb cd	jmp	0x10003be44
10003be77:	55	pushq	%rbp
10003be78:	48 89 e5	movq	%rsp, %rbp
10003be7b:	48 8b 7f 20	movq	32(%rdi), %rdi
10003be7f:	e8 6e 5a 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
10003be84:	48 8b 48 78	movq	120(%rax), %rcx
10003be88:	48 8b 90 80 00 00 00	movq	128(%rax), %rdx
10003be8f:	48 89 c7	movq	%rax, %rdi
10003be92:	31 f6	xorl	%esi, %esi
10003be94:	5d	popq	%rbp
10003be95:	ff e1	jmpq	*%rcx
10003be97:	55	pushq	%rbp
10003be98:	48 89 e5	movq	%rsp, %rbp
10003be9b:	53	pushq	%rbx
10003be9c:	50	pushq	%rax
10003be9d:	48 89 fb	movq	%rdi, %rbx
10003bea0:	48 8b 7f 20	movq	32(%rdi), %rdi
10003bea4:	e8 49 5a 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
10003bea9:	48 89 c7	movq	%rax, %rdi
10003beac:	be 27 00 00 00	movl	$39, %esi
10003beb1:	e8 9b 6a fd ff	callq	0x100012951
10003beb6:	48 8b 7b 28	movq	40(%rbx), %rdi
10003beba:	e8 3d 62 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003bebf:	48 8b 7b 20	movq	32(%rbx), %rdi
10003bec3:	48 83 c4 08	addq	$8, %rsp
10003bec7:	5b	popq	%rbx
10003bec8:	5d	popq	%rbp
10003bec9:	e9 8a 5a 00 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10003bece:	55	pushq	%rbp
10003becf:	48 89 e5	movq	%rsp, %rbp
10003bed2:	53	pushq	%rbx
10003bed3:	50	pushq	%rax
10003bed4:	48 8b 7f 20	movq	32(%rdi), %rdi
10003bed8:	e8 15 5a 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
10003bedd:	48 89 c3	movq	%rax, %rbx
10003bee0:	8b 80 88 00 00 00	movl	136(%rax), %eax
10003bee6:	83 e0 de	andl	$-34, %eax
10003bee9:	83 c8 20	orl	$32, %eax
10003beec:	66 89 83 88 00 00 00	movw	%ax, 136(%rbx)
10003bef3:	48 89 df	movq	%rbx, %rdi
10003bef6:	be 26 00 00 00	movl	$38, %esi
10003befb:	e8 ce 69 fd ff	callq	0x1000128ce
10003bf00:	48 8b 93 80 00 00 00	movq	128(%rbx), %rdx
10003bf07:	48 89 df	movq	%rbx, %rdi
10003bf0a:	be 01 00 00 00	movl	$1, %esi
10003bf0f:	ff 53 78	callq	*120(%rbx)
10003bf12:	48 8b 7b 68	movq	104(%rbx), %rdi
10003bf16:	e8 61 5a 00 00	callq	0x10004197c ## symbol stub for: _dispatch_source_cancel
10003bf1b:	48 c7 43 68 00 00 00 00	movq	$0, 104(%rbx)
10003bf23:	48 89 df	movq	%rbx, %rdi
10003bf26:	be 26 00 00 00	movl	$38, %esi
10003bf2b:	48 83 c4 08	addq	$8, %rsp
10003bf2f:	5b	popq	%rbx
10003bf30:	5d	popq	%rbp
10003bf31:	e9 1b 6a fd ff	jmp	0x100012951
10003bf36:	55	pushq	%rbp
10003bf37:	48 89 e5	movq	%rsp, %rbp
10003bf3a:	53	pushq	%rbx
10003bf3b:	50	pushq	%rax
10003bf3c:	48 89 fb	movq	%rdi, %rbx
10003bf3f:	48 8b 7f 20	movq	32(%rdi), %rdi
10003bf43:	e8 aa 59 00 00	callq	0x1000418f2 ## symbol stub for: _dispatch_get_context
10003bf48:	48 89 c7	movq	%rax, %rdi
10003bf4b:	be 28 00 00 00	movl	$40, %esi
10003bf50:	e8 fc 69 fd ff	callq	0x100012951
10003bf55:	48 8b 7b 28	movq	40(%rbx), %rdi
10003bf59:	e8 9e 61 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003bf5e:	48 8b 7b 20	movq	32(%rbx), %rdi
10003bf62:	48 83 c4 08	addq	$8, %rsp
10003bf66:	5b	popq	%rbx
10003bf67:	5d	popq	%rbp
10003bf68:	e9 eb 59 00 00	jmp	0x100041958 ## symbol stub for: _dispatch_release
10003bf6d:	48 85 ff	testq	%rdi, %rdi
10003bf70:	74 06	je	0x10003bf78
10003bf72:	48 89 f8	movq	%rdi, %rax
10003bf75:	31 d2	xorl	%edx, %edx
10003bf77:	c3	retq
10003bf78:	55	pushq	%rbp
10003bf79:	48 89 e5	movq	%rsp, %rbp
10003bf7c:	e8 ec 56 00 00	callq	0x10004166d
10003bf81:	85 ff	testl	%edi, %edi
10003bf83:	74 05	je	0x10003bf8a
10003bf85:	31 c0	xorl	%eax, %eax
10003bf87:	89 fa	movl	%edi, %edx
10003bf89:	c3	retq
10003bf8a:	55	pushq	%rbp
10003bf8b:	48 89 e5	movq	%rsp, %rbp
10003bf8e:	e8 ec 56 00 00	callq	0x10004167f
10003bf93:	55	pushq	%rbp
10003bf94:	48 89 e5	movq	%rsp, %rbp
10003bf97:	48 8b 05 22 7a 02 00	movq	162338(%rip), %rax
10003bf9e:	5d	popq	%rbp
10003bf9f:	c3	retq
10003bfa0:	55	pushq	%rbp
10003bfa1:	48 89 e5	movq	%rsp, %rbp
10003bfa4:	48 8b 05 1d 7a 02 00	movq	162333(%rip), %rax
10003bfab:	5d	popq	%rbp
10003bfac:	c3	retq
10003bfad:	55	pushq	%rbp
10003bfae:	48 89 e5	movq	%rsp, %rbp
10003bfb1:	41 56	pushq	%r14
10003bfb3:	53	pushq	%rbx
10003bfb4:	48 83 ec 30	subq	$48, %rsp
10003bfb8:	48 8d 3d a4 cb 00 00	leaq	52132(%rip), %rdi ## literal pool for: "kern.bootargs"
10003bfbf:	48 8d 35 0a 7a 02 00	leaq	162314(%rip), %rsi
10003bfc6:	e8 fa 88 ff ff	callq	0x1000348c5
10003bfcb:	48 85 c0	testq	%rax, %rax
10003bfce:	0f 84 dd 08 00 00	je	0x10003c8b1
10003bfd4:	48 83 3d f4 79 02 00 00	cmpq	$0, 162292(%rip)
10003bfdc:	0f 84 cf 08 00 00	je	0x10003c8b1
10003bfe2:	48 8d 35 57 70 01 00	leaq	94295(%rip), %rsi ## literal pool for: "__TEXT"
10003bfe9:	48 8d 15 57 70 01 00	leaq	94295(%rip), %rdx ## literal pool for: "__config"
10003bff0:	31 ff	xorl	%edi, %edi
10003bff2:	e8 92 68 ff ff	callq	0x100032889
10003bff7:	48 89 05 da 79 02 00	movq	%rax, 162266(%rip)
10003bffe:	48 85 c0	testq	%rax, %rax
10003c001:	0f 84 a1 08 00 00	je	0x10003c8a8
10003c007:	48 89 c7	movq	%rax, %rdi
10003c00a:	e8 b7 60 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003c00f:	48 3b 05 ea c0 01 00	cmpq	114922(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003c016:	0f 85 8c 08 00 00	jne	0x10003c8a8
10003c01c:	48 8d 3d 9b ca 00 00	leaq	51867(%rip), %rdi ## literal pool for: "XPC_USERSPACE_REBOOTED"
10003c023:	e8 5c 5a 00 00	callq	0x100041a84 ## symbol stub for: _getenv
10003c028:	48 85 c0	testq	%rax, %rax
10003c02b:	0f 95 05 b6 67 02 00	setne	157622(%rip)
10003c032:	48 8d 3d 44 70 01 00	leaq	94276(%rip), %rdi ## literal pool for: "com.apple.libxpc.launchd"
10003c039:	e8 50 5c 00 00	callq	0x100041c8e ## symbol stub for: _os_variant_has_internal_content
10003c03e:	88 05 91 67 02 00	movb	%al, 157585(%rip)
10003c044:	48 8d 3d 45 74 00 00	leaq	29765(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
10003c04b:	e8 50 5c 00 00	callq	0x100041ca0 ## symbol stub for: _os_variant_is_basesystem
10003c050:	84 c0	testb	%al, %al
10003c052:	74 13	je	0x10003c067
10003c054:	c6 05 77 67 02 00 01	movb	$1, 157559(%rip)
10003c05b:	48 8d 1d 72 67 02 00	leaq	157554(%rip), %rbx
10003c062:	45 31 f6	xorl	%r14d, %r14d
10003c065:	eb 3a	jmp	0x10003c0a1
10003c067:	48 8d 3d cc 71 01 00	leaq	94668(%rip), %rdi ## literal pool for: "Restore"
10003c06e:	e8 c4 0b fd ff	callq	0x10000cc37
10003c073:	41 b6 01	movb	$1, %r14b
10003c076:	48 8d 1d 55 67 02 00	leaq	157525(%rip), %rbx
10003c07d:	84 c0	testb	%al, %al
10003c07f:	75 20	jne	0x10003c0a1
10003c081:	48 8d 3d ba 71 01 00	leaq	94650(%rip), %rdi ## literal pool for: "Ramdisk"
10003c088:	e8 aa 0b fd ff	callq	0x10000cc37
10003c08d:	84 c0	testb	%al, %al
10003c08f:	75 10	jne	0x10003c0a1
10003c091:	48 8d 3d b2 71 01 00	leaq	94642(%rip), %rdi ## literal pool for: "RamDisk"
10003c098:	e8 9a 0b fd ff	callq	0x10000cc37
10003c09d:	84 c0	testb	%al, %al
10003c09f:	74 0a	je	0x10003c0ab
10003c0a1:	c6 03 01	movb	$1, (%rbx)
10003c0a4:	44 88 35 28 67 02 00	movb	%r14b, 157480(%rip)
10003c0ab:	80 3d 1e 67 02 00 00	cmpb	$0, 157470(%rip)
10003c0b2:	74 14	je	0x10003c0c8
10003c0b4:	31 c0	xorl	%eax, %eax
10003c0b6:	88 05 16 67 02 00	movb	%al, 157462(%rip)
10003c0bc:	88 05 12 67 02 00	movb	%al, 157458(%rip)
10003c0c2:	88 05 0b 67 02 00	movb	%al, 157451(%rip)
10003c0c8:	48 8b 1d 01 79 02 00	movq	162049(%rip), %rbx
10003c0cf:	48 8d 35 7c 71 01 00	leaq	94588(%rip), %rsi ## literal pool for: "-v"
10003c0d6:	48 89 df	movq	%rbx, %rdi
10003c0d9:	e8 a2 5d 00 00	callq	0x100041e80 ## symbol stub for: _strstr
10003c0de:	48 85 c0	testq	%rax, %rax
10003c0e1:	0f 95 05 ee 66 02 00	setne	157422(%rip)
10003c0e8:	48 8d 35 66 71 01 00	leaq	94566(%rip), %rsi ## literal pool for: "-no-corpses"
10003c0ef:	48 89 df	movq	%rbx, %rdi
10003c0f2:	e8 89 5d 00 00	callq	0x100041e80 ## symbol stub for: _strstr
10003c0f7:	48 85 c0	testq	%rax, %rax
10003c0fa:	0f 95 05 07 67 02 00	setne	157447(%rip)
10003c101:	74 1b	je	0x10003c11e
10003c103:	48 8b 3d a6 bf 01 00	movq	114598(%rip), %rdi ## literal pool symbol address: __os_alloc_once_table
10003c10a:	48 83 7f 10 ff	cmpq	$-1, 16(%rdi)
10003c10f:	0f 85 65 07 00 00	jne	0x10003c87a
10003c115:	48 8b 47 18	movq	24(%rdi), %rax
10003c119:	b1 01	movb	$1, %cl
10003c11b:	88 48 2b	movb	%cl, 43(%rax)
10003c11e:	48 8d 35 3c 71 01 00	leaq	94524(%rip), %rsi ## literal pool for: "launchd_force_data_status="
10003c125:	48 89 df	movq	%rbx, %rdi
10003c128:	31 d2	xorl	%edx, %edx
10003c12a:	e8 f8 89 ff ff	callq	0x100034b27
10003c12f:	48 89 05 ba 66 02 00	movq	%rax, 157370(%rip)
10003c136:	48 8b 1d 93 78 02 00	movq	161939(%rip), %rbx
10003c13d:	48 8d 35 38 71 01 00	leaq	94520(%rip), %rsi ## literal pool for: "serverperfmode=1"
10003c144:	48 89 df	movq	%rbx, %rdi
10003c147:	e8 34 5d 00 00	callq	0x100041e80 ## symbol stub for: _strstr
10003c14c:	48 85 c0	testq	%rax, %rax
10003c14f:	0f 95 05 96 66 02 00	setne	157334(%rip)
10003c156:	48 8d 35 30 71 01 00	leaq	94512(%rip), %rsi ## literal pool for: "rc.trampoline="
10003c15d:	48 89 df	movq	%rbx, %rdi
10003c160:	e8 23 8a ff ff	callq	0x100034b88
10003c165:	48 85 c0	testq	%rax, %rax
10003c168:	0f 95 05 7e 66 02 00	setne	157310(%rip)
10003c16f:	48 8b 3d 5a 78 02 00	movq	161882(%rip), %rdi
10003c176:	48 8d 35 1f 71 01 00	leaq	94495(%rip), %rsi ## literal pool for: "launchd_instance_limit="
10003c17d:	31 d2	xorl	%edx, %edx
10003c17f:	e8 a3 89 ff ff	callq	0x100034b27
10003c184:	48 89 05 4d 66 02 00	movq	%rax, 157261(%rip)
10003c18b:	48 8b 3d 3e 78 02 00	movq	161854(%rip), %rdi
10003c192:	48 8d 35 1b 71 01 00	leaq	94491(%rip), %rsi ## literal pool for: "launchd_usr_abandon_unmanaged="
10003c199:	e8 ea 89 ff ff	callq	0x100034b88
10003c19e:	48 85 c0	testq	%rax, %rax
10003c1a1:	0f 95 05 41 66 02 00	setne	157249(%rip)
10003c1a8:	48 8b 3d 21 78 02 00	movq	161825(%rip), %rdi
10003c1af:	48 8d 35 1d 71 01 00	leaq	94493(%rip), %rsi ## literal pool for: "launchd_verbose_coalition_logs="
10003c1b6:	e8 cd 89 ff ff	callq	0x100034b88
10003c1bb:	48 85 c0	testq	%rax, %rax
10003c1be:	0f 95 05 25 66 02 00	setne	157221(%rip)
10003c1c5:	48 8b 3d 04 78 02 00	movq	161796(%rip), %rdi
10003c1cc:	48 8d 35 f2 86 ff ff	leaq	-30990(%rip), %rsi
10003c1d3:	e8 4e 55 fc ff	callq	0x100001726
10003c1d8:	e8 31 8d ff ff	callq	0x100034f0e
10003c1dd:	84 c0	testb	%al, %al
10003c1df:	74 07	je	0x10003c1e8
10003c1e1:	c6 05 03 66 02 00 01	movb	$1, 157187(%rip)
10003c1e8:	48 8d 5d d0	leaq	-48(%rbp), %rbx
10003c1ec:	c7 03 00 00 00 00	movl	$0, (%rbx)
10003c1f2:	48 8d 55 c8	leaq	-56(%rbp), %rdx
10003c1f6:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10003c1fd:	48 8d 3d 92 6e 01 00	leaq	93842(%rip), %rdi ## literal pool for: "kern.minimalboot"
10003c204:	48 89 de	movq	%rbx, %rsi
10003c207:	31 c9	xorl	%ecx, %ecx
10003c209:	45 31 c0	xorl	%r8d, %r8d
10003c20c:	e8 99 5c 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
10003c211:	83 3b 00	cmpl	$0, (%rbx)
10003c214:	74 0a	je	0x10003c220
10003c216:	48 8d 05 4d 65 02 00	leaq	157005(%rip), %rax
10003c21d:	c6 00 01	movb	$1, (%rax)
10003c220:	48 8d 75 e0	leaq	-32(%rbp), %rsi
10003c224:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10003c22b:	48 8d 3d 75 6e 01 00	leaq	93813(%rip), %rdi ## literal pool for: "kern.osrelease"
10003c232:	e8 8e 86 ff ff	callq	0x1000348c5
10003c237:	48 85 c0	testq	%rax, %rax
10003c23a:	74 14	je	0x10003c250
10003c23c:	48 8b 7d e0	movq	-32(%rbp), %rdi
10003c240:	31 f6	xorl	%esi, %esi
10003c242:	31 d2	xorl	%edx, %edx
10003c244:	e8 43 5c 00 00	callq	0x100041e8c ## symbol stub for: _strtoul
10003c249:	48 89 05 40 65 02 00	movq	%rax, 156992(%rip)
10003c250:	48 8b 7d e0	movq	-32(%rbp), %rdi
10003c254:	e8 d7 57 00 00	callq	0x100041a30 ## symbol stub for: _free
10003c259:	48 8d 75 d4	leaq	-44(%rbp), %rsi
10003c25d:	c7 06 00 04 00 00	movl	$1024, (%rsi)
10003c263:	48 8d 1d 16 66 02 00	leaq	157206(%rip), %rbx
10003c26a:	48 89 df	movq	%rbx, %rdi
10003c26d:	e8 dc 54 00 00	callq	0x10004174e ## symbol stub for: __NSGetExecutablePath
10003c272:	48 89 df	movq	%rbx, %rdi
10003c275:	be 2f 00 00 00	movl	$47, %esi
10003c27a:	e8 ef 5b 00 00	callq	0x100041e6e ## symbol stub for: _strrchr
10003c27f:	48 8d 48 01	leaq	1(%rax), %rcx
10003c283:	48 85 c0	testq	%rax, %rax
10003c286:	48 8d 05 29 6e 01 00	leaq	93737(%rip), %rax ## literal pool for: "launchd"
10003c28d:	48 0f 45 c1	cmovneq	%rcx, %rax
10003c291:	48 89 05 f0 64 02 00	movq	%rax, 156912(%rip)
10003c298:	bf 02 00 00 00	movl	$2, %edi
10003c29d:	e8 ea 55 00 00	callq	0x10004188c ## symbol stub for: _csr_check
10003c2a2:	85 c0	testl	%eax, %eax
10003c2a4:	0f 95 05 e5 63 02 00	setne	156645(%rip)
10003c2ab:	48 8b 3d 26 77 02 00	movq	161574(%rip), %rdi
10003c2b2:	48 8d 35 3a 70 01 00	leaq	94266(%rip), %rsi ## literal pool for: "LogServiceLifecycle"
10003c2b9:	e8 78 5d 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c2be:	88 05 45 65 02 00	movb	%al, 156997(%rip)
10003c2c4:	48 8b 3d 0d 77 02 00	movq	161549(%rip), %rdi
10003c2cb:	48 8d 35 35 70 01 00	leaq	94261(%rip), %rsi ## literal pool for: "LogIPC"
10003c2d2:	e8 5f 5d 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c2d7:	88 05 2f 65 02 00	movb	%al, 156975(%rip)
10003c2dd:	48 8d 3d 26 65 02 00	leaq	156966(%rip), %rdi
10003c2e4:	48 8d 35 23 70 01 00	leaq	94243(%rip), %rsi ## literal pool for: "LogToConsole"
10003c2eb:	48 8d 15 29 70 01 00	leaq	94249(%rip), %rdx ## literal pool for: "launchd_log_serial="
10003c2f2:	e8 fb 0f 00 00	callq	0x10003d2f2
10003c2f7:	48 8b 3d da 76 02 00	movq	161498(%rip), %rdi
10003c2fe:	48 8d 35 2a 70 01 00	leaq	94250(%rip), %rsi ## literal pool for: "UseGuardMalloc"
10003c305:	e8 2c 5d 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c30a:	88 05 d3 64 02 00	movb	%al, 156883(%rip)
10003c310:	48 8b 3d c1 76 02 00	movq	161473(%rip), %rdi
10003c317:	48 8d 35 20 70 01 00	leaq	94240(%rip), %rsi ## literal pool for: "UseNanoAllocator"
10003c31e:	e8 13 5d 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c323:	88 05 bb 64 02 00	movb	%al, 156859(%rip)
10003c329:	48 8b 3d a8 76 02 00	movq	161448(%rip), %rdi
10003c330:	48 8d 35 18 70 01 00	leaq	94232(%rip), %rsi ## literal pool for: "AbortOnUnknownIPC"
10003c337:	e8 fa 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c33c:	88 05 a3 64 02 00	movb	%al, 156835(%rip)
10003c342:	48 8b 3d 8f 76 02 00	movq	161423(%rip), %rdi
10003c349:	48 8d 35 11 70 01 00	leaq	94225(%rip), %rsi ## literal pool for: "RequireDomainBinding"
10003c350:	e8 e1 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c355:	88 05 8b 64 02 00	movb	%al, 156811(%rip)
10003c35b:	48 8b 3d 76 76 02 00	movq	161398(%rip), %rdi
10003c362:	48 8d 35 0d 70 01 00	leaq	94221(%rip), %rsi ## literal pool for: "LogToFlatFile"
10003c369:	e8 c8 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c36e:	88 05 63 64 02 00	movb	%al, 156771(%rip)
10003c374:	48 8d 3d fd 62 02 00	leaq	156413(%rip), %rdi
10003c37b:	48 8d 35 02 70 01 00	leaq	94210(%rip), %rsi ## literal pool for: "LogFileMaxSize"
10003c382:	e8 c9 0f 00 00	callq	0x10003d350
10003c387:	48 8d 3d f2 62 02 00	leaq	156402(%rip), %rdi
10003c38e:	48 8d 35 fe 6f 01 00	leaq	94206(%rip), %rsi ## literal pool for: "LogFileVerboseMetaLimit"
10003c395:	48 8d 15 0f 70 01 00	leaq	94223(%rip), %rdx ## literal pool for: "launchd_log_verbose_meta_limit="
10003c39c:	e8 ee 0f 00 00	callq	0x10003d38f
10003c3a1:	48 8b 3d 30 76 02 00	movq	161328(%rip), %rdi
10003c3a8:	48 8d 35 1c 70 01 00	leaq	94236(%rip), %rsi ## literal pool for: "LogAllBootstrapErrors"
10003c3af:	e8 82 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c3b4:	88 05 26 64 02 00	movb	%al, 156710(%rip)
10003c3ba:	48 8b 3d 17 76 02 00	movq	161303(%rip), %rdi
10003c3c1:	48 8d 35 19 70 01 00	leaq	94233(%rip), %rsi ## literal pool for: "LogPerformanceStatistics"
10003c3c8:	e8 69 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c3cd:	88 05 38 64 02 00	movb	%al, 156728(%rip)
10003c3d3:	48 8b 3d fe 75 02 00	movq	161278(%rip), %rdi
10003c3da:	48 8d 35 19 70 01 00	leaq	94233(%rip), %rsi ## literal pool for: "PureOnDemand"
10003c3e1:	e8 50 5c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c3e6:	88 05 f5 63 02 00	movb	%al, 156661(%rip)
10003c3ec:	48 83 3d e4 63 02 00 00	cmpq	$0, 156644(%rip)
10003c3f4:	75 65	jne	0x10003c45b
10003c3f6:	48 8d 5d d8	leaq	-40(%rbp), %rbx
10003c3fa:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10003c401:	48 8d 35 ff 6f 01 00	leaq	94207(%rip), %rsi ## literal pool for: "MultipleInstanceLimit"
10003c408:	48 89 df	movq	%rbx, %rdi
10003c40b:	e8 40 0f 00 00	callq	0x10003d350
10003c410:	48 8b 03	movq	(%rbx), %rax
10003c413:	48 85 c0	testq	%rax, %rax
10003c416:	7f 3c	jg	0x10003c454
10003c418:	48 8d 75 ec	leaq	-20(%rbp), %rsi
10003c41c:	c7 06 00 00 00 00	movl	$0, (%rsi)
10003c422:	48 8d 55 c0	leaq	-64(%rbp), %rdx
10003c426:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10003c42d:	48 8d 3d 3f 4e 01 00	leaq	85567(%rip), %rdi ## literal pool for: "kern.maxproc"
10003c434:	31 c9	xorl	%ecx, %ecx
10003c436:	45 31 c0	xorl	%r8d, %r8d
10003c439:	e8 6c 5a 00 00	callq	0x100041eaa ## symbol stub for: _sysctlbyname
10003c43e:	85 c0	testl	%eax, %eax
10003c440:	0f 85 56 04 00 00	jne	0x10003c89c
10003c446:	8b 45 ec	movl	-20(%rbp), %eax
10003c449:	85 c0	testl	%eax, %eax
10003c44b:	0f 8e 52 04 00 00	jle	0x10003c8a3
10003c451:	48 d1 e8	shrq	%rax
10003c454:	48 89 05 7d 63 02 00	movq	%rax, 156541(%rip)
10003c45b:	48 8d 3d f6 61 02 00	leaq	156150(%rip), %rdi
10003c462:	48 8d 35 b4 6f 01 00	leaq	94132(%rip), %rsi ## literal pool for: "SIGTERMTimeout"
10003c469:	31 d2	xorl	%edx, %edx
10003c46b:	e8 1f 0f 00 00	callq	0x10003d38f
10003c470:	48 8d 3d e5 61 02 00	leaq	156133(%rip), %rdi
10003c477:	48 8d 35 ae 6f 01 00	leaq	94126(%rip), %rsi ## literal pool for: "SIGKILLTimeout"
10003c47e:	31 d2	xorl	%edx, %edx
10003c480:	e8 0a 0f 00 00	callq	0x10003d38f
10003c485:	48 8b 3d 4c 75 02 00	movq	161100(%rip), %rdi
10003c48c:	48 8d 35 a8 6f 01 00	leaq	94120(%rip), %rsi ## literal pool for: "CrashOnSIGTERMTimeout"
10003c493:	e8 9e 5b 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c498:	88 05 16 63 02 00	movb	%al, 156438(%rip)
10003c49e:	48 8b 3d 33 75 02 00	movq	161075(%rip), %rdi
10003c4a5:	48 8d 35 a5 6f 01 00	leaq	94117(%rip), %rsi ## literal pool for: "ExtensionWatchdog"
10003c4ac:	e8 85 5b 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c4b1:	88 05 a9 63 02 00	movb	%al, 156585(%rip)
10003c4b7:	48 8d 3d a2 61 02 00	leaq	156066(%rip), %rdi
10003c4be:	48 8d 35 9e 6f 01 00	leaq	94110(%rip), %rsi ## literal pool for: "ExtensionWatchdogTimeout"
10003c4c5:	31 d2	xorl	%edx, %edx
10003c4c7:	e8 c3 0e 00 00	callq	0x10003d38f
10003c4cc:	48 8d 3d 91 61 02 00	leaq	156049(%rip), %rdi
10003c4d3:	48 8d 35 a2 6f 01 00	leaq	94114(%rip), %rsi ## literal pool for: "ShutdownTimeout"
10003c4da:	31 d2	xorl	%edx, %edx
10003c4dc:	e8 ae 0e 00 00	callq	0x10003d38f
10003c4e1:	48 8d 3d 98 67 02 00	leaq	157592(%rip), %rdi
10003c4e8:	48 8d 35 9d 6f 01 00	leaq	94109(%rip), %rsi ## literal pool for: "ShutdownReportTimeout"
10003c4ef:	48 8d 15 ac 6f 01 00	leaq	94124(%rip), %rdx ## literal pool for: "launchd_shutdown_report_timeout="
10003c4f6:	e8 94 0e 00 00	callq	0x10003d38f
10003c4fb:	80 3d d2 62 02 00 00	cmpb	$0, 156370(%rip)
10003c502:	74 0a	je	0x10003c50e
10003c504:	c7 05 72 67 02 00 00 00 00 00	movl	$0, 157554(%rip)
10003c50e:	48 8d 3d 5f 61 02 00	leaq	155999(%rip), %rdi
10003c515:	48 8d 35 a7 6f 01 00	leaq	94119(%rip), %rsi ## literal pool for: "HighWatermark"
10003c51c:	31 d2	xorl	%edx, %edx
10003c51e:	e8 6c 0e 00 00	callq	0x10003d38f
10003c523:	48 8b 3d ae 74 02 00	movq	160942(%rip), %rdi
10003c52a:	48 8d 35 a0 6f 01 00	leaq	94112(%rip), %rsi ## literal pool for: "DisableAllMemoryLimit"
10003c531:	e8 00 5b 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c536:	88 05 7b 62 02 00	movb	%al, 156283(%rip)
10003c53c:	48 8b 3d 95 74 02 00	movq	160917(%rip), %rdi
10003c543:	48 8d 35 9d 6f 01 00	leaq	94109(%rip), %rsi ## literal pool for: "DisableExtensionMemoryLimit"
10003c54a:	e8 e7 5a 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003c54f:	88 05 63 62 02 00	movb	%al, 156259(%rip)
10003c555:	48 8d 3d 21 6b 01 00	leaq	92961(%rip), %rdi ## literal pool for: "com.apple.libxpc.launchd"
10003c55c:	e8 21 57 00 00	callq	0x100041c82 ## symbol stub for: _os_variant_allows_internal_security_policies
10003c561:	84 c0	testb	%al, %al
10003c563:	74 19	je	0x10003c57e
10003c565:	48 8d 3d 97 6f 01 00	leaq	94103(%rip), %rdi ## literal pool for: "/usr/local/share/launchd-disable-memory-limits"
10003c56c:	31 f6	xorl	%esi, %esi
10003c56e:	e8 71 52 00 00	callq	0x1000417e4 ## symbol stub for: _access
10003c573:	85 c0	testl	%eax, %eax
10003c575:	75 07	jne	0x10003c57e
10003c577:	c6 05 39 62 02 00 01	movb	$1, 156217(%rip)
10003c57e:	48 8d 3d eb 60 02 00	leaq	155883(%rip), %rdi
10003c585:	48 8d 35 a6 6f 01 00	leaq	94118(%rip), %rsi ## literal pool for: "SyncInterval"
10003c58c:	48 8d 15 ac 6f 01 00	leaq	94124(%rip), %rdx ## literal pool for: "launchd_sync_interval="
10003c593:	e8 f7 0d 00 00	callq	0x10003d38f
10003c598:	48 8d 3d 41 74 02 00	leaq	160833(%rip), %rdi
10003c59f:	48 8d 35 b6 ca 00 00	leaq	51894(%rip), %rsi ## literal pool for: "Bootstrap"
10003c5a6:	48 8b 15 53 bb 01 00	movq	113491(%rip), %rdx ## literal pool symbol address: __xpc_type_dictionary
10003c5ad:	e8 56 0e 00 00	callq	0x10003d408
10003c5b2:	48 8d 5d d8	leaq	-40(%rbp), %rbx
10003c5b6:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
10003c5bd:	48 8d 35 92 6f 01 00	leaq	94098(%rip), %rsi ## literal pool for: "PivotRootOutgoingDestination"
10003c5c4:	48 8b 15 5d bb 01 00	movq	113501(%rip), %rdx ## literal pool symbol address: __xpc_type_string
10003c5cb:	48 89 df	movq	%rbx, %rdi
10003c5ce:	e8 35 0e 00 00	callq	0x10003d408
10003c5d3:	48 8b 3b	movq	(%rbx), %rdi
10003c5d6:	48 85 ff	testq	%rdi, %rdi
10003c5d9:	74 14	je	0x10003c5ef
10003c5db:	e8 46 5b 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003c5e0:	48 89 c7	movq	%rax, %rdi
10003c5e3:	e8 fa 29 fd ff	callq	0x10000efe2
10003c5e8:	48 89 05 99 60 02 00	movq	%rax, 155801(%rip)
10003c5ef:	48 8d 3d bf 61 02 00	leaq	156095(%rip), %rdi
10003c5f6:	48 8d 35 76 6f 01 00	leaq	94070(%rip), %rsi ## literal pool for: "SuddenShutdown"
10003c5fd:	48 8d 15 7e 6f 01 00	leaq	94078(%rip), %rdx ## literal pool for: "launchd_sudden_shutdown="
10003c604:	e8 e9 0c 00 00	callq	0x10003d2f2
10003c609:	48 8d 3d a6 61 02 00	leaq	156070(%rip), %rdi
10003c610:	48 8d 35 84 6f 01 00	leaq	94084(%rip), %rsi ## literal pool for: "ServiceStubsDisabled"
10003c617:	48 8d 15 92 6f 01 00	leaq	94098(%rip), %rdx ## literal pool for: "launch_service_stubs_disabled="
10003c61e:	e8 cf 0c 00 00	callq	0x10003d2f2
10003c623:	48 8b 3d a6 73 02 00	movq	160678(%rip), %rdi
10003c62a:	48 8d 35 8d 6a 01 00	leaq	92813(%rip), %rsi ## literal pool for: "launchd_disable_all_timeouts="
10003c631:	31 db	xorl	%ebx, %ebx
10003c633:	31 d2	xorl	%edx, %edx
10003c635:	e8 ed 84 ff ff	callq	0x100034b27
10003c63a:	48 85 c0	testq	%rax, %rax
10003c63d:	74 1d	je	0x10003c65c
10003c63f:	c7 05 13 60 02 00 58 02 00 00	movl	$600, 155667(%rip)
10003c649:	c6 05 10 62 02 00 00	movb	$0, 156176(%rip)
10003c650:	89 1d 0e 60 02 00	movl	%ebx, 155662(%rip)
10003c656:	89 1d 24 66 02 00	movl	%ebx, 157220(%rip)
10003c65c:	48 8b 3d 7d 73 02 00	movq	160637(%rip), %rdi
10003c663:	48 85 ff	testq	%rdi, %rdi
10003c666:	0f 84 ad 01 00 00	je	0x10003c819
10003c66c:	80 3d 78 61 02 00 00	cmpb	$0, 156024(%rip)
10003c673:	48 8d 05 63 6f 01 00	leaq	94051(%rip), %rax ## literal pool for: "Paths"
10003c67a:	48 8d 35 4e 6f 01 00	leaq	94030(%rip), %rsi ## literal pool for: "SafeBootPaths"
10003c681:	48 0f 44 f0	cmoveq	%rax, %rsi
10003c685:	e8 e2 59 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003c68a:	48 85 c0	testq	%rax, %rax
10003c68d:	74 1b	je	0x10003c6aa
10003c68f:	48 89 c3	movq	%rax, %rbx
10003c692:	48 89 c7	movq	%rax, %rdi
10003c695:	e8 2c 5a 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003c69a:	48 3b 05 37 ba 01 00	cmpq	113207(%rip), %rax ## literal pool symbol address: __xpc_type_array
10003c6a1:	75 07	jne	0x10003c6aa
10003c6a3:	48 89 1d f6 60 02 00	movq	%rbx, 155894(%rip)
10003c6aa:	80 3d 3a 61 02 00 00	cmpb	$0, 155962(%rip)
10003c6b1:	48 8d 05 3d 6f 01 00	leaq	94013(%rip), %rax ## literal pool for: "UserPaths"
10003c6b8:	48 8d 35 24 6f 01 00	leaq	93988(%rip), %rsi ## literal pool for: "SafeBootUserPaths"
10003c6bf:	48 0f 44 f0	cmoveq	%rax, %rsi
10003c6c3:	48 8b 3d 16 73 02 00	movq	160534(%rip), %rdi
10003c6ca:	e8 9d 59 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003c6cf:	48 85 c0	testq	%rax, %rax
10003c6d2:	74 1b	je	0x10003c6ef
10003c6d4:	48 89 c3	movq	%rax, %rbx
10003c6d7:	48 89 c7	movq	%rax, %rdi
10003c6da:	e8 e7 59 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003c6df:	48 3b 05 f2 b9 01 00	cmpq	113138(%rip), %rax ## literal pool symbol address: __xpc_type_array
10003c6e6:	75 07	jne	0x10003c6ef
10003c6e8:	48 89 1d b9 60 02 00	movq	%rbx, 155833(%rip)
10003c6ef:	e8 ab 09 00 00	callq	0x10003d09f
10003c6f4:	48 89 c3	movq	%rax, %rbx
10003c6f7:	80 3d d6 60 02 00 00	cmpb	$0, 155862(%rip)
10003c6fe:	74 29	je	0x10003c729
10003c700:	48 85 db	testq	%rbx, %rbx
10003c703:	75 0e	jne	0x10003c713
10003c705:	31 ff	xorl	%edi, %edi
10003c707:	31 f6	xorl	%esi, %esi
10003c709:	31 d2	xorl	%edx, %edx
10003c70b:	e8 02 59 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003c710:	48 89 c3	movq	%rax, %rbx
10003c713:	48 8d 35 e5 6e 01 00	leaq	93925(%rip), %rsi ## literal pool for: "__OSINSTALL_ENVIRONMENT"
10003c71a:	48 8d 15 17 6d 00 00	leaq	27927(%rip), %rdx ## literal pool for: "1"
10003c721:	48 89 df	movq	%rbx, %rdi
10003c724:	e8 73 59 00 00	callq	0x10004209c ## symbol stub for: _xpc_dictionary_set_string
10003c729:	48 85 db	testq	%rbx, %rbx
10003c72c:	74 11	je	0x10003c73f
10003c72e:	48 8d 15 12 0d 00 00	leaq	3346(%rip), %rdx
10003c735:	48 89 df	movq	%rbx, %rdi
10003c738:	31 f6	xorl	%esi, %esi
10003c73a:	e8 c7 58 00 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10003c73f:	48 8b 3d 9a 72 02 00	movq	160410(%rip), %rdi
10003c746:	48 8d 35 ca 6e 01 00	leaq	93898(%rip), %rsi ## literal pool for: "ChildDefaults"
10003c74d:	e8 1a 59 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003c752:	48 85 c0	testq	%rax, %rax
10003c755:	74 2a	je	0x10003c781
10003c757:	48 89 c3	movq	%rax, %rbx
10003c75a:	48 89 c7	movq	%rax, %rdi
10003c75d:	e8 64 59 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003c762:	48 3b 05 97 b9 01 00	cmpq	113047(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003c769:	75 16	jne	0x10003c781
10003c76b:	48 8d 35 fe 60 02 00	leaq	155902(%rip), %rsi
10003c772:	48 8d 15 ce 0c 00 00	leaq	3278(%rip), %rdx
10003c779:	48 89 df	movq	%rbx, %rdi
10003c77c:	e8 85 58 00 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10003c781:	e8 d6 08 00 00	callq	0x10003d05c
10003c786:	48 85 c0	testq	%rax, %rax
10003c789:	0f 84 8a 00 00 00	je	0x10003c819
10003c78f:	48 89 c3	movq	%rax, %rbx
10003c792:	48 89 c7	movq	%rax, %rdi
10003c795:	e8 a2 58 00 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10003c79a:	31 f6	xorl	%esi, %esi
10003c79c:	48 83 c0 02	addq	$2, %rax
10003c7a0:	40 0f 92 c6	setb	%sil
10003c7a4:	48 89 f1	movq	%rsi, %rcx
10003c7a7:	48 f7 d9	negq	%rcx
10003c7aa:	ba 08 00 00 00	movl	$8, %edx
10003c7af:	48 f7 e2	mulq	%rdx
10003c7b2:	0f 90 c2	seto	%dl
10003c7b5:	48 31 ce	xorq	%rcx, %rsi
10003c7b8:	0f 85 15 01 00 00	jne	0x10003c8d3
10003c7be:	48 85 c9	testq	%rcx, %rcx
10003c7c1:	0f 88 0c 01 00 00	js	0x10003c8d3
10003c7c7:	84 d2	testb	%dl, %dl
10003c7c9:	0f 85 04 01 00 00	jne	0x10003c8d3
10003c7cf:	48 89 c7	movq	%rax, %rdi
10003c7d2:	e8 0e 0d fd ff	callq	0x10000d4e5
10003c7d7:	48 89 05 ba 5f 02 00	movq	%rax, 155578(%rip)
10003c7de:	4c 8d 75 d8	leaq	-40(%rbp), %r14
10003c7e2:	49 c7 06 01 00 00 00	movq	$1, (%r14)
10003c7e9:	48 8d 0d ec 68 01 00	leaq	92396(%rip), %rcx ## literal pool for: "XPC_FLAGS=0x0000000000000000"
10003c7f0:	48 89 08	movq	%rcx, (%rax)
10003c7f3:	48 8d 15 e8 0c 00 00	leaq	3304(%rip), %rdx
10003c7fa:	48 89 df	movq	%rbx, %rdi
10003c7fd:	4c 89 f6	movq	%r14, %rsi
10003c800:	e8 01 58 00 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10003c805:	48 8b 05 8c 5f 02 00	movq	155532(%rip), %rax
10003c80c:	49 8b 0e	movq	(%r14), %rcx
10003c80f:	48 c7 04 c8 00 00 00 00	movq	$0, (%rax,%rcx,8)
10003c817:	eb 23	jmp	0x10003c83c
10003c819:	bf 10 00 00 00	movl	$16, %edi
10003c81e:	e8 c2 0c fd ff	callq	0x10000d4e5
10003c823:	48 89 05 6e 5f 02 00	movq	%rax, 155502(%rip)
10003c82a:	48 8d 0d ab 68 01 00	leaq	92331(%rip), %rcx ## literal pool for: "XPC_FLAGS=0x0000000000000000"
10003c831:	48 89 08	movq	%rcx, (%rax)
10003c834:	48 c7 40 08 00 00 00 00	movq	$0, 8(%rax)
10003c83c:	48 8b 3d 95 71 02 00	movq	160149(%rip), %rdi
10003c843:	48 85 ff	testq	%rdi, %rdi
10003c846:	74 72	je	0x10003c8ba
10003c848:	48 8d 35 aa 68 01 00	leaq	92330(%rip), %rsi ## literal pool for: "Boot"
10003c84f:	e8 18 58 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003c854:	48 89 05 b5 5f 02 00	movq	%rax, 155573(%rip)
10003c85b:	48 85 c0	testq	%rax, %rax
10003c85e:	74 65	je	0x10003c8c5
10003c860:	48 89 c7	movq	%rax, %rdi
10003c863:	e8 5e 58 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003c868:	48 3b 05 91 b8 01 00	cmpq	112785(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003c86f:	75 54	jne	0x10003c8c5
10003c871:	48 83 c4 30	addq	$48, %rsp
10003c875:	5b	popq	%rbx
10003c876:	41 5e	popq	%r14
10003c878:	5d	popq	%rbp
10003c879:	c3	retq
10003c87a:	48 83 c7 10	addq	$16, %rdi
10003c87e:	be d0 00 00 00	movl	$208, %esi
10003c883:	31 d2	xorl	%edx, %edx
10003c885:	e8 0c 4f 00 00	callq	0x100041796 ## symbol stub for: __os_alloc_once
10003c88a:	8a 0d 78 5f 02 00	movb	155512(%rip), %cl
10003c890:	48 8b 1d 39 71 02 00	movq	160057(%rip), %rbx
10003c897:	e9 7f f8 ff ff	jmp	0x10003c11b
10003c89c:	89 c7	movl	%eax, %edi
10003c89e:	e8 03 4e 00 00	callq	0x1000416a6
10003c8a3:	e8 e9 4d 00 00	callq	0x100041691
10003c8a8:	48 8d 3d a1 67 01 00	leaq	92065(%rip), %rdi ## literal pool for: "launchd built improperly: no __TEXT,__config"
10003c8af:	eb 1b	jmp	0x10003c8cc
10003c8b1:	48 8d 3d 75 67 01 00	leaq	92021(%rip), %rdi ## literal pool for: "no bootargs string"
10003c8b8:	eb 12	jmp	0x10003c8cc
10003c8ba:	48 c7 05 4b 5f 02 00 00 00 00 00	movq	$0, 155467(%rip)
10003c8c5:	48 8d 3d 32 68 01 00	leaq	92210(%rip), %rdi ## literal pool for: "no boot tasks"
10003c8cc:	31 c0	xorl	%eax, %eax
10003c8ce:	e8 3f 7b ff ff	callq	0x100034412
10003c8d3:	0f 0b	ud2
10003c8d5:	55	pushq	%rbp
10003c8d6:	48 89 e5	movq	%rsp, %rbp
10003c8d9:	48 89 fe	movq	%rdi, %rsi
10003c8dc:	48 8b 3d f5 70 02 00	movq	159989(%rip), %rdi
10003c8e3:	48 85 ff	testq	%rdi, %rdi
10003c8e6:	74 06	je	0x10003c8ee
10003c8e8:	5d	popq	%rbp
10003c8e9:	e9 7e 57 00 00	jmp	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003c8ee:	31 c0	xorl	%eax, %eax
10003c8f0:	5d	popq	%rbp
10003c8f1:	c3	retq
10003c8f2:	55	pushq	%rbp
10003c8f3:	48 89 e5	movq	%rsp, %rbp
10003c8f6:	41 57	pushq	%r15
10003c8f8:	41 56	pushq	%r14
10003c8fa:	41 55	pushq	%r13
10003c8fc:	41 54	pushq	%r12
10003c8fe:	53	pushq	%rbx
10003c8ff:	48 81 ec b8 0c 00 00	subq	$3256, %rsp
10003c906:	48 8b 05 1b b7 01 00	movq	112411(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003c90d:	48 8b 00	movq	(%rax), %rax
10003c910:	48 89 45 d0	movq	%rax, -48(%rbp)
10003c914:	80 3d b7 5e 02 00 00	cmpb	$0, 155319(%rip)
10003c91b:	0f 84 d8 01 00 00	je	0x10003caf9
10003c921:	48 8b 35 18 5d 02 00	movq	154904(%rip), %rsi
10003c928:	48 8d 3d dd 67 01 00	leaq	92125(%rip), %rdi ## literal pool for: "%s/disabled.plist"
10003c92f:	31 c0	xorl	%eax, %eax
10003c931:	e8 ff 27 fd ff	callq	0x10000f135
10003c936:	48 89 05 ab 70 02 00	movq	%rax, 159915(%rip)
10003c93d:	48 89 c7	movq	%rax, %rdi
10003c940:	e8 a5 5e ff ff	callq	0x1000327ea
10003c945:	48 89 05 a4 70 02 00	movq	%rax, 159908(%rip)
10003c94c:	48 85 c0	testq	%rax, %rax
10003c94f:	75 12	jne	0x10003c963
10003c951:	31 ff	xorl	%edi, %edi
10003c953:	31 f6	xorl	%esi, %esi
10003c955:	31 d2	xorl	%edx, %edx
10003c957:	e8 b6 56 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003c95c:	48 89 05 8d 70 02 00	movq	%rax, 159885(%rip)
10003c963:	48 8b 05 d6 5c 02 00	movq	154838(%rip), %rax
10003c96a:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
10003c971:	48 89 07	movq	%rax, (%rdi)
10003c974:	48 c7 47 08 00 00 00 00	movq	$0, 8(%rdi)
10003c97c:	be 5c 00 00 00	movl	$92, %esi
10003c981:	31 d2	xorl	%edx, %edx
10003c983:	e8 cc 50 00 00	callq	0x100041a54 ## symbol stub for: _fts_open$INODE64
10003c988:	49 89 c5	movq	%rax, %r13
10003c98b:	48 89 c7	movq	%rax, %rdi
10003c98e:	e8 c7 50 00 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10003c993:	48 85 c0	testq	%rax, %rax
10003c996:	0f 84 26 01 00 00	je	0x10003cac2
10003c99c:	48 89 c3	movq	%rax, %rbx
10003c99f:	4c 8d 35 78 67 01 00	leaq	92024(%rip), %r14 ## literal pool for: "disabled.%u.plist"
10003c9a6:	4c 8d bd c0 f7 ff ff	leaq	-2112(%rbp), %r15
10003c9ad:	31 c0	xorl	%eax, %eax
10003c9af:	48 89 85 b8 f3 ff ff	movq	%rax, -3144(%rbp)
10003c9b6:	0f b7 43 58	movzwl	88(%rbx), %eax
10003c9ba:	66 83 f8 0b	cmpw	$11, %ax
10003c9be:	0f 85 8f 00 00 00	jne	0x10003ca53
10003c9c4:	c7 85 c0 f7 ff ff 00 00 00 00	movl	$0, -2112(%rbp)
10003c9ce:	4c 8d 63 68	leaq	104(%rbx), %r12
10003c9d2:	4c 89 e7	movq	%r12, %rdi
10003c9d5:	4c 89 f6	movq	%r14, %rsi
10003c9d8:	4c 89 fa	movq	%r15, %rdx
10003c9db:	31 c0	xorl	%eax, %eax
10003c9dd:	e8 2c 54 00 00	callq	0x100041e0e ## symbol stub for: _sscanf
10003c9e2:	83 f8 01	cmpl	$1, %eax
10003c9e5:	75 2f	jne	0x10003ca16
10003c9e7:	48 8b 7b 30	movq	48(%rbx), %rdi
10003c9eb:	e8 fa 5d ff ff	callq	0x1000327ea
10003c9f0:	48 85 c0	testq	%rax, %rax
10003c9f3:	74 48	je	0x10003ca3d
10003c9f5:	48 89 c3	movq	%rax, %rbx
10003c9f8:	8b bd c0 f7 ff ff	movl	-2112(%rbp), %edi
10003c9fe:	e8 a3 03 00 00	callq	0x10003cda6
10003ca03:	49 89 c4	movq	%rax, %r12
10003ca06:	48 8b 78 18	movq	24(%rax), %rdi
10003ca0a:	e8 ed 56 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003ca0f:	49 89 5c 24 18	movq	%rbx, 24(%r12)
10003ca14:	eb 27	jmp	0x10003ca3d
10003ca16:	4c 89 e7	movq	%r12, %rdi
10003ca19:	48 8d 35 10 67 01 00	leaq	91920(%rip), %rsi ## literal pool for: "loginitems.%u.plist"
10003ca20:	4c 89 fa	movq	%r15, %rdx
10003ca23:	31 c0	xorl	%eax, %eax
10003ca25:	e8 e4 53 00 00	callq	0x100041e0e ## symbol stub for: _sscanf
10003ca2a:	83 f8 01	cmpl	$1, %eax
10003ca2d:	75 0e	jne	0x10003ca3d
10003ca2f:	48 8b 7b 30	movq	48(%rbx), %rdi
10003ca33:	e8 b2 5d ff ff	callq	0x1000327ea
10003ca38:	48 85 c0	testq	%rax, %rax
10003ca3b:	75 53	jne	0x10003ca90
10003ca3d:	4c 89 ef	movq	%r13, %rdi
10003ca40:	e8 15 50 00 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10003ca45:	48 89 c3	movq	%rax, %rbx
10003ca48:	48 85 c0	testq	%rax, %rax
10003ca4b:	0f 85 65 ff ff ff	jne	0x10003c9b6
10003ca51:	eb 6f	jmp	0x10003cac2
10003ca53:	66 83 f8 06	cmpw	$6, %ax
10003ca57:	74 2e	je	0x10003ca87
10003ca59:	66 83 f8 01	cmpw	$1, %ax
10003ca5d:	75 de	jne	0x10003ca3d
10003ca5f:	48 8b 85 b8 f3 ff ff	movq	-3144(%rbp), %rax
10003ca66:	48 85 c0	testq	%rax, %rax
10003ca69:	74 46	je	0x10003cab1
10003ca6b:	48 ff c0	incq	%rax
10003ca6e:	48 89 85 b8 f3 ff ff	movq	%rax, -3144(%rbp)
10003ca75:	4c 89 ef	movq	%r13, %rdi
10003ca78:	48 89 de	movq	%rbx, %rsi
10003ca7b:	ba 04 00 00 00	movl	$4, %edx
10003ca80:	e8 db 4f 00 00	callq	0x100041a60 ## symbol stub for: _fts_set$INODE64
10003ca85:	eb b6	jmp	0x10003ca3d
10003ca87:	48 ff 8d b8 f3 ff ff	decq	-3144(%rbp)
10003ca8e:	eb ad	jmp	0x10003ca3d
10003ca90:	48 89 c3	movq	%rax, %rbx
10003ca93:	8b bd c0 f7 ff ff	movl	-2112(%rbp), %edi
10003ca99:	e8 08 03 00 00	callq	0x10003cda6
10003ca9e:	49 89 c4	movq	%rax, %r12
10003caa1:	48 8b 78 20	movq	32(%rax), %rdi
10003caa5:	e8 52 56 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003caaa:	49 89 5c 24 20	movq	%rbx, 32(%r12)
10003caaf:	eb 8c	jmp	0x10003ca3d
10003cab1:	b8 01 00 00 00	movl	$1, %eax
10003cab6:	48 89 85 b8 f3 ff ff	movq	%rax, -3144(%rbp)
10003cabd:	e9 7b ff ff ff	jmp	0x10003ca3d
10003cac2:	4c 89 ef	movq	%r13, %rdi
10003cac5:	e8 84 4f 00 00	callq	0x100041a4e ## symbol stub for: _fts_close$INODE64
10003caca:	83 f8 ff	cmpl	$-1, %eax
10003cacd:	0f 84 c4 02 00 00	je	0x10003cd97
10003cad3:	48 8b 05 4e b5 01 00	movq	111950(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003cada:	48 8b 00	movq	(%rax), %rax
10003cadd:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10003cae1:	0f 85 ba 02 00 00	jne	0x10003cda1
10003cae7:	48 81 c4 b8 0c 00 00	addq	$3256, %rsp
10003caee:	5b	popq	%rbx
10003caef:	41 5c	popq	%r12
10003caf1:	41 5d	popq	%r13
10003caf3:	41 5e	popq	%r14
10003caf5:	41 5f	popq	%r15
10003caf7:	5d	popq	%rbp
10003caf8:	c3	retq
10003caf9:	48 8d 9d d0 fb ff ff	leaq	-1072(%rbp), %rbx
10003cb00:	ba 00 04 00 00	movl	$1024, %edx
10003cb05:	48 89 df	movq	%rbx, %rdi
10003cb08:	be aa 00 00 00	movl	$170, %esi
10003cb0d:	e8 c8 50 00 00	callq	0x100041bda ## symbol stub for: _memset
10003cb12:	48 8b 0d 27 5b 02 00	movq	154407(%rip), %rcx
10003cb19:	48 8d 15 18 6b 01 00	leaq	92952(%rip), %rdx ## literal pool for: "%s/disabled.migrated"
10003cb20:	be 00 04 00 00	movl	$1024, %esi
10003cb25:	48 89 df	movq	%rbx, %rdi
10003cb28:	31 c0	xorl	%eax, %eax
10003cb2a:	e8 d3 52 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003cb2f:	0f 28 05 4a 67 00 00	movaps	26442(%rip), %xmm0
10003cb36:	48 8d b5 20 f3 ff ff	leaq	-3296(%rbp), %rsi
10003cb3d:	0f 29 86 80 00 00 00	movaps	%xmm0, 128(%rsi)
10003cb44:	0f 29 46 70	movaps	%xmm0, 112(%rsi)
10003cb48:	0f 29 46 60	movaps	%xmm0, 96(%rsi)
10003cb4c:	0f 29 46 50	movaps	%xmm0, 80(%rsi)
10003cb50:	0f 29 46 40	movaps	%xmm0, 64(%rsi)
10003cb54:	0f 29 46 30	movaps	%xmm0, 48(%rsi)
10003cb58:	0f 29 46 20	movaps	%xmm0, 32(%rsi)
10003cb5c:	0f 29 46 10	movaps	%xmm0, 16(%rsi)
10003cb60:	0f 29 06	movaps	%xmm0, (%rsi)
10003cb63:	48 89 df	movq	%rbx, %rdi
10003cb66:	e8 a9 52 00 00	callq	0x100041e14 ## symbol stub for: _stat$INODE64
10003cb6b:	85 c0	testl	%eax, %eax
10003cb6d:	0f 84 ae fd ff ff	je	0x10003c921
10003cb73:	0f 28 05 96 ee 01 00	movaps	126614(%rip), %xmm0
10003cb7a:	48 8d bd c0 fb ff ff	leaq	-1088(%rbp), %rdi
10003cb81:	0f 29 07	movaps	%xmm0, (%rdi)
10003cb84:	be 5c 00 00 00	movl	$92, %esi
10003cb89:	31 d2	xorl	%edx, %edx
10003cb8b:	e8 c4 4e 00 00	callq	0x100041a54 ## symbol stub for: _fts_open$INODE64
10003cb90:	48 89 c3	movq	%rax, %rbx
10003cb93:	48 89 c7	movq	%rax, %rdi
10003cb96:	e8 bf 4e 00 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10003cb9b:	48 85 c0	testq	%rax, %rax
10003cb9e:	0f 84 94 01 00 00	je	0x10003cd38
10003cba4:	49 89 c5	movq	%rax, %r13
10003cba7:	45 31 f6	xorl	%r14d, %r14d
10003cbaa:	48 89 9d b8 f3 ff ff	movq	%rbx, -3144(%rbp)
10003cbb1:	41 0f b7 45 58	movzwl	88(%r13), %eax
10003cbb6:	66 83 f8 06	cmpw	$6, %ax
10003cbba:	0f 84 e1 00 00 00	je	0x10003cca1
10003cbc0:	66 83 f8 01	cmpw	$1, %ax
10003cbc4:	0f 85 4a 01 00 00	jne	0x10003cd14
10003cbca:	4d 85 f6	testq	%r14, %r14
10003cbcd:	74 10	je	0x10003cbdf
10003cbcf:	48 89 df	movq	%rbx, %rdi
10003cbd2:	4c 89 ee	movq	%r13, %rsi
10003cbd5:	ba 04 00 00 00	movl	$4, %edx
10003cbda:	e8 81 4e 00 00	callq	0x100041a60 ## symbol stub for: _fts_set$INODE64
10003cbdf:	ba 00 04 00 00	movl	$1024, %edx
10003cbe4:	4c 8d bd c0 f7 ff ff	leaq	-2112(%rbp), %r15
10003cbeb:	4c 89 ff	movq	%r15, %rdi
10003cbee:	be aa 00 00 00	movl	$170, %esi
10003cbf3:	e8 e2 4f 00 00	callq	0x100041bda ## symbol stub for: _memset
10003cbf8:	ba 00 04 00 00	movl	$1024, %edx
10003cbfd:	4c 8d a5 c0 f3 ff ff	leaq	-3136(%rbp), %r12
10003cc04:	4c 89 e7	movq	%r12, %rdi
10003cc07:	be aa 00 00 00	movl	$170, %esi
10003cc0c:	e8 c9 4f 00 00	callq	0x100041bda ## symbol stub for: _memset
10003cc11:	c7 85 b4 f3 ff ff 00 00 00 00	movl	$0, -3148(%rbp)
10003cc1b:	49 8d 5d 68	leaq	104(%r13), %rbx
10003cc1f:	48 89 df	movq	%rbx, %rdi
10003cc22:	48 8d 35 3f 6a 01 00	leaq	92735(%rip), %rsi ## literal pool for: "com.apple.launchd"
10003cc29:	e8 fe 51 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
10003cc2e:	85 c0	testl	%eax, %eax
10003cc30:	74 74	je	0x10003cca6
10003cc32:	48 89 df	movq	%rbx, %rdi
10003cc35:	48 8d 35 51 6a 01 00	leaq	92753(%rip), %rsi ## literal pool for: "com.apple.launchd.peruser.%u"
10003cc3c:	48 8d 95 b4 f3 ff ff	leaq	-3148(%rbp), %rdx
10003cc43:	31 c0	xorl	%eax, %eax
10003cc45:	e8 c4 51 00 00	callq	0x100041e0e ## symbol stub for: _sscanf
10003cc4a:	83 f8 01	cmpl	$1, %eax
10003cc4d:	0f 85 b7 00 00 00	jne	0x10003cd0a
10003cc53:	49 8b 4d 30	movq	48(%r13), %rcx
10003cc57:	be 00 04 00 00	movl	$1024, %esi
10003cc5c:	4c 8d bd c0 f7 ff ff	leaq	-2112(%rbp), %r15
10003cc63:	4c 89 ff	movq	%r15, %rdi
10003cc66:	48 8d 15 0d 6a 01 00	leaq	92685(%rip), %rdx ## literal pool for: "%s/overrides.plist"
10003cc6d:	31 c0	xorl	%eax, %eax
10003cc6f:	e8 8e 51 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003cc74:	48 8b 0d c5 59 02 00	movq	154053(%rip), %rcx
10003cc7b:	44 8b 85 b4 f3 ff ff	movl	-3148(%rbp), %r8d
10003cc82:	be 00 04 00 00	movl	$1024, %esi
10003cc87:	4c 8d a5 c0 f3 ff ff	leaq	-3136(%rbp), %r12
10003cc8e:	4c 89 e7	movq	%r12, %rdi
10003cc91:	48 8d 15 76 65 01 00	leaq	91510(%rip), %rdx ## literal pool for: "%s/disabled.%u.plist"
10003cc98:	31 c0	xorl	%eax, %eax
10003cc9a:	e8 63 51 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003cc9f:	eb 3c	jmp	0x10003ccdd
10003cca1:	49 ff ce	decq	%r14
10003cca4:	eb 6e	jmp	0x10003cd14
10003cca6:	49 8b 4d 30	movq	48(%r13), %rcx
10003ccaa:	be 00 04 00 00	movl	$1024, %esi
10003ccaf:	4c 89 ff	movq	%r15, %rdi
10003ccb2:	48 8d 15 c1 69 01 00	leaq	92609(%rip), %rdx ## literal pool for: "%s/overrides.plist"
10003ccb9:	31 c0	xorl	%eax, %eax
10003ccbb:	e8 42 51 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003ccc0:	48 8b 0d 79 59 02 00	movq	153977(%rip), %rcx
10003ccc7:	be 00 04 00 00	movl	$1024, %esi
10003cccc:	4c 89 e7	movq	%r12, %rdi
10003cccf:	48 8d 15 36 64 01 00	leaq	91190(%rip), %rdx ## literal pool for: "%s/disabled.plist"
10003ccd6:	31 c0	xorl	%eax, %eax
10003ccd8:	e8 25 51 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003ccdd:	e8 92 4b 00 00	callq	0x100041874 ## symbol stub for: _copyfile_state_alloc
10003cce2:	48 89 c3	movq	%rax, %rbx
10003cce5:	4c 89 ff	movq	%r15, %rdi
10003cce8:	4c 89 e6	movq	%r12, %rsi
10003cceb:	48 89 c2	movq	%rax, %rdx
10003ccee:	b9 08 00 00 00	movl	$8, %ecx
10003ccf3:	e8 76 4b 00 00	callq	0x10004186e ## symbol stub for: _copyfile
10003ccf8:	83 f8 ff	cmpl	$-1, %eax
10003ccfb:	74 2d	je	0x10003cd2a
10003ccfd:	48 89 df	movq	%rbx, %rdi
10003cd00:	e8 75 4b 00 00	callq	0x10004187a ## symbol stub for: _copyfile_state_free
10003cd05:	83 f8 ff	cmpl	$-1, %eax
10003cd08:	74 27	je	0x10003cd31
10003cd0a:	49 ff c6	incq	%r14
10003cd0d:	48 8b 9d b8 f3 ff ff	movq	-3144(%rbp), %rbx
10003cd14:	48 89 df	movq	%rbx, %rdi
10003cd17:	e8 3e 4d 00 00	callq	0x100041a5a ## symbol stub for: _fts_read$INODE64
10003cd1c:	49 89 c5	movq	%rax, %r13
10003cd1f:	48 85 c0	testq	%rax, %rax
10003cd22:	0f 85 89 fe ff ff	jne	0x10003cbb1
10003cd28:	eb 0e	jmp	0x10003cd38
10003cd2a:	e8 d6 49 00 00	callq	0x100041705
10003cd2f:	eb cc	jmp	0x10003ccfd
10003cd31:	e8 bc 49 00 00	callq	0x1000416f2
10003cd36:	eb d2	jmp	0x10003cd0a
10003cd38:	48 89 df	movq	%rbx, %rdi
10003cd3b:	e8 0e 4d 00 00	callq	0x100041a4e ## symbol stub for: _fts_close$INODE64
10003cd40:	83 f8 ff	cmpl	$-1, %eax
10003cd43:	74 57	je	0x10003cd9c
10003cd45:	48 8d bd d0 fb ff ff	leaq	-1072(%rbp), %rdi
10003cd4c:	be 00 02 00 00	movl	$512, %esi
10003cd51:	ba b6 01 00 00	movl	$438, %edx
10003cd56:	31 c0	xorl	%eax, %eax
10003cd58:	e8 b9 4e 00 00	callq	0x100041c16 ## symbol stub for: _open
10003cd5d:	83 f8 ff	cmpl	$-1, %eax
10003cd60:	74 0c	je	0x10003cd6e
10003cd62:	89 c7	movl	%eax, %edi
10003cd64:	e8 4b 5a ff ff	callq	0x1000327b4
10003cd69:	e9 b3 fb ff ff	jmp	0x10003c921
10003cd6e:	e8 ed 49 00 00	callq	0x100041760 ## symbol stub for: ___error
10003cd73:	83 38 1e	cmpl	$30, (%rax)
10003cd76:	0f 84 a5 fb ff ff	je	0x10003c921
10003cd7c:	e8 df 49 00 00	callq	0x100041760 ## symbol stub for: ___error
10003cd81:	48 63 38	movslq	(%rax), %rdi
10003cd84:	48 85 ff	testq	%rdi, %rdi
10003cd87:	0f 84 94 fb ff ff	je	0x10003c921
10003cd8d:	e8 10 4a 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003cd92:	e9 8a fb ff ff	jmp	0x10003c921
10003cd97:	e8 20 49 00 00	callq	0x1000416bc
10003cd9c:	e8 36 49 00 00	callq	0x1000416d7
10003cda1:	e8 cc 49 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003cda6:	55	pushq	%rbp
10003cda7:	48 89 e5	movq	%rsp, %rbp
10003cdaa:	41 56	pushq	%r14
10003cdac:	53	pushq	%rbx
10003cdad:	41 89 fe	movl	%edi, %r14d
10003cdb0:	48 8b 1d 41 6c 02 00	movq	158785(%rip), %rbx
10003cdb7:	48 85 db	testq	%rbx, %rbx
10003cdba:	74 0b	je	0x10003cdc7
10003cdbc:	44 39 73 10	cmpl	%r14d, 16(%rbx)
10003cdc0:	74 59	je	0x10003ce1b
10003cdc2:	48 8b 1b	movq	(%rbx), %rbx
10003cdc5:	eb f0	jmp	0x10003cdb7
10003cdc7:	bf 28 00 00 00	movl	$40, %edi
10003cdcc:	e8 14 07 fd ff	callq	0x10000d4e5
10003cdd1:	48 89 c3	movq	%rax, %rbx
10003cdd4:	44 89 70 10	movl	%r14d, 16(%rax)
10003cdd8:	31 ff	xorl	%edi, %edi
10003cdda:	31 f6	xorl	%esi, %esi
10003cddc:	31 d2	xorl	%edx, %edx
10003cdde:	e8 2f 52 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003cde3:	48 89 43 18	movq	%rax, 24(%rbx)
10003cde7:	31 ff	xorl	%edi, %edi
10003cde9:	31 f6	xorl	%esi, %esi
10003cdeb:	31 d2	xorl	%edx, %edx
10003cded:	e8 20 52 00 00	callq	0x100042012 ## symbol stub for: _xpc_dictionary_create
10003cdf2:	48 89 43 20	movq	%rax, 32(%rbx)
10003cdf6:	48 8b 05 fb 6b 02 00	movq	158715(%rip), %rax
10003cdfd:	48 89 03	movq	%rax, (%rbx)
10003ce00:	48 85 c0	testq	%rax, %rax
10003ce03:	74 04	je	0x10003ce09
10003ce05:	48 89 58 08	movq	%rbx, 8(%rax)
10003ce09:	48 89 1d e8 6b 02 00	movq	%rbx, 158696(%rip)
10003ce10:	48 8d 05 e1 6b 02 00	leaq	158689(%rip), %rax
10003ce17:	48 89 43 08	movq	%rax, 8(%rbx)
10003ce1b:	48 89 d8	movq	%rbx, %rax
10003ce1e:	5b	popq	%rbx
10003ce1f:	41 5e	popq	%r14
10003ce21:	5d	popq	%rbp
10003ce22:	c3	retq
10003ce23:	55	pushq	%rbp
10003ce24:	48 89 e5	movq	%rsp, %rbp
10003ce27:	80 3d 62 58 02 00 00	cmpb	$0, 153698(%rip)
10003ce2e:	74 15	je	0x10003ce45
10003ce30:	48 89 fe	movq	%rdi, %rsi
10003ce33:	48 8b 3d be 59 02 00	movq	154046(%rip), %rdi
10003ce3a:	48 85 ff	testq	%rdi, %rdi
10003ce3d:	74 06	je	0x10003ce45
10003ce3f:	5d	popq	%rbp
10003ce40:	e9 f1 51 00 00	jmp	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003ce45:	b0 01	movb	$1, %al
10003ce47:	5d	popq	%rbp
10003ce48:	c3	retq
10003ce49:	55	pushq	%rbp
10003ce4a:	48 89 e5	movq	%rsp, %rbp
10003ce4d:	80 3d 3c 58 02 00 00	cmpb	$0, 153660(%rip)
10003ce54:	74 15	je	0x10003ce6b
10003ce56:	48 89 fe	movq	%rdi, %rsi
10003ce59:	48 8b 3d a0 59 02 00	movq	154016(%rip), %rdi
10003ce60:	48 85 ff	testq	%rdi, %rdi
10003ce63:	74 06	je	0x10003ce6b
10003ce65:	5d	popq	%rbp
10003ce66:	e9 cb 51 00 00	jmp	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003ce6b:	b0 01	movb	$1, %al
10003ce6d:	5d	popq	%rbp
10003ce6e:	c3	retq
10003ce6f:	55	pushq	%rbp
10003ce70:	48 89 e5	movq	%rsp, %rbp
10003ce73:	53	pushq	%rbx
10003ce74:	50	pushq	%rax
10003ce75:	48 8d 3d c8 62 01 00	leaq	90824(%rip), %rdi ## literal pool for: "/private/etc/com.apple.xpc.launchd.limits.plist"
10003ce7c:	e8 69 59 ff ff	callq	0x1000327ea
10003ce81:	48 85 c0	testq	%rax, %rax
10003ce84:	74 1c	je	0x10003cea2
10003ce86:	48 89 c3	movq	%rax, %rbx
10003ce89:	48 8d 15 c6 00 00 00	leaq	198(%rip), %rdx
10003ce90:	48 89 c7	movq	%rax, %rdi
10003ce93:	31 f6	xorl	%esi, %esi
10003ce95:	e8 6c 51 00 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10003ce9a:	48 89 df	movq	%rbx, %rdi
10003ce9d:	e8 5a 52 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003cea2:	48 8d 3d 01 68 01 00	leaq	92161(%rip), %rdi ## literal pool for: "/System/Library/Sandbox/com.apple.xpc.launchd.rootless.plist"
10003cea9:	e8 3c 59 ff ff	callq	0x1000327ea
10003ceae:	48 85 c0	testq	%rax, %rax
10003ceb1:	74 37	je	0x10003ceea
10003ceb3:	48 89 c3	movq	%rax, %rbx
10003ceb6:	48 8d 35 2a 68 01 00	leaq	92202(%rip), %rsi ## literal pool for: "RemovableServices"
10003cebd:	48 89 c7	movq	%rax, %rdi
10003cec0:	e8 8f 06 00 00	callq	0x10003d554
10003cec5:	48 89 05 2c 59 02 00	movq	%rax, 153900(%rip)
10003cecc:	48 8d 35 26 68 01 00	leaq	92198(%rip), %rsi ## literal pool for: "InstallerRemovableServices"
10003ced3:	48 89 df	movq	%rbx, %rdi
10003ced6:	e8 79 06 00 00	callq	0x10003d554
10003cedb:	48 89 05 1e 59 02 00	movq	%rax, 153886(%rip)
10003cee2:	48 89 df	movq	%rbx, %rdi
10003cee5:	e8 12 52 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003ceea:	48 8d 3d 83 62 01 00	leaq	90755(%rip), %rdi ## literal pool for: "Mac"
10003cef1:	e8 ec 20 fd ff	callq	0x10000efe2
10003cef6:	48 89 05 c3 58 02 00	movq	%rax, 153795(%rip)
10003cefd:	48 8d 3d 8c 65 00 00	leaq	25996(%rip), %rdi ## literal pool for: "com.apple.xpc.launchd"
10003cf04:	e8 9d 4d 00 00	callq	0x100041ca6 ## symbol stub for: _os_variant_is_darwinos
10003cf09:	48 8d 0d 68 62 01 00	leaq	90728(%rip), %rcx ## literal pool for: ".darwin"
10003cf10:	48 8d 15 74 c0 00 00	leaq	49268(%rip), %rdx ## literal pool for: ""
10003cf17:	84 c0	testb	%al, %al
10003cf19:	48 0f 45 d1	cmovneq	%rcx, %rdx
10003cf1d:	48 89 15 a4 58 02 00	movq	%rdx, 153764(%rip)
10003cf24:	e8 59 dc fc ff	callq	0x10000ab82
10003cf29:	48 8d 3d 50 62 01 00	leaq	90704(%rip), %rdi ## literal pool for: "/private/var/db/com.apple.xpc.launchd/config/system.plist"
10003cf30:	e8 b5 58 ff ff	callq	0x1000327ea
10003cf35:	48 89 05 84 6a 02 00	movq	%rax, 158340(%rip)
10003cf3c:	48 8d 3d 77 62 01 00	leaq	90743(%rip), %rdi ## literal pool for: "/private/var/db/com.apple.xpc.launchd/config/user.plist"
10003cf43:	e8 a2 58 ff ff	callq	0x1000327ea
10003cf48:	48 89 05 79 6a 02 00	movq	%rax, 158329(%rip)
10003cf4f:	48 83 c4 08	addq	$8, %rsp
10003cf53:	5b	popq	%rbx
10003cf54:	5d	popq	%rbp
10003cf55:	c3	retq
10003cf56:	55	pushq	%rbp
10003cf57:	48 89 e5	movq	%rsp, %rbp
10003cf5a:	41 57	pushq	%r15
10003cf5c:	41 56	pushq	%r14
10003cf5e:	53	pushq	%rbx
10003cf5f:	50	pushq	%rax
10003cf60:	48 89 f3	movq	%rsi, %rbx
10003cf63:	49 89 fe	movq	%rdi, %r14
10003cf66:	48 89 f7	movq	%rsi, %rdi
10003cf69:	e8 58 51 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003cf6e:	48 3b 05 9b b1 01 00	cmpq	111003(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003cf75:	74 48	je	0x10003cfbf
10003cf77:	48 89 df	movq	%rbx, %rdi
10003cf7a:	e8 47 51 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003cf7f:	48 3b 05 52 b1 01 00	cmpq	110930(%rip), %rax ## literal pool symbol address: __xpc_type_array
10003cf86:	74 0b	je	0x10003cf93
10003cf88:	48 83 c4 08	addq	$8, %rsp
10003cf8c:	5b	popq	%rbx
10003cf8d:	41 5e	popq	%r14
10003cf8f:	41 5f	popq	%r15
10003cf91:	5d	popq	%rbp
10003cf92:	c3	retq
10003cf93:	48 89 df	movq	%rbx, %rdi
10003cf96:	e8 b1 4f 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10003cf9b:	48 83 f8 01	cmpq	$1, %rax
10003cf9f:	75 3e	jne	0x10003cfdf
10003cfa1:	48 89 df	movq	%rbx, %rdi
10003cfa4:	31 f6	xorl	%esi, %esi
10003cfa6:	e8 b3 4f 00 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
10003cfab:	48 89 c3	movq	%rax, %rbx
10003cfae:	48 89 c7	movq	%rax, %rdi
10003cfb1:	e8 10 51 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003cfb6:	48 3b 05 53 b1 01 00	cmpq	110931(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003cfbd:	75 c9	jne	0x10003cf88
10003cfbf:	48 89 df	movq	%rbx, %rdi
10003cfc2:	e8 0b 51 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003cfc7:	4c 89 f7	movq	%r14, %rdi
10003cfca:	48 89 c6	movq	%rax, %rsi
10003cfcd:	48 89 c2	movq	%rax, %rdx
10003cfd0:	48 83 c4 08	addq	$8, %rsp
10003cfd4:	5b	popq	%rbx
10003cfd5:	41 5e	popq	%r14
10003cfd7:	41 5f	popq	%r15
10003cfd9:	5d	popq	%rbp
10003cfda:	e9 4e 7e ff ff	jmp	0x100034e2d
10003cfdf:	48 89 df	movq	%rbx, %rdi
10003cfe2:	e8 65 4f 00 00	callq	0x100041f4c ## symbol stub for: _xpc_array_get_count
10003cfe7:	48 83 f8 02	cmpq	$2, %rax
10003cfeb:	75 9b	jne	0x10003cf88
10003cfed:	48 89 df	movq	%rbx, %rdi
10003cff0:	31 f6	xorl	%esi, %esi
10003cff2:	e8 67 4f 00 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
10003cff7:	49 89 c7	movq	%rax, %r15
10003cffa:	be 01 00 00 00	movl	$1, %esi
10003cfff:	48 89 df	movq	%rbx, %rdi
10003d002:	e8 57 4f 00 00	callq	0x100041f5e ## symbol stub for: _xpc_array_get_value
10003d007:	48 89 c3	movq	%rax, %rbx
10003d00a:	4c 89 ff	movq	%r15, %rdi
10003d00d:	e8 b4 50 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d012:	48 3b 05 f7 b0 01 00	cmpq	110839(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003d019:	0f 85 69 ff ff ff	jne	0x10003cf88
10003d01f:	48 89 df	movq	%rbx, %rdi
10003d022:	e8 9f 50 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d027:	48 3b 05 e2 b0 01 00	cmpq	110818(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003d02e:	0f 85 54 ff ff ff	jne	0x10003cf88
10003d034:	4c 89 ff	movq	%r15, %rdi
10003d037:	e8 96 50 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003d03c:	49 89 c7	movq	%rax, %r15
10003d03f:	48 89 df	movq	%rbx, %rdi
10003d042:	e8 8b 50 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003d047:	4c 89 f7	movq	%r14, %rdi
10003d04a:	4c 89 fe	movq	%r15, %rsi
10003d04d:	e9 7b ff ff ff	jmp	0x10003cfcd
10003d052:	55	pushq	%rbp
10003d053:	48 89 e5	movq	%rsp, %rbp
10003d056:	5d	popq	%rbp
10003d057:	e9 ca 4a 00 00	jmp	0x100041b26 ## symbol stub for: _libSystem_init_after_boot_tasks_4launchd
10003d05c:	55	pushq	%rbp
10003d05d:	48 89 e5	movq	%rsp, %rbp
10003d060:	53	pushq	%rbx
10003d061:	50	pushq	%rax
10003d062:	48 8b 3d 77 69 02 00	movq	158071(%rip), %rdi
10003d069:	48 85 ff	testq	%rdi, %rdi
10003d06c:	74 25	je	0x10003d093
10003d06e:	48 8d 35 7d 61 01 00	leaq	90493(%rip), %rsi ## literal pool for: "Self"
10003d075:	e8 f2 4f 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d07a:	48 85 c0	testq	%rax, %rax
10003d07d:	74 14	je	0x10003d093
10003d07f:	48 89 c3	movq	%rax, %rbx
10003d082:	48 89 c7	movq	%rax, %rdi
10003d085:	e8 3c 50 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d08a:	48 3b 05 6f b0 01 00	cmpq	110703(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003d091:	74 02	je	0x10003d095
10003d093:	31 db	xorl	%ebx, %ebx
10003d095:	48 89 d8	movq	%rbx, %rax
10003d098:	48 83 c4 08	addq	$8, %rsp
10003d09c:	5b	popq	%rbx
10003d09d:	5d	popq	%rbp
10003d09e:	c3	retq
10003d09f:	55	pushq	%rbp
10003d0a0:	48 89 e5	movq	%rsp, %rbp
10003d0a3:	53	pushq	%rbx
10003d0a4:	50	pushq	%rax
10003d0a5:	48 8b 3d 34 69 02 00	movq	158004(%rip), %rdi
10003d0ac:	48 85 ff	testq	%rdi, %rdi
10003d0af:	74 25	je	0x10003d0d6
10003d0b1:	48 8d 35 3f 61 01 00	leaq	90431(%rip), %rsi ## literal pool for: "Child"
10003d0b8:	e8 af 4f 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d0bd:	48 85 c0	testq	%rax, %rax
10003d0c0:	74 14	je	0x10003d0d6
10003d0c2:	48 89 c3	movq	%rax, %rbx
10003d0c5:	48 89 c7	movq	%rax, %rdi
10003d0c8:	e8 f9 4f 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d0cd:	48 3b 05 2c b0 01 00	cmpq	110636(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003d0d4:	74 02	je	0x10003d0d8
10003d0d6:	31 db	xorl	%ebx, %ebx
10003d0d8:	48 89 d8	movq	%rbx, %rax
10003d0db:	48 83 c4 08	addq	$8, %rsp
10003d0df:	5b	popq	%rbx
10003d0e0:	5d	popq	%rbp
10003d0e1:	c3	retq
10003d0e2:	55	pushq	%rbp
10003d0e3:	48 89 e5	movq	%rsp, %rbp
10003d0e6:	48 8b 05 03 69 02 00	movq	157955(%rip), %rax
10003d0ed:	5d	popq	%rbp
10003d0ee:	c3	retq
10003d0ef:	55	pushq	%rbp
10003d0f0:	48 89 e5	movq	%rsp, %rbp
10003d0f3:	53	pushq	%rbx
10003d0f4:	50	pushq	%rax
10003d0f5:	48 89 f3	movq	%rsi, %rbx
10003d0f8:	48 89 f9	movq	%rdi, %rcx
10003d0fb:	48 8d 15 fb 60 01 00	leaq	90363(%rip), %rdx ## literal pool for: "XPC_FLAGS=0x%llx"
10003d102:	be 40 00 00 00	movl	$64, %esi
10003d107:	48 89 df	movq	%rbx, %rdi
10003d10a:	31 c0	xorl	%eax, %eax
10003d10c:	e8 f1 4c 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003d111:	48 8b 05 80 56 02 00	movq	153216(%rip), %rax
10003d118:	48 89 18	movq	%rbx, (%rax)
10003d11b:	48 83 c4 08	addq	$8, %rsp
10003d11f:	5b	popq	%rbx
10003d120:	5d	popq	%rbp
10003d121:	c3	retq
10003d122:	55	pushq	%rbp
10003d123:	48 89 e5	movq	%rsp, %rbp
10003d126:	e8 7b fc ff ff	callq	0x10003cda6
10003d12b:	48 8b 40 18	movq	24(%rax), %rax
10003d12f:	5d	popq	%rbp
10003d130:	c3	retq
10003d131:	55	pushq	%rbp
10003d132:	48 89 e5	movq	%rsp, %rbp
10003d135:	e8 6c fc ff ff	callq	0x10003cda6
10003d13a:	48 8b 40 20	movq	32(%rax), %rax
10003d13e:	5d	popq	%rbp
10003d13f:	c3	retq
10003d140:	55	pushq	%rbp
10003d141:	48 89 e5	movq	%rsp, %rbp
10003d144:	41 57	pushq	%r15
10003d146:	41 56	pushq	%r14
10003d148:	41 54	pushq	%r12
10003d14a:	53	pushq	%rbx
10003d14b:	48 81 ec 10 04 00 00	subq	$1040, %rsp
10003d152:	48 8b 05 cf ae 01 00	movq	110287(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003d159:	48 8b 00	movq	(%rax), %rax
10003d15c:	48 89 45 d8	movq	%rax, -40(%rbp)
10003d160:	48 8b 3d 89 68 02 00	movq	157833(%rip), %rdi
10003d167:	48 85 ff	testq	%rdi, %rdi
10003d16a:	0f 84 9d 00 00 00	je	0x10003d20d
10003d170:	48 8b 35 71 68 02 00	movq	157809(%rip), %rsi
10003d177:	e8 b6 00 00 00	callq	0x10003d232
10003d17c:	48 8b 1d 75 68 02 00	movq	157813(%rip), %rbx
10003d183:	48 85 db	testq	%rbx, %rbx
10003d186:	0f 84 81 00 00 00	je	0x10003d20d
10003d18c:	4c 8d a5 d0 fb ff ff	leaq	-1072(%rbp), %r12
10003d193:	4c 8d 35 74 60 01 00	leaq	90228(%rip), %r14 ## literal pool for: "%s/disabled.%u.plist"
10003d19a:	4c 8d 3d 82 60 01 00	leaq	90242(%rip), %r15 ## literal pool for: "%s/loginitems.%u.plist"
10003d1a1:	ba 00 04 00 00	movl	$1024, %edx
10003d1a6:	4c 89 e7	movq	%r12, %rdi
10003d1a9:	be aa 00 00 00	movl	$170, %esi
10003d1ae:	e8 27 4a 00 00	callq	0x100041bda ## symbol stub for: _memset
10003d1b3:	48 8b 0d 86 54 02 00	movq	152710(%rip), %rcx
10003d1ba:	44 8b 43 10	movl	16(%rbx), %r8d
10003d1be:	be 00 04 00 00	movl	$1024, %esi
10003d1c3:	4c 89 e7	movq	%r12, %rdi
10003d1c6:	4c 89 f2	movq	%r14, %rdx
10003d1c9:	31 c0	xorl	%eax, %eax
10003d1cb:	e8 32 4c 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003d1d0:	48 8b 7b 18	movq	24(%rbx), %rdi
10003d1d4:	4c 89 e6	movq	%r12, %rsi
10003d1d7:	e8 56 00 00 00	callq	0x10003d232
10003d1dc:	48 8b 0d 5d 54 02 00	movq	152669(%rip), %rcx
10003d1e3:	44 8b 43 10	movl	16(%rbx), %r8d
10003d1e7:	be 00 04 00 00	movl	$1024, %esi
10003d1ec:	4c 89 e7	movq	%r12, %rdi
10003d1ef:	4c 89 fa	movq	%r15, %rdx
10003d1f2:	31 c0	xorl	%eax, %eax
10003d1f4:	e8 09 4c 00 00	callq	0x100041e02 ## symbol stub for: _snprintf
10003d1f9:	48 8b 7b 20	movq	32(%rbx), %rdi
10003d1fd:	4c 89 e6	movq	%r12, %rsi
10003d200:	e8 2d 00 00 00	callq	0x10003d232
10003d205:	48 8b 1b	movq	(%rbx), %rbx
10003d208:	48 85 db	testq	%rbx, %rbx
10003d20b:	75 94	jne	0x10003d1a1
10003d20d:	48 8b 05 14 ae 01 00	movq	110100(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10003d214:	48 8b 00	movq	(%rax), %rax
10003d217:	48 3b 45 d8	cmpq	-40(%rbp), %rax
10003d21b:	75 10	jne	0x10003d22d
10003d21d:	48 81 c4 10 04 00 00	addq	$1040, %rsp
10003d224:	5b	popq	%rbx
10003d225:	41 5c	popq	%r12
10003d227:	41 5e	popq	%r14
10003d229:	41 5f	popq	%r15
10003d22b:	5d	popq	%rbp
10003d22c:	c3	retq
10003d22d:	e8 40 45 00 00	callq	0x100041772 ## symbol stub for: ___stack_chk_fail
10003d232:	55	pushq	%rbp
10003d233:	48 89 e5	movq	%rsp, %rbp
10003d236:	41 57	pushq	%r15
10003d238:	41 56	pushq	%r14
10003d23a:	53	pushq	%rbx
10003d23b:	48 83 ec 38	subq	$56, %rsp
10003d23f:	49 89 f6	movq	%rsi, %r14
10003d242:	48 89 fb	movq	%rdi, %rbx
10003d245:	48 8d 35 83 77 00 00	leaq	30595(%rip), %rsi ## literal pool for: "_dirty"
10003d24c:	e8 e5 4d 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003d251:	84 c0	testb	%al, %al
10003d253:	74 68	je	0x10003d2bd
10003d255:	48 8d 35 73 77 00 00	leaq	30579(%rip), %rsi ## literal pool for: "_dirty"
10003d25c:	48 89 df	movq	%rbx, %rdi
10003d25f:	31 d2	xorl	%edx, %edx
10003d261:	e8 48 4e 00 00	callq	0x1000420ae ## symbol stub for: _xpc_dictionary_set_value
10003d266:	48 89 df	movq	%rbx, %rdi
10003d269:	e8 68 4d 00 00	callq	0x100041fd6 ## symbol stub for: _xpc_copy
10003d26e:	49 89 c7	movq	%rax, %r15
10003d271:	4c 89 f7	movq	%r14, %rdi
10003d274:	e8 69 1d fd ff	callq	0x10000efe2
10003d279:	48 89 c3	movq	%rax, %rbx
10003d27c:	e8 93 12 fd ff	callq	0x10000e514
10003d281:	48 8b 0d 90 ad 01 00	movq	109968(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10003d288:	48 8d 75 b8	leaq	-72(%rbp), %rsi
10003d28c:	48 89 0e	movq	%rcx, (%rsi)
10003d28f:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
10003d297:	48 8d 0d f1 02 00 00	leaq	753(%rip), %rcx
10003d29e:	48 89 4e 10	movq	%rcx, 16(%rsi)
10003d2a2:	48 8d 0d 77 e7 01 00	leaq	124791(%rip), %rcx
10003d2a9:	48 89 4e 18	movq	%rcx, 24(%rsi)
10003d2ad:	4c 89 7e 20	movq	%r15, 32(%rsi)
10003d2b1:	48 89 5e 28	movq	%rbx, 40(%rsi)
10003d2b5:	48 89 c7	movq	%rax, %rdi
10003d2b8:	e8 17 46 00 00	callq	0x1000418d4 ## symbol stub for: _dispatch_async
10003d2bd:	48 83 c4 38	addq	$56, %rsp
10003d2c1:	5b	popq	%rbx
10003d2c2:	41 5e	popq	%r14
10003d2c4:	41 5f	popq	%r15
10003d2c6:	5d	popq	%rbp
10003d2c7:	c3	retq
10003d2c8:	55	pushq	%rbp
10003d2c9:	48 89 e5	movq	%rsp, %rbp
10003d2cc:	e8 6f fe ff ff	callq	0x10003d140
10003d2d1:	e8 3e 12 fd ff	callq	0x10000e514
10003d2d6:	48 8d 35 13 e7 01 00	leaq	124691(%rip), %rsi
10003d2dd:	48 89 c7	movq	%rax, %rdi
10003d2e0:	5d	popq	%rbp
10003d2e1:	e9 e4 46 00 00	jmp	0x1000419ca ## symbol stub for: _dispatch_sync
10003d2e6:	55	pushq	%rbp
10003d2e7:	48 89 e5	movq	%rsp, %rbp
10003d2ea:	5d	popq	%rbp
10003d2eb:	c3	retq
10003d2ec:	55	pushq	%rbp
10003d2ed:	48 89 e5	movq	%rsp, %rbp
10003d2f0:	5d	popq	%rbp
10003d2f1:	c3	retq
10003d2f2:	55	pushq	%rbp
10003d2f3:	48 89 e5	movq	%rsp, %rbp
10003d2f6:	41 57	pushq	%r15
10003d2f8:	41 56	pushq	%r14
10003d2fa:	41 54	pushq	%r12
10003d2fc:	53	pushq	%rbx
10003d2fd:	49 89 f7	movq	%rsi, %r15
10003d300:	49 89 fe	movq	%rdi, %r14
10003d303:	48 85 d2	testq	%rdx, %rdx
10003d306:	74 2d	je	0x10003d335
10003d308:	48 89 d3	movq	%rdx, %rbx
10003d30b:	4c 8b 25 be 66 02 00	movq	157374(%rip), %r12
10003d312:	4c 89 e7	movq	%r12, %rdi
10003d315:	48 89 d6	movq	%rdx, %rsi
10003d318:	e8 63 4b 00 00	callq	0x100041e80 ## symbol stub for: _strstr
10003d31d:	48 85 c0	testq	%rax, %rax
10003d320:	74 13	je	0x10003d335
10003d322:	4c 89 e7	movq	%r12, %rdi
10003d325:	48 89 de	movq	%rbx, %rsi
10003d328:	e8 5b 78 ff ff	callq	0x100034b88
10003d32d:	48 85 c0	testq	%rax, %rax
10003d330:	0f 95 c0	setne	%al
10003d333:	eb 0f	jmp	0x10003d344
10003d335:	48 8b 3d 9c 66 02 00	movq	157340(%rip), %rdi
10003d33c:	4c 89 fe	movq	%r15, %rsi
10003d33f:	e8 f2 4c 00 00	callq	0x100042036 ## symbol stub for: _xpc_dictionary_get_bool
10003d344:	41 88 06	movb	%al, (%r14)
10003d347:	5b	popq	%rbx
10003d348:	41 5c	popq	%r12
10003d34a:	41 5e	popq	%r14
10003d34c:	41 5f	popq	%r15
10003d34e:	5d	popq	%rbp
10003d34f:	c3	retq
10003d350:	55	pushq	%rbp
10003d351:	48 89 e5	movq	%rsp, %rbp
10003d354:	41 56	pushq	%r14
10003d356:	53	pushq	%rbx
10003d357:	49 89 fe	movq	%rdi, %r14
10003d35a:	48 8b 3d 77 66 02 00	movq	157303(%rip), %rdi
10003d361:	e8 06 4d 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d366:	48 85 c0	testq	%rax, %rax
10003d369:	74 1f	je	0x10003d38a
10003d36b:	48 89 c3	movq	%rax, %rbx
10003d36e:	48 89 c7	movq	%rax, %rdi
10003d371:	e8 50 4d 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d376:	48 3b 05 93 ad 01 00	cmpq	109971(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003d37d:	75 0b	jne	0x10003d38a
10003d37f:	48 89 df	movq	%rbx, %rdi
10003d382:	e8 4b 4d 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003d387:	49 89 06	movq	%rax, (%r14)
10003d38a:	5b	popq	%rbx
10003d38b:	41 5e	popq	%r14
10003d38d:	5d	popq	%rbp
10003d38e:	c3	retq
10003d38f:	55	pushq	%rbp
10003d390:	48 89 e5	movq	%rsp, %rbp
10003d393:	41 57	pushq	%r15
10003d395:	41 56	pushq	%r14
10003d397:	41 54	pushq	%r12
10003d399:	53	pushq	%rbx
10003d39a:	49 89 f7	movq	%rsi, %r15
10003d39d:	49 89 fe	movq	%rdi, %r14
10003d3a0:	48 85 d2	testq	%rdx, %rdx
10003d3a3:	74 27	je	0x10003d3cc
10003d3a5:	48 89 d3	movq	%rdx, %rbx
10003d3a8:	4c 8b 25 21 66 02 00	movq	157217(%rip), %r12
10003d3af:	4c 89 e7	movq	%r12, %rdi
10003d3b2:	48 89 d6	movq	%rdx, %rsi
10003d3b5:	e8 c6 4a 00 00	callq	0x100041e80 ## symbol stub for: _strstr
10003d3ba:	48 85 c0	testq	%rax, %rax
10003d3bd:	74 0d	je	0x10003d3cc
10003d3bf:	4c 89 e7	movq	%r12, %rdi
10003d3c2:	48 89 de	movq	%rbx, %rsi
10003d3c5:	e8 be 77 ff ff	callq	0x100034b88
10003d3ca:	eb 30	jmp	0x10003d3fc
10003d3cc:	48 8b 3d 05 66 02 00	movq	157189(%rip), %rdi
10003d3d3:	4c 89 fe	movq	%r15, %rsi
10003d3d6:	e8 91 4c 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d3db:	48 85 c0	testq	%rax, %rax
10003d3de:	74 1f	je	0x10003d3ff
10003d3e0:	48 89 c3	movq	%rax, %rbx
10003d3e3:	48 89 c7	movq	%rax, %rdi
10003d3e6:	e8 db 4c 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d3eb:	48 3b 05 1e ad 01 00	cmpq	109854(%rip), %rax ## literal pool symbol address: __xpc_type_int64
10003d3f2:	75 0b	jne	0x10003d3ff
10003d3f4:	48 89 df	movq	%rbx, %rdi
10003d3f7:	e8 d6 4c 00 00	callq	0x1000420d2 ## symbol stub for: _xpc_int64_get_value
10003d3fc:	41 89 06	movl	%eax, (%r14)
10003d3ff:	5b	popq	%rbx
10003d400:	41 5c	popq	%r12
10003d402:	41 5e	popq	%r14
10003d404:	41 5f	popq	%r15
10003d406:	5d	popq	%rbp
10003d407:	c3	retq
10003d408:	55	pushq	%rbp
10003d409:	48 89 e5	movq	%rsp, %rbp
10003d40c:	41 57	pushq	%r15
10003d40e:	41 56	pushq	%r14
10003d410:	53	pushq	%rbx
10003d411:	50	pushq	%rax
10003d412:	49 89 d7	movq	%rdx, %r15
10003d415:	49 89 fe	movq	%rdi, %r14
10003d418:	48 8b 3d b9 65 02 00	movq	157113(%rip), %rdi
10003d41f:	e8 48 4c 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d424:	48 85 c0	testq	%rax, %rax
10003d427:	74 13	je	0x10003d43c
10003d429:	48 89 c3	movq	%rax, %rbx
10003d42c:	48 89 c7	movq	%rax, %rdi
10003d42f:	e8 92 4c 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d434:	4c 39 f8	cmpq	%r15, %rax
10003d437:	75 03	jne	0x10003d43c
10003d439:	49 89 1e	movq	%rbx, (%r14)
10003d43c:	48 83 c4 08	addq	$8, %rsp
10003d440:	5b	popq	%rbx
10003d441:	41 5e	popq	%r14
10003d443:	41 5f	popq	%r15
10003d445:	5d	popq	%rbp
10003d446:	c3	retq
10003d447:	55	pushq	%rbp
10003d448:	48 89 e5	movq	%rsp, %rbp
10003d44b:	41 57	pushq	%r15
10003d44d:	41 56	pushq	%r14
10003d44f:	41 54	pushq	%r12
10003d451:	53	pushq	%rbx
10003d452:	48 83 ec 10	subq	$16, %rsp
10003d456:	49 89 d6	movq	%rdx, %r14
10003d459:	48 89 f3	movq	%rsi, %rbx
10003d45c:	49 89 ff	movq	%rdi, %r15
10003d45f:	48 89 f7	movq	%rsi, %rdi
10003d462:	e8 5f 4c 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d467:	48 3b 05 ba ac 01 00	cmpq	109754(%rip), %rax ## literal pool symbol address: __xpc_type_string
10003d46e:	75 65	jne	0x10003d4d5
10003d470:	4c 8d 65 d8	leaq	-40(%rbp), %r12
10003d474:	49 c7 04 24 00 00 00 00	movq	$0, (%r12)
10003d47c:	48 89 df	movq	%rbx, %rdi
10003d47f:	e8 a2 4c 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003d484:	4c 89 ff	movq	%r15, %rdi
10003d487:	48 89 c6	movq	%rax, %rsi
10003d48a:	4c 89 e2	movq	%r12, %rdx
10003d48d:	b9 01 00 00 00	movl	$1, %ecx
10003d492:	45 31 c0	xorl	%r8d, %r8d
10003d495:	e8 e6 54 fd ff	callq	0x100012980
10003d49a:	48 85 c0	testq	%rax, %rax
10003d49d:	74 36	je	0x10003d4d5
10003d49f:	4d 85 f6	testq	%r14, %r14
10003d4a2:	74 10	je	0x10003d4b4
10003d4a4:	48 8b 15 c5 53 02 00	movq	152517(%rip), %rdx
10003d4ab:	48 8d 0d be 53 02 00	leaq	152510(%rip), %rcx
10003d4b2:	eb 0e	jmp	0x10003d4c2
10003d4b4:	48 8b 15 ad 53 02 00	movq	152493(%rip), %rdx
10003d4bb:	48 8d 0d a6 53 02 00	leaq	152486(%rip), %rcx
10003d4c2:	48 89 10	movq	%rdx, (%rax)
10003d4c5:	48 85 d2	testq	%rdx, %rdx
10003d4c8:	74 04	je	0x10003d4ce
10003d4ca:	48 89 42 08	movq	%rax, 8(%rdx)
10003d4ce:	48 89 01	movq	%rax, (%rcx)
10003d4d1:	48 89 48 08	movq	%rcx, 8(%rax)
10003d4d5:	48 83 c4 10	addq	$16, %rsp
10003d4d9:	5b	popq	%rbx
10003d4da:	41 5c	popq	%r12
10003d4dc:	41 5e	popq	%r14
10003d4de:	41 5f	popq	%r15
10003d4e0:	5d	popq	%rbp
10003d4e1:	c3	retq
10003d4e2:	55	pushq	%rbp
10003d4e3:	48 89 e5	movq	%rsp, %rbp
10003d4e6:	41 57	pushq	%r15
10003d4e8:	41 56	pushq	%r14
10003d4ea:	53	pushq	%rbx
10003d4eb:	50	pushq	%rax
10003d4ec:	49 89 d6	movq	%rdx, %r14
10003d4ef:	48 89 f3	movq	%rsi, %rbx
10003d4f2:	49 89 ff	movq	%rdi, %r15
10003d4f5:	48 89 f7	movq	%rsi, %rdi
10003d4f8:	e8 c9 4b 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d4fd:	48 3b 05 24 ac 01 00	cmpq	109604(%rip), %rax ## literal pool symbol address: __xpc_type_string
10003d504:	75 43	jne	0x10003d549
10003d506:	48 8d 35 18 61 01 00	leaq	90392(%rip), %rsi ## literal pool for: "MallocStackLogging"
10003d50d:	4c 89 ff	movq	%r15, %rdi
10003d510:	e8 17 49 00 00	callq	0x100041e2c ## symbol stub for: _strcmp
10003d515:	85 c0	testl	%eax, %eax
10003d517:	74 30	je	0x10003d549
10003d519:	48 89 df	movq	%rbx, %rdi
10003d51c:	e8 05 4c 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003d521:	48 8d 3d 32 bd 00 00	leaq	48434(%rip), %rdi ## literal pool for: "%s=%s"
10003d528:	4c 89 fe	movq	%r15, %rsi
10003d52b:	48 89 c2	movq	%rax, %rdx
10003d52e:	31 c0	xorl	%eax, %eax
10003d530:	e8 00 1c fd ff	callq	0x10000f135
10003d535:	48 8b 0d 5c 52 02 00	movq	152156(%rip), %rcx
10003d53c:	49 8b 16	movq	(%r14), %rdx
10003d53f:	48 89 04 d1	movq	%rax, (%rcx,%rdx,8)
10003d543:	48 ff c2	incq	%rdx
10003d546:	49 89 16	movq	%rdx, (%r14)
10003d549:	48 83 c4 08	addq	$8, %rsp
10003d54d:	5b	popq	%rbx
10003d54e:	41 5e	popq	%r14
10003d550:	41 5f	popq	%r15
10003d552:	5d	popq	%rbp
10003d553:	c3	retq
10003d554:	55	pushq	%rbp
10003d555:	48 89 e5	movq	%rsp, %rbp
10003d558:	53	pushq	%rbx
10003d559:	50	pushq	%rax
10003d55a:	e8 0d 4b 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d55f:	48 85 c0	testq	%rax, %rax
10003d562:	74 14	je	0x10003d578
10003d564:	48 89 c3	movq	%rax, %rbx
10003d567:	48 89 c7	movq	%rax, %rdi
10003d56a:	e8 57 4b 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d56f:	48 3b 05 8a ab 01 00	cmpq	109450(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003d576:	74 09	je	0x10003d581
10003d578:	31 c0	xorl	%eax, %eax
10003d57a:	48 83 c4 08	addq	$8, %rsp
10003d57e:	5b	popq	%rbx
10003d57f:	5d	popq	%rbp
10003d580:	c3	retq
10003d581:	48 89 df	movq	%rbx, %rdi
10003d584:	48 83 c4 08	addq	$8, %rsp
10003d588:	5b	popq	%rbx
10003d589:	5d	popq	%rbp
10003d58a:	e9 73 4b 00 00	jmp	0x100042102 ## symbol stub for: _xpc_retain
10003d58f:	55	pushq	%rbp
10003d590:	48 89 e5	movq	%rsp, %rbp
10003d593:	41 57	pushq	%r15
10003d595:	41 56	pushq	%r14
10003d597:	53	pushq	%rbx
10003d598:	50	pushq	%rax
10003d599:	49 89 fe	movq	%rdi, %r14
10003d59c:	4c 8b 7f 20	movq	32(%rdi), %r15
10003d5a0:	48 8b 7f 28	movq	40(%rdi), %rdi
10003d5a4:	48 8d 35 9f 42 01 00	leaq	82591(%rip), %rsi ## literal pool for: "w"
10003d5ab:	e8 74 44 00 00	callq	0x100041a24 ## symbol stub for: _fopen
10003d5b0:	48 85 c0	testq	%rax, %rax
10003d5b3:	74 5c	je	0x10003d611
10003d5b5:	48 89 c3	movq	%rax, %rbx
10003d5b8:	48 8d 35 55 61 01 00	leaq	90453(%rip), %rsi ## literal pool for: "%s\n"
10003d5bf:	48 8d 15 52 61 01 00	leaq	90450(%rip), %rdx ## literal pool for: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">"
10003d5c6:	48 89 c7	movq	%rax, %rdi
10003d5c9:	31 c0	xorl	%eax, %eax
10003d5cb:	e8 5a 44 00 00	callq	0x100041a2a ## symbol stub for: _fprintf
10003d5d0:	4c 89 ff	movq	%r15, %rdi
10003d5d3:	e8 64 4a 00 00	callq	0x10004203c ## symbol stub for: _xpc_dictionary_get_count
10003d5d8:	48 85 c0	testq	%rax, %rax
10003d5db:	74 48	je	0x10003d625
10003d5dd:	48 8d 3d d8 61 01 00	leaq	90584(%rip), %rdi ## literal pool for: "<dict>\n"
10003d5e4:	be 07 00 00 00	movl	$7, %esi
10003d5e9:	ba 01 00 00 00	movl	$1, %edx
10003d5ee:	48 89 d9	movq	%rbx, %rcx
10003d5f1:	e8 70 44 00 00	callq	0x100041a66 ## symbol stub for: _fwrite
10003d5f6:	48 8d 15 7e 00 00 00	leaq	126(%rip), %rdx
10003d5fd:	4c 89 ff	movq	%r15, %rdi
10003d600:	48 89 de	movq	%rbx, %rsi
10003d603:	e8 fe 49 00 00	callq	0x100042006 ## symbol stub for: _xpc_dictionary_apply_f
10003d608:	48 8d 3d b5 61 01 00	leaq	90549(%rip), %rdi ## literal pool for: "</dict>\n"
10003d60f:	eb 1b	jmp	0x10003d62c
10003d611:	e8 4a 41 00 00	callq	0x100041760 ## symbol stub for: ___error
10003d616:	48 63 38	movslq	(%rax), %rdi
10003d619:	48 85 ff	testq	%rdi, %rdi
10003d61c:	74 41	je	0x10003d65f
10003d61e:	e8 7f 41 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003d623:	eb 3a	jmp	0x10003d65f
10003d625:	48 8d 3d a1 61 01 00	leaq	90529(%rip), %rdi ## literal pool for: "<dict/>\n"
10003d62c:	be 08 00 00 00	movl	$8, %esi
10003d631:	ba 01 00 00 00	movl	$1, %edx
10003d636:	48 89 d9	movq	%rbx, %rcx
10003d639:	e8 28 44 00 00	callq	0x100041a66 ## symbol stub for: _fwrite
10003d63e:	48 8d 3d 91 61 01 00	leaq	90513(%rip), %rdi ## literal pool for: "</plist>\n"
10003d645:	be 09 00 00 00	movl	$9, %esi
10003d64a:	ba 01 00 00 00	movl	$1, %edx
10003d64f:	48 89 d9	movq	%rbx, %rcx
10003d652:	e8 0f 44 00 00	callq	0x100041a66 ## symbol stub for: _fwrite
10003d657:	48 89 df	movq	%rbx, %rdi
10003d65a:	e8 9c 52 ff ff	callq	0x1000328fb
10003d65f:	49 8b 7e 20	movq	32(%r14), %rdi
10003d663:	e8 94 4a 00 00	callq	0x1000420fc ## symbol stub for: _xpc_release
10003d668:	49 8b 7e 28	movq	40(%r14), %rdi
10003d66c:	48 83 c4 08	addq	$8, %rsp
10003d670:	5b	popq	%rbx
10003d671:	41 5e	popq	%r14
10003d673:	41 5f	popq	%r15
10003d675:	5d	popq	%rbp
10003d676:	e9 b5 43 00 00	jmp	0x100041a30 ## symbol stub for: _free
10003d67b:	55	pushq	%rbp
10003d67c:	48 89 e5	movq	%rsp, %rbp
10003d67f:	41 57	pushq	%r15
10003d681:	41 56	pushq	%r14
10003d683:	53	pushq	%rbx
10003d684:	50	pushq	%rax
10003d685:	49 89 d6	movq	%rdx, %r14
10003d688:	48 89 f3	movq	%rsi, %rbx
10003d68b:	49 89 ff	movq	%rdi, %r15
10003d68e:	48 89 f7	movq	%rsi, %rdi
10003d691:	e8 30 4a 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d696:	48 3b 05 63 aa 01 00	cmpq	109155(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10003d69d:	75 17	jne	0x10003d6b6
10003d69f:	48 8d 35 7b 70 00 00	leaq	28795(%rip), %rsi ## literal pool for: "Disabled"
10003d6a6:	48 89 df	movq	%rbx, %rdi
10003d6a9:	e8 be 49 00 00	callq	0x10004206c ## symbol stub for: _xpc_dictionary_get_value
10003d6ae:	48 89 c3	movq	%rax, %rbx
10003d6b1:	48 85 c0	testq	%rax, %rax
10003d6b4:	74 34	je	0x10003d6ea
10003d6b6:	48 89 df	movq	%rbx, %rdi
10003d6b9:	e8 08 4a 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d6be:	48 3b 05 1b aa 01 00	cmpq	109083(%rip), %rax ## literal pool symbol address: __xpc_type_bool
10003d6c5:	74 11	je	0x10003d6d8
10003d6c7:	48 89 df	movq	%rbx, %rdi
10003d6ca:	e8 f7 49 00 00	callq	0x1000420c6 ## symbol stub for: _xpc_get_type
10003d6cf:	48 3b 05 52 aa 01 00	cmpq	109138(%rip), %rax ## literal pool symbol address: __xpc_type_string
10003d6d6:	75 12	jne	0x10003d6ea
10003d6d8:	4c 89 ff	movq	%r15, %rdi
10003d6db:	be 3c 00 00 00	movl	$60, %esi
10003d6e0:	e8 41 47 00 00	callq	0x100041e26 ## symbol stub for: _strchr
10003d6e5:	48 85 c0	testq	%rax, %rax
10003d6e8:	74 0b	je	0x10003d6f5
10003d6ea:	48 83 c4 08	addq	$8, %rsp
10003d6ee:	5b	popq	%rbx
10003d6ef:	41 5e	popq	%r14
10003d6f1:	41 5f	popq	%r15
10003d6f3:	5d	popq	%rbp
10003d6f4:	c3	retq
10003d6f5:	48 8d 35 e4 60 01 00	leaq	90340(%rip), %rsi ## literal pool for: "\t<key>%s</key>\n"
10003d6fc:	4c 89 f7	movq	%r14, %rdi
10003d6ff:	4c 89 fa	movq	%r15, %rdx
10003d702:	31 c0	xorl	%eax, %eax
10003d704:	e8 21 43 00 00	callq	0x100041a2a ## symbol stub for: _fprintf
10003d709:	48 3b 1d c0 a9 01 00	cmpq	108992(%rip), %rbx ## literal pool symbol address: __xpc_bool_true
10003d710:	74 2f	je	0x10003d741
10003d712:	48 3b 1d af a9 01 00	cmpq	108975(%rip), %rbx ## literal pool symbol address: __xpc_bool_false
10003d719:	74 34	je	0x10003d74f
10003d71b:	48 89 df	movq	%rbx, %rdi
10003d71e:	e8 03 4a 00 00	callq	0x100042126 ## symbol stub for: _xpc_string_get_string_ptr
10003d723:	48 8d 35 db 60 01 00	leaq	90331(%rip), %rsi ## literal pool for: "\t<string>%s</string>\n"
10003d72a:	4c 89 f7	movq	%r14, %rdi
10003d72d:	48 89 c2	movq	%rax, %rdx
10003d730:	31 c0	xorl	%eax, %eax
10003d732:	48 83 c4 08	addq	$8, %rsp
10003d736:	5b	popq	%rbx
10003d737:	41 5e	popq	%r14
10003d739:	41 5f	popq	%r15
10003d73b:	5d	popq	%rbp
10003d73c:	e9 e9 42 00 00	jmp	0x100041a2a ## symbol stub for: _fprintf
10003d741:	48 8d 3d a8 60 01 00	leaq	90280(%rip), %rdi ## literal pool for: "\t<true/>\n"
10003d748:	be 09 00 00 00	movl	$9, %esi
10003d74d:	eb 0c	jmp	0x10003d75b
10003d74f:	48 8d 3d a4 60 01 00	leaq	90276(%rip), %rdi ## literal pool for: "\t<false/>\n"
10003d756:	be 0a 00 00 00	movl	$10, %esi
10003d75b:	ba 01 00 00 00	movl	$1, %edx
10003d760:	4c 89 f1	movq	%r14, %rcx
10003d763:	48 83 c4 08	addq	$8, %rsp
10003d767:	5b	popq	%rbx
10003d768:	41 5e	popq	%r14
10003d76a:	41 5f	popq	%r15
10003d76c:	5d	popq	%rbp
10003d76d:	e9 f4 42 00 00	jmp	0x100041a66 ## symbol stub for: _fwrite
10003d772:	55	pushq	%rbp
10003d773:	48 89 e5	movq	%rsp, %rbp
10003d776:	8b 47 14	movl	20(%rdi), %eax
10003d779:	83 c0 c0	addl	$-64, %eax
10003d77c:	83 f8 08	cmpl	$8, %eax
10003d77f:	76 04	jbe	0x10003d785
10003d781:	31 c0	xorl	%eax, %eax
10003d783:	eb 12	jmp	0x10003d797
10003d785:	89 c0	movl	%eax, %eax
10003d787:	48 8d 04 80	leaq	(%rax,%rax,4), %rax
10003d78b:	48 8d 0d ae e2 01 00	leaq	123566(%rip), %rcx
10003d792:	48 8b 44 c1 28	movq	40(%rcx,%rax,8), %rax
10003d797:	5d	popq	%rbp
10003d798:	c3	retq
10003d799:	55	pushq	%rbp
10003d79a:	48 89 e5	movq	%rsp, %rbp
10003d79d:	53	pushq	%rbx
10003d79e:	50	pushq	%rax
10003d79f:	48 89 f3	movq	%rsi, %rbx
10003d7a2:	83 3f 00	cmpl	$0, (%rdi)
10003d7a5:	78 18	js	0x10003d7bf
10003d7a7:	83 7f 04 24	cmpl	$36, 4(%rdi)
10003d7ab:	75 12	jne	0x10003d7bf
10003d7ad:	8b 47 0c	movl	12(%rdi), %eax
10003d7b0:	8b 77 20	movl	32(%rdi), %esi
10003d7b3:	89 c7	movl	%eax, %edi
10003d7b5:	e8 4c c0 ff ff	callq	0x100039806
10003d7ba:	89 43 20	movl	%eax, 32(%rbx)
10003d7bd:	eb 15	jmp	0x10003d7d4
10003d7bf:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003d7c6:	48 8b 05 33 a8 01 00	movq	108595(%rip), %rax ## literal pool symbol address: _NDR_record
10003d7cd:	48 8b 00	movq	(%rax), %rax
10003d7d0:	48 89 43 18	movq	%rax, 24(%rbx)
10003d7d4:	48 83 c4 08	addq	$8, %rsp
10003d7d8:	5b	popq	%rbx
10003d7d9:	5d	popq	%rbp
10003d7da:	c3	retq
10003d7db:	55	pushq	%rbp
10003d7dc:	48 89 e5	movq	%rsp, %rbp
10003d7df:	53	pushq	%rbx
10003d7e0:	50	pushq	%rax
10003d7e1:	48 89 f3	movq	%rsi, %rbx
10003d7e4:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003d7e9:	83 3f 00	cmpl	$0, (%rdi)
10003d7ec:	79 32	jns	0x10003d820
10003d7ee:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003d7f2:	75 2c	jne	0x10003d820
10003d7f4:	83 7f 04 28	cmpl	$40, 4(%rdi)
10003d7f8:	75 26	jne	0x10003d820
10003d7fa:	0f b7 4f 26	movzwl	38(%rdi), %ecx
10003d7fe:	c1 e1 10	shll	$16, %ecx
10003d801:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003d806:	81 f9 00 00 10 00	cmpl	$1048576, %ecx
10003d80c:	75 12	jne	0x10003d820
10003d80e:	8b 47 0c	movl	12(%rdi), %eax
10003d811:	8b 77 1c	movl	28(%rdi), %esi
10003d814:	89 c7	movl	%eax, %edi
10003d816:	e8 09 c0 ff ff	callq	0x100039824
10003d81b:	89 43 20	movl	%eax, 32(%rbx)
10003d81e:	eb 11	jmp	0x10003d831
10003d820:	89 43 20	movl	%eax, 32(%rbx)
10003d823:	48 8b 05 d6 a7 01 00	movq	108502(%rip), %rax ## literal pool symbol address: _NDR_record
10003d82a:	48 8b 00	movq	(%rax), %rax
10003d82d:	48 89 43 18	movq	%rax, 24(%rbx)
10003d831:	48 83 c4 08	addq	$8, %rsp
10003d835:	5b	popq	%rbx
10003d836:	5d	popq	%rbp
10003d837:	c3	retq
10003d838:	55	pushq	%rbp
10003d839:	48 89 e5	movq	%rsp, %rbp
10003d83c:	53	pushq	%rbx
10003d83d:	50	pushq	%rax
10003d83e:	48 89 f3	movq	%rsi, %rbx
10003d841:	83 3f 00	cmpl	$0, (%rdi)
10003d844:	78 18	js	0x10003d85e
10003d846:	83 7f 04 24	cmpl	$36, 4(%rdi)
10003d84a:	75 12	jne	0x10003d85e
10003d84c:	8b 47 0c	movl	12(%rdi), %eax
10003d84f:	8b 77 20	movl	32(%rdi), %esi
10003d852:	89 c7	movl	%eax, %edi
10003d854:	e8 41 c0 ff ff	callq	0x10003989a
10003d859:	89 43 20	movl	%eax, 32(%rbx)
10003d85c:	eb 15	jmp	0x10003d873
10003d85e:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003d865:	48 8b 05 94 a7 01 00	movq	108436(%rip), %rax ## literal pool symbol address: _NDR_record
10003d86c:	48 8b 00	movq	(%rax), %rax
10003d86f:	48 89 43 18	movq	%rax, 24(%rbx)
10003d873:	48 83 c4 08	addq	$8, %rsp
10003d877:	5b	popq	%rbx
10003d878:	5d	popq	%rbp
10003d879:	c3	retq
10003d87a:	55	pushq	%rbp
10003d87b:	48 89 e5	movq	%rsp, %rbp
10003d87e:	53	pushq	%rbx
10003d87f:	50	pushq	%rax
10003d880:	48 89 f3	movq	%rsi, %rbx
10003d883:	83 3f 00	cmpl	$0, (%rdi)
10003d886:	78 13	js	0x10003d89b
10003d888:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003d88c:	75 0d	jne	0x10003d89b
10003d88e:	8b 7f 0c	movl	12(%rdi), %edi
10003d891:	e8 22 c0 ff ff	callq	0x1000398b8
10003d896:	89 43 20	movl	%eax, 32(%rbx)
10003d899:	eb 15	jmp	0x10003d8b0
10003d89b:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003d8a2:	48 8b 05 57 a7 01 00	movq	108375(%rip), %rax ## literal pool symbol address: _NDR_record
10003d8a9:	48 8b 00	movq	(%rax), %rax
10003d8ac:	48 89 43 18	movq	%rax, 24(%rbx)
10003d8b0:	48 83 c4 08	addq	$8, %rsp
10003d8b4:	5b	popq	%rbx
10003d8b5:	5d	popq	%rbp
10003d8b6:	c3	retq
10003d8b7:	55	pushq	%rbp
10003d8b8:	48 89 e5	movq	%rsp, %rbp
10003d8bb:	53	pushq	%rbx
10003d8bc:	50	pushq	%rax
10003d8bd:	48 89 f3	movq	%rsi, %rbx
10003d8c0:	83 3f 00	cmpl	$0, (%rdi)
10003d8c3:	78 18	js	0x10003d8dd
10003d8c5:	83 7f 04 24	cmpl	$36, 4(%rdi)
10003d8c9:	75 12	jne	0x10003d8dd
10003d8cb:	8b 47 0c	movl	12(%rdi), %eax
10003d8ce:	8b 77 20	movl	32(%rdi), %esi
10003d8d1:	89 c7	movl	%eax, %edi
10003d8d3:	e8 fe bf ff ff	callq	0x1000398d6
10003d8d8:	89 43 20	movl	%eax, 32(%rbx)
10003d8db:	eb 15	jmp	0x10003d8f2
10003d8dd:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003d8e4:	48 8b 05 15 a7 01 00	movq	108309(%rip), %rax ## literal pool symbol address: _NDR_record
10003d8eb:	48 8b 00	movq	(%rax), %rax
10003d8ee:	48 89 43 18	movq	%rax, 24(%rbx)
10003d8f2:	48 83 c4 08	addq	$8, %rsp
10003d8f6:	5b	popq	%rbx
10003d8f7:	5d	popq	%rbp
10003d8f8:	c3	retq
10003d8f9:	55	pushq	%rbp
10003d8fa:	48 89 e5	movq	%rsp, %rbp
10003d8fd:	8b 07	movl	(%rdi), %eax
10003d8ff:	83 e0 1f	andl	$31, %eax
10003d902:	89 06	movl	%eax, (%rsi)
10003d904:	8b 47 08	movl	8(%rdi), %eax
10003d907:	89 46 08	movl	%eax, 8(%rsi)
10003d90a:	c7 46 04 24 00 00 00	movl	$36, 4(%rsi)
10003d911:	31 c0	xorl	%eax, %eax
10003d913:	89 46 0c	movl	%eax, 12(%rsi)
10003d916:	8b 4f 14	movl	20(%rdi), %ecx
10003d919:	83 c1 64	addl	$100, %ecx
10003d91c:	89 4e 14	movl	%ecx, 20(%rsi)
10003d91f:	89 46 10	movl	%eax, 16(%rsi)
10003d922:	8b 4f 14	movl	20(%rdi), %ecx
10003d925:	83 c1 c0	addl	$-64, %ecx
10003d928:	83 f9 08	cmpl	$8, %ecx
10003d92b:	77 20	ja	0x10003d94d
10003d92d:	89 c9	movl	%ecx, %ecx
10003d92f:	48 8d 0c 89	leaq	(%rcx,%rcx,4), %rcx
10003d933:	48 8d 15 06 e1 01 00	leaq	123142(%rip), %rdx
10003d93a:	48 8b 4c ca 28	movq	40(%rdx,%rcx,8), %rcx
10003d93f:	48 85 c9	testq	%rcx, %rcx
10003d942:	74 09	je	0x10003d94d
10003d944:	ff d1	callq	*%rcx
10003d946:	b8 01 00 00 00	movl	$1, %eax
10003d94b:	eb 15	jmp	0x10003d962
10003d94d:	48 8b 0d ac a6 01 00	movq	108204(%rip), %rcx ## literal pool symbol address: _NDR_record
10003d954:	48 8b 09	movq	(%rcx), %rcx
10003d957:	48 89 4e 18	movq	%rcx, 24(%rsi)
10003d95b:	c7 46 20 d1 fe ff ff	movl	$4294966993, 32(%rsi)
10003d962:	5d	popq	%rbp
10003d963:	c3	retq
10003d964:	55	pushq	%rbp
10003d965:	48 89 e5	movq	%rsp, %rbp
10003d968:	b8 70 fe ff ff	movl	$4294966896, %eax
10003d96d:	03 47 14	addl	20(%rdi), %eax
10003d970:	83 f8 27	cmpl	$39, %eax
10003d973:	76 04	jbe	0x10003d979
10003d975:	31 c0	xorl	%eax, %eax
10003d977:	eb 12	jmp	0x10003d98b
10003d979:	89 c0	movl	%eax, %eax
10003d97b:	48 8d 04 80	leaq	(%rax,%rax,4), %rax
10003d97f:	48 8d 0d 42 e2 01 00	leaq	123458(%rip), %rcx
10003d986:	48 8b 44 c1 28	movq	40(%rcx,%rax,8), %rax
10003d98b:	5d	popq	%rbp
10003d98c:	c3	retq
10003d98d:	55	pushq	%rbp
10003d98e:	48 89 e5	movq	%rsp, %rbp
10003d991:	41 57	pushq	%r15
10003d993:	41 56	pushq	%r14
10003d995:	53	pushq	%rbx
10003d996:	50	pushq	%rax
10003d997:	49 89 f6	movq	%rsi, %r14
10003d99a:	83 3f 00	cmpl	$0, (%rdi)
10003d99d:	78 57	js	0x10003d9f6
10003d99f:	48 89 fb	movq	%rdi, %rbx
10003d9a2:	81 7f 04 28 02 00 00	cmpl	$552, 4(%rdi)
10003d9a9:	75 4b	jne	0x10003d9f6
10003d9ab:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003d9af:	ba 00 02 00 00	movl	$512, %edx
10003d9b4:	4c 89 ff	movq	%r15, %rdi
10003d9b7:	31 f6	xorl	%esi, %esi
10003d9b9:	e8 0a 42 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003d9be:	48 85 c0	testq	%rax, %rax
10003d9c1:	74 33	je	0x10003d9f6
10003d9c3:	4d 8d 46 1c	leaq	28(%r14), %r8
10003d9c7:	48 b8 00 00 00 00 00 00 14 00	movabsq	$5629499534213120, %rax
10003d9d1:	49 89 46 20	movq	%rax, 32(%r14)
10003d9d5:	8b 7b 0c	movl	12(%rbx), %edi
10003d9d8:	8b 93 20 02 00 00	movl	544(%rbx), %edx
10003d9de:	8b 8b 24 02 00 00	movl	548(%rbx), %ecx
10003d9e4:	4c 89 fe	movq	%r15, %rsi
10003d9e7:	e8 3b de fc ff	callq	0x10000b827
10003d9ec:	85 c0	testl	%eax, %eax
10003d9ee:	74 27	je	0x10003da17
10003d9f0:	41 89 46 20	movl	%eax, 32(%r14)
10003d9f4:	eb 08	jmp	0x10003d9fe
10003d9f6:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003d9fe:	48 8b 05 fb a5 01 00	movq	108027(%rip), %rax ## literal pool symbol address: _NDR_record
10003da05:	48 8b 00	movq	(%rax), %rax
10003da08:	49 89 46 18	movq	%rax, 24(%r14)
10003da0c:	48 83 c4 08	addq	$8, %rsp
10003da10:	5b	popq	%rbx
10003da11:	41 5e	popq	%r14
10003da13:	41 5f	popq	%r15
10003da15:	5d	popq	%rbp
10003da16:	c3	retq
10003da17:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003da1c:	41 c7 46 04 28 00 00 00	movl	$40, 4(%r14)
10003da24:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003da2c:	eb de	jmp	0x10003da0c
10003da2e:	55	pushq	%rbp
10003da2f:	48 89 e5	movq	%rsp, %rbp
10003da32:	53	pushq	%rbx
10003da33:	50	pushq	%rax
10003da34:	48 89 f3	movq	%rsi, %rbx
10003da37:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003da3c:	83 3f 00	cmpl	$0, (%rdi)
10003da3f:	78 14	js	0x10003da55
10003da41:	83 7f 04 28	cmpl	$40, 4(%rdi)
10003da45:	75 0e	jne	0x10003da55
10003da47:	8b 47 0c	movl	12(%rdi), %eax
10003da4a:	48 8b 77 20	movq	32(%rdi), %rsi
10003da4e:	89 c7	movl	%eax, %edi
10003da50:	e8 dd dd fc ff	callq	0x10000b832
10003da55:	89 43 20	movl	%eax, 32(%rbx)
10003da58:	48 8b 05 a1 a5 01 00	movq	107937(%rip), %rax ## literal pool symbol address: _NDR_record
10003da5f:	48 8b 00	movq	(%rax), %rax
10003da62:	48 89 43 18	movq	%rax, 24(%rbx)
10003da66:	48 83 c4 08	addq	$8, %rsp
10003da6a:	5b	popq	%rbx
10003da6b:	5d	popq	%rbp
10003da6c:	c3	retq
10003da6d:	55	pushq	%rbp
10003da6e:	48 89 e5	movq	%rsp, %rbp
10003da71:	41 57	pushq	%r15
10003da73:	41 56	pushq	%r14
10003da75:	53	pushq	%rbx
10003da76:	50	pushq	%rax
10003da77:	49 89 f6	movq	%rsi, %r14
10003da7a:	83 3f 00	cmpl	$0, (%rdi)
10003da7d:	78 56	js	0x10003dad5
10003da7f:	48 89 fb	movq	%rdi, %rbx
10003da82:	81 7f 04 a8 00 00 00	cmpl	$168, 4(%rdi)
10003da89:	75 4a	jne	0x10003dad5
10003da8b:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003da8f:	ba 80 00 00 00	movl	$128, %edx
10003da94:	4c 89 ff	movq	%r15, %rdi
10003da97:	31 f6	xorl	%esi, %esi
10003da99:	e8 2a 41 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003da9e:	48 85 c0	testq	%rax, %rax
10003daa1:	74 32	je	0x10003dad5
10003daa3:	49 8d 56 1c	leaq	28(%r14), %rdx
10003daa7:	48 b8 00 00 00 00 00 00 10 00	movabsq	$4503599627370496, %rax
10003dab1:	49 89 46 20	movq	%rax, 32(%r14)
10003dab5:	8b 7b 0c	movl	12(%rbx), %edi
10003dab8:	49 8d 4e 30	leaq	48(%r14), %rcx
10003dabc:	4c 8b 83 a0 00 00 00	movq	160(%rbx), %r8
10003dac3:	4c 89 fe	movq	%r15, %rsi
10003dac6:	e8 72 dd fc ff	callq	0x10000b83d
10003dacb:	85 c0	testl	%eax, %eax
10003dacd:	74 27	je	0x10003daf6
10003dacf:	41 89 46 20	movl	%eax, 32(%r14)
10003dad3:	eb 08	jmp	0x10003dadd
10003dad5:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003dadd:	48 8b 05 1c a5 01 00	movq	107804(%rip), %rax ## literal pool symbol address: _NDR_record
10003dae4:	48 8b 00	movq	(%rax), %rax
10003dae7:	49 89 46 18	movq	%rax, 24(%r14)
10003daeb:	48 83 c4 08	addq	$8, %rsp
10003daef:	5b	popq	%rbx
10003daf0:	41 5e	popq	%r14
10003daf2:	41 5f	popq	%r15
10003daf4:	5d	popq	%rbp
10003daf5:	c3	retq
10003daf6:	48 8b 05 03 a5 01 00	movq	107779(%rip), %rax ## literal pool symbol address: _NDR_record
10003dafd:	48 8b 00	movq	(%rax), %rax
10003db00:	49 89 46 28	movq	%rax, 40(%r14)
10003db04:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003db09:	41 c7 46 04 40 00 00 00	movl	$64, 4(%r14)
10003db11:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003db19:	eb d0	jmp	0x10003daeb
10003db1b:	55	pushq	%rbp
10003db1c:	48 89 e5	movq	%rsp, %rbp
10003db1f:	41 57	pushq	%r15
10003db21:	41 56	pushq	%r14
10003db23:	53	pushq	%rbx
10003db24:	50	pushq	%rax
10003db25:	49 89 f6	movq	%rsi, %r14
10003db28:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003db2d:	83 3f 00	cmpl	$0, (%rdi)
10003db30:	79 5b	jns	0x10003db8d
10003db32:	48 89 fb	movq	%rdi, %rbx
10003db35:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003db39:	75 52	jne	0x10003db8d
10003db3b:	81 7b 04 b8 00 00 00	cmpl	$184, 4(%rbx)
10003db42:	75 49	jne	0x10003db8d
10003db44:	0f b7 4b 26	movzwl	38(%rbx), %ecx
10003db48:	c1 e1 10	shll	$16, %ecx
10003db4b:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003db50:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003db56:	75 35	jne	0x10003db8d
10003db58:	4c 8d 7b 30	leaq	48(%rbx), %r15
10003db5c:	ba 80 00 00 00	movl	$128, %edx
10003db61:	4c 89 ff	movq	%r15, %rdi
10003db64:	31 f6	xorl	%esi, %esi
10003db66:	e8 5d 40 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003db6b:	48 89 c1	movq	%rax, %rcx
10003db6e:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003db73:	48 85 c9	testq	%rcx, %rcx
10003db76:	74 15	je	0x10003db8d
10003db78:	8b 7b 0c	movl	12(%rbx), %edi
10003db7b:	8b 53 1c	movl	28(%rbx), %edx
10003db7e:	48 8b 8b b0 00 00 00	movq	176(%rbx), %rcx
10003db85:	4c 89 fe	movq	%r15, %rsi
10003db88:	e8 ba dc fc ff	callq	0x10000b847
10003db8d:	41 89 46 20	movl	%eax, 32(%r14)
10003db91:	48 8b 05 68 a4 01 00	movq	107624(%rip), %rax ## literal pool symbol address: _NDR_record
10003db98:	48 8b 00	movq	(%rax), %rax
10003db9b:	49 89 46 18	movq	%rax, 24(%r14)
10003db9f:	48 83 c4 08	addq	$8, %rsp
10003dba3:	5b	popq	%rbx
10003dba4:	41 5e	popq	%r14
10003dba6:	41 5f	popq	%r15
10003dba8:	5d	popq	%rbp
10003dba9:	c3	retq
10003dbaa:	55	pushq	%rbp
10003dbab:	48 89 e5	movq	%rsp, %rbp
10003dbae:	41 57	pushq	%r15
10003dbb0:	41 56	pushq	%r14
10003dbb2:	53	pushq	%rbx
10003dbb3:	50	pushq	%rax
10003dbb4:	49 89 f6	movq	%rsi, %r14
10003dbb7:	83 3f 00	cmpl	$0, (%rdi)
10003dbba:	78 6a	js	0x10003dc26
10003dbbc:	48 89 fb	movq	%rdi, %rbx
10003dbbf:	81 7f 04 bc 00 00 00	cmpl	$188, 4(%rdi)
10003dbc6:	75 5e	jne	0x10003dc26
10003dbc8:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003dbcc:	ba 80 00 00 00	movl	$128, %edx
10003dbd1:	4c 89 ff	movq	%r15, %rdi
10003dbd4:	31 f6	xorl	%esi, %esi
10003dbd6:	e8 ed 3f 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003dbdb:	48 85 c0	testq	%rax, %rax
10003dbde:	74 46	je	0x10003dc26
10003dbe0:	49 8d 4e 1c	leaq	28(%r14), %rcx
10003dbe4:	48 b8 00 00 00 00 00 00 13 00	movabsq	$5348024557502464, %rax
10003dbee:	49 89 46 20	movq	%rax, 32(%r14)
10003dbf2:	8b 73 08	movl	8(%rbx), %esi
10003dbf5:	8b 7b 0c	movl	12(%rbx), %edi
10003dbf8:	44 8b 83 a0 00 00 00	movl	160(%rbx), %r8d
10003dbff:	48 8b 83 b4 00 00 00	movq	180(%rbx), %rax
10003dc06:	48 81 c3 a4 00 00 00	addq	$164, %rbx
10003dc0d:	48 89 04 24	movq	%rax, (%rsp)
10003dc11:	4c 89 fa	movq	%r15, %rdx
10003dc14:	49 89 d9	movq	%rbx, %r9
10003dc17:	e8 3f dc fc ff	callq	0x10000b85b
10003dc1c:	85 c0	testl	%eax, %eax
10003dc1e:	74 27	je	0x10003dc47
10003dc20:	41 89 46 20	movl	%eax, 32(%r14)
10003dc24:	eb 08	jmp	0x10003dc2e
10003dc26:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003dc2e:	48 8b 05 cb a3 01 00	movq	107467(%rip), %rax ## literal pool symbol address: _NDR_record
10003dc35:	48 8b 00	movq	(%rax), %rax
10003dc38:	49 89 46 18	movq	%rax, 24(%r14)
10003dc3c:	48 83 c4 08	addq	$8, %rsp
10003dc40:	5b	popq	%rbx
10003dc41:	41 5e	popq	%r14
10003dc43:	41 5f	popq	%r15
10003dc45:	5d	popq	%rbp
10003dc46:	c3	retq
10003dc47:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003dc4c:	41 c7 46 04 28 00 00 00	movl	$40, 4(%r14)
10003dc54:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003dc5c:	eb de	jmp	0x10003dc3c
10003dc5e:	55	pushq	%rbp
10003dc5f:	48 89 e5	movq	%rsp, %rbp
10003dc62:	41 57	pushq	%r15
10003dc64:	41 56	pushq	%r14
10003dc66:	41 54	pushq	%r12
10003dc68:	53	pushq	%rbx
10003dc69:	49 89 f7	movq	%rsi, %r15
10003dc6c:	41 be d0 fe ff ff	movl	$4294966992, %r14d
10003dc72:	83 3f 00	cmpl	$0, (%rdi)
10003dc75:	78 3b	js	0x10003dcb2
10003dc77:	48 89 fb	movq	%rdi, %rbx
10003dc7a:	81 7f 04 a4 00 00 00	cmpl	$164, 4(%rdi)
10003dc81:	75 2f	jne	0x10003dcb2
10003dc83:	4c 8d 63 20	leaq	32(%rbx), %r12
10003dc87:	ba 80 00 00 00	movl	$128, %edx
10003dc8c:	4c 89 e7	movq	%r12, %rdi
10003dc8f:	31 f6	xorl	%esi, %esi
10003dc91:	e8 32 3f 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003dc96:	48 85 c0	testq	%rax, %rax
10003dc99:	74 17	je	0x10003dcb2
10003dc9b:	8b 73 08	movl	8(%rbx), %esi
10003dc9e:	8b 7b 0c	movl	12(%rbx), %edi
10003dca1:	8b 8b a0 00 00 00	movl	160(%rbx), %ecx
10003dca7:	4c 89 e2	movq	%r12, %rdx
10003dcaa:	e8 cf db fc ff	callq	0x10000b87e
10003dcaf:	41 89 c6	movl	%eax, %r14d
10003dcb2:	45 89 77 20	movl	%r14d, 32(%r15)
10003dcb6:	48 8b 05 43 a3 01 00	movq	107331(%rip), %rax ## literal pool symbol address: _NDR_record
10003dcbd:	48 8b 00	movq	(%rax), %rax
10003dcc0:	49 89 47 18	movq	%rax, 24(%r15)
10003dcc4:	5b	popq	%rbx
10003dcc5:	41 5c	popq	%r12
10003dcc7:	41 5e	popq	%r14
10003dcc9:	41 5f	popq	%r15
10003dccb:	5d	popq	%rbp
10003dccc:	c3	retq
10003dccd:	55	pushq	%rbp
10003dcce:	48 89 e5	movq	%rsp, %rbp
10003dcd1:	53	pushq	%rbx
10003dcd2:	50	pushq	%rax
10003dcd3:	48 89 f3	movq	%rsi, %rbx
10003dcd6:	83 3f 00	cmpl	$0, (%rdi)
10003dcd9:	78 2c	js	0x10003dd07
10003dcdb:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003dcdf:	75 26	jne	0x10003dd07
10003dce1:	48 8d 53 1c	leaq	28(%rbx), %rdx
10003dce5:	48 b8 00 00 00 00 00 00 14 00	movabsq	$5629499534213120, %rax
10003dcef:	48 89 43 20	movq	%rax, 32(%rbx)
10003dcf3:	8b 77 08	movl	8(%rdi), %esi
10003dcf6:	8b 7f 0c	movl	12(%rdi), %edi
10003dcf9:	e8 8b db fc ff	callq	0x10000b889
10003dcfe:	85 c0	testl	%eax, %eax
10003dd00:	74 21	je	0x10003dd23
10003dd02:	89 43 20	movl	%eax, 32(%rbx)
10003dd05:	eb 07	jmp	0x10003dd0e
10003dd07:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003dd0e:	48 8b 05 eb a2 01 00	movq	107243(%rip), %rax ## literal pool symbol address: _NDR_record
10003dd15:	48 8b 00	movq	(%rax), %rax
10003dd18:	48 89 43 18	movq	%rax, 24(%rbx)
10003dd1c:	48 83 c4 08	addq	$8, %rsp
10003dd20:	5b	popq	%rbx
10003dd21:	5d	popq	%rbp
10003dd22:	c3	retq
10003dd23:	80 4b 03 80	orb	$-128, 3(%rbx)
10003dd27:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003dd2e:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003dd35:	eb e5	jmp	0x10003dd1c
10003dd37:	55	pushq	%rbp
10003dd38:	48 89 e5	movq	%rsp, %rbp
10003dd3b:	53	pushq	%rbx
10003dd3c:	50	pushq	%rax
10003dd3d:	48 89 f3	movq	%rsi, %rbx
10003dd40:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003dd45:	83 3f 00	cmpl	$0, (%rdi)
10003dd48:	79 43	jns	0x10003dd8d
10003dd4a:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003dd4e:	75 3d	jne	0x10003dd8d
10003dd50:	83 7f 04 28	cmpl	$40, 4(%rdi)
10003dd54:	75 37	jne	0x10003dd8d
10003dd56:	0f b7 4f 26	movzwl	38(%rdi), %ecx
10003dd5a:	c1 e1 10	shll	$16, %ecx
10003dd5d:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003dd62:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003dd68:	75 23	jne	0x10003dd8d
10003dd6a:	48 8d 53 1c	leaq	28(%rbx), %rdx
10003dd6e:	48 b8 00 00 00 00 00 00 13 00	movabsq	$5348024557502464, %rax
10003dd78:	48 89 43 20	movq	%rax, 32(%rbx)
10003dd7c:	8b 47 0c	movl	12(%rdi), %eax
10003dd7f:	8b 77 1c	movl	28(%rdi), %esi
10003dd82:	89 c7	movl	%eax, %edi
10003dd84:	e8 0b db fc ff	callq	0x10000b894
10003dd89:	85 c0	testl	%eax, %eax
10003dd8b:	74 18	je	0x10003dda5
10003dd8d:	89 43 20	movl	%eax, 32(%rbx)
10003dd90:	48 8b 05 69 a2 01 00	movq	107113(%rip), %rax ## literal pool symbol address: _NDR_record
10003dd97:	48 8b 00	movq	(%rax), %rax
10003dd9a:	48 89 43 18	movq	%rax, 24(%rbx)
10003dd9e:	48 83 c4 08	addq	$8, %rsp
10003dda2:	5b	popq	%rbx
10003dda3:	5d	popq	%rbp
10003dda4:	c3	retq
10003dda5:	80 4b 03 80	orb	$-128, 3(%rbx)
10003dda9:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003ddb0:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003ddb7:	eb e5	jmp	0x10003dd9e
10003ddb9:	55	pushq	%rbp
10003ddba:	48 89 e5	movq	%rsp, %rbp
10003ddbd:	53	pushq	%rbx
10003ddbe:	50	pushq	%rax
10003ddbf:	48 89 f3	movq	%rsi, %rbx
10003ddc2:	83 3f 00	cmpl	$0, (%rdi)
10003ddc5:	78 49	js	0x10003de10
10003ddc7:	48 89 f8	movq	%rdi, %rax
10003ddca:	83 7f 04 28	cmpl	$40, 4(%rdi)
10003ddce:	75 40	jne	0x10003de10
10003ddd0:	48 8d 73 1c	leaq	28(%rbx), %rsi
10003ddd4:	ba 01 01 00 01	movl	$16777473, %edx
10003ddd9:	89 53 24	movl	%edx, 36(%rbx)
10003dddc:	48 8d 4b 2c	leaq	44(%rbx), %rcx
10003dde0:	89 53 34	movl	%edx, 52(%rbx)
10003dde3:	4c 8d 4b 3c	leaq	60(%rbx), %r9
10003dde7:	89 53 44	movl	%edx, 68(%rbx)
10003ddea:	8b 78 0c	movl	12(%rax), %edi
10003dded:	48 8d 53 54	leaq	84(%rbx), %rdx
10003ddf1:	4c 8d 43 58	leaq	88(%rbx), %r8
10003ddf5:	4c 8d 53 5c	leaq	92(%rbx), %r10
10003ddf9:	ff 70 20	pushq	32(%rax)
10003ddfc:	41 52	pushq	%r10
10003ddfe:	e8 9c da fc ff	callq	0x10000b89f
10003de03:	48 83 c4 10	addq	$16, %rsp
10003de07:	85 c0	testl	%eax, %eax
10003de09:	74 21	je	0x10003de2c
10003de0b:	89 43 20	movl	%eax, 32(%rbx)
10003de0e:	eb 07	jmp	0x10003de17
10003de10:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003de17:	48 8b 05 e2 a1 01 00	movq	106978(%rip), %rax ## literal pool symbol address: _NDR_record
10003de1e:	48 8b 00	movq	(%rax), %rax
10003de21:	48 89 43 18	movq	%rax, 24(%rbx)
10003de25:	48 83 c4 08	addq	$8, %rsp
10003de29:	5b	popq	%rbx
10003de2a:	5d	popq	%rbp
10003de2b:	c3	retq
10003de2c:	8b 43 54	movl	84(%rbx), %eax
10003de2f:	8b 4b 58	movl	88(%rbx), %ecx
10003de32:	c1 e0 07	shll	$7, %eax
10003de35:	89 43 28	movl	%eax, 40(%rbx)
10003de38:	c1 e1 07	shll	$7, %ecx
10003de3b:	89 4b 38	movl	%ecx, 56(%rbx)
10003de3e:	8b 43 5c	movl	92(%rbx), %eax
10003de41:	c1 e0 02	shll	$2, %eax
10003de44:	89 43 48	movl	%eax, 72(%rbx)
10003de47:	48 8b 05 b2 a1 01 00	movq	106930(%rip), %rax ## literal pool symbol address: _NDR_record
10003de4e:	48 8b 00	movq	(%rax), %rax
10003de51:	48 89 43 4c	movq	%rax, 76(%rbx)
10003de55:	80 4b 03 80	orb	$-128, 3(%rbx)
10003de59:	c7 43 04 60 00 00 00	movl	$96, 4(%rbx)
10003de60:	c7 43 18 03 00 00 00	movl	$3, 24(%rbx)
10003de67:	eb bc	jmp	0x10003de25
10003de69:	55	pushq	%rbp
10003de6a:	48 89 e5	movq	%rsp, %rbp
10003de6d:	53	pushq	%rbx
10003de6e:	50	pushq	%rax
10003de6f:	48 89 f3	movq	%rsi, %rbx
10003de72:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003de77:	83 3f 00	cmpl	$0, (%rdi)
10003de7a:	79 43	jns	0x10003debf
10003de7c:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003de80:	75 3d	jne	0x10003debf
10003de82:	83 7f 04 28	cmpl	$40, 4(%rdi)
10003de86:	75 37	jne	0x10003debf
10003de88:	0f b7 4f 26	movzwl	38(%rdi), %ecx
10003de8c:	c1 e1 10	shll	$16, %ecx
10003de8f:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003de94:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003de9a:	75 23	jne	0x10003debf
10003de9c:	48 8d 53 1c	leaq	28(%rbx), %rdx
10003dea0:	48 b8 00 00 00 00 00 00 14 00	movabsq	$5629499534213120, %rax
10003deaa:	48 89 43 20	movq	%rax, 32(%rbx)
10003deae:	8b 47 0c	movl	12(%rdi), %eax
10003deb1:	8b 77 1c	movl	28(%rdi), %esi
10003deb4:	89 c7	movl	%eax, %edi
10003deb6:	e8 ef d9 fc ff	callq	0x10000b8aa
10003debb:	85 c0	testl	%eax, %eax
10003debd:	74 18	je	0x10003ded7
10003debf:	89 43 20	movl	%eax, 32(%rbx)
10003dec2:	48 8b 05 37 a1 01 00	movq	106807(%rip), %rax ## literal pool symbol address: _NDR_record
10003dec9:	48 8b 00	movq	(%rax), %rax
10003decc:	48 89 43 18	movq	%rax, 24(%rbx)
10003ded0:	48 83 c4 08	addq	$8, %rsp
10003ded4:	5b	popq	%rbx
10003ded5:	5d	popq	%rbp
10003ded6:	c3	retq
10003ded7:	80 4b 03 80	orb	$-128, 3(%rbx)
10003dedb:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003dee2:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003dee9:	eb e5	jmp	0x10003ded0
10003deeb:	55	pushq	%rbp
10003deec:	48 89 e5	movq	%rsp, %rbp
10003deef:	53	pushq	%rbx
10003def0:	50	pushq	%rax
10003def1:	48 89 f3	movq	%rsi, %rbx
10003def4:	83 3f 00	cmpl	$0, (%rdi)
10003def7:	78 6c	js	0x10003df65
10003def9:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003defd:	75 66	jne	0x10003df65
10003deff:	48 8d 73 1c	leaq	28(%rbx), %rsi
10003df03:	48 b8 00 00 00 00 00 00 11 00	movabsq	$4785074604081152, %rax
10003df0d:	48 89 43 20	movq	%rax, 32(%rbx)
10003df11:	48 8d 53 28	leaq	40(%rbx), %rdx
10003df15:	48 b8 00 00 00 00 00 00 10 00	movabsq	$4503599627370496, %rax
10003df1f:	48 89 43 2c	movq	%rax, 44(%rbx)
10003df23:	48 8d 4b 34	leaq	52(%rbx), %rcx
10003df27:	c7 43 3c 01 01 00 01	movl	$16777473, 60(%rbx)
10003df2e:	4c 8d 4b 44	leaq	68(%rbx), %r9
10003df32:	0f b6 43 4d	movzbl	77(%rbx), %eax
10003df36:	c1 e0 08	shll	$8, %eax
10003df39:	0d 01 00 11 02	orl	$34668545, %eax
10003df3e:	89 43 4c	movl	%eax, 76(%rbx)
10003df41:	48 8d 43 60	leaq	96(%rbx), %rax
10003df45:	c7 43 60 00 00 00 00	movl	$0, 96(%rbx)
10003df4c:	8b 7f 0c	movl	12(%rdi), %edi
10003df4f:	4c 8d 43 5c	leaq	92(%rbx), %r8
10003df53:	48 89 04 24	movq	%rax, (%rsp)
10003df57:	e8 59 d9 fc ff	callq	0x10000b8b5
10003df5c:	85 c0	testl	%eax, %eax
10003df5e:	74 21	je	0x10003df81
10003df60:	89 43 20	movl	%eax, 32(%rbx)
10003df63:	eb 07	jmp	0x10003df6c
10003df65:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003df6c:	48 8b 05 8d a0 01 00	movq	106637(%rip), %rax ## literal pool symbol address: _NDR_record
10003df73:	48 8b 00	movq	(%rax), %rax
10003df76:	48 89 43 18	movq	%rax, 24(%rbx)
10003df7a:	48 83 c4 08	addq	$8, %rsp
10003df7e:	5b	popq	%rbx
10003df7f:	5d	popq	%rbp
10003df80:	c3	retq
10003df81:	8b 43 5c	movl	92(%rbx), %eax
10003df84:	8b 4b 60	movl	96(%rbx), %ecx
10003df87:	89 43 40	movl	%eax, 64(%rbx)
10003df8a:	89 4b 50	movl	%ecx, 80(%rbx)
10003df8d:	48 8b 05 6c a0 01 00	movq	106604(%rip), %rax ## literal pool symbol address: _NDR_record
10003df94:	48 8b 00	movq	(%rax), %rax
10003df97:	48 89 43 54	movq	%rax, 84(%rbx)
10003df9b:	80 4b 03 80	orb	$-128, 3(%rbx)
10003df9f:	c7 43 04 64 00 00 00	movl	$100, 4(%rbx)
10003dfa6:	c7 43 18 04 00 00 00	movl	$4, 24(%rbx)
10003dfad:	eb cb	jmp	0x10003df7a
10003dfaf:	55	pushq	%rbp
10003dfb0:	48 89 e5	movq	%rsp, %rbp
10003dfb3:	53	pushq	%rbx
10003dfb4:	50	pushq	%rax
10003dfb5:	48 89 f3	movq	%rsi, %rbx
10003dfb8:	83 3f 00	cmpl	$0, (%rdi)
10003dfbb:	78 30	js	0x10003dfed
10003dfbd:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003dfc1:	75 2a	jne	0x10003dfed
10003dfc3:	8b 7f 0c	movl	12(%rdi), %edi
10003dfc6:	48 8d 73 24	leaq	36(%rbx), %rsi
10003dfca:	e8 f1 d8 fc ff	callq	0x10000b8c0
10003dfcf:	89 43 20	movl	%eax, 32(%rbx)
10003dfd2:	48 8b 0d 27 a0 01 00	movq	106535(%rip), %rcx ## literal pool symbol address: _NDR_record
10003dfd9:	48 8b 09	movq	(%rcx), %rcx
10003dfdc:	48 89 4b 18	movq	%rcx, 24(%rbx)
10003dfe0:	85 c0	testl	%eax, %eax
10003dfe2:	75 1e	jne	0x10003e002
10003dfe4:	c7 43 04 a4 00 00 00	movl	$164, 4(%rbx)
10003dfeb:	eb 15	jmp	0x10003e002
10003dfed:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003dff4:	48 8b 05 05 a0 01 00	movq	106501(%rip), %rax ## literal pool symbol address: _NDR_record
10003dffb:	48 8b 00	movq	(%rax), %rax
10003dffe:	48 89 43 18	movq	%rax, 24(%rbx)
10003e002:	48 83 c4 08	addq	$8, %rsp
10003e006:	5b	popq	%rbx
10003e007:	5d	popq	%rbp
10003e008:	c3	retq
10003e009:	55	pushq	%rbp
10003e00a:	48 89 e5	movq	%rsp, %rbp
10003e00d:	53	pushq	%rbx
10003e00e:	50	pushq	%rax
10003e00f:	48 89 f3	movq	%rsi, %rbx
10003e012:	83 3f 00	cmpl	$0, (%rdi)
10003e015:	78 3c	js	0x10003e053
10003e017:	83 7f 04 30	cmpl	$48, 4(%rdi)
10003e01b:	75 36	jne	0x10003e053
10003e01d:	8b 47 0c	movl	12(%rdi), %eax
10003e020:	8b 77 20	movl	32(%rdi), %esi
10003e023:	8b 57 24	movl	36(%rdi), %edx
10003e026:	48 8b 4f 28	movq	40(%rdi), %rcx
10003e02a:	4c 8d 43 24	leaq	36(%rbx), %r8
10003e02e:	89 c7	movl	%eax, %edi
10003e030:	e8 96 d8 fc ff	callq	0x10000b8cb
10003e035:	89 43 20	movl	%eax, 32(%rbx)
10003e038:	48 8b 0d c1 9f 01 00	movq	106433(%rip), %rcx ## literal pool symbol address: _NDR_record
10003e03f:	48 8b 09	movq	(%rcx), %rcx
10003e042:	48 89 4b 18	movq	%rcx, 24(%rbx)
10003e046:	85 c0	testl	%eax, %eax
10003e048:	75 1e	jne	0x10003e068
10003e04a:	c7 43 04 2c 00 00 00	movl	$44, 4(%rbx)
10003e051:	eb 15	jmp	0x10003e068
10003e053:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e05a:	48 8b 05 9f 9f 01 00	movq	106399(%rip), %rax ## literal pool symbol address: _NDR_record
10003e061:	48 8b 00	movq	(%rax), %rax
10003e064:	48 89 43 18	movq	%rax, 24(%rbx)
10003e068:	48 83 c4 08	addq	$8, %rsp
10003e06c:	5b	popq	%rbx
10003e06d:	5d	popq	%rbp
10003e06e:	c3	retq
10003e06f:	55	pushq	%rbp
10003e070:	48 89 e5	movq	%rsp, %rbp
10003e073:	41 57	pushq	%r15
10003e075:	41 56	pushq	%r14
10003e077:	41 54	pushq	%r12
10003e079:	53	pushq	%rbx
10003e07a:	49 89 f7	movq	%rsi, %r15
10003e07d:	83 3f 00	cmpl	$0, (%rdi)
10003e080:	41 be d0 fe ff ff	movl	$4294966992, %r14d
10003e086:	78 65	js	0x10003e0ed
10003e088:	48 89 fb	movq	%rdi, %rbx
10003e08b:	8b 47 04	movl	4(%rdi), %eax
10003e08e:	83 f8 30	cmpl	$48, %eax
10003e091:	72 5a	jb	0x10003e0ed
10003e093:	3d 30 08 00 00	cmpl	$2096, %eax
10003e098:	77 53	ja	0x10003e0ed
10003e09a:	8b 4b 2c	movl	44(%rbx), %ecx
10003e09d:	81 f9 00 08 00 00	cmpl	$2048, %ecx
10003e0a3:	77 48	ja	0x10003e0ed
10003e0a5:	8d 50 d0	leal	-48(%rax), %edx
10003e0a8:	39 ca	cmpl	%ecx, %edx
10003e0aa:	72 41	jb	0x10003e0ed
10003e0ac:	83 c1 33	addl	$51, %ecx
10003e0af:	83 e1 fc	andl	$-4, %ecx
10003e0b2:	39 c8	cmpl	%ecx, %eax
10003e0b4:	75 37	jne	0x10003e0ed
10003e0b6:	4c 8d 63 30	leaq	48(%rbx), %r12
10003e0ba:	ba 30 08 00 00	movl	$2096, %edx
10003e0bf:	48 39 d0	cmpq	%rdx, %rax
10003e0c2:	48 0f 42 d0	cmovbq	%rax, %rdx
10003e0c6:	48 83 c2 d0	addq	$-48, %rdx
10003e0ca:	4c 89 e7	movq	%r12, %rdi
10003e0cd:	31 f6	xorl	%esi, %esi
10003e0cf:	e8 f4 3a 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e0d4:	48 85 c0	testq	%rax, %rax
10003e0d7:	74 14	je	0x10003e0ed
10003e0d9:	8b 7b 0c	movl	12(%rbx), %edi
10003e0dc:	8b 73 20	movl	32(%rbx), %esi
10003e0df:	8b 53 24	movl	36(%rbx), %edx
10003e0e2:	4c 89 e1	movq	%r12, %rcx
10003e0e5:	e8 eb d7 fc ff	callq	0x10000b8d5
10003e0ea:	41 89 c6	movl	%eax, %r14d
10003e0ed:	45 89 77 20	movl	%r14d, 32(%r15)
10003e0f1:	48 8b 05 08 9f 01 00	movq	106248(%rip), %rax ## literal pool symbol address: _NDR_record
10003e0f8:	48 8b 00	movq	(%rax), %rax
10003e0fb:	49 89 47 18	movq	%rax, 24(%r15)
10003e0ff:	5b	popq	%rbx
10003e100:	41 5c	popq	%r12
10003e102:	41 5e	popq	%r14
10003e104:	41 5f	popq	%r15
10003e106:	5d	popq	%rbp
10003e107:	c3	retq
10003e108:	55	pushq	%rbp
10003e109:	48 89 e5	movq	%rsp, %rbp
10003e10c:	53	pushq	%rbx
10003e10d:	50	pushq	%rax
10003e10e:	48 89 f3	movq	%rsi, %rbx
10003e111:	83 3f 00	cmpl	$0, (%rdi)
10003e114:	78 2e	js	0x10003e144
10003e116:	83 7f 04 24	cmpl	$36, 4(%rdi)
10003e11a:	75 28	jne	0x10003e144
10003e11c:	48 8d 53 1c	leaq	28(%rbx), %rdx
10003e120:	48 b8 00 00 00 00 00 00 13 00	movabsq	$5348024557502464, %rax
10003e12a:	48 89 43 20	movq	%rax, 32(%rbx)
10003e12e:	8b 47 0c	movl	12(%rdi), %eax
10003e131:	8b 77 20	movl	32(%rdi), %esi
10003e134:	89 c7	movl	%eax, %edi
10003e136:	e8 a5 d7 fc ff	callq	0x10000b8e0
10003e13b:	85 c0	testl	%eax, %eax
10003e13d:	74 21	je	0x10003e160
10003e13f:	89 43 20	movl	%eax, 32(%rbx)
10003e142:	eb 07	jmp	0x10003e14b
10003e144:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e14b:	48 8b 05 ae 9e 01 00	movq	106158(%rip), %rax ## literal pool symbol address: _NDR_record
10003e152:	48 8b 00	movq	(%rax), %rax
10003e155:	48 89 43 18	movq	%rax, 24(%rbx)
10003e159:	48 83 c4 08	addq	$8, %rsp
10003e15d:	5b	popq	%rbx
10003e15e:	5d	popq	%rbp
10003e15f:	c3	retq
10003e160:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e164:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003e16b:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003e172:	eb e5	jmp	0x10003e159
10003e174:	55	pushq	%rbp
10003e175:	48 89 e5	movq	%rsp, %rbp
10003e178:	41 57	pushq	%r15
10003e17a:	41 56	pushq	%r14
10003e17c:	53	pushq	%rbx
10003e17d:	50	pushq	%rax
10003e17e:	49 89 f6	movq	%rsi, %r14
10003e181:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e186:	83 3f 00	cmpl	$0, (%rdi)
10003e189:	79 6d	jns	0x10003e1f8
10003e18b:	48 89 fb	movq	%rdi, %rbx
10003e18e:	83 7f 18 02	cmpl	$2, 24(%rdi)
10003e192:	75 64	jne	0x10003e1f8
10003e194:	81 7b 04 c4 00 00 00	cmpl	$196, 4(%rbx)
10003e19b:	75 5b	jne	0x10003e1f8
10003e19d:	0f b7 4b 26	movzwl	38(%rbx), %ecx
10003e1a1:	c1 e1 10	shll	$16, %ecx
10003e1a4:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e1a9:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e1af:	75 47	jne	0x10003e1f8
10003e1b1:	0f b7 4b 32	movzwl	50(%rbx), %ecx
10003e1b5:	c1 e1 10	shll	$16, %ecx
10003e1b8:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e1be:	75 38	jne	0x10003e1f8
10003e1c0:	4c 8d 7b 3c	leaq	60(%rbx), %r15
10003e1c4:	ba 80 00 00 00	movl	$128, %edx
10003e1c9:	4c 89 ff	movq	%r15, %rdi
10003e1cc:	31 f6	xorl	%esi, %esi
10003e1ce:	e8 f5 39 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e1d3:	48 89 c1	movq	%rax, %rcx
10003e1d6:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e1db:	48 85 c9	testq	%rcx, %rcx
10003e1de:	74 18	je	0x10003e1f8
10003e1e0:	8b 7b 0c	movl	12(%rbx), %edi
10003e1e3:	8b 73 1c	movl	28(%rbx), %esi
10003e1e6:	8b 4b 28	movl	40(%rbx), %ecx
10003e1e9:	4c 8b 83 bc 00 00 00	movq	188(%rbx), %r8
10003e1f0:	4c 89 fa	movq	%r15, %rdx
10003e1f3:	e8 f3 d6 fc ff	callq	0x10000b8eb
10003e1f8:	41 89 46 20	movl	%eax, 32(%r14)
10003e1fc:	48 8b 05 fd 9d 01 00	movq	105981(%rip), %rax ## literal pool symbol address: _NDR_record
10003e203:	48 8b 00	movq	(%rax), %rax
10003e206:	49 89 46 18	movq	%rax, 24(%r14)
10003e20a:	48 83 c4 08	addq	$8, %rsp
10003e20e:	5b	popq	%rbx
10003e20f:	41 5e	popq	%r14
10003e211:	41 5f	popq	%r15
10003e213:	5d	popq	%rbp
10003e214:	c3	retq
10003e215:	55	pushq	%rbp
10003e216:	48 89 e5	movq	%rsp, %rbp
10003e219:	53	pushq	%rbx
10003e21a:	50	pushq	%rax
10003e21b:	48 89 f3	movq	%rsi, %rbx
10003e21e:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e223:	83 3f 00	cmpl	$0, (%rdi)
10003e226:	79 57	jns	0x10003e27f
10003e228:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003e22c:	75 51	jne	0x10003e27f
10003e22e:	83 7f 04 40	cmpl	$64, 4(%rdi)
10003e232:	75 4b	jne	0x10003e27f
10003e234:	0f b6 4f 27	movzbl	39(%rdi), %ecx
10003e238:	c1 e1 18	shll	$24, %ecx
10003e23b:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e240:	81 f9 00 00 00 01	cmpl	$16777216, %ecx
10003e246:	75 37	jne	0x10003e27f
10003e248:	8b 4f 28	movl	40(%rdi), %ecx
10003e24b:	3b 4f 3c	cmpl	60(%rdi), %ecx
10003e24e:	75 2f	jne	0x10003e27f
10003e250:	4c 8d 4b 1c	leaq	28(%rbx), %r9
10003e254:	c7 43 24 01 01 00 01	movl	$16777473, 36(%rbx)
10003e25b:	8b 47 0c	movl	12(%rdi), %eax
10003e25e:	8b 77 34	movl	52(%rdi), %esi
10003e261:	8b 57 38	movl	56(%rdi), %edx
10003e264:	48 8b 4f 1c	movq	28(%rdi), %rcx
10003e268:	44 8b 47 28	movl	40(%rdi), %r8d
10003e26c:	48 8d 7b 34	leaq	52(%rbx), %rdi
10003e270:	48 89 3c 24	movq	%rdi, (%rsp)
10003e274:	89 c7	movl	%eax, %edi
10003e276:	e8 7b d6 fc ff	callq	0x10000b8f6
10003e27b:	85 c0	testl	%eax, %eax
10003e27d:	74 18	je	0x10003e297
10003e27f:	89 43 20	movl	%eax, 32(%rbx)
10003e282:	48 8b 05 77 9d 01 00	movq	105847(%rip), %rax ## literal pool symbol address: _NDR_record
10003e289:	48 8b 00	movq	(%rax), %rax
10003e28c:	48 89 43 18	movq	%rax, 24(%rbx)
10003e290:	48 83 c4 08	addq	$8, %rsp
10003e294:	5b	popq	%rbx
10003e295:	5d	popq	%rbp
10003e296:	c3	retq
10003e297:	8b 43 34	movl	52(%rbx), %eax
10003e29a:	89 43 28	movl	%eax, 40(%rbx)
10003e29d:	48 8b 05 5c 9d 01 00	movq	105820(%rip), %rax ## literal pool symbol address: _NDR_record
10003e2a4:	48 8b 00	movq	(%rax), %rax
10003e2a7:	48 89 43 2c	movq	%rax, 44(%rbx)
10003e2ab:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e2af:	c7 43 04 38 00 00 00	movl	$56, 4(%rbx)
10003e2b6:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003e2bd:	eb d1	jmp	0x10003e290
10003e2bf:	55	pushq	%rbp
10003e2c0:	48 89 e5	movq	%rsp, %rbp
10003e2c3:	53	pushq	%rbx
10003e2c4:	50	pushq	%rax
10003e2c5:	48 89 f3	movq	%rsi, %rbx
10003e2c8:	83 3f 00	cmpl	$0, (%rdi)
10003e2cb:	78 29	js	0x10003e2f6
10003e2cd:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003e2d1:	75 23	jne	0x10003e2f6
10003e2d3:	48 8d 53 1c	leaq	28(%rbx), %rdx
10003e2d7:	c7 43 24 01 01 00 01	movl	$16777473, 36(%rbx)
10003e2de:	8b 77 08	movl	8(%rdi), %esi
10003e2e1:	8b 7f 0c	movl	12(%rdi), %edi
10003e2e4:	48 8d 4b 34	leaq	52(%rbx), %rcx
10003e2e8:	e8 14 d6 fc ff	callq	0x10000b901
10003e2ed:	85 c0	testl	%eax, %eax
10003e2ef:	74 21	je	0x10003e312
10003e2f1:	89 43 20	movl	%eax, 32(%rbx)
10003e2f4:	eb 07	jmp	0x10003e2fd
10003e2f6:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e2fd:	48 8b 05 fc 9c 01 00	movq	105724(%rip), %rax ## literal pool symbol address: _NDR_record
10003e304:	48 8b 00	movq	(%rax), %rax
10003e307:	48 89 43 18	movq	%rax, 24(%rbx)
10003e30b:	48 83 c4 08	addq	$8, %rsp
10003e30f:	5b	popq	%rbx
10003e310:	5d	popq	%rbp
10003e311:	c3	retq
10003e312:	8b 43 34	movl	52(%rbx), %eax
10003e315:	89 43 28	movl	%eax, 40(%rbx)
10003e318:	48 8b 05 e1 9c 01 00	movq	105697(%rip), %rax ## literal pool symbol address: _NDR_record
10003e31f:	48 8b 00	movq	(%rax), %rax
10003e322:	48 89 43 2c	movq	%rax, 44(%rbx)
10003e326:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e32a:	c7 43 04 38 00 00 00	movl	$56, 4(%rbx)
10003e331:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003e338:	eb d1	jmp	0x10003e30b
10003e33a:	55	pushq	%rbp
10003e33b:	48 89 e5	movq	%rsp, %rbp
10003e33e:	53	pushq	%rbx
10003e33f:	50	pushq	%rax
10003e340:	48 89 f3	movq	%rsi, %rbx
10003e343:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e348:	83 3f 00	cmpl	$0, (%rdi)
10003e34b:	79 36	jns	0x10003e383
10003e34d:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003e351:	75 30	jne	0x10003e383
10003e353:	83 7f 04 38	cmpl	$56, 4(%rdi)
10003e357:	75 2a	jne	0x10003e383
10003e359:	0f b6 4f 27	movzbl	39(%rdi), %ecx
10003e35d:	c1 e1 18	shll	$24, %ecx
10003e360:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e365:	81 f9 00 00 00 01	cmpl	$16777216, %ecx
10003e36b:	75 16	jne	0x10003e383
10003e36d:	8b 57 28	movl	40(%rdi), %edx
10003e370:	3b 57 34	cmpl	52(%rdi), %edx
10003e373:	75 0e	jne	0x10003e383
10003e375:	8b 47 0c	movl	12(%rdi), %eax
10003e378:	48 8b 77 1c	movq	28(%rdi), %rsi
10003e37c:	89 c7	movl	%eax, %edi
10003e37e:	e8 89 d5 fc ff	callq	0x10000b90c
10003e383:	89 43 20	movl	%eax, 32(%rbx)
10003e386:	48 8b 05 73 9c 01 00	movq	105587(%rip), %rax ## literal pool symbol address: _NDR_record
10003e38d:	48 8b 00	movq	(%rax), %rax
10003e390:	48 89 43 18	movq	%rax, 24(%rbx)
10003e394:	48 83 c4 08	addq	$8, %rsp
10003e398:	5b	popq	%rbx
10003e399:	5d	popq	%rbp
10003e39a:	c3	retq
10003e39b:	55	pushq	%rbp
10003e39c:	48 89 e5	movq	%rsp, %rbp
10003e39f:	41 57	pushq	%r15
10003e3a1:	41 56	pushq	%r14
10003e3a3:	53	pushq	%rbx
10003e3a4:	50	pushq	%rax
10003e3a5:	49 89 f6	movq	%rsi, %r14
10003e3a8:	83 3f 00	cmpl	$0, (%rdi)
10003e3ab:	78 59	js	0x10003e406
10003e3ad:	48 89 fb	movq	%rdi, %rbx
10003e3b0:	81 7f 04 a4 00 00 00	cmpl	$164, 4(%rdi)
10003e3b7:	75 4d	jne	0x10003e406
10003e3b9:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003e3bd:	ba 80 00 00 00	movl	$128, %edx
10003e3c2:	4c 89 ff	movq	%r15, %rdi
10003e3c5:	31 f6	xorl	%esi, %esi
10003e3c7:	e8 fc 37 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e3cc:	48 85 c0	testq	%rax, %rax
10003e3cf:	74 35	je	0x10003e406
10003e3d1:	49 8d 56 24	leaq	36(%r14), %rdx
10003e3d5:	8b 7b 0c	movl	12(%rbx), %edi
10003e3d8:	8b 8b a0 00 00 00	movl	160(%rbx), %ecx
10003e3de:	4c 89 fe	movq	%r15, %rsi
10003e3e1:	e8 31 d5 fc ff	callq	0x10000b917
10003e3e6:	41 89 46 20	movl	%eax, 32(%r14)
10003e3ea:	48 8b 0d 0f 9c 01 00	movq	105487(%rip), %rcx ## literal pool symbol address: _NDR_record
10003e3f1:	48 8b 09	movq	(%rcx), %rcx
10003e3f4:	49 89 4e 18	movq	%rcx, 24(%r14)
10003e3f8:	85 c0	testl	%eax, %eax
10003e3fa:	75 20	jne	0x10003e41c
10003e3fc:	41 c7 46 04 28 00 00 00	movl	$40, 4(%r14)
10003e404:	eb 16	jmp	0x10003e41c
10003e406:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003e40e:	48 8b 05 eb 9b 01 00	movq	105451(%rip), %rax ## literal pool symbol address: _NDR_record
10003e415:	48 8b 00	movq	(%rax), %rax
10003e418:	49 89 46 18	movq	%rax, 24(%r14)
10003e41c:	48 83 c4 08	addq	$8, %rsp
10003e420:	5b	popq	%rbx
10003e421:	41 5e	popq	%r14
10003e423:	41 5f	popq	%r15
10003e425:	5d	popq	%rbp
10003e426:	c3	retq
10003e427:	55	pushq	%rbp
10003e428:	48 89 e5	movq	%rsp, %rbp
10003e42b:	53	pushq	%rbx
10003e42c:	50	pushq	%rax
10003e42d:	48 89 f3	movq	%rsi, %rbx
10003e430:	83 3f 00	cmpl	$0, (%rdi)
10003e433:	78 54	js	0x10003e489
10003e435:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003e439:	75 4e	jne	0x10003e489
10003e43b:	48 8d 73 1c	leaq	28(%rbx), %rsi
10003e43f:	0f b6 43 25	movzbl	37(%rbx), %eax
10003e443:	c1 e0 08	shll	$8, %eax
10003e446:	0d 01 00 11 02	orl	$34668545, %eax
10003e44b:	89 43 24	movl	%eax, 36(%rbx)
10003e44e:	48 8d 4b 2c	leaq	44(%rbx), %rcx
10003e452:	b8 01 01 00 01	movl	$16777473, %eax
10003e457:	89 43 34	movl	%eax, 52(%rbx)
10003e45a:	4c 8d 4b 3c	leaq	60(%rbx), %r9
10003e45e:	89 43 44	movl	%eax, 68(%rbx)
10003e461:	48 8d 53 54	leaq	84(%rbx), %rdx
10003e465:	c7 43 54 00 00 00 00	movl	$0, 84(%rbx)
10003e46c:	8b 7f 0c	movl	12(%rdi), %edi
10003e46f:	4c 8d 43 58	leaq	88(%rbx), %r8
10003e473:	48 8d 43 5c	leaq	92(%rbx), %rax
10003e477:	48 89 04 24	movq	%rax, (%rsp)
10003e47b:	e8 a2 d4 fc ff	callq	0x10000b922
10003e480:	85 c0	testl	%eax, %eax
10003e482:	74 21	je	0x10003e4a5
10003e484:	89 43 20	movl	%eax, 32(%rbx)
10003e487:	eb 07	jmp	0x10003e490
10003e489:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e490:	48 8b 05 69 9b 01 00	movq	105321(%rip), %rax ## literal pool symbol address: _NDR_record
10003e497:	48 8b 00	movq	(%rax), %rax
10003e49a:	48 89 43 18	movq	%rax, 24(%rbx)
10003e49e:	48 83 c4 08	addq	$8, %rsp
10003e4a2:	5b	popq	%rbx
10003e4a3:	5d	popq	%rbp
10003e4a4:	c3	retq
10003e4a5:	8b 43 54	movl	84(%rbx), %eax
10003e4a8:	8b 4b 58	movl	88(%rbx), %ecx
10003e4ab:	89 43 28	movl	%eax, 40(%rbx)
10003e4ae:	c1 e1 07	shll	$7, %ecx
10003e4b1:	89 4b 38	movl	%ecx, 56(%rbx)
10003e4b4:	8b 43 5c	movl	92(%rbx), %eax
10003e4b7:	c1 e0 02	shll	$2, %eax
10003e4ba:	89 43 48	movl	%eax, 72(%rbx)
10003e4bd:	48 8b 05 3c 9b 01 00	movq	105276(%rip), %rax ## literal pool symbol address: _NDR_record
10003e4c4:	48 8b 00	movq	(%rax), %rax
10003e4c7:	48 89 43 4c	movq	%rax, 76(%rbx)
10003e4cb:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e4cf:	c7 43 04 60 00 00 00	movl	$96, 4(%rbx)
10003e4d6:	c7 43 18 03 00 00 00	movl	$3, 24(%rbx)
10003e4dd:	eb bf	jmp	0x10003e49e
10003e4df:	55	pushq	%rbp
10003e4e0:	48 89 e5	movq	%rsp, %rbp
10003e4e3:	41 57	pushq	%r15
10003e4e5:	41 56	pushq	%r14
10003e4e7:	53	pushq	%rbx
10003e4e8:	50	pushq	%rax
10003e4e9:	49 89 f6	movq	%rsi, %r14
10003e4ec:	b9 d0 fe ff ff	movl	$4294966992, %ecx
10003e4f1:	83 3f 00	cmpl	$0, (%rdi)
10003e4f4:	79 7d	jns	0x10003e573
10003e4f6:	48 89 fb	movq	%rdi, %rbx
10003e4f9:	83 7f 18 02	cmpl	$2, 24(%rdi)
10003e4fd:	75 74	jne	0x10003e573
10003e4ff:	81 7b 04 bc 00 00 00	cmpl	$188, 4(%rbx)
10003e506:	75 6b	jne	0x10003e573
10003e508:	0f b7 43 26	movzwl	38(%rbx), %eax
10003e50c:	c1 e0 10	shll	$16, %eax
10003e50f:	b9 d4 fe ff ff	movl	$4294966996, %ecx
10003e514:	3d 00 00 11 00	cmpl	$1114112, %eax
10003e519:	75 58	jne	0x10003e573
10003e51b:	0f b7 43 32	movzwl	50(%rbx), %eax
10003e51f:	c1 e0 10	shll	$16, %eax
10003e522:	3d 00 00 11 00	cmpl	$1114112, %eax
10003e527:	75 4a	jne	0x10003e573
10003e529:	4c 8d 7b 3c	leaq	60(%rbx), %r15
10003e52d:	ba 80 00 00 00	movl	$128, %edx
10003e532:	4c 89 ff	movq	%r15, %rdi
10003e535:	31 f6	xorl	%esi, %esi
10003e537:	e8 8c 36 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e53c:	b9 d0 fe ff ff	movl	$4294966992, %ecx
10003e541:	48 85 c0	testq	%rax, %rax
10003e544:	74 2d	je	0x10003e573
10003e546:	4d 8d 46 1c	leaq	28(%r14), %r8
10003e54a:	48 b8 00 00 00 00 00 00 14 00	movabsq	$5629499534213120, %rax
10003e554:	49 89 46 20	movq	%rax, 32(%r14)
10003e558:	8b 7b 0c	movl	12(%rbx), %edi
10003e55b:	8b 73 1c	movl	28(%rbx), %esi
10003e55e:	8b 4b 28	movl	40(%rbx), %ecx
10003e561:	4c 89 fa	movq	%r15, %rdx
10003e564:	e8 c4 d3 fc ff	callq	0x10000b92d
10003e569:	85 c0	testl	%eax, %eax
10003e56b:	74 23	je	0x10003e590
10003e56d:	41 89 46 20	movl	%eax, 32(%r14)
10003e571:	eb 04	jmp	0x10003e577
10003e573:	41 89 4e 20	movl	%ecx, 32(%r14)
10003e577:	48 8b 05 82 9a 01 00	movq	105090(%rip), %rax ## literal pool symbol address: _NDR_record
10003e57e:	48 8b 00	movq	(%rax), %rax
10003e581:	49 89 46 18	movq	%rax, 24(%r14)
10003e585:	48 83 c4 08	addq	$8, %rsp
10003e589:	5b	popq	%rbx
10003e58a:	41 5e	popq	%r14
10003e58c:	41 5f	popq	%r15
10003e58e:	5d	popq	%rbp
10003e58f:	c3	retq
10003e590:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003e595:	41 c7 46 04 28 00 00 00	movl	$40, 4(%r14)
10003e59d:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003e5a5:	eb de	jmp	0x10003e585
10003e5a7:	55	pushq	%rbp
10003e5a8:	48 89 e5	movq	%rsp, %rbp
10003e5ab:	53	pushq	%rbx
10003e5ac:	50	pushq	%rax
10003e5ad:	48 89 f3	movq	%rsi, %rbx
10003e5b0:	83 3f 00	cmpl	$0, (%rdi)
10003e5b3:	78 35	js	0x10003e5ea
10003e5b5:	83 7f 04 24	cmpl	$36, 4(%rdi)
10003e5b9:	75 2f	jne	0x10003e5ea
10003e5bb:	8b 47 0c	movl	12(%rdi), %eax
10003e5be:	8b 77 20	movl	32(%rdi), %esi
10003e5c1:	48 8d 53 24	leaq	36(%rbx), %rdx
10003e5c5:	89 c7	movl	%eax, %edi
10003e5c7:	e8 6c d3 fc ff	callq	0x10000b938
10003e5cc:	89 43 20	movl	%eax, 32(%rbx)
10003e5cf:	48 8b 0d 2a 9a 01 00	movq	105002(%rip), %rcx ## literal pool symbol address: _NDR_record
10003e5d6:	48 8b 09	movq	(%rcx), %rcx
10003e5d9:	48 89 4b 18	movq	%rcx, 24(%rbx)
10003e5dd:	85 c0	testl	%eax, %eax
10003e5df:	75 1e	jne	0x10003e5ff
10003e5e1:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003e5e8:	eb 15	jmp	0x10003e5ff
10003e5ea:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e5f1:	48 8b 05 08 9a 01 00	movq	104968(%rip), %rax ## literal pool symbol address: _NDR_record
10003e5f8:	48 8b 00	movq	(%rax), %rax
10003e5fb:	48 89 43 18	movq	%rax, 24(%rbx)
10003e5ff:	48 83 c4 08	addq	$8, %rsp
10003e603:	5b	popq	%rbx
10003e604:	5d	popq	%rbp
10003e605:	c3	retq
10003e606:	55	pushq	%rbp
10003e607:	48 89 e5	movq	%rsp, %rbp
10003e60a:	41 57	pushq	%r15
10003e60c:	41 56	pushq	%r14
10003e60e:	53	pushq	%rbx
10003e60f:	50	pushq	%rax
10003e610:	49 89 f6	movq	%rsi, %r14
10003e613:	83 3f 00	cmpl	$0, (%rdi)
10003e616:	78 4b	js	0x10003e663
10003e618:	48 89 fb	movq	%rdi, %rbx
10003e61b:	81 7f 04 a0 00 00 00	cmpl	$160, 4(%rdi)
10003e622:	75 3f	jne	0x10003e663
10003e624:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003e628:	ba 80 00 00 00	movl	$128, %edx
10003e62d:	4c 89 ff	movq	%r15, %rdi
10003e630:	31 f6	xorl	%esi, %esi
10003e632:	e8 91 35 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e637:	48 85 c0	testq	%rax, %rax
10003e63a:	74 27	je	0x10003e663
10003e63c:	49 8d 56 1c	leaq	28(%r14), %rdx
10003e640:	48 b8 00 00 00 00 00 00 14 00	movabsq	$5629499534213120, %rax
10003e64a:	49 89 46 20	movq	%rax, 32(%r14)
10003e64e:	8b 7b 0c	movl	12(%rbx), %edi
10003e651:	4c 89 fe	movq	%r15, %rsi
10003e654:	e8 ea d2 fc ff	callq	0x10000b943
10003e659:	85 c0	testl	%eax, %eax
10003e65b:	74 27	je	0x10003e684
10003e65d:	41 89 46 20	movl	%eax, 32(%r14)
10003e661:	eb 08	jmp	0x10003e66b
10003e663:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003e66b:	48 8b 05 8e 99 01 00	movq	104846(%rip), %rax ## literal pool symbol address: _NDR_record
10003e672:	48 8b 00	movq	(%rax), %rax
10003e675:	49 89 46 18	movq	%rax, 24(%r14)
10003e679:	48 83 c4 08	addq	$8, %rsp
10003e67d:	5b	popq	%rbx
10003e67e:	41 5e	popq	%r14
10003e680:	41 5f	popq	%r15
10003e682:	5d	popq	%rbp
10003e683:	c3	retq
10003e684:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003e689:	41 c7 46 04 28 00 00 00	movl	$40, 4(%r14)
10003e691:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003e699:	eb de	jmp	0x10003e679
10003e69b:	55	pushq	%rbp
10003e69c:	48 89 e5	movq	%rsp, %rbp
10003e69f:	41 57	pushq	%r15
10003e6a1:	41 56	pushq	%r14
10003e6a3:	53	pushq	%rbx
10003e6a4:	50	pushq	%rax
10003e6a5:	49 89 f6	movq	%rsi, %r14
10003e6a8:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e6ad:	83 3f 00	cmpl	$0, (%rdi)
10003e6b0:	79 54	jns	0x10003e706
10003e6b2:	48 89 fb	movq	%rdi, %rbx
10003e6b5:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003e6b9:	75 4b	jne	0x10003e706
10003e6bb:	81 7b 04 b0 00 00 00	cmpl	$176, 4(%rbx)
10003e6c2:	75 42	jne	0x10003e706
10003e6c4:	0f b7 4b 26	movzwl	38(%rbx), %ecx
10003e6c8:	c1 e1 10	shll	$16, %ecx
10003e6cb:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e6d0:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e6d6:	75 2e	jne	0x10003e706
10003e6d8:	4c 8d 7b 30	leaq	48(%rbx), %r15
10003e6dc:	ba 80 00 00 00	movl	$128, %edx
10003e6e1:	4c 89 ff	movq	%r15, %rdi
10003e6e4:	31 f6	xorl	%esi, %esi
10003e6e6:	e8 dd 34 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003e6eb:	48 89 c1	movq	%rax, %rcx
10003e6ee:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e6f3:	48 85 c9	testq	%rcx, %rcx
10003e6f6:	74 0e	je	0x10003e706
10003e6f8:	8b 7b 0c	movl	12(%rbx), %edi
10003e6fb:	8b 53 1c	movl	28(%rbx), %edx
10003e6fe:	4c 89 fe	movq	%r15, %rsi
10003e701:	e8 48 d2 fc ff	callq	0x10000b94e
10003e706:	41 89 46 20	movl	%eax, 32(%r14)
10003e70a:	48 8b 05 ef 98 01 00	movq	104687(%rip), %rax ## literal pool symbol address: _NDR_record
10003e711:	48 8b 00	movq	(%rax), %rax
10003e714:	49 89 46 18	movq	%rax, 24(%r14)
10003e718:	48 83 c4 08	addq	$8, %rsp
10003e71c:	5b	popq	%rbx
10003e71d:	41 5e	popq	%r14
10003e71f:	41 5f	popq	%r15
10003e721:	5d	popq	%rbp
10003e722:	c3	retq
10003e723:	55	pushq	%rbp
10003e724:	48 89 e5	movq	%rsp, %rbp
10003e727:	53	pushq	%rbx
10003e728:	50	pushq	%rax
10003e729:	48 89 f3	movq	%rsi, %rbx
10003e72c:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e731:	83 3f 00	cmpl	$0, (%rdi)
10003e734:	79 31	jns	0x10003e767
10003e736:	83 7f 18 01	cmpl	$1, 24(%rdi)
10003e73a:	75 2b	jne	0x10003e767
10003e73c:	83 7f 04 40	cmpl	$64, 4(%rdi)
10003e740:	75 25	jne	0x10003e767
10003e742:	0f b7 4f 26	movzwl	38(%rdi), %ecx
10003e746:	c1 e1 10	shll	$16, %ecx
10003e749:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e74e:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e754:	75 11	jne	0x10003e767
10003e756:	48 8d 77 30	leaq	48(%rdi), %rsi
10003e75a:	8b 47 0c	movl	12(%rdi), %eax
10003e75d:	8b 57 1c	movl	28(%rdi), %edx
10003e760:	89 c7	movl	%eax, %edi
10003e762:	e8 f2 d1 fc ff	callq	0x10000b959
10003e767:	89 43 20	movl	%eax, 32(%rbx)
10003e76a:	48 8b 05 8f 98 01 00	movq	104591(%rip), %rax ## literal pool symbol address: _NDR_record
10003e771:	48 8b 00	movq	(%rax), %rax
10003e774:	48 89 43 18	movq	%rax, 24(%rbx)
10003e778:	48 83 c4 08	addq	$8, %rsp
10003e77c:	5b	popq	%rbx
10003e77d:	5d	popq	%rbp
10003e77e:	c3	retq
10003e77f:	55	pushq	%rbp
10003e780:	48 89 e5	movq	%rsp, %rbp
10003e783:	53	pushq	%rbx
10003e784:	50	pushq	%rax
10003e785:	48 89 f3	movq	%rsi, %rbx
10003e788:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e78d:	83 3f 00	cmpl	$0, (%rdi)
10003e790:	79 6d	jns	0x10003e7ff
10003e792:	83 7f 18 02	cmpl	$2, 24(%rdi)
10003e796:	75 67	jne	0x10003e7ff
10003e798:	83 7f 04 44	cmpl	$68, 4(%rdi)
10003e79c:	75 61	jne	0x10003e7ff
10003e79e:	0f b6 4f 27	movzbl	39(%rdi), %ecx
10003e7a2:	c1 e1 18	shll	$24, %ecx
10003e7a5:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e7aa:	81 f9 00 00 00 01	cmpl	$16777216, %ecx
10003e7b0:	75 4d	jne	0x10003e7ff
10003e7b2:	0f b7 4f 36	movzwl	54(%rdi), %ecx
10003e7b6:	c1 e1 10	shll	$16, %ecx
10003e7b9:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e7bf:	75 3e	jne	0x10003e7ff
10003e7c1:	8b 4f 28	movl	40(%rdi), %ecx
10003e7c4:	3b 4f 40	cmpl	64(%rdi), %ecx
10003e7c7:	75 36	jne	0x10003e7ff
10003e7c9:	4c 8d 53 1c	leaq	28(%rbx), %r10
10003e7cd:	48 b8 00 00 00 00 00 00 10 00	movabsq	$4503599627370496, %rax
10003e7d7:	48 89 43 20	movq	%rax, 32(%rbx)
10003e7db:	8b 77 08	movl	8(%rdi), %esi
10003e7de:	8b 47 0c	movl	12(%rdi), %eax
10003e7e1:	48 8b 57 1c	movq	28(%rdi), %rdx
10003e7e5:	8b 4f 28	movl	40(%rdi), %ecx
10003e7e8:	44 8b 47 2c	movl	44(%rdi), %r8d
10003e7ec:	4c 8d 4b 30	leaq	48(%rbx), %r9
10003e7f0:	4c 89 14 24	movq	%r10, (%rsp)
10003e7f4:	89 c7	movl	%eax, %edi
10003e7f6:	e8 69 d1 fc ff	callq	0x10000b964
10003e7fb:	85 c0	testl	%eax, %eax
10003e7fd:	74 18	je	0x10003e817
10003e7ff:	89 43 20	movl	%eax, 32(%rbx)
10003e802:	48 8b 05 f7 97 01 00	movq	104439(%rip), %rax ## literal pool symbol address: _NDR_record
10003e809:	48 8b 00	movq	(%rax), %rax
10003e80c:	48 89 43 18	movq	%rax, 24(%rbx)
10003e810:	48 83 c4 08	addq	$8, %rsp
10003e814:	5b	popq	%rbx
10003e815:	5d	popq	%rbp
10003e816:	c3	retq
10003e817:	48 8b 05 e2 97 01 00	movq	104418(%rip), %rax ## literal pool symbol address: _NDR_record
10003e81e:	48 8b 00	movq	(%rax), %rax
10003e821:	48 89 43 28	movq	%rax, 40(%rbx)
10003e825:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e829:	c7 43 04 34 00 00 00	movl	$52, 4(%rbx)
10003e830:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003e837:	eb d7	jmp	0x10003e810
10003e839:	55	pushq	%rbp
10003e83a:	48 89 e5	movq	%rsp, %rbp
10003e83d:	53	pushq	%rbx
10003e83e:	50	pushq	%rax
10003e83f:	48 89 f3	movq	%rsi, %rbx
10003e842:	83 3f 00	cmpl	$0, (%rdi)
10003e845:	78 29	js	0x10003e870
10003e847:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003e84b:	75 23	jne	0x10003e870
10003e84d:	48 8d 73 1c	leaq	28(%rbx), %rsi
10003e851:	48 b8 00 00 00 00 00 00 11 00	movabsq	$4785074604081152, %rax
10003e85b:	48 89 43 20	movq	%rax, 32(%rbx)
10003e85f:	8b 7f 0c	movl	12(%rdi), %edi
10003e862:	e8 08 d1 fc ff	callq	0x10000b96f
10003e867:	85 c0	testl	%eax, %eax
10003e869:	74 21	je	0x10003e88c
10003e86b:	89 43 20	movl	%eax, 32(%rbx)
10003e86e:	eb 07	jmp	0x10003e877
10003e870:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003e877:	48 8b 05 82 97 01 00	movq	104322(%rip), %rax ## literal pool symbol address: _NDR_record
10003e87e:	48 8b 00	movq	(%rax), %rax
10003e881:	48 89 43 18	movq	%rax, 24(%rbx)
10003e885:	48 83 c4 08	addq	$8, %rsp
10003e889:	5b	popq	%rbx
10003e88a:	5d	popq	%rbp
10003e88b:	c3	retq
10003e88c:	80 4b 03 80	orb	$-128, 3(%rbx)
10003e890:	c7 43 04 28 00 00 00	movl	$40, 4(%rbx)
10003e897:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003e89e:	eb e5	jmp	0x10003e885
10003e8a0:	55	pushq	%rbp
10003e8a1:	48 89 e5	movq	%rsp, %rbp
10003e8a4:	41 57	pushq	%r15
10003e8a6:	41 56	pushq	%r14
10003e8a8:	41 54	pushq	%r12
10003e8aa:	53	pushq	%rbx
10003e8ab:	49 89 f6	movq	%rsi, %r14
10003e8ae:	b8 d0 fe ff ff	movl	$4294966992, %eax
10003e8b3:	83 3f 00	cmpl	$0, (%rdi)
10003e8b6:	0f 89 e8 00 00 00	jns	0x10003e9a4
10003e8bc:	48 89 fb	movq	%rdi, %rbx
10003e8bf:	83 7f 18 03	cmpl	$3, 24(%rdi)
10003e8c3:	0f 85 db 00 00 00	jne	0x10003e9a4
10003e8c9:	83 7b 04 58	cmpl	$88, 4(%rbx)
10003e8cd:	0f 85 d1 00 00 00	jne	0x10003e9a4
10003e8d3:	0f b6 4b 27	movzbl	39(%rbx), %ecx
10003e8d7:	c1 e1 18	shll	$24, %ecx
10003e8da:	b8 d4 fe ff ff	movl	$4294966996, %eax
10003e8df:	81 f9 00 00 00 01	cmpl	$16777216, %ecx
10003e8e5:	0f 85 b9 00 00 00	jne	0x10003e9a4
10003e8eb:	0f b7 4b 36	movzwl	54(%rbx), %ecx
10003e8ef:	c1 e1 10	shll	$16, %ecx
10003e8f2:	81 f9 00 00 11 02	cmpl	$34668544, %ecx
10003e8f8:	0f 85 a6 00 00 00	jne	0x10003e9a4
10003e8fe:	0f b7 4b 46	movzwl	70(%rbx), %ecx
10003e902:	c1 e1 10	shll	$16, %ecx
10003e905:	81 f9 00 00 11 00	cmpl	$1114112, %ecx
10003e90b:	0f 85 93 00 00 00	jne	0x10003e9a4
10003e911:	8b 4b 28	movl	40(%rbx), %ecx
10003e914:	3b 4b 50	cmpl	80(%rbx), %ecx
10003e917:	0f 85 87 00 00 00	jne	0x10003e9a4
10003e91d:	8b 4b 38	movl	56(%rbx), %ecx
10003e920:	3b 4b 54	cmpl	84(%rbx), %ecx
10003e923:	75 7f	jne	0x10003e9a4
10003e925:	4d 8d 4e 1c	leaq	28(%r14), %r9
10003e929:	41 c7 46 24 01 01 00 01	movl	$16777473, 36(%r14)
10003e931:	4d 8d 56 2c	leaq	44(%r14), %r10
10003e935:	41 0f b6 4e 35	movzbl	53(%r14), %ecx
10003e93a:	c1 e1 08	shll	$8, %ecx
10003e93d:	81 c9 01 00 11 02	orl	$34668545, %ecx
10003e943:	41 89 4e 34	movl	%ecx, 52(%r14)
10003e947:	4d 8d 5e 48	leaq	72(%r14), %r11
10003e94b:	45 31 e4	xorl	%r12d, %r12d
10003e94e:	45 89 66 48	movl	%r12d, 72(%r14)
10003e952:	8b 7b 0c	movl	12(%rbx), %edi
10003e955:	48 8b 73 1c	movq	28(%rbx), %rsi
10003e959:	8b 53 28	movl	40(%rbx), %edx
10003e95c:	48 8b 4b 2c	movq	44(%rbx), %rcx
10003e960:	44 8b 43 38	movl	56(%rbx), %r8d
10003e964:	4d 8d 7e 44	leaq	68(%r14), %r15
10003e968:	8b 43 3c	movl	60(%rbx), %eax
10003e96b:	50	pushq	%rax
10003e96c:	41 53	pushq	%r11
10003e96e:	41 52	pushq	%r10
10003e970:	41 57	pushq	%r15
10003e972:	e8 03 d0 fc ff	callq	0x10000b97a
10003e977:	48 83 c4 20	addq	$32, %rsp
10003e97b:	41 89 c7	movl	%eax, %r15d
10003e97e:	48 8b 7b 2c	movq	44(%rbx), %rdi
10003e982:	8b 73 38	movl	56(%rbx), %esi
10003e985:	c1 e6 02	shll	$2, %esi
10003e988:	e8 53 32 00 00	callq	0x100041be0 ## symbol stub for: _mig_deallocate
10003e98d:	48 c7 43 2c 00 00 00 00	movq	$0, 44(%rbx)
10003e995:	44 89 63 38	movl	%r12d, 56(%rbx)
10003e999:	45 85 ff	testl	%r15d, %r15d
10003e99c:	74 21	je	0x10003e9bf
10003e99e:	45 89 7e 20	movl	%r15d, 32(%r14)
10003e9a2:	eb 04	jmp	0x10003e9a8
10003e9a4:	41 89 46 20	movl	%eax, 32(%r14)
10003e9a8:	48 8b 05 51 96 01 00	movq	104017(%rip), %rax ## literal pool symbol address: _NDR_record
10003e9af:	48 8b 00	movq	(%rax), %rax
10003e9b2:	49 89 46 18	movq	%rax, 24(%r14)
10003e9b6:	5b	popq	%rbx
10003e9b7:	41 5c	popq	%r12
10003e9b9:	41 5e	popq	%r14
10003e9bb:	41 5f	popq	%r15
10003e9bd:	5d	popq	%rbp
10003e9be:	c3	retq
10003e9bf:	41 8b 46 44	movl	68(%r14), %eax
10003e9c3:	41 8b 4e 48	movl	72(%r14), %ecx
10003e9c7:	41 89 46 28	movl	%eax, 40(%r14)
10003e9cb:	41 89 4e 38	movl	%ecx, 56(%r14)
10003e9cf:	48 8b 05 2a 96 01 00	movq	103978(%rip), %rax ## literal pool symbol address: _NDR_record
10003e9d6:	48 8b 00	movq	(%rax), %rax
10003e9d9:	49 89 46 3c	movq	%rax, 60(%r14)
10003e9dd:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003e9e2:	41 c7 46 04 4c 00 00 00	movl	$76, 4(%r14)
10003e9ea:	41 c7 46 18 02 00 00 00	movl	$2, 24(%r14)
10003e9f2:	eb c2	jmp	0x10003e9b6
10003e9f4:	55	pushq	%rbp
10003e9f5:	48 89 e5	movq	%rsp, %rbp
10003e9f8:	53	pushq	%rbx
10003e9f9:	50	pushq	%rax
10003e9fa:	48 89 f3	movq	%rsi, %rbx
10003e9fd:	83 3f 00	cmpl	$0, (%rdi)
10003ea00:	78 35	js	0x10003ea37
10003ea02:	83 7f 04 18	cmpl	$24, 4(%rdi)
10003ea06:	75 2f	jne	0x10003ea37
10003ea08:	48 8d 73 1c	leaq	28(%rbx), %rsi
10003ea0c:	0f b6 43 25	movzbl	37(%rbx), %eax
10003ea10:	c1 e0 08	shll	$8, %eax
10003ea13:	0d 01 00 14 02	orl	$34865153, %eax
10003ea18:	89 43 24	movl	%eax, 36(%rbx)
10003ea1b:	48 8d 53 34	leaq	52(%rbx), %rdx
10003ea1f:	c7 43 34 00 00 00 00	movl	$0, 52(%rbx)
10003ea26:	8b 7f 0c	movl	12(%rdi), %edi
10003ea29:	e8 57 cf fc ff	callq	0x10000b985
10003ea2e:	85 c0	testl	%eax, %eax
10003ea30:	74 21	je	0x10003ea53
10003ea32:	89 43 20	movl	%eax, 32(%rbx)
10003ea35:	eb 07	jmp	0x10003ea3e
10003ea37:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003ea3e:	48 8b 05 bb 95 01 00	movq	103867(%rip), %rax ## literal pool symbol address: _NDR_record
10003ea45:	48 8b 00	movq	(%rax), %rax
10003ea48:	48 89 43 18	movq	%rax, 24(%rbx)
10003ea4c:	48 83 c4 08	addq	$8, %rsp
10003ea50:	5b	popq	%rbx
10003ea51:	5d	popq	%rbp
10003ea52:	c3	retq
10003ea53:	8b 43 34	movl	52(%rbx), %eax
10003ea56:	89 43 28	movl	%eax, 40(%rbx)
10003ea59:	48 8b 05 a0 95 01 00	movq	103840(%rip), %rax ## literal pool symbol address: _NDR_record
10003ea60:	48 8b 00	movq	(%rax), %rax
10003ea63:	48 89 43 2c	movq	%rax, 44(%rbx)
10003ea67:	80 4b 03 80	orb	$-128, 3(%rbx)
10003ea6b:	c7 43 04 38 00 00 00	movl	$56, 4(%rbx)
10003ea72:	c7 43 18 01 00 00 00	movl	$1, 24(%rbx)
10003ea79:	eb d1	jmp	0x10003ea4c
10003ea7b:	55	pushq	%rbp
10003ea7c:	48 89 e5	movq	%rsp, %rbp
10003ea7f:	41 57	pushq	%r15
10003ea81:	41 56	pushq	%r14
10003ea83:	53	pushq	%rbx
10003ea84:	50	pushq	%rax
10003ea85:	49 89 f6	movq	%rsi, %r14
10003ea88:	83 3f 00	cmpl	$0, (%rdi)
10003ea8b:	78 75	js	0x10003eb02
10003ea8d:	48 89 fb	movq	%rdi, %rbx
10003ea90:	81 7f 04 bc 00 00 00	cmpl	$188, 4(%rdi)
10003ea97:	75 69	jne	0x10003eb02
10003ea99:	4c 8d 7b 20	leaq	32(%rbx), %r15
10003ea9d:	ba 80 00 00 00	movl	$128, %edx
10003eaa2:	4c 89 ff	movq	%r15, %rdi
10003eaa5:	31 f6	xorl	%esi, %esi
10003eaa7:	e8 1c 31 00 00	callq	0x100041bc8 ## symbol stub for: _memchr
10003eaac:	48 85 c0	testq	%rax, %rax
10003eaaf:	74 51	je	0x10003eb02
10003eab1:	49 8d 4e 1c	leaq	28(%r14), %rcx
10003eab5:	48 b8 00 00 00 00 00 00 13 00	movabsq	$5348024557502464, %rax
10003eabf:	49 89 46 20	movq	%rax, 32(%r14)
10003eac3:	8b 73 08	movl	8(%rbx), %esi
10003eac6:	8b 7b 0c	movl	12(%rbx), %edi
10003eac9:	44 8b 83 a0 00 00 00	movl	160(%rbx), %r8d
10003ead0:	4c 8d 8b a4 00 00 00	leaq	164(%rbx), %r9
10003ead7:	4d 8d 56 30	leaq	48(%r14), %r10
10003eadb:	49 8d 46 34	leaq	52(%r14), %rax
10003eadf:	48 83 ec 08	subq	$8, %rsp
10003eae3:	4c 89 fa	movq	%r15, %rdx
10003eae6:	50	pushq	%rax
10003eae7:	41 52	pushq	%r10
10003eae9:	ff b3 b4 00 00 00	pushq	180(%rbx)
10003eaef:	e8 5d cd fc ff	callq	0x10000b851
10003eaf4:	48 83 c4 20	addq	$32, %rsp
10003eaf8:	85 c0	testl	%eax, %eax
10003eafa:	74 27	je	0x10003eb23
10003eafc:	41 89 46 20	movl	%eax, 32(%r14)
10003eb00:	eb 08	jmp	0x10003eb0a
10003eb02:	41 c7 46 20 d0 fe ff ff	movl	$4294966992, 32(%r14)
10003eb0a:	48 8b 05 ef 94 01 00	movq	103663(%rip), %rax ## literal pool symbol address: _NDR_record
10003eb11:	48 8b 00	movq	(%rax), %rax
10003eb14:	49 89 46 18	movq	%rax, 24(%r14)
10003eb18:	48 83 c4 08	addq	$8, %rsp
10003eb1c:	5b	popq	%rbx
10003eb1d:	41 5e	popq	%r14
10003eb1f:	41 5f	popq	%r15
10003eb21:	5d	popq	%rbp
10003eb22:	c3	retq
10003eb23:	48 8b 05 d6 94 01 00	movq	103638(%rip), %rax ## literal pool symbol address: _NDR_record
10003eb2a:	48 8b 00	movq	(%rax), %rax
10003eb2d:	49 89 46 28	movq	%rax, 40(%r14)
10003eb31:	41 80 4e 03 80	orb	$-128, 3(%r14)
10003eb36:	41 c7 46 04 38 00 00 00	movl	$56, 4(%r14)
10003eb3e:	41 c7 46 18 01 00 00 00	movl	$1, 24(%r14)
10003eb46:	eb d0	jmp	0x10003eb18
10003eb48:	55	pushq	%rbp
10003eb49:	48 89 e5	movq	%rsp, %rbp
10003eb4c:	8b 07	movl	(%rdi), %eax
10003eb4e:	83 e0 1f	andl	$31, %eax
10003eb51:	89 06	movl	%eax, (%rsi)
10003eb53:	8b 47 08	movl	8(%rdi), %eax
10003eb56:	89 46 08	movl	%eax, 8(%rsi)
10003eb59:	c7 46 04 24 00 00 00	movl	$36, 4(%rsi)
10003eb60:	31 c0	xorl	%eax, %eax
10003eb62:	89 46 0c	movl	%eax, 12(%rsi)
10003eb65:	8b 4f 14	movl	20(%rdi), %ecx
10003eb68:	83 c1 64	addl	$100, %ecx
10003eb6b:	89 4e 14	movl	%ecx, 20(%rsi)
10003eb6e:	89 46 10	movl	%eax, 16(%rsi)
10003eb71:	b9 70 fe ff ff	movl	$4294966896, %ecx
10003eb76:	03 4f 14	addl	20(%rdi), %ecx
10003eb79:	83 f9 27	cmpl	$39, %ecx
10003eb7c:	77 20	ja	0x10003eb9e
10003eb7e:	89 c9	movl	%ecx, %ecx
10003eb80:	48 8d 0c 89	leaq	(%rcx,%rcx,4), %rcx
10003eb84:	48 8d 15 3d d0 01 00	leaq	118845(%rip), %rdx
10003eb8b:	48 8b 4c ca 28	movq	40(%rdx,%rcx,8), %rcx
10003eb90:	48 85 c9	testq	%rcx, %rcx
10003eb93:	74 09	je	0x10003eb9e
10003eb95:	ff d1	callq	*%rcx
10003eb97:	b8 01 00 00 00	movl	$1, %eax
10003eb9c:	eb 15	jmp	0x10003ebb3
10003eb9e:	48 8b 0d 5b 94 01 00	movq	103515(%rip), %rcx ## literal pool symbol address: _NDR_record
10003eba5:	48 8b 09	movq	(%rcx), %rcx
10003eba8:	48 89 4e 18	movq	%rcx, 24(%rsi)
10003ebac:	c7 46 20 d1 fe ff ff	movl	$4294966993, 32(%rsi)
10003ebb3:	5d	popq	%rbp
10003ebb4:	c3	retq
10003ebb5:	55	pushq	%rbp
10003ebb6:	48 89 e5	movq	%rsp, %rbp
10003ebb9:	53	pushq	%rbx
10003ebba:	50	pushq	%rax
10003ebbb:	48 89 f3	movq	%rsi, %rbx
10003ebbe:	8b 07	movl	(%rdi), %eax
10003ebc0:	83 e0 1f	andl	$31, %eax
10003ebc3:	89 06	movl	%eax, (%rsi)
10003ebc5:	8b 47 08	movl	8(%rdi), %eax
10003ebc8:	89 46 08	movl	%eax, 8(%rsi)
10003ebcb:	c7 46 04 24 00 00 00	movl	$36, 4(%rsi)
10003ebd2:	31 c0	xorl	%eax, %eax
10003ebd4:	89 46 0c	movl	%eax, 12(%rsi)
10003ebd7:	8b 4f 14	movl	20(%rdi), %ecx
10003ebda:	83 c1 64	addl	$100, %ecx
10003ebdd:	89 4e 14	movl	%ecx, 20(%rsi)
10003ebe0:	89 46 10	movl	%eax, 16(%rsi)
10003ebe3:	81 7f 14 b4 14 00 00	cmpl	$5300, 20(%rdi)
10003ebea:	75 21	jne	0x10003ec0d
10003ebec:	83 3f 00	cmpl	$0, (%rdi)
10003ebef:	78 33	js	0x10003ec24
10003ebf1:	83 7f 04 2c	cmpl	$44, 4(%rdi)
10003ebf5:	75 2d	jne	0x10003ec24
10003ebf7:	8b 47 0c	movl	12(%rdi), %eax
10003ebfa:	48 8b 77 20	movq	32(%rdi), %rsi
10003ebfe:	8b 57 28	movl	40(%rdi), %edx
10003ec01:	89 c7	movl	%eax, %edi
10003ec03:	e8 82 71 fe ff	callq	0x100025d8a
10003ec08:	89 43 20	movl	%eax, 32(%rbx)
10003ec0b:	eb 2c	jmp	0x10003ec39
10003ec0d:	48 8b 0d ec 93 01 00	movq	103404(%rip), %rcx ## literal pool symbol address: _NDR_record
10003ec14:	48 8b 09	movq	(%rcx), %rcx
10003ec17:	48 89 4b 18	movq	%rcx, 24(%rbx)
10003ec1b:	c7 43 20 d1 fe ff ff	movl	$4294966993, 32(%rbx)
10003ec22:	eb 1a	jmp	0x10003ec3e
10003ec24:	c7 43 20 d0 fe ff ff	movl	$4294966992, 32(%rbx)
10003ec2b:	48 8b 05 ce 93 01 00	movq	103374(%rip), %rax ## literal pool symbol address: _NDR_record
10003ec32:	48 8b 00	movq	(%rax), %rax
10003ec35:	48 89 43 18	movq	%rax, 24(%rbx)
10003ec39:	b8 01 00 00 00	movl	$1, %eax
10003ec3e:	48 83 c4 08	addq	$8, %rsp
10003ec42:	5b	popq	%rbx
10003ec43:	5d	popq	%rbp
10003ec44:	c3	retq
10003ec45:	55	pushq	%rbp
10003ec46:	48 89 e5	movq	%rsp, %rbp
10003ec49:	48 8d 3d 78 47 00 00	leaq	18296(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ec50:	e8 5f 2b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ec55:	0f 0b	ud2
10003ec57:	55	pushq	%rbp
10003ec58:	48 89 e5	movq	%rsp, %rbp
10003ec5b:	48 8d 3d 91 47 00 00	leaq	18321(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ec62:	e8 4d 2b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ec67:	0f 0b	ud2
10003ec69:	55	pushq	%rbp
10003ec6a:	48 89 e5	movq	%rsp, %rbp
10003ec6d:	31 ff	xorl	%edi, %edi
10003ec6f:	e8 28 2b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ec74:	48 89 c7	movq	%rax, %rdi
10003ec77:	e8 38 2b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ec7c:	0f 0b	ud2
10003ec7e:	55	pushq	%rbp
10003ec7f:	48 89 e5	movq	%rsp, %rbp
10003ec82:	31 ff	xorl	%edi, %edi
10003ec84:	e8 13 2b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ec89:	48 89 c7	movq	%rax, %rdi
10003ec8c:	e8 23 2b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ec91:	0f 0b	ud2
10003ec93:	55	pushq	%rbp
10003ec94:	48 89 e5	movq	%rsp, %rbp
10003ec97:	31 ff	xorl	%edi, %edi
10003ec99:	e8 fe 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ec9e:	48 89 c7	movq	%rax, %rdi
10003eca1:	e8 0e 2b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eca6:	0f 0b	ud2
10003eca8:	55	pushq	%rbp
10003eca9:	48 89 e5	movq	%rsp, %rbp
10003ecac:	31 ff	xorl	%edi, %edi
10003ecae:	e8 e9 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ecb3:	48 89 c7	movq	%rax, %rdi
10003ecb6:	e8 f9 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ecbb:	0f 0b	ud2
10003ecbd:	55	pushq	%rbp
10003ecbe:	48 89 e5	movq	%rsp, %rbp
10003ecc1:	31 ff	xorl	%edi, %edi
10003ecc3:	e8 d4 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ecc8:	48 89 c7	movq	%rax, %rdi
10003eccb:	e8 e4 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ecd0:	0f 0b	ud2
10003ecd2:	55	pushq	%rbp
10003ecd3:	48 89 e5	movq	%rsp, %rbp
10003ecd6:	31 ff	xorl	%edi, %edi
10003ecd8:	e8 bf 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ecdd:	48 89 c7	movq	%rax, %rdi
10003ece0:	e8 cf 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ece5:	0f 0b	ud2
10003ece7:	55	pushq	%rbp
10003ece8:	48 89 e5	movq	%rsp, %rbp
10003eceb:	31 ff	xorl	%edi, %edi
10003eced:	e8 aa 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ecf2:	48 89 c7	movq	%rax, %rdi
10003ecf5:	e8 ba 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ecfa:	0f 0b	ud2
10003ecfc:	55	pushq	%rbp
10003ecfd:	48 89 e5	movq	%rsp, %rbp
10003ed00:	31 ff	xorl	%edi, %edi
10003ed02:	e8 95 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ed07:	48 89 c7	movq	%rax, %rdi
10003ed0a:	e8 a5 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed0f:	0f 0b	ud2
10003ed11:	55	pushq	%rbp
10003ed12:	48 89 e5	movq	%rsp, %rbp
10003ed15:	31 ff	xorl	%edi, %edi
10003ed17:	e8 80 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ed1c:	48 89 c7	movq	%rax, %rdi
10003ed1f:	e8 90 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed24:	0f 0b	ud2
10003ed26:	55	pushq	%rbp
10003ed27:	48 89 e5	movq	%rsp, %rbp
10003ed2a:	48 8d 3d 97 46 00 00	leaq	18071(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ed31:	e8 7e 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed36:	0f 0b	ud2
10003ed38:	55	pushq	%rbp
10003ed39:	48 89 e5	movq	%rsp, %rbp
10003ed3c:	48 8d 3d b0 46 00 00	leaq	18096(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ed43:	e8 6c 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed48:	0f 0b	ud2
10003ed4a:	55	pushq	%rbp
10003ed4b:	48 89 e5	movq	%rsp, %rbp
10003ed4e:	31 ff	xorl	%edi, %edi
10003ed50:	e8 47 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ed55:	48 89 c7	movq	%rax, %rdi
10003ed58:	e8 57 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed5d:	0f 0b	ud2
10003ed5f:	90	nop
10003ed60:	55	pushq	%rbp
10003ed61:	48 89 e5	movq	%rsp, %rbp
10003ed64:	48 8d 3d 5d 46 00 00	leaq	18013(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ed6b:	e8 44 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed70:	0f 0b	ud2
10003ed72:	55	pushq	%rbp
10003ed73:	48 89 e5	movq	%rsp, %rbp
10003ed76:	48 8d 3d 76 46 00 00	leaq	18038(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ed7d:	e8 32 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed82:	0f 0b	ud2
10003ed84:	55	pushq	%rbp
10003ed85:	48 89 e5	movq	%rsp, %rbp
10003ed88:	31 ff	xorl	%edi, %edi
10003ed8a:	e8 0d 2a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ed8f:	48 89 c7	movq	%rax, %rdi
10003ed92:	e8 1d 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ed97:	0f 0b	ud2
10003ed99:	55	pushq	%rbp
10003ed9a:	48 89 e5	movq	%rsp, %rbp
10003ed9d:	31 ff	xorl	%edi, %edi
10003ed9f:	e8 f8 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003eda4:	48 89 c7	movq	%rax, %rdi
10003eda7:	e8 08 2a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003edac:	0f 0b	ud2
10003edae:	55	pushq	%rbp
10003edaf:	48 89 e5	movq	%rsp, %rbp
10003edb2:	31 ff	xorl	%edi, %edi
10003edb4:	e8 e3 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003edb9:	48 89 c7	movq	%rax, %rdi
10003edbc:	e8 f3 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003edc1:	0f 0b	ud2
10003edc3:	55	pushq	%rbp
10003edc4:	48 89 e5	movq	%rsp, %rbp
10003edc7:	31 ff	xorl	%edi, %edi
10003edc9:	e8 ce 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003edce:	48 89 c7	movq	%rax, %rdi
10003edd1:	e8 de 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003edd6:	0f 0b	ud2
10003edd8:	55	pushq	%rbp
10003edd9:	48 89 e5	movq	%rsp, %rbp
10003eddc:	31 ff	xorl	%edi, %edi
10003edde:	e8 b9 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ede3:	48 89 c7	movq	%rax, %rdi
10003ede6:	e8 c9 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003edeb:	0f 0b	ud2
10003eded:	55	pushq	%rbp
10003edee:	48 89 e5	movq	%rsp, %rbp
10003edf1:	31 ff	xorl	%edi, %edi
10003edf3:	e8 a4 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003edf8:	48 89 c7	movq	%rax, %rdi
10003edfb:	e8 b4 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee00:	0f 0b	ud2
10003ee02:	55	pushq	%rbp
10003ee03:	48 89 e5	movq	%rsp, %rbp
10003ee06:	31 ff	xorl	%edi, %edi
10003ee08:	e8 8f 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ee0d:	48 89 c7	movq	%rax, %rdi
10003ee10:	e8 9f 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee15:	0f 0b	ud2
10003ee17:	55	pushq	%rbp
10003ee18:	48 89 e5	movq	%rsp, %rbp
10003ee1b:	31 ff	xorl	%edi, %edi
10003ee1d:	e8 7a 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ee22:	48 89 c7	movq	%rax, %rdi
10003ee25:	e8 8a 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee2a:	0f 0b	ud2
10003ee2c:	55	pushq	%rbp
10003ee2d:	48 89 e5	movq	%rsp, %rbp
10003ee30:	31 ff	xorl	%edi, %edi
10003ee32:	e8 65 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ee37:	48 89 c7	movq	%rax, %rdi
10003ee3a:	e8 75 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee3f:	0f 0b	ud2
10003ee41:	55	pushq	%rbp
10003ee42:	48 89 e5	movq	%rsp, %rbp
10003ee45:	31 ff	xorl	%edi, %edi
10003ee47:	e8 50 29 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ee4c:	48 89 c7	movq	%rax, %rdi
10003ee4f:	e8 60 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee54:	0f 0b	ud2
10003ee56:	55	pushq	%rbp
10003ee57:	48 89 e5	movq	%rsp, %rbp
10003ee5a:	48 8d 3d 67 45 00 00	leaq	17767(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ee61:	e8 4e 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee66:	0f 0b	ud2
10003ee68:	55	pushq	%rbp
10003ee69:	48 89 e5	movq	%rsp, %rbp
10003ee6c:	48 8d 3d 80 45 00 00	leaq	17792(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ee73:	e8 3c 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee78:	0f 0b	ud2
10003ee7a:	55	pushq	%rbp
10003ee7b:	48 89 e5	movq	%rsp, %rbp
10003ee7e:	48 8d 3d 43 45 00 00	leaq	17731(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ee85:	e8 2a 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee8a:	0f 0b	ud2
10003ee8c:	55	pushq	%rbp
10003ee8d:	48 89 e5	movq	%rsp, %rbp
10003ee90:	48 8d 3d 5c 45 00 00	leaq	17756(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ee97:	e8 18 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ee9c:	0f 0b	ud2
10003ee9e:	55	pushq	%rbp
10003ee9f:	48 89 e5	movq	%rsp, %rbp
10003eea2:	48 8d 3d 1f 45 00 00	leaq	17695(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003eea9:	e8 06 29 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eeae:	0f 0b	ud2
10003eeb0:	55	pushq	%rbp
10003eeb1:	48 89 e5	movq	%rsp, %rbp
10003eeb4:	48 8d 3d 38 45 00 00	leaq	17720(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003eebb:	e8 f4 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eec0:	0f 0b	ud2
10003eec2:	55	pushq	%rbp
10003eec3:	48 89 e5	movq	%rsp, %rbp
10003eec6:	48 63 ff	movslq	%edi, %rdi
10003eec9:	e8 ce 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003eece:	48 89 c7	movq	%rax, %rdi
10003eed1:	e8 de 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eed6:	0f 0b	ud2
10003eed8:	55	pushq	%rbp
10003eed9:	48 89 e5	movq	%rsp, %rbp
10003eedc:	48 f7 d7	notq	%rdi
10003eedf:	48 c1 ef 3f	shrq	$63, %rdi
10003eee3:	e8 b4 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003eee8:	48 89 c7	movq	%rax, %rdi
10003eeeb:	e8 c4 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eef0:	0f 0b	ud2
10003eef2:	55	pushq	%rbp
10003eef3:	48 89 e5	movq	%rsp, %rbp
10003eef6:	31 ff	xorl	%edi, %edi
10003eef8:	e8 9f 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003eefd:	48 89 c7	movq	%rax, %rdi
10003ef00:	e8 af 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef05:	0f 0b	ud2
10003ef07:	55	pushq	%rbp
10003ef08:	48 89 e5	movq	%rsp, %rbp
10003ef0b:	31 ff	xorl	%edi, %edi
10003ef0d:	e8 8a 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef12:	48 89 c7	movq	%rax, %rdi
10003ef15:	e8 9a 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef1a:	0f 0b	ud2
10003ef1c:	55	pushq	%rbp
10003ef1d:	48 89 e5	movq	%rsp, %rbp
10003ef20:	31 ff	xorl	%edi, %edi
10003ef22:	e8 75 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef27:	48 89 c7	movq	%rax, %rdi
10003ef2a:	e8 85 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef2f:	0f 0b	ud2
10003ef31:	55	pushq	%rbp
10003ef32:	48 89 e5	movq	%rsp, %rbp
10003ef35:	31 ff	xorl	%edi, %edi
10003ef37:	e8 60 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef3c:	48 89 c7	movq	%rax, %rdi
10003ef3f:	e8 70 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef44:	0f 0b	ud2
10003ef46:	55	pushq	%rbp
10003ef47:	48 89 e5	movq	%rsp, %rbp
10003ef4a:	31 ff	xorl	%edi, %edi
10003ef4c:	e8 4b 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef51:	48 89 c7	movq	%rax, %rdi
10003ef54:	e8 5b 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef59:	0f 0b	ud2
10003ef5b:	55	pushq	%rbp
10003ef5c:	48 89 e5	movq	%rsp, %rbp
10003ef5f:	31 ff	xorl	%edi, %edi
10003ef61:	e8 36 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef66:	48 89 c7	movq	%rax, %rdi
10003ef69:	e8 46 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef6e:	0f 0b	ud2
10003ef70:	55	pushq	%rbp
10003ef71:	48 89 e5	movq	%rsp, %rbp
10003ef74:	40 0f b6 c6	movzbl	%sil, %eax
10003ef78:	48 0f ac c7 1b	shrdq	$27, %rax, %rdi
10003ef7d:	48 83 f7 01	xorq	$1, %rdi
10003ef81:	e8 16 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef86:	48 89 c7	movq	%rax, %rdi
10003ef89:	e8 26 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ef8e:	0f 0b	ud2
10003ef90:	55	pushq	%rbp
10003ef91:	48 89 e5	movq	%rsp, %rbp
10003ef94:	31 ff	xorl	%edi, %edi
10003ef96:	e8 01 28 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ef9b:	48 89 c7	movq	%rax, %rdi
10003ef9e:	e8 11 28 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003efa3:	0f 0b	ud2
10003efa5:	55	pushq	%rbp
10003efa6:	48 89 e5	movq	%rsp, %rbp
10003efa9:	31 ff	xorl	%edi, %edi
10003efab:	e8 ec 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003efb0:	48 89 c7	movq	%rax, %rdi
10003efb3:	e8 fc 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003efb8:	0f 0b	ud2
10003efba:	55	pushq	%rbp
10003efbb:	48 89 e5	movq	%rsp, %rbp
10003efbe:	31 ff	xorl	%edi, %edi
10003efc0:	e8 d7 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003efc5:	48 89 c7	movq	%rax, %rdi
10003efc8:	e8 e7 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003efcd:	0f 0b	ud2
10003efcf:	55	pushq	%rbp
10003efd0:	48 89 e5	movq	%rsp, %rbp
10003efd3:	31 ff	xorl	%edi, %edi
10003efd5:	e8 c2 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003efda:	48 89 c7	movq	%rax, %rdi
10003efdd:	e8 d2 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003efe2:	0f 0b	ud2
10003efe4:	55	pushq	%rbp
10003efe5:	48 89 e5	movq	%rsp, %rbp
10003efe8:	31 ff	xorl	%edi, %edi
10003efea:	e8 ad 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003efef:	48 89 c7	movq	%rax, %rdi
10003eff2:	e8 bd 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003eff7:	0f 0b	ud2
10003eff9:	55	pushq	%rbp
10003effa:	48 89 e5	movq	%rsp, %rbp
10003effd:	53	pushq	%rbx
10003effe:	50	pushq	%rax
10003efff:	48 89 fb	movq	%rdi, %rbx
10003f002:	48 8d 3d fe 92 fd ff	leaq	-158978(%rip), %rdi
10003f009:	48 89 de	movq	%rbx, %rsi
10003f00c:	31 d2	xorl	%edx, %edx
10003f00e:	e8 95 27 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003f013:	80 8b 0d 05 00 00 01	orb	$1, 1293(%rbx)
10003f01a:	48 83 c4 08	addq	$8, %rsp
10003f01e:	5b	popq	%rbx
10003f01f:	5d	popq	%rbp
10003f020:	c3	retq
10003f021:	55	pushq	%rbp
10003f022:	48 89 e5	movq	%rsp, %rbp
10003f025:	48 63 c7	movslq	%edi, %rax
10003f028:	48 8d 0d 00 85 00 00	leaq	34048(%rip), %rcx ## literal pool for: "Bug in libxpc: mach_port_construct() failed"
10003f02f:	48 89 0d 92 36 02 00	movq	%rcx, 145042(%rip)
10003f036:	48 89 05 bb 36 02 00	movq	%rax, 145083(%rip)
10003f03d:	0f 0b	ud2
10003f03f:	55	pushq	%rbp
10003f040:	48 89 e5	movq	%rsp, %rbp
10003f043:	48 63 c7	movslq	%edi, %rax
10003f046:	48 8d 0d 0e 85 00 00	leaq	34062(%rip), %rcx ## literal pool for: "Bug in libxpc: mach_port_assert_attributes() failed"
10003f04d:	48 89 0d 74 36 02 00	movq	%rcx, 145012(%rip)
10003f054:	48 89 05 9d 36 02 00	movq	%rax, 145053(%rip)
10003f05b:	0f 0b	ud2
10003f05d:	55	pushq	%rbp
10003f05e:	48 89 e5	movq	%rsp, %rbp
10003f061:	48 63 ff	movslq	%edi, %rdi
10003f064:	e8 33 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f069:	48 89 c7	movq	%rax, %rdi
10003f06c:	e8 43 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f071:	0f 0b	ud2
10003f073:	55	pushq	%rbp
10003f074:	48 89 e5	movq	%rsp, %rbp
10003f077:	48 63 ff	movslq	%edi, %rdi
10003f07a:	e8 1d 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f07f:	48 89 c7	movq	%rax, %rdi
10003f082:	e8 2d 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f087:	0f 0b	ud2
10003f089:	55	pushq	%rbp
10003f08a:	48 89 e5	movq	%rsp, %rbp
10003f08d:	48 63 ff	movslq	%edi, %rdi
10003f090:	e8 07 27 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f095:	48 89 c7	movq	%rax, %rdi
10003f098:	e8 17 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f09d:	0f 0b	ud2
10003f09f:	55	pushq	%rbp
10003f0a0:	48 89 e5	movq	%rsp, %rbp
10003f0a3:	48 8d 3d 1e 43 00 00	leaq	17182(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f0aa:	e8 05 27 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f0af:	0f 0b	ud2
10003f0b1:	55	pushq	%rbp
10003f0b2:	48 89 e5	movq	%rsp, %rbp
10003f0b5:	48 8d 3d 37 43 00 00	leaq	17207(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f0bc:	e8 f3 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f0c1:	0f 0b	ud2
10003f0c3:	55	pushq	%rbp
10003f0c4:	48 89 e5	movq	%rsp, %rbp
10003f0c7:	31 ff	xorl	%edi, %edi
10003f0c9:	e8 ce 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f0ce:	48 89 c7	movq	%rax, %rdi
10003f0d1:	e8 de 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f0d6:	0f 0b	ud2
10003f0d8:	55	pushq	%rbp
10003f0d9:	48 89 e5	movq	%rsp, %rbp
10003f0dc:	31 ff	xorl	%edi, %edi
10003f0de:	e8 b9 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f0e3:	48 89 c7	movq	%rax, %rdi
10003f0e6:	e8 c9 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f0eb:	0f 0b	ud2
10003f0ed:	55	pushq	%rbp
10003f0ee:	48 89 e5	movq	%rsp, %rbp
10003f0f1:	31 ff	xorl	%edi, %edi
10003f0f3:	e8 a4 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f0f8:	48 89 c7	movq	%rax, %rdi
10003f0fb:	e8 b4 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f100:	0f 0b	ud2
10003f102:	55	pushq	%rbp
10003f103:	48 89 e5	movq	%rsp, %rbp
10003f106:	31 ff	xorl	%edi, %edi
10003f108:	e8 8f 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f10d:	48 89 c7	movq	%rax, %rdi
10003f110:	e8 9f 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f115:	0f 0b	ud2
10003f117:	55	pushq	%rbp
10003f118:	48 89 e5	movq	%rsp, %rbp
10003f11b:	31 ff	xorl	%edi, %edi
10003f11d:	e8 7a 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f122:	48 89 c7	movq	%rax, %rdi
10003f125:	e8 8a 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f12a:	0f 0b	ud2
10003f12c:	55	pushq	%rbp
10003f12d:	48 89 e5	movq	%rsp, %rbp
10003f130:	31 ff	xorl	%edi, %edi
10003f132:	e8 65 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f137:	48 89 c7	movq	%rax, %rdi
10003f13a:	e8 75 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f13f:	0f 0b	ud2
10003f141:	55	pushq	%rbp
10003f142:	48 89 e5	movq	%rsp, %rbp
10003f145:	31 ff	xorl	%edi, %edi
10003f147:	e8 50 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f14c:	48 89 c7	movq	%rax, %rdi
10003f14f:	e8 60 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f154:	0f 0b	ud2
10003f156:	55	pushq	%rbp
10003f157:	48 89 e5	movq	%rsp, %rbp
10003f15a:	31 ff	xorl	%edi, %edi
10003f15c:	e8 3b 26 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f161:	48 89 c7	movq	%rax, %rdi
10003f164:	e8 4b 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f169:	0f 0b	ud2
10003f16b:	55	pushq	%rbp
10003f16c:	48 89 e5	movq	%rsp, %rbp
10003f16f:	48 8d 3d 52 42 00 00	leaq	16978(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f176:	e8 39 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f17b:	0f 0b	ud2
10003f17d:	55	pushq	%rbp
10003f17e:	48 89 e5	movq	%rsp, %rbp
10003f181:	48 8d 3d 6b 42 00 00	leaq	17003(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f188:	e8 27 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f18d:	0f 0b	ud2
10003f18f:	55	pushq	%rbp
10003f190:	48 89 e5	movq	%rsp, %rbp
10003f193:	48 8d 3d 2e 42 00 00	leaq	16942(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f19a:	e8 15 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f19f:	0f 0b	ud2
10003f1a1:	55	pushq	%rbp
10003f1a2:	48 89 e5	movq	%rsp, %rbp
10003f1a5:	48 8d 3d 47 42 00 00	leaq	16967(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f1ac:	e8 03 26 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f1b1:	0f 0b	ud2
10003f1b3:	55	pushq	%rbp
10003f1b4:	48 89 e5	movq	%rsp, %rbp
10003f1b7:	48 8d 3d 0a 42 00 00	leaq	16906(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f1be:	e8 f1 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f1c3:	0f 0b	ud2
10003f1c5:	55	pushq	%rbp
10003f1c6:	48 89 e5	movq	%rsp, %rbp
10003f1c9:	48 8d 3d 23 42 00 00	leaq	16931(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f1d0:	e8 df 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f1d5:	0f 0b	ud2
10003f1d7:	55	pushq	%rbp
10003f1d8:	48 89 e5	movq	%rsp, %rbp
10003f1db:	48 8d 3d e6 41 00 00	leaq	16870(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f1e2:	e8 cd 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f1e7:	0f 0b	ud2
10003f1e9:	55	pushq	%rbp
10003f1ea:	48 89 e5	movq	%rsp, %rbp
10003f1ed:	48 8d 3d ff 41 00 00	leaq	16895(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f1f4:	e8 bb 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f1f9:	0f 0b	ud2
10003f1fb:	55	pushq	%rbp
10003f1fc:	48 89 e5	movq	%rsp, %rbp
10003f1ff:	48 8d 3d c2 41 00 00	leaq	16834(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f206:	e8 a9 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f20b:	0f 0b	ud2
10003f20d:	55	pushq	%rbp
10003f20e:	48 89 e5	movq	%rsp, %rbp
10003f211:	48 8d 3d db 41 00 00	leaq	16859(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f218:	e8 97 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f21d:	0f 0b	ud2
10003f21f:	55	pushq	%rbp
10003f220:	48 89 e5	movq	%rsp, %rbp
10003f223:	e8 38 25 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f228:	48 63 38	movslq	(%rax), %rdi
10003f22b:	e8 6c 25 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f230:	48 89 c7	movq	%rax, %rdi
10003f233:	e8 7c 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f238:	0f 0b	ud2
10003f23a:	55	pushq	%rbp
10003f23b:	48 89 e5	movq	%rsp, %rbp
10003f23e:	e8 1d 25 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f243:	48 63 38	movslq	(%rax), %rdi
10003f246:	e8 51 25 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f24b:	48 89 c7	movq	%rax, %rdi
10003f24e:	e8 61 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f253:	0f 0b	ud2
10003f255:	55	pushq	%rbp
10003f256:	48 89 e5	movq	%rsp, %rbp
10003f259:	31 ff	xorl	%edi, %edi
10003f25b:	e8 3c 25 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f260:	48 89 c7	movq	%rax, %rdi
10003f263:	e8 4c 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f268:	0f 0b	ud2
10003f26a:	55	pushq	%rbp
10003f26b:	48 89 e5	movq	%rsp, %rbp
10003f26e:	e8 ed 24 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f273:	48 63 38	movslq	(%rax), %rdi
10003f276:	e8 27 25 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003f27b:	5d	popq	%rbp
10003f27c:	c3	retq
10003f27d:	55	pushq	%rbp
10003f27e:	48 89 e5	movq	%rsp, %rbp
10003f281:	e8 da 24 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f286:	48 63 38	movslq	(%rax), %rdi
10003f289:	e8 14 25 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003f28e:	5d	popq	%rbp
10003f28f:	c3	retq
10003f290:	55	pushq	%rbp
10003f291:	48 89 e5	movq	%rsp, %rbp
10003f294:	48 8d 3d 2d 41 00 00	leaq	16685(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f29b:	e8 14 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f2a0:	0f 0b	ud2
10003f2a2:	55	pushq	%rbp
10003f2a3:	48 89 e5	movq	%rsp, %rbp
10003f2a6:	48 8d 3d 46 41 00 00	leaq	16710(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f2ad:	e8 02 25 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f2b2:	0f 0b	ud2
10003f2b4:	55	pushq	%rbp
10003f2b5:	48 89 e5	movq	%rsp, %rbp
10003f2b8:	48 8d 3d 09 41 00 00	leaq	16649(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f2bf:	e8 f0 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f2c4:	0f 0b	ud2
10003f2c6:	55	pushq	%rbp
10003f2c7:	48 89 e5	movq	%rsp, %rbp
10003f2ca:	48 8d 3d 22 41 00 00	leaq	16674(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f2d1:	e8 de 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f2d6:	0f 0b	ud2
10003f2d8:	55	pushq	%rbp
10003f2d9:	48 89 e5	movq	%rsp, %rbp
10003f2dc:	31 ff	xorl	%edi, %edi
10003f2de:	e8 b9 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f2e3:	48 89 c7	movq	%rax, %rdi
10003f2e6:	e8 c9 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f2eb:	0f 0b	ud2
10003f2ed:	55	pushq	%rbp
10003f2ee:	48 89 e5	movq	%rsp, %rbp
10003f2f1:	31 ff	xorl	%edi, %edi
10003f2f3:	e8 a4 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f2f8:	48 89 c7	movq	%rax, %rdi
10003f2fb:	e8 b4 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f300:	0f 0b	ud2
10003f302:	55	pushq	%rbp
10003f303:	48 89 e5	movq	%rsp, %rbp
10003f306:	e8 55 24 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f30b:	48 63 38	movslq	(%rax), %rdi
10003f30e:	e8 8f 24 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003f313:	5d	popq	%rbp
10003f314:	c3	retq
10003f315:	55	pushq	%rbp
10003f316:	48 89 e5	movq	%rsp, %rbp
10003f319:	31 ff	xorl	%edi, %edi
10003f31b:	e8 7c 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f320:	48 89 c7	movq	%rax, %rdi
10003f323:	e8 8c 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f328:	0f 0b	ud2
10003f32a:	55	pushq	%rbp
10003f32b:	48 89 e5	movq	%rsp, %rbp
10003f32e:	31 ff	xorl	%edi, %edi
10003f330:	e8 67 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f335:	48 89 c7	movq	%rax, %rdi
10003f338:	e8 77 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f33d:	0f 0b	ud2
10003f33f:	55	pushq	%rbp
10003f340:	48 89 e5	movq	%rsp, %rbp
10003f343:	31 ff	xorl	%edi, %edi
10003f345:	e8 52 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f34a:	48 89 c7	movq	%rax, %rdi
10003f34d:	e8 62 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f352:	0f 0b	ud2
10003f354:	55	pushq	%rbp
10003f355:	48 89 e5	movq	%rsp, %rbp
10003f358:	31 ff	xorl	%edi, %edi
10003f35a:	e8 3d 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f35f:	48 89 c7	movq	%rax, %rdi
10003f362:	e8 4d 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f367:	0f 0b	ud2
10003f369:	55	pushq	%rbp
10003f36a:	48 89 e5	movq	%rsp, %rbp
10003f36d:	48 8d 3d 54 40 00 00	leaq	16468(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f374:	e8 3b 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f379:	0f 0b	ud2
10003f37b:	55	pushq	%rbp
10003f37c:	48 89 e5	movq	%rsp, %rbp
10003f37f:	48 8d 3d 6d 40 00 00	leaq	16493(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f386:	e8 29 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f38b:	0f 0b	ud2
10003f38d:	55	pushq	%rbp
10003f38e:	48 89 e5	movq	%rsp, %rbp
10003f391:	31 ff	xorl	%edi, %edi
10003f393:	e8 04 24 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f398:	48 89 c7	movq	%rax, %rdi
10003f39b:	e8 14 24 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f3a0:	0f 0b	ud2
10003f3a2:	55	pushq	%rbp
10003f3a3:	48 89 e5	movq	%rsp, %rbp
10003f3a6:	41 56	pushq	%r14
10003f3a8:	53	pushq	%rbx
10003f3a9:	49 89 f6	movq	%rsi, %r14
10003f3ac:	83 e7 01	andl	$1, %edi
10003f3af:	e8 ee 23 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003f3b4:	e8 a7 23 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f3b9:	8b 18	movl	(%rax), %ebx
10003f3bb:	e8 a0 23 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f3c0:	8b 38	movl	(%rax), %edi
10003f3c2:	e8 47 2d 00 00	callq	0x10004210e ## symbol stub for: _xpc_strerror
10003f3c7:	48 8d 35 af 8d 00 00	leaq	36271(%rip), %rsi ## literal pool for: "Failed to set %s: %d - %s"
10003f3ce:	6a 04	pushq	$4
10003f3d0:	5f	popq	%rdi
10003f3d1:	4c 89 f2	movq	%r14, %rdx
10003f3d4:	89 d9	movl	%ebx, %ecx
10003f3d6:	49 89 c0	movq	%rax, %r8
10003f3d9:	31 c0	xorl	%eax, %eax
10003f3db:	e8 e8 61 ff ff	callq	0x1000355c8
10003f3e0:	5b	popq	%rbx
10003f3e1:	41 5e	popq	%r14
10003f3e3:	5d	popq	%rbp
10003f3e4:	c3	retq
10003f3e5:	55	pushq	%rbp
10003f3e6:	48 89 e5	movq	%rsp, %rbp
10003f3e9:	48 8d 3d d8 3f 00 00	leaq	16344(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f3f0:	e8 bf 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f3f5:	0f 0b	ud2
10003f3f7:	55	pushq	%rbp
10003f3f8:	48 89 e5	movq	%rsp, %rbp
10003f3fb:	48 8d 3d f1 3f 00 00	leaq	16369(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f402:	e8 ad 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f407:	0f 0b	ud2
10003f409:	55	pushq	%rbp
10003f40a:	48 89 e5	movq	%rsp, %rbp
10003f40d:	31 ff	xorl	%edi, %edi
10003f40f:	e8 88 23 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f414:	48 89 c7	movq	%rax, %rdi
10003f417:	e8 98 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f41c:	0f 0b	ud2
10003f41e:	55	pushq	%rbp
10003f41f:	48 89 e5	movq	%rsp, %rbp
10003f422:	31 ff	xorl	%edi, %edi
10003f424:	e8 73 23 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f429:	48 89 c7	movq	%rax, %rdi
10003f42c:	e8 83 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f431:	0f 0b	ud2
10003f433:	55	pushq	%rbp
10003f434:	48 89 e5	movq	%rsp, %rbp
10003f437:	31 ff	xorl	%edi, %edi
10003f439:	e8 5e 23 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f43e:	48 89 c7	movq	%rax, %rdi
10003f441:	e8 6e 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f446:	0f 0b	ud2
10003f448:	55	pushq	%rbp
10003f449:	48 89 e5	movq	%rsp, %rbp
10003f44c:	48 8d 3d 75 3f 00 00	leaq	16245(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f453:	e8 5c 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f458:	0f 0b	ud2
10003f45a:	55	pushq	%rbp
10003f45b:	48 89 e5	movq	%rsp, %rbp
10003f45e:	48 8d 3d 8e 3f 00 00	leaq	16270(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f465:	e8 4a 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f46a:	0f 0b	ud2
10003f46c:	55	pushq	%rbp
10003f46d:	48 89 e5	movq	%rsp, %rbp
10003f470:	31 ff	xorl	%edi, %edi
10003f472:	e8 25 23 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f477:	48 89 c7	movq	%rax, %rdi
10003f47a:	e8 35 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f47f:	0f 0b	ud2
10003f481:	55	pushq	%rbp
10003f482:	48 89 e5	movq	%rsp, %rbp
10003f485:	31 ff	xorl	%edi, %edi
10003f487:	e8 10 23 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f48c:	48 89 c7	movq	%rax, %rdi
10003f48f:	e8 20 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f494:	0f 0b	ud2
10003f496:	55	pushq	%rbp
10003f497:	48 89 e5	movq	%rsp, %rbp
10003f49a:	31 ff	xorl	%edi, %edi
10003f49c:	e8 fb 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f4a1:	48 89 c7	movq	%rax, %rdi
10003f4a4:	e8 0b 23 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f4a9:	0f 0b	ud2
10003f4ab:	55	pushq	%rbp
10003f4ac:	48 89 e5	movq	%rsp, %rbp
10003f4af:	31 ff	xorl	%edi, %edi
10003f4b1:	e8 e6 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f4b6:	48 89 c7	movq	%rax, %rdi
10003f4b9:	e8 f6 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f4be:	0f 0b	ud2
10003f4c0:	55	pushq	%rbp
10003f4c1:	48 89 e5	movq	%rsp, %rbp
10003f4c4:	31 ff	xorl	%edi, %edi
10003f4c6:	e8 d1 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f4cb:	48 89 c7	movq	%rax, %rdi
10003f4ce:	e8 e1 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f4d3:	0f 0b	ud2
10003f4d5:	55	pushq	%rbp
10003f4d6:	48 89 e5	movq	%rsp, %rbp
10003f4d9:	31 ff	xorl	%edi, %edi
10003f4db:	e8 bc 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f4e0:	48 89 c7	movq	%rax, %rdi
10003f4e3:	e8 cc 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f4e8:	0f 0b	ud2
10003f4ea:	55	pushq	%rbp
10003f4eb:	48 89 e5	movq	%rsp, %rbp
10003f4ee:	31 ff	xorl	%edi, %edi
10003f4f0:	e8 a7 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f4f5:	48 89 c7	movq	%rax, %rdi
10003f4f8:	e8 b7 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f4fd:	0f 0b	ud2
10003f4ff:	55	pushq	%rbp
10003f500:	48 89 e5	movq	%rsp, %rbp
10003f503:	31 ff	xorl	%edi, %edi
10003f505:	e8 92 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f50a:	48 89 c7	movq	%rax, %rdi
10003f50d:	e8 a2 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f512:	0f 0b	ud2
10003f514:	55	pushq	%rbp
10003f515:	48 89 e5	movq	%rsp, %rbp
10003f518:	31 ff	xorl	%edi, %edi
10003f51a:	e8 7d 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f51f:	48 89 c7	movq	%rax, %rdi
10003f522:	e8 8d 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f527:	0f 0b	ud2
10003f529:	55	pushq	%rbp
10003f52a:	48 89 e5	movq	%rsp, %rbp
10003f52d:	31 ff	xorl	%edi, %edi
10003f52f:	e8 68 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f534:	48 89 c7	movq	%rax, %rdi
10003f537:	e8 78 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f53c:	0f 0b	ud2
10003f53e:	55	pushq	%rbp
10003f53f:	48 89 e5	movq	%rsp, %rbp
10003f542:	48 8d 3d 7f 3e 00 00	leaq	15999(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f549:	e8 66 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f54e:	0f 0b	ud2
10003f550:	55	pushq	%rbp
10003f551:	48 89 e5	movq	%rsp, %rbp
10003f554:	48 8d 3d 98 3e 00 00	leaq	16024(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f55b:	e8 54 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f560:	0f 0b	ud2
10003f562:	55	pushq	%rbp
10003f563:	48 89 e5	movq	%rsp, %rbp
10003f566:	48 63 ff	movslq	%edi, %rdi
10003f569:	e8 2e 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f56e:	48 89 c7	movq	%rax, %rdi
10003f571:	e8 3e 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f576:	0f 0b	ud2
10003f578:	55	pushq	%rbp
10003f579:	48 89 e5	movq	%rsp, %rbp
10003f57c:	48 63 ff	movslq	%edi, %rdi
10003f57f:	e8 18 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f584:	48 89 c7	movq	%rax, %rdi
10003f587:	e8 28 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f58c:	0f 0b	ud2
10003f58e:	55	pushq	%rbp
10003f58f:	48 89 e5	movq	%rsp, %rbp
10003f592:	48 63 ff	movslq	%edi, %rdi
10003f595:	e8 02 22 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f59a:	48 89 c7	movq	%rax, %rdi
10003f59d:	e8 12 22 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f5a2:	0f 0b	ud2
10003f5a4:	55	pushq	%rbp
10003f5a5:	48 89 e5	movq	%rsp, %rbp
10003f5a8:	48 63 ff	movslq	%edi, %rdi
10003f5ab:	e8 ec 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f5b0:	48 89 c7	movq	%rax, %rdi
10003f5b3:	e8 fc 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f5b8:	0f 0b	ud2
10003f5ba:	55	pushq	%rbp
10003f5bb:	48 89 e5	movq	%rsp, %rbp
10003f5be:	48 63 ff	movslq	%edi, %rdi
10003f5c1:	e8 d6 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f5c6:	48 89 c7	movq	%rax, %rdi
10003f5c9:	e8 e6 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f5ce:	0f 0b	ud2
10003f5d0:	55	pushq	%rbp
10003f5d1:	48 89 e5	movq	%rsp, %rbp
10003f5d4:	48 63 ff	movslq	%edi, %rdi
10003f5d7:	e8 c0 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f5dc:	48 89 c7	movq	%rax, %rdi
10003f5df:	e8 d0 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f5e4:	0f 0b	ud2
10003f5e6:	55	pushq	%rbp
10003f5e7:	48 89 e5	movq	%rsp, %rbp
10003f5ea:	48 63 ff	movslq	%edi, %rdi
10003f5ed:	e8 aa 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f5f2:	48 89 c7	movq	%rax, %rdi
10003f5f5:	e8 ba 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f5fa:	0f 0b	ud2
10003f5fc:	55	pushq	%rbp
10003f5fd:	48 89 e5	movq	%rsp, %rbp
10003f600:	48 63 ff	movslq	%edi, %rdi
10003f603:	e8 94 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f608:	48 89 c7	movq	%rax, %rdi
10003f60b:	e8 a4 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f610:	0f 0b	ud2
10003f612:	90	nop
10003f613:	90	nop
10003f614:	55	pushq	%rbp
10003f615:	48 89 e5	movq	%rsp, %rbp
10003f618:	48 8d 3d a9 3d 00 00	leaq	15785(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f61f:	e8 90 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f624:	0f 0b	ud2
10003f626:	55	pushq	%rbp
10003f627:	48 89 e5	movq	%rsp, %rbp
10003f62a:	48 8d 3d c2 3d 00 00	leaq	15810(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f631:	e8 7e 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f636:	0f 0b	ud2
10003f638:	55	pushq	%rbp
10003f639:	48 89 e5	movq	%rsp, %rbp
10003f63c:	31 ff	xorl	%edi, %edi
10003f63e:	e8 59 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f643:	48 89 c7	movq	%rax, %rdi
10003f646:	e8 69 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f64b:	0f 0b	ud2
10003f64d:	55	pushq	%rbp
10003f64e:	48 89 e5	movq	%rsp, %rbp
10003f651:	09 f7	orl	%esi, %edi
10003f653:	83 e7 01	andl	$1, %edi
10003f656:	e8 41 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f65b:	48 89 c7	movq	%rax, %rdi
10003f65e:	e8 51 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f663:	0f 0b	ud2
10003f665:	55	pushq	%rbp
10003f666:	48 89 e5	movq	%rsp, %rbp
10003f669:	31 ff	xorl	%edi, %edi
10003f66b:	e8 2c 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f670:	48 89 c7	movq	%rax, %rdi
10003f673:	e8 3c 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f678:	0f 0b	ud2
10003f67a:	55	pushq	%rbp
10003f67b:	48 89 e5	movq	%rsp, %rbp
10003f67e:	31 ff	xorl	%edi, %edi
10003f680:	e8 17 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f685:	48 89 c7	movq	%rax, %rdi
10003f688:	e8 27 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f68d:	0f 0b	ud2
10003f68f:	55	pushq	%rbp
10003f690:	48 89 e5	movq	%rsp, %rbp
10003f693:	31 ff	xorl	%edi, %edi
10003f695:	e8 02 21 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f69a:	48 89 c7	movq	%rax, %rdi
10003f69d:	e8 12 21 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f6a2:	0f 0b	ud2
10003f6a4:	55	pushq	%rbp
10003f6a5:	48 89 e5	movq	%rsp, %rbp
10003f6a8:	e8 b3 20 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f6ad:	48 63 38	movslq	(%rax), %rdi
10003f6b0:	e8 ed 20 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003f6b5:	5d	popq	%rbp
10003f6b6:	c3	retq
10003f6b7:	55	pushq	%rbp
10003f6b8:	48 89 e5	movq	%rsp, %rbp
10003f6bb:	31 ff	xorl	%edi, %edi
10003f6bd:	e8 da 20 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f6c2:	48 89 c7	movq	%rax, %rdi
10003f6c5:	e8 ea 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f6ca:	0f 0b	ud2
10003f6cc:	55	pushq	%rbp
10003f6cd:	48 89 e5	movq	%rsp, %rbp
10003f6d0:	e8 8b 20 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f6d5:	48 63 38	movslq	(%rax), %rdi
10003f6d8:	e8 bf 20 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f6dd:	48 89 c7	movq	%rax, %rdi
10003f6e0:	e8 cf 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f6e5:	0f 0b	ud2
10003f6e7:	55	pushq	%rbp
10003f6e8:	48 89 e5	movq	%rsp, %rbp
10003f6eb:	48 8d 3d d6 3c 00 00	leaq	15574(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f6f2:	e8 bd 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f6f7:	0f 0b	ud2
10003f6f9:	55	pushq	%rbp
10003f6fa:	48 89 e5	movq	%rsp, %rbp
10003f6fd:	48 8d 3d ef 3c 00 00	leaq	15599(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f704:	e8 ab 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f709:	0f 0b	ud2
10003f70b:	55	pushq	%rbp
10003f70c:	48 89 e5	movq	%rsp, %rbp
10003f70f:	48 8d 3d b2 3c 00 00	leaq	15538(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f716:	e8 99 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f71b:	0f 0b	ud2
10003f71d:	55	pushq	%rbp
10003f71e:	48 89 e5	movq	%rsp, %rbp
10003f721:	48 8d 3d cb 3c 00 00	leaq	15563(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f728:	e8 87 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f72d:	0f 0b	ud2
10003f72f:	55	pushq	%rbp
10003f730:	48 89 e5	movq	%rsp, %rbp
10003f733:	48 8d 3d 8e 3c 00 00	leaq	15502(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f73a:	e8 75 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f73f:	0f 0b	ud2
10003f741:	55	pushq	%rbp
10003f742:	48 89 e5	movq	%rsp, %rbp
10003f745:	48 8d 3d a7 3c 00 00	leaq	15527(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f74c:	e8 63 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f751:	0f 0b	ud2
10003f753:	55	pushq	%rbp
10003f754:	48 89 e5	movq	%rsp, %rbp
10003f757:	e8 04 20 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f75c:	48 63 38	movslq	(%rax), %rdi
10003f75f:	e8 38 20 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f764:	48 89 c7	movq	%rax, %rdi
10003f767:	e8 48 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f76c:	0f 0b	ud2
10003f76e:	55	pushq	%rbp
10003f76f:	48 89 e5	movq	%rsp, %rbp
10003f772:	e8 e9 1f 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f777:	48 63 38	movslq	(%rax), %rdi
10003f77a:	e8 1d 20 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f77f:	48 89 c7	movq	%rax, %rdi
10003f782:	e8 2d 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f787:	0f 0b	ud2
10003f789:	55	pushq	%rbp
10003f78a:	48 89 e5	movq	%rsp, %rbp
10003f78d:	e8 ce 1f 00 00	callq	0x100041760 ## symbol stub for: ___error
10003f792:	48 63 38	movslq	(%rax), %rdi
10003f795:	e8 02 20 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f79a:	48 89 c7	movq	%rax, %rdi
10003f79d:	e8 12 20 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f7a2:	0f 0b	ud2
10003f7a4:	55	pushq	%rbp
10003f7a5:	48 89 e5	movq	%rsp, %rbp
10003f7a8:	31 ff	xorl	%edi, %edi
10003f7aa:	e8 ed 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f7af:	48 89 c7	movq	%rax, %rdi
10003f7b2:	e8 fd 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f7b7:	0f 0b	ud2
10003f7b9:	55	pushq	%rbp
10003f7ba:	48 89 e5	movq	%rsp, %rbp
10003f7bd:	48 63 ff	movslq	%edi, %rdi
10003f7c0:	e8 d7 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f7c5:	48 89 c7	movq	%rax, %rdi
10003f7c8:	e8 e7 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f7cd:	0f 0b	ud2
10003f7cf:	55	pushq	%rbp
10003f7d0:	48 89 e5	movq	%rsp, %rbp
10003f7d3:	48 63 ff	movslq	%edi, %rdi
10003f7d6:	e8 c1 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f7db:	48 89 c7	movq	%rax, %rdi
10003f7de:	e8 d1 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f7e3:	0f 0b	ud2
10003f7e5:	55	pushq	%rbp
10003f7e6:	48 89 e5	movq	%rsp, %rbp
10003f7e9:	48 63 ff	movslq	%edi, %rdi
10003f7ec:	e8 ab 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f7f1:	48 89 c7	movq	%rax, %rdi
10003f7f4:	e8 bb 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f7f9:	0f 0b	ud2
10003f7fb:	55	pushq	%rbp
10003f7fc:	48 89 e5	movq	%rsp, %rbp
10003f7ff:	48 8d 3d c2 3b 00 00	leaq	15298(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f806:	e8 a9 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f80b:	0f 0b	ud2
10003f80d:	55	pushq	%rbp
10003f80e:	48 89 e5	movq	%rsp, %rbp
10003f811:	48 8d 3d db 3b 00 00	leaq	15323(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f818:	e8 97 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f81d:	0f 0b	ud2
10003f81f:	55	pushq	%rbp
10003f820:	48 89 e5	movq	%rsp, %rbp
10003f823:	48 63 ff	movslq	%edi, %rdi
10003f826:	e8 71 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f82b:	48 89 c7	movq	%rax, %rdi
10003f82e:	e8 81 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f833:	0f 0b	ud2
10003f835:	90	nop
10003f836:	90	nop
10003f837:	55	pushq	%rbp
10003f838:	48 89 e5	movq	%rsp, %rbp
10003f83b:	48 8d 3d 86 3b 00 00	leaq	15238(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003f842:	e8 6d 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f847:	0f 0b	ud2
10003f849:	55	pushq	%rbp
10003f84a:	48 89 e5	movq	%rsp, %rbp
10003f84d:	48 8d 3d 9f 3b 00 00	leaq	15263(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003f854:	e8 5b 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f859:	0f 0b	ud2
10003f85b:	55	pushq	%rbp
10003f85c:	48 89 e5	movq	%rsp, %rbp
10003f85f:	40 80 f7 01	xorb	$1, %dil
10003f863:	40 0f b6 ff	movzbl	%dil, %edi
10003f867:	e8 30 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f86c:	48 89 c7	movq	%rax, %rdi
10003f86f:	e8 40 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f874:	0f 0b	ud2
10003f876:	55	pushq	%rbp
10003f877:	48 89 e5	movq	%rsp, %rbp
10003f87a:	40 80 f7 01	xorb	$1, %dil
10003f87e:	40 0f b6 ff	movzbl	%dil, %edi
10003f882:	e8 15 1f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f887:	48 89 c7	movq	%rax, %rdi
10003f88a:	e8 25 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f88f:	0f 0b	ud2
10003f891:	55	pushq	%rbp
10003f892:	48 89 e5	movq	%rsp, %rbp
10003f895:	40 80 f7 01	xorb	$1, %dil
10003f899:	40 0f b6 ff	movzbl	%dil, %edi
10003f89d:	e8 fa 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f8a2:	48 89 c7	movq	%rax, %rdi
10003f8a5:	e8 0a 1f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f8aa:	0f 0b	ud2
10003f8ac:	55	pushq	%rbp
10003f8ad:	48 89 e5	movq	%rsp, %rbp
10003f8b0:	31 ff	xorl	%edi, %edi
10003f8b2:	e8 e5 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f8b7:	48 89 c7	movq	%rax, %rdi
10003f8ba:	e8 f5 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f8bf:	0f 0b	ud2
10003f8c1:	55	pushq	%rbp
10003f8c2:	48 89 e5	movq	%rsp, %rbp
10003f8c5:	31 ff	xorl	%edi, %edi
10003f8c7:	e8 d0 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f8cc:	48 89 c7	movq	%rax, %rdi
10003f8cf:	e8 e0 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f8d4:	0f 0b	ud2
10003f8d6:	55	pushq	%rbp
10003f8d7:	48 89 e5	movq	%rsp, %rbp
10003f8da:	48 8d 3d fc 93 00 00	leaq	37884(%rip), %rdi ## literal pool for: "invalid domain io type"
10003f8e1:	e8 ce 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f8e6:	0f 0b	ud2
10003f8e8:	55	pushq	%rbp
10003f8e9:	48 89 e5	movq	%rsp, %rbp
10003f8ec:	40 80 f7 01	xorb	$1, %dil
10003f8f0:	40 0f b6 ff	movzbl	%dil, %edi
10003f8f4:	e8 a3 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f8f9:	48 89 c7	movq	%rax, %rdi
10003f8fc:	e8 b3 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f901:	0f 0b	ud2
10003f903:	55	pushq	%rbp
10003f904:	48 89 e5	movq	%rsp, %rbp
10003f907:	31 ff	xorl	%edi, %edi
10003f909:	e8 8e 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f90e:	48 89 c7	movq	%rax, %rdi
10003f911:	e8 9e 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f916:	0f 0b	ud2
10003f918:	55	pushq	%rbp
10003f919:	48 89 e5	movq	%rsp, %rbp
10003f91c:	40 80 f7 01	xorb	$1, %dil
10003f920:	40 0f b6 ff	movzbl	%dil, %edi
10003f924:	e8 73 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f929:	48 89 c7	movq	%rax, %rdi
10003f92c:	e8 83 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f931:	0f 0b	ud2
10003f933:	55	pushq	%rbp
10003f934:	48 89 e5	movq	%rsp, %rbp
10003f937:	40 80 f7 01	xorb	$1, %dil
10003f93b:	40 0f b6 ff	movzbl	%dil, %edi
10003f93f:	e8 58 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f944:	48 89 c7	movq	%rax, %rdi
10003f947:	e8 68 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f94c:	0f 0b	ud2
10003f94e:	55	pushq	%rbp
10003f94f:	48 89 e5	movq	%rsp, %rbp
10003f952:	48 8d 3d a1 96 00 00	leaq	38561(%rip), %rdi ## literal pool for: "invalid xpaths type"
10003f959:	e8 56 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f95e:	0f 0b	ud2
10003f960:	55	pushq	%rbp
10003f961:	48 89 e5	movq	%rsp, %rbp
10003f964:	31 ff	xorl	%edi, %edi
10003f966:	e8 31 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f96b:	48 89 c7	movq	%rax, %rdi
10003f96e:	e8 41 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f973:	0f 0b	ud2
10003f975:	55	pushq	%rbp
10003f976:	48 89 e5	movq	%rsp, %rbp
10003f979:	31 ff	xorl	%edi, %edi
10003f97b:	e8 1c 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f980:	48 89 c7	movq	%rax, %rdi
10003f983:	e8 2c 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f988:	0f 0b	ud2
10003f98a:	55	pushq	%rbp
10003f98b:	48 89 e5	movq	%rsp, %rbp
10003f98e:	40 80 f7 01	xorb	$1, %dil
10003f992:	40 0f b6 ff	movzbl	%dil, %edi
10003f996:	e8 01 1e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f99b:	48 89 c7	movq	%rax, %rdi
10003f99e:	e8 11 1e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f9a3:	0f 0b	ud2
10003f9a5:	55	pushq	%rbp
10003f9a6:	48 89 e5	movq	%rsp, %rbp
10003f9a9:	31 ff	xorl	%edi, %edi
10003f9ab:	e8 ec 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f9b0:	48 89 c7	movq	%rax, %rdi
10003f9b3:	e8 fc 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f9b8:	0f 0b	ud2
10003f9ba:	55	pushq	%rbp
10003f9bb:	48 89 e5	movq	%rsp, %rbp
10003f9be:	31 ff	xorl	%edi, %edi
10003f9c0:	e8 d7 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f9c5:	48 89 c7	movq	%rax, %rdi
10003f9c8:	e8 e7 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f9cd:	0f 0b	ud2
10003f9cf:	55	pushq	%rbp
10003f9d0:	48 89 e5	movq	%rsp, %rbp
10003f9d3:	31 ff	xorl	%edi, %edi
10003f9d5:	e8 c2 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f9da:	48 89 c7	movq	%rax, %rdi
10003f9dd:	e8 d2 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f9e2:	0f 0b	ud2
10003f9e4:	55	pushq	%rbp
10003f9e5:	48 89 e5	movq	%rsp, %rbp
10003f9e8:	31 ff	xorl	%edi, %edi
10003f9ea:	e8 ad 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003f9ef:	48 89 c7	movq	%rax, %rdi
10003f9f2:	e8 bd 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003f9f7:	0f 0b	ud2
10003f9f9:	55	pushq	%rbp
10003f9fa:	48 89 e5	movq	%rsp, %rbp
10003f9fd:	31 ff	xorl	%edi, %edi
10003f9ff:	e8 98 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa04:	48 89 c7	movq	%rax, %rdi
10003fa07:	e8 a8 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa0c:	0f 0b	ud2
10003fa0e:	55	pushq	%rbp
10003fa0f:	48 89 e5	movq	%rsp, %rbp
10003fa12:	31 ff	xorl	%edi, %edi
10003fa14:	e8 83 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa19:	48 89 c7	movq	%rax, %rdi
10003fa1c:	e8 93 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa21:	0f 0b	ud2
10003fa23:	55	pushq	%rbp
10003fa24:	48 89 e5	movq	%rsp, %rbp
10003fa27:	31 ff	xorl	%edi, %edi
10003fa29:	e8 6e 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa2e:	48 89 c7	movq	%rax, %rdi
10003fa31:	e8 7e 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa36:	0f 0b	ud2
10003fa38:	55	pushq	%rbp
10003fa39:	48 89 e5	movq	%rsp, %rbp
10003fa3c:	31 ff	xorl	%edi, %edi
10003fa3e:	e8 59 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa43:	48 89 c7	movq	%rax, %rdi
10003fa46:	e8 69 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa4b:	0f 0b	ud2
10003fa4d:	55	pushq	%rbp
10003fa4e:	48 89 e5	movq	%rsp, %rbp
10003fa51:	31 ff	xorl	%edi, %edi
10003fa53:	e8 44 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa58:	48 89 c7	movq	%rax, %rdi
10003fa5b:	e8 54 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa60:	0f 0b	ud2
10003fa62:	55	pushq	%rbp
10003fa63:	48 89 e5	movq	%rsp, %rbp
10003fa66:	31 ff	xorl	%edi, %edi
10003fa68:	e8 2f 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa6d:	48 89 c7	movq	%rax, %rdi
10003fa70:	e8 3f 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa75:	0f 0b	ud2
10003fa77:	55	pushq	%rbp
10003fa78:	48 89 e5	movq	%rsp, %rbp
10003fa7b:	31 ff	xorl	%edi, %edi
10003fa7d:	e8 1a 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa82:	48 89 c7	movq	%rax, %rdi
10003fa85:	e8 2a 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa8a:	0f 0b	ud2
10003fa8c:	55	pushq	%rbp
10003fa8d:	48 89 e5	movq	%rsp, %rbp
10003fa90:	31 ff	xorl	%edi, %edi
10003fa92:	e8 05 1d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fa97:	48 89 c7	movq	%rax, %rdi
10003fa9a:	e8 15 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fa9f:	0f 0b	ud2
10003faa1:	55	pushq	%rbp
10003faa2:	48 89 e5	movq	%rsp, %rbp
10003faa5:	31 ff	xorl	%edi, %edi
10003faa7:	e8 f0 1c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003faac:	48 89 c7	movq	%rax, %rdi
10003faaf:	e8 00 1d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fab4:	0f 0b	ud2
10003fab6:	55	pushq	%rbp
10003fab7:	48 89 e5	movq	%rsp, %rbp
10003faba:	31 ff	xorl	%edi, %edi
10003fabc:	e8 db 1c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fac1:	48 89 c7	movq	%rax, %rdi
10003fac4:	e8 eb 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fac9:	0f 0b	ud2
10003facb:	55	pushq	%rbp
10003facc:	48 89 e5	movq	%rsp, %rbp
10003facf:	31 ff	xorl	%edi, %edi
10003fad1:	e8 c6 1c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fad6:	48 89 c7	movq	%rax, %rdi
10003fad9:	e8 d6 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fade:	0f 0b	ud2
10003fae0:	55	pushq	%rbp
10003fae1:	48 89 e5	movq	%rsp, %rbp
10003fae4:	48 8d 3d dd 38 00 00	leaq	14557(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003faeb:	e8 c4 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003faf0:	0f 0b	ud2
10003faf2:	55	pushq	%rbp
10003faf3:	48 89 e5	movq	%rsp, %rbp
10003faf6:	48 8d 3d f6 38 00 00	leaq	14582(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003fafd:	e8 b2 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fb02:	0f 0b	ud2
10003fb04:	55	pushq	%rbp
10003fb05:	48 89 e5	movq	%rsp, %rbp
10003fb08:	48 8d 3d b9 38 00 00	leaq	14521(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003fb0f:	e8 a0 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fb14:	0f 0b	ud2
10003fb16:	55	pushq	%rbp
10003fb17:	48 89 e5	movq	%rsp, %rbp
10003fb1a:	48 8d 3d d2 38 00 00	leaq	14546(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003fb21:	e8 8e 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fb26:	0f 0b	ud2
10003fb28:	55	pushq	%rbp
10003fb29:	48 89 e5	movq	%rsp, %rbp
10003fb2c:	31 ff	xorl	%edi, %edi
10003fb2e:	e8 69 1c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fb33:	48 89 c7	movq	%rax, %rdi
10003fb36:	e8 79 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fb3b:	0f 0b	ud2
10003fb3d:	55	pushq	%rbp
10003fb3e:	48 89 e5	movq	%rsp, %rbp
10003fb41:	e8 56 1c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003fb46:	48 89 c7	movq	%rax, %rdi
10003fb49:	e8 66 1c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003fb4e:	0f 0b	ud2
10003fb50:	55	pushq	%rbp
10003fb51:	48 89 e5	movq	%rsp, %rbp
10003fb54:	53	pushq	%rbx
10003fb55:	48 83 ec 18	subq	$24, %rsp
10003fb59:	48 89 fb	movq	%rdi, %rbx
10003fb5c:	e8 fc d1 fc ff	callq	0x10000cd5d
10003fb61:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fb65:	48 89 1f	movq	%rbx, (%rdi)
10003fb68:	48 8b 05 11 1f 02 00	movq	139025(%rip), %rax ## Objc class ref: OS_launch_array
10003fb6f:	48 89 47 08	movq	%rax, 8(%rdi)
10003fb73:	48 8b 35 6e 1e 02 00	movq	138862(%rip), %rsi ## Objc selector ref: dealloc
10003fb7a:	e8 85 20 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fb7f:	48 83 c4 18	addq	$24, %rsp
10003fb83:	5b	popq	%rbx
10003fb84:	5d	popq	%rbp
10003fb85:	c3	retq
10003fb86:	55	pushq	%rbp
10003fb87:	48 89 e5	movq	%rsp, %rbp
10003fb8a:	53	pushq	%rbx
10003fb8b:	48 83 ec 18	subq	$24, %rsp
10003fb8f:	48 89 fb	movq	%rdi, %rbx
10003fb92:	e8 64 89 ff ff	callq	0x1000384fb
10003fb97:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fb9b:	48 89 1f	movq	%rbx, (%rdi)
10003fb9e:	48 8b 05 e3 1e 02 00	movq	138979(%rip), %rax ## Objc class ref: OS_launch_dictionary
10003fba5:	48 89 47 08	movq	%rax, 8(%rdi)
10003fba9:	48 8b 35 38 1e 02 00	movq	138808(%rip), %rsi ## Objc selector ref: dealloc
10003fbb0:	e8 4f 20 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fbb5:	48 83 c4 18	addq	$24, %rsp
10003fbb9:	5b	popq	%rbx
10003fbba:	5d	popq	%rbp
10003fbbb:	c3	retq
10003fbbc:	55	pushq	%rbp
10003fbbd:	48 89 e5	movq	%rsp, %rbp
10003fbc0:	53	pushq	%rbx
10003fbc1:	48 83 ec 18	subq	$24, %rsp
10003fbc5:	48 89 fb	movq	%rdi, %rbx
10003fbc8:	e8 c7 05 fe ff	callq	0x100020194
10003fbcd:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fbd1:	48 89 1f	movq	%rbx, (%rdi)
10003fbd4:	48 8b 05 b5 1e 02 00	movq	138933(%rip), %rax ## Objc class ref: OS_launch_domain
10003fbdb:	48 89 47 08	movq	%rax, 8(%rdi)
10003fbdf:	48 8b 35 02 1e 02 00	movq	138754(%rip), %rsi ## Objc selector ref: dealloc
10003fbe6:	e8 19 20 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fbeb:	48 83 c4 18	addq	$24, %rsp
10003fbef:	5b	popq	%rbx
10003fbf0:	5d	popq	%rbp
10003fbf1:	c3	retq
10003fbf2:	55	pushq	%rbp
10003fbf3:	48 89 e5	movq	%rsp, %rbp
10003fbf6:	53	pushq	%rbx
10003fbf7:	48 83 ec 18	subq	$24, %rsp
10003fbfb:	48 89 fb	movq	%rdi, %rbx
10003fbfe:	e8 66 0a fd ff	callq	0x100010669
10003fc03:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fc07:	48 89 1f	movq	%rbx, (%rdi)
10003fc0a:	48 8b 05 87 1e 02 00	movq	138887(%rip), %rax ## Objc class ref: OS_launch_domain_aggregate_io
10003fc11:	48 89 47 08	movq	%rax, 8(%rdi)
10003fc15:	48 8b 35 cc 1d 02 00	movq	138700(%rip), %rsi ## Objc selector ref: dealloc
10003fc1c:	e8 e3 1f 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fc21:	48 83 c4 18	addq	$24, %rsp
10003fc25:	5b	popq	%rbx
10003fc26:	5d	popq	%rbp
10003fc27:	c3	retq
10003fc28:	55	pushq	%rbp
10003fc29:	48 89 e5	movq	%rsp, %rbp
10003fc2c:	53	pushq	%rbx
10003fc2d:	48 83 ec 18	subq	$24, %rsp
10003fc31:	48 89 fb	movq	%rdi, %rbx
10003fc34:	e8 8e 05 fd ff	callq	0x1000101c7
10003fc39:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fc3d:	48 89 1f	movq	%rbx, (%rdi)
10003fc40:	48 8b 05 59 1e 02 00	movq	138841(%rip), %rax ## Objc class ref: OS_launch_domain_io
10003fc47:	48 89 47 08	movq	%rax, 8(%rdi)
10003fc4b:	48 8b 35 96 1d 02 00	movq	138646(%rip), %rsi ## Objc selector ref: dealloc
10003fc52:	e8 ad 1f 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fc57:	48 83 c4 18	addq	$24, %rsp
10003fc5b:	5b	popq	%rbx
10003fc5c:	5d	popq	%rbp
10003fc5d:	c3	retq
10003fc5e:	55	pushq	%rbp
10003fc5f:	48 89 e5	movq	%rsp, %rbp
10003fc62:	53	pushq	%rbx
10003fc63:	48 83 ec 18	subq	$24, %rsp
10003fc67:	48 89 fb	movq	%rdi, %rbx
10003fc6a:	e8 21 ae ff ff	callq	0x10003aa90
10003fc6f:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fc73:	48 89 1f	movq	%rbx, (%rdi)
10003fc76:	48 8b 05 2b 1e 02 00	movq	138795(%rip), %rax ## Objc class ref: OS_launch_endpoint
10003fc7d:	48 89 47 08	movq	%rax, 8(%rdi)
10003fc81:	48 8b 35 60 1d 02 00	movq	138592(%rip), %rsi ## Objc selector ref: dealloc
10003fc88:	e8 77 1f 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fc8d:	48 83 c4 18	addq	$24, %rsp
10003fc91:	5b	popq	%rbx
10003fc92:	5d	popq	%rbp
10003fc93:	c3	retq
10003fc94:	55	pushq	%rbp
10003fc95:	48 89 e5	movq	%rsp, %rbp
10003fc98:	53	pushq	%rbx
10003fc99:	48 83 ec 18	subq	$24, %rsp
10003fc9d:	48 89 fb	movq	%rdi, %rbx
10003fca0:	e8 99 0f ff ff	callq	0x100030c3e
10003fca5:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fca9:	48 89 1f	movq	%rbx, (%rdi)
10003fcac:	48 8b 05 fd 1d 02 00	movq	138749(%rip), %rax ## Objc class ref: OS_launch_event_provider
10003fcb3:	48 89 47 08	movq	%rax, 8(%rdi)
10003fcb7:	48 8b 35 2a 1d 02 00	movq	138538(%rip), %rsi ## Objc selector ref: dealloc
10003fcbe:	e8 41 1f 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fcc3:	48 83 c4 18	addq	$24, %rsp
10003fcc7:	5b	popq	%rbx
10003fcc8:	5d	popq	%rbp
10003fcc9:	c3	retq
10003fcca:	55	pushq	%rbp
10003fccb:	48 89 e5	movq	%rsp, %rbp
10003fcce:	53	pushq	%rbx
10003fccf:	48 83 ec 18	subq	$24, %rsp
10003fcd3:	48 89 fb	movq	%rdi, %rbx
10003fcd6:	e8 92 0f ff ff	callq	0x100030c6d
10003fcdb:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fcdf:	48 89 1f	movq	%rbx, (%rdi)
10003fce2:	48 8b 05 cf 1d 02 00	movq	138703(%rip), %rax ## Objc class ref: OS_launch_event_realm
10003fce9:	48 89 47 08	movq	%rax, 8(%rdi)
10003fced:	48 8b 35 f4 1c 02 00	movq	138484(%rip), %rsi ## Objc selector ref: dealloc
10003fcf4:	e8 0b 1f 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fcf9:	48 83 c4 18	addq	$24, %rsp
10003fcfd:	5b	popq	%rbx
10003fcfe:	5d	popq	%rbp
10003fcff:	c3	retq
10003fd00:	55	pushq	%rbp
10003fd01:	48 89 e5	movq	%rsp, %rbp
10003fd04:	53	pushq	%rbx
10003fd05:	48 83 ec 18	subq	$24, %rsp
10003fd09:	48 89 fb	movq	%rdi, %rbx
10003fd0c:	e8 de 0f ff ff	callq	0x100030cef
10003fd11:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fd15:	48 89 1f	movq	%rbx, (%rdi)
10003fd18:	48 8b 05 a1 1d 02 00	movq	138657(%rip), %rax ## Objc class ref: OS_launch_event_stream
10003fd1f:	48 89 47 08	movq	%rax, 8(%rdi)
10003fd23:	48 8b 35 be 1c 02 00	movq	138430(%rip), %rsi ## Objc selector ref: dealloc
10003fd2a:	e8 d5 1e 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fd2f:	48 83 c4 18	addq	$24, %rsp
10003fd33:	5b	popq	%rbx
10003fd34:	5d	popq	%rbp
10003fd35:	c3	retq
10003fd36:	55	pushq	%rbp
10003fd37:	48 89 e5	movq	%rsp, %rbp
10003fd3a:	53	pushq	%rbx
10003fd3b:	48 83 ec 18	subq	$24, %rsp
10003fd3f:	48 89 fb	movq	%rdi, %rbx
10003fd42:	e8 ba 0f ff ff	callq	0x100030d01
10003fd47:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fd4b:	48 89 1f	movq	%rbx, (%rdi)
10003fd4e:	48 8b 05 73 1d 02 00	movq	138611(%rip), %rax ## Objc class ref: OS_launch_event_subscription
10003fd55:	48 89 47 08	movq	%rax, 8(%rdi)
10003fd59:	48 8b 35 88 1c 02 00	movq	138376(%rip), %rsi ## Objc selector ref: dealloc
10003fd60:	e8 9f 1e 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fd65:	48 83 c4 18	addq	$24, %rsp
10003fd69:	5b	popq	%rbx
10003fd6a:	5d	popq	%rbp
10003fd6b:	c3	retq
10003fd6c:	55	pushq	%rbp
10003fd6d:	48 89 e5	movq	%rsp, %rbp
10003fd70:	53	pushq	%rbx
10003fd71:	48 83 ec 18	subq	$24, %rsp
10003fd75:	48 89 fb	movq	%rdi, %rbx
10003fd78:	e8 13 bf fc ff	callq	0x10000bc90
10003fd7d:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fd81:	48 89 1f	movq	%rbx, (%rdi)
10003fd84:	48 8b 05 45 1d 02 00	movq	138565(%rip), %rax ## Objc class ref: OS_launch_io
10003fd8b:	48 89 47 08	movq	%rax, 8(%rdi)
10003fd8f:	48 8b 35 52 1c 02 00	movq	138322(%rip), %rsi ## Objc selector ref: dealloc
10003fd96:	e8 69 1e 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fd9b:	48 83 c4 18	addq	$24, %rsp
10003fd9f:	5b	popq	%rbx
10003fda0:	5d	popq	%rbp
10003fda1:	c3	retq
10003fda2:	55	pushq	%rbp
10003fda3:	48 89 e5	movq	%rsp, %rbp
10003fda6:	53	pushq	%rbx
10003fda7:	48 83 ec 18	subq	$24, %rsp
10003fdab:	48 89 fb	movq	%rdi, %rbx
10003fdae:	e8 ab 54 ff ff	callq	0x10003525e
10003fdb3:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fdb7:	48 89 1f	movq	%rbx, (%rdi)
10003fdba:	48 8b 05 17 1d 02 00	movq	138519(%rip), %rax ## Objc class ref: OS_launch_log
10003fdc1:	48 89 47 08	movq	%rax, 8(%rdi)
10003fdc5:	48 8b 35 1c 1c 02 00	movq	138268(%rip), %rsi ## Objc selector ref: dealloc
10003fdcc:	e8 33 1e 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fdd1:	48 83 c4 18	addq	$24, %rsp
10003fdd5:	5b	popq	%rbx
10003fdd6:	5d	popq	%rbp
10003fdd7:	c3	retq
10003fdd8:	55	pushq	%rbp
10003fdd9:	48 89 e5	movq	%rsp, %rbp
10003fddc:	53	pushq	%rbx
10003fddd:	48 83 ec 18	subq	$24, %rsp
10003fde1:	48 89 fb	movq	%rdi, %rbx
10003fde4:	e8 55 2e fc ff	callq	0x100002c3e
10003fde9:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fded:	48 89 1f	movq	%rbx, (%rdi)
10003fdf0:	48 8b 05 e9 1c 02 00	movq	138473(%rip), %rax ## Objc class ref: OS_launch_service
10003fdf7:	48 89 47 08	movq	%rax, 8(%rdi)
10003fdfb:	48 8b 35 e6 1b 02 00	movq	138214(%rip), %rsi ## Objc selector ref: dealloc
10003fe02:	e8 fd 1d 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fe07:	48 83 c4 18	addq	$24, %rsp
10003fe0b:	5b	popq	%rbx
10003fe0c:	5d	popq	%rbp
10003fe0d:	c3	retq
10003fe0e:	55	pushq	%rbp
10003fe0f:	48 89 e5	movq	%rsp, %rbp
10003fe12:	53	pushq	%rbx
10003fe13:	48 83 ec 18	subq	$24, %rsp
10003fe17:	48 89 fb	movq	%rdi, %rbx
10003fe1a:	e8 4b 98 ff ff	callq	0x10003966a
10003fe1f:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fe23:	48 89 1f	movq	%rbx, (%rdi)
10003fe26:	48 8b 05 bb 1c 02 00	movq	138427(%rip), %rax ## Objc class ref: OS_launch_service_stub
10003fe2d:	48 89 47 08	movq	%rax, 8(%rdi)
10003fe31:	48 8b 35 b0 1b 02 00	movq	138160(%rip), %rsi ## Objc selector ref: dealloc
10003fe38:	e8 c7 1d 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fe3d:	48 83 c4 18	addq	$24, %rsp
10003fe41:	5b	popq	%rbx
10003fe42:	5d	popq	%rbp
10003fe43:	c3	retq
10003fe44:	55	pushq	%rbp
10003fe45:	48 89 e5	movq	%rsp, %rbp
10003fe48:	53	pushq	%rbx
10003fe49:	48 83 ec 18	subq	$24, %rsp
10003fe4d:	48 89 fb	movq	%rdi, %rbx
10003fe50:	e8 d5 33 fd ff	callq	0x10001322a
10003fe55:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fe59:	48 89 1f	movq	%rbx, (%rdi)
10003fe5c:	48 8b 05 8d 1c 02 00	movq	138381(%rip), %rax ## Objc class ref: OS_launch_socket
10003fe63:	48 89 47 08	movq	%rax, 8(%rdi)
10003fe67:	48 8b 35 7a 1b 02 00	movq	138106(%rip), %rsi ## Objc selector ref: dealloc
10003fe6e:	e8 91 1d 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fe73:	48 83 c4 18	addq	$24, %rsp
10003fe77:	5b	popq	%rbx
10003fe78:	5d	popq	%rbp
10003fe79:	c3	retq
10003fe7a:	55	pushq	%rbp
10003fe7b:	48 89 e5	movq	%rsp, %rbp
10003fe7e:	53	pushq	%rbx
10003fe7f:	48 83 ec 18	subq	$24, %rsp
10003fe83:	48 89 fb	movq	%rdi, %rbx
10003fe86:	e8 8b 89 ff ff	callq	0x100038816
10003fe8b:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fe8f:	48 89 1f	movq	%rbx, (%rdi)
10003fe92:	48 8b 05 5f 1c 02 00	movq	138335(%rip), %rax ## Objc class ref: OS_launch_cache
10003fe99:	48 89 47 08	movq	%rax, 8(%rdi)
10003fe9d:	48 8b 35 44 1b 02 00	movq	138052(%rip), %rsi ## Objc selector ref: dealloc
10003fea4:	e8 5b 1d 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fea9:	48 83 c4 18	addq	$24, %rsp
10003fead:	5b	popq	%rbx
10003feae:	5d	popq	%rbp
10003feaf:	c3	retq
10003feb0:	55	pushq	%rbp
10003feb1:	48 89 e5	movq	%rsp, %rbp
10003feb4:	53	pushq	%rbx
10003feb5:	48 83 ec 18	subq	$24, %rsp
10003feb9:	48 89 fb	movq	%rdi, %rbx
10003febc:	e8 bd 32 fd ff	callq	0x10001317e
10003fec1:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fec5:	48 89 1f	movq	%rbx, (%rdi)
10003fec8:	48 8b 05 31 1c 02 00	movq	138289(%rip), %rax ## Objc class ref: OS_launch_uint64_dictionary
10003fecf:	48 89 47 08	movq	%rax, 8(%rdi)
10003fed3:	48 8b 35 0e 1b 02 00	movq	137998(%rip), %rsi ## Objc selector ref: dealloc
10003feda:	e8 25 1d 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003fedf:	48 83 c4 18	addq	$24, %rsp
10003fee3:	5b	popq	%rbx
10003fee4:	5d	popq	%rbp
10003fee5:	c3	retq
10003fee6:	55	pushq	%rbp
10003fee7:	48 89 e5	movq	%rsp, %rbp
10003feea:	53	pushq	%rbx
10003feeb:	48 83 ec 18	subq	$24, %rsp
10003feef:	48 89 fb	movq	%rdi, %rbx
10003fef2:	e8 2c d1 fc ff	callq	0x10000d023
10003fef7:	48 8d 7d e8	leaq	-24(%rbp), %rdi
10003fefb:	48 89 1f	movq	%rbx, (%rdi)
10003fefe:	48 8b 05 03 1c 02 00	movq	138243(%rip), %rax ## Objc class ref: OS_launch_coalition
10003ff05:	48 89 47 08	movq	%rax, 8(%rdi)
10003ff09:	48 8b 35 d8 1a 02 00	movq	137944(%rip), %rsi ## Objc selector ref: dealloc
10003ff10:	e8 ef 1c 00 00	callq	0x100041c04 ## Objc message: -[[%rdi super] dealloc]
10003ff15:	48 83 c4 18	addq	$24, %rsp
10003ff19:	5b	popq	%rbx
10003ff1a:	5d	popq	%rbp
10003ff1b:	c3	retq
10003ff1c:	55	pushq	%rbp
10003ff1d:	48 89 e5	movq	%rsp, %rbp
10003ff20:	48 8d 3d a1 34 00 00	leaq	13473(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ff27:	e8 88 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff2c:	0f 0b	ud2
10003ff2e:	55	pushq	%rbp
10003ff2f:	48 89 e5	movq	%rsp, %rbp
10003ff32:	48 8d 3d ba 34 00 00	leaq	13498(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ff39:	e8 76 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff3e:	0f 0b	ud2
10003ff40:	55	pushq	%rbp
10003ff41:	48 89 e5	movq	%rsp, %rbp
10003ff44:	48 8d 3d 7d 34 00 00	leaq	13437(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ff4b:	e8 64 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff50:	0f 0b	ud2
10003ff52:	55	pushq	%rbp
10003ff53:	48 89 e5	movq	%rsp, %rbp
10003ff56:	48 8d 3d 96 34 00 00	leaq	13462(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ff5d:	e8 52 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff62:	0f 0b	ud2
10003ff64:	55	pushq	%rbp
10003ff65:	48 89 e5	movq	%rsp, %rbp
10003ff68:	48 8d 3d 59 34 00 00	leaq	13401(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ff6f:	e8 40 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff74:	0f 0b	ud2
10003ff76:	55	pushq	%rbp
10003ff77:	48 89 e5	movq	%rsp, %rbp
10003ff7a:	48 8d 3d 72 34 00 00	leaq	13426(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ff81:	e8 2e 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff86:	0f 0b	ud2
10003ff88:	55	pushq	%rbp
10003ff89:	48 89 e5	movq	%rsp, %rbp
10003ff8c:	31 ff	xorl	%edi, %edi
10003ff8e:	e8 09 18 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10003ff93:	48 89 c7	movq	%rax, %rdi
10003ff96:	e8 19 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ff9b:	0f 0b	ud2
10003ff9d:	90	nop
10003ff9e:	90	nop
10003ff9f:	55	pushq	%rbp
10003ffa0:	48 89 e5	movq	%rsp, %rbp
10003ffa3:	48 8d 3d 1e 34 00 00	leaq	13342(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10003ffaa:	e8 05 18 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ffaf:	0f 0b	ud2
10003ffb1:	55	pushq	%rbp
10003ffb2:	48 89 e5	movq	%rsp, %rbp
10003ffb5:	48 8d 3d 37 34 00 00	leaq	13367(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10003ffbc:	e8 f3 17 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10003ffc1:	0f 0b	ud2
10003ffc3:	55	pushq	%rbp
10003ffc4:	48 89 e5	movq	%rsp, %rbp
10003ffc7:	53	pushq	%rbx
10003ffc8:	50	pushq	%rax
10003ffc9:	48 89 fb	movq	%rdi, %rbx
10003ffcc:	e8 8f 17 00 00	callq	0x100041760 ## symbol stub for: ___error
10003ffd1:	48 63 10	movslq	(%rax), %rdx
10003ffd4:	48 8d 3d 66 33 fd ff	leaq	-183450(%rip), %rdi
10003ffdb:	48 89 de	movq	%rbx, %rsi
10003ffde:	e8 c5 17 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10003ffe3:	48 83 c4 08	addq	$8, %rsp
10003ffe7:	5b	popq	%rbx
10003ffe8:	5d	popq	%rbp
10003ffe9:	c3	retq
10003ffea:	55	pushq	%rbp
10003ffeb:	48 89 e5	movq	%rsp, %rbp
10003ffee:	e8 6d 17 00 00	callq	0x100041760 ## symbol stub for: ___error
10003fff3:	48 63 38	movslq	(%rax), %rdi
10003fff6:	e8 a7 17 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10003fffb:	5d	popq	%rbp
10003fffc:	c3	retq
10003fffd:	55	pushq	%rbp
10003fffe:	48 89 e5	movq	%rsp, %rbp
100040001:	53	pushq	%rbx
100040002:	50	pushq	%rax
100040003:	48 89 fb	movq	%rdi, %rbx
100040006:	e8 55 17 00 00	callq	0x100041760 ## symbol stub for: ___error
10004000b:	48 63 10	movslq	(%rax), %rdx
10004000e:	48 8d 3d 2c 33 fd ff	leaq	-183508(%rip), %rdi
100040015:	48 89 de	movq	%rbx, %rsi
100040018:	e8 8b 17 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10004001d:	48 83 c4 08	addq	$8, %rsp
100040021:	5b	popq	%rbx
100040022:	5d	popq	%rbp
100040023:	c3	retq
100040024:	55	pushq	%rbp
100040025:	48 89 e5	movq	%rsp, %rbp
100040028:	53	pushq	%rbx
100040029:	50	pushq	%rax
10004002a:	48 89 fb	movq	%rdi, %rbx
10004002d:	e8 2e 17 00 00	callq	0x100041760 ## symbol stub for: ___error
100040032:	48 63 10	movslq	(%rax), %rdx
100040035:	48 8d 3d 05 33 fd ff	leaq	-183547(%rip), %rdi
10004003c:	48 89 de	movq	%rbx, %rsi
10004003f:	e8 64 17 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040044:	48 83 c4 08	addq	$8, %rsp
100040048:	5b	popq	%rbx
100040049:	5d	popq	%rbp
10004004a:	c3	retq
10004004b:	55	pushq	%rbp
10004004c:	48 89 e5	movq	%rsp, %rbp
10004004f:	53	pushq	%rbx
100040050:	50	pushq	%rax
100040051:	48 89 fb	movq	%rdi, %rbx
100040054:	e8 07 17 00 00	callq	0x100041760 ## symbol stub for: ___error
100040059:	48 63 10	movslq	(%rax), %rdx
10004005c:	48 8d 3d de 32 fd ff	leaq	-183586(%rip), %rdi
100040063:	48 89 de	movq	%rbx, %rsi
100040066:	e8 3d 17 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10004006b:	48 83 c4 08	addq	$8, %rsp
10004006f:	5b	popq	%rbx
100040070:	5d	popq	%rbp
100040071:	c3	retq
100040072:	55	pushq	%rbp
100040073:	48 89 e5	movq	%rsp, %rbp
100040076:	53	pushq	%rbx
100040077:	50	pushq	%rax
100040078:	48 89 fb	movq	%rdi, %rbx
10004007b:	e8 e0 16 00 00	callq	0x100041760 ## symbol stub for: ___error
100040080:	48 63 10	movslq	(%rax), %rdx
100040083:	48 8d 3d b7 32 fd ff	leaq	-183625(%rip), %rdi
10004008a:	48 89 de	movq	%rbx, %rsi
10004008d:	e8 16 17 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040092:	48 83 c4 08	addq	$8, %rsp
100040096:	5b	popq	%rbx
100040097:	5d	popq	%rbp
100040098:	c3	retq
100040099:	55	pushq	%rbp
10004009a:	48 89 e5	movq	%rsp, %rbp
10004009d:	53	pushq	%rbx
10004009e:	50	pushq	%rax
10004009f:	48 89 fb	movq	%rdi, %rbx
1000400a2:	e8 b9 16 00 00	callq	0x100041760 ## symbol stub for: ___error
1000400a7:	48 63 10	movslq	(%rax), %rdx
1000400aa:	48 8d 3d 90 32 fd ff	leaq	-183664(%rip), %rdi
1000400b1:	48 89 de	movq	%rbx, %rsi
1000400b4:	e8 ef 16 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000400b9:	48 83 c4 08	addq	$8, %rsp
1000400bd:	5b	popq	%rbx
1000400be:	5d	popq	%rbp
1000400bf:	c3	retq
1000400c0:	55	pushq	%rbp
1000400c1:	48 89 e5	movq	%rsp, %rbp
1000400c4:	53	pushq	%rbx
1000400c5:	50	pushq	%rax
1000400c6:	48 89 fb	movq	%rdi, %rbx
1000400c9:	e8 92 16 00 00	callq	0x100041760 ## symbol stub for: ___error
1000400ce:	48 63 10	movslq	(%rax), %rdx
1000400d1:	48 8d 3d 69 32 fd ff	leaq	-183703(%rip), %rdi
1000400d8:	48 89 de	movq	%rbx, %rsi
1000400db:	e8 c8 16 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000400e0:	48 83 c4 08	addq	$8, %rsp
1000400e4:	5b	popq	%rbx
1000400e5:	5d	popq	%rbp
1000400e6:	c3	retq
1000400e7:	55	pushq	%rbp
1000400e8:	48 89 e5	movq	%rsp, %rbp
1000400eb:	53	pushq	%rbx
1000400ec:	50	pushq	%rax
1000400ed:	48 89 fb	movq	%rdi, %rbx
1000400f0:	e8 6b 16 00 00	callq	0x100041760 ## symbol stub for: ___error
1000400f5:	48 63 10	movslq	(%rax), %rdx
1000400f8:	48 8d 3d 42 32 fd ff	leaq	-183742(%rip), %rdi
1000400ff:	48 89 de	movq	%rbx, %rsi
100040102:	e8 a1 16 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040107:	48 83 c4 08	addq	$8, %rsp
10004010b:	5b	popq	%rbx
10004010c:	5d	popq	%rbp
10004010d:	c3	retq
10004010e:	55	pushq	%rbp
10004010f:	48 89 e5	movq	%rsp, %rbp
100040112:	53	pushq	%rbx
100040113:	50	pushq	%rax
100040114:	48 89 fb	movq	%rdi, %rbx
100040117:	e8 44 16 00 00	callq	0x100041760 ## symbol stub for: ___error
10004011c:	48 63 10	movslq	(%rax), %rdx
10004011f:	48 8d 3d 1b 32 fd ff	leaq	-183781(%rip), %rdi
100040126:	48 89 de	movq	%rbx, %rsi
100040129:	e8 7a 16 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
10004012e:	48 83 c4 08	addq	$8, %rsp
100040132:	5b	popq	%rbx
100040133:	5d	popq	%rbp
100040134:	c3	retq
100040135:	55	pushq	%rbp
100040136:	48 89 e5	movq	%rsp, %rbp
100040139:	53	pushq	%rbx
10004013a:	50	pushq	%rax
10004013b:	48 89 fb	movq	%rdi, %rbx
10004013e:	e8 1d 16 00 00	callq	0x100041760 ## symbol stub for: ___error
100040143:	48 63 10	movslq	(%rax), %rdx
100040146:	48 8d 3d f4 31 fd ff	leaq	-183820(%rip), %rdi
10004014d:	48 89 de	movq	%rbx, %rsi
100040150:	e8 53 16 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040155:	48 83 c4 08	addq	$8, %rsp
100040159:	5b	popq	%rbx
10004015a:	5d	popq	%rbp
10004015b:	c3	retq
10004015c:	55	pushq	%rbp
10004015d:	48 89 e5	movq	%rsp, %rbp
100040160:	31 ff	xorl	%edi, %edi
100040162:	e8 35 16 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040167:	48 89 c7	movq	%rax, %rdi
10004016a:	e8 45 16 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004016f:	0f 0b	ud2
100040171:	55	pushq	%rbp
100040172:	48 89 e5	movq	%rsp, %rbp
100040175:	e8 e6 15 00 00	callq	0x100041760 ## symbol stub for: ___error
10004017a:	48 63 38	movslq	(%rax), %rdi
10004017d:	e8 20 16 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040182:	5d	popq	%rbp
100040183:	c3	retq
100040184:	55	pushq	%rbp
100040185:	48 89 e5	movq	%rsp, %rbp
100040188:	31 ff	xorl	%edi, %edi
10004018a:	e8 0d 16 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004018f:	48 89 c7	movq	%rax, %rdi
100040192:	e8 1d 16 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040197:	0f 0b	ud2
100040199:	55	pushq	%rbp
10004019a:	48 89 e5	movq	%rsp, %rbp
10004019d:	31 ff	xorl	%edi, %edi
10004019f:	e8 f8 15 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000401a4:	48 89 c7	movq	%rax, %rdi
1000401a7:	e8 08 16 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000401ac:	0f 0b	ud2
1000401ae:	55	pushq	%rbp
1000401af:	48 89 e5	movq	%rsp, %rbp
1000401b2:	31 ff	xorl	%edi, %edi
1000401b4:	e8 e3 15 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000401b9:	48 89 c7	movq	%rax, %rdi
1000401bc:	e8 f3 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000401c1:	0f 0b	ud2
1000401c3:	55	pushq	%rbp
1000401c4:	48 89 e5	movq	%rsp, %rbp
1000401c7:	e8 94 15 00 00	callq	0x100041760 ## symbol stub for: ___error
1000401cc:	48 63 38	movslq	(%rax), %rdi
1000401cf:	e8 ce 15 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000401d4:	5d	popq	%rbp
1000401d5:	c3	retq
1000401d6:	55	pushq	%rbp
1000401d7:	48 89 e5	movq	%rsp, %rbp
1000401da:	e8 81 15 00 00	callq	0x100041760 ## symbol stub for: ___error
1000401df:	48 63 38	movslq	(%rax), %rdi
1000401e2:	e8 bb 15 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000401e7:	5d	popq	%rbp
1000401e8:	c3	retq
1000401e9:	55	pushq	%rbp
1000401ea:	48 89 e5	movq	%rsp, %rbp
1000401ed:	e8 6e 15 00 00	callq	0x100041760 ## symbol stub for: ___error
1000401f2:	48 63 38	movslq	(%rax), %rdi
1000401f5:	e8 a8 15 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000401fa:	5d	popq	%rbp
1000401fb:	c3	retq
1000401fc:	55	pushq	%rbp
1000401fd:	48 89 e5	movq	%rsp, %rbp
100040200:	48 8d 3d c1 31 00 00	leaq	12737(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040207:	e8 a8 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004020c:	0f 0b	ud2
10004020e:	55	pushq	%rbp
10004020f:	48 89 e5	movq	%rsp, %rbp
100040212:	48 8d 3d da 31 00 00	leaq	12762(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040219:	e8 96 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004021e:	0f 0b	ud2
100040220:	55	pushq	%rbp
100040221:	48 89 e5	movq	%rsp, %rbp
100040224:	e8 37 15 00 00	callq	0x100041760 ## symbol stub for: ___error
100040229:	48 63 38	movslq	(%rax), %rdi
10004022c:	e8 71 15 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040231:	5d	popq	%rbp
100040232:	c3	retq
100040233:	55	pushq	%rbp
100040234:	48 89 e5	movq	%rsp, %rbp
100040237:	31 ff	xorl	%edi, %edi
100040239:	e8 5e 15 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004023e:	48 89 c7	movq	%rax, %rdi
100040241:	e8 6e 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040246:	0f 0b	ud2
100040248:	55	pushq	%rbp
100040249:	48 89 e5	movq	%rsp, %rbp
10004024c:	31 ff	xorl	%edi, %edi
10004024e:	e8 49 15 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040253:	48 89 c7	movq	%rax, %rdi
100040256:	e8 59 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004025b:	0f 0b	ud2
10004025d:	55	pushq	%rbp
10004025e:	48 89 e5	movq	%rsp, %rbp
100040261:	48 8d 3d 60 31 00 00	leaq	12640(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040268:	e8 47 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004026d:	0f 0b	ud2
10004026f:	55	pushq	%rbp
100040270:	48 89 e5	movq	%rsp, %rbp
100040273:	48 8d 3d 79 31 00 00	leaq	12665(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10004027a:	e8 35 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004027f:	0f 0b	ud2
100040281:	90	nop
100040282:	90	nop
100040283:	55	pushq	%rbp
100040284:	48 89 e5	movq	%rsp, %rbp
100040287:	48 8d 3d 3a 31 00 00	leaq	12602(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10004028e:	e8 21 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040293:	0f 0b	ud2
100040295:	55	pushq	%rbp
100040296:	48 89 e5	movq	%rsp, %rbp
100040299:	48 8d 3d 53 31 00 00	leaq	12627(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
1000402a0:	e8 0f 15 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000402a5:	0f 0b	ud2
1000402a7:	55	pushq	%rbp
1000402a8:	48 89 e5	movq	%rsp, %rbp
1000402ab:	e8 b0 14 00 00	callq	0x100041760 ## symbol stub for: ___error
1000402b0:	48 63 38	movslq	(%rax), %rdi
1000402b3:	e8 e4 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000402b8:	48 89 c7	movq	%rax, %rdi
1000402bb:	e8 f4 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000402c0:	0f 0b	ud2
1000402c2:	55	pushq	%rbp
1000402c3:	48 89 e5	movq	%rsp, %rbp
1000402c6:	e8 95 14 00 00	callq	0x100041760 ## symbol stub for: ___error
1000402cb:	48 63 38	movslq	(%rax), %rdi
1000402ce:	e8 c9 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000402d3:	48 89 c7	movq	%rax, %rdi
1000402d6:	e8 d9 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000402db:	0f 0b	ud2
1000402dd:	55	pushq	%rbp
1000402de:	48 89 e5	movq	%rsp, %rbp
1000402e1:	e8 7a 14 00 00	callq	0x100041760 ## symbol stub for: ___error
1000402e6:	48 63 38	movslq	(%rax), %rdi
1000402e9:	e8 ae 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000402ee:	48 89 c7	movq	%rax, %rdi
1000402f1:	e8 be 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000402f6:	0f 0b	ud2
1000402f8:	55	pushq	%rbp
1000402f9:	48 89 e5	movq	%rsp, %rbp
1000402fc:	31 ff	xorl	%edi, %edi
1000402fe:	e8 99 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040303:	48 89 c7	movq	%rax, %rdi
100040306:	e8 a9 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004030b:	0f 0b	ud2
10004030d:	55	pushq	%rbp
10004030e:	48 89 e5	movq	%rsp, %rbp
100040311:	31 ff	xorl	%edi, %edi
100040313:	e8 84 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040318:	48 89 c7	movq	%rax, %rdi
10004031b:	e8 94 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040320:	0f 0b	ud2
100040322:	55	pushq	%rbp
100040323:	48 89 e5	movq	%rsp, %rbp
100040326:	31 ff	xorl	%edi, %edi
100040328:	e8 6f 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004032d:	48 89 c7	movq	%rax, %rdi
100040330:	e8 7f 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040335:	0f 0b	ud2
100040337:	55	pushq	%rbp
100040338:	48 89 e5	movq	%rsp, %rbp
10004033b:	0f b7 ff	movzwl	%di, %edi
10004033e:	c1 ef 04	shrl	$4, %edi
100040341:	83 f7 01	xorl	$1, %edi
100040344:	e8 53 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040349:	48 89 c7	movq	%rax, %rdi
10004034c:	e8 63 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040351:	0f 0b	ud2
100040353:	55	pushq	%rbp
100040354:	48 89 e5	movq	%rsp, %rbp
100040357:	48 63 ff	movslq	%edi, %rdi
10004035a:	e8 3d 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004035f:	48 89 c7	movq	%rax, %rdi
100040362:	e8 4d 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040367:	0f 0b	ud2
100040369:	55	pushq	%rbp
10004036a:	48 89 e5	movq	%rsp, %rbp
10004036d:	48 63 ff	movslq	%edi, %rdi
100040370:	e8 27 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040375:	48 89 c7	movq	%rax, %rdi
100040378:	e8 37 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004037d:	0f 0b	ud2
10004037f:	55	pushq	%rbp
100040380:	48 89 e5	movq	%rsp, %rbp
100040383:	48 63 ff	movslq	%edi, %rdi
100040386:	e8 11 14 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004038b:	48 89 c7	movq	%rax, %rdi
10004038e:	e8 21 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040393:	0f 0b	ud2
100040395:	55	pushq	%rbp
100040396:	48 89 e5	movq	%rsp, %rbp
100040399:	48 63 ff	movslq	%edi, %rdi
10004039c:	e8 fb 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000403a1:	48 89 c7	movq	%rax, %rdi
1000403a4:	e8 0b 14 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000403a9:	0f 0b	ud2
1000403ab:	55	pushq	%rbp
1000403ac:	48 89 e5	movq	%rsp, %rbp
1000403af:	48 63 ff	movslq	%edi, %rdi
1000403b2:	e8 e5 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000403b7:	48 89 c7	movq	%rax, %rdi
1000403ba:	e8 f5 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000403bf:	0f 0b	ud2
1000403c1:	55	pushq	%rbp
1000403c2:	48 89 e5	movq	%rsp, %rbp
1000403c5:	31 ff	xorl	%edi, %edi
1000403c7:	e8 d0 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000403cc:	48 89 c7	movq	%rax, %rdi
1000403cf:	e8 e0 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000403d4:	0f 0b	ud2
1000403d6:	55	pushq	%rbp
1000403d7:	48 89 e5	movq	%rsp, %rbp
1000403da:	31 ff	xorl	%edi, %edi
1000403dc:	e8 bb 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000403e1:	48 89 c7	movq	%rax, %rdi
1000403e4:	e8 cb 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000403e9:	0f 0b	ud2
1000403eb:	55	pushq	%rbp
1000403ec:	48 89 e5	movq	%rsp, %rbp
1000403ef:	31 ff	xorl	%edi, %edi
1000403f1:	e8 a6 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000403f6:	48 89 c7	movq	%rax, %rdi
1000403f9:	e8 b6 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000403fe:	0f 0b	ud2
100040400:	55	pushq	%rbp
100040401:	48 89 e5	movq	%rsp, %rbp
100040404:	31 ff	xorl	%edi, %edi
100040406:	e8 91 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004040b:	48 89 c7	movq	%rax, %rdi
10004040e:	e8 a1 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040413:	0f 0b	ud2
100040415:	55	pushq	%rbp
100040416:	48 89 e5	movq	%rsp, %rbp
100040419:	31 ff	xorl	%edi, %edi
10004041b:	e8 7c 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040420:	48 89 c7	movq	%rax, %rdi
100040423:	e8 8c 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040428:	0f 0b	ud2
10004042a:	55	pushq	%rbp
10004042b:	48 89 e5	movq	%rsp, %rbp
10004042e:	31 ff	xorl	%edi, %edi
100040430:	e8 67 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040435:	48 89 c7	movq	%rax, %rdi
100040438:	e8 77 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004043d:	0f 0b	ud2
10004043f:	55	pushq	%rbp
100040440:	48 89 e5	movq	%rsp, %rbp
100040443:	31 ff	xorl	%edi, %edi
100040445:	e8 52 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004044a:	48 89 c7	movq	%rax, %rdi
10004044d:	e8 62 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040452:	0f 0b	ud2
100040454:	55	pushq	%rbp
100040455:	48 89 e5	movq	%rsp, %rbp
100040458:	53	pushq	%rbx
100040459:	50	pushq	%rax
10004045a:	48 89 fb	movq	%rdi, %rbx
10004045d:	e8 fe 12 00 00	callq	0x100041760 ## symbol stub for: ___error
100040462:	48 63 10	movslq	(%rax), %rdx
100040465:	48 8d 3d 9b 7e fd ff	leaq	-164197(%rip), %rdi
10004046c:	48 89 de	movq	%rbx, %rsi
10004046f:	e8 34 13 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040474:	48 83 c4 08	addq	$8, %rsp
100040478:	5b	popq	%rbx
100040479:	5d	popq	%rbp
10004047a:	c3	retq
10004047b:	55	pushq	%rbp
10004047c:	48 89 e5	movq	%rsp, %rbp
10004047f:	31 ff	xorl	%edi, %edi
100040481:	e8 16 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040486:	48 89 c7	movq	%rax, %rdi
100040489:	e8 26 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004048e:	0f 0b	ud2
100040490:	55	pushq	%rbp
100040491:	48 89 e5	movq	%rsp, %rbp
100040494:	48 63 ff	movslq	%edi, %rdi
100040497:	e8 00 13 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004049c:	48 89 c7	movq	%rax, %rdi
10004049f:	e8 10 13 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000404a4:	0f 0b	ud2
1000404a6:	55	pushq	%rbp
1000404a7:	48 89 e5	movq	%rsp, %rbp
1000404aa:	31 ff	xorl	%edi, %edi
1000404ac:	e8 eb 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000404b1:	48 89 c7	movq	%rax, %rdi
1000404b4:	e8 fb 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000404b9:	0f 0b	ud2
1000404bb:	55	pushq	%rbp
1000404bc:	48 89 e5	movq	%rsp, %rbp
1000404bf:	31 ff	xorl	%edi, %edi
1000404c1:	e8 d6 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000404c6:	48 89 c7	movq	%rax, %rdi
1000404c9:	e8 e6 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000404ce:	0f 0b	ud2
1000404d0:	55	pushq	%rbp
1000404d1:	48 89 e5	movq	%rsp, %rbp
1000404d4:	31 ff	xorl	%edi, %edi
1000404d6:	e8 c1 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000404db:	48 89 c7	movq	%rax, %rdi
1000404de:	e8 d1 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000404e3:	0f 0b	ud2
1000404e5:	55	pushq	%rbp
1000404e6:	48 89 e5	movq	%rsp, %rbp
1000404e9:	31 ff	xorl	%edi, %edi
1000404eb:	e8 ac 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000404f0:	48 89 c7	movq	%rax, %rdi
1000404f3:	e8 bc 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000404f8:	0f 0b	ud2
1000404fa:	55	pushq	%rbp
1000404fb:	48 89 e5	movq	%rsp, %rbp
1000404fe:	31 ff	xorl	%edi, %edi
100040500:	e8 97 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040505:	48 89 c7	movq	%rax, %rdi
100040508:	e8 a7 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004050d:	0f 0b	ud2
10004050f:	55	pushq	%rbp
100040510:	48 89 e5	movq	%rsp, %rbp
100040513:	31 ff	xorl	%edi, %edi
100040515:	e8 82 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004051a:	48 89 c7	movq	%rax, %rdi
10004051d:	e8 92 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040522:	0f 0b	ud2
100040524:	55	pushq	%rbp
100040525:	48 89 e5	movq	%rsp, %rbp
100040528:	31 ff	xorl	%edi, %edi
10004052a:	e8 6d 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004052f:	48 89 c7	movq	%rax, %rdi
100040532:	e8 7d 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040537:	0f 0b	ud2
100040539:	55	pushq	%rbp
10004053a:	48 89 e5	movq	%rsp, %rbp
10004053d:	31 ff	xorl	%edi, %edi
10004053f:	e8 58 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040544:	48 89 c7	movq	%rax, %rdi
100040547:	e8 68 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004054c:	0f 0b	ud2
10004054e:	55	pushq	%rbp
10004054f:	48 89 e5	movq	%rsp, %rbp
100040552:	31 ff	xorl	%edi, %edi
100040554:	e8 43 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040559:	48 89 c7	movq	%rax, %rdi
10004055c:	e8 53 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040561:	0f 0b	ud2
100040563:	55	pushq	%rbp
100040564:	48 89 e5	movq	%rsp, %rbp
100040567:	31 ff	xorl	%edi, %edi
100040569:	e8 2e 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004056e:	48 89 c7	movq	%rax, %rdi
100040571:	e8 3e 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040576:	0f 0b	ud2
100040578:	55	pushq	%rbp
100040579:	48 89 e5	movq	%rsp, %rbp
10004057c:	40 0f b6 c6	movzbl	%sil, %eax
100040580:	48 0f ac c7 1c	shrdq	$28, %rax, %rdi
100040585:	48 83 f7 01	xorq	$1, %rdi
100040589:	e8 0e 12 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004058e:	48 89 c7	movq	%rax, %rdi
100040591:	e8 1e 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040596:	0f 0b	ud2
100040598:	55	pushq	%rbp
100040599:	48 89 e5	movq	%rsp, %rbp
10004059c:	31 ff	xorl	%edi, %edi
10004059e:	e8 f9 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000405a3:	48 89 c7	movq	%rax, %rdi
1000405a6:	e8 09 12 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000405ab:	0f 0b	ud2
1000405ad:	55	pushq	%rbp
1000405ae:	48 89 e5	movq	%rsp, %rbp
1000405b1:	48 63 ff	movslq	%edi, %rdi
1000405b4:	e8 e3 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000405b9:	48 89 c7	movq	%rax, %rdi
1000405bc:	e8 f3 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000405c1:	0f 0b	ud2
1000405c3:	55	pushq	%rbp
1000405c4:	48 89 e5	movq	%rsp, %rbp
1000405c7:	31 ff	xorl	%edi, %edi
1000405c9:	e8 ce 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000405ce:	48 89 c7	movq	%rax, %rdi
1000405d1:	e8 de 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000405d6:	0f 0b	ud2
1000405d8:	55	pushq	%rbp
1000405d9:	48 89 e5	movq	%rsp, %rbp
1000405dc:	09 f7	orl	%esi, %edi
1000405de:	83 e7 01	andl	$1, %edi
1000405e1:	e8 b6 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000405e6:	48 89 c7	movq	%rax, %rdi
1000405e9:	e8 c6 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000405ee:	0f 0b	ud2
1000405f0:	55	pushq	%rbp
1000405f1:	48 89 e5	movq	%rsp, %rbp
1000405f4:	31 ff	xorl	%edi, %edi
1000405f6:	e8 a1 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000405fb:	48 89 c7	movq	%rax, %rdi
1000405fe:	e8 b1 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040603:	0f 0b	ud2
100040605:	55	pushq	%rbp
100040606:	48 89 e5	movq	%rsp, %rbp
100040609:	48 8d 3d b8 2d 00 00	leaq	11704(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040610:	e8 9f 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040615:	0f 0b	ud2
100040617:	55	pushq	%rbp
100040618:	48 89 e5	movq	%rsp, %rbp
10004061b:	48 8d 3d d1 2d 00 00	leaq	11729(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040622:	e8 8d 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040627:	0f 0b	ud2
100040629:	55	pushq	%rbp
10004062a:	48 89 e5	movq	%rsp, %rbp
10004062d:	31 ff	xorl	%edi, %edi
10004062f:	e8 68 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040634:	48 89 c7	movq	%rax, %rdi
100040637:	e8 78 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004063c:	0f 0b	ud2
10004063e:	90	nop
10004063f:	90	nop
100040640:	90	nop
100040641:	55	pushq	%rbp
100040642:	48 89 e5	movq	%rsp, %rbp
100040645:	48 8d 3d 7c 2d 00 00	leaq	11644(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10004064c:	e8 63 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040651:	0f 0b	ud2
100040653:	55	pushq	%rbp
100040654:	48 89 e5	movq	%rsp, %rbp
100040657:	48 8d 3d 95 2d 00 00	leaq	11669(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10004065e:	e8 51 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040663:	0f 0b	ud2
100040665:	55	pushq	%rbp
100040666:	48 89 e5	movq	%rsp, %rbp
100040669:	31 ff	xorl	%edi, %edi
10004066b:	e8 2c 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040670:	48 89 c7	movq	%rax, %rdi
100040673:	e8 3c 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040678:	0f 0b	ud2
10004067a:	55	pushq	%rbp
10004067b:	48 89 e5	movq	%rsp, %rbp
10004067e:	31 ff	xorl	%edi, %edi
100040680:	e8 17 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040685:	48 89 c7	movq	%rax, %rdi
100040688:	e8 27 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004068d:	0f 0b	ud2
10004068f:	55	pushq	%rbp
100040690:	48 89 e5	movq	%rsp, %rbp
100040693:	31 ff	xorl	%edi, %edi
100040695:	e8 02 11 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004069a:	48 89 c7	movq	%rax, %rdi
10004069d:	e8 12 11 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000406a2:	0f 0b	ud2
1000406a4:	55	pushq	%rbp
1000406a5:	48 89 e5	movq	%rsp, %rbp
1000406a8:	31 ff	xorl	%edi, %edi
1000406aa:	e8 ed 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000406af:	48 89 c7	movq	%rax, %rdi
1000406b2:	e8 fd 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000406b7:	0f 0b	ud2
1000406b9:	55	pushq	%rbp
1000406ba:	48 89 e5	movq	%rsp, %rbp
1000406bd:	31 ff	xorl	%edi, %edi
1000406bf:	e8 d8 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000406c4:	48 89 c7	movq	%rax, %rdi
1000406c7:	e8 e8 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000406cc:	0f 0b	ud2
1000406ce:	55	pushq	%rbp
1000406cf:	48 89 e5	movq	%rsp, %rbp
1000406d2:	48 8d 3d ef 2c 00 00	leaq	11503(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
1000406d9:	e8 d6 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000406de:	0f 0b	ud2
1000406e0:	55	pushq	%rbp
1000406e1:	48 89 e5	movq	%rsp, %rbp
1000406e4:	48 63 d7	movslq	%edi, %rdx
1000406e7:	48 8b 35 6a 2e 02 00	movq	142954(%rip), %rsi
1000406ee:	48 8d 3d 13 fd fd ff	leaq	-131821(%rip), %rdi
1000406f5:	e8 ae 10 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
1000406fa:	5d	popq	%rbp
1000406fb:	c3	retq
1000406fc:	55	pushq	%rbp
1000406fd:	48 89 e5	movq	%rsp, %rbp
100040700:	48 63 ff	movslq	%edi, %rdi
100040703:	e8 94 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040708:	48 89 c7	movq	%rax, %rdi
10004070b:	e8 a4 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040710:	0f 0b	ud2
100040712:	55	pushq	%rbp
100040713:	48 89 e5	movq	%rsp, %rbp
100040716:	31 ff	xorl	%edi, %edi
100040718:	e8 7f 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004071d:	48 89 c7	movq	%rax, %rdi
100040720:	e8 8f 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040725:	0f 0b	ud2
100040727:	55	pushq	%rbp
100040728:	48 89 e5	movq	%rsp, %rbp
10004072b:	31 ff	xorl	%edi, %edi
10004072d:	e8 6a 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040732:	48 89 c7	movq	%rax, %rdi
100040735:	e8 7a 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004073a:	0f 0b	ud2
10004073c:	55	pushq	%rbp
10004073d:	48 89 e5	movq	%rsp, %rbp
100040740:	31 ff	xorl	%edi, %edi
100040742:	e8 55 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040747:	48 89 c7	movq	%rax, %rdi
10004074a:	e8 65 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004074f:	0f 0b	ud2
100040751:	55	pushq	%rbp
100040752:	48 89 e5	movq	%rsp, %rbp
100040755:	e8 42 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004075a:	48 89 c7	movq	%rax, %rdi
10004075d:	e8 52 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040762:	0f 0b	ud2
100040764:	55	pushq	%rbp
100040765:	48 89 e5	movq	%rsp, %rbp
100040768:	e8 2f 10 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004076d:	48 89 c7	movq	%rax, %rdi
100040770:	e8 3f 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040775:	0f 0b	ud2
100040777:	55	pushq	%rbp
100040778:	48 89 e5	movq	%rsp, %rbp
10004077b:	53	pushq	%rbx
10004077c:	50	pushq	%rax
10004077d:	48 89 fb	movq	%rdi, %rbx
100040780:	e8 db 0f 00 00	callq	0x100041760 ## symbol stub for: ___error
100040785:	48 63 10	movslq	(%rax), %rdx
100040788:	48 8d 3d 79 fc fd ff	leaq	-131975(%rip), %rdi
10004078f:	48 89 de	movq	%rbx, %rsi
100040792:	e8 11 10 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040797:	48 83 c4 08	addq	$8, %rsp
10004079b:	5b	popq	%rbx
10004079c:	5d	popq	%rbp
10004079d:	c3	retq
10004079e:	55	pushq	%rbp
10004079f:	48 89 e5	movq	%rsp, %rbp
1000407a2:	31 ff	xorl	%edi, %edi
1000407a4:	e8 f3 0f 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000407a9:	48 89 c7	movq	%rax, %rdi
1000407ac:	e8 03 10 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000407b1:	0f 0b	ud2
1000407b3:	55	pushq	%rbp
1000407b4:	48 89 e5	movq	%rsp, %rbp
1000407b7:	41 56	pushq	%r14
1000407b9:	53	pushq	%rbx
1000407ba:	41 89 f6	movl	%esi, %r14d
1000407bd:	31 db	xorl	%ebx, %ebx
1000407bf:	83 bf 18 01 00 00 00	cmpl	$0, 280(%rdi)
1000407c6:	0f 95 c3	setne	%bl
1000407c9:	6a 01	pushq	$1
1000407cb:	5e	popq	%rsi
1000407cc:	e8 57 7b fd ff	callq	0x100018328
1000407d1:	48 8d 3d 7b 00 01 00	leaq	65659(%rip), %rdi ## literal pool for: "overflow of service activation count during activate. Managed:%d. Count:%d. Service:'%s'"
1000407d8:	89 de	movl	%ebx, %esi
1000407da:	44 89 f2	movl	%r14d, %edx
1000407dd:	48 89 c1	movq	%rax, %rcx
1000407e0:	31 c0	xorl	%eax, %eax
1000407e2:	e8 4e e9 fc ff	callq	0x10000f135
1000407e7:	48 89 c7	movq	%rax, %rdi
1000407ea:	e8 c5 0f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000407ef:	0f 0b	ud2
1000407f1:	55	pushq	%rbp
1000407f2:	48 89 e5	movq	%rsp, %rbp
1000407f5:	41 56	pushq	%r14
1000407f7:	53	pushq	%rbx
1000407f8:	41 89 f6	movl	%esi, %r14d
1000407fb:	31 db	xorl	%ebx, %ebx
1000407fd:	83 bf 18 01 00 00 00	cmpl	$0, 280(%rdi)
100040804:	0f 95 c3	setne	%bl
100040807:	6a 01	pushq	$1
100040809:	5e	popq	%rsi
10004080a:	e8 19 7b fd ff	callq	0x100018328
10004080f:	48 8d 3d 96 00 01 00	leaq	65686(%rip), %rdi ## literal pool for: "underflow of service activation count during activate. Managed:%d. Count:%d. Service:'%s'"
100040816:	89 de	movl	%ebx, %esi
100040818:	44 89 f2	movl	%r14d, %edx
10004081b:	48 89 c1	movq	%rax, %rcx
10004081e:	31 c0	xorl	%eax, %eax
100040820:	e8 10 e9 fc ff	callq	0x10000f135
100040825:	48 89 c7	movq	%rax, %rdi
100040828:	e8 87 0f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004082d:	0f 0b	ud2
10004082f:	55	pushq	%rbp
100040830:	48 89 e5	movq	%rsp, %rbp
100040833:	41 57	pushq	%r15
100040835:	41 56	pushq	%r14
100040837:	41 54	pushq	%r12
100040839:	53	pushq	%rbx
10004083a:	49 89 fe	movq	%rdi, %r14
10004083d:	31 db	xorl	%ebx, %ebx
10004083f:	83 bf 18 01 00 00 00	cmpl	$0, 280(%rdi)
100040846:	0f 95 c3	setne	%bl
100040849:	6a 01	pushq	$1
10004084b:	41 5f	popq	%r15
10004084d:	48 89 f7	movq	%rsi, %rdi
100040850:	44 89 fe	movl	%r15d, %esi
100040853:	e8 b0 fc fd ff	callq	0x100020508
100040858:	49 89 c4	movq	%rax, %r12
10004085b:	4c 89 f7	movq	%r14, %rdi
10004085e:	44 89 fe	movl	%r15d, %esi
100040861:	e8 c2 7a fd ff	callq	0x100018328
100040866:	48 8d 3d 8f ff 00 00	leaq	65423(%rip), %rdi ## literal pool for: "inconsistency in service domain during activate. Managed:%d. Domain:'%s'. Service:'%s'"
10004086d:	89 de	movl	%ebx, %esi
10004086f:	4c 89 e2	movq	%r12, %rdx
100040872:	48 89 c1	movq	%rax, %rcx
100040875:	31 c0	xorl	%eax, %eax
100040877:	e8 b9 e8 fc ff	callq	0x10000f135
10004087c:	48 89 c7	movq	%rax, %rdi
10004087f:	e8 30 0f 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040884:	0f 0b	ud2
100040886:	55	pushq	%rbp
100040887:	48 89 e5	movq	%rsp, %rbp
10004088a:	41 56	pushq	%r14
10004088c:	53	pushq	%rbx
10004088d:	41 89 d6	movl	%edx, %r14d
100040890:	48 89 f0	movq	%rsi, %rax
100040893:	31 db	xorl	%ebx, %ebx
100040895:	85 ff	testl	%edi, %edi
100040897:	0f 95 c3	setne	%bl
10004089a:	6a 01	pushq	$1
10004089c:	5e	popq	%rsi
10004089d:	48 89 c7	movq	%rax, %rdi
1000408a0:	e8 83 7a fd ff	callq	0x100018328
1000408a5:	48 8d 3d b3 00 01 00	leaq	65715(%rip), %rdi ## literal pool for: "overflow of service activation count during deactivation. Managed:%d. Count:%d. Service:'%s'"
1000408ac:	89 de	movl	%ebx, %esi
1000408ae:	44 89 f2	movl	%r14d, %edx
1000408b1:	48 89 c1	movq	%rax, %rcx
1000408b4:	31 c0	xorl	%eax, %eax
1000408b6:	e8 7a e8 fc ff	callq	0x10000f135
1000408bb:	48 89 c7	movq	%rax, %rdi
1000408be:	e8 f1 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000408c3:	0f 0b	ud2
1000408c5:	55	pushq	%rbp
1000408c6:	48 89 e5	movq	%rsp, %rbp
1000408c9:	41 56	pushq	%r14
1000408cb:	53	pushq	%rbx
1000408cc:	41 89 d6	movl	%edx, %r14d
1000408cf:	48 89 f0	movq	%rsi, %rax
1000408d2:	31 db	xorl	%ebx, %ebx
1000408d4:	85 ff	testl	%edi, %edi
1000408d6:	0f 95 c3	setne	%bl
1000408d9:	6a 01	pushq	$1
1000408db:	5e	popq	%rsi
1000408dc:	48 89 c7	movq	%rax, %rdi
1000408df:	e8 44 7a fd ff	callq	0x100018328
1000408e4:	48 8d 3d d1 00 01 00	leaq	65745(%rip), %rdi ## literal pool for: "underflow of service activation count during deactivate. Managed:%d. Count:%d. Service:'%s'"
1000408eb:	89 de	movl	%ebx, %esi
1000408ed:	44 89 f2	movl	%r14d, %edx
1000408f0:	48 89 c1	movq	%rax, %rcx
1000408f3:	31 c0	xorl	%eax, %eax
1000408f5:	e8 3b e8 fc ff	callq	0x10000f135
1000408fa:	48 89 c7	movq	%rax, %rdi
1000408fd:	e8 b2 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040902:	0f 0b	ud2
100040904:	55	pushq	%rbp
100040905:	48 89 e5	movq	%rsp, %rbp
100040908:	41 57	pushq	%r15
10004090a:	41 56	pushq	%r14
10004090c:	41 54	pushq	%r12
10004090e:	53	pushq	%rbx
10004090f:	49 89 d6	movq	%rdx, %r14
100040912:	31 db	xorl	%ebx, %ebx
100040914:	85 ff	testl	%edi, %edi
100040916:	0f 95 c3	setne	%bl
100040919:	6a 01	pushq	$1
10004091b:	41 5f	popq	%r15
10004091d:	48 89 f7	movq	%rsi, %rdi
100040920:	44 89 fe	movl	%r15d, %esi
100040923:	e8 e0 fb fd ff	callq	0x100020508
100040928:	49 89 c4	movq	%rax, %r12
10004092b:	4c 89 f7	movq	%r14, %rdi
10004092e:	44 89 fe	movl	%r15d, %esi
100040931:	e8 f2 79 fd ff	callq	0x100018328
100040936:	48 8d 3d c9 ff 00 00	leaq	65481(%rip), %rdi ## literal pool for: "inconsistency in service domain during deactivate. Managed:%d. Domain:'%s'. Service:'%s'"
10004093d:	89 de	movl	%ebx, %esi
10004093f:	4c 89 e2	movq	%r12, %rdx
100040942:	48 89 c1	movq	%rax, %rcx
100040945:	31 c0	xorl	%eax, %eax
100040947:	e8 e9 e7 fc ff	callq	0x10000f135
10004094c:	48 89 c7	movq	%rax, %rdi
10004094f:	e8 60 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040954:	0f 0b	ud2
100040956:	55	pushq	%rbp
100040957:	48 89 e5	movq	%rsp, %rbp
10004095a:	31 ff	xorl	%edi, %edi
10004095c:	e8 3b 0e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040961:	48 89 c7	movq	%rax, %rdi
100040964:	e8 4b 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040969:	0f 0b	ud2
10004096b:	55	pushq	%rbp
10004096c:	48 89 e5	movq	%rsp, %rbp
10004096f:	31 ff	xorl	%edi, %edi
100040971:	e8 26 0e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040976:	48 89 c7	movq	%rax, %rdi
100040979:	e8 36 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004097e:	0f 0b	ud2
100040980:	55	pushq	%rbp
100040981:	48 89 e5	movq	%rsp, %rbp
100040984:	31 ff	xorl	%edi, %edi
100040986:	e8 11 0e 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004098b:	48 89 c7	movq	%rax, %rdi
10004098e:	e8 21 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040993:	0f 0b	ud2
100040995:	55	pushq	%rbp
100040996:	48 89 e5	movq	%rsp, %rbp
100040999:	31 ff	xorl	%edi, %edi
10004099b:	e8 fc 0d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000409a0:	48 89 c7	movq	%rax, %rdi
1000409a3:	e8 0c 0e 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000409a8:	0f 0b	ud2
1000409aa:	55	pushq	%rbp
1000409ab:	48 89 e5	movq	%rsp, %rbp
1000409ae:	31 ff	xorl	%edi, %edi
1000409b0:	e8 e7 0d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000409b5:	48 89 c7	movq	%rax, %rdi
1000409b8:	e8 f7 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000409bd:	0f 0b	ud2
1000409bf:	55	pushq	%rbp
1000409c0:	48 89 e5	movq	%rsp, %rbp
1000409c3:	48 63 ff	movslq	%edi, %rdi
1000409c6:	e8 d1 0d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000409cb:	48 89 c7	movq	%rax, %rdi
1000409ce:	e8 e1 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000409d3:	0f 0b	ud2
1000409d5:	55	pushq	%rbp
1000409d6:	48 89 e5	movq	%rsp, %rbp
1000409d9:	31 ff	xorl	%edi, %edi
1000409db:	e8 bc 0d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000409e0:	48 89 c7	movq	%rax, %rdi
1000409e3:	e8 cc 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000409e8:	0f 0b	ud2
1000409ea:	55	pushq	%rbp
1000409eb:	48 89 e5	movq	%rsp, %rbp
1000409ee:	53	pushq	%rbx
1000409ef:	50	pushq	%rax
1000409f0:	48 89 fb	movq	%rdi, %rbx
1000409f3:	e8 68 0d 00 00	callq	0x100041760 ## symbol stub for: ___error
1000409f8:	48 63 10	movslq	(%rax), %rdx
1000409fb:	48 8d 3d 06 fa fd ff	leaq	-132602(%rip), %rdi
100040a02:	48 89 de	movq	%rbx, %rsi
100040a05:	e8 9e 0d 00 00	callq	0x1000417a8 ## symbol stub for: __os_assumes_log_ctx
100040a0a:	48 83 c4 08	addq	$8, %rsp
100040a0e:	5b	popq	%rbx
100040a0f:	5d	popq	%rbp
100040a10:	c3	retq
100040a11:	55	pushq	%rbp
100040a12:	48 89 e5	movq	%rsp, %rbp
100040a15:	48 8d 3d ac 29 00 00	leaq	10668(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040a1c:	e8 93 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a21:	0f 0b	ud2
100040a23:	55	pushq	%rbp
100040a24:	48 89 e5	movq	%rsp, %rbp
100040a27:	48 8d 3d c5 29 00 00	leaq	10693(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040a2e:	e8 81 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a33:	0f 0b	ud2
100040a35:	55	pushq	%rbp
100040a36:	48 89 e5	movq	%rsp, %rbp
100040a39:	31 ff	xorl	%edi, %edi
100040a3b:	e8 5c 0d 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040a40:	48 89 c7	movq	%rax, %rdi
100040a43:	e8 6c 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a48:	0f 0b	ud2
100040a4a:	55	pushq	%rbp
100040a4b:	48 89 e5	movq	%rsp, %rbp
100040a4e:	48 8d 3d 73 29 00 00	leaq	10611(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040a55:	e8 5a 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a5a:	0f 0b	ud2
100040a5c:	55	pushq	%rbp
100040a5d:	48 89 e5	movq	%rsp, %rbp
100040a60:	48 8d 3d 8c 29 00 00	leaq	10636(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040a67:	e8 48 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a6c:	0f 0b	ud2
100040a6e:	55	pushq	%rbp
100040a6f:	48 89 e5	movq	%rsp, %rbp
100040a72:	48 8d 3d 4f 29 00 00	leaq	10575(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040a79:	e8 36 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a7e:	0f 0b	ud2
100040a80:	55	pushq	%rbp
100040a81:	48 89 e5	movq	%rsp, %rbp
100040a84:	48 8d 3d 68 29 00 00	leaq	10600(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040a8b:	e8 24 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040a90:	0f 0b	ud2
100040a92:	90	nop
100040a93:	90	nop
100040a94:	90	nop
100040a95:	55	pushq	%rbp
100040a96:	48 89 e5	movq	%rsp, %rbp
100040a99:	48 8d 3d 28 29 00 00	leaq	10536(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040aa0:	e8 0f 0d 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040aa5:	0f 0b	ud2
100040aa7:	55	pushq	%rbp
100040aa8:	48 89 e5	movq	%rsp, %rbp
100040aab:	48 8d 3d 41 29 00 00	leaq	10561(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040ab2:	e8 fd 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ab7:	0f 0b	ud2
100040ab9:	55	pushq	%rbp
100040aba:	48 89 e5	movq	%rsp, %rbp
100040abd:	31 ff	xorl	%edi, %edi
100040abf:	e8 d8 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040ac4:	48 89 c7	movq	%rax, %rdi
100040ac7:	e8 e8 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040acc:	0f 0b	ud2
100040ace:	55	pushq	%rbp
100040acf:	48 89 e5	movq	%rsp, %rbp
100040ad2:	31 ff	xorl	%edi, %edi
100040ad4:	e8 c3 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040ad9:	48 89 c7	movq	%rax, %rdi
100040adc:	e8 d3 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ae1:	0f 0b	ud2
100040ae3:	55	pushq	%rbp
100040ae4:	48 89 e5	movq	%rsp, %rbp
100040ae7:	31 ff	xorl	%edi, %edi
100040ae9:	e8 ae 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040aee:	48 89 c7	movq	%rax, %rdi
100040af1:	e8 be 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040af6:	0f 0b	ud2
100040af8:	55	pushq	%rbp
100040af9:	48 89 e5	movq	%rsp, %rbp
100040afc:	31 ff	xorl	%edi, %edi
100040afe:	e8 99 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b03:	48 89 c7	movq	%rax, %rdi
100040b06:	e8 a9 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b0b:	0f 0b	ud2
100040b0d:	55	pushq	%rbp
100040b0e:	48 89 e5	movq	%rsp, %rbp
100040b11:	31 ff	xorl	%edi, %edi
100040b13:	e8 84 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b18:	48 89 c7	movq	%rax, %rdi
100040b1b:	e8 94 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b20:	0f 0b	ud2
100040b22:	55	pushq	%rbp
100040b23:	48 89 e5	movq	%rsp, %rbp
100040b26:	31 ff	xorl	%edi, %edi
100040b28:	e8 6f 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b2d:	48 89 c7	movq	%rax, %rdi
100040b30:	e8 7f 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b35:	0f 0b	ud2
100040b37:	55	pushq	%rbp
100040b38:	48 89 e5	movq	%rsp, %rbp
100040b3b:	31 ff	xorl	%edi, %edi
100040b3d:	e8 5a 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b42:	48 89 c7	movq	%rax, %rdi
100040b45:	e8 6a 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b4a:	0f 0b	ud2
100040b4c:	55	pushq	%rbp
100040b4d:	48 89 e5	movq	%rsp, %rbp
100040b50:	31 ff	xorl	%edi, %edi
100040b52:	e8 45 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b57:	48 89 c7	movq	%rax, %rdi
100040b5a:	e8 55 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b5f:	0f 0b	ud2
100040b61:	55	pushq	%rbp
100040b62:	48 89 e5	movq	%rsp, %rbp
100040b65:	31 ff	xorl	%edi, %edi
100040b67:	e8 30 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b6c:	48 89 c7	movq	%rax, %rdi
100040b6f:	e8 40 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b74:	0f 0b	ud2
100040b76:	55	pushq	%rbp
100040b77:	48 89 e5	movq	%rsp, %rbp
100040b7a:	31 ff	xorl	%edi, %edi
100040b7c:	e8 1b 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b81:	48 89 c7	movq	%rax, %rdi
100040b84:	e8 2b 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b89:	0f 0b	ud2
100040b8b:	55	pushq	%rbp
100040b8c:	48 89 e5	movq	%rsp, %rbp
100040b8f:	31 ff	xorl	%edi, %edi
100040b91:	e8 06 0c 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040b96:	48 89 c7	movq	%rax, %rdi
100040b99:	e8 16 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040b9e:	0f 0b	ud2
100040ba0:	55	pushq	%rbp
100040ba1:	48 89 e5	movq	%rsp, %rbp
100040ba4:	31 ff	xorl	%edi, %edi
100040ba6:	e8 f1 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040bab:	48 89 c7	movq	%rax, %rdi
100040bae:	e8 01 0c 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040bb3:	0f 0b	ud2
100040bb5:	55	pushq	%rbp
100040bb6:	48 89 e5	movq	%rsp, %rbp
100040bb9:	31 ff	xorl	%edi, %edi
100040bbb:	e8 dc 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040bc0:	48 89 c7	movq	%rax, %rdi
100040bc3:	e8 ec 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040bc8:	0f 0b	ud2
100040bca:	55	pushq	%rbp
100040bcb:	48 89 e5	movq	%rsp, %rbp
100040bce:	48 8d 3d f3 27 00 00	leaq	10227(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040bd5:	e8 da 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040bda:	0f 0b	ud2
100040bdc:	55	pushq	%rbp
100040bdd:	48 89 e5	movq	%rsp, %rbp
100040be0:	48 8d 3d 0c 28 00 00	leaq	10252(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040be7:	e8 c8 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040bec:	0f 0b	ud2
100040bee:	55	pushq	%rbp
100040bef:	48 89 e5	movq	%rsp, %rbp
100040bf2:	31 ff	xorl	%edi, %edi
100040bf4:	e8 a3 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040bf9:	48 89 c7	movq	%rax, %rdi
100040bfc:	e8 b3 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c01:	0f 0b	ud2
100040c03:	55	pushq	%rbp
100040c04:	48 89 e5	movq	%rsp, %rbp
100040c07:	31 ff	xorl	%edi, %edi
100040c09:	e8 8e 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040c0e:	48 89 c7	movq	%rax, %rdi
100040c11:	e8 9e 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c16:	0f 0b	ud2
100040c18:	55	pushq	%rbp
100040c19:	48 89 e5	movq	%rsp, %rbp
100040c1c:	31 ff	xorl	%edi, %edi
100040c1e:	e8 79 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040c23:	48 89 c7	movq	%rax, %rdi
100040c26:	e8 89 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c2b:	0f 0b	ud2
100040c2d:	55	pushq	%rbp
100040c2e:	48 89 e5	movq	%rsp, %rbp
100040c31:	e8 2a 0b 00 00	callq	0x100041760 ## symbol stub for: ___error
100040c36:	48 63 38	movslq	(%rax), %rdi
100040c39:	e8 64 0b 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040c3e:	5d	popq	%rbp
100040c3f:	c3	retq
100040c40:	90	nop
100040c41:	90	nop
100040c42:	90	nop
100040c43:	55	pushq	%rbp
100040c44:	48 89 e5	movq	%rsp, %rbp
100040c47:	48 8d 3d 7a 27 00 00	leaq	10106(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040c4e:	e8 61 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c53:	0f 0b	ud2
100040c55:	55	pushq	%rbp
100040c56:	48 89 e5	movq	%rsp, %rbp
100040c59:	48 8d 3d 93 27 00 00	leaq	10131(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040c60:	e8 4f 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c65:	0f 0b	ud2
100040c67:	55	pushq	%rbp
100040c68:	48 89 e5	movq	%rsp, %rbp
100040c6b:	31 ff	xorl	%edi, %edi
100040c6d:	e8 2a 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040c72:	48 89 c7	movq	%rax, %rdi
100040c75:	e8 3a 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c7a:	0f 0b	ud2
100040c7c:	55	pushq	%rbp
100040c7d:	48 89 e5	movq	%rsp, %rbp
100040c80:	31 ff	xorl	%edi, %edi
100040c82:	e8 15 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040c87:	48 89 c7	movq	%rax, %rdi
100040c8a:	e8 25 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040c8f:	0f 0b	ud2
100040c91:	55	pushq	%rbp
100040c92:	48 89 e5	movq	%rsp, %rbp
100040c95:	31 ff	xorl	%edi, %edi
100040c97:	e8 00 0b 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040c9c:	48 89 c7	movq	%rax, %rdi
100040c9f:	e8 10 0b 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ca4:	0f 0b	ud2
100040ca6:	55	pushq	%rbp
100040ca7:	48 89 e5	movq	%rsp, %rbp
100040caa:	31 ff	xorl	%edi, %edi
100040cac:	e8 eb 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040cb1:	48 89 c7	movq	%rax, %rdi
100040cb4:	e8 fb 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040cb9:	0f 0b	ud2
100040cbb:	55	pushq	%rbp
100040cbc:	48 89 e5	movq	%rsp, %rbp
100040cbf:	48 63 ff	movslq	%edi, %rdi
100040cc2:	e8 d5 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040cc7:	48 89 c7	movq	%rax, %rdi
100040cca:	e8 e5 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ccf:	0f 0b	ud2
100040cd1:	55	pushq	%rbp
100040cd2:	48 89 e5	movq	%rsp, %rbp
100040cd5:	31 ff	xorl	%edi, %edi
100040cd7:	e8 c0 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040cdc:	48 89 c7	movq	%rax, %rdi
100040cdf:	e8 d0 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ce4:	0f 0b	ud2
100040ce6:	55	pushq	%rbp
100040ce7:	48 89 e5	movq	%rsp, %rbp
100040cea:	31 ff	xorl	%edi, %edi
100040cec:	e8 ab 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040cf1:	48 89 c7	movq	%rax, %rdi
100040cf4:	e8 bb 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040cf9:	0f 0b	ud2
100040cfb:	55	pushq	%rbp
100040cfc:	48 89 e5	movq	%rsp, %rbp
100040cff:	31 ff	xorl	%edi, %edi
100040d01:	e8 96 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d06:	48 89 c7	movq	%rax, %rdi
100040d09:	e8 a6 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d0e:	0f 0b	ud2
100040d10:	55	pushq	%rbp
100040d11:	48 89 e5	movq	%rsp, %rbp
100040d14:	31 ff	xorl	%edi, %edi
100040d16:	e8 81 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d1b:	48 89 c7	movq	%rax, %rdi
100040d1e:	e8 91 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d23:	0f 0b	ud2
100040d25:	55	pushq	%rbp
100040d26:	48 89 e5	movq	%rsp, %rbp
100040d29:	31 ff	xorl	%edi, %edi
100040d2b:	e8 6c 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d30:	48 89 c7	movq	%rax, %rdi
100040d33:	e8 7c 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d38:	0f 0b	ud2
100040d3a:	55	pushq	%rbp
100040d3b:	48 89 e5	movq	%rsp, %rbp
100040d3e:	48 63 ff	movslq	%edi, %rdi
100040d41:	e8 56 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d46:	48 89 c7	movq	%rax, %rdi
100040d49:	e8 66 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d4e:	0f 0b	ud2
100040d50:	55	pushq	%rbp
100040d51:	48 89 e5	movq	%rsp, %rbp
100040d54:	31 ff	xorl	%edi, %edi
100040d56:	e8 41 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d5b:	48 89 c7	movq	%rax, %rdi
100040d5e:	e8 51 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d63:	0f 0b	ud2
100040d65:	55	pushq	%rbp
100040d66:	48 89 e5	movq	%rsp, %rbp
100040d69:	31 ff	xorl	%edi, %edi
100040d6b:	e8 2c 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d70:	48 89 c7	movq	%rax, %rdi
100040d73:	e8 3c 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d78:	0f 0b	ud2
100040d7a:	55	pushq	%rbp
100040d7b:	48 89 e5	movq	%rsp, %rbp
100040d7e:	31 ff	xorl	%edi, %edi
100040d80:	e8 17 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d85:	48 89 c7	movq	%rax, %rdi
100040d88:	e8 27 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040d8d:	0f 0b	ud2
100040d8f:	55	pushq	%rbp
100040d90:	48 89 e5	movq	%rsp, %rbp
100040d93:	31 ff	xorl	%edi, %edi
100040d95:	e8 02 0a 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040d9a:	48 89 c7	movq	%rax, %rdi
100040d9d:	e8 12 0a 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040da2:	0f 0b	ud2
100040da4:	55	pushq	%rbp
100040da5:	48 89 e5	movq	%rsp, %rbp
100040da8:	48 63 ff	movslq	%edi, %rdi
100040dab:	e8 ec 09 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040db0:	48 89 c7	movq	%rax, %rdi
100040db3:	e8 fc 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040db8:	0f 0b	ud2
100040dba:	55	pushq	%rbp
100040dbb:	48 89 e5	movq	%rsp, %rbp
100040dbe:	31 ff	xorl	%edi, %edi
100040dc0:	e8 d7 09 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040dc5:	48 89 c7	movq	%rax, %rdi
100040dc8:	e8 e7 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040dcd:	0f 0b	ud2
100040dcf:	55	pushq	%rbp
100040dd0:	48 89 e5	movq	%rsp, %rbp
100040dd3:	31 ff	xorl	%edi, %edi
100040dd5:	e8 c2 09 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040dda:	48 89 c7	movq	%rax, %rdi
100040ddd:	e8 d2 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040de2:	0f 0b	ud2
100040de4:	55	pushq	%rbp
100040de5:	48 89 e5	movq	%rsp, %rbp
100040de8:	31 ff	xorl	%edi, %edi
100040dea:	e8 ad 09 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040def:	48 89 c7	movq	%rax, %rdi
100040df2:	e8 bd 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040df7:	0f 0b	ud2
100040df9:	55	pushq	%rbp
100040dfa:	48 89 e5	movq	%rsp, %rbp
100040dfd:	48 8d 3d c4 25 00 00	leaq	9668(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040e04:	e8 ab 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e09:	0f 0b	ud2
100040e0b:	55	pushq	%rbp
100040e0c:	48 89 e5	movq	%rsp, %rbp
100040e0f:	48 8d 3d dd 25 00 00	leaq	9693(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040e16:	e8 99 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e1b:	0f 0b	ud2
100040e1d:	55	pushq	%rbp
100040e1e:	48 89 e5	movq	%rsp, %rbp
100040e21:	48 8d 3d a0 25 00 00	leaq	9632(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040e28:	e8 87 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e2d:	0f 0b	ud2
100040e2f:	55	pushq	%rbp
100040e30:	48 89 e5	movq	%rsp, %rbp
100040e33:	48 8d 3d b9 25 00 00	leaq	9657(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040e3a:	e8 75 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e3f:	0f 0b	ud2
100040e41:	55	pushq	%rbp
100040e42:	48 89 e5	movq	%rsp, %rbp
100040e45:	48 8d 3d 7c 25 00 00	leaq	9596(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040e4c:	e8 63 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e51:	0f 0b	ud2
100040e53:	55	pushq	%rbp
100040e54:	48 89 e5	movq	%rsp, %rbp
100040e57:	48 8d 3d 95 25 00 00	leaq	9621(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040e5e:	e8 51 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e63:	0f 0b	ud2
100040e65:	55	pushq	%rbp
100040e66:	48 89 e5	movq	%rsp, %rbp
100040e69:	48 8d 3d 58 25 00 00	leaq	9560(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040e70:	e8 3f 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e75:	0f 0b	ud2
100040e77:	55	pushq	%rbp
100040e78:	48 89 e5	movq	%rsp, %rbp
100040e7b:	48 8d 3d 71 25 00 00	leaq	9585(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040e82:	e8 2d 09 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040e87:	0f 0b	ud2
100040e89:	55	pushq	%rbp
100040e8a:	48 89 e5	movq	%rsp, %rbp
100040e8d:	e8 ce 08 00 00	callq	0x100041760 ## symbol stub for: ___error
100040e92:	48 63 38	movslq	(%rax), %rdi
100040e95:	e8 08 09 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040e9a:	5d	popq	%rbp
100040e9b:	c3	retq
100040e9c:	55	pushq	%rbp
100040e9d:	48 89 e5	movq	%rsp, %rbp
100040ea0:	e8 bb 08 00 00	callq	0x100041760 ## symbol stub for: ___error
100040ea5:	48 63 38	movslq	(%rax), %rdi
100040ea8:	e8 f5 08 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040ead:	5d	popq	%rbp
100040eae:	c3	retq
100040eaf:	55	pushq	%rbp
100040eb0:	48 89 e5	movq	%rsp, %rbp
100040eb3:	48 8d 3d 0e 25 00 00	leaq	9486(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040eba:	e8 f5 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ebf:	0f 0b	ud2
100040ec1:	55	pushq	%rbp
100040ec2:	48 89 e5	movq	%rsp, %rbp
100040ec5:	48 8d 3d 27 25 00 00	leaq	9511(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040ecc:	e8 e3 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ed1:	0f 0b	ud2
100040ed3:	55	pushq	%rbp
100040ed4:	48 89 e5	movq	%rsp, %rbp
100040ed7:	e8 84 08 00 00	callq	0x100041760 ## symbol stub for: ___error
100040edc:	48 63 38	movslq	(%rax), %rdi
100040edf:	e8 be 08 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100040ee4:	5d	popq	%rbp
100040ee5:	c3	retq
100040ee6:	55	pushq	%rbp
100040ee7:	48 89 e5	movq	%rsp, %rbp
100040eea:	48 8d 3d d7 24 00 00	leaq	9431(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040ef1:	e8 be 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040ef6:	0f 0b	ud2
100040ef8:	55	pushq	%rbp
100040ef9:	48 89 e5	movq	%rsp, %rbp
100040efc:	48 8d 3d f0 24 00 00	leaq	9456(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040f03:	e8 ac 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f08:	0f 0b	ud2
100040f0a:	55	pushq	%rbp
100040f0b:	48 89 e5	movq	%rsp, %rbp
100040f0e:	e8 4d 08 00 00	callq	0x100041760 ## symbol stub for: ___error
100040f13:	48 63 38	movslq	(%rax), %rdi
100040f16:	e8 81 08 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040f1b:	48 89 c7	movq	%rax, %rdi
100040f1e:	e8 91 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f23:	0f 0b	ud2
100040f25:	55	pushq	%rbp
100040f26:	48 89 e5	movq	%rsp, %rbp
100040f29:	48 8d 3d 98 24 00 00	leaq	9368(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100040f30:	e8 7f 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f35:	0f 0b	ud2
100040f37:	55	pushq	%rbp
100040f38:	48 89 e5	movq	%rsp, %rbp
100040f3b:	48 8d 3d b1 24 00 00	leaq	9393(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100040f42:	e8 6d 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f47:	0f 0b	ud2
100040f49:	55	pushq	%rbp
100040f4a:	48 89 e5	movq	%rsp, %rbp
100040f4d:	e8 0e 08 00 00	callq	0x100041760 ## symbol stub for: ___error
100040f52:	48 63 38	movslq	(%rax), %rdi
100040f55:	e8 42 08 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040f5a:	48 89 c7	movq	%rax, %rdi
100040f5d:	e8 52 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f62:	0f 0b	ud2
100040f64:	55	pushq	%rbp
100040f65:	48 89 e5	movq	%rsp, %rbp
100040f68:	e8 f3 07 00 00	callq	0x100041760 ## symbol stub for: ___error
100040f6d:	48 63 38	movslq	(%rax), %rdi
100040f70:	e8 27 08 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040f75:	48 89 c7	movq	%rax, %rdi
100040f78:	e8 37 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f7d:	0f 0b	ud2
100040f7f:	55	pushq	%rbp
100040f80:	48 89 e5	movq	%rsp, %rbp
100040f83:	e8 d8 07 00 00	callq	0x100041760 ## symbol stub for: ___error
100040f88:	48 63 38	movslq	(%rax), %rdi
100040f8b:	e8 0c 08 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040f90:	48 89 c7	movq	%rax, %rdi
100040f93:	e8 1c 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040f98:	0f 0b	ud2
100040f9a:	55	pushq	%rbp
100040f9b:	48 89 e5	movq	%rsp, %rbp
100040f9e:	e8 bd 07 00 00	callq	0x100041760 ## symbol stub for: ___error
100040fa3:	48 63 38	movslq	(%rax), %rdi
100040fa6:	e8 f1 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040fab:	48 89 c7	movq	%rax, %rdi
100040fae:	e8 01 08 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040fb3:	0f 0b	ud2
100040fb5:	55	pushq	%rbp
100040fb6:	48 89 e5	movq	%rsp, %rbp
100040fb9:	e8 a2 07 00 00	callq	0x100041760 ## symbol stub for: ___error
100040fbe:	48 63 38	movslq	(%rax), %rdi
100040fc1:	e8 d6 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040fc6:	48 89 c7	movq	%rax, %rdi
100040fc9:	e8 e6 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040fce:	0f 0b	ud2
100040fd0:	55	pushq	%rbp
100040fd1:	48 89 e5	movq	%rsp, %rbp
100040fd4:	e8 87 07 00 00	callq	0x100041760 ## symbol stub for: ___error
100040fd9:	48 63 38	movslq	(%rax), %rdi
100040fdc:	e8 bb 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040fe1:	48 89 c7	movq	%rax, %rdi
100040fe4:	e8 cb 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040fe9:	0f 0b	ud2
100040feb:	55	pushq	%rbp
100040fec:	48 89 e5	movq	%rsp, %rbp
100040fef:	48 63 ff	movslq	%edi, %rdi
100040ff2:	e8 a5 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100040ff7:	48 89 c7	movq	%rax, %rdi
100040ffa:	e8 b5 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100040fff:	0f 0b	ud2
100041001:	55	pushq	%rbp
100041002:	48 89 e5	movq	%rsp, %rbp
100041005:	48 63 ff	movslq	%edi, %rdi
100041008:	e8 8f 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004100d:	48 89 c7	movq	%rax, %rdi
100041010:	e8 9f 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041015:	0f 0b	ud2
100041017:	55	pushq	%rbp
100041018:	48 89 e5	movq	%rsp, %rbp
10004101b:	48 63 ff	movslq	%edi, %rdi
10004101e:	e8 79 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041023:	48 89 c7	movq	%rax, %rdi
100041026:	e8 89 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004102b:	0f 0b	ud2
10004102d:	55	pushq	%rbp
10004102e:	48 89 e5	movq	%rsp, %rbp
100041031:	48 63 ff	movslq	%edi, %rdi
100041034:	e8 63 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041039:	48 89 c7	movq	%rax, %rdi
10004103c:	e8 73 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041041:	0f 0b	ud2
100041043:	55	pushq	%rbp
100041044:	48 89 e5	movq	%rsp, %rbp
100041047:	48 63 ff	movslq	%edi, %rdi
10004104a:	e8 4d 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004104f:	48 89 c7	movq	%rax, %rdi
100041052:	e8 5d 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041057:	0f 0b	ud2
100041059:	55	pushq	%rbp
10004105a:	48 89 e5	movq	%rsp, %rbp
10004105d:	e8 fe 06 00 00	callq	0x100041760 ## symbol stub for: ___error
100041062:	48 63 38	movslq	(%rax), %rdi
100041065:	e8 38 07 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10004106a:	5d	popq	%rbp
10004106b:	c3	retq
10004106c:	55	pushq	%rbp
10004106d:	48 89 e5	movq	%rsp, %rbp
100041070:	e8 eb 06 00 00	callq	0x100041760 ## symbol stub for: ___error
100041075:	48 63 38	movslq	(%rax), %rdi
100041078:	e8 1f 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004107d:	48 89 c7	movq	%rax, %rdi
100041080:	e8 2f 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041085:	0f 0b	ud2
100041087:	55	pushq	%rbp
100041088:	48 89 e5	movq	%rsp, %rbp
10004108b:	e8 d0 06 00 00	callq	0x100041760 ## symbol stub for: ___error
100041090:	48 63 38	movslq	(%rax), %rdi
100041093:	e8 04 07 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041098:	48 89 c7	movq	%rax, %rdi
10004109b:	e8 14 07 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000410a0:	0f 0b	ud2
1000410a2:	55	pushq	%rbp
1000410a3:	48 89 e5	movq	%rsp, %rbp
1000410a6:	e8 b5 06 00 00	callq	0x100041760 ## symbol stub for: ___error
1000410ab:	48 63 38	movslq	(%rax), %rdi
1000410ae:	e8 e9 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000410b3:	48 89 c7	movq	%rax, %rdi
1000410b6:	e8 f9 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000410bb:	0f 0b	ud2
1000410bd:	55	pushq	%rbp
1000410be:	48 89 e5	movq	%rsp, %rbp
1000410c1:	e8 9a 06 00 00	callq	0x100041760 ## symbol stub for: ___error
1000410c6:	48 63 38	movslq	(%rax), %rdi
1000410c9:	e8 ce 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000410ce:	48 89 c7	movq	%rax, %rdi
1000410d1:	e8 de 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000410d6:	0f 0b	ud2
1000410d8:	55	pushq	%rbp
1000410d9:	48 89 e5	movq	%rsp, %rbp
1000410dc:	e8 7f 06 00 00	callq	0x100041760 ## symbol stub for: ___error
1000410e1:	48 63 38	movslq	(%rax), %rdi
1000410e4:	e8 b3 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000410e9:	48 89 c7	movq	%rax, %rdi
1000410ec:	e8 c3 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000410f1:	0f 0b	ud2
1000410f3:	55	pushq	%rbp
1000410f4:	48 89 e5	movq	%rsp, %rbp
1000410f7:	e8 64 06 00 00	callq	0x100041760 ## symbol stub for: ___error
1000410fc:	48 63 38	movslq	(%rax), %rdi
1000410ff:	e8 98 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041104:	48 89 c7	movq	%rax, %rdi
100041107:	e8 a8 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004110c:	0f 0b	ud2
10004110e:	55	pushq	%rbp
10004110f:	48 89 e5	movq	%rsp, %rbp
100041112:	48 63 ff	movslq	%edi, %rdi
100041115:	e8 82 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004111a:	48 89 c7	movq	%rax, %rdi
10004111d:	e8 92 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041122:	0f 0b	ud2
100041124:	55	pushq	%rbp
100041125:	48 89 e5	movq	%rsp, %rbp
100041128:	48 63 ff	movslq	%edi, %rdi
10004112b:	e8 6c 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041130:	48 89 c7	movq	%rax, %rdi
100041133:	e8 7c 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041138:	0f 0b	ud2
10004113a:	55	pushq	%rbp
10004113b:	48 89 e5	movq	%rsp, %rbp
10004113e:	48 63 ff	movslq	%edi, %rdi
100041141:	e8 56 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041146:	48 89 c7	movq	%rax, %rdi
100041149:	e8 66 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004114e:	0f 0b	ud2
100041150:	55	pushq	%rbp
100041151:	48 89 e5	movq	%rsp, %rbp
100041154:	48 63 ff	movslq	%edi, %rdi
100041157:	e8 40 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004115c:	48 89 c7	movq	%rax, %rdi
10004115f:	e8 50 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041164:	0f 0b	ud2
100041166:	55	pushq	%rbp
100041167:	48 89 e5	movq	%rsp, %rbp
10004116a:	48 63 ff	movslq	%edi, %rdi
10004116d:	e8 2a 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041172:	48 89 c7	movq	%rax, %rdi
100041175:	e8 3a 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004117a:	0f 0b	ud2
10004117c:	55	pushq	%rbp
10004117d:	48 89 e5	movq	%rsp, %rbp
100041180:	31 ff	xorl	%edi, %edi
100041182:	e8 15 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041187:	48 89 c7	movq	%rax, %rdi
10004118a:	e8 25 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004118f:	0f 0b	ud2
100041191:	55	pushq	%rbp
100041192:	48 89 e5	movq	%rsp, %rbp
100041195:	31 ff	xorl	%edi, %edi
100041197:	e8 00 06 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004119c:	48 89 c7	movq	%rax, %rdi
10004119f:	e8 10 06 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000411a4:	0f 0b	ud2
1000411a6:	55	pushq	%rbp
1000411a7:	48 89 e5	movq	%rsp, %rbp
1000411aa:	e8 b1 05 00 00	callq	0x100041760 ## symbol stub for: ___error
1000411af:	48 63 38	movslq	(%rax), %rdi
1000411b2:	e8 e5 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000411b7:	48 89 c7	movq	%rax, %rdi
1000411ba:	e8 f5 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000411bf:	0f 0b	ud2
1000411c1:	55	pushq	%rbp
1000411c2:	48 89 e5	movq	%rsp, %rbp
1000411c5:	e8 96 05 00 00	callq	0x100041760 ## symbol stub for: ___error
1000411ca:	48 63 38	movslq	(%rax), %rdi
1000411cd:	e8 ca 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000411d2:	48 89 c7	movq	%rax, %rdi
1000411d5:	e8 da 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000411da:	0f 0b	ud2
1000411dc:	55	pushq	%rbp
1000411dd:	48 89 e5	movq	%rsp, %rbp
1000411e0:	e8 7b 05 00 00	callq	0x100041760 ## symbol stub for: ___error
1000411e5:	48 63 38	movslq	(%rax), %rdi
1000411e8:	e8 af 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000411ed:	48 89 c7	movq	%rax, %rdi
1000411f0:	e8 bf 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000411f5:	0f 0b	ud2
1000411f7:	55	pushq	%rbp
1000411f8:	48 89 e5	movq	%rsp, %rbp
1000411fb:	e8 60 05 00 00	callq	0x100041760 ## symbol stub for: ___error
100041200:	48 63 38	movslq	(%rax), %rdi
100041203:	e8 94 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041208:	48 89 c7	movq	%rax, %rdi
10004120b:	e8 a4 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041210:	0f 0b	ud2
100041212:	55	pushq	%rbp
100041213:	48 89 e5	movq	%rsp, %rbp
100041216:	e8 45 05 00 00	callq	0x100041760 ## symbol stub for: ___error
10004121b:	48 63 38	movslq	(%rax), %rdi
10004121e:	e8 79 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041223:	48 89 c7	movq	%rax, %rdi
100041226:	e8 89 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004122b:	0f 0b	ud2
10004122d:	55	pushq	%rbp
10004122e:	48 89 e5	movq	%rsp, %rbp
100041231:	e8 2a 05 00 00	callq	0x100041760 ## symbol stub for: ___error
100041236:	48 63 38	movslq	(%rax), %rdi
100041239:	e8 5e 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004123e:	48 89 c7	movq	%rax, %rdi
100041241:	e8 6e 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041246:	0f 0b	ud2
100041248:	55	pushq	%rbp
100041249:	48 89 e5	movq	%rsp, %rbp
10004124c:	48 63 ff	movslq	%edi, %rdi
10004124f:	e8 48 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041254:	48 89 c7	movq	%rax, %rdi
100041257:	e8 58 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004125c:	0f 0b	ud2
10004125e:	55	pushq	%rbp
10004125f:	48 89 e5	movq	%rsp, %rbp
100041262:	48 63 ff	movslq	%edi, %rdi
100041265:	e8 32 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004126a:	48 89 c7	movq	%rax, %rdi
10004126d:	e8 42 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041272:	0f 0b	ud2
100041274:	55	pushq	%rbp
100041275:	48 89 e5	movq	%rsp, %rbp
100041278:	48 63 ff	movslq	%edi, %rdi
10004127b:	e8 1c 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041280:	48 89 c7	movq	%rax, %rdi
100041283:	e8 2c 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041288:	0f 0b	ud2
10004128a:	55	pushq	%rbp
10004128b:	48 89 e5	movq	%rsp, %rbp
10004128e:	48 63 ff	movslq	%edi, %rdi
100041291:	e8 06 05 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041296:	48 89 c7	movq	%rax, %rdi
100041299:	e8 16 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004129e:	0f 0b	ud2
1000412a0:	55	pushq	%rbp
1000412a1:	48 89 e5	movq	%rsp, %rbp
1000412a4:	48 63 ff	movslq	%edi, %rdi
1000412a7:	e8 f0 04 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000412ac:	48 89 c7	movq	%rax, %rdi
1000412af:	e8 00 05 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000412b4:	0f 0b	ud2
1000412b6:	55	pushq	%rbp
1000412b7:	48 89 e5	movq	%rsp, %rbp
1000412ba:	48 63 ff	movslq	%edi, %rdi
1000412bd:	e8 da 04 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000412c2:	48 89 c7	movq	%rax, %rdi
1000412c5:	e8 ea 04 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000412ca:	0f 0b	ud2
1000412cc:	55	pushq	%rbp
1000412cd:	48 89 e5	movq	%rsp, %rbp
1000412d0:	e8 8b 04 00 00	callq	0x100041760 ## symbol stub for: ___error
1000412d5:	48 63 38	movslq	(%rax), %rdi
1000412d8:	e8 bf 04 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000412dd:	48 89 c7	movq	%rax, %rdi
1000412e0:	e8 cf 04 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000412e5:	0f 0b	ud2
1000412e7:	55	pushq	%rbp
1000412e8:	48 89 e5	movq	%rsp, %rbp
1000412eb:	e8 70 04 00 00	callq	0x100041760 ## symbol stub for: ___error
1000412f0:	48 63 38	movslq	(%rax), %rdi
1000412f3:	e8 aa 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000412f8:	5d	popq	%rbp
1000412f9:	c3	retq
1000412fa:	55	pushq	%rbp
1000412fb:	48 89 e5	movq	%rsp, %rbp
1000412fe:	53	pushq	%rbx
1000412ff:	50	pushq	%rax
100041300:	89 fb	movl	%edi, %ebx
100041302:	e8 59 04 00 00	callq	0x100041760 ## symbol stub for: ___error
100041307:	48 63 38	movslq	(%rax), %rdi
10004130a:	e8 93 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10004130f:	89 df	movl	%ebx, %edi
100041311:	e8 9e 14 ff ff	callq	0x1000327b4
100041316:	48 83 c4 08	addq	$8, %rsp
10004131a:	5b	popq	%rbx
10004131b:	5d	popq	%rbp
10004131c:	c3	retq
10004131d:	55	pushq	%rbp
10004131e:	48 89 e5	movq	%rsp, %rbp
100041321:	53	pushq	%rbx
100041322:	50	pushq	%rax
100041323:	89 fb	movl	%edi, %ebx
100041325:	e8 36 04 00 00	callq	0x100041760 ## symbol stub for: ___error
10004132a:	48 63 38	movslq	(%rax), %rdi
10004132d:	e8 70 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100041332:	89 df	movl	%ebx, %edi
100041334:	e8 7b 14 ff ff	callq	0x1000327b4
100041339:	48 83 c4 08	addq	$8, %rsp
10004133d:	5b	popq	%rbx
10004133e:	5d	popq	%rbp
10004133f:	c3	retq
100041340:	55	pushq	%rbp
100041341:	48 89 e5	movq	%rsp, %rbp
100041344:	e8 17 04 00 00	callq	0x100041760 ## symbol stub for: ___error
100041349:	48 63 38	movslq	(%rax), %rdi
10004134c:	e8 51 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100041351:	5d	popq	%rbp
100041352:	c3	retq
100041353:	55	pushq	%rbp
100041354:	48 89 e5	movq	%rsp, %rbp
100041357:	53	pushq	%rbx
100041358:	50	pushq	%rax
100041359:	89 fb	movl	%edi, %ebx
10004135b:	e8 00 04 00 00	callq	0x100041760 ## symbol stub for: ___error
100041360:	48 63 38	movslq	(%rax), %rdi
100041363:	e8 3a 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100041368:	89 df	movl	%ebx, %edi
10004136a:	e8 45 14 ff ff	callq	0x1000327b4
10004136f:	48 83 c4 08	addq	$8, %rsp
100041373:	5b	popq	%rbx
100041374:	5d	popq	%rbp
100041375:	c3	retq
100041376:	55	pushq	%rbp
100041377:	48 89 e5	movq	%rsp, %rbp
10004137a:	53	pushq	%rbx
10004137b:	50	pushq	%rax
10004137c:	89 fb	movl	%edi, %ebx
10004137e:	e8 dd 03 00 00	callq	0x100041760 ## symbol stub for: ___error
100041383:	48 63 38	movslq	(%rax), %rdi
100041386:	e8 17 04 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
10004138b:	89 df	movl	%ebx, %edi
10004138d:	e8 22 14 ff ff	callq	0x1000327b4
100041392:	48 83 c4 08	addq	$8, %rsp
100041396:	5b	popq	%rbx
100041397:	5d	popq	%rbp
100041398:	c3	retq
100041399:	55	pushq	%rbp
10004139a:	48 89 e5	movq	%rsp, %rbp
10004139d:	53	pushq	%rbx
10004139e:	50	pushq	%rax
10004139f:	89 fb	movl	%edi, %ebx
1000413a1:	e8 ba 03 00 00	callq	0x100041760 ## symbol stub for: ___error
1000413a6:	48 63 38	movslq	(%rax), %rdi
1000413a9:	e8 f4 03 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
1000413ae:	89 df	movl	%ebx, %edi
1000413b0:	e8 ff 13 ff ff	callq	0x1000327b4
1000413b5:	48 83 c4 08	addq	$8, %rsp
1000413b9:	5b	popq	%rbx
1000413ba:	5d	popq	%rbp
1000413bb:	c3	retq
1000413bc:	55	pushq	%rbp
1000413bd:	48 89 e5	movq	%rsp, %rbp
1000413c0:	48 8d 3d 01 20 00 00	leaq	8193(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
1000413c7:	e8 e8 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000413cc:	0f 0b	ud2
1000413ce:	55	pushq	%rbp
1000413cf:	48 89 e5	movq	%rsp, %rbp
1000413d2:	48 8d 3d 1a 20 00 00	leaq	8218(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
1000413d9:	e8 d6 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000413de:	0f 0b	ud2
1000413e0:	55	pushq	%rbp
1000413e1:	48 89 e5	movq	%rsp, %rbp
1000413e4:	31 ff	xorl	%edi, %edi
1000413e6:	e8 b1 03 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000413eb:	48 89 c7	movq	%rax, %rdi
1000413ee:	e8 c1 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000413f3:	0f 0b	ud2
1000413f5:	55	pushq	%rbp
1000413f6:	48 89 e5	movq	%rsp, %rbp
1000413f9:	48 8d 3d c8 1f 00 00	leaq	8136(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100041400:	e8 af 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041405:	0f 0b	ud2
100041407:	55	pushq	%rbp
100041408:	48 89 e5	movq	%rsp, %rbp
10004140b:	48 8d 3d e1 1f 00 00	leaq	8161(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100041412:	e8 9d 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041417:	0f 0b	ud2
100041419:	55	pushq	%rbp
10004141a:	48 89 e5	movq	%rsp, %rbp
10004141d:	31 ff	xorl	%edi, %edi
10004141f:	e8 78 03 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041424:	48 89 c7	movq	%rax, %rdi
100041427:	e8 88 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004142c:	0f 0b	ud2
10004142e:	55	pushq	%rbp
10004142f:	48 89 e5	movq	%rsp, %rbp
100041432:	31 ff	xorl	%edi, %edi
100041434:	e8 63 03 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041439:	48 89 c7	movq	%rax, %rdi
10004143c:	e8 73 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041441:	0f 0b	ud2
100041443:	55	pushq	%rbp
100041444:	48 89 e5	movq	%rsp, %rbp
100041447:	48 8d 3d 7a 1f 00 00	leaq	8058(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
10004144e:	e8 61 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041453:	0f 0b	ud2
100041455:	55	pushq	%rbp
100041456:	48 89 e5	movq	%rsp, %rbp
100041459:	48 8d 3d 93 1f 00 00	leaq	8083(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100041460:	e8 4f 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041465:	0f 0b	ud2
100041467:	55	pushq	%rbp
100041468:	48 89 e5	movq	%rsp, %rbp
10004146b:	31 ff	xorl	%edi, %edi
10004146d:	e8 2a 03 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041472:	48 89 c7	movq	%rax, %rdi
100041475:	e8 3a 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004147a:	0f 0b	ud2
10004147c:	55	pushq	%rbp
10004147d:	48 89 e5	movq	%rsp, %rbp
100041480:	48 8d 3d 41 1f 00 00	leaq	8001(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100041487:	e8 28 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004148c:	0f 0b	ud2
10004148e:	55	pushq	%rbp
10004148f:	48 89 e5	movq	%rsp, %rbp
100041492:	48 8d 3d 5a 1f 00 00	leaq	8026(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100041499:	e8 16 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004149e:	0f 0b	ud2
1000414a0:	55	pushq	%rbp
1000414a1:	48 89 e5	movq	%rsp, %rbp
1000414a4:	31 ff	xorl	%edi, %edi
1000414a6:	e8 f1 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000414ab:	48 89 c7	movq	%rax, %rdi
1000414ae:	e8 01 03 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000414b3:	0f 0b	ud2
1000414b5:	55	pushq	%rbp
1000414b6:	48 89 e5	movq	%rsp, %rbp
1000414b9:	31 ff	xorl	%edi, %edi
1000414bb:	e8 dc 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000414c0:	48 89 c7	movq	%rax, %rdi
1000414c3:	e8 ec 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000414c8:	0f 0b	ud2
1000414ca:	55	pushq	%rbp
1000414cb:	48 89 e5	movq	%rsp, %rbp
1000414ce:	31 ff	xorl	%edi, %edi
1000414d0:	e8 c7 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000414d5:	48 89 c7	movq	%rax, %rdi
1000414d8:	e8 d7 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000414dd:	0f 0b	ud2
1000414df:	55	pushq	%rbp
1000414e0:	48 89 e5	movq	%rsp, %rbp
1000414e3:	48 8d 3d de 1e 00 00	leaq	7902(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
1000414ea:	e8 c5 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000414ef:	0f 0b	ud2
1000414f1:	55	pushq	%rbp
1000414f2:	48 89 e5	movq	%rsp, %rbp
1000414f5:	48 8d 3d f7 1e 00 00	leaq	7927(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
1000414fc:	e8 b3 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041501:	0f 0b	ud2
100041503:	90	nop
100041504:	90	nop
100041505:	90	nop
100041506:	90	nop
100041507:	55	pushq	%rbp
100041508:	48 89 e5	movq	%rsp, %rbp
10004150b:	48 8d 3d b6 1e 00 00	leaq	7862(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100041512:	e8 9d 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041517:	0f 0b	ud2
100041519:	55	pushq	%rbp
10004151a:	48 89 e5	movq	%rsp, %rbp
10004151d:	48 8d 3d cf 1e 00 00	leaq	7887(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
100041524:	e8 8b 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041529:	0f 0b	ud2
10004152b:	55	pushq	%rbp
10004152c:	48 89 e5	movq	%rsp, %rbp
10004152f:	31 ff	xorl	%edi, %edi
100041531:	e8 66 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041536:	48 89 c7	movq	%rax, %rdi
100041539:	e8 76 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004153e:	0f 0b	ud2
100041540:	55	pushq	%rbp
100041541:	48 89 e5	movq	%rsp, %rbp
100041544:	31 ff	xorl	%edi, %edi
100041546:	e8 51 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004154b:	48 89 c7	movq	%rax, %rdi
10004154e:	e8 61 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041553:	0f 0b	ud2
100041555:	55	pushq	%rbp
100041556:	48 89 e5	movq	%rsp, %rbp
100041559:	31 ff	xorl	%edi, %edi
10004155b:	e8 3c 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041560:	48 89 c7	movq	%rax, %rdi
100041563:	e8 4c 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041568:	0f 0b	ud2
10004156a:	55	pushq	%rbp
10004156b:	48 89 e5	movq	%rsp, %rbp
10004156e:	89 f8	movl	%edi, %eax
100041570:	48 8d 0d ee 10 01 00	leaq	69870(%rip), %rcx ## literal pool for: "libdispatch bug: Unknown send-right"
100041577:	48 89 0d 4a 11 02 00	movq	%rcx, 135498(%rip)
10004157e:	48 89 05 73 11 02 00	movq	%rax, 135539(%rip)
100041585:	0f 0b	ud2
100041587:	55	pushq	%rbp
100041588:	48 89 e5	movq	%rsp, %rbp
10004158b:	48 63 ff	movslq	%edi, %rdi
10004158e:	e8 09 02 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041593:	48 89 c7	movq	%rax, %rdi
100041596:	e8 19 02 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004159b:	0f 0b	ud2
10004159d:	55	pushq	%rbp
10004159e:	48 89 e5	movq	%rsp, %rbp
1000415a1:	89 f8	movl	%edi, %eax
1000415a3:	48 8d 0d df 10 01 00	leaq	69855(%rip), %rcx ## literal pool for: "libdispatch bug: Unknown receive-right"
1000415aa:	48 89 0d 17 11 02 00	movq	%rcx, 135447(%rip)
1000415b1:	48 89 05 40 11 02 00	movq	%rax, 135488(%rip)
1000415b8:	0f 0b	ud2
1000415ba:	66 0f 1f 44 00 00	nopw	(%rax,%rax)
1000415c0:	55	pushq	%rbp
1000415c1:	48 89 e5	movq	%rsp, %rbp
1000415c4:	48 8d 3d fd 1d 00 00	leaq	7677(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
1000415cb:	e8 e4 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000415d0:	0f 0b	ud2
1000415d2:	55	pushq	%rbp
1000415d3:	48 89 e5	movq	%rsp, %rbp
1000415d6:	48 8d 3d 16 1e 00 00	leaq	7702(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
1000415dd:	e8 d2 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000415e2:	0f 0b	ud2
1000415e4:	55	pushq	%rbp
1000415e5:	48 89 e5	movq	%rsp, %rbp
1000415e8:	31 ff	xorl	%edi, %edi
1000415ea:	e8 ad 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000415ef:	48 89 c7	movq	%rax, %rdi
1000415f2:	e8 bd 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000415f7:	0f 0b	ud2
1000415f9:	55	pushq	%rbp
1000415fa:	48 89 e5	movq	%rsp, %rbp
1000415fd:	83 f7 01	xorl	$1, %edi
100041600:	0f b7 ff	movzwl	%di, %edi
100041603:	e8 94 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041608:	48 89 c7	movq	%rax, %rdi
10004160b:	e8 a4 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041610:	0f 0b	ud2
100041612:	55	pushq	%rbp
100041613:	48 89 e5	movq	%rsp, %rbp
100041616:	0f b7 ff	movzwl	%di, %edi
100041619:	c1 ef 03	shrl	$3, %edi
10004161c:	83 f7 01	xorl	$1, %edi
10004161f:	e8 78 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041624:	48 89 c7	movq	%rax, %rdi
100041627:	e8 88 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004162c:	0f 0b	ud2
10004162e:	55	pushq	%rbp
10004162f:	48 89 e5	movq	%rsp, %rbp
100041632:	31 ff	xorl	%edi, %edi
100041634:	e8 63 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041639:	48 89 c7	movq	%rax, %rdi
10004163c:	e8 73 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041641:	0f 0b	ud2
100041643:	55	pushq	%rbp
100041644:	48 89 e5	movq	%rsp, %rbp
100041647:	31 ff	xorl	%edi, %edi
100041649:	e8 4e 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004164e:	48 89 c7	movq	%rax, %rdi
100041651:	e8 5e 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
100041656:	0f 0b	ud2
100041658:	55	pushq	%rbp
100041659:	48 89 e5	movq	%rsp, %rbp
10004165c:	31 ff	xorl	%edi, %edi
10004165e:	e8 39 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
100041663:	48 89 c7	movq	%rax, %rdi
100041666:	e8 49 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004166b:	0f 0b	ud2
10004166d:	55	pushq	%rbp
10004166e:	48 89 e5	movq	%rsp, %rbp
100041671:	48 8d 3d 50 1d 00 00	leaq	7504(%rip), %rdi ## literal pool for: "optional cannot be created with NULL value"
100041678:	e8 37 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004167d:	0f 0b	ud2
10004167f:	55	pushq	%rbp
100041680:	48 89 e5	movq	%rsp, %rbp
100041683:	48 8d 3d 69 1d 00 00	leaq	7529(%rip), %rdi ## literal pool for: "optional cannot be created with zero error"
10004168a:	e8 25 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
10004168f:	0f 0b	ud2
100041691:	55	pushq	%rbp
100041692:	48 89 e5	movq	%rsp, %rbp
100041695:	31 ff	xorl	%edi, %edi
100041697:	e8 00 01 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
10004169c:	48 89 c7	movq	%rax, %rdi
10004169f:	e8 10 01 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000416a4:	0f 0b	ud2
1000416a6:	55	pushq	%rbp
1000416a7:	48 89 e5	movq	%rsp, %rbp
1000416aa:	48 63 ff	movslq	%edi, %rdi
1000416ad:	e8 ea 00 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000416b2:	48 89 c7	movq	%rax, %rdi
1000416b5:	e8 fa 00 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000416ba:	0f 0b	ud2
1000416bc:	55	pushq	%rbp
1000416bd:	48 89 e5	movq	%rsp, %rbp
1000416c0:	e8 9b 00 00 00	callq	0x100041760 ## symbol stub for: ___error
1000416c5:	48 63 38	movslq	(%rax), %rdi
1000416c8:	e8 cf 00 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000416cd:	48 89 c7	movq	%rax, %rdi
1000416d0:	e8 df 00 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000416d5:	0f 0b	ud2
1000416d7:	55	pushq	%rbp
1000416d8:	48 89 e5	movq	%rsp, %rbp
1000416db:	e8 80 00 00 00	callq	0x100041760 ## symbol stub for: ___error
1000416e0:	48 63 38	movslq	(%rax), %rdi
1000416e3:	e8 b4 00 00 00	callq	0x10004179c ## symbol stub for: __os_assert_log
1000416e8:	48 89 c7	movq	%rax, %rdi
1000416eb:	e8 c4 00 00 00	callq	0x1000417b4 ## symbol stub for: __os_crash
1000416f0:	0f 0b	ud2
1000416f2:	55	pushq	%rbp
1000416f3:	48 89 e5	movq	%rsp, %rbp
1000416f6:	e8 65 00 00 00	callq	0x100041760 ## symbol stub for: ___error
1000416fb:	48 63 38	movslq	(%rax), %rdi
1000416fe:	e8 9f 00 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100041703:	5d	popq	%rbp
100041704:	c3	retq
100041705:	55	pushq	%rbp
100041706:	48 89 e5	movq	%rsp, %rbp
100041709:	e8 52 00 00 00	callq	0x100041760 ## symbol stub for: ___error
10004170e:	48 63 38	movslq	(%rax), %rdi
100041711:	e8 8c 00 00 00	callq	0x1000417a2 ## symbol stub for: __os_assumes_log
100041716:	5d	popq	%rbp
100041717:	c3	retq
